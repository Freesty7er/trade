
#Область ОбработкаИзмененийРеквизитовТабличныхЧастей

// Рассчитывает суммы табличных частей.
//
// Параметры
//  ДанныеСтроки  - ДокументТабличнаяЧастьСтрока.<Имя документа>.<Имя табличной части>, ДанныеФормыЭлементКоллекции –
//                 строка табличной части, для которой рассчитываются суммы.
//
Процедура РассчитатьДанныеСтроки(данныеСтроки) Экспорт

	естьСуммаБезСкидки = Ложь;
	Если ТипЗнч(данныеСтроки) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		естьСуммаБезСкидки = данныеСтроки.Свойство("СуммаБезСкидки");
	Иначе
		естьСуммаБезСкидки = ОбщегоНазначенияСервер.ОпределитьНаличиеРеквизита(данныеСтроки, "СуммаБезСкидки");
	КонецЕсли; 
	
	естьСуммаНДС = Ложь;
	Если ТипЗнч(данныеСтроки) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		естьСуммаНДС = данныеСтроки.Свойство("СуммаНДС");
	Иначе
		естьСуммаНДС = ОбщегоНазначенияСервер.ОпределитьНаличиеРеквизита(данныеСтроки, "СуммаНДС");
	КонецЕсли; 
	
	Если естьСуммаБезСкидки Тогда
		реквизитСумма = "СуммаБезСкидки";
	Иначе
		реквизитСумма = "Сумма";
	КонецЕсли; 
	
	данныеСтроки[реквизитСумма] = данныеСтроки.Цена * данныеСтроки.Количество;
	
	// СДЕЛАТЬ: По какой-то причине сумма НДС рассчитывается от суммы без скидки. Это неправильно.
	// Нужно прояснить ситуацию и исправить расчёт.
	Если естьСуммаНДС Тогда
		данныеСтроки.СуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(данныеСтроки[реквизитСумма], Истина, данныеСтроки.СтавкаНДС);
	КонецЕсли; 
	
	Если естьСуммаБезСкидки Тогда
	
		данныеСтроки.Скидка = данныеСтроки.СуммаБезСкидки * данныеСтроки.ПроцентСкидки / 100;
		данныеСтроки.Сумма = данныеСтроки.СуммаБезСкидки - данныеСтроки.Скидка;
	
	КонецЕсли; 
	
КонецПроцедуры // РассчитатьДанныеСтроки()

// Возникает после изменения значения суммовых реквизитов табличной части.
//
// Параметры
//  ДанныеСтроки  - ДокументТабличнаяЧастьСтрока.<Имя документа>.<Имя табличной части> - Текущие
//                 данные табличной части.
//
Процедура ПриИзмененииСуммы(ДанныеСтроки) Экспорт

	ДанныеСтроки.Цена = ?(ДанныеСтроки.Количество = 0, ДанныеСтроки.Сумма, ДанныеСтроки.Сумма / ДанныеСтроки.Количество);
	
КонецПроцедуры // ПриИзмененииСуммы()

#КонецОбласти 

#Область ДополнительныеПроцедурыИФункции

// Создает массив и копирует в него значения, содержащиеся в колонке таблицы.
//
// Параметры:
//  Коллекция  - ДанныеФормыКоллекция, ТабличнаяЧасть, Массив - Коллекция данных формы, табличная часть
//                 объекта или массив элементов этих коллекций.
//  Колонка  - Строка - Имя колонки, значения которой необходимо выгрузить.
//
// Возвращаемое значение:
//   Массив   - Значения колонки таблицы.
//
Функция ВыгрузитьКолонку(Коллекция, Колонка) Экспорт

	мДанные = Новый Массив;
	Для каждого СтрокаКоллекция Из Коллекция Цикл
		мДанные.Добавить(СтрокаКоллекция[Колонка]);
	КонецЦикла; 
	
	Возврат мДанные;

КонецФункции // ВыгрузитьКолонку()

// Возвращает массив с идентификаторами указанных строк таблицы.
//
// Параметры:
//  ДанныеСтрок  - ДанныеФормыЭлементКоллекции, Массив - Одна строка или набор строк,
//                 для которых определяются идентификаторы
//
// Возвращаемое значение:
//   Массив   - Набор идентификаторов строк таблицы.
//
Функция ПолучитьИдентификаторыСтрок(данныеСтрок) Экспорт

	мДанныеСтрок = ОбщегоНазначенияКлиентСервер.ПреобразоватьЗначениеВМассив(данныеСтрок);
	
	мИдентификаторыСтрок = Новый Массив;
	Для каждого данныеСтроки Из мДанныеСтрок Цикл
		мИдентификаторыСтрок.Добавить(данныеСтроки.ПолучитьИдентификатор());
	КонецЦикла; 
	
	Возврат мИдентификаторыСтрок;

КонецФункции // ПолучитьИдентификаторыСтрок()

// По переданным идентификаторам строк возвращает набор строк таблицы.
//
// Параметры:
//  Таблица  - ДанныеФормыКоллекция - Таблица, для которой будут получены строки по
//                 их идентификаторам.
//  мИдентификаторыСтрок  - Массив - Набор идентификаторов строк таблицы.
//
// Возвращаемое значение:
//   Массив   - Набор значений типа ДанныеФормыЭлементКоллекции, предсталяющих строки
//                 таблицы, найденные по их идентификаторам.
//
Функция ПолучитьСтрокиПоИдентификаторам(Таблица, мИдентификаторыСтрок) Экспорт

	мДанныеСтрок = Новый Массив;
	Для каждого ИдентификаторСтроки Из мИдентификаторыСтрок Цикл
		мДанныеСтрок.Добавить(Таблица.НайтиПоИдентификатору(ИдентификаторСтроки));
	КонецЦикла; 
	
	Возврат мДанныеСтрок;

КонецФункции // ПолучитьСтрокиПоИдентификаторам()

#КонецОбласти 
