
#Область ПолучениеЦенНоменклатуры

// Возвращает структуру для заполнения характеристик цены номенклатуры.
//
// Возвращаемое значение:
//   Структура   - Характеристики цены. Содержит следующие свойства:
//                 		Цена  - Неопределено - Цена номенклатуры.
//                 		Валюта  - Неопределено - Валюта цены.
//
Функция ХарактеристикиЦены() Экспорт
	
	Возврат Новый Структура("Цена,Валюта");
	
КонецФункции // ХарактеристикиЦены()

// Возвращает результат запроса по ценам номенклатуры.
//
// Параметры
//  Период  - Дата, МоментВремени, Граница - На указанную дату будут получены цены.
//  Подразделение  - СправочникСсылка.СтруктурныеЕдиницы - Подразделение, по которому будут получены
//                 цены номенклатуры.
//  Номенклатура  - Массив, СписокЗначений, СправочникСсылка.Номенклатура - Элемент или набор номенклатуры, для
//                 которых будут получены цены.
//  ТипЦен  - СправочникСсылка.ТипыЦен - Тип цен, по которому будут получены цены.
//  Валюта  - СправочникСсылка.Валюты, Неопределено - Валюта, в которой необходимо вернуть цены. Если не указана,
//                 цены будут возвращены в той валюте, в которой они заданы.
//
// Возвращаемое значение:
//   РезультатЗапроса   - Результат запроса по ценам номенклатуры.
//
Функция ПолучитьРезультатЗапросаПоЦенамНоменклатуры(Период, Подразделение, Номенклатура, ТипЦен, Валюта = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Цена,
	|	ЦеныНоменклатурыСрезПоследних.ВалютаЦены КАК Валюта
	|ПОМЕСТИТЬ Цены
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Период,
	|			Подразделение = &Подразделение
	|				И ТипЦен = &ТипЦен
	|				И Номенклатура В (&Номенклатура)) КАК ЦеныНоменклатурыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Курс * КурсыВалютСрезПоследних.Кратность КАК Курс
	|ПОМЕСТИТЬ КурсВалюты
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &Валюта) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	ЕСТЬNULL(РассчитанныеЦены.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(РассчитанныеЦены.Валюта, НЕОПРЕДЕЛЕНО) КАК Валюта
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Цены.Номенклатура КАК Номенклатура,
	|			ВЫБОР
	|				КОГДА КурсВалюты.Курс ЕСТЬ NULL 
	|					ТОГДА Цены.Цена
	|				ИНАЧЕ Цены.Цена * КурсыВалютЦен.Курс / КурсВалюты.Курс
	|			КОНЕЦ КАК Цена,
	|			ВЫБОР
	|				КОГДА КурсВалюты.Курс ЕСТЬ NULL 
	|					ТОГДА Цены.Валюта
	|				ИНАЧЕ &Валюта
	|			КОНЕЦ КАК Валюта
	|		ИЗ
	|			Цены КАК Цены
	|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|					КурсыВалютСрезПоследних.Курс * КурсыВалютСрезПоследних.Кратность КАК Курс
	|				ИЗ
	|					РегистрСведений.КурсыВалют.СрезПоследних(
	|							&Период,
	|							Валюта В
	|								(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|									Цены.Валюта
	|								ИЗ
	|									Цены КАК Цены)) КАК КурсыВалютСрезПоследних) КАК КурсыВалютЦен
	|				ПО Цены.Валюта = КурсыВалютЦен.Валюта
	|				ЛЕВОЕ СОЕДИНЕНИЕ КурсВалюты КАК КурсВалюты
	|				ПО (ИСТИНА)) КАК РассчитанныеЦены
	|		ПО СправочникНоменклатура.Ссылка = РассчитанныеЦены.Номенклатура
	|ГДЕ
	|	СправочникНоменклатура.Ссылка В(&Номенклатура)";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	
	Возврат Запрос.Выполнить();

КонецФункции // ПолучитьРезультатЗапросаПоЦенамНоменклатуры()

// Возвращает информацию о ценах номенклатуры, действующих на определённый момент времени. При необходимости получить
// цены в произвольной валюте значение валюты необходимо передать в функцию как параметр. При этом полученные цены будут
// пересчитаны из валюты цены в указанную валюту.
//
// Параметры
//  Период  - Дата, МоментВремени, Граница - На указанную дату будут получены цены.
//  Подразделение  - СправочникСсылка.СтруктурныеЕдиницы - Подразделение, по которому будут получены
//                 цены номенклатуры.
//  Номенклатура  - Массив, СписокЗначений, СправочникСсылка.Номенклатура - Элемент или набор номенклатуры, для
//                 которых будут получены цены.
//  ТипЦен  - СправочникСсылка.ТипыЦен - Тип цен, по которому будут получены цены.
//  Валюта  - СправочникСсылка.Валюты, Неопределено - Валюта, в которой необходимо вернуть цены. Если не указана,
//                 цены будут возвращены в той валюте, в которой они заданы.
//
// Возвращаемое значение:
//   Соответствие   - Информация о ценах. В качестве ключа соответствия выступает значение
//                 номенклатуры, а значением соответствия является структура с данными цены.
//                 Структура содержит такие свойства:
//                 		Цена  - Число - Цена номенклатуры.
//                 		Валюта  - СправочникСсылка.Валюты, Неопределено - Валюта цены. Если цена не задана, содержит
//                 			значение Неопределено.
//
Функция ПолучитьЦеныНоменклатуры(Период, Подразделение, Номенклатура, ТипЦен, Валюта = Неопределено) Экспорт

	результат = ПолучитьРезультатЗапросаПоЦенамНоменклатуры(Период, Подразделение, Номенклатура, ТипЦен, Валюта);
	выборка = Результат.Выбрать();
	
	соЦены = Новый Соответствие;
	
	Пока выборка.Следующий() Цикл
	
		стХарактеристикиЦены = ХарактеристикиЦены();
		ЗаполнитьЗначенияСвойств(стХарактеристикиЦены, выборка);
		соЦены.Вставить(выборка.Номенклатура, стХарактеристикиЦены);
	
	КонецЦикла;	
	
	Возврат соЦены;

КонецФункции // ПолучитьЦеныНоменклатуры()

// Возвращает информацию о цене номенклатуры, действующей на определённый момент времени. При необходимости получить
// цену в произвольной валюте значение валюты необходимо передать в функцию как параметр. При этом полученная цена
// будет пересчитана из валюты цены в указанную валюту.
//
// Параметры
//  Период  - Дата, МоментВремени, Граница - На указанную дату будет получена цена.
//  Подразделение  - СправочникСсылка.СтруктурныеЕдиницы - Подразделение, по которому будут получены
//                 цены номенклатуры.
//  Номенклатура  - СправочникСсылка.Номенклатура - Номенклатура, для которой будет получена цена.
//  ТипЦен  - СправочникСсылка.ТипыЦен - Тип цен, по которому будут получены цены.
//  Валюта  - СправочникСсылка.Валюты, Неопределено - Валюта, в которой необходимо вернуть цену. Если не указана,
//                 цена будет возвращена в той валюте, в которой она задана.
//
// Возвращаемое значение:
//   Структура   - Характеристики цены. Структура содержит такие свойства:
//                 		Цена  - Число - Цена номенклатуры.
//                 		Валюта  - СправочникСсылка.Валюты, Неопределено - Валюта цены. Если цена не задана, содержит
//                 			значение Неопределено.
//
Функция ПолучитьЦенуНоменклатуры(Период, Подразделение, Номенклатура, ТипЦен, Валюта = Неопределено) Экспорт

	Результат = ПолучитьРезультатЗапросаПоЦенамНоменклатуры(Период, Подразделение, Номенклатура, ТипЦен, Валюта);
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	стХарактеристикиЦены = ХарактеристикиЦены();
	ЗаполнитьЗначенияСвойств(стХарактеристикиЦены, Выборка);
	
	Возврат стХарактеристикиЦены;
	
КонецФункции // ПолучитьЦенуНоменклатуры()

#КонецОбласти 

#Область ПолучениеАвтоматическихСкидок

// Возвращает информацию о автоматических скидках на торвары для контрагентов.
//
// Параметры:
//  контрагенты  - Массив, СписокЗначений, СправочникСсылка.Контрагенты - Элемент или набор контрагентов,
//                 для которых будут получены значения скидок.
//  номенклатура  - Массив, СписокЗначений, СправочникСсылка.Номенклатура - Элемент или набор номенклатуры,
//                 для которых будут получены значения скидок.
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Набор автоматических скидок. Таблица содержит следующие колонки:
//                 Контрагент  - СправочникСсылка.Контрагенты - Контрагент, по которому установлена скидка.
//                 Номенклатура  - СправочникСсылка.Номенклатура - Номенклатура, для которой установлена скидка.
//                 ПроцентСкидки  - Число - Значение процента автоматической скидки.
//
Функция ПолучитьАвтоматическиеСкидкиКонтрагентов(контрагенты, номенклатура) Экспорт

	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	запрос.Текст =
	"ВЫБРАТЬ
	|	АвтоматическиеСкидки.Владелец КАК Контрагент,
	|	ГруппыНоменклатуры.Номенклатура,
	|	АвтоматическиеСкидки.ПроцентСкидки
	|ИЗ
	|	Справочник.АвтоматическиеСкидки КАК АвтоматическиеСкидки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СправочникНоменклатура.Родитель КАК Родитель,
	|			СправочникНоменклатура.Ссылка КАК Номенклатура
	|		ИЗ
	|			Справочник.Номенклатура КАК СправочникНоменклатура
	|		ГДЕ
	|			СправочникНоменклатура.Ссылка В(&Номенклатура)) КАК ГруппыНоменклатуры
	|		ПО АвтоматическиеСкидки.Группа = ГруппыНоменклатуры.Родитель
	|ГДЕ
	|	АвтоматическиеСкидки.Владелец В(&Контрагенты)
	|	И АвтоматическиеСкидки.ЦеноваяГруппа = ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)";
	#КонецОбласти
	
	запрос.УстановитьПараметр("Контрагенты", контрагенты);
	запрос.УстановитьПараметр("Номенклатура", номенклатура);
	
	выборка = запрос.Выполнить().Выбрать();
	
	автоматическиеСкидки = Новый ТаблицаЗначений;
	автоматическиеСкидки.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	автоматическиеСкидки.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	автоматическиеСкидки.Колонки.Добавить("ПроцентСкидки", Метаданные.Справочники.АвтоматическиеСкидки.Реквизиты.ПроцентСкидки.Тип);
	
	Пока выборка.Следующий() Цикл
	
		строкаАвтоматическиеСкидки = автоматическиеСкидки.Добавить();
		ЗаполнитьЗначенияСвойств(строкаАвтоматическиеСкидки, выборка);
	
	КонецЦикла; 
	
	автоматическиеСкидки.Индексы.Добавить("Контрагент");
	автоматическиеСкидки.Индексы.Добавить("Номенклатура");
	
	Возврат автоматическиеСкидки;

КонецФункции // ПолучитьАвтоматическиеСкидкиКонтрагентов()

Функция ПолучитьРезультатЗапросаПоСкидкамНоменклатуры(период, подразделение, контрагент, номенклатура)
	
	УстановитьПривилегированныйРежим(Истина);
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	
	запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗапретСкидокНоменклатуры.ЗапретСкидки, ЛОЖЬ)
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(АвтоматическиеСкидки.ПроцентСкидки, 0)
	|	КОНЕЦ КАК ПроцентСкидки,
	|	ЕСТЬNULL(ЗапретСкидокНоменклатуры.ЗапретСкидки, ЛОЖЬ) КАК ЗапретСкидки,
	|	СписокНоменклатуры.Номенклатура,
	|	СписокНоменклатуры.Группа,
	|	СписокНоменклатуры.ЦеноваяГруппа
	|ИЗ
	|	(ВЫБРАТЬ
	|		Номенклатура.Ссылка КАК Номенклатура,
	|		Номенклатура.Родитель КАК Группа,
	|		Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа
	|	ИЗ
	|		Справочник.Номенклатура КАК Номенклатура
	|	ГДЕ
	|		Номенклатура.Ссылка В(&Номенклатура)) КАК СписокНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЗапретСкидокНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|			ИСТИНА КАК ЗапретСкидки
	|		ИЗ
	|			РегистрСведений.ЗапретСкидокНоменклатуры.СрезПоследних(
	|					&Период,
	|					Подразделение = &Подразделение
	|						И Номенклатура В (&Номенклатура)
	|						И КаналСбыта = &КаналСбыта) КАК ЗапретСкидокНоменклатурыСрезПоследних
	|		ГДЕ
	|			(ЗапретСкидокНоменклатурыСрезПоследних.ДатаОкончания > &Период
	|					ИЛИ ЗапретСкидокНоменклатурыСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))) КАК ЗапретСкидокНоменклатуры
	|		ПО СписокНоменклатуры.Номенклатура = ЗапретСкидокНоменклатуры.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АвтоматическиеСкидки КАК АвтоматическиеСкидки
	|		ПО СписокНоменклатуры.Группа = АвтоматическиеСкидки.Группа
	|			И (ВЫБОР
	|				КОГДА &ИспользуютсяЦеновыеГруппы
	|					ТОГДА СписокНоменклатуры.ЦеноваяГруппа = АвтоматическиеСкидки.ЦеноваяГруппа
	|				ИНАЧЕ АвтоматическиеСкидки.ЦеноваяГруппа = ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
	|			КОНЕЦ)
	|			И (АвтоматическиеСкидки.Владелец = &Контрагент)
	|			И (АвтоматическиеСкидки.ДатаОкончанияДействияСкидки = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ КОНЕЦПЕРИОДА(АвтоматическиеСкидки.ДатаОкончанияДействияСкидки, ДЕНЬ) >= КОНЕЦПЕРИОДА(&Период, ДЕНЬ))";
	
	#КонецОбласти
	
	запрос.УстановитьПараметр("Период", период);
	запрос.УстановитьПараметр("Подразделение", подразделение);
	запрос.УстановитьПараметр("Номенклатура", номенклатура);
	запрос.УстановитьПараметр("Контрагент", контрагент);
	запрос.УстановитьПараметр("КаналСбыта", контрагент.КД_КаналСбыта);
	запрос.УстановитьПараметр("ИспользуютсяЦеновыеГруппы", ИспользоватьЦеновыеГруппы(подразделение));
	
	
	Возврат запрос.Выполнить();

КонецФункции // ПолучитьРезультатЗапросаПоЦенамНоменклатуры()

Функция ХарактеристикиСкидки() Экспорт
	
	Возврат Новый Структура("ПроцентСкидки, ЗапретСкидки");
	
КонецФункции // ХарактеристикиСкидки()

Функция ПолучитьСкидкиНоменклатуры(период, подразделение, контрагент, номенклатура) Экспорт

	результат = ПолучитьРезультатЗапросаПоСкидкамНоменклатуры(период, подразделение, контрагент, номенклатура);
	выборка = результат.Выбрать();
	
	соСкидки = Новый Соответствие;
	
	Пока выборка.Следующий() Цикл
	
		стХарактеристикиСкидки = ХарактеристикиСкидки();
		
		ЗаполнитьЗначенияСвойств(стХарактеристикиСкидки, выборка);
		
		соСкидки.Вставить(выборка.Номенклатура, стХарактеристикиСкидки);
	
	КонецЦикла;	
	
	Возврат соСкидки;

КонецФункции // ПолучитьСкидкиНоменклатуры()

#КонецОбласти

#Область ДополнительныеПроцедурыИФункции

// Возвращает числовое значение переданной ставки НДС.
//
// Параметры
//  СтавкаНДС  - СправочникСсылка.СтавкиНДС - Ставка НДС, для которой
//                 необходимо получить числовое значение.
//
// Возвращаемое значение:
//   Число   - Числовое значение ставки НДС.
//
Функция ПолучитьЗначениеСтавкиНДС(СтавкаНДС) Экспорт

	Возврат СтавкаНДС.Ставка;

КонецФункции // ПолучитьЗначениеСтавкиНДС()

#КонецОбласти

Функция ВернутьЦенуНоменклатуры(СтруктураПараметров) Экспорт
	
	Результат = 0;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&ДатаСреза,
	|			Подразделение = &Подразделение
	|				И ТипЦен = &ТипЦен
	|				И Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыСрезПоследних";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Номенклатура", СтруктураПараметров.Номенклатура);
	Запрос.УстановитьПараметр("ТипЦен", СтруктураПараметров.ТипЦен);
	Запрос.УстановитьПараметр("ДатаСреза", Новый Граница(СтруктураПараметров.ДатаСреза,ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Подразделение", СтруктураПараметров.Подразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат = Выборка.Цена;
	КонецЕсли;
	
	
	Возврат (Результат);
	
КонецФункции

Функция ВернутьАвтоматическиеСкидки(структураПараметров) Экспорт
	
	результат = Новый Соответствие;
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	
	запрос.Текст =
	"ВЫБРАТЬ
	|	АвтоматическиеСкидки.Группа,
	|	МИНИМУМ(АвтоматическиеСкидки.ПроцентСкидки) КАК ПроцентСкидки,
	|	ВЫБОР
	|		КОГДА &ИспользоватьЦеновыеГруппы
	|			ТОГДА АвтоматическиеСкидки.ЦеноваяГруппа
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
	|	КОНЕЦ КАК ЦеноваяГруппа,
	|	АвтоматическиеСкидки.ДатаОкончанияДействияСкидки
	|ИЗ
	|	Справочник.АвтоматическиеСкидки КАК АвтоматическиеСкидки
	|ГДЕ
	|	АвтоматическиеСкидки.Владелец = &Контрагент
	|	И АвтоматическиеСкидки.ПометкаУдаления = ЛОЖЬ
	|	И ВЫБОР
	|			КОГДА АвтоматическиеСкидки.ДатаОкончанияДействияСкидки = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ АвтоматическиеСкидки.ДатаОкончанияДействияСкидки >= НАЧАЛОПЕРИОДА(&ДатаСреза, ДЕНЬ)
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	АвтоматическиеСкидки.Группа,
	|	ВЫБОР
	|		КОГДА &ИспользоватьЦеновыеГруппы
	|			ТОГДА АвтоматическиеСкидки.ЦеноваяГруппа
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
	|	КОНЕЦ,
	|	АвтоматическиеСкидки.ДатаОкончанияДействияСкидки";
	
	#КонецОбласти
				   
	// "Ценовые группы" - не учитываем .....
	запрос.УстановитьПараметр("Контрагент", структураПараметров.Контрагент);
	запрос.УстановитьПараметр("ДатаСреза", структураПараметров.ДатаСреза);
	запрос.УстановитьПараметр("ИспользоватьЦеновыеГруппы", ЦенообразованиеСервер.ИспользоватьЦеновыеГруппы(структураПараметров.Подразделение));
	
	выборка = запрос.Выполнить().Выбрать();
	Пока выборка.Следующий() Цикл
		
		результат.Вставить(СокрЛП(выборка.Группа.Код) +" / "+ СокрЛП(выборка.ЦеноваяГруппа.Код), выборка.ПроцентСкидки);
		
	КонецЦикла;
	
	Возврат (результат);
	
КонецФункции

функция ПроверитьЗапретСкидкиПоНоменклатуре(структураПараметров) Экспорт
	
	результат = Истина;
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	
	запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗапретСкидокНоменклатурыСрезПоследних.Номенклатура
	|ИЗ
	|	РегистрСведений.ЗапретСкидокНоменклатуры.СрезПоследних(
	|			&ДатаСреза,
	|			Подразделение = &Подразделение
	|				И Номенклатура = &Номенклатура
	|				И КаналСбыта = &КаналСбыта) КАК ЗапретСкидокНоменклатурыСрезПоследних
	|ГДЕ
	|	(ЗапретСкидокНоменклатурыСрезПоследних.ДатаОкончания > &ДатаСреза
	|			ИЛИ ЗапретСкидокНоменклатурыСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))";
		
	#КонецОбласти
	
	запрос.УстановитьПараметр("КаналСбыта", 	структураПараметров.Контрагент.КД_КаналСбыта);
	запрос.УстановитьПараметр("Подразделение", 	структураПараметров.Подразделение);
	запрос.УстановитьПараметр("Номенклатура", 	структураПараметров.Номенклатура);
	запрос.УстановитьПараметр("ДатаСреза", 		структураПараметров.ДатаСреза);
	
	результатЗапроса = запрос.Выполнить();
	
	результат = Не результатЗапроса.Пустой();
	
	Возврат (результат)
	
	
Конецфункции	// ПроверитьЗапретСкидкиПоНоменклатуре()

//	----------------------------------------------------------------------------
//	ВернутьСкидкуНаВес()
//
//	Параметры:
//		СтруктураДанные - (Структура)
//
Функция ВернутьСкидкуНаВес(СтруктураДанные) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПараметрыУчетаПоПодразделениямСрезПоследних.ЕстьСкидкаНаВес,
	|	ЕСТЬNULL(ПартнерыСегмента.Партнер, НЕОПРЕДЕЛЕНО) КАК Контрагент
	|ИЗ
	|	РегистрСведений.ПараметрыУчетаПоПодразделениям.СрезПоследних(&ДатаСреза, ) КАК ПараметрыУчетаПоПодразделениямСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	|		ПО (ПартнерыСегмента.Сегмент = &Сегмент)
	|			И (ПартнерыСегмента.Партнер = &Контрагент)
	|ГДЕ
	|	ПараметрыУчетаПоПодразделениямСрезПоследних.СтруктурнаяЕдиница = &Подразделение");
	
	Запрос.УстановитьПараметр("Подразделение", 	структураДанные.Подразделение);
	Запрос.УстановитьПараметр("Контрагент", 	структураДанные.Контрагент);
	Запрос.УстановитьПараметр("Сегмент", 		справочники.СегментыПартнеров.НайтиПоНаименованию("Скидка на весе 5%"));
	Запрос.УстановитьПараметр("ДатаСреза", 		Новый Граница(СтруктураДанные.ДатаСреза,ВидГраницы.Включая));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат (0);
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	НоменклатурнаяГруппа = СтруктураДанные.Номенклатура.Родитель;
	Подразделение = СтруктураДанные.Подразделение;
	
	Результат = 0;
	
	// ... пока только для Крыма. ... потом брать из регистра сведений
	//Если Подразделение.Код = "000000005" Тогда
	Если (Выборка.ЕстьСкидкаНаВес) И Не(СтруктураДанные.Номенклатура.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.Шт) Тогда
		результат = НоменклатурнаяГруппа.ПроцентСкидкиНаВес;
		
		Если результат > 0 Тогда
			Если Не выборка.Контрагент = Неопределено Тогда
				результат = 5;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат (Результат);
	
КонецФункции	// ВернутьСкидкуНаВес()

#Область ПолучениеСкидокНаВес

// Возвращает результат запроса по скидкам на вес.
//
// Параметры
//  Период  - Дата, МоментВремени, Граница - На указанную дату будут получены цены.
//  Подразделение  - СправочникСсылка.СтруктурныеЕдиницы - Подразделение, по которому будут получены
//                 цены номенклатуры.
//  Номенклатура  - Массив, СписокЗначений, СправочникСсылка.Номенклатура - Элемент или набор номенклатуры, для
//                 которых будут получены цены.
//
// Возвращаемое значение:
//   РезультатЗапроса   - Результат запроса по скидкам на вес.
//
Функция ПолучитьРезультатЗапросаПоСкидкамНаВес(период, подразделение, номенклатура)
	
	УстановитьПривилегированныйРежим(Истина);
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	
	запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ПараметрыУчетаПоПодразделениямСрезПоследних.ЕстьСкидкаНаВес
	|				И Номенклатура.ЕдиницаИзмерения.Наименование ПОДОБНО ""кг""
	|			ТОГДА Номенклатура.Родитель.ПроцентСкидкиНаВес
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПроцентСкидкиНаВес
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура,
	|	РегистрСведений.ПараметрыУчетаПоПодразделениям.СрезПоследних(КОНЕЦПЕРИОДА(&Период, ДЕНЬ), СтруктурнаяЕдиница = &Подразделение) КАК ПараметрыУчетаПоПодразделениямСрезПоследних
	|ГДЕ
	|	Номенклатура.Ссылка В(&Номенклатура)";
	
	#КонецОбласти
	
	запрос.УстановитьПараметр("Период", Период);
	запрос.УстановитьПараметр("Подразделение", Подразделение);
	запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Возврат запрос.Выполнить();

КонецФункции // ПолучитьРезультатЗапросаПоСкидкамНаВес()

Функция ХарактеристикиСкидкиНаВес() Экспорт
	
	Возврат Новый Структура("ПроцентСкидкиНаВес");
	
КонецФункции // ХарактеристикиСкидкиНаВес()

функция ПолучитьСкидкуНаВес(дата, подразделение, мНоменклатура) Экспорт
	
	соСкидкиНаВес = Новый Соответствие;
	
	результатЗапроса = ПолучитьРезультатЗапросаПоСкидкамНаВес(дата, подразделение, мНоменклатура);
	
	выборка = результатЗапроса.Выбрать();
	
	Пока выборка.Следующий() Цикл
	
		стХарактеристикиСкидкиНаВес = ХарактеристикиСкидкиНаВес();
		
		ЗаполнитьЗначенияСвойств(стХарактеристикиСкидкиНаВес, выборка);
		
		соСкидкиНаВес.Вставить(выборка.Номенклатура, стХарактеристикиСкидкиНаВес);
	
	КонецЦикла;	
	
	Возврат соСкидкиНаВес;
	
КонецФункции

#КонецОбласти

Функция ПолучитьПараметрыУчетаПоПодразделению(СтруктураПараметров) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПараметрыУчетаПоПодразделениямСрезПоследних.ЕстьСкладВозвратов,
	|	ПараметрыУчетаПоПодразделениямСрезПоследних.ЕстьСкидкаНаВес,
	|	ПараметрыУчетаПоПодразделениямСрезПоследних.Контрагент,
	|	ПараметрыУчетаПоПодразделениямСрезПоследних.УправляющаяКомпания,
	|	ПараметрыУчетаПоПодразделениямСрезПоследних.ЦенаСклада,
	|	ПараметрыУчетаПоПодразделениямСрезПоследних.ЕстьУчетЗатратПоОбъектам,
	|	ПараметрыУчетаПоПодразделениямСрезПоследних.ТипЗначенияОбъектаЗатрат,
	|	ПараметрыУчетаПоПодразделениямСрезПоследних.АвтоУчетРозницы,
	|	ПараметрыУчетаПоПодразделениямСрезПоследних.АвтоСозданиеВозвратаПокупателяПриВозвратепоставщику,
	|	ПараметрыУчетаПоПодразделениямСрезПоследних.АвтоСозданиеНалоговыхДокументов,
	|	ПараметрыУчетаПоПодразделениямСрезПоследних.АвтоСозданиеПриходнойНакладнойПриРеализации,
	|	ПараметрыУчетаПоПодразделениямСрезПоследних.МестоСоставления,
	|	ПараметрыУчетаПоПодразделениямСрезПоследних.КтоВыписываетНакладные,
	|	ПараметрыУчетаПоПодразделениямСрезПоследних.ТипыЦен,
	|	ПараметрыУчетаПоПодразделениямСрезПоследних.НаименованиеПодразделенияДляПечати,
	|	ПараметрыУчетаПоПодразделениямСрезПоследних.ЭтоРозница
	|ИЗ
	|	РегистрСведений.ПараметрыУчетаПоПодразделениям.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &Подразделение) КАК ПараметрыУчетаПоПодразделениямСрезПоследних");
	
	Запрос.УстановитьПараметр("ДатаСреза", 		Новый Граница(СтруктураПараметров.ДатаСреза,ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Подразделение", 	СтруктураПараметров.Подразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
		
		СтруктураПараметров.Вставить(Колонка.Имя);
		
	КонецЦикла;
	
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаИзРезультатаЗапроса.Следующий();
	
	// Заполнение значений для ключей, содержащих данные документа.
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ВыборкаИзРезультатаЗапроса);
	
	СтруктураПараметров.ЦенаСклада = ?(ЗначениеЗаполнено(ВыборкаИзРезультатаЗапроса.ЦенаСклада), ВыборкаИзРезультатаЗапроса.ЦенаСклада, Справочники.ТипыЦен.Закупка);

	
	//Если РезультатЗапроса.Пустой() Тогда
	//	СтруктураПараметров.Вставить("ЦенаСклада", Справочники.ТипыЦен.Закупка);
	//Иначе
	//	Выборка = РезультатЗапроса.Выбрать();
	//	Выборка.Следующий();
	//	
	//	СтруктураПараметров.Вставить("ЦенаСклада", ?(ЗначениеЗаполнено(Выборка.ЦенаСклада), Выборка.ЦенаСклада, Справочники.ТипыЦен.Закупка));
	//	
	//КонецЕсли;
	
	Возврат СтруктураПараметров
	
КонецФункции

Процедура УстановитьДоступныеТипыЦенВДокументе(ЭлементУправления, Подразделение, ДатаСреза) Экспорт
	
	ЭлементУправления.СписокВыбора.Очистить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПараметрыУчетаПоПодразделениямСрезПоследних.ТипыЦен
	|ИЗ
	|	РегистрСведений.ПараметрыУчетаПоПодразделениям.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &Подразделение) КАК ПараметрыУчетаПоПодразделениямСрезПоследних");
	
	Запрос.УстановитьПараметр("ДатаСреза", Новый Граница(ДатаСреза,ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ТаблицаЦен = Выборка.ТипыЦен.Получить();
		Если НЕ ТаблицаЦен = Неопределено Тогда
			
			Для Каждого СтрокаТаблицыЦен Из ТаблицаЦен Цикл
				
				Если СтрокаТаблицыЦен.Выгружать Тогда
					ЭлементУправления.СписокВыбора.Добавить(СтрокаТаблицыЦен.ТипыЦен);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	
	
КонецПроцедуры

Функция ИспользоватьЦеновыеГруппы(подразделение) Экспорт
	
	структураПараметров = Новый Структура("СтруктурнаяЕдиница",	подразделение);
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы", структураПараметров);
	
КонецФункции