
//Преобразует код языка в формат понятный системной фунции Формат()
// Параметры
//  КодЯзыка  	 – Строка – код языка в формате uk/ru
//
// Возвращаемое значение:
//   Строка   	 – код языка в формате ru_RU/uk_UA
//
Функция ОпределитьКодЯзыкаДляФормат(КодЯзыка) Экспорт
	
	Возврат ?(КодЯзыка = "uk","uk_UA","ru_RU");
	
КонецФункции // ОпределитьКодЯзыкаДляФормат()

//По коду языка возвращает строку параметров прописи из справочника Валюты 
//(ПараметрыПрописиНаРусском или ПараметрыПрописиНаУкраинском).
Функция ПараметрыПрописи(Валюта, КодЯзыка) Экспорт
	
	Возврат ?(КодЯзыка = "uk",Валюта.ПараметрыПрописиНаУкраинском,Валюта.ПараметрыПрописиНаРусском);
	
КонецФункции // ПараметрыПрописи()
       
// Возвращает код языка информационной базы, который указан 
// в региональных настройках (в конфигураторе)
Функция КодЯзыкаИнформационнойБазы() Экспорт
	
	// любой язык кроме украинского будем считать русским
	Возврат ?(КодЛокализации() = "uk_UA","uk","ru");
	
КонецФункции //КодЯзыкаИнформационнойБазы()

// Возвращает код языка интерфейса в формате ru/uk
Функция КодЯзыкаИнтерфейса() Экспорт
	
	Возврат ТекущийЯзык().КодЯзыка;
	
КонецФункции // КодЯзыкаИнтерфейса()

// Функция возвращает имя языка для формирования нерегламентных печатных форм
// документов и некоторых справочников с учетом установленного режима в настройках
// пользователя. По-умолчанию это язык информционной базы.
//
// Параметры
//     	РежимПользователя - Установленное значение в настройках пользователя
//
// Возвращаемое значение:
//		Строка   – код языка
//
Функция ПолучитьЯзыкФормированияПечатныхФорм(организация = Неопределено) Экспорт

	Если организация = Неопределено Тогда
		КодЯзыкаПечать = "uk";
	ИначеЕсли организация.ФинУчет Тогда
		КодЯзыкаПечать = "uk";
	Иначе
		КодЯзыкаПечать = КодЯзыкаИнтерфейса();
	КонецЕсли;
	
	//	
	//	РежимПользователя = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ОбщегоНазначения.ТекущийПользователь(), "РежимФормированияПечатныхФорм")
	//	
	//КонецЕсли; 
	//
	//Если РежимПользователя = Перечисления.РежимФормированияПечатныхФорм.НаРусскомЯзыке Тогда
	//	
	//	КодЯзыкаПечать = "ru";
	//	
	//ИначеЕсли РежимПользователя = Перечисления.РежимФормированияПечатныхФорм.НаУкраинскомЯзыке Тогда
	//
	//	КодЯзыкаПечать = "uk";
	//
	//ИначеЕсли РежимПользователя = Перечисления.РежимФормированияПечатныхФорм.НаЯзыкеИнтерфейсаПользователя Тогда		
	//	
	//	КодЯзыкаПечать = КодЯзыкаИнтерфейса();
	//	
	//Иначе
	//	
	//	КодЯзыкаПечать = КодЯзыкаИнформационнойБазы();
	//	
	//КонецЕсли;

	Возврат КодЯзыкаПечать;
	
КонецФункции // ПолучитьЯзыкФормированияПечатныхФорм()

// Функция возвращает текстовую строку, сформированную на основании спец. шаблона,
// подставляя значения переданных параметров.	
// 
// Параметры
//  СтрокаШаблон – Строка – Строка шаблон, в тексте которой
//                 есть указания на то, куда вставить представления 
//                 параметров. 
//                 Параметры отмечаются текстом ¤1¤...¤20¤.
//                 Символ "¤" можно набрать при помощи Alt+0164
//  Пар1...Пар20 – произвольного типа – параметры,
//                 строковое представление которых будет 
//                 подставлятся в шаблон.
//
// Возвращаемое значение:
//   Строка   – сформированная текстовая строка
//
Функция _СтрШаблон(Знач СтрокаШаблон, 
										Знач Пар1  = "", Знач Пар2  = "",
										Знач Пар3  = "", Знач Пар4  = "", Знач Пар5  = "",
										Знач Пар6  = "", Знач Пар7  = "", Знач Пар8  = "",
										Знач Пар9  = "", Знач Пар10 = "", Знач Пар11 = "",
										Знач Пар12 = "", Знач Пар13 = "", Знач Пар14 = "",
										Знач Пар15 = "", Знач Пар16 = "", Знач Пар17 = "",
										Знач Пар18 = "", Знач Пар19 = "", Знач Пар20 = "") Экспорт
										
	ПризнакПараметра = "¤";
	МетаСимвол       = "\¤"; //заменяется на признак параметра
	
	Для Счетчик = 1 По 20 Цикл
			
		ПерваяПозицияВхожденияПараметра = Найти(СтрокаШаблон, ""+ ПризнакПараметра + Счетчик + ПризнакПараметра);
				
		Если ПерваяПозицияВхожденияПараметра = 0 Тогда
			// этот параметр не используется
			Продолжить;	
		КонецЕсли; 
				
		ПараметрВСтроку = "";
		Выполнить("ПараметрВСтроку = Строка(Пар" + Счетчик + ")");
				
		СтрокаШаблон = СтрЗаменить(СтрокаШаблон, ПризнакПараметра + Счетчик + ПризнакПараметра, ПараметрВСтроку);
				
	КонецЦикла;									
		
	ПозицияМетаСимвола = СтрЗаменить(СтрокаШаблон, МетаСимвол,ПризнакПараметра);

	Возврат СтрокаШаблон;
	
КонецФункции //СтрШаблон()
