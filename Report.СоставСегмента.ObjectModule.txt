#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКомпоновкеРезультата(документРезультат, данныеРасшифровки, стандартнаяОбработка)
	
	стандартнаяОбработка = Ложь;
	документРезультат.Очистить();
	сегментСсылка = КомпоновщикНастроек.ФиксированныеНастройки.ДополнительныеСвойства.Сегмент;
	
	реквизитыСКДСегмента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		СегментСсылка,
		"СхемаКомпоновкиДанных,ХранилищеНастроекКомпоновкиДанных,ИмяШаблонаСКД");
		
	настройкиСегмента = РеквизитыСКДСегмента.ХранилищеНастроекКомпоновкиДанных.Получить();
		
	Если ПустаяСтрока(реквизитыСКДСегмента.ИмяШаблонаСКД) Тогда
		
		СКД = реквизитыСКДСегмента.СхемаКомпоновкиДанных.Получить();
		
	Иначе
		
		СКД_Макета = СегментыСервер.ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(сегментСсылка, реквизитыСКДСегмента.ИмяШаблонаСКД);
		СКД = СКД_Макета.СхемаКомпоновкиДанных;
		
	КонецЕсли;
	
	Если настройкиСегмента = Неопределено Тогда
		настройкиСегмента = СКД.НастройкиПоУмолчанию;
	КонецЕсли;
	
	Если Не сегментСсылка.СпособФормирования = Перечисления.СпособыФормированияСегментов.ФормироватьДинамически Тогда
		
		Если Не СКД.НаборыДанных.Найти("СписокСегмента") = Неопределено Тогда
			
			наборСписка = СКД.НаборыДанных.Найти("СписокСегмента");
			
			//заменить запрос списка на обращение к регистру
			Если ТипЗнч(СегментСсылка) = Тип("СправочникСсылка.СегментыПартнеров") Тогда
				
				наборСписка.Запрос =
				"ВЫБРАТЬ
				|	ПартнерыСегмента.Партнер КАК ЭлементСписка,
				|	ПартнерыСегмента.Сегмент
				|ИЗ
				|	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента";
				
			//ИначеЕсли ТипЗнч(СегментСсылка) = Тип("СправочникСсылка.СегментыНоменклатуры") Тогда
			//	
			//	НаборСписка.Запрос = 
			//	"ВЫБРАТЬ
			//	|	НоменклатураСегмента.Номенклатура КАК ЭлементСписка,
			//	|	НоменклатураСегмента.Характеристика КАК ХарактеристикаЭлемента,
			//	|	НоменклатураСегмента.Сегмент
			//	|ИЗ
			//	|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента";
			
			КонецЕсли; //заменить запрос списка на обращение к регистру
			
			//удалить отбор, соответствующий старому запросу
			элементыОтбора = настройкиСегмента.Отбор.Элементы;
			элементыОтбора.Очистить();
			
			//добавить отбор по сегменту
			компоновкаДанныхКлиентСервер.ДобавитьОтбор(
			настройкиСегмента, Новый ПолеКомпоновкиДанных("Сегмент"), СегментСсылка);
			
			//включить автозаполнение полей
			СКД.НаборыДанных.СписокСегмента.АвтоЗаполнениеДоступныхПолей = Истина;
			
		КонецЕсли;
		
	Иначе
		
		Если СКД.НаборыДанных.Найти("ВыводСегмента") <> Неопределено И СКД.НаборыДанных.Найти("ФормированиеСегмента") <> Неопределено Тогда
			
			компоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			макетКомпоновки = КомпоновщикМакета.Выполнить(СКД, НастройкиСегмента);
			
			подзапросыВыводСегмента = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СКД.НаборыДанных.ВыводСегмента.Запрос,";");
			
			Если подзапросыВыводСегмента.Количество() < 2 Тогда
				Возврат ;
			КонецЕсли;
			
			текстЗапросаФормированиеСегмента = макетКомпоновки.НаборыДанных.ФормированиеСегмента.Запрос;
			подзапросыФормированиеСегмента = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстЗапросаФормированиеСегмента,";");
			
			Если подзапросыФормированиеСегмента.Количество() > 1 Тогда
				
				запросДляИзменения = ПодзапросыФормированиеСегмента[подзапросыФормированиеСегмента.Количество() - 1];
				
				найденнаяПозицияИЗ = Найти(запросДляИзменения,"ИЗ");
				Если найденнаяПозицияИЗ <> 0 Тогда
					запросДляИзменения = Лев(запросДляИзменения,НайденнаяПозицияИЗ - 1) + "  ПОМЕСТИТЬ СоставСегмента
					|  " + Прав(запросДляИзменения,СтрДлина(запросДляИзменения) - найденнаяПозицияИЗ + 1);
				КонецЕсли;
				
				текстЗапросаФормированиеСегмента = "";
				Для инд = 0 По подзапросыФормированиеСегмента.Количество() - 2 Цикл
				
					текстЗапросаФормированиеСегмента = текстЗапросаФормированиеСегмента + подзапросыФормированиеСегмента[инд] + 
						Символы.ПС + ";";
				
				КонецЦикла;
					
				текстЗапросаФормированиеСегмента = текстЗапросаФормированиеСегмента + запросДляИзменения;
				
			Иначе
				
				найденнаяПозицияИЗ = Найти(текстЗапросаФормированиеСегмента,"ИЗ");
				текстПустаяХарактеристика = "";
				//Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
				//	ТекстПустаяХарактеристика = ", ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика
				//	|";
				//КонецЕсли;
					
				Если НайденнаяПозицияИЗ <> 0 Тогда
					ТекстЗапросаФормированиеСегмента = Лев(ТекстЗапросаФормированиеСегмента,НайденнаяПозицияИЗ - 1) + ТекстПустаяХарактеристика + "  ПОМЕСТИТЬ СоставСегмента
					|  " + Прав(ТекстЗапросаФормированиеСегмента,СтрДлина(ТекстЗапросаФормированиеСегмента) - НайденнаяПозицияИЗ + 1);
					
				КонецЕсли;
				
			КонецЕсли;
			
			СКД.НаборыДанных.ВыводСегмента.Запрос = текстЗапросаФормированиеСегмента + Символы.ПС + ";" + Символы.ПС;
			Для инд = 1 По подзапросыВыводСегмента.Количество() - 1 Цикл
				
				СКД.НаборыДанных.ВыводСегмента.Запрос = СКД.НаборыДанных.ВыводСегмента.Запрос + ПодзапросыВыводСегмента[инд] + 
						?(инд = ПодзапросыВыводСегмента.Количество() - 1,"",Символы.ПС + ";");
				
			КонецЦикла
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СКД.НаборыДанных.Найти("ВыводСегмента") <> Неопределено Тогда 
		
		настройкиИсточник = настройкиСегмента;
		настройкиПриемник = СКД.ВариантыНастроек.ВыводСегмента.Настройки;
		
		КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(НастройкиПриемник.ПараметрыДанных, НастройкиИсточник.ПараметрыДанных);
		КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(НастройкиПриемник.Отбор, НастройкиИсточник.Отбор);
		
		Если СегментСсылка.СпособФормирования <> Перечисления.СпособыФормированияСегментов.ФормироватьДинамически Тогда
			
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(настройкиПриемник, Новый ПолеКомпоновкиДанных("Сегмент"), сегментСсылка);
			
		КонецЕсли;
		
		настройки = настройкиПриемник;
		
	Иначе
		
		настройки = СКД.НастройкиПоУмолчанию;
		
	КонецЕсли;
	
	компоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	макетКомпоновки = КомпоновщикМакета.Выполнить(СКД, настройки, данныеРасшифровки);
	
	процессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	процессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	
	процессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	процессорВывода.УстановитьДокумент(документРезультат);
	процессорВывода.НачатьВывод();
	процессорВывода.Вывести(процессорКомпоновкиДанных, Истина);
	процессорВывода.ЗакончитьВывод();
	
КонецПроцедуры

#КонецЕсли
