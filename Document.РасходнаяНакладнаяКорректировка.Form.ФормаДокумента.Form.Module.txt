
// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением, ВалютаРасчетов)
	
	РазностьДат = УправлениеНебольшойФирмойСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	ВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", ВалютаРасчетов));
		
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат
	);
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность
	);
	
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	// Получим цену
	СтруктураПараметров = Новый Структура("Номенклатура, ТипЦен, Подразделение, ДатаСреза, Контрагент", СтруктураДанные.Номенклатура, СтруктураДанные.ТипЦен, СтруктураДанные.Подразделение, СтруктураДанные.ДатаСреза, СтруктураДанные.Контрагент);
	
	СтруктураДанные.Вставить("Цена", ЦенообразованиеСервер.ВернутьЦенуНоменклатуры(СтруктураПараметров));
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	СтруктураДанные.Вставить("СтруктурнаяЕдиница", СтруктураДанные.Номенклатура.Родитель.Склад);
	СтруктураДанные.Вставить("ПроцентСкидкиНаВес", ЦенообразованиеСервер.ВернутьСкидкуНаВес(СтруктураДанные));
	
	СоответствиеСкидок = ЦенообразованиеСервер.ВернутьАвтоматическиеСкидки(СтруктураПараметров);
	//СтруктураДанные.Вставить("ПроцентСкидки", СоответствиеСкидок.Получить(СокрЛП(СтруктураДанные.Номенклатура.Родитель.Код) +" / "+СокрЛП(СтруктураДанные.Номенклатура.ЦеноваяГруппа.Код)) );
	СтруктураДанные.Вставить("ПроцентСкидки", СоответствиеСкидок.Получить(СокрЛП(СтруктураДанные.Номенклатура.Родитель.Код) +" / "+СокрЛП(Справочники.ЦеновыеГруппы.ПустаяСсылка().Код)) );
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении()
	
	СтруктураДанные = Новый Структура();
	
	//СтруктураДанные.Вставить("Контрагент", ЭтаФорма.Объект.Контрагент);
	//СтруктураДанные.Вставить("Менеджер", ЭтаФорма.Объект.Менеджер);
	
	СтруктураДанные.Вставить("ТипЦен", Справочники.ТипыЦен.ПустаяСсылка());
	
	//Если Объект.Менеджер.НомерКоманды = 2 Тогда
	//	СтруктураДанные.ТипЦен = Объект.Контрагент.ТипЦен2;
	//ИначеЕсли Объект.Менеджер.НомерКоманды = 3 Тогда
	//	СтруктураДанные.ТипЦен = Объект.Контрагент.ТипЦен3;	
	//Иначе
	//	СтруктураДанные.ТипЦен = Объект.Контрагент.ТипЦен;
	//КонецЕсли;
	
	СтрокаУсловийПоставки = Объект.Контрагент.Менеджеры.Найти(Объект.Менеджер, "Менеджер");
	
	Если НЕ СтрокаУсловийПоставки = Неопределено Тогда
		
		СтруктураДанные.ТипЦен = СтрокаУсловийПоставки.ТипЦен;
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("Подразделение", Объект.Контрагент.Родитель.Подразделение);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		Объект.Контрагент.ВалютаРасчетов
	);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Объект.Контрагент.ВалютаРасчетов))
	);
	
	
	Возврат СтруктураДанные;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеОрганизацияПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ФинУчет", СтруктураДанные.Организация.ФинУчет);
	
	Возврат СтруктураДанные;

КонецФункции

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	//СтруктураДанные.Вставить("ТипЦен", ЭтаФорма.Объект.ТипЦен);
	//СтруктураДанные.Вставить("Подразделение", ЭтаФорма.Объект.Подразделение);
	//СтруктураДанные.Вставить("ДатаСреза", ЭтаФорма.Объект.Дата);
	//СтруктураДанные.Вставить("Контрагент", ЭтаФорма.Объект.Контрагент);
	//
	//СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	СтруктураДанные = ОбработкаТабличныхЧастейСервер.ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные, Объект);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения 	= СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.СтруктурнаяЕдиница	= СтруктураДанные.СтруктурнаяЕдиница;
	СтрокаТабличнойЧасти.Цена 				= СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.ПроцентСкидки 		= СтруктураДанные.ПроцентСкидки;
	СтрокаТабличнойЧасти.ПроцентСкидкиНаВес	= СтруктураДанные.ПроцентСкидкиНаВес;
	
	//РасчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиент.РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);

КонецПроцедуры

&НаКлиенте
Процедура РасчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация", ЭтаФорма.Объект.Организация);

	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении(СтруктураДанные);
	
	Если НЕ(СтрокаТабличнойЧасти.КоличествоОтгружено = 0) Тогда
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоОтгружено - СтрокаТабличнойЧасти.КоличествоОтгружено*СтрокаТабличнойЧасти.ПроцентСкидкиНаВес/100;
	КонецЕсли;
	
	Если НЕ(СтрокаТабличнойЧасти.КоличествоЗаказано = 0) Тогда
		СтрокаТабличнойЧасти.КоличествоОтклонение = СтрокаТабличнойЧасти.КоличествоЗаказано - СтрокаТабличнойЧасти.Количество; 	
	КонецЕсли;		

	
	СтрокаТабличнойЧасти.СуммаБезСкидки = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	Если СтруктураДанные.ФинУчет Тогда
		
		СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.СуммаБезСкидки / 6;
		
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Скидка 	= СтрокаТабличнойЧасти.СуммаБезСкидки * СтрокаТабличнойЧасти.ПроцентСкидки/ 100;
	СтрокаТабличнойЧасти.Сумма 		= СтрокаТабличнойЧасти.СуммаБезСкидки - СтрокаТабличнойЧасти.Скидка;
	
КонецПроцедуры // РасчитатьСуммуВСтрокеТабличнойЧасти()

&НаКлиенте
Процедура ЗапасыРасчетСтроки(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоОтгружено;
	
	//РасчитатьСуммуВСтрокеТабличнойЧасти();	
	ОбработкаТабличныхЧастейКлиент.РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	Предупреждение("!");
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		
		СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении();
		
		Если НЕ ЗначениеЗаполнено(ЭтаФорма.Объект.Подразделение) Тогда
			
			ЭтаФорма.Объект.Подразделение = СтруктураДанные.Подразделение;
			
			УстановитьДоступныеТипыЦен();
			
		КонецЕсли;
		
		ВалютаРасчетовПередИзменением = ВалютаРасчетов;
		ВалютаРасчетов = СтруктураДанные.ВалютаРасчетов;
		
		Объект.Курс      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
		Объект.Кратность = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
		
		
		ИзменилсяВидЦен = Объект.ТипЦен <> СтруктураДанные.ТипЦен;
			//И ЗначениеЗаполнено(СтруктураДанные.ТипЦен);
			
		ПересчетНеобходим = (Объект.Запасы.Количество() > 0);
			
		Если ИзменилсяВидЦен Тогда
			
			Объект.ТипЦен = СтруктураДанные.ТипЦен;
			
		КонецЕсли;
			
		// из-за автоматическиз скидок пересчитывать документ надо в любом случае	
		ПересчетДокумента();	
		
		Если (ЗначениеЗаполнено(ВалютаРасчетов) И ВалютаРасчетовПередИзменением <> СтруктураДанные.ВалютаРасчетов)
			И Объект.ВалютаДокумента <> СтруктураДанные.ВалютаРасчетов Тогда
			
			Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
			Предупреждение(НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом! Необходимо проверить валюту документа!'"));
			
			
		КонецЕсли;
		
		ВалютаРасчетов = СтруктураДанные.ВалютаРасчетов;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчетДокумента()
	
	
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
		//СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		//СтруктураДанные.Вставить("ТипЦен", ЭтаФорма.Объект.ТипЦен);
		//СтруктураДанные.Вставить("Подразделение", ЭтаФорма.Объект.Подразделение);
		//СтруктураДанные.Вставить("ДатаСреза", ЭтаФорма.Объект.Дата);
		//СтруктураДанные.Вставить("Контрагент", ЭтаФорма.Объект.Контрагент);
		
		//СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		// Выполнить общие действия для всех документов при изменении номенклатуры.
		СтруктураДанные = ОбработкаТабличныхЧастейСервер.ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные, Объект);
		
		СтрокаТабличнойЧасти.ЕдиницаИзмерения 	= СтруктураДанные.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Цена 				= СтруктураДанные.Цена;
		СтрокаТабличнойЧасти.ПроцентСкидки 		= СтруктураДанные.ПроцентСкидки;
		СтрокаТабличнойЧасти.ПроцентСкидкиНаВес	= СтруктураДанные.ПроцентСкидкиНаВес;
		
		//РасчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
		ОбработкаТабличныхЧастейКлиент.РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	ДействиеПодбор("Запасы");
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПодбор(ИмяТабличнойЧасти)
	
	Если ИмяТабличнойЧасти = "Запасы" Тогда
		Команда = "ПодборВТабличнуюЧастьЗапасы";
	КонецЕсли;
	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда", Команда);
	
	ДобавитьПоставщикаВПараметрыОтбора(СтруктураПараметровПодбора);
	ДобавитьТипЦенВПараметрыОтбора(СтруктураПараметровПодбора);
	
	ВременнаяДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), ТекущаяДата(), Объект.Дата);
	СтруктураПараметровПодбора.Вставить("Период", ВременнаяДатаРасчетов);
	
	РаботаСДиалогамиКлиент.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);
		
КонецПроцедуры //

&НаСервере
Процедура ДобавитьПоставщикаВПараметрыОтбора(СтруктураПараметровПодбора)
	
	//СтруктураПараметровПодбора.Вставить("Поставщик", Объект.Контрагент);
	СтруктураПараметровПодбора.Вставить("ОтборПоПоставщику", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТипЦенВПараметрыОтбора(СтруктураПараметровПодбора)
	
	//СтруктураПараметровПодбора.Вставить("Поставщик", Объект.Контрагент);
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		СтруктураПараметровПодбора.Вставить("ТипЦен", Объект.ТипЦен);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		СтруктураПараметровПодбора.Вставить("Подразделение", Объект.Подразделение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Перем Команда;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		ВыбранноеЗначение.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьЗапасы" Тогда
			ОбработкаПодбора("Запасы", ВыбранноеЗначение);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПодбора(ИмяТабличнойЧасти, ЗначениеВыбора) Экспорт

	Перем Номенклатура;
	Перем Количество;
	
	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура",					Номенклатура);
	ЗначениеВыбора.Свойство("Количество",					Количество);

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	// Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	
	
	МассивСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивСтрок.Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Неопределено;
	Иначе
		СтрокаТабличнойЧасти = МассивСтрок[0];
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
		
		//РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	Иначе
		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].Добавить();
		СтрокаТабличнойЧасти.Номенклатура     			= Номенклатура;
		СтрокаТабличнойЧасти.Количество       			= Количество;
		
	КонецЕсли;
	
	//РассчитатьСуммуДокумента();
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	//СтруктураДанные.Вставить("ТипЦен", ЭтаФорма.Объект.ТипЦен);
	//СтруктураДанные.Вставить("Подразделение", ЭтаФорма.Объект.Подразделение);
	//СтруктураДанные.Вставить("ДатаСреза", ЭтаФорма.Объект.Дата);
	//СтруктураДанные.Вставить("Контрагент", ЭтаФорма.Объект.Контрагент);	
	
	//СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	СтруктураДанные = ОбработкаТабличныхЧастейСервер.ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные, Объект);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения 	= СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.СтруктурнаяЕдиница = СтруктураДанные.СтруктурнаяЕдиница;
	
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.ПроцентСкидки 	= СтруктураДанные.ПроцентСкидки;
	
	СтрокаТабличнойЧасти.КоличествоОтгружено = СтрокаТабличнойЧасти.Количество;

	//РасчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиент.РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры //

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УправлениеНебольшойФирмойСервер.ЗаполнитьШапкуДокумента(
		Объект,
		,
		Параметры.ЗначениеКопирования,
		Параметры.Основание,
		СостояниеДокумента,
		КартинкаСостоянияДокумента,
		РазрешеноПроведение,
		Параметры.ЗначенияЗаполнения
	);
	
	ЦенообразованиеСервер.УстановитьДоступныеТипыЦенВДокументе(Элементы.ТипЦен, Объект.Подразделение, Объект.Дата);
	
	//Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация);
	Компания = Объект.Организация;
	Контрагент = Объект.Контрагент;
	ВалютаРасчетов = Объект.ВалютаДокумента;
	ДатаДокумента = Объект.Дата;
	
	//НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	НациональнаяВалюта = Константы.ВалютаУчета.Получить();
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", НациональнаяВалюта));
	КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	
	Элементы.ЗапасыЦена.Доступность = РольДоступна("ИзменениеЦенВДокументах");
	
КонецПроцедуры

&НаКлиенте
Процедура ТипЦенПриИзменении(Элемент)
	ПересчетДокумента();
КонецПроцедуры




&НаСервере
Процедура УстановитьДоступныеТипыЦен()
	ЦенообразованиеСервер.УстановитьДоступныеТипыЦенВДокументе(Элементы.ТипЦен, Объект.Подразделение, Объект.Дата);	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	УстановитьДоступныеТипыЦен();
	
	ПересчетДокумента();

КонецПроцедуры


&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УправлениеНебольшойФирмойКлиент.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);

КонецПроцедуры


&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	СтруктураДанные = ПолучитьДанныеКонтрагентприИзменении();
	
	ЭтаФорма.Объект.ТипЦен = СтруктураДанные.ТипЦен;
	
	ПересчетДокумента();
	
КонецПроцедуры


&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	
	Если Объект.Дата <> ДатаПередИзменением Тогда
		
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением, ВалютаРасчетов);
		
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		КурсНовый = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
		КратностьНовый = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
		
		Если НЕ(Объект.Курс = КурсНовый) Или НЕ(Объект.Кратность = КратностьНовый) Тогда
			Объект.Курс = КурсНовый;
			Объект.Кратность = КратностьНовый;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДоступностьюКолонок()
	
	Элементы.ЗапасыЦена.Доступность = Ложь;
	
	Если  Пользователи.ЭтоБухгалтер() Или Пользователи.ЭтоПолноправныйПользовательИБ() Тогда
		
		Элементы.ЗапасыЦена.Доступность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗапасыПриАктивизацииПоля(Элемент)
	
	Если Найти("ЗапасыЦена", Элемент.ТекущийЭлемент.Имя ) > 0 Тогда
		УправлениеДоступностьюКолонок();
	КонецЕсли;

КонецПроцедуры

