



&НаКлиенте
// Процедура - обработчик события Регулирования реквизита ПериодРегистрации.
//
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УправлениеНебольшойФирмойКлиент.ПриРегулированииПериодаРегистрации(ЭтаФорма, Направление);
	УправлениеНебольшойФирмойКлиент.ПриИзмененииПериодаРегистрации(ЭтаФорма);
	
КонецПроцедуры //ПериодРегистрацииРегулирование()

&НаКлиенте
// Процедура - обработчик события НачалоВыбора реквизита ПериодРегистрации.
//
Процедура ПериодРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка	 = Ложь;
	
	ДатаКалендаряПриОткрытии = ?(ЗначениеЗаполнено(Объект.ПериодРегистрации), Объект.ПериодРегистрации, УправлениеНебольшойФирмойПовтИсп.ПолучитьТекущуюДатаСеанса());
	
	ОткрытьФорму("ОбщаяФорма.ФормаКалендаря", УправлениеНебольшойФирмойКлиент.ПолучитьПараметрыОткрытияФормыКалендаря(ДатаКалендаряПриОткрытии), ЭтаФорма);
	
КонецПроцедуры //ПериодРегистрацииНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события Очистки реквизита ПериодРегистрации.
//
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	ПериодРегистрации = Неопределено;
	УправлениеНебольшойФирмойКлиент.ПриИзмененииПериодаРегистрации(ЭтаФорма);
	
КонецПроцедуры //ПериодРегистрацииОчистка()


&НаКлиенте
Процедура ПриОткрытии(отказ)
	
	ОтображениеПериодаРегистрации = Формат(Объект.ПериодРегистрации, "ДФ='MMMM yyyy'");
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы ОбработкаВыбора
//
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма")
		И Найти(ИсточникВыбора.ИмяФормы, "ФормаКалендаря") > 0 Тогда
		
		Объект.ПериодРегистрации = НачалоДня(ВыбранноеЗначение);
		УправлениеНебольшойФирмойКлиент.ПриИзмененииПериодаРегистрации(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

#Область КомандыФормы

&НаКлиенте
Процедура ЗаполнитьПроцентТА(команда)
	ЗаполнитьПроцентТАСервер();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУдержаниеЗаКолбасу(команда)
	ЗаполнитьУдержаниеЗаКолбасуСервер();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУдержаниеЗаВозвраты(команда)
	ЗаполнитьУдержаниеЗаВозвратыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗарплатаМенеджерыПоЗакупкам(команда)
	//ЗаполнитьЗарплатаМенеджерыПоЗакупкамНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗарплатаТорговых(команда)
	ЗаполнитьЗарплатаТорговыхНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

#Область РасчетУдержанияЗаКолбасу

&НаСервере
Процедура ЗаполнитьУдержаниеЗаКолбасуСервер()
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	
	запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	&ВидРасчета,
	|	ВЫРАЗИТЬ(ВзаиморасчетыСПокупателямиОстатки.СуммаОстаток КАК ЧИСЛО(10, 2)) КАК Результат
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСПокупателями.Остатки(&ОкончаниеПериода, Подразделение = &Подразделение) КАК ВзаиморасчетыСПокупателямиОстатки
	|		ПО (ВзаиморасчетыСПокупателямиОстатки.Контрагент = Сотрудники.Контрагент)
	|ГДЕ
	|	Сотрудники.СтруктурнаяЕдиница = &Подразделение
	|	И Сотрудники.КатегорияРаботника = &КатегорияРаботников
	|	И ВзаиморасчетыСПокупателямиОстатки.СуммаОстаток > 0
	|	//И Сотрудники.НеАктуален = ЛОЖЬ";
	
	#КонецОбласти 
	
	запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	запрос.УстановитьПараметр("КатегорияРаботников", Объект.КатегорияРаботников);
	запрос.УстановитьПараметр("ВидРасчета", Справочники.ВидыРасчетов.УдержаниеЗаКолбасу);
	запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца(Объект.ПериодРегистрации));
	
	Объект.Состав.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Объект.Состав.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РасчетУдержанияЗаВозвраты

&НаСервере
Процедура ЗаполнитьУдержаниеЗаВозвратыНаСервере()
	
	Объект.Состав.Очистить();
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	
	запрос.Текст =
	"ВЫБРАТЬ
	|	СтратегияПродвиженияАссортимент.Ссылка.Подразделение,
	|	СтратегияПродвиженияАссортимент.Номенклатура,
	|	СтратегияПродвиженияАссортимент.Номенклатура.Родитель,
	|	СтратегияПродвиженияАссортимент.ПроцентЛимитВозвратов
	|ПОМЕСТИТЬ ВТ_АкционныеПозиции
	|ИЗ
	|	Документ.СтратегияПродвижения.Ассортимент КАК СтратегияПродвиженияАссортимент
	|ГДЕ
	|	СтратегияПродвиженияАссортимент.Ссылка.ДатаНачала >= &ДатаНачалаПродаж
	|	И СтратегияПродвиженияАссортимент.Ссылка.ДатаОкончания <= &ДатаОкончанияПродаж
	|	И СтратегияПродвиженияАссортимент.Ссылка.Проведен = ИСТИНА
	|	И СтратегияПродвиженияАссортимент.Ссылка.Подразделение = &Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Подразделение,
	|	ВложенныйЗапрос.Менеджер,
	|	ВложенныйЗапрос.НоменклатураРодитель,
	|	ВложенныйЗапрос.СуммаПродажРазрешенВозврат,
	|	ВложенныйЗапрос.СуммаПродажНеРазрешенВозврат,
	|	ВложенныйЗапрос.СуммаПродажРазрешенВозврат * ВложенныйЗапрос.НоменклатураРодитель.НормаПроцентаВозвратов / 100 КАК СуммаЛимитРазрешенВозврат,
	|	ВложенныйЗапрос.СуммаПродажиАкция,
	|	ВложенныйЗапрос.СуммаЛимитАкция,
	|	ВложенныйЗапрос.ТипЦены КАК ТипЦен
	|ПОМЕСТИТЬ ВТ_Продажи
	|ИЗ
	|	(ВЫБРАТЬ
	|		Продажи.Подразделение КАК Подразделение,
	|		Продажи.Менеджер КАК Менеджер,
	|		Продажи.Номенклатура.Родитель КАК НоменклатураРодитель,
	|		СУММА(ВЫБОР
	|				КОГДА ВТ_АкционныеПозиции.ПроцентЛимитВозвратов ЕСТЬ NULL 
	|					ТОГДА ВЫБОР
	|							КОГДА ЕСТЬNULL(ПараметрыУчетаПоТипамЦенСрезПоследних.РазрешеныВозвратыОтПокупателей, ЛОЖЬ)
	|									И Продажи.Номенклатура.Родитель.НормаПроцентаВозвратов <> 0
	|								ТОГДА Продажи.ПродСтоимость
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК СуммаПродажРазрешенВозврат,
	|		СУММА(ВЫБОР
	|				КОГДА ВТ_АкционныеПозиции.ПроцентЛимитВозвратов ЕСТЬ NULL 
	|					ТОГДА ВЫБОР
	|							КОГДА ЕСТЬNULL(ПараметрыУчетаПоТипамЦенСрезПоследних.РазрешеныВозвратыОтПокупателей, ЛОЖЬ)
	|									И Продажи.Номенклатура.Родитель.НормаПроцентаВозвратов <> 0
	|								ТОГДА 0
	|							ИНАЧЕ Продажи.ПродСтоимость
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК СуммаПродажНеРазрешенВозврат,
	|		СУММА(ВЫБОР
	|				КОГДА ВТ_АкционныеПозиции.ПроцентЛимитВозвратов ЕСТЬ NULL 
	|					ТОГДА 0
	|				ИНАЧЕ Продажи.ПродСтоимость
	|			КОНЕЦ) КАК СуммаПродажиАкция,
	|		СУММА(ВЫБОР
	|				КОГДА ВТ_АкционныеПозиции.ПроцентЛимитВозвратов ЕСТЬ NULL 
	|					ТОГДА 0
	|				ИНАЧЕ Продажи.ПродСтоимость * ВТ_АкционныеПозиции.ПроцентЛимитВозвратов / 100
	|			КОНЕЦ) КАК СуммаЛимитАкция,
	|		Продажи.ТипЦены КАК ТипЦены
	|	ИЗ
	|		РегистрНакопления.Продажи КАК Продажи
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыУчетаПоТипамЦен.СрезПоследних({(&ДатаСреза)}, ) КАК ПараметрыУчетаПоТипамЦенСрезПоследних
	|			ПО Продажи.Подразделение = ПараметрыУчетаПоТипамЦенСрезПоследних.Подразделение
	|				И Продажи.ТипЦены = ПараметрыУчетаПоТипамЦенСрезПоследних.ТипЦен
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АкционныеПозиции КАК ВТ_АкционныеПозиции
	|			ПО Продажи.Подразделение = ВТ_АкционныеПозиции.Подразделение
	|				И Продажи.Номенклатура = ВТ_АкционныеПозиции.Номенклатура
	|	ГДЕ
	|		Продажи.Период МЕЖДУ &ДатаНачалаПродаж И &ДатаОкончанияПродаж
	|		И Продажи.ЭтоВозврат = ЛОЖЬ
	|		И Продажи.Номенклатура.Родитель.Возврат100Процентов = ЛОЖЬ
	|		И ЕСТЬNULL(ПараметрыУчетаПоТипамЦенСрезПоследних.РекомендуемыйЗаказПокупателя, ЛОЖЬ) = ЛОЖЬ
	|		И Продажи.Подразделение = &Подразделение
	|	{ГДЕ
	|		Продажи.Подразделение,
	|		Продажи.Менеджер,
	|		Продажи.Номенклатура.Родитель,
	|		Продажи.ТипЦены}
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Продажи.Подразделение,
	|		Продажи.Менеджер,
	|		Продажи.Номенклатура.Родитель,
	|		Продажи.ТипЦены) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Подразделение,
	|	ВложенныйЗапрос.Менеджер,
	|	ВложенныйЗапрос.НоменклатураРодитель,
	|	ВложенныйЗапрос.СуммаВозвратНаЗавод,
	|	ВложенныйЗапрос.СуммаВозвратНаСкладВозвратовРазрешнные,
	|	ВложенныйЗапрос.СуммаВозвратНаСкладВозвратовНеРазрешнные,
	|	ВложенныйЗапрос.СуммаВозвратАкция,
	|	ВложенныйЗапрос.ТипЦен
	|ПОМЕСТИТЬ ВТ_Возвраты
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВозвратОтПокупателяЗапасы.Ссылка.Подразделение КАК Подразделение,
	|		ВозвратОтПокупателяЗапасы.Ссылка.Менеджер КАК Менеджер,
	|		ВозвратОтПокупателяЗапасы.Номенклатура.Родитель КАК НоменклатураРодитель,
	|		СУММА(ВЫБОР
	|				КОГДА ВозвратОтПокупателяЗапасы.СтруктурнаяЕдиница = ВозвратОтПокупателяЗапасы.Номенклатура.Родитель.Склад
	|					ТОГДА ВозвратОтПокупателяЗапасы.Сумма
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК СуммаВозвратНаЗавод,
	|		СУММА(ВЫБОР
	|				КОГДА ВТ_АкционныеПозиции.ПроцентЛимитВозвратов ЕСТЬ NULL 
	|					ТОГДА ВЫБОР
	|							КОГДА ЕСТЬNULL(ПараметрыУчетаПоТипамЦенСрезПоследних.РазрешеныВозвратыОтПокупателей, ЛОЖЬ)
	|									И ВозвратОтПокупателяЗапасы.Номенклатура.Родитель.НормаПроцентаВозвратов <> 0
	|								ТОГДА ВЫБОР
	|										КОГДА ВозвратОтПокупателяЗапасы.СтруктурнаяЕдиница = ВозвратОтПокупателяЗапасы.Номенклатура.Родитель.Склад
	|											ТОГДА 0
	|										ИНАЧЕ ВозвратОтПокупателяЗапасы.Сумма
	|									КОНЕЦ
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК СуммаВозвратНаСкладВозвратовРазрешнные,
	|		СУММА(ВЫБОР
	|				КОГДА ВТ_АкционныеПозиции.ПроцентЛимитВозвратов ЕСТЬ NULL 
	|					ТОГДА ВЫБОР
	|							КОГДА ЕСТЬNULL(ПараметрыУчетаПоТипамЦенСрезПоследних.РазрешеныВозвратыОтПокупателей, ЛОЖЬ)
	|									И ВозвратОтПокупателяЗапасы.Номенклатура.Родитель.НормаПроцентаВозвратов <> 0
	|								ТОГДА 0
	|							ИНАЧЕ ВЫБОР
	|									КОГДА ВозвратОтПокупателяЗапасы.СтруктурнаяЕдиница = ВозвратОтПокупателяЗапасы.Номенклатура.Родитель.Склад
	|										ТОГДА 0
	|									ИНАЧЕ ВозвратОтПокупателяЗапасы.Сумма
	|								КОНЕЦ
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК СуммаВозвратНаСкладВозвратовНеРазрешнные,
	|		СУММА(ВЫБОР
	|				КОГДА ВТ_АкционныеПозиции.ПроцентЛимитВозвратов ЕСТЬ NULL 
	|					ТОГДА 0
	|				ИНАЧЕ ВозвратОтПокупателяЗапасы.Сумма
	|			КОНЕЦ) КАК СуммаВозвратАкция,
	|		ВозвратОтПокупателяЗапасы.Ссылка.ТипЦен КАК ТипЦен
	|	ИЗ
	|		Документ.ВозвратОтПокупателя.Запасы КАК ВозвратОтПокупателяЗапасы
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыУчетаПоТипамЦен.СрезПоследних({(&ДатаСреза)}, ) КАК ПараметрыУчетаПоТипамЦенСрезПоследних
	|			ПО ВозвратОтПокупателяЗапасы.Ссылка.Подразделение = ПараметрыУчетаПоТипамЦенСрезПоследних.Подразделение
	|				И ВозвратОтПокупателяЗапасы.Ссылка.ТипЦен = ПараметрыУчетаПоТипамЦенСрезПоследних.ТипЦен
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АкционныеПозиции КАК ВТ_АкционныеПозиции
	|			ПО ВозвратОтПокупателяЗапасы.Ссылка.Подразделение = ВТ_АкционныеПозиции.Подразделение
	|				И ВозвратОтПокупателяЗапасы.Номенклатура = ВТ_АкционныеПозиции.Номенклатура
	|	ГДЕ
	|		ВозвратОтПокупателяЗапасы.Ссылка.Дата МЕЖДУ &ДатаНачалаВозвратов И &ДатаОкончанияВозвратов
	|		И ВозвратОтПокупателяЗапасы.Ссылка.Проведен = ИСТИНА
	|		И ВозвратОтПокупателяЗапасы.Номенклатура.Родитель.Возврат100Процентов = ЛОЖЬ
	|		И ЕСТЬNULL(ПараметрыУчетаПоТипамЦенСрезПоследних.РекомендуемыйЗаказПокупателя, ЛОЖЬ) = ЛОЖЬ
	|		И ВозвратОтПокупателяЗапасы.Ссылка.Подразделение = &Подразделение
	|	{ГДЕ
	|		ВозвратОтПокупателяЗапасы.Ссылка.Подразделение,
	|		ВозвратОтПокупателяЗапасы.Ссылка.Менеджер,
	|		ВозвратОтПокупателяЗапасы.Ссылка.ТипЦен,
	|		ВозвратОтПокупателяЗапасы.Номенклатура.Родитель}
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВозвратОтПокупателяЗапасы.Ссылка.Подразделение,
	|		ВозвратОтПокупателяЗапасы.Ссылка.Менеджер,
	|		ВозвратОтПокупателяЗапасы.Номенклатура.Родитель,
	|		ВозвратОтПокупателяЗапасы.Ссылка.ТипЦен) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПродажиВозвраты.Подразделение,
	|	ПродажиВозвраты.Менеджер,
	|	ЕСТЬNULL(КД_НазначенияТорговыхПредставителейСрезПоследних.Сотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК Сотрудник,
	|	СУММА(ПродажиВозвраты.СуммаВозвратНаСкладВозвратовНеРазрешнные) КАК СуммаВозвратНаСкладВозвратовНеРазрешнные,
	|	СУММА(ПродажиВозвраты.СуммаВозвратНаСкладВозвратовРазрешнные) КАК СуммаВозвратНаСкладВозвратовРазрешнные,
	|	СУММА(ПродажиВозвраты.СуммаВозвратАкция) КАК СуммаВозвратАкция,
	|	СУММА(ПродажиВозвраты.СуммаЛимитРазрешенВозврат) КАК СуммаЛимитРазрешенВозврат,
	|	СУММА(ПродажиВозвраты.СуммаЛимитАкция) КАК СуммаЛимитАкция
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_Продажи.Подразделение КАК Подразделение,
	|		ВТ_Продажи.Менеджер КАК Менеджер,
	|		ВТ_Продажи.НоменклатураРодитель КАК НоменклатураРодитель,
	|		ВТ_Продажи.СуммаПродажРазрешенВозврат КАК СуммаПродажРазрешенВозврат,
	|		ВТ_Продажи.СуммаПродажНеРазрешенВозврат КАК СуммаПродажНеРазрешенВозврат,
	|		0 КАК СуммаВозвратНаЗавод,
	|		0 КАК СуммаВозвратНаСкладВозвратовРазрешнные,
	|		0 КАК СуммаВозвратНаСкладВозвратовНеРазрешнные,
	|		ВТ_Продажи.СуммаЛимитРазрешенВозврат КАК СуммаЛимитРазрешенВозврат,
	|		ВТ_Продажи.СуммаПродажиАкция КАК СуммаПродажиАкция,
	|		ВТ_Продажи.СуммаЛимитАкция КАК СуммаЛимитАкция,
	|		0 КАК СуммаВозвратАкция
	|	ИЗ
	|		ВТ_Продажи КАК ВТ_Продажи
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_Возвраты.Подразделение,
	|		ВТ_Возвраты.Менеджер,
	|		ВТ_Возвраты.НоменклатураРодитель,
	|		0,
	|		0,
	|		ВТ_Возвраты.СуммаВозвратНаЗавод,
	|		ВТ_Возвраты.СуммаВозвратНаСкладВозвратовРазрешнные,
	|		ВТ_Возвраты.СуммаВозвратНаСкладВозвратовНеРазрешнные,
	|		0,
	|		0,
	|		0,
	|		ВТ_Возвраты.СуммаВозвратАкция
	|	ИЗ
	|		ВТ_Возвраты КАК ВТ_Возвраты) КАК ПродажиВозвраты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КД_НазначенияТорговыхПредставителей.СрезПоследних(&ДатаСреза, Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСотрудников.Уволен)) КАК КД_НазначенияТорговыхПредставителейСрезПоследних
	|		ПО ПродажиВозвраты.Подразделение = КД_НазначенияТорговыхПредставителейСрезПоследних.Подразделение
	|			И ПродажиВозвраты.Менеджер = КД_НазначенияТорговыхПредставителейСрезПоследних.Менеджер
	|
	|СГРУППИРОВАТЬ ПО
	|	ПродажиВозвраты.Подразделение,
	|	ПродажиВозвраты.Менеджер,
	|	ЕСТЬNULL(КД_НазначенияТорговыхПредставителейСрезПоследних.Сотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))";
	
	#КонецОбласти
	
	запрос.УстановитьПараметр("ДатаСреза", КонецМесяца(Объект.ПериодРегистрации));
	запрос.УстановитьПараметр("ДатаНачалаВозвратов", НачалоМесяца(Объект.ПериодРегистрации));
	запрос.УстановитьПараметр("ДатаОкончанияВозвратов", КонецМесяца(Объект.ПериодРегистрации));
	запрос.УстановитьПараметр("ДатаНачалаПродаж", НачалоМесяца(Объект.ПериодРегистрации));
	запрос.УстановитьПараметр("ДатаОкончанияПродаж", КонецМесяца(Объект.ПериодРегистрации));
	запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	
	результатЗапроса = запрос.Выполнить();
	
	выборка = результатЗапроса.Выбрать();
	Пока выборка.Следующий() Цикл
		
		Если выборка.Сотрудник.Пустая() Тогда
			сообщить(СтрШаблон("проверьте назначения по менеджеру; %1", выборка.Менеджер));
			Продолжить;
		КонецЕсли;
		
		// расчитаем неразрешенные возвраты
		Если Не выборка.СуммаВозвратНаСкладВозвратовНеРазрешнные = 0 Тогда
			новаяСтрока = Объект.Состав.Добавить();
			новаяСтрока.Сотрудник = выборка.Сотрудник;
			новаяСтрока.ВидРасчета = Справочники.ВидыРасчетов.УдержаниеЗаВозвраты;
			новаяСтрока.Результат =  выборка.СуммаВозвратНаСкладВозвратовНеРазрешнные;	
		КонецЕсли;
		
		// расчитаем перелимит
		перелимитПоВозвратам = выборка.СуммаЛимитРазрешенВозврат - выборка.СуммаВозвратНаСкладВозвратовРазрешнные;
		
		Если перелимитПоВозвратам < 0 Тогда
			новаяСтрока = Объект.Состав.Добавить();
			новаяСтрока.Сотрудник = выборка.Сотрудник;
			новаяСтрока.ВидРасчета = Справочники.ВидыРасчетов.УдержаниеЗаВозвратыПерелимит;
			новаяСтрока.Результат =  -перелимитПоВозвратам;
		КонецЕсли;
		
		// расчитаем перелимит по новинке
		перелимитПоВозвратам = выборка.СуммаЛимитАкция - выборка.СуммаВозвратАкция;
		
		Если перелимитПоВозвратам < 0 Тогда
			новаяСтрока = Объект.Состав.Добавить();
			новаяСтрока.Сотрудник = выборка.Сотрудник;
			//новаяСтрока.ВидРасчета = Справочники.ВидыРасчетов.УдержаниеЗаВозвратыАкция;
			новаяСтрока.ВидРасчета = Справочники.ВидыРасчетов.УдержаниеЗаВозвратыПерелимит;
			новаяСтрока.Результат =  -перелимитПоВозвратам;
		КонецЕсли;
		
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РасчетЗарплатыМенеджеровПоЗакупкам

Функция СформироватьТаблицуРезультатов()
	
	результат = Новый ТаблицаЗначений;
	результат.Колонки.Добавить("Сегмент", Новый ОписаниеТипов("СправочникСсылка.СегментыПартнеров"));
	результат.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	результат.Колонки.Добавить("ЗначениеОценкиПоказателя", Новый ОписаниеТипов("Число"));
	результат.Колонки.Добавить("НеВыполненНорматив", Новый ОписаниеТипов("Число"));
	
	// Мелитополь
	новаяСтрока = результат.Добавить();
	новаяСтрока.Подразделение = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000147");
	новаяСтрока.Сегмент = Справочники.СегментыПартнеров.НайтиПоНаименованию("Менеджер 1 (Критюк)");
	новаяСтрока.ЗначениеОценкиПоказателя = 0.3;
	новаяСтрока.НеВыполненНорматив = 0;
	
	новаяСтрока = результат.Добавить();
	новаяСтрока.Подразделение = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000147");
	новаяСтрока.Сегмент = Справочники.СегментыПартнеров.НайтиПоНаименованию("Менеджер 2 (Сизоненко)");
	новаяСтрока.ЗначениеОценкиПоказателя = 0.3;
	новаяСтрока.НеВыполненНорматив = 0;
	
	новаяСтрока = результат.Добавить();
	новаяСтрока.Подразделение = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000147");
	новаяСтрока.Сегмент = Справочники.СегментыПартнеров.НайтиПоНаименованию("Менеджер 3 (Бутняров)");
	новаяСтрока.ЗначениеОценкиПоказателя = 0.3;
	новаяСтрока.НеВыполненНорматив = 0;
	
	// Никополь
	новаяСтрока = результат.Добавить();
	новаяСтрока.Подразделение = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000004");
	новаяСтрока.Сегмент = Справочники.СегментыПартнеров.НайтиПоНаименованию("Менеджер 1 (Критюк)");
	новаяСтрока.ЗначениеОценкиПоказателя = 0.3;
	новаяСтрока.НеВыполненНорматив = 0;
	
	новаяСтрока = результат.Добавить();
	новаяСтрока.Подразделение = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000004");
	новаяСтрока.Сегмент = Справочники.СегментыПартнеров.НайтиПоНаименованию("Менеджер 2 (Сизоненко)");
	новаяСтрока.ЗначениеОценкиПоказателя = 0.3;
	новаяСтрока.НеВыполненНорматив = 0;
	
	новаяСтрока = результат.Добавить();
	новаяСтрока.Подразделение = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000004");
	новаяСтрока.Сегмент = Справочники.СегментыПартнеров.НайтиПоНаименованию("Менеджер 3 (Бутняров)");
	новаяСтрока.ЗначениеОценкиПоказателя = 0.2;
	новаяСтрока.НеВыполненНорматив = 1;
	
	// Запорожье
	новаяСтрока = результат.Добавить();
	новаяСтрока.Подразделение = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000008");
	новаяСтрока.Сегмент = Справочники.СегментыПартнеров.НайтиПоНаименованию("Менеджер 1 (Критюк)");
	новаяСтрока.ЗначениеОценкиПоказателя = 0.3;
	новаяСтрока.НеВыполненНорматив = 0;
	
	новаяСтрока = результат.Добавить();
	новаяСтрока.Подразделение = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000008");
	новаяСтрока.Сегмент = Справочники.СегментыПартнеров.НайтиПоНаименованию("Менеджер 2 (Сизоненко)");
	новаяСтрока.ЗначениеОценкиПоказателя = 0.3;
	новаяСтрока.НеВыполненНорматив = 0;
	
	новаяСтрока = результат.Добавить();
	новаяСтрока.Подразделение = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000008");
	новаяСтрока.Сегмент = Справочники.СегментыПартнеров.НайтиПоНаименованию("Менеджер 3 (Бутняров)");
	новаяСтрока.ЗначениеОценкиПоказателя = 0.3;
	новаяСтрока.НеВыполненНорматив = 0;
	
	// Кривой рог
	новаяСтрока = результат.Добавить();
	новаяСтрока.Подразделение = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000006");
	новаяСтрока.Сегмент = Справочники.СегментыПартнеров.НайтиПоНаименованию("Менеджер 1 (Критюк)");
	новаяСтрока.ЗначениеОценкиПоказателя = 0.3;
	новаяСтрока.НеВыполненНорматив = 0;
	
	новаяСтрока = результат.Добавить();
	новаяСтрока.Подразделение = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000006");
	новаяСтрока.Сегмент = Справочники.СегментыПартнеров.НайтиПоНаименованию("Менеджер 2 (Сизоненко)");
	новаяСтрока.ЗначениеОценкиПоказателя = 0.3;
	новаяСтрока.НеВыполненНорматив = 0;
	
	новаяСтрока = результат.Добавить();
	новаяСтрока.Подразделение = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000006");
	новаяСтрока.Сегмент = Справочники.СегментыПартнеров.НайтиПоНаименованию("Менеджер 3 (Бутняров)");
	новаяСтрока.ЗначениеОценкиПоказателя = 0.3;
	новаяСтрока.НеВыполненНорматив = 0;
	
	
	
	
	Возврат результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЗарплатаМенеджерыПоЗакупкамНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Объект.Состав.Очистить();
	
	мСегментыпартнеров = Новый Массив;
	мСегментыпартнеров.Добавить(Справочники.СегментыПартнеров.НайтиПоНаименованию("Менеджер 1 (Критюк)"));
	мСегментыпартнеров.Добавить(Справочники.СегментыПартнеров.НайтиПоНаименованию("Менеджер 2 (Сизоненко)"));
	мСегментыпартнеров.Добавить(Справочники.СегментыПартнеров.НайтиПоНаименованию("Менеджер 3 (Бутняров)"));
	
	отбо_каналСбыта = ПрограммныеПеречисления.КД_КаналСбыта().ФирменнаяРозница;
	отбор_ТипПриоритета = Перечисления.КД_ТипыПриоритетовПродукта.Обязательный;
	отбор_ШкалаОценкиПоказателей = Справочники.ШкалыОценки.НайтиПоНаименованию("ПУЗ_Файно");
	
	мПодразделения = Новый Массив;
	мПодразделения.Добавить(Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000006"));
	мПодразделения.Добавить(Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000008"));
	мПодразделения.Добавить(Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000147"));
	мПодразделения.Добавить(Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000004"));
	
	
	соСотрудникиСегменты = Новый Соответствие();
	соСотрудникиСегменты.Вставить(мСегментыпартнеров[0], Справочники.Сотрудники.НайтиПоКоду("000001215"));
	соСотрудникиСегменты.Вставить(мСегментыпартнеров[1], Справочники.Сотрудники.НайтиПоКоду("000001212"));
	соСотрудникиСегменты.Вставить(мСегментыпартнеров[2], Справочники.Сотрудники.НайтиПоКоду("000001067"));
	соСотрудникиСегменты.Вставить(Справочники.СегментыПартнеров.ПустаяСсылка(), Справочники.Сотрудники.НайтиПоКоду("000000163"));
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	
	запрос.Текст =
	"ВЫБРАТЬ
	|	ШкалыОценкиПорогиЗначений.Порог КАК ПорогНачало,
	|	МИНИМУМ(ЕСТЬNULL(ШкалыОценкиПорогиЗначений1.Порог, 9999)) КАК ПорогОкончание,
	|	ШкалыОценкиПорогиЗначений.Значение
	|ПОМЕСТИТЬ ВТ_ПорогиОценкиПоказателей
	|ИЗ
	|	Справочник.ШкалыОценки.ПорогиЗначений КАК ШкалыОценкиПорогиЗначений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШкалыОценки.ПорогиЗначений КАК ШкалыОценкиПорогиЗначений1
	|		ПО ШкалыОценкиПорогиЗначений.Ссылка = ШкалыОценкиПорогиЗначений1.Ссылка
	|			И ШкалыОценкиПорогиЗначений.Порог < ШкалыОценкиПорогиЗначений1.Порог
	|ГДЕ
	|	ШкалыОценкиПорогиЗначений.Ссылка = &отбор_ШкалаОценкиПоказателей
	|{ГДЕ
	|	ШкалыОценкиПорогиЗначений.Ссылка.* КАК ШкалаОценкиПоказателей}
	|
	|СГРУППИРОВАТЬ ПО
	|	ШкалыОценкиПорогиЗначений.Порог,
	|	ШкалыОценкиПорогиЗначений.Значение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Сегмент,
	|	ВложенныйЗапрос.Контрагент КАК Поставщик,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.НоменклатураКД_Группа КАК ГруппаПродукта,
	|	СРЕДНЕЕ(ВЫБОР
	|			КОГДА ВложенныйЗапрос.Заказано >= ВложенныйЗапрос.Получено
	|				ТОГДА ВложенныйЗапрос.Получено / ВложенныйЗапрос.Заказано * 100
	|			ИНАЧЕ 100
	|		КОНЕЦ) КАК ПроцентУдовлетворенияПоставщиком
	|ПОМЕСТИТЬ ВТ_УдовлетворениеПоставщиком
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЕСТЬNULL(ПартнерыСегмента.Сегмент, ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)) КАК Сегмент,
	|		ЗаказыПоставщикам.Номенклатура.КД_Группа КАК НоменклатураКД_Группа,
	|		ЗаказыПоставщикам.Номенклатура КАК Номенклатура,
	|		ЗаказыПоставщикам.Контрагент КАК Контрагент,
	|		ЗаказыПоставщикам.ЗаказПоставщику КАК ЗаказПоставщику,
	|		СУММА(ЗаказыПоставщикам.Заказано) КАК Заказано,
	|		СУММА(ЗаказыПоставщикам.Получено) КАК Получено
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыПоставщикам
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	|			ПО ЗаказыПоставщикам.Контрагент = ПартнерыСегмента.Партнер
	|	ГДЕ
	|		ЗаказыПоставщикам.ЗаказПоставщику.ДатаДоставки МЕЖДУ &ДатаНачалаДоставки И &ДатаОкончанияДоставки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказыПоставщикам.Номенклатура,
	|		ЗаказыПоставщикам.Контрагент,
	|		ЗаказыПоставщикам.ЗаказПоставщику,
	|		ЕСТЬNULL(ПартнерыСегмента.Сегмент, ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)),
	|		ЗаказыПоставщикам.Номенклатура.КД_Группа) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.Заказано <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Контрагент,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Сегмент,
	|	ВложенныйЗапрос.НоменклатураКД_Группа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыполнениеЗаказовПокупателей.Подразделение,
	|	ВыполнениеЗаказовПокупателей.Сегмент,
	|	ВыполнениеЗаказовПокупателей.Поставщик,
	|	СРЕДНЕЕ(ВыполнениеЗаказовПокупателей.ПроцентУдовлетворенияПокупателя) КАК ПроцентУдовлетворенияПокупателя,
	|	СРЕДНЕЕ(ВыполнениеЗаказовПокупателей.ПроцентУдовлетворенияПоставщиком) КАК ПроцентУдовлетворенияПоставщиком,
	|	ВыполнениеЗаказовПокупателей.Номенклатура
	|ПОМЕСТИТЬ ВТ_СгруппированныеДанные
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыПокупателейОбороты.Подразделение КАК Подразделение,
	|		ЗаказыПокупателейОбороты.Номенклатура КАК Номенклатура,
	|		ЗаказыПокупателейОбороты.Контрагент.КД_КаналСбыта КАК КаналСбыта,
	|		ЗаказыПокупателейОбороты.Номенклатура.КД_Группа КАК ГруппаПродукта,
	|		КД_КатегорииТорговыхТочекСрезПоследних.КатегорияТТ КАК КатегорияТТ,
	|		КД_КатегорииТорговыхТочекСрезПоследних.Подразделение КАК ПодразделениеСтандарта,
	|		ПартнерыСегмента.Сегмент КАК Сегмент,
	|		ЗаказыПокупателейОбороты.Номенклатура.Родитель.Поставщик КАК Поставщик,
	|		СРЕДНЕЕ(ВЫБОР
	|				КОГДА ЗаказыПокупателейОбороты.ЗаказаноОборот >= ЗаказыПокупателейОбороты.ОтгруженоОборот
	|					ТОГДА ЗаказыПокупателейОбороты.ОтгруженоОборот / ЗаказыПокупателейОбороты.ЗаказаноОборот * 100
	|				ИНАЧЕ 100
	|			КОНЕЦ) КАК ПроцентУдовлетворенияПокупателя,
	|		ЗаказыПокупателейОбороты.ЗаказПокупателя КАК ЗаказПокупателя,
	|		СРЕДНЕЕ(ВТ_УдовлетворениеПоставщиком.ПроцентУдовлетворенияПоставщиком) КАК ПроцентУдовлетворенияПоставщиком,
	|		ЕСТЬNULL(КД_СтандартПрисутствия.ТипПриоритета, ЗНАЧЕНИЕ(перечисление.КД_ТипыПриоритетовПродукта.НеРекомендуемый)) КАК ТипПриоритета
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Обороты(
	|				&ДатаНачалаЗаказов {(&ДатаНачалаЗаказов)},
	|				&ДатаОкончанияЗаказов {(&ДатаОкончанияЗаказов)},
	|				,
	|				Контрагент.КД_КаналСбыта = &отбо_каналСбыта
	|					И Подразделение В (&отбор_Подразделения)) КАК ЗаказыПокупателейОбороты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КД_КатегорииТорговыхТочек.СрезПоследних({(&ДатаОкончанияСреза)}, ) КАК КД_КатегорииТорговыхТочекСрезПоследних
	|			ПО ЗаказыПокупателейОбороты.Контрагент = КД_КатегорииТорговыхТочекСрезПоследних.ТорговаяТочка
	|				И ЗаказыПокупателейОбороты.Номенклатура.КД_Группа = КД_КатегорииТорговыхТочекСрезПоследних.ГруппаПродукции
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	|			ПО ЗаказыПокупателейОбороты.Номенклатура.Поставщик = ПартнерыСегмента.Партнер
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УдовлетворениеПоставщиком КАК ВТ_УдовлетворениеПоставщиком
	|			ПО ЗаказыПокупателейОбороты.Номенклатура = ВТ_УдовлетворениеПоставщиком.Номенклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КД_СтандартПрисутствия КАК КД_СтандартПрисутствия
	|			ПО (КД_КатегорииТорговыхТочекСрезПоследних.Подразделение = КД_СтандартПрисутствия.Подразделение)
	|				И (КД_КатегорииТорговыхТочекСрезПоследних.КатегорияТТ = КД_СтандартПрисутствия.КатегорияТТ)
	|				И ЗаказыПокупателейОбороты.Номенклатура = КД_СтандартПрисутствия.Номенклатура
	|				И (&ДатаНачалаСтандарта = КД_СтандартПрисутствия.Период)
	|	ГДЕ
	|		ЗаказыПокупателейОбороты.ЗаказаноОборот <> 0
	|		И НЕ ПартнерыСегмента.Сегмент ЕСТЬ NULL 
	|		И КД_СтандартПрисутствия.ТипПриоритета = &отбор_ТипПриоритета
	|	{ГДЕ
	|		ЗаказыПокупателейОбороты.Контрагент.КД_КаналСбыта.* КАК КаналСбыта,
	|		ЗаказыПокупателейОбороты.Номенклатура.КД_Группа.* КАК ГруппаПродукта,
	|		КД_СтандартПрисутствия.ТипПриоритета.*,
	|		ЗаказыПокупателейОбороты.Номенклатура.Родитель.Поставщик.* КАК Поставщик}
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказыПокупателейОбороты.Подразделение,
	|		ЗаказыПокупателейОбороты.Номенклатура,
	|		ЗаказыПокупателейОбороты.Контрагент.КД_КаналСбыта,
	|		ЗаказыПокупателейОбороты.Номенклатура.КД_Группа,
	|		КД_КатегорииТорговыхТочекСрезПоследних.Подразделение,
	|		КД_КатегорииТорговыхТочекСрезПоследних.КатегорияТТ,
	|		ПартнерыСегмента.Сегмент,
	|		ЗаказыПокупателейОбороты.Номенклатура.Родитель.Поставщик,
	|		ЗаказыПокупателейОбороты.ЗаказПокупателя,
	|		ЕСТЬNULL(КД_СтандартПрисутствия.ТипПриоритета, ЗНАЧЕНИЕ(перечисление.КД_ТипыПриоритетовПродукта.НеРекомендуемый))) КАК ВыполнениеЗаказовПокупателей
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыполнениеЗаказовПокупателей.Подразделение,
	|	ВыполнениеЗаказовПокупателей.Поставщик,
	|	ВыполнениеЗаказовПокупателей.Сегмент,
	|	ВыполнениеЗаказовПокупателей.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_УдовлетворениеПоставщиком
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Подразделение,
	|	ВложенныйЗапрос.Сегмент,
	|	СРЕДНЕЕ(ВложенныйЗапрос.ПроцентУдовлетворенияПокупателя) КАК ПроцентУдовлетворенияПокупателя,
	|	СРЕДНЕЕ(ВложенныйЗапрос.ПроцентУдовлетворенияПоставщиком) КАК ПроцентУдовлетворенияПоставщиком,
	|	ВложенныйЗапрос.Поставщик
	|ПОМЕСТИТЬ ВТ_ТаблицаРезультата
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_СгруппированныеДанные.Подразделение КАК Подразделение,
	|		ВТ_СгруппированныеДанные.Сегмент КАК Сегмент,
	|		ВТ_СгруппированныеДанные.Поставщик КАК Поставщик,
	|		ВТ_СгруппированныеДанные.ПроцентУдовлетворенияПокупателя КАК ПроцентУдовлетворенияПокупателя,
	|		ВТ_СгруппированныеДанные.ПроцентУдовлетворенияПоставщиком КАК ПроцентУдовлетворенияПоставщиком,
	|		ВЫБОР
	|			КОГДА ВТ_СгруппированныеДанные.ПроцентУдовлетворенияПокупателя > &МинимальныйПроцентУдовлетворенияПокупателя
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ВТ_СгруппированныеДанные.ПроцентУдовлетворенияПоставщиком >= &МинимальныйПроцентУдовлетворенияПоПоставщику
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОНЕЦ КАК УчитыватьВРасчете,
	|		ВТ_СгруппированныеДанные.Номенклатура КАК Номенклатура
	|	ИЗ
	|		ВТ_СгруппированныеДанные КАК ВТ_СгруппированныеДанные
	|	ГДЕ
	|		ВЫБОР
	|				КОГДА ВТ_СгруппированныеДанные.ПроцентУдовлетворенияПокупателя > &МинимальныйПроцентУдовлетворенияПокупателя
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВТ_СгруппированныеДанные.ПроцентУдовлетворенияПоставщиком >= &МинимальныйПроцентУдовлетворенияПоПоставщику
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			КОНЕЦ = ИСТИНА) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Подразделение,
	|	ВложенныйЗапрос.Сегмент,
	|	ВложенныйЗапрос.Поставщик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СгруппированныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Подразделение,
	|	ВложенныйЗапрос.Сегмент,
	|	СРЕДНЕЕ(ВложенныйЗапрос.ПроцентУдовлетворенияПокупателя) КАК ПроцентУдовлетворенияПокупателя,
	|	СРЕДНЕЕ(ВложенныйЗапрос.ПроцентУдовлетворенияПоставщиком) КАК ПроцентУдовлетворенияПоставщиком,
	|	СУММА(ВложенныйЗапрос.НеВыполненНорматив) КАК НеВыполненНорматив
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_ТаблицаРезультата.Подразделение КАК Подразделение,
	|		ВТ_ТаблицаРезультата.Сегмент КАК Сегмент,
	|		ВТ_ТаблицаРезультата.ПроцентУдовлетворенияПокупателя КАК ПроцентУдовлетворенияПокупателя,
	|		ВТ_ТаблицаРезультата.ПроцентУдовлетворенияПоставщиком КАК ПроцентУдовлетворенияПоставщиком,
	|		ВЫБОР
	|			КОГДА ВТ_ТаблицаРезультата.ПроцентУдовлетворенияПокупателя < &МинимальныйПроцентУдовлетворенияПокупателя
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НеВыполненНорматив,
	|		ВТ_ТаблицаРезультата.Поставщик КАК Поставщик
	|	ИЗ
	|		ВТ_ТаблицаРезультата КАК ВТ_ТаблицаРезультата) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Сегмент,
	|	ВложенныйЗапрос.Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Результат.Подразделение,
	|	ВТ_Результат.Сегмент,
	|	ВТ_Результат.ПроцентУдовлетворенияПокупателя,
	|	ВТ_Результат.ПроцентУдовлетворенияПоставщиком,
	|	ВТ_Результат.НеВыполненНорматив,
	|	ВТ_ПорогиОценкиПоказателей.Значение КАК ЗначениеОценкиПоказателя
	|ИЗ
	|	ВТ_Результат КАК ВТ_Результат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПорогиОценкиПоказателей КАК ВТ_ПорогиОценкиПоказателей
	|		ПО ВТ_Результат.ПроцентУдовлетворенияПокупателя >= ВТ_ПорогиОценкиПоказателей.ПорогНачало
	|			И ВТ_Результат.ПроцентУдовлетворенияПокупателя < ВТ_ПорогиОценкиПоказателей.ПорогОкончание";
	
	#КонецОбласти
	
	запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаРезультата.Подразделение,
	|	ТаблицаРезультата.Сегмент,
	|	ТаблицаРезультата.ЗначениеОценкиПоказателя,
	|	ТаблицаРезультата.НеВыполненНорматив
	|ПОМЕСТИТЬ ВТ_ТаблицаРезультатов
	|ИЗ
	|	&ТаблицаРезультата КАК ТаблицаРезультата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаРезультатов.Подразделение,
	|	ВТ_ТаблицаРезультатов.Сегмент,
	|	ВТ_ТаблицаРезультатов.ЗначениеОценкиПоказателя,
	|	ВТ_ТаблицаРезультатов.НеВыполненНорматив
	|ИЗ
	|	ВТ_ТаблицаРезультатов КАК ВТ_ТаблицаРезультатов";
	
	запрос.УстановитьПараметр("МинимальныйПроцентУдовлетворенияПокупателя", 80);
	запрос.УстановитьПараметр("МинимальныйПроцентУдовлетворенияПоПоставщику", 90);
	запрос.УстановитьПараметр("отбор_ШкалаОценкиПоказателей", отбор_ШкалаОценкиПоказателей);
	запрос.УстановитьПараметр("отбор_ТипПриоритета", отбор_ТипПриоритета);
	запрос.УстановитьПараметр("отбо_каналСбыта", отбо_каналСбыта);
	запрос.УстановитьПараметр("отбор_Подразделения", мПодразделения);
	
	тзТаблицаРезультатов = СформироватьТаблицуРезультатов();
	запрос.УстановитьПараметр("ТаблицаРезультата", тзТаблицаРезультатов);
	
	запрос.УстановитьПараметр("ДатаНачалаДоставки", НачалоМесяца(Объект.ПериодРегистрации));
	запрос.УстановитьПараметр("ДатаНачалаЗаказов", НачалоМесяца(Объект.ПериодРегистрации));
	запрос.УстановитьПараметр("ДатаНачалаСтандарта", НачалоМесяца(Объект.ПериодРегистрации));
	запрос.УстановитьПараметр("ДатаОкончанияДоставки", КонецМесяца(Объект.ПериодРегистрации) - 24*60*60);
	запрос.УстановитьПараметр("ДатаОкончанияЗаказов", КонецМесяца(Объект.ПериодРегистрации) - 24*60*60);
	запрос.УстановитьПараметр("ДатаОкончанияСреза", КонецМесяца(Объект.ПериодРегистрации) - 24*60*60);
	
	результатЗапроса = запрос.Выполнить();
	
	соМинимальныеКоэффициентыПоПодразделениям = Новый Соответствие;
	соБазыРасчетаПоСотрудникам = Новый Соответствие;
	
	// добавим оплату по "окладу" .... заодно получим базыРасчета
	видРасчета = Справочники.ВидыРасчетов.НайтиПоНаименованию("Оклад");
	
	Для Каждого элементСоответствия Из соСотрудникиСегменты Цикл
		
		сотрудник = элементСоответствия.Значение;
		
		Для Каждого строкаНачислений Из сотрудник.ПлановыеНачисления Цикл
			
			Если строкаНачислений.ВидРасчета = видРасчета Тогда
				
				новаяСтрока = Объект.Состав.Добавить();
				
				новаяСтрока.Сотрудник = сотрудник;
				новаяСтрока.ВидРасчета = видРасчета;
				новаяСтрока.Результат = строкаНачислений.Показатель1;
				
				соБазыРасчетаПоСотрудникам.Вставить(сотрудник, строкаНачислений.Показатель1);
				
			КонецЕсли;
			
		КонецЦикла;
		
		
	КонецЦикла;
	
	
	видРасчета = Справочники.ВидыРасчетов.НайтиПоНаименованию("Премия");
	
	выборка = результатЗапроса.Выбрать();
	Пока выборка.Следующий() Цикл
		
		сотрудник = соСотрудникиСегменты.Получить(выборка.Сегмент);
		базаРасчета = соБазыРасчетаПоСотрудникам.Получить(сотрудник) / 4;
		минимальныйКоэффициент = выборка.ЗначениеОценкиПоказателя;
		
		Если выборка.НеВыполненНорматив = 1 И минимальныйКоэффициент > 0 Тогда
			минимальныйКоэффициент = 0;
		КонецЕсли;
		
		результат = базаРасчета * минимальныйКоэффициент;
		
		Если Не результат = 0 Тогда
			
			новаяСтрока = Объект.Состав.Добавить();
			
			новаяСтрока.Сотрудник = сотрудник;
			новаяСтрока.ВидРасчета = видРасчета;
			новаяСтрока.Результат = результат;
			
		КонецЕсли;
		
		сохраненныйКоэффициент = соМинимальныеКоэффициентыПоПодразделениям.Получить(выборка.Подразделение);
		Если  сохраненныйКоэффициент = Неопределено Или сохраненныйКоэффициент > минимальныйКоэффициент Тогда
			соМинимальныеКоэффициентыПоПодразделениям.Вставить(выборка.Подразделение, минимальныйКоэффициент);
		КонецЕсли;
		
	КонецЦикла;
	
	// расчитаем доплату по "бугру"
	сотрудник = соСотрудникиСегменты.Получить(Справочники.СегментыПартнеров.ПустаяСсылка());
	базаРасчета = соБазыРасчетаПоСотрудникам.Получить(сотрудник) / 4;
	
	Для Каждого элементСоответствия Из соМинимальныеКоэффициентыПоПодразделениям Цикл
		
		результат = базаРасчета * элементСоответствия.Значение;
		
		Если Не результат = 0 Тогда
			
			новаяСтрока = Объект.Состав.Добавить();
			
			новаяСтрока.Сотрудник = сотрудник;
			новаяСтрока.ВидРасчета = видРасчета;
			новаяСтрока.Результат = результат;
			
		КонецЕсли;
		
	КонецЦикла
	
	
	
КонецПроцедуры

#КонецОбласти

#Область РасчетЗарплатыТорговых

функция ПолучитьСтруктуруКлючаСоответствия()
	Возврат Новый Структура("Подразделение, ТипПриоритета, ГруппаПродукта");
КонецФункции

Функция ПолучитьБазыРасчетаПоказателей()
	
	результат = Новый Соответствие();
	
	// "Кривой Рог" / МКИ
	структураКлючаСоответствия = ПолучитьСтруктуруКлючаСоответствия();
	структураКлючаСоответствия.Подразделение = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000006");
	структураКлючаСоответствия.ТипПриоритета = Перечисления.КД_ТипыПриоритетовПродукта.Обязательный;
	структураКлючаСоответствия.ГруппаПродукта = Справочники.КД_ГруппыНоменклатуры.НайтиПоКоду("000000013");
	
	результат.Вставить(ЗначениеВСтрокуВнутр(структураКлючаСоответствия), Новый Структура("БазаРасчета, ВидРасчета",8000, Справочники.ВидыРасчетов.НайтиПоНаименованию("КПИ 1")));
	
	структураКлючаСоответствия = ПолучитьСтруктуруКлючаСоответствия();
	структураКлючаСоответствия.Подразделение = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000006");
	структураКлючаСоответствия.ТипПриоритета = Перечисления.КД_ТипыПриоритетовПродукта.Рекомендуемый;
	структураКлючаСоответствия.ГруппаПродукта = Справочники.КД_ГруппыНоменклатуры.НайтиПоКоду("000000013");
	
	результат.Вставить(ЗначениеВСтрокуВнутр(структураКлючаСоответствия), Новый Структура("БазаРасчета, ВидРасчета",4000, Справочники.ВидыРасчетов.НайтиПоНаименованию("КПИ 2")));
	
	// "Запорожье" / МКИ
	структураКлючаСоответствия = ПолучитьСтруктуруКлючаСоответствия();
	структураКлючаСоответствия.Подразделение = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000008");
	структураКлючаСоответствия.ТипПриоритета = Перечисления.КД_ТипыПриоритетовПродукта.Обязательный;
	структураКлючаСоответствия.ГруппаПродукта = Справочники.КД_ГруппыНоменклатуры.НайтиПоКоду("000000013");
	
	результат.Вставить(ЗначениеВСтрокуВнутр(структураКлючаСоответствия), Новый Структура("БазаРасчета, ВидРасчета",8000, Справочники.ВидыРасчетов.НайтиПоНаименованию("КПИ 1")));
	
	структураКлючаСоответствия = ПолучитьСтруктуруКлючаСоответствия();
	структураКлючаСоответствия.Подразделение = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000008");
	структураКлючаСоответствия.ТипПриоритета = Перечисления.КД_ТипыПриоритетовПродукта.Рекомендуемый;
	структураКлючаСоответствия.ГруппаПродукта = Справочники.КД_ГруппыНоменклатуры.НайтиПоКоду("000000013");
	
	результат.Вставить(ЗначениеВСтрокуВнутр(структураКлючаСоответствия), Новый Структура("БазаРасчета, ВидРасчета",4000, Справочники.ВидыРасчетов.НайтиПоНаименованию("КПИ 2")));
	
	// "Мелитополь" / МКИ
	структураКлючаСоответствия = ПолучитьСтруктуруКлючаСоответствия();
	структураКлючаСоответствия.Подразделение = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000147");
	структураКлючаСоответствия.ТипПриоритета = Перечисления.КД_ТипыПриоритетовПродукта.Обязательный;
	структураКлючаСоответствия.ГруппаПродукта = Справочники.КД_ГруппыНоменклатуры.НайтиПоКоду("000000013");
	
	результат.Вставить(ЗначениеВСтрокуВнутр(структураКлючаСоответствия), Новый Структура("БазаРасчета, ВидРасчета",8000, Справочники.ВидыРасчетов.НайтиПоНаименованию("КПИ 1")));
	
	структураКлючаСоответствия = ПолучитьСтруктуруКлючаСоответствия();
	структураКлючаСоответствия.Подразделение = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000147");
	структураКлючаСоответствия.ТипПриоритета = Перечисления.КД_ТипыПриоритетовПродукта.Рекомендуемый;
	структураКлючаСоответствия.ГруппаПродукта = Справочники.КД_ГруппыНоменклатуры.НайтиПоКоду("000000013");
	
	результат.Вставить(ЗначениеВСтрокуВнутр(структураКлючаСоответствия), Новый Структура("БазаРасчета, ВидРасчета",4000, Справочники.ВидыРасчетов.НайтиПоНаименованию("КПИ 2")));
	
	// "Никополь" / МКИ
	структураКлючаСоответствия = ПолучитьСтруктуруКлючаСоответствия();
	структураКлючаСоответствия.Подразделение = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000004");
	структураКлючаСоответствия.ТипПриоритета = Перечисления.КД_ТипыПриоритетовПродукта.Обязательный;
	структураКлючаСоответствия.ГруппаПродукта = Справочники.КД_ГруппыНоменклатуры.НайтиПоКоду("000000013");
	
	результат.Вставить(ЗначениеВСтрокуВнутр(структураКлючаСоответствия), Новый Структура("БазаРасчета, ВидРасчета",8000, Справочники.ВидыРасчетов.НайтиПоНаименованию("КПИ 1")));
	
	структураКлючаСоответствия = ПолучитьСтруктуруКлючаСоответствия();
	структураКлючаСоответствия.Подразделение = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000004");
	структураКлючаСоответствия.ТипПриоритета = Перечисления.КД_ТипыПриоритетовПродукта.Рекомендуемый;
	структураКлючаСоответствия.ГруппаПродукта = Справочники.КД_ГруппыНоменклатуры.НайтиПоКоду("000000013");
	
	результат.Вставить(ЗначениеВСтрокуВнутр(структураКлючаСоответствия), Новый Структура("БазаРасчета, ВидРасчета",4000, Справочники.ВидыРасчетов.НайтиПоНаименованию("КПИ 2")));	
	
	// "Кривой Рог" / МИ
	структураКлючаСоответствия = ПолучитьСтруктуруКлючаСоответствия();
	структураКлючаСоответствия.Подразделение = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000006");
	структураКлючаСоответствия.ТипПриоритета = Перечисления.КД_ТипыПриоритетовПродукта.Обязательный;
	структураКлючаСоответствия.ГруппаПродукта = Справочники.КД_ГруппыНоменклатуры.НайтиПоКоду("000000014");
	
	результат.Вставить(ЗначениеВСтрокуВнутр(структураКлючаСоответствия), Новый Структура("БазаРасчета, ВидРасчета",5000, Справочники.ВидыРасчетов.НайтиПоНаименованию("КПИ 2")));
	
	структураКлючаСоответствия = ПолучитьСтруктуруКлючаСоответствия();
	структураКлючаСоответствия.Подразделение = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000006");
	структураКлючаСоответствия.ТипПриоритета = Перечисления.КД_ТипыПриоритетовПродукта.Рекомендуемый;
	структураКлючаСоответствия.ГруппаПродукта = Справочники.КД_ГруппыНоменклатуры.НайтиПоКоду("000000014");
	
	результат.Вставить(ЗначениеВСтрокуВнутр(структураКлючаСоответствия), Новый Структура("БазаРасчета, ВидРасчета",2500, Справочники.ВидыРасчетов.НайтиПоНаименованию("КПИ 3")));
	
	// "Запорожье" / МИ
	структураКлючаСоответствия = ПолучитьСтруктуруКлючаСоответствия();
	структураКлючаСоответствия.Подразделение = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000008");
	структураКлючаСоответствия.ТипПриоритета = Перечисления.КД_ТипыПриоритетовПродукта.Обязательный;
	структураКлючаСоответствия.ГруппаПродукта = Справочники.КД_ГруппыНоменклатуры.НайтиПоКоду("000000014");
	
	результат.Вставить(ЗначениеВСтрокуВнутр(структураКлючаСоответствия), Новый Структура("БазаРасчета, ВидРасчета",5000, Справочники.ВидыРасчетов.НайтиПоНаименованию("КПИ 2")));
	
	структураКлючаСоответствия = ПолучитьСтруктуруКлючаСоответствия();
	структураКлючаСоответствия.Подразделение = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000008");
	структураКлючаСоответствия.ТипПриоритета = Перечисления.КД_ТипыПриоритетовПродукта.Рекомендуемый;
	структураКлючаСоответствия.ГруппаПродукта = Справочники.КД_ГруппыНоменклатуры.НайтиПоКоду("000000014");
	
	результат.Вставить(ЗначениеВСтрокуВнутр(структураКлючаСоответствия), Новый Структура("БазаРасчета, ВидРасчета",2500, Справочники.ВидыРасчетов.НайтиПоНаименованию("КПИ 3")));
	
	// "Мелитополь" / МИ
	структураКлючаСоответствия = ПолучитьСтруктуруКлючаСоответствия();
	структураКлючаСоответствия.Подразделение = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000147");
	структураКлючаСоответствия.ТипПриоритета = Перечисления.КД_ТипыПриоритетовПродукта.Обязательный;
	структураКлючаСоответствия.ГруппаПродукта = Справочники.КД_ГруппыНоменклатуры.НайтиПоКоду("000000014");
	
	результат.Вставить(ЗначениеВСтрокуВнутр(структураКлючаСоответствия), Новый Структура("БазаРасчета, ВидРасчета",5000, Справочники.ВидыРасчетов.НайтиПоНаименованию("КПИ 2")));
	
	структураКлючаСоответствия = ПолучитьСтруктуруКлючаСоответствия();
	структураКлючаСоответствия.Подразделение = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000147");
	структураКлючаСоответствия.ТипПриоритета = Перечисления.КД_ТипыПриоритетовПродукта.Рекомендуемый;
	структураКлючаСоответствия.ГруппаПродукта = Справочники.КД_ГруппыНоменклатуры.НайтиПоКоду("000000014");
	
	результат.Вставить(ЗначениеВСтрокуВнутр(структураКлючаСоответствия), Новый Структура("БазаРасчета, ВидРасчета",2500, Справочники.ВидыРасчетов.НайтиПоНаименованию("КПИ 3")));
	
	// "Никополь" / МИ
	структураКлючаСоответствия = ПолучитьСтруктуруКлючаСоответствия();
	структураКлючаСоответствия.Подразделение = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000004");
	структураКлючаСоответствия.ТипПриоритета = Перечисления.КД_ТипыПриоритетовПродукта.Обязательный;
	структураКлючаСоответствия.ГруппаПродукта = Справочники.КД_ГруппыНоменклатуры.НайтиПоКоду("000000014");
	
	результат.Вставить(ЗначениеВСтрокуВнутр(структураКлючаСоответствия), Новый Структура("БазаРасчета, ВидРасчета",5000, Справочники.ВидыРасчетов.НайтиПоНаименованию("КПИ 2")));
	
	структураКлючаСоответствия = ПолучитьСтруктуруКлючаСоответствия();
	структураКлючаСоответствия.Подразделение = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000004");
	структураКлючаСоответствия.ТипПриоритета = Перечисления.КД_ТипыПриоритетовПродукта.Рекомендуемый;
	структураКлючаСоответствия.ГруппаПродукта = Справочники.КД_ГруппыНоменклатуры.НайтиПоКоду("000000014");
	
	результат.Вставить(ЗначениеВСтрокуВнутр(структураКлючаСоответствия), Новый Структура("БазаРасчета, ВидРасчета",2500, Справочники.ВидыРасчетов.НайтиПоНаименованию("КПИ 3")));
	
	Возврат результат;
	
КонецФункции

функция ПолучитьШкалыОценкиПоГруппамПродукта()
	
	результат = Новый ТаблицаЗначений;
	результат.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	результат.Колонки.Добавить("ТипПриоритета", Новый ОписаниеТипов("ПеречислениеСсылка.КД_ТипыПриоритетовПродукта"));
	результат.Колонки.Добавить("ГруппаПродукта", Новый ОписаниеТипов("СправочникСсылка.КД_ГруппыНоменклатуры"));
	результат.Колонки.Добавить("ШкалаОценкиКПИ", Новый ОписаниеТипов("СправочникСсылка.ШкалыОценки"));
	
	// "Кривой рог" / МКИ
	новаяСтрока =  результат.Добавить();
	новаяСтрока.Подразделение = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000006");
	новаяСтрока.ТипПриоритета = неопределено;
	новаяСтрока.ГруппаПродукта = Справочники.КД_ГруппыНоменклатуры.НайтиПоКоду("000000013");
	новаяСтрока.ШкалаОценкиКПИ = Справочники.ШкалыОценки.НайтиПоНаименованию("TQM_обяз_МКИ");
	
	// "Запорожье" / МКИ
	новаяСтрока =  результат.Добавить();
	новаяСтрока.Подразделение = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000008");
	новаяСтрока.ТипПриоритета = неопределено;
	новаяСтрока.ГруппаПродукта = Справочники.КД_ГруппыНоменклатуры.НайтиПоКоду("000000013");
	новаяСтрока.ШкалаОценкиКПИ = Справочники.ШкалыОценки.НайтиПоНаименованию("TQM_обяз_МКИ");
	
	// "Мелитополь" / МКИ
	новаяСтрока =  результат.Добавить();
	новаяСтрока.Подразделение = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000147");
	новаяСтрока.ТипПриоритета = неопределено;
	новаяСтрока.ГруппаПродукта = Справочники.КД_ГруппыНоменклатуры.НайтиПоКоду("000000013");
	новаяСтрока.ШкалаОценкиКПИ = Справочники.ШкалыОценки.НайтиПоНаименованию("TQM_обяз_МКИ");
	
	// "Никополь" / МКИ
	новаяСтрока =  результат.Добавить();
	новаяСтрока.Подразделение = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000004");
	новаяСтрока.ТипПриоритета = неопределено;
	новаяСтрока.ГруппаПродукта = Справочники.КД_ГруппыНоменклатуры.НайтиПоКоду("000000013");
	новаяСтрока.ШкалаОценкиКПИ = Справочники.ШкалыОценки.НайтиПоНаименованию("TQM_обяз_МКИ");
	
	// "Кривой рог" / МИ
	новаяСтрока =  результат.Добавить();
	новаяСтрока.Подразделение = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000006");
	новаяСтрока.ТипПриоритета = неопределено;
	новаяСтрока.ГруппаПродукта = Справочники.КД_ГруппыНоменклатуры.НайтиПоКоду("000000014");
	новаяСтрока.ШкалаОценкиКПИ = Справочники.ШкалыОценки.НайтиПоНаименованию("TQM_обяз_МИ");
	
	// "Запорожье" / МИ
	новаяСтрока =  результат.Добавить();
	новаяСтрока.Подразделение = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000008");
	новаяСтрока.ТипПриоритета = неопределено;
	новаяСтрока.ГруппаПродукта = Справочники.КД_ГруппыНоменклатуры.НайтиПоКоду("000000014");
	новаяСтрока.ШкалаОценкиКПИ = Справочники.ШкалыОценки.НайтиПоНаименованию("TQM_обяз_МИ");
	
	// "Мелитополь" / МИ
	новаяСтрока =  результат.Добавить();
	новаяСтрока.Подразделение = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000147");
	новаяСтрока.ТипПриоритета = неопределено;
	новаяСтрока.ГруппаПродукта = Справочники.КД_ГруппыНоменклатуры.НайтиПоКоду("000000014");
	новаяСтрока.ШкалаОценкиКПИ = Справочники.ШкалыОценки.НайтиПоНаименованию("TQM_обяз_МИ");
	
	// "Никополь" / МИ
	новаяСтрока =  результат.Добавить();
	новаяСтрока.Подразделение = Справочники.СтруктурныеЕдиницы.НайтиПоКоду("000000004");
	новаяСтрока.ТипПриоритета = неопределено;
	новаяСтрока.ГруппаПродукта = Справочники.КД_ГруппыНоменклатуры.НайтиПоКоду("000000014");
	новаяСтрока.ШкалаОценкиКПИ = Справочники.ШкалыОценки.НайтиПоНаименованию("TQM_обяз_МИ");
	
	
	Возврат результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЗарплатаТорговыхНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Объект.Состав.Очистить();
	
	соБазыРасчетаПоказателей = ПолучитьБазыРасчетаПоказателей();
	
	тзШкалыОценкиПоГруппамПродукта = ПолучитьШкалыОценкиПоГруппамПродукта();
	
	мТипыПриоритетов = Новый Массив;
	мТипыПриоритетов.Добавить(Перечисления.КД_ТипыПриоритетовПродукта.Обязательный);
	мТипыПриоритетов.Добавить(Перечисления.КД_ТипыПриоритетовПродукта.Рекомендуемый);
	
	запрос = Новый Запрос;
	запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	#Область ТекстЗапроса
	
	запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ШкалыоценкиПоГруппамПродукта.Подразделение КАК Справочник.СтруктурныеЕдиницы) КАК Подразделение,
	|	ШкалыоценкиПоГруппамПродукта.ТипПриоритета,
	|	ВЫРАЗИТЬ(ШкалыоценкиПоГруппамПродукта.ГруппаПродукта КАК Справочник.КД_ГруппыНоменклатуры) КАК ГруппаПродукта,
	|	ВЫРАЗИТЬ(ШкалыоценкиПоГруппамПродукта.ШкалаОценкиКПИ КАК Справочник.ШкалыОценки) КАК ШкалаОценкиКПИ
	|ПОМЕСТИТЬ ВТ_ШкалыОценкиПоГруппамПродукта
	|ИЗ
	|	&ШкалыоценкиПоГруппамПродукта КАК ШкалыоценкиПоГруппамПродукта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШкалыОценкиПорогиЗначений.Ссылка,
	|	ШкалыОценкиПорогиЗначений.Порог КАК ПорогНачало,
	|	МИНИМУМ(ЕСТЬNULL(ШкалыОценкиПорогиЗначений1.Порог, 9999)) КАК ПорогОкончание,
	|	ШкалыОценкиПорогиЗначений.Значение
	|ПОМЕСТИТЬ ВТ_ПорогиОценкиПоказателей
	|ИЗ
	|	Справочник.ШкалыОценки.ПорогиЗначений КАК ШкалыОценкиПорогиЗначений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШкалыОценки.ПорогиЗначений КАК ШкалыОценкиПорогиЗначений1
	|		ПО ШкалыОценкиПорогиЗначений.Ссылка = ШкалыОценкиПорогиЗначений1.Ссылка
	|			И ШкалыОценкиПорогиЗначений.Порог < ШкалыОценкиПорогиЗначений1.Порог
	|ГДЕ
	|	ШкалыОценкиПорогиЗначений.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ВТ_ШкалыОценкиПоГруппамПродукта.ШкалаОценкиКПИ
	|			ИЗ
	|				ВТ_ШкалыОценкиПоГруппамПродукта КАК ВТ_ШкалыОценкиПоГруппамПродукта)
	|{ГДЕ
	|	ШкалыОценкиПорогиЗначений.Ссылка.* КАК ШкалаОценкиПоказателей}
	|
	|СГРУППИРОВАТЬ ПО
	|	ШкалыОценкиПорогиЗначений.Порог,
	|	ШкалыОценкиПорогиЗначений.Значение,
	|	ШкалыОценкиПорогиЗначений.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланыПродажНормативыПоTQM.Ссылка.Подразделение,
	|	Менеджеры.Ссылка КАК Менеджер,
	|	ПланыПродажНормативыПоTQM.КатегорияТТ,
	|	ПланыПродажНормативыПоTQM.TQM_обяз КАК УстановленныйПланTQM,
	|	ПланыПродажНормативыПоTQM.Ссылка.ТорговаяКоманда,
	|	ЗНАЧЕНИЕ(Перечисление.КД_ТипыПриоритетовПродукта.Обязательный) КАК ТипПриоритета
	|ПОМЕСТИТЬ ВТ_ПланыПоTQM
	|ИЗ
	|	Документ.ПланыПродаж.НормативыПоTQM КАК ПланыПродажНормативыПоTQM
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Менеджеры КАК Менеджеры
	|		ПО ПланыПродажНормативыПоTQM.Ссылка.ТорговаяКоманда = Менеджеры.Родитель
	|ГДЕ
	|	ПланыПродажНормативыПоTQM.Ссылка.Проведен = ИСТИНА
	|	И ПланыПродажНормативыПоTQM.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ПланыПродажНормативыПоTQM.Ссылка.Подразделение = &Подразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПланыПродажНормативыПоTQM.Ссылка.Подразделение,
	|	Менеджеры.Ссылка,
	|	ПланыПродажНормативыПоTQM.КатегорияТТ,
	|	ПланыПродажНормативыПоTQM.TQM_рек,
	|	ПланыПродажНормативыПоTQM.Ссылка.ТорговаяКоманда,
	|	ЗНАЧЕНИЕ(Перечисление.КД_ТипыПриоритетовПродукта.Рекомендуемый)
	|ИЗ
	|	Документ.ПланыПродаж.НормативыПоTQM КАК ПланыПродажНормативыПоTQM
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Менеджеры КАК Менеджеры
	|		ПО ПланыПродажНормативыПоTQM.Ссылка.ТорговаяКоманда = Менеджеры.Родитель
	|ГДЕ
	|	ПланыПродажНормативыПоTQM.Ссылка.Проведен = ИСТИНА
	|	И ПланыПродажНормативыПоTQM.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ПланыПродажНормативыПоTQM.Ссылка.Подразделение = &Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КД_СтандартПрисутствия.Подразделение,
	|	КД_СтандартПрисутствия.КатегорияТТ,
	|	КД_СтандартПрисутствия.ТипПриоритета,
	|	СУММА(1) КАК ПланSKU
	|ПОМЕСТИТЬ ВТ_НормативныеПоказателиTQM
	|ИЗ
	|	РегистрСведений.КД_СтандартПрисутствия КАК КД_СтандартПрисутствия
	|ГДЕ
	|	КД_СтандартПрисутствия.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И КД_СтандартПрисутствия.Подразделение = &Подразделение
	|	И КД_СтандартПрисутствия.ТипПриоритета В(&ТипПриоритета)
	|
	|СГРУППИРОВАТЬ ПО
	|	КД_СтандартПрисутствия.Подразделение,
	|	КД_СтандартПрисутствия.КатегорияТТ,
	|	КД_СтандартПрисутствия.ТипПриоритета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БПАГСторЧекТовары.Ссылка.Подразделение,
	|	БПАГСторЧекТовары.Ссылка.Менеджер,
	|	БПАГСторЧекТовары.Ссылка.КатегорияТТ,
	|	КД_СтандартПрисутствия.ТипПриоритета,
	|	БПАГСторЧекТовары.Ссылка КАК КонтрольныйСрез,
	|	СУММА(1) КАК ФактSKU
	|ПОМЕСТИТЬ ВТ_КонтрольныеСрезы
	|ИЗ
	|	Документ.БПАГСторЧек.Товары КАК БПАГСторЧекТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КД_СтандартПрисутствия КАК КД_СтандартПрисутствия
	|		ПО БПАГСторЧекТовары.Ссылка.Подразделение = КД_СтандартПрисутствия.Подразделение
	|			И БПАГСторЧекТовары.Ссылка.КатегорияТТ = КД_СтандартПрисутствия.КатегорияТТ
	|			И БПАГСторЧекТовары.Номенклатура = КД_СтандартПрисутствия.Номенклатура
	|ГДЕ
	|	БПАГСторЧекТовары.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И КД_СтандартПрисутствия.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И БПАГСторЧекТовары.Ссылка.Проведен = ИСТИНА
	|	И БПАГСторЧекТовары.Ссылка.Подразделение = &Подразделение
	|	И КД_СтандартПрисутствия.ТипПриоритета В(&ТипПриоритета)
	|
	|СГРУППИРОВАТЬ ПО
	|	БПАГСторЧекТовары.Ссылка.Подразделение,
	|	БПАГСторЧекТовары.Ссылка.Менеджер,
	|	КД_СтандартПрисутствия.ТипПриоритета,
	|	БПАГСторЧекТовары.Ссылка,
	|	БПАГСторЧекТовары.Ссылка.КатегорияТТ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_КонтрольныеСрезы.Подразделение,
	|	ВТ_КонтрольныеСрезы.Менеджер,
	|	ВТ_КонтрольныеСрезы.КатегорияТТ,
	|	ВТ_КонтрольныеСрезы.ТипПриоритета,
	|	ВТ_КонтрольныеСрезы.КонтрольныйСрез,
	|	ВТ_КонтрольныеСрезы.ФактSKU,
	|	ВТ_НормативныеПоказателиTQM.ПланSKU,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_НормативныеПоказателиTQM.ПланSKU, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(ВТ_КонтрольныеСрезы.ФактSKU / ВТ_НормативныеПоказателиTQM.ПланSKU * 100 КАК ЧИСЛО(10, 2))
	|	КОНЕЦ КАК ВыполнениеTQM,
	|	ВЫБОР
	|		КОГДА ВТ_ПланыПоTQM.УстановленныйПланTQM = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА ЕСТЬNULL(ВТ_НормативныеПоказателиTQM.ПланSKU, 0) = 0
	|						ТОГДА 0
	|					ИНАЧЕ ВТ_КонтрольныеСрезы.ФактSKU / ВТ_НормативныеПоказателиTQM.ПланSKU * 100
	|				КОНЕЦ / ВТ_ПланыПоTQM.УстановленныйПланTQM * 100 КАК ЧИСЛО(10, 2))
	|	КОНЕЦ КАК ВыполнениеПланаTQM,
	|	ВТ_ПланыПоTQM.УстановленныйПланTQM,
	|	ЕСТЬNULL(КД_НазначенияТорговыхПредставителейСрезПоследних.Сотрудник, НЕОПРЕДЕЛЕНО) КАК Сотрудник
	|ПОМЕСТИТЬ ВТ_ТаблицаРезультата
	|ИЗ
	|	ВТ_КонтрольныеСрезы КАК ВТ_КонтрольныеСрезы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НормативныеПоказателиTQM КАК ВТ_НормативныеПоказателиTQM
	|		ПО ВТ_КонтрольныеСрезы.Подразделение = ВТ_НормативныеПоказателиTQM.Подразделение
	|			И ВТ_КонтрольныеСрезы.КатегорияТТ = ВТ_НормативныеПоказателиTQM.КатегорияТТ
	|			И ВТ_КонтрольныеСрезы.ТипПриоритета = ВТ_НормативныеПоказателиTQM.ТипПриоритета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПланыПоTQM КАК ВТ_ПланыПоTQM
	|		ПО ВТ_КонтрольныеСрезы.Подразделение = ВТ_ПланыПоTQM.Подразделение
	|			И ВТ_КонтрольныеСрезы.Менеджер = ВТ_ПланыПоTQM.Менеджер
	|			И ВТ_КонтрольныеСрезы.КатегорияТТ = ВТ_ПланыПоTQM.КатегорияТТ
	|			И ВТ_КонтрольныеСрезы.ТипПриоритета = ВТ_ПланыПоTQM.ТипПриоритета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КД_НазначенияТорговыхПредставителей.СрезПоследних(НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ), Подразделение = &Подразделение) КАК КД_НазначенияТорговыхПредставителейСрезПоследних
	|		ПО ВТ_КонтрольныеСрезы.Менеджер = КД_НазначенияТорговыхПредставителейСрезПоследних.Менеджер
	|			И (КД_НазначенияТорговыхПредставителейСрезПоследних.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСотрудников.Уволен))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Сотрудник КАК Сотрудник,
	|	ВложенныйЗапрос.КатегорияТТ КАК КатегорияТТ,
	|	ВложенныйЗапрос.ТипПриоритета КАК ТипПриоритета,
	|	ВложенныйЗапрос.ВыполнениеПланаTQM КАК ВыполнениеПланаTQM,
	|	ЕСТЬNULL(ВТ_ПорогиОценкиПоказателей.Значение, 0) КАК ЗначениеОценкиПоказателя,
	|	1 КАК КоличествоКатегорийТТ,
	|	ВложенныйЗапрос.ГруппаПродукта КАК ГруппаПродукта,
	|	ВложенныйЗапрос.Менеджер
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_ТаблицаРезультата.Подразделение КАК Подразделение,
	|		ВТ_ТаблицаРезультата.Менеджер КАК Менеджер,
	|		ВТ_ТаблицаРезультата.КатегорияТТ КАК КатегорияТТ,
	|		ВТ_ТаблицаРезультата.ТипПриоритета КАК ТипПриоритета,
	|		СРЕДНЕЕ(ВТ_ТаблицаРезультата.ФактSKU) КАК ФактSKU,
	|		СРЕДНЕЕ(ВТ_ТаблицаРезультата.ПланSKU) КАК ПланSKU,
	|		СРЕДНЕЕ(ВТ_ТаблицаРезультата.ВыполнениеTQM) КАК ВыполнениеTQM,
	|		СРЕДНЕЕ(ВТ_ТаблицаРезультата.ВыполнениеПланаTQM) КАК ВыполнениеПланаTQM,
	|		ВТ_ТаблицаРезультата.УстановленныйПланTQM КАК УстановленныйПланTQM,
	|		ВТ_ТаблицаРезультата.Сотрудник КАК Сотрудник,
	|		ВТ_ТаблицаРезультата.КатегорияТТ.Родитель.ГруппаПродукта КАК ГруппаПродукта
	|	ИЗ
	|		ВТ_ТаблицаРезультата КАК ВТ_ТаблицаРезультата
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТ_ТаблицаРезультата.УстановленныйПланTQM,
	|		ВТ_ТаблицаРезультата.Подразделение,
	|		ВТ_ТаблицаРезультата.Менеджер,
	|		ВТ_ТаблицаРезультата.ТипПриоритета,
	|		ВТ_ТаблицаРезультата.Сотрудник,
	|		ВТ_ТаблицаРезультата.КатегорияТТ,
	|		ВТ_ТаблицаРезультата.КатегорияТТ.Родитель.ГруппаПродукта) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ШкалыОценкиПоГруппамПродукта КАК ВТ_ШкалыОценкиПоГруппамПродукта
	|		ПО ВложенныйЗапрос.Подразделение = ВТ_ШкалыОценкиПоГруппамПродукта.Подразделение
	|			И ВложенныйЗапрос.ГруппаПродукта.Родитель = ВТ_ШкалыОценкиПоГруппамПродукта.ГруппаПродукта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПорогиОценкиПоказателей КАК ВТ_ПорогиОценкиПоказателей
	|		ПО ВложенныйЗапрос.ВыполнениеПланаTQM >= ВТ_ПорогиОценкиПоказателей.ПорогНачало
	|			И ВложенныйЗапрос.ВыполнениеПланаTQM < ВТ_ПорогиОценкиПоказателей.ПорогОкончание
	|			И (ВТ_ШкалыОценкиПоГруппамПродукта.ШкалаОценкиКПИ = ВТ_ПорогиОценкиПоказателей.Ссылка)
	|ГДЕ
	|	ВложенныйЗапрос.Сотрудник.КатегорияРаботника = &КатегорияРаботника
	|ИТОГИ
	|	МАКСИМУМ(ВыполнениеПланаTQM),
	|	МАКСИМУМ(ЗначениеОценкиПоказателя),
	|	СУММА(КоличествоКатегорийТТ)
	|ПО
	|	ГруппаПродукта,
	|	Сотрудник,
	|	ТипПриоритета";
	
	#КонецОбласти
	
	запрос.УстановитьПараметр("ШкалыОценкиПоГруппамПродукта", тзШкалыОценкиПоГруппамПродукта);
	запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	запрос.УстановитьПараметр("КатегорияРаботника", Объект.КатегорияРаботников);
	запрос.УстановитьПараметр("Период", НачалоМесяца(Объект.ПериодРегистрации));
	запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(Объект.ПериодРегистрации));
	запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(Объект.ПериодРегистрации));
	запрос.УстановитьПараметр("ТипПриоритета", мТипыПриоритетов);
	
	//результатЗапроса = запрос.Выполнить();
	
	#Область ПолучениеВременныхТаблиц
	
	запрос.Текст = 
	"ВЫБРАТЬ * ИЗ ВТ_ШкалыОценкиПоГруппамПродукта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ * ИЗ ВТ_ПорогиОценкиПоказателей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ * ИЗ ВТ_ПланыПоTQM
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ * ИЗ ВТ_НормативныеПоказателиTQM
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ * ИЗ ВТ_КонтрольныеСрезы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ * ИЗ ВТ_ТаблицаРезультата";
	
	#КонецОбласти
	
	//выборкаГруппаПродукта = результатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ГруппаПродукта");
	//Пока выборкаГруппаПродукта.Следующий() Цикл
	//	
	//	выборкаСотрудник = выборкаГруппаПродукта.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Сотрудник");
	//	Пока выборкаСотрудник.Следующий() Цикл
	//		
	//		выборкаТипПриоритета = выборкаСотрудник.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ТипПриоритета");
	//		Пока выборкаТипПриоритета.Следующий() Цикл
	//			
	//			ключПоиска = ПолучитьСтруктуруКлючаСоответствия();
	//			ключПоиска.Подразделение = Объект.Подразделение;
	//			ключПоиска.ТипПриоритета = выборкаТипПриоритета.ТипПриоритета;
	//			ключПоиска.ГруппаПродукта = выборкаТипПриоритета.ГруппаПродукта.Родитель;
	//			
	//			количествоПоказателей = выборкаТипПриоритета.КоличествоКатегорийТТ;
	//			
	//			стБазаРасчета = соБазыРасчетаПоказателей.Получить(ЗначениеВСтрокуВнутр(ключПоиска));
	//			
	//			Если стБазаРасчета = Неопределено Тогда
	//				Продолжить;
	//			КонецЕсли;
	//			
	//			базаРасчета = стБазаРасчета.БазаРасчета / количествоПоказателей;
	//			видРасчета = стБазаРасчета.ВидРасчета;
	//			результат = 0;
	//			
	//			
	//			выборкаКатегорияТТ = выборкаТипПриоритета.Выбрать();
	//			Пока выборкаКатегорияТТ.Следующий() Цикл
	//				результат = результат + базаРасчета * выборкаКатегорияТТ.ЗначениеОценкиПоказателя;
	//				мМенеджер = выборкаКатегорияТТ.Менеджер;
	//			КонецЦикла;
	//			
	//			Если Не результат = 0 Тогда
	//				новаяСтрока = Объект.Состав.Добавить();
	//				новаяСтрока.Сотрудник = выборкаТипПриоритета.Сотрудник;
	//				новаяСтрока.ВидРасчета = видРасчета;
	//				новаяСтрока.Результат = результат;
	//				
	//				Если новаяСтрока.Сотрудник.Пустая() Тогда
	//					сообщить(СтрШаблон("Проверьте назначение по менеджеру: %1", мМенеджер));
	//				КонецЕсли;
	//				
	//			КонецЕсли;
	//			
	//		КонецЦикла;
	//		
	//	КонецЦикла;
	//	
	//КонецЦикла;
	
	// добавим начисления по "регистру значения показателей КПИ"
	
	запрос = Новый Запрос;
	запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	#Область ТекстЗапроса
	
	запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(БазыРасчетаПоказателей.Подразделение КАК Справочник.СтруктурныеЕдиницы) КАК Подразделение,
	|	ВЫРАЗИТЬ(БазыРасчетаПоказателей.ПоказательКПИ КАК Справочник.ПоказателиКПИ) КАК ПоказательКПИ,
	|	ВЫРАЗИТЬ(БазыРасчетаПоказателей.ДолжностьСотрудника КАК Справочник.Должности) КАК ДолжностьСотрудника,
	|	БазыРасчетаПоказателей.БазаРасчета
	|ПОМЕСТИТЬ ВТ_БазыРасчетаПоказателей
	|ИЗ
	|	&БазыРасчетаПоказателей КАК БазыРасчетаПоказателей
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Подразделение,
	|	ПоказательКПИ,
	|	ДолжностьСотрудника
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ПлановыеЗначенияПоказателей.Подразделение КАК Справочник.СтруктурныеЕдиницы) КАК Подразделение,
	|	ВЫРАЗИТЬ(ПлановыеЗначенияПоказателей.ПоказательКПИ КАК Справочник.ПоказателиКПИ) КАК ПоказательКПИ,
	|	ПлановыеЗначенияПоказателей.ПлановоеЗначение
	|ПОМЕСТИТЬ ВТ_ПлановыеЗначенияПоказателей
	|ИЗ
	|	&ПлановыеЗначенияПоказателей КАК ПлановыеЗначенияПоказателей
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Подразделение,
	|	ПоказательКПИ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеПоказательКПИВидРасчетаСрезПоследних.ПоказательКПИ КАК ПоказательКПИ,
	|	МАКСИМУМ(СоответствиеПоказательКПИВидРасчетаСрезПоследних.ВидРасчета) КАК ВидРасчета
	|ПОМЕСТИТЬ ВТ_ПоказателиВидРасчета
	|ИЗ
	|	РегистрСведений.СоответствиеПоказательКПИВидРасчета.СрезПоследних(&ДатаОкончания, Подразделение = &Подразделение) КАК СоответствиеПоказательКПИВидРасчетаСрезПоследних
	|ГДЕ
	|	СоответствиеПоказательКПИВидРасчетаСрезПоследних.Актуален = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	СоответствиеПоказательКПИВидРасчетаСрезПоследних.ПоказательКПИ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПоказательКПИ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник
	|ПОМЕСТИТЬ ВТ_СотрудникиПоКатегории
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.СтруктурнаяЕдиница = &Подразделение
	|	И Сотрудники.КатегорияРаботника = &КатегорияРаботника
	|	И Сотрудники.ПометкаУдаления = ЛОЖЬ
	|	И Сотрудники.НеАктуален = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШкалыОценкиПоказателейКПИСрезПоследних.ПоказательКПИ КАК ПоказательКПИ,
	|	МАКСИМУМ(ШкалыОценкиПоказателейКПИСрезПоследних.ШкалаОценкиПоказателяКПИ) КАК ШкалаОценкиПоказателяКПИ
	|ПОМЕСТИТЬ ВТ_ШкалыОценкиПоказателяКПИ
	|ИЗ
	|	РегистрСведений.ШкалыОценкиПоказателейКПИ.СрезПоследних(&ДатаОкончания, Подразделение = &Подразделение) КАК ШкалыОценкиПоказателейКПИСрезПоследних
	|ГДЕ
	|	ШкалыОценкиПоказателейКПИСрезПоследних.Актуален = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	ШкалыОценкиПоказателейКПИСрезПоследних.ПоказательКПИ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПоказательКПИ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШкалыОценкиПорогиЗначений.Ссылка КАК ШкалаОценкиПоказателя,
	|	ШкалыОценкиПорогиЗначений.Порог КАК ПорогНачало,
	|	МИНИМУМ(ЕСТЬNULL(ШкалыОценкиПорогиЗначений1.Порог, 9999)) КАК ПорогОкончание,
	|	ШкалыОценкиПорогиЗначений.Значение
	|ПОМЕСТИТЬ ВТ_ПорогиОценкиПоказателей
	|ИЗ
	|	Справочник.ШкалыОценки.ПорогиЗначений КАК ШкалыОценкиПорогиЗначений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШкалыОценки.ПорогиЗначений КАК ШкалыОценкиПорогиЗначений1
	|		ПО ШкалыОценкиПорогиЗначений.Ссылка = ШкалыОценкиПорогиЗначений1.Ссылка
	|			И ШкалыОценкиПорогиЗначений.Порог < ШкалыОценкиПорогиЗначений1.Порог
	|ГДЕ
	|	ШкалыОценкиПорогиЗначений.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ВТ_ШкалыОценкиПоказателяКПИ.ШкалаОценкиПоказателяКПИ
	|			ИЗ
	|				ВТ_ШкалыОценкиПоказателяКПИ КАК ВТ_ШкалыОценкиПоказателяКПИ)
	|{ГДЕ
	|	ШкалыОценкиПорогиЗначений.Ссылка.* КАК ШкалаОценкиПоказателей}
	|
	|СГРУППИРОВАТЬ ПО
	|	ШкалыОценкиПорогиЗначений.Порог,
	|	ШкалыОценкиПорогиЗначений.Значение,
	|	ШкалыОценкиПорогиЗначений.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ШкалаОценкиПоказателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияПоказателейКПИ.Подразделение,
	|	ЗначенияПоказателейКПИ.Ответственный КАК Сотрудник,
	|	ЗначенияПоказателейКПИ.Показатель,
	|	СРЕДНЕЕ(ЗначенияПоказателейКПИ.Значение) КАК Значение,
	|	СРЕДНЕЕ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ВТ_ПлановыеЗначенияПоказателей.ПлановоеЗначение, 0) = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫРАЗИТЬ(ЗначенияПоказателейКПИ.Значение / ВТ_ПлановыеЗначенияПоказателей.ПлановоеЗначение * 100 КАК ЧИСЛО(10, 2))
	|		КОНЕЦ) КАК Выполнение
	|ПОМЕСТИТЬ ВТ_ЗначенияПоказателейКПИ
	|ИЗ
	|	РегистрСведений.ЗначенияПоказателейКПИ КАК ЗначенияПоказателейКПИ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПлановыеЗначенияПоказателей КАК ВТ_ПлановыеЗначенияПоказателей
	|		ПО ЗначенияПоказателейКПИ.Подразделение = ВТ_ПлановыеЗначенияПоказателей.Подразделение
	|			И ЗначенияПоказателейКПИ.Показатель = ВТ_ПлановыеЗначенияПоказателей.ПоказательКПИ
	|ГДЕ
	|	ЗначенияПоказателейКПИ.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ЗначенияПоказателейКПИ.Подразделение = &Подразделение
	|	И ЗначенияПоказателейКПИ.Ответственный В
	|			(ВЫБРАТЬ
	|				ВТ_СотрудникиПоКатегории.Сотрудник
	|			ИЗ
	|				ВТ_СотрудникиПоКатегории КАК ВТ_СотрудникиПоКатегории)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗначенияПоказателейКПИ.Подразделение,
	|	ЗначенияПоказателейКПИ.Ответственный,
	|	ЗначенияПоказателейКПИ.Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗначенияПоказателейКПИ.Подразделение КАК Подразделение,
	|	ВТ_ЗначенияПоказателейКПИ.Сотрудник КАК Сотрудник,
	|	ВТ_ЗначенияПоказателейКПИ.Показатель,
	|	ВТ_ШкалыОценкиПоказателяКПИ.ШкалаОценкиПоказателяКПИ,
	|	ВТ_ЗначенияПоказателейКПИ.Значение,
	|	ВТ_ЗначенияПоказателейКПИ.Выполнение,
	|	ВТ_ПорогиОценкиПоказателей.Значение КАК ЗначениеОценкиПоказателя,
	|	ВТ_ПоказателиВидРасчета.ВидРасчета КАК ВидРасчета,
	|	ЕСТЬNULL(ВТ_БазыРасчетаПоказателей.БазаРасчета, 0) * ЕСТЬNULL(ВТ_ПорогиОценкиПоказателей.Значение, 0) КАК Результат
	|ИЗ
	|	ВТ_ЗначенияПоказателейКПИ КАК ВТ_ЗначенияПоказателейКПИ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ШкалыОценкиПоказателяКПИ КАК ВТ_ШкалыОценкиПоказателяКПИ
	|		ПО ВТ_ЗначенияПоказателейКПИ.Показатель = ВТ_ШкалыОценкиПоказателяКПИ.ПоказательКПИ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПорогиОценкиПоказателей КАК ВТ_ПорогиОценкиПоказателей
	|		ПО ВТ_ЗначенияПоказателейКПИ.Выполнение >= ВТ_ПорогиОценкиПоказателей.ПорогНачало
	|			И ВТ_ЗначенияПоказателейКПИ.Выполнение < ВТ_ПорогиОценкиПоказателей.ПорогОкончание
	|			И (ВТ_ШкалыОценкиПоказателяКПИ.ШкалаОценкиПоказателяКПИ = ВТ_ПорогиОценкиПоказателей.ШкалаОценкиПоказателя)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоказателиВидРасчета КАК ВТ_ПоказателиВидРасчета
	|		ПО ВТ_ЗначенияПоказателейКПИ.Показатель = ВТ_ПоказателиВидРасчета.ПоказательКПИ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_БазыРасчетаПоказателей КАК ВТ_БазыРасчетаПоказателей
	|		ПО ВТ_ЗначенияПоказателейКПИ.Подразделение = ВТ_БазыРасчетаПоказателей.Подразделение
	|			И ВТ_ЗначенияПоказателейКПИ.Сотрудник.Должность = ВТ_БазыРасчетаПоказателей.ДолжностьСотрудника
	|			И ВТ_ЗначенияПоказателейКПИ.Показатель = ВТ_БазыРасчетаПоказателей.ПоказательКПИ
	|ГДЕ
	|	ВТ_ЗначенияПоказателейКПИ.Подразделение = &Подразделение
	|
	|УПОРЯДОЧИТЬ ПО
	|	Подразделение,
	|	Сотрудник,
	|	ВидРасчета,
	|	Результат";
	
	#КонецОбласти
	
	запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	запрос.УстановитьПараметр("КатегорияРаботника", Объект.КатегорияРаботников);
	запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(Объект.ПериодРегистрации));
	запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(Объект.ПериодРегистрации));
	запрос.УстановитьПараметр("БазыРасчетаПоказателей", ПолучитьТаблицуБазРасчетаПоказателей());
	запрос.УстановитьПараметр("ПлановыеЗначенияПоказателей", ПолучитьТаблицуПлановыхЗначенийПоказателей());
	
	результатЗапроса = запрос.Выполнить();
	
	#Область ПолучениеВременныхТаблиц
	
	запрос.Текст =
	"ВЫБРАТЬ * ИЗ ВТ_БазыРасчетаПоказателей;
	|ВЫБРАТЬ * ИЗ ВТ_ПлановыеЗначенияПоказателей;
	|ВЫБРАТЬ * ИЗ ВТ_ПоказателиВидРасчета;
	|ВЫБРАТЬ * ИЗ ВТ_СотрудникиПоКатегории;
	|ВЫБРАТЬ * ИЗ ВТ_ШкалыОценкиПоказателяКПИ;
	|ВЫБРАТЬ * ИЗ ВТ_ПорогиОценкиПоказателей;
	|ВЫБРАТЬ * ИЗ ВТ_ЗначенияПоказателейКПИ;";
	
	#КонецОбласти
	
	выборка = результатЗапроса.Выбрать();
	
	Пока выборка.Следующий() Цикл
		
		новаяСтрока = Объект.Состав.Добавить();
		ЗаполнитьЗначенияСвойств(новаяСтрока, выборка);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТаблицуБазРасчетаПоказателей()
	
	результат = Новый ТаблицаЗначений;
	результат.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	результат.Колонки.Добавить("ДолжностьСотрудника", Новый ОписаниеТипов("СправочникСсылка.Должности"));
	результат.Колонки.Добавить("ПоказательКПИ", Новый ОписаниеТипов("СправочникСсылка.ПоказателиКПИ"));
	результат.Колонки.Добавить("БазаРасчета", Новый ОписаниеТипов("Число"));

	
	// КПИ-1
	новаяСтрока = результат.Добавить();
	новаяСтрока.Подразделение = Объект.Подразделение;
	новаяСтрока.ДолжностьСотрудника = Справочники.Должности.НайтиПоНаименованию("Супер");
	новаяСтрока.ПоказательКПИ = Справочники.ПоказателиКПИ.НайтиПоНаименованию("TQM_обяз (МКИ-1)");
	новаяСтрока.БазаРасчета = 6000;

	новаяСтрока = результат.Добавить();
	новаяСтрока.Подразделение = Объект.Подразделение;
	новаяСтрока.ДолжностьСотрудника = Справочники.Должности.НайтиПоНаименованию("Торговый");
	новаяСтрока.ПоказательКПИ = Справочники.ПоказателиКПИ.НайтиПоНаименованию("TQM_обяз (МКИ-1)");
	новаяСтрока.БазаРасчета = 8000;

	новаяСтрока = результат.Добавить();
	новаяСтрока.Подразделение = Объект.Подразделение;
	новаяСтрока.ДолжностьСотрудника = Справочники.Должности.НайтиПоНаименованию("Супер");
	новаяСтрока.ПоказательКПИ = Справочники.ПоказателиКПИ.НайтиПоНаименованию("TQM_обяз (МКИ-2)");
	новаяСтрока.БазаРасчета = 6000;

	новаяСтрока = результат.Добавить();
	новаяСтрока.Подразделение = Объект.Подразделение;
	новаяСтрока.ДолжностьСотрудника = Справочники.Должности.НайтиПоНаименованию("Торговый");
	новаяСтрока.ПоказательКПИ = Справочники.ПоказателиКПИ.НайтиПоНаименованию("TQM_обяз (МКИ-2)");
	новаяСтрока.БазаРасчета = 8000;
	
	новаяСтрока = результат.Добавить();
	новаяСтрока.Подразделение = Объект.Подразделение;
	новаяСтрока.ДолжностьСотрудника = Справочники.Должности.НайтиПоНаименованию("Супер");
	новаяСтрока.ПоказательКПИ = Справочники.ПоказателиКПИ.НайтиПоНаименованию("TQM_обяз (МИ-1)");
	новаяСтрока.БазаРасчета = 5000;

	новаяСтрока = результат.Добавить();
	новаяСтрока.Подразделение = Объект.Подразделение;
	новаяСтрока.ДолжностьСотрудника = Справочники.Должности.НайтиПоНаименованию("Торговый");
	новаяСтрока.ПоказательКПИ = Справочники.ПоказателиКПИ.НайтиПоНаименованию("TQM_обяз (МИ-1)");
	новаяСтрока.БазаРасчета = 5000;

	// КПИ-2
	новаяСтрока = результат.Добавить();
	новаяСтрока.Подразделение = Объект.Подразделение;
	новаяСтрока.ДолжностьСотрудника = Справочники.Должности.НайтиПоНаименованию("Супер");
	новаяСтрока.ПоказательКПИ = Справочники.ПоказателиКПИ.НайтиПоНаименованию("TQM_рек (МКИ-1)");
	новаяСтрока.БазаРасчета = 6000;

	новаяСтрока = результат.Добавить();
	новаяСтрока.Подразделение = Объект.Подразделение;
	новаяСтрока.ДолжностьСотрудника = Справочники.Должности.НайтиПоНаименованию("Торговый");
	новаяСтрока.ПоказательКПИ = Справочники.ПоказателиКПИ.НайтиПоНаименованию("TQM_рек (МКИ-1)");
	новаяСтрока.БазаРасчета = 4000;

	новаяСтрока = результат.Добавить();
	новаяСтрока.Подразделение = Объект.Подразделение;
	новаяСтрока.ДолжностьСотрудника = Справочники.Должности.НайтиПоНаименованию("Супер");
	новаяСтрока.ПоказательКПИ = Справочники.ПоказателиКПИ.НайтиПоНаименованию("TQM_рек (МКИ-2)");
	новаяСтрока.БазаРасчета = 6000;

	новаяСтрока = результат.Добавить();
	новаяСтрока.Подразделение = Объект.Подразделение;
	новаяСтрока.ДолжностьСотрудника = Справочники.Должности.НайтиПоНаименованию("Торговый");
	новаяСтрока.ПоказательКПИ = Справочники.ПоказателиКПИ.НайтиПоНаименованию("TQM_рек (МКИ-2)");
	новаяСтрока.БазаРасчета = 4000;

	
	
	
	
	
	новаяСтрока = результат.Добавить();
	новаяСтрока.Подразделение = Объект.Подразделение;
	новаяСтрока.ДолжностьСотрудника = Справочники.Должности.НайтиПоНаименованию("Торговый");
	новаяСтрока.ПоказательКПИ = Справочники.ПоказателиКПИ.НайтиПоНаименованию("Forward Stock Share (МКИ-1)");
	новаяСтрока.БазаРасчета = 5000;
	
	новаяСтрока = результат.Добавить();
	новаяСтрока.Подразделение = Объект.Подразделение;
	новаяСтрока.ДолжностьСотрудника = Справочники.Должности.НайтиПоНаименованию("Супер");
	новаяСтрока.ПоказательКПИ = Справочники.ПоказателиКПИ.НайтиПоНаименованию("Forward Stock Share (МКИ-1)");
	новаяСтрока.БазаРасчета = 6000;
	
	новаяСтрока = результат.Добавить();
	новаяСтрока.Подразделение = Объект.Подразделение;
	новаяСтрока.ДолжностьСотрудника = Справочники.Должности.НайтиПоНаименованию("Торговый");
	новаяСтрока.ПоказательКПИ = Справочники.ПоказателиКПИ.НайтиПоНаименованию("Forward Stock Share (МКИ-2)");
	новаяСтрока.БазаРасчета = 5000;
	
	новаяСтрока = результат.Добавить();
	новаяСтрока.Подразделение = Объект.Подразделение;
	новаяСтрока.ДолжностьСотрудника = Справочники.Должности.НайтиПоНаименованию("Супер");
	новаяСтрока.ПоказательКПИ = Справочники.ПоказателиКПИ.НайтиПоНаименованию("Forward Stock Share (МКИ-2)");
	новаяСтрока.БазаРасчета = 6000;
	
	Возврат (результат)
	
КонецФункции

Функция ПолучитьТаблицуПлановыхЗначенийПоказателей()
	
	результат = Новый ТаблицаЗначений;
	результат.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	результат.Колонки.Добавить("ПоказательКПИ", Новый ОписаниеТипов("СправочникСсылка.ПоказателиКПИ"));
	результат.Колонки.Добавить("ПлановоеЗначение", Новый ОписаниеТипов("Число"));

	// МКИ-1
	новаяСтрока = результат.Добавить();
	новаяСтрока.Подразделение = Объект.Подразделение;
	новаяСтрока.ПоказательКПИ = Справочники.ПоказателиКПИ.НайтиПоНаименованию("TQM_обяз (МКИ-1)");
	новаяСтрока.ПлановоеЗначение = 74;
	
	новаяСтрока = результат.Добавить();
	новаяСтрока.Подразделение = Объект.Подразделение;
	новаяСтрока.ПоказательКПИ = Справочники.ПоказателиКПИ.НайтиПоНаименованию("TQM_рек (МКИ-1)");
	новаяСтрока.ПлановоеЗначение = 55.83;
	
	// МКИ-2
	новаяСтрока = результат.Добавить();
	новаяСтрока.Подразделение = Объект.Подразделение;
	новаяСтрока.ПоказательКПИ = Справочники.ПоказателиКПИ.НайтиПоНаименованию("TQM_обяз (МКИ-2)");
	новаяСтрока.ПлановоеЗначение = 65;
	
	новаяСтрока = результат.Добавить();
	новаяСтрока.Подразделение = Объект.Подразделение;
	новаяСтрока.ПоказательКПИ = Справочники.ПоказателиКПИ.НайтиПоНаименованию("TQM_рек (МКИ-2)");
	новаяСтрока.ПлановоеЗначение = 60;
	
	// МИ-1
	новаяСтрока = результат.Добавить();
	новаяСтрока.Подразделение = Объект.Подразделение;
	новаяСтрока.ПоказательКПИ = Справочники.ПоказателиКПИ.НайтиПоНаименованию("TQM_обяз (МИ-1)");
	новаяСтрока.ПлановоеЗначение = 65;
	
	новаяСтрока = результат.Добавить();
	новаяСтрока.Подразделение = Объект.Подразделение;
	новаяСтрока.ПоказательКПИ = Справочники.ПоказателиКПИ.НайтиПоНаименованию("TQM_рек (МИ-1)");
	новаяСтрока.ПлановоеЗначение = 55;
	
	новаяСтрока = результат.Добавить();
	новаяСтрока.Подразделение = Объект.Подразделение;
	новаяСтрока.ПоказательКПИ = Справочники.ПоказателиКПИ.НайтиПоНаименованию("Forward Stock Share (МКИ-1)");
	новаяСтрока.ПлановоеЗначение = 36.66;
	
	новаяСтрока = результат.Добавить();
	новаяСтрока.Подразделение = Объект.Подразделение;
	новаяСтрока.ПоказательКПИ = Справочники.ПоказателиКПИ.НайтиПоНаименованию("Forward Stock Share (МКИ-2)");
	новаяСтрока.ПлановоеЗначение = 29.66;
	
	Возврат (результат)
	
КонецФункции

#конецОбласти

&НаСервере
Процедура ЗаполнитьПроцентТАСервер()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ВзаиморасчетыСПокупателямиОбороты.Контрагент,
	|	Продажи.Менеджер,
	|	Продажи.ПроцентСкидки,
	|	ВЫБОР
	|		КОГДА Продажи.КредитныйДокумент.СуммаДокумента = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВзаиморасчетыСПокупателямиОбороты.СуммаРасход * (Продажи.ПродСтоимость / Продажи.КредитныйДокумент.СуммаДокумента)
	|	КОНЕЦ КАК Оплата,
	|	ШкалаПоЗарплате.ПроцентПоЗарплате,
	|	ВЫБОР
	|		КОГДА Продажи.КредитныйДокумент.СуммаДокумента = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВзаиморасчетыСПокупателямиОбороты.СуммаРасход * (Продажи.ПродСтоимость / Продажи.КредитныйДокумент.СуммаДокумента) * ШкалаПоЗарплате.ПроцентПоЗарплате / 100
	|	КОНЕЦ КАК Результат,
	|	Сотрудники.Ссылка КАК Сотрудник
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПокупателями.Обороты(&НачалоПериода, &КонецПериода, , ) КАК ВзаиморасчетыСПокупателямиОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи КАК Продажи
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШкалаПоЗарплате КАК ШкалаПоЗарплате
	|			ПО Продажи.ПроцентСкидки = ШкалаПоЗарплате.ПроцентСкидки
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|			ПО Продажи.Менеджер = Сотрудники.Менеджер
	|		ПО ВзаиморасчетыСПокупателямиОбороты.КредитныйДокумент = Продажи.Регистратор
	|ГДЕ
	|	Сотрудники.СтруктурнаяЕдиница = &Подразделение
	|	И Сотрудники.КатегорияРаботника = &КатегорияРаботников
	|ИТОГИ
	|	СУММА(Оплата),
	|	СУММА(Результат)
	|ПО
	|	Сотрудник";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("КатегорияРаботников", Объект.КатегорияРаботников);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(Объект.ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Объект.ПериодРегистрации));
	//Запрос.УстановитьПараметр("ВидРасчета", Справочники.ВидыРасчетов.ПроцентТА);
	
	Объект.Состав.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Объект.Состав.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		НоваяСтрока.ВидРасчета = Справочники.ВидыРасчетов.ПроцентТА;
		
		сообщить(СокрЛП(Выборка.Оплата));
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти