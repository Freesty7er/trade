
#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(данныеЗаполнения, стандартнаяОбработка)
	
	заполненНаОснованииДокумента = Ложь;
	
	ЗаполнениеОбъектовСервер.ЗаполнитьДанныеНовогоДокумента(ЭтотОбъект, данныеЗаполнения);
	
	// Заполнение по умолчанию.
	Если Организация.Пустая() Тогда
		Организация = Константы.ОсновнаяОрганизация.Получить();
	КонецЕсли;
	
	Если Подразделение.Пустая() Тогда
		Подразделение = ПользователиСервер.ПолучитьЗначениеНастройки("ОсновноеПодразделение");
	КонецЕсли;

	Если ТипЦен.Пустая() Тогда
		
		ТипЦен = Контрагент.ТипЦен;
		
	КонецЕсли; 	
	
	// Ввод на основании.
	типДанныхЗаполнения = ТипЗнч(данныеЗаполнения);
	
	Если типДанныхЗаполнения = Тип("Структура") Тогда
		
		ЗаполнитьДокументПоОтбору(данныеЗаполнения);
		
	ИначеЕсли типДанныхЗаполнения = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
		
		ЗаполнитьДокументНаОснованииРасходнойНакладной(данныеЗаполнения);
		заполненНаОснованииДокумента = Истина;	
		
	ИначеЕсли типДанныхЗаполнения = Тип("ДокументСсылка.ВозвратПоставщику") Тогда
		
		ЗаполнитьДокументНаОснованииВозвратаПоставщику(данныеЗаполнения);
		заполненНаОснованииДокумента = Истина;	
		
	ИначеЕсли типДанныхЗаполнения = Тип("ДокументСсылка.ЗаказПоставщику")
		Или типДанныхЗаполнения = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
	
		// Заполнение реквизитов документа.
		ЗаполнениеОбъектовСервер.ЗаполнитьРеквизитыДокументаПриВводеНаОсновании(ЭтотОбъект, данныеЗаполнения);
		ДокОсн = данныеЗаполнения;
		
		ДокументПриходнаяНакладнаяСервер.КонтрагентПриИзменении(ЭтотОбъект);
		
		ценыНоменклатуры = ЦенообразованиеСервер.ПолучитьЦеныНоменклатуры(Дата, Подразделение, данныеЗаполнения.Запасы.ВыгрузитьКолонку("Номенклатура"), ТипЦен);
		
		Запасы.Очистить();	// Очистим табличную часть на случай перезаполнения документа.
		Для каждого строкаЗапасы Из данныеЗаполнения.Запасы Цикл
			
			новаяСтрока = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(новаяСтрока, строкаЗапасы);
			
			Если типДанныхЗаполнения = Тип("ДокументСсылка.ЗаказПоставщику") 
				Или типДанныхЗаполнения = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				
				новаяСтрока.Количество = 0;
				новаяСтрока.КоличествоЗаказано = строкаЗапасы.Количество;
				
			КонецЕсли;
			
			новаяСтрока.КоличествоНакладная = строкаЗапасы.Количество;
			новаяСтрока.Цена = ценыНоменклатуры[новаяСтрока.Номенклатура].Цена;
			ДокументПриходнаяНакладнаяКлиентСервер.РассчитатьДанныеСтроки(новаяСтрока);
			
		КонецЦикла;
	
	КонецЕсли;
	
	свойствоСозданАвтоматически = Неопределено;
	Если ДополнительныеСвойства.Свойство("СозданАвтоматически", свойствоСозданАвтоматически) И свойствоСозданАвтоматически Тогда
		СозданАвтоматически = Истина;
		Комментарий = данныеЗаполнения.Комментарий;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(отказ, режимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	ОбщегоНазначенияСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	ОбщегоНазначенияСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Инициализация данных документа.
	//Документы.ПриходнаяНакладная.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	
	// Отражение в разделах учета
	//ОбщегоНазначенияСервер.ОтразитьДвиженияПоРегистрамНакопления(ДополнительныеСвойства, Движения, отказ);
		

	
	Цены = Движения.ЦеныНоменклатуры;
	
	ФинРезультат = Движения.ФинансовыйРезультат;
	
	ЗаказыПоставщикам = Движения.ЗаказыПоставщикам;

	СуммаМаркетинг = 0;
	
	// услуги
	запрос = Новый Запрос;
	запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// ВременнаяТаблицаЦены
	// ВременнаяТаблицаФинансовыйРезультат
	// ВременнаяТаблицаИмущество
	// ВременнаяТаблицаВзаиморасчетыСПоставщиками
	
	#Область ТекстЗапроса
	
	запрос.Текст =
	"ВЫБРАТЬ
	|	ПриходнаяНакладная.Ссылка КАК Регистратор,
	|	ПриходнаяНакладная.Дата КАК Период,
	|	ПриходнаяНакладная.Подразделение,
	|	ПриходнаяНакладная.ЦФО,
	|	ПриходнаяНакладная.Контрагент,
	|	ВЫБОР
	|		КОГДА ПриходнаяНакладная.Контрагент.ТипВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыВеденияВзаиморасчетов.ПоЗаказамПоставщику)
	|			ТОГДА ПриходнаяНакладная.ДокОсн
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КредитныйДокумент,
	|	ПриходнаяНакладная.СуммаБезНал,
	|	ПриходнаяНакладная.КонтрагентБезНал,
	|	ПриходнаяНакладная.ВалютаДокумента,
	|	ПриходнаяНакладная.РегистрироватьЦеныПоставщика
	|ПОМЕСТИТЬ ВТ_ШапкаДокумента
	|ИЗ
	|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
	|ГДЕ
	|	ПриходнаяНакладная.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходнаяНакладнаяЗапасы.Номенклатура,
	|	СУММА(ПриходнаяНакладнаяЗапасы.Количество) КАК Количество,
	|	СУММА(ПриходнаяНакладнаяЗапасы.Сумма) КАК Сумма,
	|	ПриходнаяНакладнаяЗапасы.Цена + ПриходнаяНакладнаяЗапасы.Маркетинг КАК ЦенаИМаркетинг
	|ПОМЕСТИТЬ ВТ_Запасы
	|ИЗ
	|	Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
	|ГДЕ
	|	ПриходнаяНакладнаяЗапасы.Ссылка = &Ссылка
	|	И ПриходнаяНакладнаяЗапасы.Количество <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходнаяНакладнаяЗапасы.Номенклатура,
	|	ПриходнаяНакладнаяЗапасы.Цена + ПриходнаяНакладнаяЗапасы.Маркетинг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходнаяНакладнаяИмущество.Номенклатура,
	|	ПриходнаяНакладнаяИмущество.МОЛ,
	|	СУММА(ПриходнаяНакладнаяИмущество.Количество) КАК Количество,
	|	СУММА(ПриходнаяНакладнаяИмущество.Сумма) КАК Сумма,
	|	ПриходнаяНакладнаяИмущество.Номенклатура.СчетУчета КАК СчетУчета,
	|	ЗНАЧЕНИЕ(ПланСчетов.Внутренний.ВзаиморасчетыСПоставщикамиЗаТовар) КАК КорСчет
	|ПОМЕСТИТЬ ВТ_Имущество
	|ИЗ
	|	Документ.ПриходнаяНакладная.Имущество КАК ПриходнаяНакладнаяИмущество
	|ГДЕ
	|	ПриходнаяНакладнаяИмущество.Ссылка = &Ссылка
	|	И ПриходнаяНакладнаяИмущество.Количество <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходнаяНакладнаяИмущество.МОЛ,
	|	ПриходнаяНакладнаяИмущество.Номенклатура,
	|	ПриходнаяНакладнаяИмущество.Номенклатура.СчетУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходнаяНакладнаяУслуги.Номенклатура.СтатьяЗатрат КАК СтатьяЗатрат,
	|	СУММА(ПриходнаяНакладнаяУслуги.Сумма) КАК СуммаРасходов,
	|	ЗНАЧЕНИЕ(ПланСчетов.Внутренний.ВзаиморасчетыСПоставщикамиЗаУслуги) КАК КорСчет
	|ПОМЕСТИТЬ ВТ_Затраты
	|ИЗ
	|	Документ.ПриходнаяНакладная.Услуги КАК ПриходнаяНакладнаяУслуги
	|ГДЕ
	|	ПриходнаяНакладнаяУслуги.Сумма <> 0
	|	И ПриходнаяНакладнаяУслуги.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходнаяНакладнаяУслуги.Номенклатура.СтатьяЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ШапкаДокумента.Период,
	|	ВТ_ШапкаДокумента.Подразделение,
	|	ВТ_ШапкаДокумента.ВалютаДокумента КАК ВалютаЦены,
	|	ВТ_Запасы.Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ТипыЦен.Закупка) КАК ТипЦен,
	|	ВТ_Запасы.ЦенаИМаркетинг КАК Цена
	|ПОМЕСТИТЬ ВременнаяТаблицаЦены
	|ИЗ
	|	ВТ_ШапкаДокумента КАК ВТ_ШапкаДокумента,
	|	ВТ_Запасы КАК ВТ_Запасы
	|ГДЕ
	|	ВТ_ШапкаДокумента.РегистрироватьЦеныПоставщика = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ШапкаДокумента.Период,
	|	ВТ_ШапкаДокумента.Подразделение,
	|	ВТ_Затраты.СтатьяЗатрат,
	|	СУММА(ВТ_Затраты.СуммаРасходов) КАК СуммаРасходов,
	|	ВТ_Затраты.КорСчет
	|ПОМЕСТИТЬ ВременнаяТаблицаФинансовыйРезультат
	|ИЗ
	|	ВТ_ШапкаДокумента КАК ВТ_ШапкаДокумента,
	|	ВТ_Затраты КАК ВТ_Затраты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ШапкаДокумента.Период,
	|	ВТ_ШапкаДокумента.Подразделение,
	|	ВТ_Затраты.СтатьяЗатрат,
	|	ВТ_Затраты.КорСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ВТ_ШапкаДокумента.Период,
	|	ВТ_ШапкаДокумента.Подразделение,
	|	ВТ_Имущество.Номенклатура,
	|	ВТ_Имущество.МОЛ,
	|	ВТ_ШапкаДокумента.ЦФО,
	|	СУММА(ВТ_Имущество.Количество) КАК Количество,
	|	СУММА(ВТ_Имущество.Сумма) КАК Стоимость,
	|	СУММА(ВТ_Имущество.Сумма) КАК СтоимостьВал,
	|	ВТ_Имущество.СчетУчета,
	|	ВТ_Имущество.КорСчет,
	|	ВТ_ШапкаДокумента.ВалютаДокумента КАК Валюта
	|ПОМЕСТИТЬ ВременнаяТаблицаИмущество
	|ИЗ
	|	ВТ_ШапкаДокумента КАК ВТ_ШапкаДокумента,
	|	ВТ_Имущество КАК ВТ_Имущество
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ШапкаДокумента.Период,
	|	ВТ_ШапкаДокумента.Подразделение,
	|	ВТ_Имущество.Номенклатура,
	|	ВТ_Имущество.МОЛ,
	|	ВТ_ШапкаДокумента.ЦФО,
	|	ВТ_Имущество.СчетУчета,
	|	ВТ_Имущество.КорСчет,
	|	ВТ_ШапкаДокумента.ВалютаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ШапкаДокумента.Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ВТ_ШапкаДокумента.Подразделение,
	|	ВТ_ШапкаДокумента.ЦФО,
	|	ВТ_ШапкаДокумента.Контрагент,
	|	ВТ_ШапкаДокумента.КредитныйДокумент,
	|	СУММА(ВТ_Затраты.СуммаРасходов) КАК Сумма,
	|	ВТ_ШапкаДокумента.ВалютаДокумента КАК Валюта
	|ПОМЕСТИТЬ ВременнаяТаблицаВзаиморасчетыСПоставщиками
	|ИЗ
	|	ВТ_ШапкаДокумента КАК ВТ_ШапкаДокумента,
	|	ВТ_Затраты КАК ВТ_Затраты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ШапкаДокумента.Период,
	|	ВТ_ШапкаДокумента.Подразделение,
	|	ВТ_ШапкаДокумента.Контрагент,
	|	ВТ_ШапкаДокумента.ЦФО,
	|	ВТ_ШапкаДокумента.КредитныйДокумент,
	|	ВТ_ШапкаДокумента.ВалютаДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ШапкаДокумента.Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ВТ_ШапкаДокумента.Подразделение,
	|	ВТ_ШапкаДокумента.ЦФО,
	|	ВТ_ШапкаДокумента.Контрагент,
	|	ВТ_ШапкаДокумента.КредитныйДокумент,
	|	СУММА(ВТ_Имущество.Сумма),
	|	ВТ_ШапкаДокумента.ВалютаДокумента
	|ИЗ
	|	ВТ_ШапкаДокумента КАК ВТ_ШапкаДокумента,
	|	ВТ_Имущество КАК ВТ_Имущество
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ШапкаДокумента.Период,
	|	ВТ_ШапкаДокумента.Подразделение,
	|	ВТ_ШапкаДокумента.Контрагент,
	|	ВТ_ШапкаДокумента.ЦФО,
	|	ВТ_ШапкаДокумента.КредитныйДокумент,
	|	ВТ_ШапкаДокумента.ВалютаДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ШапкаДокумента.Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ВТ_ШапкаДокумента.Подразделение,
	|	ВТ_ШапкаДокумента.ЦФО,
	|	ВТ_ШапкаДокумента.Контрагент,
	|	ВТ_ШапкаДокумента.КредитныйДокумент,
	|	СУММА(ВТ_Запасы.Сумма),
	|	ВТ_ШапкаДокумента.ВалютаДокумента
	|ИЗ
	|	ВТ_ШапкаДокумента КАК ВТ_ШапкаДокумента,
	|	ВТ_Запасы КАК ВТ_Запасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ШапкаДокумента.Период,
	|	ВТ_ШапкаДокумента.Подразделение,
	|	ВТ_ШапкаДокумента.Контрагент,
	|	ВТ_ШапкаДокумента.ЦФО,
	|	ВТ_ШапкаДокумента.КредитныйДокумент,
	|	ВТ_ШапкаДокумента.ВалютаДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ШапкаДокумента.Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ВТ_ШапкаДокумента.Подразделение,
	|	ВТ_ШапкаДокумента.ЦФО,
	|	ВТ_ШапкаДокумента.Контрагент,
	|	ВТ_ШапкаДокумента.КредитныйДокумент,
	|	-ВТ_ШапкаДокумента.СуммаБезНал,
	|	ВТ_ШапкаДокумента.ВалютаДокумента
	|ИЗ
	|	ВТ_ШапкаДокумента КАК ВТ_ШапкаДокумента
	|ГДЕ
	|	ВТ_ШапкаДокумента.СуммаБезНал <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ШапкаДокумента.Период,
	|	ВТ_ШапкаДокумента.Подразделение,
	|	ВТ_ШапкаДокумента.Контрагент,
	|	ВТ_ШапкаДокумента.ЦФО,
	|	ВТ_ШапкаДокумента.КредитныйДокумент,
	|	-ВТ_ШапкаДокумента.СуммаБезНал,
	|	ВТ_ШапкаДокумента.ВалютаДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ШапкаДокумента.Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ВТ_ШапкаДокумента.Подразделение,
	|	ВТ_ШапкаДокумента.ЦФО,
	|	ВТ_ШапкаДокумента.КонтрагентБезНал,
	|	ВТ_ШапкаДокумента.КредитныйДокумент,
	|	ВТ_ШапкаДокумента.СуммаБезНал,
	|	ВТ_ШапкаДокумента.ВалютаДокумента
	|ИЗ
	|	ВТ_ШапкаДокумента КАК ВТ_ШапкаДокумента
	|ГДЕ
	|	ВТ_ШапкаДокумента.СуммаБезНал <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ШапкаДокумента.Период,
	|	ВТ_ШапкаДокумента.Подразделение,
	|	ВТ_ШапкаДокумента.ЦФО,
	|	ВТ_ШапкаДокумента.КредитныйДокумент,
	|	ВТ_ШапкаДокумента.КонтрагентБезНал,
	|	ВТ_ШапкаДокумента.СуммаБезНал,
	|	ВТ_ШапкаДокумента.ВалютаДокумента";
	
	#КонецОбласти
	
	запрос.УстановитьПараметр("Ссылка", Ссылка);
	запрос.Выполнить();
	
	запрос.Текст =
	"ВЫБРАТЬ * ИЗ ВременнаяТаблицаФинансовыйРезультат;
	|ВЫБРАТЬ * ИЗ ВременнаяТаблицаИмущество;
	|ВЫБРАТЬ * ИЗ ВременнаяТаблицаВзаиморасчетыСПоставщиками;
	|ВЫБРАТЬ * ИЗ ВременнаяТаблицаЦены;";
	
	результатЗапроса = запрос.ВыполнитьПакет();
	
	Движения.ФинансовыйРезультат.Загрузить(результатЗапроса[0].Выгрузить());
	Движения.Имущество.Загрузить(результатЗапроса[1].Выгрузить());
	Движения.ВзаиморасчетыСПоставщиками.Загрузить(результатЗапроса[2].Выгрузить());
	Движения.ЦеныНоменклатуры.Загрузить(результатЗапроса[3].Выгрузить());
	
	#Область Товары
	
	// ТОВАРЫ
	ПартииТоваров = ЭтотОбъект.Движения.ПартииТоваровНаСкладах;
	
	СуммаОприходованныхЗапасов = 0;
	
	Для Каждого СтрокаЗапасы Из ЭтотОбъект.Запасы Цикл
		
		движение = ПартииТоваров.Добавить();
		
		движение.Период 		= ЭтотОбъект.Дата;
		движение.ВидДвижения 	= ВидДвиженияНакопления.Приход;
		движение.Номенклатура 	= СтрокаЗапасы.Номенклатура;
		//Движение.Склад 			= ЭтотОбъект.СтруктурнаяЕдиница;
		движение.Склад 			= СтрокаЗапасы.Номенклатура.Родитель.Склад;
		движение.Количество 	= СтрокаЗапасы.Количество;
		
		Если ВключатьРасходыВСебестоимость Тогда
			движение.Стоимость 		= Окр((СтрокаЗапасы.Количество*Окр(СтрокаЗапасы.Цена+СтрокаЗапасы.Маркетинг, 2)) * (1-ЭтотОбъект.Скидка/100), 2);
		Иначе
			движение.Стоимость 		= Окр(СтрокаЗапасы.Сумма * (1-ЭтотОбъект.Скидка/100), 2);
		КонецЕсли;
		
		движение.СтоимостьВал 	= движение.Стоимость;
		движение.СчетУчета 		= строкаЗапасы.Номенклатура.СчетУчета;
		движение.ВидХранения 	= Перечисления.ВидыХраненияЗапасов.НаСкладе;
		движение.КорСчет 		= ПланыСчетов.Внутренний.ВзаиморасчетыСПоставщикамиЗаТовар;
		движение.Валюта			= Константы.ВалютаУчета.Получить();
		
		движение.Подразделение 	= Подразделение;
		
		СуммаОприходованныхЗапасов = СуммаОприходованныхЗапасов + Движение.Стоимость;
		
		//СуммаМаркетинг = СуммаМаркетинг + Окр(СтрокаЗапасы.Количество*СтрокаЗапасы.Маркетинг, 2, РежимОкругления.Окр15как20);
		
		// проводим по "заказам поставщику" только, если поставка своевременная (суббота, переносится на воскресенье)
		ожидаемаяДатаДоставки = ДокОсн.ДатаДоставки;
		Если ДеньНедели(ожидаемаяДатаДоставки) = 6 Тогда
			ожидаемаяДатаДоставки = КонецДня(ожидаемаяДатаДоставки) + 1;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокОсн) И КонецДня(Дата) <= КонецДня(ожидаемаяДатаДоставки) Тогда
			
			Движение = ЗаказыПоставщикам.Добавить();
			Движение.Период 		= Дата;
			Движение.Подразделение 	= Подразделение;
			Движение.Контрагент 	= Контрагент;
			Движение.Склад 			= СтрокаЗапасы.Номенклатура.Родитель.Склад;
			Движение.Номенклатура 	= СтрокаЗапасы.Номенклатура;
			Движение.ЗаказПоставщику = ДокОсн;
			Движение.Получено 		= СтрокаЗапасы.Количество;
			
		КонецЕсли;
		
	КонецЦикла;
	
	#КонецОбласти
	
	
	
	Взаиморасчеты = Движения.ВзаиморасчетыСПоставщиками;
	
	// Доп расходы
	Если ДопРасходыНаПриобретение.Количество() > 0 Тогда
		
		Для Каждого СтрокаДокумента Из ДопРасходыНаПриобретение Цикл
			
			Движение = Взаиморасчеты.Добавить();
			Движение.Период 		= ЭтотОбъект.Дата;
			Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
			Движение.Контрагент		= СтрокаДокумента.Контрагент;
			Движение.Подразделение	= Подразделение;
			Движение.Сумма 			= СтрокаДокумента.Сумма;
			
			Если ВключатьРасходыВСебестоимость Тогда
			Иначе
				ФинРезультат = Движения.ФинансовыйРезультат;
				
				Запись = ФинРезультат.Добавить();
				Запись.Период 			= Дата;
				Запись.Подразделение 	= Подразделение;
				Запись.СтатьяЗатрат 	= СтрокаДокумента.СтатьяЗатрат;
				Запись.СуммаРасходов 	= СтрокаДокумента.Сумма;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Отклонение = ДопРасходыНаПриобретение.Итог("Сумма") - (СуммаОприходованныхЗапасов - Запасы.Итог("Сумма"));
		
		Если НЕ(Отклонение = 0) И ВключатьРасходыВСебестоимость Тогда
			ФинРезультат = Движения.ФинансовыйРезультат;
			
			Запись = ФинРезультат.Добавить();
			Запись.Период 			= Дата;
			Запись.Подразделение 	= Подразделение;
			Запись.СтатьяЗатрат 	= Справочники.СтатьиЗатрат.ОтклонениеПриРаспределении;
			Запись.СуммаРасходов 	= Отклонение;
		КонецЕсли;
		
	КонецЕсли;
	
	// компенсация
	Если Не СуммаСуммаКомпенсацииПоставщиком = 0 Тогда
		
		// "ВзаиморасчетыСПоставщиками"
		движение = Движения.ВзаиморасчетыСПоставщиками.Добавить();
		
		движение.Период 		= Дата;
		движение.ВидДвижения 	= ВидДвиженияНакопления.Приход;
		движение.Подразделение	= Подразделение;
		движение.Контрагент		= Контрагент;
		движение.ЦФО			= ЦФО;
		
		Если Контрагент.ТипВеденияВзаиморасчетов = Перечисления.ТипыВеденияВзаиморасчетов.ПоЗаказамПоставщику Тогда
			движение.КредитныйДокумент = ДокОсн;
		КонецЕсли;
		
		движение.Сумма 			= СуммаСуммаКомпенсацииПоставщиком;
		движение.СуммаВал		= СуммаСуммаКомпенсацииПоставщиком;
		движение.КорСчет		= ПланыСчетов.Внутренний.Доходы;
		
		// "ФинансовыйРезультат"
		движение = Движения.ФинансовыйРезультат.Добавить();
		движение.Период 			= Дата;
		движение.Подразделение 	= Подразделение;
		движение.СтатьяДоходов 	= Справочники.СтатьиДоходов.КомпенсацияОтПоставщика;
		движение.СуммаДоходов 	= СуммаСуммаКомпенсацииПоставщиком;
		движение.КорСчет		= ПланыСчетов.Внутренний.ВзаиморасчетыСПоставщиками;
		
	КонецЕсли;
	
	// проведем розницу
	//Движения.ТоварыВРознице.Записывать = Истина;
	
	// проверим, чтобы это было по рознице.
	параметрыПодразделения = РегистрыСведений.ПараметрыУчетаПоПодразделениям
			.ПолучитьПоследнее(ТекущаяДатаСеанса(), Новый Структура("СтруктурнаяЕдиница", Подразделение));

	Если параметрыПодразделения.ЭтоРозница Тогда
		
		
		запрос = Новый Запрос;
		
		#Область ТекстЗапроса
		
		запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ПриходнаяНакладнаяЗапасы.Ссылка.Дата КАК Период,
		|	ПриходнаяНакладнаяЗапасы.Ссылка.Подразделение,
		|	ПриходнаяНакладнаяЗапасы.Ссылка.ЦФО КАК ОтделМагазина,
		|	ПриходнаяНакладнаяЗапасы.Номенклатура,
		|	ПриходнаяНакладнаяЗапасы.Количество,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * ПриходнаяНакладнаяЗапасы.Количество КАК Сумма,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * ПриходнаяНакладнаяЗапасы.Количество - ПриходнаяНакладнаяЗапасы.Сумма КАК Наценка
		|ИЗ
		|	Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&ДатаСреза,
		|				Подразделение = &Подразделение
		|					И ТипЦен = &ТипЦенПродажи) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ПриходнаяНакладнаяЗапасы.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|ГДЕ
		|	ПриходнаяНакладнаяЗапасы.Ссылка = &Ссылка
		|	И ПриходнаяНакладнаяЗапасы.Номенклатура.Родитель.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Внутренний.Товары)";
		
		#КонецОбласти 
		
		запрос.УстановитьПараметр("Ссылка", 		Ссылка);
		запрос.УстановитьПараметр("Подразделение", 	Ссылка.Подразделение);
		запрос.УстановитьПараметр("ДатаСреза", 		КонецДня(Ссылка.Дата));
		запрос.УстановитьПараметр("ТипЦенПродажи", 	Справочники.ТипыЦен.НайтиПоКоду("000000006"));
		
		результатЗапроса = запрос.Выполнить();
		
		Если Не результатЗапроса.Пустой() Тогда
			
			Движения.ТоварыВРознице.Загрузить(результатЗапроса.Выгрузить());
			
		КонецЕсли;
		
	КонецЕсли;
	
	#Область ПоследовательностьЗапасы
	
	Если Не отказ И 1=2 Тогда
		
		запрос = Новый Запрос;
		
		#Область ТекстЗапроса
		
		запрос.Текст =
		"ВЫБРАТЬ
		|	СоставДокумента.Ссылка.Подразделение,
		|	СоставДокумента.Номенклатура.Родитель.Склад КАК МестоХранения,
		|	СоставДокумента.Номенклатура.Родитель.СчетУчета КАК СчетУчета
		|ИЗ
		|	Документ.ПриходнаяНакладная.Запасы КАК СоставДокумента
		|ГДЕ
		|	СоставДокумента.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	СоставДокумента.Номенклатура.Родитель.СчетУчета,
		|	СоставДокумента.Ссылка.Подразделение,
		|	СоставДокумента.Номенклатура.Родитель.Склад";
			
		#КонецОбласти 
		
		запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		результатЗапроса = запрос.Выполнить();
		
		ПринадлежностьПоследовательностям.Запасы.Загрузить(результатЗапроса.Выгрузить());
		
		отбор = Новый Структура ("Подразделение, МестоХранения, СчетУчета");
		
		выборка = результатЗапроса.Выбрать();
		Пока выборка.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(отбор, выборка);
			
			Последовательности.Запасы.УстановитьГраницу(МоментВремени(), отбор);
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти 
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(отказ, проверяемыеРеквизиты)
	
	//Если Не СозданАвтоматически Тогда
	//	проверяемыеРеквизиты.Добавить("ДокОсн");
	//КонецЕсли
	
	проверяемыеРеквизиты.Добавить("Запасы.Номенклатура");
	проверяемыеРеквизиты.Добавить("Имущество.Номенклатура");
	
КонецПроцедуры

Процедура ПередЗаписью(отказ, режимЗаписи, режимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	//ПринадлежностьПоследовательностям.Запасы.Очистить();
	
	СуммаСкидки =    Запасы.Итог("Сумма") * Скидка/100;
	СуммаДокумента = ОбщегоНазначенияСервер.ПолучитьСуммуДокумента(ЭтотОбъект, "Запасы,Имущество,Услуги,ДопРасходыНаПриобретение") - СуммаСкидки;

КонецПроцедуры

Процедура ПриКопировании(объектКопирования)
	
	ЗаполнениеОбъектовСервер.ЗаполнитьДанныеСкопированногоДокумента(ЭтотОбъект, объектКопирования);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеПоОснованию

Процедура ЗаполнитьДокументПоОтбору(Знач данныеЗаполнения)
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииРасходнойНакладной(Знач данныеЗаполнения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Заполнение реквизитов документа.
	ЗаполнениеОбъектовСервер.ЗаполнитьРеквизитыДокументаПриВводеНаОсновании(ЭтотОбъект, данныеЗаполнения);
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	
	запрос.Текст =
	"ВЫБРАТЬ
	|	РасходнаяНакладная.Ссылка КАК ДокументОснование,
	|	СД_СоответствияСрезПоследних.КлючСоответствия,
	|	ЕСТЬNULL(СД_СоответствияСрезПоследних.ПодразделениеЗначение, РасходнаяНакладная.Подразделение) КАК Подразделение,
	|	ЕСТЬNULL(СД_СоответствияСрезПоследних.КонтрагентЗначение, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.ОтделыВМагазинах.ПустаяСсылка) КАК ЦФО
	|ИЗ
	|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СД_Соответствия.СрезПоследних(&МоментВремени, КлючСоответствия.ВидДокумента = &ВидДокумента) КАК СД_СоответствияСрезПоследних
	|		ПО (СД_СоответствияСрезПоследних.Активно = ИСТИНА)
	|			И РасходнаяНакладная.Подразделение = СД_СоответствияСрезПоследних.КлючСоответствия.Подразделение
	|			И РасходнаяНакладная.Контрагент = СД_СоответствияСрезПоследних.КлючСоответствия.Контрагент
	|ГДЕ
	|	РасходнаяНакладная.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходнаяНакладнаяЗапасы.Номенклатура,
	|	РасходнаяНакладнаяЗапасы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РасходнаяНакладнаяЗапасы.Количество,
	|	РасходнаяНакладнаяЗапасы.Цена,
	|	РасходнаяНакладнаяЗапасы.Сумма,
	|	РасходнаяНакладнаяЗапасы.СтавкаНДС,
	|	РасходнаяНакладнаяЗапасы.СуммаНДС,
	|	РасходнаяНакладнаяЗапасы.Всего,
	|	РасходнаяНакладнаяЗапасы.Количество КАК КоличествоЗаказано,
	|	РасходнаяНакладнаяЗапасы.Количество КАК КоличествоНакладная
	|ИЗ
	|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
	|ГДЕ
	|	РасходнаяНакладнаяЗапасы.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходнаяНакладнаяИмущество.Номенклатура,
	|	РасходнаяНакладнаяИмущество.Количество,
	|	РасходнаяНакладнаяИмущество.Цена,
	|	РасходнаяНакладнаяИмущество.Сумма,
	|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК МОЛ
	|ИЗ
	|	Документ.РасходнаяНакладная.Имущество КАК РасходнаяНакладнаяИмущество
	|ГДЕ
	|	РасходнаяНакладнаяИмущество.Ссылка = &ДокументОснование";
	
	#КонецОбласти
	
	запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	запрос.УстановитьПараметр("ДокументОснование", данныеЗаполнения);
	запрос.УстановитьПараметр("ВидДокумента", Перечисления.СД_ВидыСвязанныхДокументов.РасходнаяНакладная);
	
	результатЗапроса = запрос.ВыполнитьПакет();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, результатЗапроса[0].Выгрузить()[0]);
	
	ДокОсн = данныеЗаполнения;
	
	ДокументПриходнаяНакладнаяСервер.КонтрагентПриИзменении(ЭтотОбъект);
	
	Запасы.Загрузить(результатЗапроса[1].Выгрузить());
	Имущество.Загрузить(результатЗапроса[2].Выгрузить());

	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииВозвратаПоставщику(Знач данныеЗаполнения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Заполнение реквизитов документа.
	ЗаполнениеОбъектовСервер.ЗаполнитьРеквизитыДокументаПриВводеНаОсновании(ЭтотОбъект, данныеЗаполнения);
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	
	запрос.Текст =
	"ВЫБРАТЬ
	|	ВозвратПоставщику.Ссылка КАК ДокументОснование,
	|	СД_СоответствияСрезПоследних.КлючСоответствия,
	|	ЕСТЬNULL(СД_СоответствияСрезПоследних.ПодразделениеЗначение, ВозвратПоставщику.Подразделение) КАК Подразделение,
	|	ЕСТЬNULL(СД_СоответствияСрезПоследних.КонтрагентЗначение, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.ОтделыВМагазинах.ПустаяСсылка) КАК ЦФО
	|ИЗ
	|	Документ.ВозвратПоставщику КАК ВозвратПоставщику
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СД_Соответствия.СрезПоследних(&МоментВремени, КлючСоответствия.ВидДокумента = &ВидДокумента) КАК СД_СоответствияСрезПоследних
	|		ПО (СД_СоответствияСрезПоследних.Активно = ИСТИНА)
	|			И ВозвратПоставщику.Подразделение = СД_СоответствияСрезПоследних.КлючСоответствия.Подразделение
	|			И ВозвратПоставщику.Контрагент = СД_СоответствияСрезПоследних.КлючСоответствия.Контрагент
	|ГДЕ
	|	ВозвратПоставщику.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратПоставщикуЗапасы.Номенклатура,
	|	ВозвратПоставщикуЗапасы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВозвратПоставщикуЗапасы.Количество,
	|	ВозвратПоставщикуЗапасы.Цена,
	|	ВозвратПоставщикуЗапасы.Сумма,
	|	ВозвратПоставщикуЗапасы.СтавкаНДС,
	|	ВозвратПоставщикуЗапасы.СуммаНДС,
	|	ВозвратПоставщикуЗапасы.Всего,
	|	ВозвратПоставщикуЗапасы.Количество КАК КоличествоЗаказано,
	|	ВозвратПоставщикуЗапасы.Количество КАК КоличествоНакладная
	|ИЗ
	|	Документ.ВозвратПоставщику.Запасы КАК ВозвратПоставщикуЗапасы
	|ГДЕ
	|	ВозвратПоставщикуЗапасы.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратПоставщикуИмущество.Номенклатура,
	|	ВозвратПоставщикуИмущество.Количество,
	|	ВозвратПоставщикуИмущество.Цена,
	|	ВозвратПоставщикуИмущество.Сумма,
	|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК МОЛ
	|ИЗ
	|	Документ.ВозвратПоставщику.Имущество КАК ВозвратПоставщикуИмущество
	|ГДЕ
	|	ВозвратПоставщикуИмущество.Ссылка = &ДокументОснование";
	
	#КонецОбласти
	
	запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	запрос.УстановитьПараметр("ДокументОснование", данныеЗаполнения);
	запрос.УстановитьПараметр("ВидДокумента", Перечисления.СД_ВидыСвязанныхДокументов.ВозвратПоставщику);
	
	результатЗапроса = запрос.ВыполнитьПакет();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, результатЗапроса[0].Выгрузить()[0]);
	
	ДокОсн = данныеЗаполнения;
	
	ДокументПриходнаяНакладнаяСервер.КонтрагентПриИзменении(ЭтотОбъект);
	
	Запасы.Загрузить(результатЗапроса[1].Выгрузить());
	Имущество.Загрузить(результатЗапроса[2].Выгрузить());

	
КонецПроцедуры

#КонецОбласти

#КонецОбласти