Перем КаталогОбмена, ОбновитьКарту;

Функция ПолучитьXML(Настройки) Экспорт

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Настройки, "settingsComposition", "http://v8.1c.ru/8.1/data-composition-system/settings");

	Возврат ЗаписьXML.Закрыть();

КонецФункции

Функция ПолучитьНастройкиИзXML(ТекстXML) Экспорт

	Если ТекстXML = "" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
 	ЧтениеXML.УстановитьСтроку(ТекстXML);
	
	Возврат СериализаторXDTO.ПрочитатьXML(ЧтениеXML, Тип("ПользовательскиеНастройкиКомпоновкиДанных"));

КонецФункции

Функция ПолучитьАгентовСОтбором(ОтборПоАгентам)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	СхемаКомпоновкиДанных = ОбъектОбработка.ПолучитьМакет("СКДАгенты");
	
	НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	Для Каждого ЭлементОтбора Из НастройкиКомпоновкиДанных.Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Агент") Тогда
			НастройкиКомпоновкиДанных.Отбор.Элементы.Удалить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	ЭлементОтбора = НастройкиКомпоновкиДанных.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Агент"); 
	ЭлементОтбора.ВидСравнения = ОтборПоАгентам.ВидСравнения; 
	ЭлементОтбора.ПравоеЗначение = ОтборПоАгентам.ПравоеЗначение; 
	ЭлементОтбора.Использование = ОтборПоАгентам.Использование;	
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);

	ТаблицаРезультат = Новый ТаблицаЗначений;
		
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

    Возврат ТаблицаРезультат;
КонецФункции

&НаСервере
Процедура ОбновитьЛоги(СписокКодовАгентов)

	// Загрузка накопленных автоматических логов
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БПАГАгенты.Ссылка КАК Агент,
	|	БПАГАгенты.Код КАК Код
	|ИЗ
	|	Справочник.БПАГАгенты КАК БПАГАгенты
	|ГДЕ
	|	НЕ БПАГАгенты.ПометкаУдаления
	|	И БПАГАгенты.Код В(&СписокКодовАгентов)";
	
	Запрос.УстановитьПараметр("СписокКодовАгентов", СписокКодовАгентов);
	
	ТЗАгенты = Запрос.Выполнить().Выгрузить();
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	ОбъектОбработка.ОбновитьКэшНастроекАгентов();
	ОбъектОбработка.ЗагрузитьЖурналРаботы(ТЗАгенты);
	
КонецПроцедуры	

&НаКлиенте
Процедура Сформировать(Команда)
	
	Период = ПолучитьПериодИзНастроек();
	ДатаОтчета = ПолучитьДатуОтчетаИзНастроек();
	Если (ДатаОтчета < Дата(2000, 1, 1)) Тогда
		Предупреждение("Неверно указан период!");
		Возврат;
	КонецЕсли;	
	
	
	//Если (Период.ДатаНачала < Дата(2000, 1, 1)) ИЛИ (Период.ДатаОкончания < Дата(2000, 1, 1)) Тогда
	//	Предупреждение("Неверно указан период!");
	//	Возврат;
	//КонецЕсли;	
	//
	//Если Период.ДатаНачала > Период.ДатаОкончания Тогда
	//	Предупреждение("Неверно указан период!");
	//	Возврат;
	//КонецЕсли;
	
	Агент = ПолучитьАгентаИзНастроек();
	Если Агент = Неопределено Тогда
		Предупреждение("Не выбран агент!");
		Возврат;
	КонецЕсли;	
	
	ПланФакт = ПолучитьПланФактИзНастроек();
	//Если ПланФакт = Неопределено Тогда
		//Предупреждение("Не выбран агент!");
		//Возврат;
	//КонецЕсли;	
	
	Если ПланФакт <> Неопределено Тогда
		Если ПланФакт = "План" Тогда
			ВариантМаршрута = ПолучитьВариантМаршрутаИзНастроек(); 
			Если ВариантМаршрута = Неопределено Тогда
				Предупреждение("Не выбран вариант маршрута!");
				Возврат;
			Иначе
				СформироватьОтчетПланФакт(Агент, ДатаОтчета, ВариантМаршрута);
			КонецЕсли;
		Иначе
			СформироватьОтчет(Агент, ДатаОтчета);
		КонецЕсли;
	Иначе
		СформироватьОтчет(Агент, ДатаОтчета);
	КонецЕсли;	
	
	//ОбновитьКарту = Истина;
	//ЗагрузитьТаблицуЛога();
КонецПроцедуры

Функция ПолучитьПериодИзНастроек()
	
	Компоновщик.ЗагрузитьНастройки(Компоновщик.ПолучитьНастройки());
	
	Период = Неопределено;
	тмпЭлемент = Компоновщик.Настройки.ПараметрыДанных.Элементы.Найти("Период");
	Если тмпЭлемент <> Неопределено Тогда
		Период = тмпЭлемент.Значение;
	КонецЕсли;
	
	Если Период = Неопределено Тогда
		Период = Новый СтандартныйПериод(НачалоДня(ТекущаяДата()), КонецДня(ТекущаяДата()));
	КонецЕсли;
	
	Возврат	Период;
КонецФункции

Функция ПолучитьДатуОтчетаИзНастроек()
	
	Компоновщик.ЗагрузитьНастройки(Компоновщик.ПолучитьНастройки());
	
	ДатаОтчета = Неопределено;
	Для Каждого тмпЭлемент Из Компоновщик.Настройки.Отбор.Элементы Цикл
		Если СокрЛП(тмпЭлемент.ЛевоеЗначение) = "ПараметрыДанных.ОкончаниеПериода" Тогда
			ДатаОтчета = КонецДня(тмпЭлемент.ПравоеЗначение);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат	ДатаОтчета;

КонецФункции


Функция ПолучитьАгентаИзНастроек()
	
	Компоновщик.ЗагрузитьНастройки(Компоновщик.ПолучитьНастройки());
	
	Агент = Неопределено;
	Для Каждого тмпЭлемент Из Компоновщик.Настройки.Отбор.Элементы Цикл
		Если СокрЛП(тмпЭлемент.ЛевоеЗначение) = "Агент" Тогда
			Агент = тмпЭлемент.ПравоеЗначение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат	Агент;
КонецФункции

Функция ПолучитьПланФактИзНастроек()
	
	Компоновщик.ЗагрузитьНастройки(Компоновщик.ПолучитьНастройки());
	
	ПланФакт = Неопределено;
	Для Каждого тмпЭлемент Из Компоновщик.Настройки.Отбор.Элементы Цикл
		Если СокрЛП(тмпЭлемент.ЛевоеЗначение) = "[План Факт]" Тогда
			ПланФакт = тмпЭлемент.ПравоеЗначение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат	ПланФакт;
КонецФункции

Функция ПолучитьВариантМаршрутаИзНастроек()
	
	Компоновщик.ЗагрузитьНастройки(Компоновщик.ПолучитьНастройки());
	
	ВариантМаршрута = Неопределено;
	Для Каждого тмпЭлемент Из Компоновщик.Настройки.Отбор.Элементы Цикл
		Если СокрЛП(тмпЭлемент.ЛевоеЗначение) = "ВариантМаршрута" Тогда
			ВариантМаршрута = тмпЭлемент.ПравоеЗначение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат	ВариантМаршрута;
КонецФункции

Процедура СформироватьОтчет(ТекАгент, ТекДата)
	ДатаФормированияОтчета = ТекДата;
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	Макет = ОбъектОбработка.ПолучитьМакет("МакетОтчетаПоПосещениям");
	ТабДокумент = Новый ТабличныйДокумент;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	БПАГДокументыАгентовСрезПоследних.ТорговаяТочка.Владелец.Наименование КАК НаименованиеКонтрагента,
	               |	БПАГДокументыАгентовСрезПоследних.ТорговаяТочка.Владелец КАК Контрагент,
	               |	БПАГДокументыАгентовСрезПоследних.ТорговаяТочка,
	               |	БПАГДокументыАгентовСрезПоследних.Документ,
	               |	БПАГДокументыАгентовСрезПоследних.ДатаСозданияНаУстройстве КАК ДатаСоздания,
	               |	БПАГДокументыАгентовСрезПоследних.ДатаИзмененияНаУстройстве КАК ДатаИзменения,
	               |	ЕСТЬNULL(БПАГДокументыАгентовСрезПоследних.ШиротаИзменения, 0) КАК Широта,
	               |	ЕСТЬNULL(БПАГДокументыАгентовСрезПоследних.ДолготаИзменения, 0) КАК Долгота,
	               |	БПАГДокументыАгентовСрезПоследних.ВидДокумента,
	               |	ЕСТЬNULL(БПАГДокументыАгентовСрезПоследних.ТорговаяТочка.Широта, 0) КАК ШиротаТТ,
	               |	ЕСТЬNULL(БПАГДокументыАгентовСрезПоследних.ТорговаяТочка.Долгота, 0) КАК ДолготаТТ
	               |ИЗ
	               |	РегистрСведений.БПАГДокументыАгентов.СрезПоследних(
	               |			,
	               |			Агент = &Агент
	               |				И ДатаСозданияНаУстройстве >= &ДатаНачала
	               |				И ДатаСозданияНаУстройстве <= &ДатаКонца
	               |				И ВидДокумента <> &НаОсновании) КАК БПАГДокументыАгентовСрезПоследних
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаСоздания";
	                                   
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ТекДата));
	Запрос.УстановитьПараметр("ДатаКонца", КонецДня(ТекДата));
	Запрос.УстановитьПараметр("Агент", ТекАгент);
	Если БПАГ.БПАГПолучитьНастройку("1СВариантЗагрузкиЗаявок", ТекАгент) = Перечисления.БПАГВариантыЗагрузкиЗаявок.Реализация Тогда
		Запрос.УстановитьПараметр("НаОсновании", "NULL");
	Иначе
		Запрос.УстановитьПараметр("НаОсновании", Перечисления.БПАГВидыДокументов.РеализацияПоЗаявке);
	КонецЕсли;
    	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	ОбластьЗаголовок    = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.ТекстЗаголовка = "Отчет по посещениям";
	ТабДокумент.Вывести(ОбластьЗаголовок);

	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");

	ОбластьШапка.Параметры.ТекДата = Формат(ДатаФормированияОтчета, "ДФ=dd.MM.yyyy");
	ОбластьШапка.Параметры.ФИОАгента = ТекАгент.ФизЛицо.Наименование;
	ОбластьШапка.Параметры.МаркаАвто = ОбъектОбработка.НастройкаИзРегистра("1САвтомобиль", ТекАгент).Марка;
	ОбластьШапка.Параметры.НомерАвто = ОбъектОбработка.НастройкаИзРегистра("1САвтомобиль", ТекАгент);

	ТабДокумент.Вывести(ОбластьШапка);

	ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьШапкаТаблицы);

	ОбщееВремяНаДокумент = 0;
	ОбщееВремяМеждуДокументами = 0;
	ОбщееВремяМеждуТочками = 0;
	КоличествоКлиентов = 1;
	
	ВремяПредыдущего = Дата(2000, 1, 1);
	ВремяПредыдущегоКлиента = Дата(2000, 1, 1);
	ПредыдущийКлиент = 0;
	Пока Выборка.Следующий() Цикл
		   
		ОбластьСтроки =  Макет.ПолучитьОбласть("Строка");
		ЗаполнитьЗначенияСвойств(ОбластьСтроки.Параметры, Выборка);
		ВремяРаботы = (Выборка.ДатаИзменения - Выборка.ДатаСоздания) / 60;
		ОбластьСтроки.Параметры.ВремяРаботы = Формат(ВремяРаботы, "ЧДЦ=2; ЧН=0,00");
		
		Если ВремяПредыдущего = Дата(2000, 1, 1) Тогда
			ВремяСПредыдущего = 0;
		Иначе
			ВремяСПредыдущего = (Выборка.ДатаСоздания - ВремяПредыдущего) / 60;
		КонецЕсли;
		ВремяПредыдущего = Выборка.ДатаСоздания;
		ОбластьСтроки.Параметры.ВремяСПредыдущего = Формат(ВремяСПредыдущего, "ЧДЦ=2; ЧН=0,00");
		
		ВремяСПредыдущегоКлиента = 0;
		Если ПредыдущийКлиент = 0 Тогда
			ВремяСПредыдущегоКлиента = 0;
			ВремяПредыдущегоКлиента = Выборка.ДатаСоздания;
			ПредыдущийКлиент = Выборка.Контрагент;
			ПримернаяДлинаПути = 0;
			ПредыдущаяШ = 0;
			ПредыдущаяД = 0;
		ИначеЕсли Выборка.Контрагент <> ПредыдущийКлиент Тогда
			ВремяСПредыдущегоКлиента = (Выборка.ДатаСоздания - ВремяПредыдущегоКлиента) / 60;
			ВремяПредыдущегоКлиента = Выборка.ДатаСоздания;
			ПредыдущийКлиент = Выборка.Контрагент;
			КоличествоКлиентов = КоличествоКлиентов + 1;
		КонецЕсли;
		
		//Отклонение
		A1 = Выборка.Широта;
		A2 = Выборка.ШиротаТТ;
		B1 = Выборка.Долгота;
		B2 = Выборка.ДолготаТТ;
		K = 3.1415926535897932 / 180;
		Если (A1 <> 0) И (A2 <> 0) И (B1 <> 0) И (B2 <> 0) Тогда
			Отклонение = 2 * ASin(Sqrt(Sin((A2 - A1) * K / 2) * Sin((A2 - A1) * K / 2) + Cos(A2 * K) * Cos(A1 * K) * Sin((B2 - B1) * K / 2) * Sin((B2 - B1) * K / 2)));
			Отклонение = Отклонение * 6367.4446571225;
			Отклонение = Окр(Отклонение, 1);
		Иначе
			Отклонение = "???";
		КонецЕсли;
		ОбластьСтроки.Параметры.Отклонение = Отклонение;
		
		//Расчет пути "по прямой"
		Если (A1 <> 0) И (ПредыдущаяШ <> 0) И (B1 <> 0) И (ПредыдущаяД <> 0) Тогда
			Расстояние = 2 * ASin(Sqrt(Sin((ПредыдущаяШ - A1) * K / 2) * Sin((ПредыдущаяШ - A1) * K / 2) + Cos(ПредыдущаяШ * K) * Cos(A1 * K) * Sin((ПредыдущаяД - B1) * K / 2) * Sin((ПредыдущаяД - B1) * K / 2)));
			Расстояние = Расстояние * 6367.4446571225;
			Расстояние = ?(Расстояние < 0, -Расстояние, Расстояние);
			ПримернаяДлинаПути = ПримернаяДлинаПути + Расстояние;
		КонецЕсли;
		
		ПредыдущаяШ = A1;
		ПредыдущаяД = B1;
			
	   	ТабДокумент.Вывести(ОбластьСтроки);
		
		ОбщееВремяНаДокумент = ОбщееВремяНаДокумент + ВремяРаботы;
		ОбщееВремяМеждуДокументами = ОбщееВремяМеждуДокументами + ВремяСПредыдущего;
		ОбщееВремяМеждуТочками = ОбщееВремяМеждуТочками + ВремяСПредыдущегоКлиента;
	КонецЦикла;
	
	КолВоДокументов = Выборка.Количество();
	СреднееВремяНаДокумент = ?(КолВоДокументов = 0, 0, ОбщееВремяНаДокумент / КолВоДокументов);
	СреднееВремяМеждуДокументами = ?(КолВоДокументов = 0, 0, ОбщееВремяМеждуДокументами / КолВоДокументов);
	КолВоПереездов = КоличествоКлиентов - 1;
	СреднееВремяМеждуТочками = ?(КолВоПереездов = 0, 0, ОбщееВремяМеждуТочками / КолВоПереездов);
	
	ОбластьИтого =  Макет.ПолучитьОбласть("Подвал"); 
	ОбластьИтого.Параметры.СреднееВремяНаДокумент = Формат(СреднееВремяНаДокумент, "ЧДЦ=2; ЧН=0,00");
	ОбластьИтого.Параметры.СреднееВремяМеждуДокументами = Формат(СреднееВремяМеждуДокументами, "ЧДЦ=2; ЧН=0,00");
	ОбластьИтого.Параметры.СреднееВремяМеждуТочками = Формат(СреднееВремяМеждуТочками, "ЧДЦ=2; ЧН=0,00");
	ОбластьИтого.Параметры.ПримернаяДлинаПути = Формат(ПримернаяДлинаПути, "ЧДЦ=2; ЧН=0,00");
	ТабДокумент.Вывести(ОбластьИтого); 
	   
	ПолеТабличногоДокумента.Очистить();
	ПолеТабличногоДокумента.Вывести(ТабДокумент);
	
	//Отрисуем карту маршрута
	Выборка = Результат.Выбрать();
	
	СтрокаКоординат = "";
	тмпТТ = 0;
	ПорядокВыписки = 0;
	СтрокаВидовВыписанныхДокументов = "";
	предШирота = 0;
	предДолгота = 0;
	предНаименованиеКонтрагента = 0;
	
	Пока Выборка.Следующий() Цикл
		Если (тмпТТ = 0) ИЛИ (тмпТТ <> Выборка.ТорговаяТочка) Тогда
			Если тмпТТ <> 0 Тогда
				//Выведем предыдущий маркер
				Если (предШирота <> 0) И (предДолгота <> 0) Тогда
					СтрокаМаркера = "Порядок: " + ПорядокВыписки + "\n" + ОбъектОбработка.НормализоватьСтрокуДляPHP(предНаименованиеКонтрагента) + "\n" + СтрокаВидовВыписанныхДокументов;
					СтрокаКоординат = СтрокаКоординат + "[""" + СтрокаМаркера + """, " + Формат(предШирота, "ЧРД=.; ЧГ=0")+ ", " + Формат(предДолгота, "ЧРД=.; ЧГ=0") + "],";
				КонецЕсли;
			КонецЕсли;
			
			ПорядокВыписки = ПорядокВыписки + 1;
			
			тмпТТ = Выборка.ТорговаяТочка;
			предШирота = Выборка.Широта;
			предДолгота = Выборка.Долгота;
			предНаименованиеКонтрагента = Выборка.НаименованиеКонтрагента;
			
			СтрокаВидовВыписанныхДокументов = Формат(Выборка.ДатаСоздания, "ДЛФ=T") + " " +  СокрЛП(Выборка.ВидДокумента) + ?(Выборка.ДатаСоздания <> Выборка.ДатаИзменения, " (записан в " + Формат(Выборка.ДатаИзменения, "ДЛФ=T") + ")", "");
		Иначе
			предШирота = Выборка.Широта;
			предДолгота = Выборка.Долгота;
			СтрокаВидовВыписанныхДокументов = СтрокаВидовВыписанныхДокументов + ",\n" + Формат(Выборка.ДатаСоздания, "ДЛФ=T") + " " +  СокрЛП(Выборка.ВидДокумента) + ?(Выборка.ДатаСоздания <> Выборка.ДатаИзменения, " (записан в " + Формат(Выборка.ДатаИзменения, "ДЛФ=T") + ")", "");
		КонецЕсли;
		
	КонецЦикла;
	//Выведем последний маркер
	Если (предШирота <> 0) И (предДолгота <> 0) Тогда
		СтрокаМаркера = "Порядок: " + ПорядокВыписки + "\n" + ОбъектОбработка.НормализоватьСтрокуДляPHP(предНаименованиеКонтрагента) + "\n" + СтрокаВидовВыписанныхДокументов;
		СтрокаКоординат = СтрокаКоординат + "[""" + СтрокаМаркера + """, " + Формат(предШирота, "ЧРД=.; ЧГ=0")+ ", " + Формат(предДолгота, "ЧРД=.; ЧГ=0") + "],";
	КонецЕсли;
	
	СтрокаКоординат = Лев(СтрокаКоординат, СтрДлина(СтрокаКоординат) - 1);
	
	Текст = 
	"<HTML><HEAD><TITLE>Карты Google</TITLE>
	|<META name=viewport content=""initial-scale=1.0, user-scalable=yes""></META>
	|<META content=""text/html; charset=UTF-8"" http-equiv=content-type></META>
	|<SCRIPT type=text/javascript src=""http://maps.google.com/maps/api/js?sensor=false""></SCRIPT>
	|<SCRIPT type=text/javascript>
	|
	|var map;
    |
  	|function drawRoute() {
	| 	var agentRoute = [" + СтрокаКоординат + "
	|  	];
	|	
	|	var bounds = new google.maps.LatLngBounds();	 
    |	var coords = new Array(agentRoute.length);
    |	// Markers
    |	for (var i = 0; i < agentRoute.length; i++) {
	|		var place = agentRoute[i];
    |	    var myLatLng = new google.maps.LatLng(place[1], place[2]);
    |	    bounds.extend(myLatLng);
	|		coords[i] = myLatLng;
    |	    var marker = new google.maps.Marker({
    |	        position: myLatLng,
    |	        title: place[0]
    |	    });
	|		marker.setMap(map); 
    |	}
    |	// Polyline
    |	var polyline = new google.maps.Polyline({
	|       path: coords,
    |	    strokeColor: ""#0000AA"",
    |	    strokeOpacity: 1.0,
    |	    strokeWeight: 2
    |	});
    |	polyline.setMap(map);
	|
	|	// Center
	|	map.setCenter(bounds.getCenter(), map.fitBounds(bounds));
	|
  	|}
    |
	|function onLoad() {
    |	var myOptions = {
    |		mapTypeId: google.maps.MapTypeId.ROADMAP
    |	}
    |	map = new google.maps.Map(document.getElementById(""map_canvas""), myOptions);
    |	drawRoute();
	|}
    |
	|window.onload = onLoad;  
    |
	|</SCRIPT>
	|
	|</HEAD>
	|<body onload=""onLoad()"">
	|  <div id=""map_canvas"" style=""width:100%; height:100%""></div>
	|</body>
	|</html>";
	
	ПолеHTMLДокументаКарта = Текст;
КонецПроцедуры

Процедура СформироватьОтчетПланФакт(ТекАгент, ТекДата, ВариантМаршрута)
	ДатаФормированияОтчета = ТекДата;
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	//Если ВариантМаршрута.Пустая() Тогда
	//	//Предупреждение("Не указан вариант маршрута.");
	//	Возврат;
	//КонецЕсли;
	
	Макет = ОбъектОбработка.ПолучитьМакет("МакетОтчетаПоПосещениям");
	ТабДокумент = Новый ТабличныйДокумент;
	
	ДатаМаршрута = ПолучитьДатуМаршрута(НачалоДня(ТекДата), ВариантМаршрута);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(ДокументыАгентов.НаименованиеКонтрагента, Маршрут.НаименованиеКонтрагента) КАК НаименованиеКонтрагента,
	               |	ЕСТЬNULL(ДокументыАгентов.Контрагент, Маршрут.Контрагент) КАК Контрагент,
	               |	ЕСТЬNULL(ДокументыАгентов.ТорговаяТочка, Маршрут.ТорговаяТочка) КАК ТорговаяТочка,
	               |	ДокументыАгентов.Документ,
	               |	ДокументыАгентов.ДатаСоздания КАК ДатаСоздания,
	               |	ДокументыАгентов.ДатаИзменения,
	               |	ЕСТЬNULL(ДокументыАгентов.Широта, 0) КАК Широта,
	               |	ЕСТЬNULL(ДокументыАгентов.Долгота, 0) КАК Долгота,
	               |	ДокументыАгентов.ВидДокумента,
	               |	ЕСТЬNULL(ДокументыАгентов.ШиротаТТ, Маршрут.ШиротаТТ) КАК ШиротаТТ,
	               |	ЕСТЬNULL(ДокументыАгентов.ДолготаТТ, Маршрут.ДолготаТТ) КАК ДолготаТТ,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ДокументыАгентов.Документ, ИСТИНА) = ИСТИНА
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЕстьДокумент,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(Маршрут.ТорговаяТочка, ИСТИНА) = ИСТИНА
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ПоМаршруту
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		БПАГДокументыАгентовСрезПоследних.ТорговаяТочка.Владелец.Наименование КАК НаименованиеКонтрагента,
	               |		БПАГДокументыАгентовСрезПоследних.ТорговаяТочка.Владелец КАК Контрагент,
	               |		БПАГДокументыАгентовСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
	               |		БПАГДокументыАгентовСрезПоследних.Документ КАК Документ,
	               |		БПАГДокументыАгентовСрезПоследних.ДатаСозданияНаУстройстве КАК ДатаСоздания,
	               |		БПАГДокументыАгентовСрезПоследних.ДатаИзмененияНаУстройстве КАК ДатаИзменения,
	               |		БПАГДокументыАгентовСрезПоследних.ШиротаИзменения КАК Широта,
	               |		БПАГДокументыАгентовСрезПоследних.ДолготаИзменения КАК Долгота,
	               |		БПАГДокументыАгентовСрезПоследних.ВидДокумента КАК ВидДокумента,
	               |		БПАГДокументыАгентовСрезПоследних.ТорговаяТочка.Широта КАК ШиротаТТ,
	               |		БПАГДокументыАгентовСрезПоследних.ТорговаяТочка.Долгота КАК ДолготаТТ
	               |	ИЗ
	               |		РегистрСведений.БПАГДокументыАгентов.СрезПоследних(
	               |				,
	               |				Агент = &Агент
	               |					И ДатаСозданияНаУстройстве >= &ДатаНачала
	               |					И ДатаСозданияНаУстройстве <= &ДатаКонца
	               |					И ВидДокумента <> &НаОсновании) КАК БПАГДокументыАгентовСрезПоследних) КАК ДокументыАгентов
	               |		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			БПАГМаршруты.ТорговаяТочка КАК ТорговаяТочка,
	               |			БПАГМаршруты.ТорговаяТочка.Владелец КАК Контрагент,
	               |			БПАГМаршруты.ТорговаяТочка.Владелец.Наименование КАК НаименованиеКонтрагента,
	               |			БПАГМаршруты.ТорговаяТочка.Широта КАК ШиротаТТ,
	               |			БПАГМаршруты.ТорговаяТочка.Долгота КАК ДолготаТТ,
	               |			БПАГМаршруты.Порядок КАК Порядок
	               |		ИЗ
	               |			РегистрСведений.БПАГМаршруты КАК БПАГМаршруты
	               |		ГДЕ
	               |			БПАГМаршруты.Агент = &Агент
	               |			И БПАГМаршруты.Дата = &ДатаМаршрута) КАК Маршрут
	               |		ПО ДокументыАгентов.ТорговаяТочка = Маршрут.ТорговаяТочка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаСоздания,
	               |	Маршрут.Порядок";
	                                   
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ТекДата));
	Запрос.УстановитьПараметр("ДатаКонца", КонецДня(ТекДата));
	Запрос.УстановитьПараметр("Агент", ТекАгент);
	Запрос.УстановитьПараметр("ДатаМаршрута", ДатаМаршрута);
	
	Если БПАГ.БПАГПолучитьНастройку("1СВариантЗагрузкиЗаявок", ТекАгент) = Перечисления.БПАГВариантыЗагрузкиЗаявок.Реализация Тогда
		Запрос.УстановитьПараметр("НаОсновании", "NULL");
	Иначе
		Запрос.УстановитьПараметр("НаОсновании", Перечисления.БПАГВидыДокументов.РеализацияПоЗаявке);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	ОбластьЗаголовок    = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.ТекстЗаголовка = "Отчет по посещениям";
	ТабДокумент.Вывести(ОбластьЗаголовок);

	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");

	ОбластьШапка.Параметры.ТекДата = Формат(ДатаФормированияОтчета, "ДФ=dd.MM.yyyy");
	ОбластьШапка.Параметры.ФИОАгента = ТекАгент.ФизЛицо.Наименование;
	ОбластьШапка.Параметры.МаркаАвто = ОбъектОбработка.НастройкаИзРегистра("1САвтомобиль", ТекАгент).Марка;
	ОбластьШапка.Параметры.НомерАвто = ОбъектОбработка.НастройкаИзРегистра("1САвтомобиль", ТекАгент);

	ТабДокумент.Вывести(ОбластьШапка);

	ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьШапкаТаблицы);

	ОбщееВремяНаДокумент = 0;
	ОбщееВремяМеждуДокументами = 0;
	ОбщееВремяМеждуТочками = 0;
	КоличествоКлиентов = 1;
	
	ВремяПредыдущего = Дата(2000, 1, 1);
	ВремяПредыдущегоКлиента = Дата(2000, 1, 1);
	ПредыдущийКлиент = 0;
	Пока Выборка.Следующий() Цикл
		Если Выборка.ПоМаршруту Тогда   
			ОбластьСтроки =  Макет.ПолучитьОбласть("Строка");
		Иначе
			ОбластьСтроки =  Макет.ПолучитьОбласть("Строка1");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ОбластьСтроки.Параметры, Выборка);
		
		Если Выборка.ЕстьДокумент Тогда 
			ВремяРаботы = (Выборка.ДатаИзменения - Выборка.ДатаСоздания) / 60;
			ОбластьСтроки.Параметры.ВремяРаботы = Формат(ВремяРаботы, "ЧДЦ=2; ЧН=0,00");
			
			Если ВремяПредыдущего = Дата(2000, 1, 1) Тогда
				ВремяСПредыдущего = 0;
			Иначе
				ВремяСПредыдущего = (Выборка.ДатаСоздания - ВремяПредыдущего) / 60;
			КонецЕсли;
			ВремяПредыдущего = Выборка.ДатаСоздания;
			ОбластьСтроки.Параметры.ВремяСПредыдущего = Формат(ВремяСПредыдущего, "ЧДЦ=2; ЧН=0,00");
			
			ВремяСПредыдущегоКлиента = 0;
			Если ПредыдущийКлиент = 0 Тогда
				ВремяСПредыдущегоКлиента = 0;
				ВремяПредыдущегоКлиента = Выборка.ДатаСоздания;
				ПредыдущийКлиент = Выборка.Контрагент;
				ПримернаяДлинаПути = 0;
				ПредыдущаяШ = 0;
				ПредыдущаяД = 0;
			ИначеЕсли Выборка.Контрагент <> ПредыдущийКлиент Тогда
				ВремяСПредыдущегоКлиента = (Выборка.ДатаСоздания - ВремяПредыдущегоКлиента) / 60;
				ВремяПредыдущегоКлиента = Выборка.ДатаСоздания;
				ПредыдущийКлиент = Выборка.Контрагент;
				КоличествоКлиентов = КоличествоКлиентов + 1;
			КонецЕсли;
			
			//Отклонение
			A1 = Выборка.Широта;
			//A1 = Выборка.Поле1;
			A2 = Выборка.ШиротаТТ;
			B1 = Выборка.Долгота;
			//B1 = Выборка.Поле2;
			B2 = Выборка.ДолготаТТ;
			K = 3.1415926535897932 / 180;
			Если (A1 <> 0) И (A2 <> 0) И (B1 <> 0) И (B2 <> 0) Тогда
				Отклонение = 2 * ASin(Sqrt(Sin((A2 - A1) * K / 2) * Sin((A2 - A1) * K / 2) + Cos(A2 * K) * Cos(A1 * K) * Sin((B2 - B1) * K / 2) * Sin((B2 - B1) * K / 2)));
				Отклонение = Отклонение * 6367.4446571225;
				Отклонение = Окр(Отклонение, 1);
			Иначе
				Отклонение = "???";
			КонецЕсли;
			ОбластьСтроки.Параметры.Отклонение = Отклонение;
			
			//Расчет пути "по прямой"
			Если (A1 <> 0) И (ПредыдущаяШ <> 0) И (B1 <> 0) И (ПредыдущаяД <> 0) Тогда
				Расстояние = 2 * ASin(Sqrt(Sin((ПредыдущаяШ - A1) * K / 2) * Sin((ПредыдущаяШ - A1) * K / 2) + Cos(ПредыдущаяШ * K) * Cos(A1 * K) * Sin((ПредыдущаяД - B1) * K / 2) * Sin((ПредыдущаяД - B1) * K / 2)));
				Расстояние = Расстояние * 6367.4446571225;
				Расстояние = ?(Расстояние < 0, -Расстояние, Расстояние);
				ПримернаяДлинаПути = ПримернаяДлинаПути + Расстояние;
			КонецЕсли;
			
			ПредыдущаяШ = A1;
			ПредыдущаяД = B1;
				
			ОбщееВремяНаДокумент = ОбщееВремяНаДокумент + ВремяРаботы;
			ОбщееВремяМеждуДокументами = ОбщееВремяМеждуДокументами + ВремяСПредыдущего;
			ОбщееВремяМеждуТочками = ОбщееВремяМеждуТочками + ВремяСПредыдущегоКлиента;
		КонецЕсли;
		
	   	ТабДокумент.Вывести(ОбластьСтроки);
	КонецЦикла;
	
	КолВоДокументов = Выборка.Количество();
	СреднееВремяНаДокумент = ?(КолВоДокументов = 0, 0, ОбщееВремяНаДокумент / КолВоДокументов);
	СреднееВремяМеждуДокументами = ?(КолВоДокументов = 0, 0, ОбщееВремяМеждуДокументами / КолВоДокументов);
	КолВоПереездов = КоличествоКлиентов - 1;
	СреднееВремяМеждуТочками = ?(КолВоПереездов = 0, 0, ОбщееВремяМеждуТочками / КолВоПереездов);
	
	ОбластьИтого =  Макет.ПолучитьОбласть("Подвал"); 
	ОбластьИтого.Параметры.СреднееВремяНаДокумент = Формат(СреднееВремяНаДокумент, "ЧДЦ=2; ЧН=0,00");
	ОбластьИтого.Параметры.СреднееВремяМеждуДокументами = Формат(СреднееВремяМеждуДокументами, "ЧДЦ=2; ЧН=0,00");
	ОбластьИтого.Параметры.СреднееВремяМеждуТочками = Формат(СреднееВремяМеждуТочками, "ЧДЦ=2; ЧН=0,00");
	ОбластьИтого.Параметры.ПримернаяДлинаПути = Формат(ПримернаяДлинаПути, "ЧДЦ=2; ЧН=0,00");
	ТабДокумент.Вывести(ОбластьИтого); 
	   
	ПолеТабличногоДокумента.Очистить();
	ПолеТабличногоДокумента.Вывести(ТабДокумент);
	
	//Формируем строку адресов по документам
	Выборка = Результат.Выбрать();
	
	СтрокаКоординат = "";
	тмпТТ = 0;
	ПорядокВыписки = 0;
	СтрокаВидовВыписанныхДокументов = "";
	предШирота = 0;
	предДолгота = 0;
	предНаименованиеКонтрагента = 0;
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЕстьДокумент Тогда
			Если (тмпТТ = 0) ИЛИ (тмпТТ <> Выборка.ТорговаяТочка) Тогда
				Если тмпТТ <> 0 Тогда
					//Выведем предыдущий маркер
					Если (предШирота <> 0) И (предДолгота <> 0) Тогда
						СтрокаМаркера = "Порядок: " + ПорядокВыписки + "\n" + ОбъектОбработка.НормализоватьСтрокуДляPHP(предНаименованиеКонтрагента) + "\n" + СтрокаВидовВыписанныхДокументов;
						СтрокаКоординат = СтрокаКоординат + "[""" + СтрокаМаркера + """, " + Формат(предШирота, "ЧРД=.; ЧГ=0")+ ", " + Формат(предДолгота, "ЧРД=.; ЧГ=0") + "],";
					КонецЕсли;
				КонецЕсли;
				
				ПорядокВыписки = ПорядокВыписки + 1;
				
				тмпТТ = Выборка.ТорговаяТочка;
				
				предШирота = Выборка.Широта;
				предДолгота = Выборка.Долгота;
				//предШирота = Выборка.Поле1;
				//предДолгота = Выборка.Поле2;
				предНаименованиеКонтрагента = Выборка.НаименованиеКонтрагента;
				
				СтрокаВидовВыписанныхДокументов = Формат(Выборка.ДатаСоздания, "ДЛФ=T") + " " +  СокрЛП(Выборка.ВидДокумента) + ?(Выборка.ДатаСоздания <> Выборка.ДатаИзменения, " (записан в " + Формат(Выборка.ДатаИзменения, "ДЛФ=T") + ")", "");
			Иначе
				
				предШирота = Выборка.Широта;
				предДолгота = Выборка.Долгота;
				//предШирота = Выборка.Поле1;
				//предДолгота = Выборка.Поле2;
				СтрокаВидовВыписанныхДокументов = СтрокаВидовВыписанныхДокументов + ",\n" + Формат(Выборка.ДатаСоздания, "ДЛФ=T") + " " +  СокрЛП(Выборка.ВидДокумента) + ?(Выборка.ДатаСоздания <> Выборка.ДатаИзменения, " (записан в " + Формат(Выборка.ДатаИзменения, "ДЛФ=T") + ")", "");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//Выведем последний маркер
	Если (предШирота <> 0) И (предДолгота <> 0) Тогда
		СтрокаМаркера = "Факт. порядок: " + ПорядокВыписки + "\n" + ОбъектОбработка.НормализоватьСтрокуДляPHP(предНаименованиеКонтрагента) + "\n" + СтрокаВидовВыписанныхДокументов;
		СтрокаКоординат = СтрокаКоординат + "[""" + СтрокаМаркера + """, " + Формат(предШирота, "ЧРД=.; ЧГ=0")+ ", " + Формат(предДолгота, "ЧРД=.; ЧГ=0") + "],";
	КонецЕсли;
	
	СтрокаКоординат = Лев(СтрокаКоординат, СтрДлина(СтрокаКоординат) - 1);
	
	
	//Формируем строку адресов по маршруту
	Выборка = Результат.Выбрать();
	
	СтрокаКоординатПоМаршруту = "";
	тмпТТ = 0;
	ПорядокВыписки = 0;
	СтрокаВидовВыписанныхДокументов = "";
	предШирота = 0;
	предДолгота = 0;
	предНаименованиеКонтрагента = 0;
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ПоМаршруту Тогда
		Если (тмпТТ = 0) ИЛИ (тмпТТ <> Выборка.ТорговаяТочка) Тогда
			Если тмпТТ <> 0 Тогда
				//Выведем предыдущий маркер
				Если (предШирота <> 0) И (предДолгота <> 0) Тогда
					СтрокаМаркера = "Порядок: " + ПорядокВыписки + "\n" + ОбъектОбработка.НормализоватьСтрокуДляPHP(предНаименованиеКонтрагента) + "\n" + СтрокаВидовВыписанныхДокументов;
					СтрокаКоординатПоМаршруту = СтрокаКоординатПоМаршруту + "[""" + СтрокаМаркера + """, " + Формат(предШирота, "ЧРД=.; ЧГ=0")+ ", " + Формат(предДолгота, "ЧРД=.; ЧГ=0") + "],";
				КонецЕсли;
			КонецЕсли;
			
			ПорядокВыписки = ПорядокВыписки + 1;
			
			тмпТТ = Выборка.ТорговаяТочка;
			предШирота = Выборка.ШиротаТТ;
			предДолгота = Выборка.ДолготаТТ;
			предНаименованиеКонтрагента = Выборка.НаименованиеКонтрагента;
			
			СтрокаВидовВыписанныхДокументов = Формат(Выборка.ДатаСоздания, "ДЛФ=T") + " " +  СокрЛП(Выборка.ВидДокумента) + ?(Выборка.ДатаСоздания <> Выборка.ДатаИзменения, " (записан в " + Формат(Выборка.ДатаИзменения, "ДЛФ=T") + ")", "");
		Иначе
			предШирота = Выборка.ШиротаТТ;
			предДолгота = Выборка.ДолготаТТ;
			СтрокаВидовВыписанныхДокументов = СтрокаВидовВыписанныхДокументов + ",\n" + Формат(Выборка.ДатаСоздания, "ДЛФ=T") + " " +  СокрЛП(Выборка.ВидДокумента) + ?(Выборка.ДатаСоздания <> Выборка.ДатаИзменения, " (записан в " + Формат(Выборка.ДатаИзменения, "ДЛФ=T") + ")", "");
		КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//Выведем последний маркер
	Если (предШирота <> 0) И (предДолгота <> 0) Тогда
		СтрокаМаркера = "Порядок: " + ПорядокВыписки + "\n" + ОбъектОбработка.НормализоватьСтрокуДляPHP(предНаименованиеКонтрагента) + "\n" + СтрокаВидовВыписанныхДокументов;
		СтрокаКоординатПоМаршруту = СтрокаКоординатПоМаршруту + "[""" + СтрокаМаркера + """, " + Формат(предШирота, "ЧРД=.; ЧГ=0")+ ", " + Формат(предДолгота, "ЧРД=.; ЧГ=0") + "],";
	КонецЕсли;
	
	СтрокаКоординатПоМаршруту = Лев(СтрокаКоординатПоМаршруту, СтрДлина(СтрокаКоординатПоМаршруту) - 1);
	
	
	
	Текст = 
	"<HTML><HEAD><TITLE>Карты Google</TITLE>
	|<META name=viewport content=""initial-scale=1.0, user-scalable=yes""></META>
	|<META content=""text/html; charset=UTF-8"" http-equiv=content-type></META>
	|<SCRIPT type=text/javascript src=""http://maps.google.com/maps/api/js?sensor=false""></SCRIPT>
	|<SCRIPT type=text/javascript>
	|
	|var map;
    |
  	|function drawRoute() {
	| 	var agentRouteDoc = [" + СтрокаКоординат + "
	|  	];
	| 	var agentRoute = [" + СтрокаКоординатПоМаршруту + "
	|  	];
	|	
	|	var bounds = new google.maps.LatLngBounds();
    |	var coords = new Array(agentRoute.length);
	|   var coordsDoc = new Array(agentRouteDoc.length);
	|
	|	// Markers
    |	for (var i = 0; i < agentRoute.length; i++) {
	|		var place = agentRoute[i];
    |	    var myLatLng = new google.maps.LatLng(place[1], place[2]);
    |	    bounds.extend(myLatLng);
	|		coords[i] = myLatLng;
    |	    var marker = new google.maps.Marker({
    |	        position: myLatLng,
    |	        title: place[0],
	|			icon: 'http://www.google.com/mapfiles/dd-start.png'
    |	    });
	|		marker.setMap(map); 
    |	}
	|	for (var i = 0; i < agentRouteDoc.length; i++) {
	|		var place = agentRouteDoc[i];
    |	    var myLatLng = new google.maps.LatLng(place[1], place[2]);
    |	    bounds.extend(myLatLng);
	|		coordsDoc[i] = myLatLng;
    |	    var marker = new google.maps.Marker({
    |	        position: myLatLng,
    |	        title: place[0]
    |	    });
	|		marker.setMap(map); 
    |	}
    |	// Polyline
    |	var polyline = new google.maps.Polyline({
	|       path: coords,
    |	    strokeColor: ""#00AA00"",
    |	    strokeOpacity: 1.0,
    |	    strokeWeight: 2
    |	});
    |	polyline.setMap(map);
	|	
	|	// Polyline documents
    |	var polylineDoc = new google.maps.Polyline({
	|       path: coordsDoc,
    |	    strokeColor: ""#0000AA"",
    |	    strokeOpacity: 1.0,
    |	    strokeWeight: 2
    |	});
    |	polylineDoc.setMap(map);

	|
	|	// Center
	|	map.setCenter(bounds.getCenter(), map.fitBounds(bounds));
	|
  	|}
    |
	|function onLoad() {
    |	var myOptions = {
    |		mapTypeId: google.maps.MapTypeId.ROADMAP
    |	}
    |	map = new google.maps.Map(document.getElementById(""map_canvas""), myOptions);
    |	drawRoute();
	|}
    |
	|window.onload = onLoad;  
    |
	|</SCRIPT>
	|
	|</HEAD>
	|<body onload=""onLoad()"">
	|  <div id=""map_canvas"" style=""width:100%; height:100%""></div>
	|</body>
	|</html>";
	
	ПолеHTMLДокументаКарта = Текст;
КонецПроцедуры

Функция ПолучитьДатуМаршрута(ДатаПоиска, ТекВариантМаршрута)
	ИнтервалПланирования = ТекВариантМаршрута.ИнтервалПланирования; 	
	ДатаНачалаМаршрута = НачалоДня(ТекВариантМаршрута.ДатаНачала);
	
	ИнтервалВСекундах = ИнтервалПланирования * 24 * 60 * 60;
	ТекущийДеньМаршрута = ДатаНачалаМаршрута + (ДатаПоиска -  (ДатаНачалаМаршрута +  Цел((ДатаПоиска - ДатаНачалаМаршрута) / ИнтервалВСекундах) * ИнтервалВСекундах));
	Возврат ТекущийДеньМаршрута;
КонецФункции

Процедура ЗагрузитьТаблицуЛога()
	
	Для Каждого тмпЭлемент Из Компоновщик.Настройки.Отбор.Элементы Цикл
		Если СокрЛП(тмпЭлемент.ЛевоеЗначение) = "Агент" Тогда
			ОтборПоАгентам = тмпЭлемент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого тмпЭлемент Из Компоновщик.Настройки.Отбор.Элементы Цикл
		Если СокрЛП(тмпЭлемент.ЛевоеЗначение) = "[План Факт]" Тогда
			ПланФакт = тмпЭлемент.ПравоеЗначение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого тмпЭлемент Из Компоновщик.Настройки.Отбор.Элементы Цикл
		Если СокрЛП(тмпЭлемент.ЛевоеЗначение) = "ВариантМаршрута" Тогда
			ВариантМаршрута = тмпЭлемент.ПравоеЗначение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ТЗАгенты = ПолучитьАгентовСОтбором(ОтборПоАгентам);
	
	Агенты = ТЗАгенты.ВыгрузитьКолонку("Агент");
	Если Агенты.Количество() > 1 Тогда
		
	КонецЕсли;
	
	//Объект.ЛогАгента.Очистить();
	
	//Если Агенты.Количество() > 1 Тогда
	//	ВыводитьЛинии = Ложь;
	//Иначе
	//	ВыводитьЛинии = Истина;
	//КонецЕсли;
	
	СписокКодовАгентов = Новый СписокЗначений;
	Для Каждого текАгент Из Агенты Цикл
		СписокКодовАгентов.Добавить(текАгент.Код);
	КонецЦикла;
	
	Для Каждого текАгент Из Агенты Цикл
		
		
		
		Прервать;
	КонецЦикла;
	
	
КонецПроцедуры

Функция РезультатКомпоновкиВТЗ(СКД, ТЗ) Экспорт
	
	НастройкиКомпоновщика = Компоновщик.Настройки;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ИсточникДанных1", ТЗ );
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	Для Каждого тмпЭлемент Из НастройкиКомпоновщика.ПараметрыДанных.Элементы Цикл
		Если СокрЛП(тмпЭлемент.Параметр) = "НачалоПериода" Тогда
			тмпЭлемент.Значение = Период.ДатаНачала;
		ИначеЕсли СокрЛП(тмпЭлемент.Параметр) = "ОкончаниеПериода" Тогда
			тмпЭлемент.Значение = Период.ДатаОкончания;
		КонецЕсли;
	КонецЦикла;
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СКД, НастройкиКомпоновщика,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, ВнешниеНаборыДанных);

	ТаблицаРезультат = Новый ТаблицаЗначений;
		
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

    Возврат ТаблицаРезультат;
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СхемаКомпоновкиДанных = РеквизитФормыВЗначение("Объект").ПолучитьМакет("СКДОтчетПоПосещениям");
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
КонецПроцедуры

Функция ПолучитьИконкуМаркера(Тип = Неопределено)
	Если Тип = Неопределено Тогда
		Возврат "http://www.google.com/mapfiles/marker.png";
	КонецЕсли;
	
	Попытка
		Тип = Формат(Тип, "ЧГ=");
	Исключение
	КонецПопытки;
	
	Если Тип = "0" Тогда
		Возврат "http://www.google.com/mapfiles/ms/micons/yellow-dot.png";
		//"Документ создан (новый)";
	ИначеЕсли Тип = "1" Тогда
		Возврат "http://www.google.com/mapfiles/ms/micons/green-dot.png";
		//"Документ сохранен";
	ИначеЕсли Тип = "2" Тогда
		Возврат "http://www.google.com/mapfiles/ms/micons/red-dot.png";
		//"Документ удален";
	ИначеЕсли Тип = "3" Тогда
		Возврат "http://www.google.com/mapfiles/ms/micons/yellow-dot.png";
		//"Документ открыт";
	ИначеЕсли Тип = "4" Тогда
		Возврат "http://www.google.com/mapfiles/ms/micons/red-dot.png";
		//"Документ закрыт (изменения не сохранены)";
	ИначеЕсли Тип = "5" Тогда
		Возврат "http://www.google.com/mapfiles/ms/micons/red-dot.png";
		//"Документ восстановлен после сбоя (открыт)";
	ИначеЕсли Тип = "6" Тогда
		Возврат "http://www.google.com/mapfiles/ms/micons/green-dot.png";
		//"Документ распечатан";
	ИначеЕсли Тип = "7" Тогда
		Возврат "http://www.google.com/mapfiles/ms/micons/yellow-dot.png";
		//"Документ создан автоматически (новый)";
	ИначеЕсли Тип = "8" Тогда
		Возврат "http://www.google.com/mapfiles/ms/micons/yellow-dot.png";
		//"Документ переоформлен автоматически";
	ИначеЕсли Тип = "101" Тогда
		Возврат "http://www.google.com/mapfiles/ms/micons/green-dot.png";
		//"Отчет распечатан";
	ИначеЕсли Тип = "201" Тогда
		Возврат "http://labs.google.com/ridefinder/images/mm_20_yellow.png";
		//"Установлены новые координаты ТТ";
	ИначеЕсли Тип = "202" Тогда
		Возврат "http://labs.google.com/ridefinder/images/mm_20_blue.png";
		//"Сделано фото";
	ИначеЕсли Тип = "301" Тогда
		Возврат "http://labs.google.com/ridefinder/images/mm_20_green.png";
		//"Обмен начат";
	ИначеЕсли Тип = "302" Тогда
		Возврат "http://labs.google.com/ridefinder/images/mm_20_green.png";
		//"Обмен завершен";
	ИначеЕсли Тип = "303" Тогда
		Возврат "http://labs.google.com/ridefinder/images/mm_20_red.png";
		//"Обмен завершен c ошибкой";
	ИначеЕсли Тип = "304" Тогда
		Возврат "http://labs.google.com/ridefinder/images/mm_20_red.png";
		//"Обмен остановлен пользователем";
	ИначеЕсли Тип = "401" Тогда
		Возврат "http://labs.google.com/ridefinder/images/mm_20_orange.png";
		//"Вход в базу (начало работы)";
	ИначеЕсли Тип = "402" Тогда
		Возврат "http://labs.google.com/ridefinder/images/mm_20_orange.png";
		//"Настройки базы изменены";
	ИначеЕсли Тип = "403" Тогда
		Возврат "http://labs.google.com/ridefinder/images/mm_20_orange.png";
		//"База восстановлена из бекапа";
	ИначеЕсли Тип = "501" Тогда
		Возврат "http://labs.google.com/ridefinder/images/mm_20_orange.png";
		//"Выход приложения из фона (показано окно приложения)";
	ИначеЕсли Тип = "502" Тогда
		Возврат "http://labs.google.com/ridefinder/images/mm_20_orange.png";
		//"Вход приложения в фон (окно приложения скрыто)";
	ИначеЕсли Тип = "601" Тогда
		Возврат "http://labs.google.com/ridefinder/images/mm_20_red.png";
		//"Пользователь запретил программе использовать GPS";
	ИначеЕсли Тип = "7001" Тогда
		Возврат "http://panagent.ru/1c/icons/routestart.png";
		//"Начало маршрута";
	ИначеЕсли Тип = "7002" Тогда
		Возврат "http://panagent.ru/1c/icons/routeend.png";
		//"Конец маршрута";
	Иначе
		Возврат "http://www.google.com/mapfiles/marker.png";
	КонецЕсли;
КонецФункции

Функция ПолучитьСтрокуМаркера(СтрокаТЗ)
	
	Строка = ПолучитьПредставлениеТипаЛога(СтрокаТЗ.Тип) + ": ";
	Строка = Строка + СтрокаТЗ.Дата;
	
	Если СокрЛП(СтрокаТЗ.Агент) <> "" Тогда
		Строка = Строка + "\n" + СокрЛП(СтрокаТЗ.Агент);
	КонецЕсли;
	
	Если СокрЛП(СтрокаТЗ.ТТ) <> "" Тогда
		Строка = Строка + "\n" + СокрЛП(СтрокаТЗ.ТТ.Владелец) + " " + СокрЛП(СтрокаТЗ.ТТ);
	КонецЕсли;
	
	Если СокрЛП(СтрокаТЗ.Документ) <> "" Тогда
		Строка = Строка + "\n" + СокрЛП(СтрокаТЗ.Документ);
	КонецЕсли;
	
	Если СокрЛП(СтрокаТЗ.Анкета) <> "" Тогда
		Строка = Строка + "\n" + СокрЛП(СтрокаТЗ.Анкета);
	КонецЕсли;
	
	Строка = СтрЗаменить(Строка, """", " ");
	
	Возврат Строка;
КонецФункции

Функция СтрокуЛогаВСтруктуруСОбъектами(ТекСтрока)	
	СтрокаТаб = Объект.ЛогАгента.НайтиПоИдентификатору(ТекСтрока);
	СтруктураЛога = Новый Структура;
	СтруктураЛога.Вставить("ID", СтрокаТаб.ID);
	СтруктураЛога.Вставить("Дата", СтрокаТаб.Дата);
	СтруктураЛога.Вставить("УровеньЗарядаБатареии", СтрокаТаб.УровеньЗарядаБатареии);
	СтруктураЛога.Вставить("Широта", СтрокаТаб.Широта);
	СтруктураЛога.Вставить("Долгота", СтрокаТаб.Долгота);
	СтруктураЛога.Вставить("ДатаОпределенияКоординат", СтрокаТаб.ДатаОпределенияКоординат);
	СтруктураЛога.Вставить("РазрешенGPS", СтрокаТаб.РазрешенGPS);
	СтруктураЛога.Вставить("РазрешенGPSДляПриложения", СтрокаТаб.РазрешенGPSДляПриложения);
	СтруктураЛога.Вставить("Тип", СтрокаТаб.Тип);
	СтруктураЛога.Вставить("СкоростьВМоментОпределенияКоординат", СтрокаТаб.СкоростьВМоментОпределенияКоординат);
	СтруктураЛога.Вставить("ТочностьОпределенияКоординат", СтрокаТаб.ТочностьОпределенияКоординат);
	СтруктураЛога.Вставить("ТипПредставление", СтрокаТаб.ТипПредставление);
	
	СтруктураДанных = Новый Структура;
	Если НЕ СтрокаТаб.Данные = "" тогда
		МассивДанных = РазложитьСтрокуВМассив(СтрокаТаб.Данные);
		Имя = "";
		Для Счет = 0 По МассивДанных.Количество() - 1 Цикл
			Если Счет = 0 Тогда
				Имя = МассивДанных[Счет];	
			ИначеЕсли Цел(Счет/2) = Счет/2 Тогда
				Имя = МассивДанных[Счет];
			Иначе	
				СтруктураДанных.Вставить(Имя ,МассивДанных[Счет]);
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	СтруктураДанных = НайтиСсылкиНаДокументы(СтруктураДанных, СтруктураЛога.Тип);
	
	СтруктураЛога.Вставить("Данные", СтруктураДанных);
		
	Возврат СтруктураЛога;
КонецФункции

Функция НайтиСсылкиНаДокументы(Данные, Тип);
	
	Структура = Данные;
		
	Если Данные.Свойство("uniqueID") Тогда
		Если Данные.uniqueID <> "" Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	БПАГДокументыАгентовСрезПоследних.Документ КАК Документ
			|ИЗ
			|	РегистрСведений.БПАГДокументыАгентов.СрезПоследних КАК БПАГДокументыАгентовСрезПоследних
			|ГДЕ
			|	БПАГДокументыАгентовСрезПоследних.ИД = &ИДДокумента";
			
			Запрос.УстановитьПараметр("ИДДокумента", Данные.uniqueID);
			
			Результат = Запрос.Выполнить().Выгрузить();
			
			Если Результат.Количество() > 0 Тогда
				Структура.Вставить("Ссылка", Результат[0].Документ);
			Иначе
				Если Данные.type = "Order" Тогда
					Структура.Вставить("Ссылка", Документы.ЗаказКлиента.ПустаяСсылка());
				ИначеЕсли  Данные.type = "Sale" Тогда
					Структура.Вставить("Ссылка", Документы.РеализацияТоваровУслуг.ПустаяСсылка());
				КонецЕсли;
				// **** Дописать
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Данные.Свойство("date") Тогда
		Если Данные.date <> "" Тогда
			Данные.date = ПолучитьДатуИВремяGMT(Данные.date);
		КонецЕсли;
	КонецЕсли;
	
	Если Данные.Свойство("status") Тогда
		Если Данные.status <> "" Тогда
			ПредставлениеСтатуса = "";
			
			Если Данные.status = "0" Тогда
				ПредставлениеСтатуса = "Документ недооформлен";
			ИначеЕсли Данные.status = "1" Тогда
				ПредставлениеСтатуса = "Документ готов к отправке";
			ИначеЕсли Данные.status = "2" Тогда
				ПредставлениеСтатуса = "Документ напечатан и готов к отправке";
			ИначеЕсли Данные.status = "11" Тогда
				ПредставлениеСтатуса = "Документ отправлен в Центр";
			ИначеЕсли Данные.status = "12" Тогда
				ПредставлениеСтатуса = "Документ сохранен и проведен в учетной системе";
			ИначеЕсли Данные.status = "13" Тогда
				ПредставлениеСтатуса = "Документ сохранен, но не проведен в учетной системе";
			ИначеЕсли Данные.status = "14" Тогда
				ПредставлениеСтатуса = "Документ удален либо помечен на удаление";
			КонецЕсли;
			
			Структура.Вставить("ПредставлениеСтатуса", ПредставлениеСтатуса);
		КонецЕсли;
	КонецЕсли;
	
	Если Данные.Свойство("companyID") Тогда
		Если Данные.companyID <> "" Тогда
			Структура.Вставить("ОрганизацияСсылка", Справочники.БПАГОрганизации.НайтиПоКоду(Данные.companyID));
		КонецЕсли;
	КонецЕсли;
	
	Если Данные.Свойство("posID") Тогда	
		Если Данные.posID <> "" Тогда
			Структура.Вставить("ТорговаяТочкаСсылка", Справочники.БПАГТорговыеТочки.НайтиПоКоду(Данные.posID));
		КонецЕсли;
	КонецЕсли;
	
	Если Данные.Свойство("questionnaireTypeID") Тогда
		Если Данные.questionnaireTypeID <> "" Тогда
			Структура.Вставить("АнкетаСсылка", Справочники.БПАГВидыАнкет.НайтиПоКоду(Данные.questionnaireTypeID));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Структура;		
КонецФункции

&НаКлиенте
Процедура ОтобразитьДанныеСтрокиЛога(ТекСтрока)
	СтрукутураСтроки = СтрокуЛогаВСтруктуруСОбъектами(ТекСтрока);
	
	ПараметрыФормы = Новый Структура;	
	ПараметрыФормы.Вставить("ДанныеЛога", СтрукутураСтроки);
  
	ФормаМаршрута = ОткрытьФормуМодально("Обработка.БПАГПанАгентЦентрУправления.Форма.УПФормаРасшифровкиЖурнала", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ЛогАгентаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	// Формирование ключа
	СписокЗнаений = Новый СписокЗначений;
	ТекСтрока = Элемент.Текущаястрока;
	
	ОтобразитьДанныеСтрокиЛога(ТекСтрока);
КонецПроцедуры

Функция РазложитьСтрокуВМассив(Знач Стр, Разделитель = ",") Экспорт	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;	
КонецФункции

Функция ПолучитьДатуИВремяGMT(СтрокаДаты)
	
	Если СтрокаДаты = "" Тогда
		Возврат Дата("00010101");	
	КонецЕсли;
	
	Если СтрокаДаты = "01.01.0001 0:00:00" Тогда
		Возврат Дата("00010101");
	КонецЕсли;
	
	СтрокаДатаВремя = Строка(СтрокаДаты); 	
	ПозицияGMT = Найти(СтрокаДатаВремя, "GMT");
	Если ПозицияGMT <> 0 Тогда
		СтрокаДатаВремя = Лев(СтрокаДатаВремя, ПозицияGMT - 2);
	КонецЕсли;
	СтрокаДатаВремя = СтрЗаменить(СтрокаДатаВремя, " ", ",");
	СтрокаДатаВремя = СтрЗаменить(СтрокаДатаВремя, ":", ",");
	СтрокаДатаВремя = СтрЗаменить(СтрокаДатаВремя, ".", ",");
	МассивДаты = РазложитьСтрокуВМассив(СтрокаДатаВремя);
	ДатаВремя = Дата(МассивДаты[2], МассивДаты[1], МассивДаты[0], МассивДаты[3], МассивДаты[4], МассивДаты[5]);

	Возврат ДатаВремя;
	
КонецФункции

Функция ПолучитьПредставлениеТипаЛога(Тип)
	Если Тип = "0" Тогда
		Возврат "Документ создан (новый)";
	ИначеЕсли Тип = "1" Тогда
		Возврат "Документ сохранен";
	ИначеЕсли Тип = "2" Тогда
		Возврат "Документ удален";
	ИначеЕсли Тип = "3" Тогда
		Возврат "Документ открыт";
	ИначеЕсли Тип = "4" Тогда
		Возврат "Документ закрыт (изменения не сохранены)";
	ИначеЕсли Тип = "5" Тогда
		Возврат "Документ восстановлен после сбоя (открыт)";
	ИначеЕсли Тип = "6" Тогда
		Возврат "Документ распечатан";
	ИначеЕсли Тип = "7" Тогда
		Возврат "Документ создан автоматически (новый)";
	ИначеЕсли Тип = "8" Тогда
		Возврат "Документ переоформлен автоматически";
	ИначеЕсли Тип = "101" Тогда
		Возврат "Отчет распечатан";
	ИначеЕсли Тип = "201" Тогда
		Возврат "Установлены новые координаты ТТ";
	ИначеЕсли Тип = "202" Тогда
		Возврат "Сделано фото";
	ИначеЕсли Тип = "301" Тогда
		Возврат "Обмен начат";
	ИначеЕсли Тип = "302" Тогда
		Возврат "Обмен завершен";
	ИначеЕсли Тип = "303" Тогда
		Возврат "Обмен завершен c ошибкой";
	ИначеЕсли Тип = "304" Тогда
		Возврат "Обмен остановлен пользователем";
	ИначеЕсли Тип = "401" Тогда
		Возврат "Вход в базу (начало работы)";
	ИначеЕсли Тип = "402" Тогда
		Возврат "Настройки базы изменены";
	ИначеЕсли Тип = "403" Тогда
		Возврат "База восстановлена из бекапа";
	ИначеЕсли Тип = "501" Тогда
		Возврат "Выход приложения из фона (показано окно приложения)";
	ИначеЕсли Тип = "502" Тогда
		Возврат "Вход приложения в фон (окно приложения скрыто)";
	ИначеЕсли Тип = "601" Тогда
		Возврат "Пользователь запретил программе использовать GPS";
	ИначеЕсли Тип = "602" Тогда
		Возврат "Фоновое получение GPS-координат";
	ИначеЕсли Тип = "7001" Тогда
		Возврат "Начало маршрута";
	ИначеЕсли Тип = "7002" Тогда
		Возврат "Конец маршрута";
	Иначе	
		Возврат "";
	КонецЕсли;	
КонецФункции

Функция ПроверитьНаличиеНастройкиВыгрузкиЛога()
	ВидНастройкиПоследнегоIDЛога = Справочники.БПАГВидыНастроекАгентов.НайтиПоКоду("processedLogID");
	НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидНастройки.Установить(ВидНастройкиПоследнегоIDЛога);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	НастройкиПрисутствуют = ПроверитьНаличиеНастройкиВыгрузкиЛога();
	Если Не НастройкиПрисутствуют Тогда
		Сообщить("В настройках агента не установлен параметр ""Отправлять журнал действий с устройства""!", СтатусСообщения.Важное);
	КонецЕсли;
	
	Элементы.ПользовательскиеНастройки.Видимость = Истина;
	ОбновитьКарту = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтбор(Команда)
	УправлениеВидимостью();
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостью()
	ПолеHTMLДокументаКарта = "";
	Элементы.ПользовательскиеНастройки.Видимость = НЕ Элементы.ПользовательскиеНастройки.Видимость;
	Элементы.ПоказатьОтбор.Заголовок = ?(Элементы.ПользовательскиеНастройки.Видимость, "Скрыть отбор", "Показать отбор");
	Сформировать(Неопределено);
КонецПроцедуры

Процедура ВывестиHTMLКарты()
	Если ОбновитьКарту = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаКоординат = "";
	// Выводим на карту
	ВывелиМаркерНачалаМаршрута = Ложь;
	ПоследняяСтрокаТЗСКоординатами = Неопределено;
	Для Каждого СтрокаТЗ Из Объект.ЛогАгента Цикл
		Если СтрДлина(СтрЗаменить(СтрокаТЗ.Широта, "0", "")) < 2 Или СтрДлина(СтрЗаменить(СтрокаТЗ.Долгота, "0", "")) < 2 Тогда
			// Нулевые координаты
		Иначе
			Если Не ВывелиМаркерНачалаМаршрута Тогда
				//Маркер начала маршрута
				ВывелиМаркерНачалаМаршрута = Истина;
				
				СтрокаМаркера = СокрЛП(СтрокаТЗ.Дата) + " Начало маршрута" + "\n";
				Если СокрЛП(СтрокаТЗ.Агент) <> "" Тогда
					СтрокаМаркера = СтрокаМаркера + СокрЛП(СтрокаТЗ.Агент);
				КонецЕсли;
				СтрокаМаркера = СтрЗаменить(СтрокаМаркера, """", " ");
				
				СтрокаКоординат = "[""" + СтрокаМаркера + """, " + СтрокаТЗ.Широта + ", " + СтрокаТЗ.Долгота + ", '" + ПолучитьИконкуМаркера(7001) + "', " + "1" + "],";
			КонецЕсли;
			
			СтрокаМаркера = ПолучитьСтрокуМаркера(СтрокаТЗ);
			Если СтрокаТЗ.Тип = "602" Тогда
				СтрокаКоординат = СтрокаКоординат + "[""" + СтрокаМаркера + """, " + СтрокаТЗ.Широта + ", " + СтрокаТЗ.Долгота + ", '" + ПолучитьИконкуМаркера(СтрокаТЗ.Тип) + "', " + "0" + "],";
			Иначе
				СтрокаКоординат = СтрокаКоординат + "[""" + СтрокаМаркера + """, " + СтрокаТЗ.Широта + ", " + СтрокаТЗ.Долгота + ", '" + ПолучитьИконкуМаркера(СтрокаТЗ.Тип) + "', " + "1" + "],";
			КонецЕсли;
			ПоследняяСтрокаТЗСКоординатами = СтрокаТЗ;
		КонецЕсли;
	КонецЦикла;
	
	//Маркер конца маршрута
	Если ПоследняяСтрокаТЗСКоординатами <> Неопределено Тогда
		
		СтрокаМаркера = СокрЛП(ПоследняяСтрокаТЗСКоординатами.Дата) + " Конец маршрута" + "\n";
		Если СокрЛП(ПоследняяСтрокаТЗСКоординатами.Агент) <> "" Тогда
			СтрокаМаркера = СтрокаМаркера + СокрЛП(ПоследняяСтрокаТЗСКоординатами.Агент);
		КонецЕсли;
		СтрокаМаркера = СтрЗаменить(СтрокаМаркера, """", " ");
		
		СтрокаКоординат = СтрокаКоординат + "[""" + СтрокаМаркера + """, " + ПоследняяСтрокаТЗСКоординатами.Широта + ", " + ПоследняяСтрокаТЗСКоординатами.Долгота + ", '" + ПолучитьИконкуМаркера(7002) + "', " + "1" + "]";
	ИначеЕсли СтрДлина(СтрокаКоординат) > 0 Тогда
		СтрокаКоординат = Лев(СтрокаКоординат, СтрДлина(СтрокаКоординат) - 1);
	КонецЕсли;
	
	Текст = 
	"<HTML><HEAD><TITLE>Карты Google</TITLE>
	|<META name=viewport content=""initial-scale=1.0, user-scalable=yes""></META>
	|<META content=""text/html; charset=UTF-8"" http-equiv=content-type></META>
	|<SCRIPT type=text/javascript src=""http://maps.google.com/maps/api/js?sensor=false""></SCRIPT>
	|<SCRIPT type=text/javascript>
	|
	|var map;
    |
  	|function drawRoute() {
	| 	var agentRoute = [" + СтрокаКоординат + "
	|  	];
	|	
	|	var bounds = new google.maps.LatLngBounds();	 
    |	var coords = new Array(agentRoute.length);
    |	// Markers
    |	for (var i = 0; i < agentRoute.length; i++) {
	|		var place = agentRoute[i];
    |	    var myLatLng = new google.maps.LatLng(place[1], place[2]);
    |	    bounds.extend(myLatLng);
	|		coords[i] = myLatLng;
    |	    
	|		if (place[4]) {
	|		var marker = new google.maps.Marker({
    |	        position: myLatLng,
    |	        title: place[0],
	|			icon:place[3] 
    |	    });
	|		marker.setMap(map);
	|		}
    |	}";
	Если ВыводитьЛинии Тогда
	Текст = Текст + 
 	"	// Polyline
    |	var polyline = new google.maps.Polyline({
	|       path: coords,
    |	    strokeColor: ""#0000AA"",
    |	    strokeOpacity: 1.0,
    |	    strokeWeight: 2
    |	});
    |	polyline.setMap(map);";
	КонецЕсли;
	Текст = Текст +
	"	// Center
	|	map.setCenter(bounds.getCenter(), map.fitBounds(bounds));
	|
  	|}
    |
	|function onLoad() {
    |	var myOptions = {
    |		mapTypeId: google.maps.MapTypeId.ROADMAP,
    |		mapTypeControl: true,
    |		mapTypeControlOptions: {
    |			style: window.google.maps.MapTypeControlStyle.DROPDOWN_MENU
    |		}
    |	}
    |	map = new google.maps.Map(document.getElementById(""map_canvas""), myOptions);
    |	drawRoute();
	|}
    |
	|window.onload = onLoad;  
    |
	|</SCRIPT>
	|
	|</HEAD>
	|<body onload=""onLoad()"">
	|  <div id=""map_canvas"" style=""width:100%; height:100%""></div>
	|</body>
	|</html>";
	
	ПолеHTMLДокументаКарта = Текст;	
	ОбновитьКарту = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ГруппаДанныхПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если Элемент.ТекущаяСтраница.Имя = "ГруппаКарта" Тогда
		ВывестиHTMLКарты();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	СтрокаСохраненныхНастроек = ПолучитьXML(Компоновщик.ПользовательскиеНастройки);
	Настройки["СтрокаСохраненныхНастроек"] = СтрокаСохраненныхНастроек;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	СтрокаСохраненныхНастроек = Настройки["СтрокаСохраненныхНастроек"];
	Попытка
		Компоновщик.ЗагрузитьПользовательскиеНастройки(ПолучитьНастройкиИзXML(СтрокаСохраненныхНастроек));
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКарту(Команда)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.ДобавитьСтроку(ПолеHTMLДокументаКарта);
    ТекстовыйДокумент.Записать("c:\Temp\Карта.html");
	
КонецПроцедуры

КаталогОбмена = БПАГ.БПАГПолучитьНастройку("1СКаталогОбмена");
