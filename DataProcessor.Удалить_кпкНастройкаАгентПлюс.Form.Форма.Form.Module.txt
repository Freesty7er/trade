&НаСервере
Перем ДопНастройкиАгентаСоответствие;
Перем ТабНастроекМТ;
Перем тзНастройки;
Перем тзДеревоНастроек;


&НаСервере
Функция ДесЧислоВДвоичнЧисло(Знач Пар)
	
	Рез = "";
	Если ТипЗнч(Пар) <> Тип("Число") Тогда
		Пар = 0;
	КонецЕсли;
	
	Делитель = 2147483648; 
	Пока Делитель >= 1 Цикл
		ЦелЧастное = Цел(Пар / Делитель);
		Пар = Пар - ЦелЧастное * Делитель;
		Делитель = Делитель / 2;
		Рез = Рез + Строка(ЦелЧастное);
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции //ДесЧислоВДвоичнЧисло()

&НаСервере
Функция ПолучитьБит(ДвЧисло, НомерБита)
	Длина = СтрДлина(ДвЧисло);
	Если (НомерБита < 0) Или ((Длина - 1) < НомерБита) Тогда
		Возврат 0;
	Иначе
		Возврат Число(Сред(ДвЧисло, Длина - НомерБита, 1));
	КонецЕсли;
КонецФункции //ПолучитьБит()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Агент") Тогда
		Объект.Агент = Параметры.Агент;
	Иначе
		Отказ = Истина;
	КонецЕсли;

	ТекАгент = Объект.Агент;
	
	ПутьКФайлуЗапуска20 = "\Program Files\AgentP2\aplbrs.exe";
	КаталогУстановки20  = "\Program Files\AgentP2\";
	ПапкаОбмена20 		= "\Program Files\AgentP2\exchange\";
	ПапкаКартинок		= "/sdcard/AgentPlusPictures/";
	
	//тзНастройки = Новый ТаблицаЗначений;
	//тзНастройки.Колонки.Добавить("Настройка");
	//тзНастройки.Колонки.Добавить("Путь");
	//тзНастройки.Колонки.Добавить("Ключ");
	//тзНастройки.Колонки.Добавить("Название");
	//тзНастройки.Колонки.Добавить("Значение");
	//тзНастройки.Колонки.Добавить("ЗначениеПоУмолчанию");
	//тзНастройки.Колонки.Добавить("ПризнакДляРеестра");
	//тзНастройки.Колонки.Добавить("ЗависимаяНастройка");
	//тзНастройки.Колонки.Добавить("Инверсия");
	
	ИнициализироватьТаблицуНастроекДляМТ();
	
	ИнициализироватьНачальныеНастройки();	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуТабНастроекМТ(Имя, Идентификатор = "", ИспМТ = Ложь)  	
	
	СтрокаНастроек = ТабНастроекМТ.Добавить();
	СтрокаНастроек.Имя   		 = Имя;
	СтрокаНастроек.ИспМТ 		 = ИспМТ;
	Если Идентификатор = "" Тогда
		СтрокаНастроек.Идентификатор = Имя;
	Иначе
		СтрокаНастроек.Идентификатор = Идентификатор;
	КонецЕсли;
	
КонецПроцедуры //ДобавитьСтрокуТабНастроекМТ

&НаСервере
Процедура ИнициализироватьТаблицуНастроекДляМТ()
	
	ТабНастроекМТ = Новый ТаблицаЗначений;
	
	ТабНастроекМТ.Колонки.Добавить("Имя");
	ТабНастроекМТ.Колонки.Добавить("ИспМТ");
	ТабНастроекМТ.Колонки.Добавить("Идентификатор");
	
	ДобавитьСтрокуТабНастроекМТ("Общие");
	ДобавитьСтрокуТабНастроекМТ("Справочники");
	ДобавитьСтрокуТабНастроекМТ("Каталог товаров");
	ДобавитьСтрокуТабНастроекМТ("Клиенты, торговые точки");
	ДобавитьСтрокуТабНастроекМТ("Документы");
	ДобавитьСтрокуТабНастроекМТ("GPS");
	ДобавитьСтрокуТабНастроекМТ("Общие настройки GPS");
	ДобавитьСтрокуТабНастроекМТ("Настройки для трекинга");	
	ДобавитьСтрокуТабНастроекМТ("Заявка");
	ДобавитьСтрокуТабНастроекМТ("Обмен данными");
	//ДобавитьСтрокуТабНастроекМТ("Агент Плюс СОД");
	ДобавитьСтрокуТабНастроекМТ("НастройкиПродажи");
	ДобавитьСтрокуТабНастроекМТ("Приходный кассовый ордер");
	ДобавитьСтрокуТабНастроекМТ("Маршруты");
	ДобавитьСтрокуТабНастроекМТ("Мерчендайзинг");	
	//ДобавитьСтрокуТабНастроекМТ("APSAddress");
	//ДобавитьСтрокуТабНастроекМТ("UseArchives");	
	//ДобавитьСтрокуТабНастроекМТ("Method");
	ДобавитьСтрокуТабНастроекМТ("FilePath");
	ДобавитьСтрокуТабНастроекМТ("PicCatalog", 			"344436bc-3e1b-42d7-b453-496d61eae2d8", Истина);
	
	// Общие настройки
	ДобавитьСтрокуТабНастроекМТ("AgentID", 				"79c698db-3c55-465e-acfe-4741acdd5655");
	ДобавитьСтрокуТабНастроекМТ("Agent",   				"a2e1cc68-0624-45a6-8057-efd35259b9fe");
	ДобавитьСтрокуТабНастроекМТ("PPCID", 				"90c4c934-85a6-449e-a519-d5ae44da667b");
	ДобавитьСтрокуТабНастроекМТ("OptPwd", 				"ddedce5e-7a69-4858-bc89-f48e3e44a8ef");
	// Настройки справочников
	ДобавитьСтрокуТабНастроекМТ("FlagsClientsCreate", 	"73355324-f463-428a-91d2-2868dd35a168");
	ДобавитьСтрокуТабНастроекМТ("FlagsClientsEdit", 	"5616d1e9-bfa3-40fc-baba-852d16b5e774");
	ДобавитьСтрокуТабНастроекМТ("FlagsTPointsCreate", 	"b69ec9a6-565f-4e3e-844f-0060c5975fed");
	ДобавитьСтрокуТабНастроекМТ("FlagsTPointsEdit", 	"f52e3c06-48d6-4809-ae16-13c61e78eabd");
	ДобавитьСтрокуТабНастроекМТ("FlagsContactsCreate", 	"abc5b73a-f477-406b-89c5-e9aab3b4f1e1", Истина);
	ДобавитьСтрокуТабНастроекМТ("FlagsContactsEdit", 	"36767a2e-4df5-43b5-9813-893bf6f65a7f", Истина);
	// Заявки
	ДобавитьСтрокуТабНастроекМТ("OrderEditPrice", 		"690b5736-e1b9-41ef-a132-807acad31687");
	ДобавитьСтрокуТабНастроекМТ("EditDiscountOrder", 	"4a6b2c4c-445b-4985-a509-10fb1a2d57ce");
	ДобавитьСтрокуТабНастроекМТ("OrderNoChangeRests", 	"072ec906-bd0b-4b75-afa8-bece1434f1eb");	
	ДобавитьСтрокуТабНастроекМТ("OrderNoNegRests", 		"711587ed-1589-4e69-a7f7-09ade3fb5888");
	ДобавитьСтрокуТабНастроекМТ("FlagsShowWeight", 		"0de4a49f-691b-4910-95bf-6f25a281d9e1");
	ДобавитьСтрокуТабНастроекМТ("MainRecvSelFirm", 		"dc63708b-9257-48dc-9f16-d9846ac7d5fe");
	ДобавитьСтрокуТабНастроекМТ("MainRecvSelClient", 	"b8396958-7d13-4633-a6c3-c8d639cbf9e6");
	ДобавитьСтрокуТабНастроекМТ("MainRecvSelTPoint", 	"f984e263-b838-489e-a1d4-f775db7ede98");
	ДобавитьСтрокуТабНастроекМТ("MainRecvContact", 		"56649629-21e4-4116-aec6-e794f12c62fe", Истина);
	ДобавитьСтрокуТабНастроекМТ("EditConfirmDocs", 		"8deb5086-fb67-436e-a5f7-5118ce0dc09e", Истина);
	ДобавитьСтрокуТабНастроекМТ("HideStoreList",		"018dd98c-d617-4d35-b5c0-efdabf6b37a2", Истина); 
	ДобавитьСтрокуТабНастроекМТ("UseCodes", 			"d902c64a-9a7a-40d1-8067-e4bb6b309534");
	ДобавитьСтрокуТабНастроекМТ("DelayDelivery",		"b0fddb94-caf7-4003-b2fd-df15bd2f1f1b", Истина);
	// Маршруты
	ДобавитьСтрокуТабНастроекМТ("FlagsUseRoutes", 		"99eeeef3-015a-4727-8166-65f2dcceab29");
	ДобавитьСтрокуТабНастроекМТ("FlagsPriority", 		"8e0a70a1-476c-4c7b-a8a7-0c9ce334fc68");
	// Мерчендайзинг
	ДобавитьСтрокуТабНастроекМТ("FlagsMerchCount", 		"ec1c050f-9183-4cf8-9a40-8546c8617ebb");
	ДобавитьСтрокуТабНастроекМТ("FlagsMerchPrice", 		"aeddb719-eb7a-493e-b80e-ee2d63e76fe5");
	ДобавитьСтрокуТабНастроекМТ("FlagsMerchEdit", 		"68524bcf-b992-4896-8a91-44ee31498831");
	ДобавитьСтрокуТабНастроекМТ("SelGoodsDsblEdit", 	"d2dd4509-e164-4e6c-a0b2-c46b5ca0397d");
	ДобавитьСтрокуТабНастроекМТ("AutoMerch", 			"a86959b3-ed83-44d8-b457-df8dfea9efdd", Истина);
	//ДобавитьСтрокуТабНастроекМТ("UseMerchInOrder", 		"4f409d16-f5cb-487f-b67b-2dbb45382b45", Истина);
	//Общие настройки документов		
	ДобавитьСтрокуТабНастроекМТ("DocsSalePodbor", 		"c64dac8a-2fbc-40bf-bf49-143398aaac9a");
	ДобавитьСтрокуТабНастроекМТ("DocsSaleAskAmount", 	"32cd846c-cafa-4006-bc05-ef2cd135e2ea");
	ДобавитьСтрокуТабНастроекМТ("DocsSaleAmInWindow", 	"138f9a6c-7f96-4136-9fbc-0663476bc094");
	ДобавитьСтрокуТабНастроекМТ("NotEditPriceType",		"0deef076-ff1f-4e4d-acb5-8344be0281a1", Истина);
	ДобавитьСтрокуТабНастроекМТ("AskChangePrice",	 	"6d4c184b-810d-4c23-ba6e-fb7e03b48812", Истина);	
	ДобавитьСтрокуТабНастроекМТ("UseComments",		 	"16d90b81-6ba0-4e72-a471-4350213b934e");
	ДобавитьСтрокуТабНастроекМТ("EditDocData",		 	"faf41508-ab25-4e1b-9bbd-f80634a3d264", Истина);
	ДобавитьСтрокуТабНастроекМТ("UseDiscountLimits",	"5c0be27d-7b90-4e9c-89fd-1d1e5c42c944");
	//ДобавитьСтрокуТабНастроекМТ("DocsSaleShowAm", 		"4a8d0b37-f157-48db-a77b-aaa3bf2daea9");	
	
	// Касса
	ДобавитьСтрокуТабНастроекМТ("CashChooseDoc", 		"ccd3f25e-a29b-419f-b8a2-d58e380efae2");
	ДобавитьСтрокуТабНастроекМТ("CashCheckSum", 		"ef7c73d2-d745-4e04-a5f1-afcbbcb72f05");
	// GPS
	ДобавитьСтрокуТабНастроекМТ("UseGPS", 				"e8dca437-fa0d-4f92-b7b8-4a7a162638c5"); 
	// Настройки GPS-трекинга		
	ДобавитьСтрокуТабНастроекМТ("WriteTrack",    		"6e7183cc-abf6-4b18-af75-f4d851551fd4");
	ДобавитьСтрокуТабНастроекМТ("UseSyncTimeMT", 		"c6b9563f-947a-46c2-82dd-d375e103317d", Истина);                                                                  			
	ДобавитьСтрокуТабНастроекМТ("WriteSpeed",    		"dd7cde5e-3b09-4fa5-809b-529e8bbfb929", Истина);	
	ДобавитьСтрокуТабНастроекМТ("Schedule",      		"", Истина);
	ДобавитьСтрокуТабНастроекМТ("AutoSend",    			"6517da49-a145-43a7-8730-a3e9978e437b", Ложь);
	ДобавитьСтрокуТабНастроекМТ("AutoSendInterval",		"54e2a0b0-4f94-499d-875a-9d2ee7634da9", 300);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьНачальныеНастройки()
	
	Если ЗначениеЗаполнено(ТекАгент) Тогда		
		СведенияАгентов = РегистрыСведений.кпкСведенияАгента.СоздатьМенеджерЗаписи();
		СведенияАгентов.Объект = ТекАгент;
		СведенияАгентов.Прочитать();
		Если СведенияАгентов.Выбран() Тогда
			ДопНастройкиАгентаСоответствие = СведенияАгентов.ДополнительныеНастройки.Получить();
			КПКИд = СведенияАгентов.КПК.Идентификатор;
		КонецЕсли;    		
	КонецЕсли;
		
	//КПКОбъект 	   = Новый("AddIn.CeDataExch");
	
	АПСервер 	   = СокрЛП(Константы.кпкАПССервер.Получить());
	КаталогДопИнфо = СокрЛП(ФайловыеФункцииПереопределяемый.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов);
	
	Если НЕ ПустаяСтрока(КаталогДопИнфо) Тогда
		КаталогДопИнфо = КаталогДопИнфо + "\";
	КонецЕсли;
	
	сзКонтрольДолга = Новый СписокЗначений;
	сзКонтрольДолга.Добавить(0, "Отсутствует");
	сзКонтрольДолга.Добавить(1, "По клиенту в целом");
	сзКонтрольДолга.Добавить(2, "По торговой точке");
	
	сзКодыТоваров = Новый СписокЗначений;
	сзКодыТоваров.Добавить(0, "Не используется");
	сзКодыТоваров.Добавить(1, "Выводить код");
	сзКодыТоваров.Добавить(2, "Выводить артикул");
	
	сзРежимПриемаДанных = Новый СписокЗначений;
	сзРежимПриемаДанных.Добавить(0, "Запрашивать разрешение у пользователя");
	сзРежимПриемаДанных.Добавить(1, "Использовать фоновый режим");
	сзРежимПриемаДанных.Добавить(2, "Не закрывать диалоговое окно");	
	
	сзПротоколыГПС	= Новый СписокЗначений;
	сзПротоколыГПС.Добавить("GpsLib.dll",      "GPS Windows Mobile");
	сзПротоколыГПС.Добавить("GpsProtocol.dll", "GPS NMEA Protocol");
		
	сзСпособыОбмена = Новый СписокЗначений;  	
	сзСпособыОбмена.Добавить(3, "Агент Плюс СОД");
	
	//ОбновитьСписокЗакладокЖурнала();
		
	//тзНастройки.Очистить();
	
	ВосстановитьИзФайла = Ложь;
	
	ФормированиеДерева();
	
	//УстановитьЗаголовокФормы();
	//
	//УстановитьДоступностьФормы(ВидМобильногоПриложения = ТипАгент15);
		
КонецПроцедуры //ИнициализироватьНастройки

&НаСервере
Функция ОпределитьТекНужноеЗначение(КлючНастройки)
	
	ТекНастройка = Неопределено;
	
	Если Не ДопНастройкиАгентаСоответствие = Неопределено Тогда
		ТекНастройка = ДопНастройкиАгентаСоответствие[КлючНастройки];
	КонецЕсли;
	
	Возврат ТекНастройка;
	
КонецФункции //ОпределитьТекНужноеЗначение

&НаСервере
Функция НастройкаДоступна(Ключ)
	
	НайденнаяСтрока = ТабНастроекМТ.Найти(Ключ, "Имя");
	
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции //НастройкаДоступна

&НаСервере
Процедура ДобавитьНастройкуВТаблицу(лДерево, Ключ, Название, Настройка, Путь, Подсказка, ЗначениеПоУмолчанию, ПризнакДляРеестра = 1, ДвФлаги = "", Бит = Неопределено, ЗависимаяНастройка = "", ТекЗначение = Неопределено, ИнвертироватьНастройку = Ложь, ЭтоГруппа = Ложь)
	
	Если Не НастройкаДоступна(Название) Тогда
		Возврат;
	КонецЕсли;
	
	лЗначение = Неопределено;
	
	ТекПуть = ПутьВРеестре + Путь;
	
	НайденнаяСтрока = ТабНастроекМТ.Найти(Название, "Имя"); 		
	Если Не НайденнаяСтрока = Неопределено Тогда
		ТекПуть = НайденнаяСтрока.Идентификатор;
	КонецЕсли;
	
	Если Не лДерево = Неопределено Тогда
		НовСтр = лДерево.Добавить();
		НовСтр.Путь 	 = ТекПуть;
		НовСтр.Ключ 	 = Ключ;  
		НовСтр.Название  = Название;  
		НовСтр.Настройка = Настройка;  
		НовСтр.Подсказка = Подсказка;  
		НовСтр.ЗначениеПоУмолчанию = ЗначениеПоУмолчанию;  
		НовСтр.ЭтоГруппа = ЭтоГруппа;  
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеПоУмолчанию) = Тип("Число") Тогда
		Попытка
			лЗначение = ?(лЗначение = "", 0, лЗначение);
			лЗначение = Число(лЗначение);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если (лЗначение = Неопределено) Тогда
		ТекЗнач = ЗначениеПоУмолчанию;  		
	Иначе
		ТекЗнач = лЗначение;
	КонецЕсли;	
	
	НужноеЗначение = ОпределитьТекНужноеЗначение(Название);
	Если НужноеЗначение = Неопределено Тогда
		НужноеЗначение = лЗначение;
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеПоУмолчанию) = Тип("Булево") Тогда
		ТекЗнач = ?(ТекЗнач = "", 0, ТекЗнач);
		НужноеЗначение = ОпределитьТекНужноеЗначение(Название);
		Если НужноеЗначение = Неопределено Тогда
			Попытка
				НужноеЗначение = ?(ИнвертироватьНастройку, Не Булево(ТекЗнач), Булево(ТекЗнач));  						
			Исключение
				НужноеЗначение = Ложь;			
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЗначениеПоУмолчанию) = Тип("СправочникСсылка.Агенты") Тогда		
		Стр = тзНастройки.Найти("AgentID", "Ключ");
		Если Не ЗначениеЗаполнено(ТекЗначение) Тогда
			ИдАгента = СокрЛП(Стр.Значение);	
		Иначе
			ИдАгента = Строка(ТекЗначение.УникальныйИдентификатор());
		КонецЕсли;
		
		Если Стр <> Неопределено Тогда
			ИдАгента = СокрЛП(Стр.Значение);
			Если ПустаяСтрока(ИдАгента) Тогда
				Агент = "";
			Иначе
				Агент = Справочники.Агенты.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдАгента));
				Если Агент.ПолучитьОбъект() = Неопределено Тогда
					Агент = "";
				КонецЕсли;
			КонецЕсли;
		Иначе
			Агент = "";
		КонецЕсли;
		
		НужноеЗначение = ОпределитьТекНужноеЗначение(Название);
		Если НужноеЗначение = Неопределено Тогда
			НужноеЗначение = Агент;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЗначениеПоУмолчанию) = Тип("СписокЗначений") Тогда  	
		Если лДерево = Неопределено Тогда
			НужноеЗначение = лЗначение;
		Иначе
			НовСтр.Список = ЗначениеПоУмолчанию;
			НужноеЗначение = ОпределитьТекНужноеЗначение(Название);
			Если НужноеЗначение = Неопределено Тогда
				Если (лЗначение = Неопределено) или ПустаяСтрока(лЗначение) Тогда  
					НужноеЗначение = ЗначениеПоУмолчанию.Получить(0).Значение;			
				Иначе     		
					НужноеЗначение = ?(Ключ = "GPSPluginDLL", лЗначение, Число(лЗначение));
					НайдЗначение = ЗначениеПоУмолчанию.НайтиПоЗначению(НужноеЗначение);
					Если НайдЗначение = Неопределено Тогда
						НужноеЗначение = ЗначениеПоУмолчанию.Получить(0).Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;		
	ИначеЕсли Ключ = "WorkDays" Тогда   
		НужноеЗначение = ОпределитьТекНужноеЗначение(Название);
		Если НужноеЗначение = Неопределено Тогда
			Попытка
				ДвоичнЧисло = ДесЧислоВДвоичнЧисло(Число(ТекЗнач));	
			Исключение
				НужноеЗначение = ЗначениеПоУмолчанию;
			КонецПопытки;
			СтруктураДней = Новый Структура("ПН,ВТ,СР,ЧТ,ПТ,СБ,ВС");		
			СтрДни = "";		
			Сч = 0;
			Для Каждого КлючСтр Из СтруктураДней Цикл
				ПарДн = ПолучитьБит(ДвоичнЧисло, Сч);
				Если ПарДн = 1 Тогда
					СтрДни = СтрДни + Строка(КлючСтр.Ключ) + ",";
				КонецЕсли;        		
				Сч = Сч + 1;
			КонецЦикла;		
			НужноеЗначение = Лев(СтрДни, СтрДлина(СтрДни)-1);
		КонецЕсли;
	ИначеЕсли Ключ = "WorkTime" Тогда
		НужноеЗначение = ОпределитьТекНужноеЗначение(Название);
		Если НужноеЗначение = Неопределено Тогда
			Попытка		
				МладшийРазряд = Цел(Число(ТекЗнач)/65536);
				СтаршийРазряд = Число(ТекЗнач) - МладшийРазряд*65536;
				
				ЧасыМл   = Цел(МладшийРазряд/60);
				МинутыМл = МладшийРазряд - 60*ЧасыМл;
				
				ЧасыСт   = Цел(СтаршийРазряд/60);
				МинутыСт = СтаршийРазряд - 60*ЧасыСт;
				
				СтрМинутыМл = ?(СтрДлина(МинутыМл)=2, Строка(МинутыМл), Лев("0" + Строка(МинутыМл), 2)); 
				СтрМинутыСт = ?(СтрДлина(МинутыСт)=2, Строка(МинутыСт), Лев("0" + Строка(МинутыСт), 2)); 
				
				НужноеЗначение = Строка(ЧасыМл) + ":" + СтрМинутыМл + "-" + Строка(ЧасыСт) + ":" + СтрМинутыСт;     						
			Исключение
				НужноеЗначение = ЗначениеПоУмолчанию; 
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли Ключ = "PPCID" Тогда 		
		Стр = тзНастройки.Найти("Agent", "Ключ");		
		НастройкиАгента = РегистрыСведений.кпкСведенияАгента.Получить(Новый Структура("Объект", Стр.Значение));			
		Если Не НастройкиАгента = Неопределено Тогда
			НужноеЗначение = НастройкиАгента.КПК.Идентификатор;								
		КонецЕсли;
	Иначе
		НужноеЗначение = ОпределитьТекНужноеЗначение(Название);
		Если НужноеЗначение = Неопределено Тогда
			Если ЗначениеЗаполнено(ТекЗначение) Тогда
				НужноеЗначение = ТекЗначение;
			Иначе
				Если ТипЗнч(ЗначениеПоУмолчанию) = Тип("СправочникСсылка.кпкНастройкиТрекинга") Тогда
					НужноеЗначение = ТекЗначение;								
				Иначе
					НужноеЗначение = ТекЗнач;
				КонецЕсли;
			КонецЕсли;				
		КонецЕсли;		
	КонецЕсли;
	
	Если Не лДерево = Неопределено Тогда
		Если ТипЗнч(ЗначениеПоУмолчанию) = Тип("СписокЗначений") Тогда
			НовСтр.Значение = ЗначениеПоУмолчанию.НайтиПоЗначению(НужноеЗначение);			
		Иначе
			НовСтр.Значение = НужноеЗначение;
		КонецЕсли;
	КонецЕсли;
	
	Если Путь = "\Documents\Sale" Тогда		
		НовСтрТЗ = тзНастройки.Найти(Ключ, "Ключ");		
		Если НовСтрТЗ = Неопределено Тогда 
			НовСтрТЗ = тзНастройки.Добавить();
		КонецЕсли;
		НовСтрТЗ.Ключ     			 = Ключ;
		НовСтрТЗ.Название 			 = Название;  
		НовСтрТЗ.Путь     		     = ПутьВРеестре + "\Documents\RSale";
		НовСтрТЗ.Значение 			 = НужноеЗначение;
		НовСтрТЗ.ПризнакДляРеестра   = ПризнакДляРеестра;
		НовСтрТЗ.Настройка 			 = Настройка;
		НовСтрТЗ.ЗначениеПоУмолчанию = ЗначениеПоУмолчанию;
		НовСтрТЗ.ЗависимаяНастройка  = ЗависимаяНастройка;
		НовСтрТЗ.Инверсия  			 = ИнвертироватьНастройку;
	КонецЕсли;
	
	НовСтрТЗ = тзНастройки.Найти(Ключ, "Ключ");		
	Если НовСтрТЗ = Неопределено Тогда 
		НовСтрТЗ = тзНастройки.Добавить();
	КонецЕсли;	
	НовСтрТЗ.Ключ      			 = Ключ;
	НовСтрТЗ.Название 			 = Название; 
	НовСтрТЗ.Путь      			 = ТекПуть;
	НовСтрТЗ.Настройка 			 = Настройка;
	НовСтрТЗ.ЗначениеПоУмолчанию = ЗначениеПоУмолчанию;
	НовСтрТЗ.ПризнакДляРеестра 	 = ПризнакДляРеестра;
	НовСтрТЗ.Значение 		     = НужноеЗначение;
	НовСтрТЗ.ЗависимаяНастройка  = ЗависимаяНастройка;
	НовСтрТЗ.Инверсия  			 = ИнвертироватьНастройку;
	
КонецПроцедуры //ДобавитьНастройкуВТаблицу()

&НаСервере
Функция ФормированиеДерева()
	
	ИдАгента = Строка(ТекАгент.УникальныйИдентификатор());
	
	тзНастройки = РеквизитФормыВЗначение("тзНастройки1");
	
	тзДеревоНастроек = РеквизитФормыВЗначение("ДеревоНастроек");
	тзДеревоНастроек.Строки.Очистить();
	
	// ГРУППА ОБЩИЕ НАСТРОЙКИ	
	ДобавитьНастройкуВТаблицу(тзДеревоНастроек.Строки, "Общие", "Общие", "Общие", "", "Общие настройки Агент+", "", 0, , , , , , Истина);
	
	//Возврат Истина;
	
	ТекРодитель = тзДеревоНастроек.Строки.Найти("Общие", "Ключ"); 
	
	ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "AgentID",  "AgentID",  "Идентификатор", 	   			 			  "", "Идентификатор агента", "", , , , , ИдАгента, , Истина);		
	ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "Agent",    "Agent",    "Агент", 			   			 			  "", "Наименование торгового агента",  Справочники.Агенты.ПустаяСсылка(), , , , , ТекАгент, , Истина);
	ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "PPCID",    "PPCID",    "Идентификатор КПК", 			 			  "", "Идентификатор КПК. Значение идентификатора в КПК не устанавливается", , , , , , ?(КПКИд = Неопределено, "", КПКИд), , Истина);
	ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "OptPwd",   "OptPwd",   "Пароль доступа к настройкам",              "", "Пароль доступа к настройкам в КПК", "");
	ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "TimeLock", "TimeLock", "Блокировать изменение системного времени", "", "Блокировать изменение системного времени агентом в КПК", Ложь);	
	
	ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "FullUse",  "FullUse",  "Режим ""Агент+ Инвент""", 				  "\Documents\Sale", "Режим Агент+ Инвент", Ложь);
	
	Стр = тзНастройки.Найти("AgentID", "Ключ");
	Если Не ЗначениеЗаполнено(ТекАгент) Тогда
		ТекАгент = Справочники.Агенты.ПустаяСсылка();	
		Если Стр <> Неопределено Тогда
			ИдАгента = СокрЛП(Стр.Значение);
			Если ЗначениеЗаполнено(ИдАгента) Тогда
				ТекАгент = Справочники.Агенты.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдАгента));						
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекАгент) Тогда
		НастройкиАгента = РегистрыСведений.кпкСведенияАгента.Получить(Новый Структура("Объект", ТекАгент));
		ПарольЗИП = НастройкиАгента.ПарольЗИП;
		//ФТППапка  = НастройкиАгента.ФТППапка;
		АПСПапка  = НастройкиАгента.АПСПапка;		
	Иначе
		НастройкиАгента = Новый Структура("Ассортимент, ПарольЗИП, ФТППапка, АПСПапка", "", "", "", "");
	КонецЕсли; 
	
	ИспШифрование = Константы.кпкШифроватьДанные.Получить();
	КриптоПароль  = Константы.кпкКриптоПароль.Получить();
	
	// ОБМЕН ДАННЫМИ
	////////////////
	ДобавитьНастройкуВТаблицу(тзДеревоНастроек.Строки, "Обмен данными", "Обмен данными", "Обмен данными", "", "Настройки обмена данными", "", 0, , , , , , Истина);	
	РодительОбмен = тзДеревоНастроек.Строки.Найти("Обмен данными", "Ключ");   
	Если РодительОбмен <> Неопределено Тогда
		ДобавитьНастройкуВТаблицу(РодительОбмен.Строки, "Method", 	"Method",   "Способ обмена", "\Exchange", "Способ обмена данными с КПК", сзСпособыОбмена);
		
		СтрПапка = ПапкаОбмена20;
		
		ДобавитьНастройкуВТаблицу(РодительОбмен.Строки, "FilePath", "FilePath", "Папка обмена",  "\Exchange", "Папка обмена данными в мобильном устройстве. По умолчанию """ + СтрПапка + """" 
																											  "Не рекомендуется изменять значение параметра без необходимости!", СтрПапка);
																											  
		ДобавитьНастройкуВТаблицу(РодительОбмен.Строки, "PicCatalog", "PicCatalog", "Папка картинок",  "\Exchange", "Папка хранения картинок и фотографий. По умолчанию """ + ПапкаКартинок + """", ПапкаКартинок);
		
		// Электронная почта	                                                	
		ДобавитьНастройкуВТаблицу(РодительОбмен.Строки, "Электронная почта", "Электронная почта", "Электронная почта", "", "Настройки для обмена через электронную почту", "", 0);	
		ТекРодитель = РодительОбмен.Строки.Найти("Электронная почта", "Ключ");   	  	
		Если ТекРодитель <> Неопределено Тогда 
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "EMail", "E-mail", "E-mail", "\Exchange", "Адрес электронной почты, используется только при обмене через e-mail", "");	
		КонецЕсли;
		
		//// ФТП 	
		//Сервер 		 = Константы.кпкФТПСервер.Получить();
		//Пользователь = Константы.кпкФТППользователь.Получить();
		//Пароль 	     = Константы.кпкФТППароль.Получить();
		
		//ДобавитьНастройкуВТаблицу(РодительОбмен.Строки, "FTP-Сервер", "FTP-Сервер", "FTP-Сервер", "\Exchange", "Настройки для обмена через FTP", "", 0);	
		//ТекРодитель = РодительОбмен.Строки.Найти("FTP-Сервер", "Ключ");   
		//Если ТекРодитель <> Неопределено Тогда  	
		//	ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "FtpAddress",  "FtpAddress",  "Сервер", 		 "\Exchange", "Адрес FTP-сервера Используется только при обмене через FTP", Сервер);	
		//	ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "FtpFolder",   "FtpFolder",   "Папка",  		 "\Exchange", "Папка на FTP-сервере, используется только при обмене через FTP", НастройкиАгента.ФТППапка);	                                                           
		//	ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "FtpLogin",    "FtpLogin", 	"Логин",  		 "\Exchange", "Логин для подключения к FTP-серверу, используется только при обмене через FTP", Пользователь);	
		//	ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "FtpPassword", "FtpPassword", "Пароль",        "\Exchange", "Пароль для подключения к FTP-серверу, используется только при обмене через FTP", Пароль);     	
		//	ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "FtpBufLen",   "FtpBufLen",   "Размер буфера", "\Exchange", "Размер буфера обмена, в байтах", 2048);	
		//КонецЕсли;
		
		// Агент+ Сервер   		
		ДобавитьНастройкуВТаблицу(РодительОбмен.Строки, "Агент Плюс СОД", "Агент Плюс СОД", "Агент Плюс СОД", "\Exchange", "Настройки службы ""Агент Плюс СОД""", "", 0, , , , , , Истина);	
		ТекРодитель = РодительОбмен.Строки.Найти("Агент Плюс СОД", "Ключ");   
		Если ТекРодитель <> Неопределено Тогда  	
			
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "APSAddress",   "APSAddress",   "Адрес сервера",       			  "\Exchange", "Сетевой адрес компьютера и порт (порт пишется через двоеточие после адреса), на котором запущена служба ""Агент Плюс СОД""", Объект.АПСервер);	
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "Behaviour",    "Behaviour",    "Режим приема ответных данных", 	  "\Exchange", "Режим приема ответных данных при выгрузке данных из КПК", сзРежимПриемаДанных);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "APSBlockSize", "APSBlockSize", "Размер блока передаваемых данных", "\Exchange", "Размер блока передаваемых данных из КПК в ЦБД, в байтах", 2048);
			
			// Дополнительные настройки обмена данными	
			ДобавитьНастройкуВТаблицу(РодительОбмен.Строки, "FlagsRC4",      "FlagsRC4",      "Использовать шифрование",               "\Exchange", "Включить/выключить дополнительное шифрование данных", ИспШифрование, 0, "Flags", 1);		
			ДобавитьНастройкуВТаблицу(РодительОбмен.Строки, "RC4Pwd",        "RC4Pwd",        "Крипто-пароль",              		   "\Exchange", "Пароль, используемый при шифровании файлов при обмене данными", КриптоПароль);		
			ДобавитьНастройкуВТаблицу(РодительОбмен.Строки, "FlagsUnicode",  "FlagsUnicode",  "Использовать кодировку Unicode",        "\Exchange", "Использовать при загрузке файла обмена кодировку Unicode", Ложь, 0, "Flags", 2);	
			ДобавитьНастройкуВТаблицу(РодительОбмен.Строки, "UseArchives",   "UseArchives",   "Использовать Zip-архивы", 	           "\Exchange", "Использовать Zip-архивирование файлов при обмене данными", Ложь);	                                                                       	
			ДобавитьНастройкуВТаблицу(РодительОбмен.Строки, "FlagsZIP",      "FlagsZIP",      "Применять пароль", 				   	   "\Exchange", "Применять пароль для Zip-архивов", Ложь, 0, "Flags", 0);
			ДобавитьНастройкуВТаблицу(РодительОбмен.Строки, "ZipPwd",        "ZipPwd",        "Пароль для zip-архива", 			   	   "\Exchange", "Пароль для защиты zip-архивов", ПарольЗИП);                                     	
			ДобавитьНастройкуВТаблицу(РодительОбмен.Строки, "GPRSTimeOut",   "GPRSTimeOut",   "GPRS тайм-аут", 					   	   "\Exchange", "Тайм-аут при соединении по GPRS", 45);                             	
			ДобавитьНастройкуВТаблицу(РодительОбмен.Строки, "FlagDocsBlock", "FlagDocsBlock", "Блокировать выгруженные документы",     "\Exchange", "Запрещать в КПК изменения выгруженных документов, которые были созданы и проведены пользователем", Ложь, 1, "CommonFlags", 0);		
			ДобавитьНастройкуВТаблицу(РодительОбмен.Строки, "ConfigInMenu",  "ConfigInMenu",  "Выбор настроек обмена в меню ""Файл""", "\Exchange", "Выбирать конфигурацию настройки обмена в меню ""Файл""", Ложь, 1);	
			
			ДобавитьНастройкуВТаблицу(РодительОбмен.Строки, "UploadAllDatabases",   "UploadAllDatabases",   "Выгрузка данных из всех БД", 	  "\Exchange", "Выгружать данные из всех БД КПК в один файл", Ложь, 0, "Flags", 3);
			ДобавитьНастройкуВТаблицу(РодительОбмен.Строки, "DisconnectConnection", "DisconnectConnection", "Разрывать соединение", 	  	  "\Exchange", "Разрывать GPRS-соединение после проведения обмена данными", Ложь, 0, "Flags", 4);
			ДобавитьНастройкуВТаблицу(РодительОбмен.Строки, "NoUploadPhotos", 	    "NoUploadPhotos",       "Не выгружать фотографии из КПК", "\Exchange", "Не выгружать фотографии, созданные агентом в КПК в ЦБД", Ложь, 0, "Flags", 5);
		КонецЕсли;
	КонецЕсли; 	
	/////////////////////
	// ОБМЕН ДАННЫМИ
	
	
	//// СПРАВОЧНИКИ  	
	ДобавитьНастройкуВТаблицу(тзДеревоНастроек.Строки, "Справочники", "Справочники", "Справочники", "", "Настройки для справочников", "", 0, , , , , , Истина);	
	РодительСпр = тзДеревоНастроек.Строки.Найти("Справочники", "Ключ"); 
	Если РодительСпр <> Неопределено Тогда  	
		// Каталог товаров	
		ДобавитьНастройкуВТаблицу(РодительСпр.Строки, "Каталог товаров", "Каталог товаров", "Каталог товаров", "", "Настройки для справочника товаров", "", 0, , , , , , Истина);	
		ТекРодитель = РодительСпр.Строки.Найти("Каталог товаров", "Ключ");   
		Если ТекРодитель <> Неопределено Тогда 
			// Флаги настроек для товаров		
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "FlagsOrder",       		"FlagsOrder", 			   "Порядок товаров как в файле", 		 			  "\PriceList", "Показывать в каталоге товары в таком порядке, как они следуют" + 
																											   " в файле загрузки данных в КПК", 					    Ложь, 0, "Flags", 0);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "FlagsComment",     		"FlagsComment", 		   "Использовать комментарии", 		 			 	  "\PriceList", "Выводить в каталоге товаров комментарий к текущему товару", 		    Ложь, 0, "Flags", 1);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "FlagsName2Str",    		"FlagsName2Str",		   "Наименование товаров в две строки", 			  "\PriceList", "Показывать в каталоге наименование текущего товара в двух строках", 	    Ложь, 0, "Flags", 2);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "FlagsPriceCount",  		"FlagsPriceCount", 		   "Показывать колонку ""Количество""", 			  "\PriceList", "Показывать в каталоге колонку количества товара, введенного в документ",   Ложь, 0, "Flags", 3);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "FlagsPriceCreate", 		"FlagsPriceCreate",		   "Разрешить создание товаров",        			  "\PriceList", "Разрешить в КПК создание новых товаров", 				    Ложь, 0, "Flags", 4);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "FlagsPriceEdit", 	    "FlagsPriceEdit",		   "Разрешить редактирование товаров",  			  "\PriceList", "Разрешить в КПК редактирование товаров", 			 	    Ложь, 0, "Flags", 5);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "FlagsPriceEditPrice",	"FlagsPriceEditPrice",	   "Разрешить редактирование цен",      			  "\PriceList", "Разрешить в КПК редактировать цены в каталоге товаров", 		    Ложь, 0, "Flags", 6);	
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "FlagsPriceGroupSort", 	"FlagsPriceGroupSort",	   "Группы в порядке загрузки",         			  "\PriceList", "Сортировать группы товаров в порядке их загрузки из файла обмена данными", Ложь, 0, "Flags", 7);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "FlagsPriceHideRest", 	"FlagsPriceHideRest",	   "Скрывать колонку остатков товаров", 			  "\PriceList", "Скрывать колонку остатков товаров при подборе товаров в документы", 	    Ложь, 0, "Flags", 8);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "FlagsPriceSalesHistory", "FlagsPriceSalesHistory",  "История продаж отдельной строкой",  			  "\PriceList", "Выводить данные по истории продаж текущего товара" + 
																											   " в информационном поле отдельной строкой", 				    Ложь, 0, "Flags", 9);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "FlagsPriceStockHistory", "FlagsPriceStockHistory",  "История остатков отдельной строкой", 			  "\PriceList", "Выводить данные по истории остатков/мерчендайзинга " + 
																											   " текущего товара в информационном поле отдельной строкой", 		    Ложь, 0, "Flags", 10);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "FlagsPriceStar", 		"FlagsPriceStar",		   "Выводить остатки знаками ""*""",     			  "\PriceList", "Выводить остатки товаров в каталоге знаками ""*""", 			    Ложь, 0, "Flags", 11);	
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "FlagsPriceUseChar",		"FlagsPriceUseChar",	   "Использовать характеристики товаров",    		  "\PriceList", "Использовать характеристики/серии товаров", 				    Ложь, 0, "Flags", 12);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "FlagsPriceShowChar", 	"FlagsPriceShowChar", 	   "Всегда разворачивать характеристики",    		  "\PriceList", "Всегда разворачивать дерево характеристик/серий в режиме подбора товаров", Ложь, 0, "Flags", 13);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "FlagsPriceCloseChar", 	"FlagsPriceCloseChar",	   "Сворачивать характеристики после выбора товара",  "\PriceList", "Сворачивать характеристики товаров после выбора позиции" + 
																											   " номенклатуры в режиме подбора", 					    Ложь, 0, "Flags", 14);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "FlagsShowRat", 			"FlagsShowRat",		       "Показывать колонку ""Рейтинг""",     			  "\PriceList", "Показывать колонку ""Рейтинг"" при подборе", 			    	    Ложь, 0, "Flags", 15);																																											 
			
			
			//																																								
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "UseCodes", 				"UseCodes",				   "Отображение кодов товаров",    				  	  "\PriceList", "Режим отображения кодов товаров", сзКодыТоваров);
			
			// Штрих-коды
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "FlagsBarcodesAdd", 		"FlagsBarcodesAdd",		   "Разрешить добавление штрих-кодов",  			  "\Barcodes",  "Разрешить в КПК добавлять штрих-коды товаров", Ложь, 0, "Flags", 0);
		КонецЕсли;
		
		// Клиенты и торговые точки  	
		ДобавитьНастройкуВТаблицу(РодительСпр.Строки, "Клиенты, торговые точки", "Клиенты, торговые точки", "Клиенты, торговые точки", "", "Настройки для справочников клиентов и торговых точек", "", 0, , , , , , Истина);	
		ТекРодитель = РодительСпр.Строки.Найти("Клиенты, торговые точки", "Ключ");   
		Если ТекРодитель <> Неопределено Тогда 	
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "FlagsClientsCreate",	"FlagsClientsCreate", "Разрешить создание клиентов", 	   				  "\Clients",   "Разрешить создание новых клиентов", 	   	     Ложь, 0, "Flags", 0);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "FlagsClientsEdit", 	"FlagsClientsEdit",   "Разрешить редактирование клиентов", 	   			  "\Clients",   "Разрешить в КПК редактирование клиентов", 	     Ложь, 0, "Flags", 1);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "SortClients",        "SortClients", 	      "Cортировать список клиентов как в файле выгрузки", "\Clients",   "Cортировать список клиентов в КПК в том порядке," +
			" как они следуют в файле выгрузки", 		     Ложь, 0, "Flags", 2);
			
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "FlagsTPointsCreate", "FlagsTPointsCreate", "Разрешить создание торговых точек", 	   			  "\TPoints",   "Разрешить в КПК создание новых торговых точек", Ложь, 0, "Flags", 0);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "FlagsTPointsEdit", 	"FlagsTPointsEdit",   "Разрешить редактирование торговых точек", 		  "\TPoints",   "Разрешить в КПК редактирование торговых точек", Ложь, 0, "Flags", 1);	
			
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "FlagsContactsCreate", "FlagsContactsCreate", "Разрешить создание договоров", 	   			  "\Contacts",   "Разрешить в КПК создание новых договоров", Ложь, 0, "Flags", 0);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "FlagsContactsEdit", 	 "FlagsContactsEdit",   "Разрешить редактирование договоров", 			  "\Contacts",   "Разрешить в КПК редактирование договоров", Ложь, 0, "Flags", 1);
			
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "TpAddrLines2",       "TpAddrLines2",       "Адрес в две строки",  	  				  		  "\Documents", "Отображать адрес клиентов/торговых точек в две строки", Ложь);
		КонецЕсли;
	КонецЕсли;
	// СПРАВОЧНИКИ
	///////////////   	
	
	
	//// ДОКУМЕНТЫ
	
	ДобавитьНастройкуВТаблицу(тзДеревоНастроек.Строки, "Документы", "Документы", "Документы", "", "Настройки для документов", "", 0, , , , , , Истина);	
	РодительДок = тзДеревоНастроек.Строки.Найти("Документы", "Ключ");   
	Если РодительДок <> Неопределено Тогда 
		// Заявки	
		ДобавитьНастройкуВТаблицу(РодительДок.Строки, "Заявка", "Заявка", "Заявка", "", "Настройки для документа ""Заявка""", "", 0, , , , , , Истина);
		ТекРодитель = РодительДок.Строки.Найти("Заявка", "Ключ"); 
		Если ТекРодитель <> Неопределено Тогда 
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "OrderEditPrice", 	"OrderEditPrice",	  "Разрешить редактировать цены",     "", "Разрешить редактирование цены", Ложь);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "VrfTimeDelivery", 	"VrfTimeDelivery",	  "Проверять время доставки", 	      "", "Проверять время доставки", Ложь);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "ControlRestsOnSel", 	"ControlRestsOnSel",  "Проверять остаток при подборе",    "", "Проверять остаток при записи документа", Ложь);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "EditDiscount",       "EditDiscountOrder",  "Разрешить изменять скидку", 		  "", "Разрешить изменение скидки в документе", Ложь);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "OrderControlMinAmt", "OrderControlMinAmt", "Проверять минимальное количество", "", "Перед проведением документа проверять минимальное количество товара в документе", Ложь);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "OrderNoChangeRests", "OrderNoChangeRests", "Не изменять остатки", 		      "", "При проведении/отмене проведения документа не изменять остатки товаров в КПК", Ложь);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "OrderNoNegRests",    "OrderNoNegRests",    "Запретить отрицательные остатки",  "", "Запретить отрицательные остатки при проведении заявок в КПК", Ложь, 1, "", Неопределено, "", Истина);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "DelayDelivery",    	"DelayDelivery",      "Отсрочка доставки",				  "", "Количество дней отсрочки доставки заказа", 0);
		КонецЕсли;
		// ПКО	
		ДобавитьНастройкуВТаблицу(РодительДок.Строки, "Приходный кассовый ордер", "Приходный кассовый ордер", "Приходный кассовый ордер", "", "Настройки для документа ""Приходный кассовый ордер""", "", 0, , , , , , Истина);
		ТекРодитель = РодительДок.Строки.Найти("Приходный кассовый ордер", "Ключ"); 
		Если ТекРодитель <> Неопределено Тогда 
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "CashChooseDoc", "CashChooseDoc",	"Указывать документ оплаты", "\Documents\Cash", "Запрет создания ПКО без указания документа оплаты", 				    Ложь, 0, "Flags", 0);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "CashCheckSum",  "CashCheckSum",  "Проверять сумму оплаты",    "\Documents\Cash", "Сверять сумму оплаты с суммой оплачиваемого документа. Если сумма " +
			"оплаты превысит сумму документа оплаты, то ПКО записан не будет", 	    Ложь, 0, "Flags", 1);
		КонецЕсли;
		// Мерчендайзинг
		ДобавитьНастройкуВТаблицу(РодительДок.Строки, "Мерчендайзинг", "Мерчендайзинг", "Мерчендайзинг", "", "Настройки для документа ""Мерчендайзинг""", "", 0, , , , , , Истина);
		ТекРодитель = РодительДок.Строки.Найти("Мерчендайзинг", "Ключ"); 
		Если ТекРодитель <> Неопределено Тогда 	
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "FlagsMerchCount", 	    "FlagsMerchCount",	 	  "Запрашивать количество", 	 "\Documents\Merch", "Запрашивать при подборе товара количество", Ложь, 0, "SelGoodsMode", 0);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "FlagsMerchPrice", 	    "FlagsMerchPrice",  	  "Запрашивать цену", 	  	     "\Documents\Merch", "Запрашивать при подборе товара цену", Ложь, 0, "SelGoodsMode", 1);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "FlagsMerchPriceFromCat", "FlagsMerchPriceFromCat", "Брать цены из каталога",      "\Documents\Merch", "При подборе товаров подставлять " + 
			"текущие цены товаров из каталога (по аналогии, как в документах ""Заявка"")", Ложь, 0, "SelGoodsMode", 2);																			
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "FlagsMerchEdit", 	    "FlagsMerchEdit",   	  "Изменять режим подбора", 	 "\Documents\Merch", "Разрешить изменять режим подбора", Ложь, 0, "SelGoodsMode", 3);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "SelGoodsDsblEdit", 		"SelGoodsDsblEdit", 	  "Редактируемый мерчендайзинг", "\Documents\Merch", "При подборе товаров в документы, ссылающиеся на документ ""Мерчендайзинг"", колонка ""Мерчендайзинг""" + 
			"в окне подбора становится редактируемой. Т.е. подбор проводится одновременно в два документа", Ложь, 1, "", Неопределено, "", Истина);
			//ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "UseMerchInOrder",		"UseMerchInOrder",	   	  "Создание мерчендайзинга из заказа", 	 	 "\Documents\Merch", "Создавать документ мерчендайзинга из заказа", Ложь, Неопределено, "", Ложь);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "AutoMerch",		 	    "AutoMerch",		   	  "Создавать мерчендайзинг автоматически", 	 "\Documents\Merch", "Создавать автоматически документ мерчендайзинга на основании других документов", Ложь, Неопределено, "", Ложь);
		КонецЕсли;
		// Документ Реализация	
		ДобавитьНастройкуВТаблицу(РодительДок.Строки, "Реализация", "Реализация", "Реализация (Агент+ Инвент)", "", "Настройки для документа ""Реализация"" и ""Реализация Розница""", "", 0, , , , , , Истина);	
		ТекРодитель = РодительДок.Строки.Найти("Реализация", "Ключ");
		Если ТекРодитель <> Неопределено Тогда 
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "EditPrice", 	      "EditPrice",        "Разрешить редактирование цены",     "\Documents\Sale", "Разрешить изменение цены в документе", Ложь);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "EditDiscount",     "EditDiscountSale", "Разрешить изменять скидку",         "\Documents\Sale", "Разрешить пользователю КПК изменять скидку в документе", Ложь);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "ControlMinAmt", 	  "ControlMinAmt",    "Проверять минимальное количество",  "\Documents\Sale", "Перед проведением документа проверять минимальное количество товара в документе", Ложь);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "EnableNegRests",	  "EnableNegRests",   "Разрешить отрицательные остатки",   "\Documents\Sale", "При проведении документа не контролировать отрицательные остатки товаров", Ложь);
		КонецЕсли;
		// Документ Поступления
		ДобавитьНастройкуВТаблицу(РодительДок.Строки, "Поступление", "Поступление", "Поступление", "", "Настройки для документа ""Поступление""", "", 0, , , , , , Истина);	
		ТекРодитель = РодительДок.Строки.Найти("Поступление", "Ключ"); 
		Если ТекРодитель <> Неопределено Тогда 	
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "EditPrice",   "EditPriceAr", "Разрешить редактировать цены",  "\Documents\Arrival", "Разрешить редактировать цены в строках документа",  Ложь);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "EditSum",     "EditSum",     "Разрешить редактировать суммы", "\Documents\Arrival", "Разрешить редактировать суммы в строках документа", Ложь);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "ControlDebt", "ControlDebt", "Контроль долга", 		   	     "\Documents\Arrival", "При проведении документа контролировать не превышает " +
			"ли сумма документа размер задолженности клиента или торговой точки", сзКонтрольДолга);
		КонецЕсли;
		// Общие настройки для документов продажи
		ДобавитьНастройкуВТаблицу(РодительДок.Строки, "НастройкиПродажи", "НастройкиПродажи", "Настройки для документов продаж", "", "Общие настройки для документов продаж", "", 0, , , , , , Истина);	
		ТекРодитель = РодительДок.Строки.Найти("НастройкиПродажи", "Ключ"); 
		Если ТекРодитель <> Неопределено Тогда 
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "DocsSalePodbor",     "DocsSalePodbor",     "Разрешить изменять режим подбора",       "\Documents", "Разрешить изменять режим подбора в документах продаж",		     Ложь, 0, "SelGoodsMode", 0);	
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "DocsSaleAskAmount",  "DocsSaleAskAmount",  "Запрашивать количество мерчендайзинга",  "\Documents", "Запрашивать количество мерчендайзинга в окне подбора товаров " + 
																									  "(только если документ продажи ссылается на документ мерчендайзинга)", Ложь, 0, "SelGoodsMode", 1);																																		
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "DocsSaleAmInWindow", "DocsSaleAmInWindow", "Количество мерчендайзинга в одном окне", "\Documents", "В окне ввода количества товара запрашивать количество мерчендайзинга", 	     Ложь, 0, "SelGoodsMode", 2);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "DocsSaleShowAm", 	"DocsSaleShowAm",     "Показывать рекомендованное количество",  "\Documents", "В окне ввода количества товара показывать рекомендованное количество", 	     Ложь, 0, "SelGoodsMode", 3);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "NotEditPriceType",  	"NotEditPriceType",   "Запретить изменение типа цены в документе", "", "Запретить изменение типа цены в документе", Ложь);
			//ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "UseDiscountLimits", 	"UseDiscountLimits",  "Использовать ограничение скидки",		"\Documents", "Использовать ограничение скидки", 	     Ложь, 0,);
		КонецЕсли;
		// Настройки для всех документов
		ДобавитьНастройкуВТаблицу(РодительДок.Строки, "UseGdsComments",     "UseGdsComments",     "Отображать комментарии к товарам",  	   "\Documents", "Во всех документах в табличной части показывать комментарий к текущему товару", Ложь);	
		ДобавитьНастройкуВТаблицу(РодительДок.Строки, "GdsNamesLines2",     "GdsNamesLines2", 	  "Наименование товаров в две строки",     "\Documents", "Во всех документов в табличной части показывать наименование текущего товара в две строки", Ложь);	
		ДобавитьНастройкуВТаблицу(РодительДок.Строки, "UseSalesHist",       "UseSalesHist",		  "Отображать историю продаж",  		   "\Documents", "Во всех документов в табличной части показывать историю продаж текущего товара", Ложь);	
		ДобавитьНастройкуВТаблицу(РодительДок.Строки, "MainRecvSelFirm",    "MainRecvSelFirm",	  "Проверять выбор фирмы",  			   "\Documents", "Не проводить документы, у которых не выбрана фирма", 	    Ложь, 0, "MainRecvSel", 0);                   	
		ДобавитьНастройкуВТаблицу(РодительДок.Строки, "MainRecvSelClient",  "MainRecvSelClient",  "Проверять выбор клиента",  			   "\Documents", "Не проводить документы, у которых не выбран клиент", 	    Ложь, 0, "MainRecvSel", 1);               
		ДобавитьНастройкуВТаблицу(РодительДок.Строки, "MainRecvSelTPoint",  "MainRecvSelTPoint",  "Проверять выбор торговой точки",  	   "\Documents", "Не проводить документы, у которых не выбрана торговая точка", Ложь, 0, "MainRecvSel", 2);		
		ДобавитьНастройкуВТаблицу(РодительДок.Строки, "MainRecvContact",    "MainRecvContact",    "Проверять выбор договора",  	   		   "\Documents", "Не проводить документы, у которых не выбран договор"	  , Ложь, 0, "MainRecvSel", 2);		
		ДобавитьНастройкуВТаблицу(РодительДок.Строки, "UsePersPrices",      "UsePersPrices",	  "Использовать персональные цены", 	   "\Documents", "Разрешить использовать в документах персональные цены", Ложь);	
		ДобавитьНастройкуВТаблицу(РодительДок.Строки, "SelTabGoods",   	    "SelTabGoods",		  "Выбирать закладку ""Товары""",  		   "\Documents", "При создании новых документов в диалоге сразу показывать закладку ""Товары""", Ложь);	
		ДобавитьНастройкуВТаблицу(РодительДок.Строки, "EditConfirmDocs",    "EditConfirmDocs",	  "Редактировать подтвержденные документы","\Documents", "Разрешить изменять документы подтвержденные из ЦБД", Ложь);		
		ДобавитьНастройкуВТаблицу(РодительДок.Строки, "DisableAfterPrn",    "DisableAfterPrn",	  "Запрет редактирования после печати",    "\Documents", "Запрещать редактирование документов после их распечатки на принтере в КПК", Ложь);	
		ДобавитьНастройкуВТаблицу(РодительДок.Строки, "NoChnSalesPType",    "NoChnSalesPType", 	  "Запрет изменения типов цен в продажах", "\Documents", "Запретить изменять тип цены в документах продаж (""Заявка"", ""Реализация"", ""Реализация розничная"")", Ложь);
		ДобавитьНастройкуВТаблицу(РодительДок.Строки, "UseComments",  		"UseComments", 	  	  "Запрашивать комментарий к фотографиям", "",			 "Запрашивать комментарий к фотографиям", Истина);
		ДобавитьНастройкуВТаблицу(РодительДок.Строки, "EditDocData",  		"EditDocData", 	  	  "Разрешить изменение даты документов",   "",			 "Разрешить изменение даты документов", Ложь);
		ДобавитьНастройкуВТаблицу(РодительДок.Строки, "HideRest",   		"HideRest",			  "Скрывать колонку остатков товаров",     "\Documents", "Скрывать колонку остатков товаров в табличных частях документов (распространяется " +
																								  "только для документов ""Заявка"",  ""Реализация""  и ""Реализация розничная"")", Ложь);
		ДобавитьНастройкуВТаблицу(РодительДок.Строки, "AskChangePrice", 	"AskChangePrice",     "Запрашивать необходимость пересчета цен", "\Documents", "Запрашивать необходимость пересчета цен документа при изменении типа цены", Истина);
		
	
		ДобавитьНастройкуВТаблицу(РодительДок.Строки, "HideStoreList",    "HideStoreList", 	  "Скрывать список складов при вводе количества", "\Documents", "Скрывать таблицу с остатками в разрезе складов в окне ввода количества товара при подборе номенклатуры в заказ. " + 
																							  "Доступно только при использовании многоскладского учета.", Ложь);
	КонецЕсли;	
	
	// МАРШРУТЫ
	ДобавитьНастройкуВТаблицу(тзДеревоНастроек.Строки, "Маршруты", "Маршруты", "Маршруты", "", "Настройки работы с маршрутами", "", 0, , , , , , Истина);	
	ТекРодитель = тзДеревоНастроек.Строки.Найти("Маршруты", "Ключ"); 
	Если ТекРодитель <> Неопределено Тогда	
		ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "FlagsUseRoutes", "FlagsUseRoutes", "Работа с маршрутами",                        "\Routes", "Включить закладку ""Маршруты"" в окне выбора клиентов", Ложь, 0, "Flags", 0);
		ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "FlagsPriority",  "FlagsPriority",  "При выборе клиентов приоритет по маршрутам", "\Routes", "При выборе клиентов приоритет по маршрутам", Ложь, 0, "Flags", 1);
	КонецЕсли;
	
	// НАСТРОЙКИ ДЛЯ GPS
	ДобавитьНастройкуВТаблицу(тзДеревоНастроек.Строки, "GPS", "GPS", "GPS", "", "Настройки для работы с GPS", "", 0, , , , , , Истина);	
	РодительГПС = тзДеревоНастроек.Строки.Найти("GPS", "Ключ"); 
	Если РодительГПС <> Неопределено Тогда	
		// Общие настройки GPS 	
		ДобавитьНастройкуВТаблицу(РодительГПС.Строки, "Общие настройки GPS", "Общие настройки GPS", "Общие настройки GPS", "", "Общие настройки для работы с GPS", "", 0, , , , , , Истина);	
		ТекРодитель = РодительГПС.Строки.Найти("Общие настройки GPS", "Ключ"); 
		Если ТекРодитель <> Неопределено Тогда	
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "UseGPS",    					  "UseGPS",						 "Использовать GPS",                    	 "\GPS", "Использовать GPS", Ложь);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "GPSPluginDLL", 				  "GPSPluginDLL",				 "Драйвер",                        	 	     "\GPS", "Драйвер, который используется для считывания координат", сзПротоколыГПС);	
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "NoWaitGPS",                    "NoWaitGPS", 					 "Не ждать GPS-координаты документа",   	 "\GPS", "При записи документов не фиксировать его координаты", Ложь, 1, "", Неопределено, "NoExportDoc");	
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "NoExportDoc",                  "NoExportDoc",				 "Не выгружать документы без GPS-координат", "\GPS", "Не выгружать документы в ЦБД без GPS-координат", Ложь, 1, "", Неопределено, "NoWaitGPS");   	
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "AccurateDocumentCoordinates",  "AccurateDocumentCoordinates", "Точное определение координат",        	 "\GPS", "Точное определение координат. Считывание координат при этом происходит 1 раз в секунду. " + 
			"Данная настройка имеет значение только при выключенном трекинге. Ускоряет разряд батареи", Ложь);	
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "UseSyncTime", 				  "UseSyncTime", 				 "Синхронизировать время в КПК по GPS", 	 "\GPS", "Синхронизировать системное время в КПК с полученными GPS-данными. Происходит в момент записи документа", Ложь);                                                                         	
		КонецЕсли;	
		// Настройки для трекинга 	
		ДобавитьНастройкуВТаблицу(РодительГПС.Строки, "Настройки для трекинга", "Настройки для трекинга", "Настройки для трекинга", "", "Настройки для трекинга", "", 0, , , , , , Истина);	
		ТекРодитель = РодительГПС.Строки.Найти("Настройки для трекинга", "Ключ"); 
		Если ТекРодитель <> Неопределено Тогда		
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "WriteTrack", 	  "WriteTrack",	      "Запись трека",           "\GPS", "Записывать трек перемещения", Ложь);
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "TrackPeriod", 	  "TrackPeriod",	  "Период записи трека", 	"\GPS", "Период записи трека, в секундах", 30);	
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "AutoSend",         "AutoSend", 		  "Фоновая передача",     	"\GPS", "Фоновая передача координат через службу ""Агент Плюс СОД""", Ложь);	
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "AutoSendInterval", "AutoSendInterval", "Интервал передачи",  	"\GPS", "Интервал при фоновой передаче, в секундах", 300);  	
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "WorkTime", 		  "WorkTime",         "Рабочее время",     		"\GPS", "Рабочее время, в течение которого нужно записывать данные по треку перемещения. " + 
																																	"Пример: 9:00-17:30 - означает, что время начала в 9.00, а окончания в 17.30", "9:00-18:00");															
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "WorkDays", 		  "WorkDays", 		  "Рабочие дни",  			"\GPS", "Рабочие дни, в которые нужно записывать данные треку перемещения. " + Символы.ПС +
																																	"Пример: ПН,ВТ,СР,ЧТ,ПТ,СБ,ВС", "ПН,ВТ,СР,ЧТ,ПТ,СБ");																				 																				 																				 
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "DaysFromRoute", 	  "DaysFromRoute",	  "Брать дни из маршрута",  "\GPS", "Записывать трек в те дни, которые указаны в маршруте агента. При этом дни, указанные в настройке ""Рабочие дни"" будут игнорироваться", Ложь);			
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "Schedule", 	      "Schedule",         "Расписание",     		"\GPS", "Расписание работы режима записи трека в мобильном устройстве", Справочники.кпкНастройкиТрекинга.ПустаяСсылка(), , , , , Справочники.кпкНастройкиТрекинга.ПустаяСсылка());
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "UseSyncTimeMT", 	  "UseSyncTimeMT", 	  "Синхронизировать время в мобильном устройстве по GPS", 	 "\GPS", "Синхронизировать системное время в мобильном устройстве с полученными GPS-данными", Ложь);                                                                         				
		КонецЕсли;
		// Настройки для фильтрации точек
		ДобавитьНастройкуВТаблицу(РодительГПС.Строки, "Фильтрация точек GPS", "Фильтрация точек GPS", "Фильтрация точек", "\GPS", "Настройки для фильтрации точек", "", 0, , , , , , Истина);	
		ТекРодитель = РодительГПС.Строки.Найти("Фильтрация точек GPS", "Ключ");  	
		Если ТекРодитель <> Неопределено Тогда	
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "UseFilter",        "UseFilter",		  "Использовать фильтрацию", "\GPS", "Использовать фильтрацию точек", Ложь);	
			ДобавитьНастройкуВТаблицу(ТекРодитель.Строки, "FilterPointCount", "FilterPointCount", "Количество точек",  		 "\GPS", "Количество точек, которое используется при фильтрации", 5);
		КонецЕсли;
	КонецЕсли;
	
	/////////////////
	
	ДобавитьНастройкуВТаблицу(Неопределено, "FlagsShowWeight", "FlagsShowWeight", "Показывать колонку веса", 		   "\Journal",  "Показывать колонку веса", 	       Ложь, 1, "Flags", 2);		
	Если Не ДопНастройкиАгентаСоответствие = Неопределено Тогда
		флПоказыватьКолонкуВеса = ДопНастройкиАгентаСоответствие["FlagsShowWeight"];
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(тзДеревоНастроек, "ДеревоНастроек");
	ЗначениеВРеквизитФормы(тзНастройки, "тзНастройки1");
	
	
КонецФункции // ФормированиеДерева()


&НаКлиенте
Процедура ДеревоНастроекПриАктивизацииЯчейки(Элемент)
	
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		
		ИмяКлюча = ТекДанные.Название;
		
		ЭлУправления = Элемент.ПодчиненныеЭлементы.ДеревоНастроекЗначение;
		
		//ЭлУправления.Вид = ВидПоляФормы.ПолеВвода;
		//ЭлУправления.Маска = "";
		//ЭлУправления.РежимПароля = Ложь;
		//ЭлУправления.КнопкаРегулирования = Ложь;
		
		ЭлУправления.ТолькоПросмотр = ТекДанные.ЭтоГруппа;
		
		Если ТекДанные.Список.Количество() <> 0 Тогда
			ЭлУправления.Вид = ВидПоляФормы.ПолеВвода;
			ЭлУправления.КнопкаСпискаВыбора = Истина;
			ЭлУправления.КнопкаВыбора 		= Ложь;
			ЭлУправления.КнопкаОчистки 		= Ложь;	
			ЭлУправления.КнопкаРегулирования = Ложь;
			ЭлУправления.КнопкаОткрытия	 	= Ложь;
			
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Строка"));
			ЭлУправления.ОграничениеТипа    = Новый ОписаниеТипов(МассивТипов);
			
			ЭлУправления.СписокВыбора.Очистить();
			ЭлУправления.СписокВыбора.Добавить (0,"Не используется");
			ЭлУправления.СписокВыбора.Добавить (1,"Выводить код");
			ЭлУправления.СписокВыбора.Добавить (2,"Выводить артикул");
			
		ИначеЕсли ТипЗнч(ТекДанные.Значение) = Тип("Строка") Тогда
			ЭлУправления.Вид = ВидПоляФормы.ПолеВвода;
			ЭлУправления.КнопкаРегулирования = Ложь;
			ЭлУправления.КнопкаСпискаВыбора = Ложь;
			ЭлУправления.КнопкаВыбора	 	= Ложь;
			ЭлУправления.КнопкаОчистки 		= Истина;
			ЭлУправления.КнопкаОткрытия	 	= Ложь;
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Строка"));
			ЭлУправления.ОграничениеТипа    = Новый ОписаниеТипов(МассивТипов);
			
		ИначеЕсли ТипЗнч(ТекДанные.Значение)= Тип("Число") Тогда
			ЭлУправления.Вид = ВидПоляФормы.ПолеВвода;
			Если ИмяКлюча = "FilterPointCount" или ИмяКлюча = "TrackPeriod"
				или ИмяКлюча = "AutoSendInterval" Тогда
				ЭлУправления.КнопкаРегулирования = Истина;
			Иначе
				ЭлУправления.КнопкаРегулирования = Ложь;
			КонецЕсли;					
			ЭлУправления.КнопкаСпискаВыбора  = Ложь;
			ЭлУправления.КнопкаВыбора 		 = Истина;
			ЭлУправления.КнопкаОчистки 		 = Истина;
			ЭлУправления.КнопкаОткрытия	 	 = Ложь;
			ЭлУправления.МинимальноеЗначение = 0;
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Число"));
			ЭлУправления.ОграничениеТипа     = Новый ОписаниеТипов(МассивТипов);
			
		ИначеЕсли ТипЗнч(ТекДанные.Значение)= Тип("Булево") Тогда
			ЭлУправления.Вид = ВидПоляФормы.ПолеФлажка;
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Булево"));
			ЭлУправления.ОграничениеТипа      = Новый ОписаниеТипов(МассивТипов);
		ИначеЕсли ТипЗнч(ТекДанные.Значение)= Тип("Дата") Тогда
			ЭлУправления.Вид = ВидПоляФормы.ПолеВвода;
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Дата"));
			ЭлУправления.ОграничениеТипа     = Новый ОписаниеТипов(МассивТипов);
		Иначе
			ЭлУправления.Вид = ВидПоляФормы.ПолеВвода;
			ЭлУправления.КнопкаРегулирования = Ложь;
			ЭлУправления.КнопкаСпискаВыбора = Ложь;
			ЭлУправления.КнопкаВыбора	 	= Истина;
			ЭлУправления.КнопкаОчистки 		= Истина;
			ЭлУправления.КнопкаОткрытия	 	= Истина;
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(ТекДанные.Значение));
			ЭлУправления.ОграничениеТипа     = Новый ОписаниеТипов(МассивТипов);
			
		КонецЕсли; 		
		
		Если ИмяКлюча = "WorkTime" Тогда
			ЭлУправления.Маска = "99:99-99:99";
		ИначеЕсли ИмяКлюча = "WorkDays" Тогда
			ЭлУправления.Маска = "UU,UU,UU,UU,UU,UU,UU";
		КонецЕсли;
		
		Если ИмяКлюча = "ZipPwd" или ИмяКлюча = "FtpPassword" Тогда
			ЭлУправления.РежимПароля = Истина;
		КонецЕсли;  
		
		Если ИмяКлюча = "Method" или ИмяКлюча = "Agent" Тогда
			ЭлУправления.РедактированиеТекста = Ложь;
		КонецЕсли;  
						
		//ЭлементыФормы.Подсказка.Значение = СокрЛП(ТекДанные.Подсказка);
				
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗапомнитьОбщиеНастройки()
	
	ИнициализироватьТаблицуНастроекДляМТ();	
	
	тзНастройки = РеквизитФормыВЗначение("тзНастройки1");

		Если ЗначениеЗаполнено(Объект.Агент) Тогда
			СведенияАгентов = РегистрыСведений.кпкСведенияАгента.СоздатьМенеджерЗаписи();
			СведенияАгентов.Объект = Объект.Агент;
			СведенияАгентов.Прочитать();
			Если СведенияАгентов.Выбран() Тогда
				ДопНастройкиАгентаСоответствие = СведенияАгентов.ДополнительныеНастройки.Получить();
				
				Если ТипЗнч(ДопНастройкиАгентаСоответствие) <> Тип("Соответствие") Тогда
					ДопНастройкиАгентаСоответствие = Новый Соответствие;
				КонецЕсли;
				
				Для Каждого ТекСтрока Из тзНастройки Цикл					
					Если НастройкаДоступна(ТекСтрока.Название) Тогда				
						ДопНастройкиАгентаСоответствие.Вставить(ТекСтрока.Название, ТекСтрока.Значение);					
					КонецЕсли;
				КонецЦикла;
				ДопНастройкиАгентаСоответствие.Вставить("FlagsShowWeight", Объект.флПоказыватьКолонкуВеса);
				//ВыводимыеЗакладки = "";
				//Для Каждого Закладка из СписокЗакладок Цикл
				//	Если Закладка.Пометка Тогда
				//		ВыводимыеЗакладки = ВыводимыеЗакладки + ?(ВыводимыеЗакладки = "", "", ",") + Закладка.Значение;
				//	КонецЕсли;
				//КонецЦикла;
				//ДопНастройкиАгентаСоответствие.Вставить("ShowTabs", ВыводимыеЗакладки);
				
				ДопНастройкиАгентаСоответствие.Вставить("ShowTabs", "Заказы,Долги,Касса,Реализация,Поступление");
				СведенияАгентов.ДополнительныеНастройки = Новый ХранилищеЗначения(ДопНастройкиАгентаСоответствие);
				СведенияАгентов.Записать();
			КонецЕсли;
		КонецЕсли;		
				
	
КонецПроцедуры 

&НаКлиенте
Процедура СохранитьДопНастройки(Команда)
	
	ЗапомнитьОбщиеНастройки();	
	Закрыть();
КонецПроцедуры

&НаСервере
Процедура ДеревоНастроекЗначениеПриИзмененииСервер(ДанныеСтрокиДерева)
	
	тзНастройки = РеквизитФормыВЗначение("тзНастройки1");
	
	Стр = тзНастройки.Найти(СокрЛП(ДанныеСтрокиДерева.Название), "Название");
	
	Если ДанныеСтрокиДерева.Список.Количество() <= 0 Тогда		
		
		Если Стр <> Неопределено Тогда
			
			Если ТипЗнч(ДанныеСтрокиДерева.ЗначениеПоУмолчанию) = Тип("Число") Тогда
				Если ДанныеСтрокиДерева.Значение = Неопределено Тогда
					Стр.Значение = 0;
				Иначе
					Стр.Значение = Число(ДанныеСтрокиДерева.Значение);
				КонецЕсли;
			Иначе
				Если ДанныеСтрокиДерева.Значение = Неопределено Тогда
					Стр.Значение = "";
				Иначе
					Стр.Значение = ДанныеСтрокиДерева.Значение;
				КонецЕсли; 
				
				Если ДанныеСтрокиДерева.Ключ = "Schedule" Тогда								
					Стр = тзНастройки.Найти(ДанныеСтрокиДерева.Ключ , "Название");
					Если Стр <> Неопределено Тогда				
						Стр.Значение = ДанныеСтрокиДерева.Значение;    				
					КонецЕсли;						
				КонецЕсли;
				
			КонецЕсли;				
			
		КонецЕсли;
	ИначеЕсли ДанныеСтрокиДерева.Список.Количество() > 0 Тогда		
		Если Стр <> Неопределено Тогда
			Стр.Значение = ДанныеСтрокиДерева.Значение;    				
		КонецЕсли;
	КонецЕсли;  
	
	ЗначениеВРеквизитФормы(тзНастройки, "тзНастройки1");
	
КонецПроцедуры


&НаКлиенте
Процедура ДеревоНастроекЗначениеПриИзменении(Элемент)
	ДанныеСтрокиДерева = Элементы.ДеревоНастроек.ТекущиеДанные;
	
	Если ДанныеСтрокиДерева.Ключ = "Agent" Тогда
		
		Возврат;
			
	ИначеЕсли ДанныеСтрокиДерева.Список.Количество() <= 0 Тогда		
		
		Если ДанныеСтрокиДерева.Название = "FilterPointCount" и ТипЗнч(ДанныеСтрокиДерева.Значение) = Тип("Число") Тогда
			Если Элемент.Значение > 6 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Количество точек нельзя установить больше 6");		
				ДанныеСтрокиДерева.Значение = 6;
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеСтрокиДерева.Название = "ZipPwd" или ДанныеСтрокиДерева.Название = "RC4Pwd" или 
			ДанныеСтрокиДерева.Название = "OptPwd" Тогда
			
			РусСимволы  = "абвгдеёжзийклмнопрстуфхцчшщъыьэюяАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ";
			
			ЗначНастройки = СокрЛП(ДанныеСтрокиДерева.Значение);
			
			Для Сч = 1 По СтрДлина(ЗначНастройки) Цикл
				Симв = Сред(ЗначНастройки, Сч, 1);
				Если Найти(РусСимволы, Симв) > 0 Тогда
					Предупреждение("Нельзя использовать буквы кириллицы в пароле!", 60);
					ДанныеСтрокиДерева.Значение = "";
					Возврат;
				КонецЕсли;
			КонецЦикла;				 
		КонецЕсли; 
		
	ИначеЕсли ДанныеСтрокиДерева.Список.Количество() > 0 Тогда		
		
		Попытка
			ТекЗнач 		  = Число(ДанныеСтрокиДерева.Значение);	
		Исключение
			ТекЗнач = 0;
		КонецПопытки;
		
		ДанныеСтрокиДерева.Значение = ДанныеСтрокиДерева.Список.НайтиПоЗначению(ТекЗнач).Представление;  			
		
		ДанныеСтрокиДереваСтруктура = Новый Структура();
		ДанныеСтрокиДереваСтруктура.Вставить("Настройка",ДанныеСтрокиДерева.Настройка);
		ДанныеСтрокиДереваСтруктура.Вставить("Значение",ТекЗнач);
		ДанныеСтрокиДереваСтруктура.Вставить("ЗначениеПоУмолчанию",ДанныеСтрокиДерева.ЗначениеПоУмолчанию);
		ДанныеСтрокиДереваСтруктура.Вставить("Список",ДанныеСтрокиДерева.Список);
		ДанныеСтрокиДереваСтруктура.Вставить("Ключ",ДанныеСтрокиДерева.Ключ);
		ДанныеСтрокиДереваСтруктура.Вставить("Путь",ДанныеСтрокиДерева.Путь);
		ДанныеСтрокиДереваСтруктура.Вставить("Подсказка",ДанныеСтрокиДерева.Подсказка);
		ДанныеСтрокиДереваСтруктура.Вставить("Название",ДанныеСтрокиДерева.Название);
		
		ДеревоНастроекЗначениеПриИзмененииСервер(ДанныеСтрокиДереваСтруктура);
		
		Возврат;
		
	КонецЕсли;
	
	
	ДанныеСтрокиДереваСтруктура = Новый Структура();
	ДанныеСтрокиДереваСтруктура.Вставить("Настройка",ДанныеСтрокиДерева.Настройка);
	ДанныеСтрокиДереваСтруктура.Вставить("Значение",ДанныеСтрокиДерева.Значение);
	ДанныеСтрокиДереваСтруктура.Вставить("ЗначениеПоУмолчанию",ДанныеСтрокиДерева.ЗначениеПоУмолчанию);
	ДанныеСтрокиДереваСтруктура.Вставить("Список",ДанныеСтрокиДерева.Список);
	ДанныеСтрокиДереваСтруктура.Вставить("Ключ",ДанныеСтрокиДерева.Ключ);
	ДанныеСтрокиДереваСтруктура.Вставить("Путь",ДанныеСтрокиДерева.Путь);
	ДанныеСтрокиДереваСтруктура.Вставить("Подсказка",ДанныеСтрокиДерева.Подсказка);
	ДанныеСтрокиДереваСтруктура.Вставить("Название",ДанныеСтрокиДерева.Название);
	
	ДеревоНастроекЗначениеПриИзмененииСервер(ДанныеСтрокиДереваСтруктура);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеВДеревоНастроек(Ключ, Значение, ЗначениеПоУмолчанию = "")
	
	// Идентификатор агента
	Стр = тзНастройки.Найти(Ключ, "Название");
	Если Стр <> Неопределено Тогда
		Стр.Значение = Значение;
	КонецЕсли;
	
	СтрД = тзДеревоНастроек.Строки.Найти(Ключ, "Название", Истина);
	Если СтрД <> Неопределено Тогда
		Если ТипЗнч(ЗначениеПоУмолчанию) = Тип("СписокЗначений") Тогда
			СтрД.Значение = ЗначениеПоУмолчанию.НайтиПоЗначению(Значение);			
		Иначе
			СтрД.Значение = Значение;                                 
		КонецЕсли; 
	КонецЕсли;    	
	
КонецПроцедуры //УстановитьЗначениеВДерево()

&НаСервере
Процедура ЗаполнитьПоУмолчаниюСервер()
	// Настройки агента
	
	тзНастройки = РеквизитФормыВЗначение("тзНастройки1");
	
	тзДеревоНастроек = РеквизитФормыВЗначение("ДеревоНастроек");
	
	Стр = тзНастройки.Найти("AgentID", "Название");
	
	Если Стр <> Неопределено Тогда   		
		
		Если ЗначениеЗаполнено(Стр.Значение) Тогда 			
			Агент = Справочники.Агенты.ПолучитьСсылку(Новый УникальныйИдентификатор(Стр.Значение));															
			УстановитьЗначениеВДеревоНастроек("Agent", Агент); // агент
			
			НастройкиАгента = РегистрыСведений.кпкСведенияАгента.Получить(Новый Структура("Объект", Агент));			
			// Использовать пароль
			Если Не ПустаяСтрока(НастройкиАгента.ПарольЗИП) Тогда
				УстановитьЗначениеВДеревоНастроек("FlagsZIP", Истина);							
			КонецЕсли;			
			УстановитьЗначениеВДеревоНастроек("ZipPwd",    НастройкиАгента.ПарольЗИП);    //  Пароль агента									
			//УстановитьЗначениеВДеревоНастроек("FtpFolder", НастройкиАгента.ФТППапка);     //  ФТП-папка агента									
			//УстановитьЗначениеВДеревоНастроек("E-mail",    НастройкиАгента.ПочтовыйЯщик); //  Ящик электронной почты			
			УстановитьЗначениеВДеревоНастроек("FtpFolder", "");     //  ФТП-папка агента									
			УстановитьЗначениеВДеревоНастроек("E-mail",    ""); //  Ящик электронной почты			
			
				// Устанавливаем идентификатор МУ
			УстановитьЗначениеВДеревоНастроек("PPCID",    СокрЛП(НастройкиАгента.КПК.Идентификатор));								
			
		КонецЕсли;  
		
	КонецЕсли;   	
	
	// Общие настройки
	УстановитьЗначениеВДеревоНастроек("OptPwd",   "");
	УстановитьЗначениеВДеревоНастроек("TimeLock", Ложь);	
	УстановитьЗначениеВДеревоНастроек("FullUse",  Ложь);
	
	ИспШифрование = Константы.кпкШифроватьДанные.Получить();
	УстановитьЗначениеВДеревоНастроек("FlagsRC4", ИспШифрование);		
	УстановитьЗначениеВДеревоНастроек("RC4Pwd",   Константы.кпкКриптоПароль.Получить());	
	
	//// Настройки ФТП 	
	//Сервер 		 = Константы.кпкФТПСервер.Получить();      
	//Пользователь = Константы.кпкФТППользователь.Получить(); 
	//Пароль 	     = Константы.кпкФТППароль.Получить();        
	
	УстановитьЗначениеВДеревоНастроек("FtpAddress",  "");
	УстановитьЗначениеВДеревоНастроек("FtpLogin",    "");
	УстановитьЗначениеВДеревоНастроек("FtpPassword", "");
	УстановитьЗначениеВДеревоНастроек("FtpBufLen",   2048);
	
	// Настройки А+ Сервера 
	УстановитьЗначениеВДеревоНастроек("APSAddress",   Объект.АПСервер);
	УстановитьЗначениеВДеревоНастроек("APSBlockSize", 2048);
	УстановитьЗначениеВДеревоНастроек("Behaviour",    "1", сзРежимПриемаДанных);
	
	// Настройки обмена	
	СпособОбмена = Константы.кпкСпособОбмена.Получить();
	Инд = 0;
	Если СпособОбмена = 1 Тогда
		Инд = 0;
	ИначеЕсли СпособОбмена = 2 Тогда
		Инд = 3;
	ИначеЕсли СпособОбмена = 3 Тогда
		Инд = 2;
	ИначеЕсли СпособОбмена = 4 Тогда
		Инд = 1;
	КонецЕсли;
	
	ТекСпособ = сзСпособыОбмена.НайтиПоЗначению(Инд).Значение;
	
	// ОБМЕН ДАННЫМИ
	УстановитьЗначениеВДеревоНастроек("Method",       ТекСпособ, сзСпособыОбмена);	
	
	КаталогОбмена = ПапкаОбмена20;
	
	УстановитьЗначениеВДеревоНастроек("FilePath",     КаталогОбмена);
	УстановитьЗначениеВДеревоНастроек("GPRSTimeOut",  45);
	УстановитьЗначениеВДеревоНастроек("FlagsUnicode", Истина);
	УстановитьЗначениеВДеревоНастроек("UseArchives",  Истина);
	
	// Дополнительные настройки обмена данными		
	УстановитьЗначениеВДеревоНастроек("FlagDocsBlock",        Ложь);		
	УстановитьЗначениеВДеревоНастроек("ConfigInMenu",         Ложь);	 	
	УстановитьЗначениеВДеревоНастроек("UploadAllDatabases",   Ложь);
	УстановитьЗначениеВДеревоНастроек("DisconnectConnection", Ложь);
	УстановитьЗначениеВДеревоНастроек("NoUploadPhotos", 	  Ложь);
	
	// СПРАВОЧНИКИ  	
	
	// Флаги настроек для товаров		
	УстановитьЗначениеВДеревоНастроек("FlagsOrder",       		Ложь);
	УстановитьЗначениеВДеревоНастроек("FlagsComment",     		Ложь);
	УстановитьЗначениеВДеревоНастроек("FlagsName2Str",    		Ложь);
	УстановитьЗначениеВДеревоНастроек("FlagsPriceCount",  		Истина);
	УстановитьЗначениеВДеревоНастроек("FlagsPriceCreate", 		Ложь);
	УстановитьЗначениеВДеревоНастроек("FlagsPriceEdit", 	    Ложь);
	УстановитьЗначениеВДеревоНастроек("FlagsPriceEditPrice",	Ложь);	
	УстановитьЗначениеВДеревоНастроек("FlagsPriceGroupSort", 	Ложь);
	УстановитьЗначениеВДеревоНастроек("FlagsPriceHideRest", 	Ложь);
	УстановитьЗначениеВДеревоНастроек("FlagsPriceSalesHistory", Ложь);
	УстановитьЗначениеВДеревоНастроек("FlagsPriceStockHistory", Ложь);
	УстановитьЗначениеВДеревоНастроек("FlagsPriceStar", 		Ложь);	
	УстановитьЗначениеВДеревоНастроек("FlagsPriceUseChar",		Ложь);
	УстановитьЗначениеВДеревоНастроек("FlagsPriceShowChar", 	Ложь);
	УстановитьЗначениеВДеревоНастроек("FlagsPriceCloseChar", 	Ложь);
	УстановитьЗначениеВДеревоНастроек("FlagsShowRat", 			Ложь);																																			 
	УстановитьЗначениеВДеревоНастроек("UseCodes", 				сзКодыТоваров.Получить(0).Значение, сзКодыТоваров);
	
	// Штрих-коды
	УстановитьЗначениеВДеревоНастроек("FlagsBarcodesAdd", Ложь);
	
	// Клиенты и торговые точки  	
	УстановитьЗначениеВДеревоНастроек("FlagsClientsCreate",	 Ложь);
	УстановитьЗначениеВДеревоНастроек("FlagsClientsEdit", 	 Ложь);
	УстановитьЗначениеВДеревоНастроек("SortClients",         Ложь);   	
	УстановитьЗначениеВДеревоНастроек("FlagsTPointsCreate",  Ложь);
	УстановитьЗначениеВДеревоНастроек("FlagsTPointsEdit", 	 Ложь);
	УстановитьЗначениеВДеревоНастроек("FlagsContactsCreate", Ложь);
	УстановитьЗначениеВДеревоНастроек("FlagsContactsEdit", 	 Ложь);
	
	УстановитьЗначениеВДеревоНастроек("TpAddrLines2",       Ложь);
	
	//// ДОКУМЕНТЫ
	
	// Заявки
	УстановитьЗначениеВДеревоНастроек("OrderEditPrice",     Ложь);
	УстановитьЗначениеВДеревоНастроек("VrfTimeDelivery",    Ложь);
	УстановитьЗначениеВДеревоНастроек("ControlRestsOnSel",  Ложь);
	УстановитьЗначениеВДеревоНастроек("EditDiscountOrder",  Истина);
	УстановитьЗначениеВДеревоНастроек("OrderControlMinAmt", Истина);
	УстановитьЗначениеВДеревоНастроек("OrderNoChangeRests", Ложь);
	УстановитьЗначениеВДеревоНастроек("OrderNoNegRests",    Ложь);
	
	// ПКО	
	УстановитьЗначениеВДеревоНастроек("CashChooseDoc", Ложь);
	УстановитьЗначениеВДеревоНастроек("CashCheckSum",  Ложь);
	
	// Мерчендайзинг	
	УстановитьЗначениеВДеревоНастроек("FlagsMerchCount", 	    Ложь);
	УстановитьЗначениеВДеревоНастроек("FlagsMerchPrice", 	    Ложь);
	УстановитьЗначениеВДеревоНастроек("FlagsMerchPriceFromCat", Истина);	
	УстановитьЗначениеВДеревоНастроек("FlagsMerchEdit", 	    Истина);	
	УстановитьЗначениеВДеревоНастроек("SelGoodsDsblEdit", 		Ложь);
	//УстановитьЗначениеВДеревоНастроек("UseMerchInOrder", 		Ложь);
	УстановитьЗначениеВДеревоНастроек("AutoMerch", 				Ложь); 	
	
	// Документ Реализация	
	УстановитьЗначениеВДеревоНастроек("EditPrice", 	      Ложь);
	УстановитьЗначениеВДеревоНастроек("EditDiscountSale", Ложь);
	УстановитьЗначениеВДеревоНастроек("ControlMinAmt", 	  Истина);
	УстановитьЗначениеВДеревоНастроек("EnableNegRests",	  Истина);
	
	// Документ Поступления
	УстановитьЗначениеВДеревоНастроек("EditPriceAr",   Ложь);
	УстановитьЗначениеВДеревоНастроек("EditSum",     Ложь);
	УстановитьЗначениеВДеревоНастроек("ControlDebt", сзКонтрольДолга.Получить(0).Значение, сзКонтрольДолга);
	
	// Общие настройки для документов продажи
	УстановитьЗначениеВДеревоНастроек("DocsSalePodbor",     Ложь);	
	УстановитьЗначениеВДеревоНастроек("DocsSaleAskAmount",  Ложь);																																		
	УстановитьЗначениеВДеревоНастроек("DocsSaleAmInWindow", Ложь);	
	УстановитьЗначениеВДеревоНастроек("DocsSaleShowAm", 	Истина);		
	
	// Настройки для всех документов
	УстановитьЗначениеВДеревоНастроек("UseGdsComments",     Ложь);	
	УстановитьЗначениеВДеревоНастроек("GdsNamesLines2",     Ложь);	
	УстановитьЗначениеВДеревоНастроек("UseSalesHist",       Истина);	
	УстановитьЗначениеВДеревоНастроек("MainRecvSelFirm",    Истина);                   	
	УстановитьЗначениеВДеревоНастроек("MainRecvSelClient",  Истина);               
	УстановитьЗначениеВДеревоНастроек("MainRecvSelTPoint",  Ложь);		
	УстановитьЗначениеВДеревоНастроек("UsePersPrices",      Ложь);	
	УстановитьЗначениеВДеревоНастроек("SelTabGoods",   	    Ложь);	
	УстановитьЗначениеВДеревоНастроек("HideRest",   		Ложь);	
	УстановитьЗначениеВДеревоНастроек("DisableAfterPrn",    Ложь);	
	УстановитьЗначениеВДеревоНастроек("NoChnSalesPType",    Ложь);
	УстановитьЗначениеВДеревоНастроек("MainRecvContact",    Ложь);
	УстановитьЗначениеВДеревоНастроек("EditConfirmDocs",    Ложь);
	
	
	// МАРШРУТЫ
	УстановитьЗначениеВДеревоНастроек("FlagsUseRoutes", Истина);
	УстановитьЗначениеВДеревоНастроек("FlagsPriority",  Истина);
	
	// НАСТРОЙКИ ДЛЯ GPS
	
	// Общие настройки GPS	  
	УстановитьЗначениеВДеревоНастроек("GPSPluginDLL",    			 сзПротоколыГПС.Получить(0).Значение, сзПротоколыГПС);
	УстановитьЗначениеВДеревоНастроек("UseGPS",    	  				 Ложь);
	УстановитьЗначениеВДеревоНастроек("NoWaitGPS",    				 Ложь);	
	УстановитьЗначениеВДеревоНастроек("NoExportDoc",  				 Ложь);   	
	УстановитьЗначениеВДеревоНастроек("AccurateDocumentCoordinates", Ложь);	
	УстановитьЗначениеВДеревоНастроек("UseSyncTime", 				 Истина);                                                                         	
	
	// Настройки для трекинга 	
	УстановитьЗначениеВДеревоНастроек("WriteTrack", 	  Истина);
	УстановитьЗначениеВДеревоНастроек("TrackPeriod", 	  60);	
	УстановитьЗначениеВДеревоНастроек("AutoSend",         Ложь);	
	УстановитьЗначениеВДеревоНастроек("AutoSendInterval", 300);  	
	УстановитьЗначениеВДеревоНастроек("WorkTime",         "9:00-18:00");
	УстановитьЗначениеВДеревоНастроек("WorkDays",         "ПН,ВТ,СР,ЧТ,ПТ,СБ");	
	УстановитьЗначениеВДеревоНастроек("DaysFromRoute", 	  Ложь);
	УстановитьЗначениеВДеревоНастроек("Shedule", 	      Справочники.кпкНастройкиТрекинга.ПустаяСсылка());	
	УстановитьЗначениеВДеревоНастроек("UseSyncTimeMT", 	  Истина);	
	
	// Настройки для фильтрации точек
	УстановитьЗначениеВДеревоНастроек("UseFilter",        Ложь);	
	УстановитьЗначениеВДеревоНастроек("FilterPointCount", 5);
	
	//// Настройки журнала		
	//ФлагиЗакладок   = ПолучитьФлагиЗакладокЖурнала();
	//ПорядокЗакладок = ПолучитьПорядокЗакладокИзСписка(СписЗаклЖрн);
	//
	//ОбновитьВыборЗакладок(ФлагиЗакладок, ПорядокЗакладок, Истина);
	
	флАвтоСменаПериода 			    = Ложь;	
	флВыбиратьПоследнийДокумент 	= Ложь;
	флПоказыватьКолонкуВеса 		= Ложь;
	флПоказыватьКолонкуGPS 		    = Ложь;
	флИспользоватьЦветовыеКатегории = Истина;
	флПоказыватьКолонкуВидовОплат   = Ложь;
	
	ЗначениеВРеквизитФормы(тзДеревоНастроек, "ДеревоНастроек");
	ЗначениеВРеквизитФормы(тзНастройки, "тзНастройки1");
	
	//НачалоИнтервала = 0;
	//КонецИнтервала =  0;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьПоУмолчанию(Команда)
	ЗаполнитьПоУмолчаниюСервер();	
КонецПроцедуры

&НаКлиенте
Процедура Развернуть(Команда)
	
	Для каждого Элемент Из ДеревоНастроек.ПолучитьЭлементы() Цикл
		Идентификатор = Элемент.ПолучитьИдентификатор();
		Элементы.ДеревоНастроек.Развернуть(Идентификатор, Истина);
	КонецЦикла;
		
	Элементы.ДеревоНастроек.Обновить();
	
	
КонецПроцедуры

&НаКлиенте
Процедура Свернуть(Команда)
	
	Для каждого Элемент Из ДеревоНастроек.ПолучитьЭлементы() Цикл
		Идентификатор = Элемент.ПолучитьИдентификатор();
		Элементы.ДеревоНастроек.Свернуть(Идентификатор);
	КонецЦикла;
		
	Элементы.ДеревоНастроек.Обновить();
	
КонецПроцедуры

