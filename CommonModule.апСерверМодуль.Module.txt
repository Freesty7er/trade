Функция ПолучитьЗначениеКонстанты(ИмяКонстанты) Экспорт

   Возврат Константы[ИмяКонстанты].Получить();

КонецФункции

// Сохранение на диск файла и его открытие.
//
Функция СохранитьФайлИзХранилища(ИмяФайла, Хранилище, СпособПерезаписи = "", ВопросОПерезаписи = Истина) Экспорт
	
	Перем ФайлСохранен;
	
	ИмяКаталога = ПолучитьИмяКаталога();
	
	ИмяВременногоФайла = ПолучитьИмяФайла(ИмяКаталога, УдалитьЗапрещенныеСимволыИмени(ИмяФайла));
	Если СохранитьФайлНаДиске(Хранилище, ИмяВременногоФайла, Ложь, СпособПерезаписи, ВопросОПерезаписи) Тогда
		ФайлСохранен = Истина;
	Иначе		
		ФайлСохранен = Ложь;		
	КонецЕсли;
	
	Возврат ?(ФайлСохранен, ИмяВременногоФайла, "");
	
КонецФункции

// Формирует имя каталога для сохранения/чтения файлов. Для различных типов объектов возможны 
// различные алгоритмы определения каталога.
//
// Параметры
//  ОбъектФайла  – Ссылка на объект данных, для которого прикрепляются файлы.
//
// Возвращаемое значение:
//   Строка – каталог файлов для указанного объекта и пользователя.
//
Функция ПолучитьИмяКаталога() Экспорт

	РабочийКаталог = КаталогВременныхФайлов();

	// Так как при различных указаниях рабочего каталога возможно наличие или отсутствие
	// последнего слеша, приведем строку каталога к унифицированному виду - без слеша на конце.
	Если (Прав(РабочийКаталог, 1) = "\") ИЛИ (Прав(РабочийКаталог, 1) = "/") Тогда
		РабочийКаталог = Лев(РабочийКаталог, СтрДлина(РабочийКаталог) - 1);
	КонецЕсли;

	Возврат РабочийКаталог;

КонецФункции // ПолучитьИмяКаталога()

// Составляет полное имя файла из имени каталога и имени файла.
//
// Параметры
//  ИмяКаталога  – Строка, содержащая путь к каталогу файла на диске.
//  ИмяФайла     – Строка, содержащая имя файла, без имени каталога.
//
// Возвращаемое значение:
//   Строка – полное имя файла с учетом каталога.
//
Функция ПолучитьИмяФайла(ИмяКаталога, ИмяФайла) Экспорт

	Если Не ПустаяСтрока(ИмяФайла) Тогда
		
		Слэш = "";
		Если (Прав(ИмяКаталога, 1) <> "\") И (Прав(ИмяКаталога, 1) <> "/") Тогда
			Слэш = ?(Найти(ИмяКаталога, "\") = 0, "/", "\");
		КонецЕсли;
		
		Возврат ИмяКаталога + Слэш + ИмяФайла;	
		
	Иначе
		
		Возврат ИмяКаталога;
		
	КонецЕсли;

КонецФункции // ПолучитьИмяФайла()

// Выделяет из полного пути к файлу его имя (набор символов после последней \).
//
// Параметры
//  ПутьКФайлу     – Строка, содержащая имя файла, неважно с именем каталога или без.
//
// Возвращаемое значение:
//   Строка – расширение файла.
//
Функция ПолучитьИмяФайлаИзПолногоПути(Знач ПутьКФайлу) Экспорт
	
	ИмяФайла = ПолучитьЧастьСтрокиОтделеннойСимволом(ПутьКФайлу, "\", Истина);
	ИмяФайла = ПолучитьЧастьСтрокиОтделеннойСимволом(ИмяФайла,   "/", Истина);
	
	Возврат ИмяФайла;
	
КонецФункции

// функция формирует имя файла выбрасывая из первоначально предложенного имени все
// запрещенные символы
// Параметры
//  ИмяФайла     – Строка, содержащая имя файла, без каталога.
//
// Возвращаемое значение:
//   Строка – имя файла, которое может быть использовано в файловой системе
//
Функция УдалитьЗапрещенныеСимволыИмени(Знач ИмяФайла) Экспорт

	ИтоговоеИмяФайла = СокрЛП(ИмяФайла);
	
	Если ПустаяСтрока(ИтоговоеИмяФайла) Тогда
		
		Возврат ИтоговоеИмяФайла;
		
	КонецЕсли;
	
	СписокСимволов = ПолучитьСписокЗапрещенныхСимволовВИменахФайлов();
	
	Для Каждого СтрокаЗапретногоСимвола  Из СписокСимволов Цикл
		
		ИтоговоеИмяФайла = СтрЗаменить(ИтоговоеИмяФайла,  СтрокаЗапретногоСимвола.Значение, "");			
		
	КонецЦикла;
	
	Возврат ИтоговоеИмяФайла;

КонецФункции // УдалитьЗапрещенныеСимволыИмени()

// Сохраняет файл на диске.
//
// Параметры
//  Хранилище    – ХранилищеЗначения, которое содержит объект типа 
//                 ДвоичныеДанные с файлом для записи на диск.
//  ИмяФайла     – Строка, содержащая полное имя файла.
//  ТолькоЧтение – Булево, признак установки записываемому файлу атрибута ТолькоЧтение.
//  СпособПерезаписи – Строка. Параметр определеляет способ перезаписи существующих
//                 файлов на диске. В зависимости от пришедшего параметра выдается или
//                 не выдается запрос на перезапись файлов. Может устанавливаться в теле
//                 функции, если это необходимо. Принимаемые значения:
//                 "" (пустая строка) - это означает, что диалог еще ни разу не задавался
//                 и при наличии существующего файла будет выдан диалог запроса перезаписи.
//                 ДА - предыдущий файл был перезаписан, но перезапись текущего надо 
//                 запросить снова
//                 НЕТ - предыдущий файл не был перезаписан, но перезапись текущего надо 
//                 запросить снова
//                 ДАДЛЯВСЕХ - предыдущий файл был перезаписан, и все последующие тоже 
//                 надо перезаписывать.
//                 НЕТДЛЯВСЕХ - предыдущий файл не был перезаписан, и все последующие тоже 
//                 не надо перезаписывать.
//
// Возвращаемое значение:
//   Булево – Истина, если каталог выбран, Ложь, если нет.
//
Функция СохранитьФайлНаДиске(Хранилище, ИмяФайла, ТолькоЧтение, СпособПерезаписи, ВопросОПерезаписи = Истина, ИмяСправочника = "ХранилищеДополнительнойИнформации") Экспорт

	Попытка

		ФайлНаДиске = Новый Файл(ИмяФайла);
		КаталогНаДиске = Новый Файл(ФайлНаДиске.Путь);

		Если Не КаталогНаДиске.Существует() Тогда
			СоздатьКаталог(ФайлНаДиске.Путь);
		КонецЕсли;

		Если ФайлНаДиске.Существует() И ВопросОПерезаписи = Истина Тогда

			Если СпособПерезаписи = ""
			 ИЛИ Врег(СпособПерезаписи) = "ДА"
			 ИЛИ Врег(СпособПерезаписи) = "НЕТ" Тогда

				ФормаЗапросаПерезаписиФайлов = Справочники[ИмяСправочника].ПолучитьФорму("ФормаЗапросаПерезаписиФайлов");
				ФормаЗапросаПерезаписиФайлов.ТекстПредупреждения = 
				    "На локальном диске уже существует файл:
				    |" + ИмяФайла + "
				    |Перезаписать имеющийся файл?";
				СпособПерезаписи = ФормаЗапросаПерезаписиФайлов.ОткрытьМодально();

				Если СпособПерезаписи = Неопределено
				 ИЛИ Врег(СпособПерезаписи) = "НЕТ"
				 ИЛИ Врег(СпособПерезаписи) = "НЕТДЛЯВСЕХ" Тогда
					Возврат Ложь;
				КонецЕсли;

			ИначеЕсли Врег(СпособПерезаписи) = "НЕТДЛЯВСЕХ" Тогда

				Возврат Ложь;

			КонецЕсли;

			// Если существующему файлу установлено ТолькоЧтение, отменим эту установку.
			Если ФайлНаДиске.ПолучитьТолькоЧтение() Тогда
				ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
			КонецЕсли;

		КонецЕсли;

		// Остались случаи когда:
		// - пользователь ответил Да или ДаДляВсех в текущем диалоге
		// - способ перезаписи уже пришел со значением ДаДляВсех
		Если ТипЗнч(Хранилище) <> Тип("ДвоичныеДанные") Тогда
			ДвоичныеДанные = Хранилище.Получить();
		Иначе
			ДвоичныеДанные = Хранилище;
		КонецЕсли;
		
		Если ТипЗнч(ДвоичныеДанные) = Тип("ИнтернетПочтовоеСообщение") Тогда
			Сообщить("Это вложение не может быть сохранено!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		ДвоичныеДанные.Записать(ИмяФайла);
		ФайлНаДиске.УстановитьТолькоЧтение(ТолькоЧтение);

	Исключение
		
		Возврат Ложь;

	КонецПопытки;

	Возврат Истина;

КонецФункции // СохранитьФайлНаДиске()

// функция возвращает список запрещенных символов в именах файлов
// Возвращаемое значение:
//   Список значений в котором хранится список всех запрещенных символов в именах файлов.
//
Функция ПолучитьСписокЗапрещенныхСимволовВИменахФайлов()
	
	СписокСимволов = Новый СписокЗначений();
	
	СписокСимволов.Добавить("\");
	СписокСимволов.Добавить("/");
	СписокСимволов.Добавить(":");
	СписокСимволов.Добавить("*");
	СписокСимволов.Добавить("&");
	СписокСимволов.Добавить("""");
	СписокСимволов.Добавить("<");
	СписокСимволов.Добавить(">");
	СписокСимволов.Добавить("|");
	
	Возврат СписокСимволов;
	
КонецФункции

// Выделяет из имени файла его расширение (набор символов после последней точки).
//
// Параметры
//  ИмяФайла     – Строка, содержащая имя файла, неважно с именем каталога или без.
//
// Возвращаемое значение:
//   Строка – расширение файла.
//
Функция ПолучитьРасширениеФайла(Знач ИмяФайла) Экспорт
	
	Расширение = ПолучитьЧастьСтрокиОтделеннойСимволом(ИмяФайла, ".");
	Возврат Расширение;
	
КонецФункции

// функция возвращает часть строки после последнего встреченного символа в строке
Функция ПолучитьЧастьСтрокиОтделеннойСимволом(Знач ИсходнаяСтрока, Знач СимволПоиска, ЕслиНетСимволаТоВсюСтроку = Ложь)
	
	ПозицияСимвола = СтрДлина(ИсходнаяСтрока);
	Пока ПозицияСимвола >= 1 Цикл
		
		Если Сред(ИсходнаяСтрока, ПозицияСимвола, 1) = СимволПоиска Тогда
						
			Возврат Сред(ИсходнаяСтрока, ПозицияСимвола + 1); 
			
		КонецЕсли;
		
		ПозицияСимвола = ПозицияСимвола - 1;	
	КонецЦикла;

	Возврат ?(ЕслиНетСимволаТоВсюСтроку, ИсходнаяСтрока, "");
  	
КонецФункции

// Функция формирует из строки список значений с элементами строки
//
// Параметры:
//  прСтрока - строка, которую нужно преобразовать в список
//  прРаздел - символ, по которому разделяются элементы в строке
//
//Возвращаемое значение:
//  СписокЗначений
//
// Добавлена 14.06.2007
//    
Функция ИзСтрокиВСписок(Знач прСтрока, прРаздел = ",") Экспорт
	
	Перем лкВозврат, лкПоз;
	
	лкВозврат = Новый СписокЗначений;
	
	Пока Не(ПустаяСтрока(прСтрока)) Цикл
		лкПоз = Найти(прСтрока,прРаздел);
		Если (лкПоз > 0) Тогда
			лкВозврат.Добавить(Лев(прСтрока,лкПоз - 1));
			прСтрока = Сред(прСтрока,лкПоз + СтрДлина(прРаздел));
		Иначе
			лкВозврат.Добавить(прСтрока);
			прСтрока="";
		КонецЕсли;
	КонецЦикла;

	Возврат(лкВозврат);
	
КонецФункции //ИзСтрокиВСписок()

// Процедуры и функции выгрузки данных
//

// Процедура находит план агента в текущем месяце. Если в текущем месяце есть несколько планов
// посещений, то в расчет берется последний по дате формирования документ планирования.
//   
Функция СформироватьМассивыДанныхПоПлануПосещений(Агент, ПланПосещений, МассивКонтрагентов, МассивПартнеров) Экспорт
	
	ДатаНачала    = НачалоМесяца(ТекущаяДата());
	ДатаОкончания = КонецМесяца(ТекущаяДата());
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	апПланАгентаПланПосещений.Ссылка,
	|	апПланАгентаПланПосещений.Партнер,
	|	апПланАгентаПланПосещений.Контрагент
	|ИЗ
	|	Документ.апПланАгента.ПланПосещений КАК апПланАгентаПланПосещений
	|ГДЕ
	|	апПланАгентаПланПосещений.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И апПланАгентаПланПосещений.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И апПланАгентаПланПосещений.Ссылка.Агент = &Агент
	|
	|УПОРЯДОЧИТЬ ПО
	|	апПланАгентаПланПосещений.Ссылка.Дата УБЫВ");
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКон", ДатаОкончания);
	Запрос.УстановитьПараметр("Агент",   Агент); 
	
	Результат = Запрос.Выполнить();
	
	МассивПартнеров    = Новый Массив;
	МассивКонтрагентов = Новый Массив;
	
	Если Не Результат.Пустой() Тогда									
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда			
			ПланПосещений = Выборка.Ссылка;   		
		КонецЕсли;
		МассивПартнеров    = Результат.Выгрузить().ВыгрузитьКолонку("Партнер");
		//МассивКонтрагентов = Результат.Выгрузить().ВыгрузитьКолонку("Контрагент");		
	КонецЕсли;
		
КонецФункции //СформироватьМассивыДанныхПоПлануПосещений()

Функция ПолучитьТекстЗапросаДляНабораДанныхПоПартнерам()
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Партнеры.Ссылка КАК Ссылка
	|{ВЫБРАТЬ
	|	Ссылка.*}
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры	
	|{ГДЕ
	|	Партнеры.Ссылка.* КАК Партнеры}
	|
	|УПОРЯДОЧИТЬ ПО
	|	Партнеры.Родитель,
	|	Партнеры.Наименование";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляНабораДанныхПоКонтрагентам()
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Контрагенты.Ссылка КАК Ссылка
	|{ВЫБРАТЬ
	|	Ссылка.*}
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты	
	|{ГДЕ
	|	Контрагенты.Ссылка.* КАК Контрагенты}
	|
	|УПОРЯДОЧИТЬ ПО	
	|	Контрагенты.Наименование";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьМассивКонтрагентов(МассивПартнеров, МассивКонтрагентов)
	
	Запрос  = Новый Запрос("ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ПометкаУдаления = ЛОЖЬ
	|	И Контрагенты.Партнер В(&Партнеры)");
	
	Запрос.УстановитьПараметр("Партнеры", МассивПартнеров);
	
	ТабРезультата = Запрос.Выполнить().Выгрузить();
	
	МассивКонтрагентов = ТабРезультата.ВыгрузитьКолонку("Ссылка");	
	
КонецПроцедуры //ЗаполнитьМассивКонтрагентов

// Функция заполняет списки клиентов, торговых точек, договоров, а 
// также заполняет план посещений агента
//
// Добавлено 22.06.2007
//
Процедура СформироватьСписокКлиентовАгентов(УзелАгента, ПланПосещений, МассивКонтрагентов, МассивПартнеров) Экспорт
	
	РежимВыгрузкиКонтрагентов = Константы.апРежимВыгрузкиПартнеров.Получить();
	
	Если РежимВыгрузкиКонтрагентов = Перечисления.апРежимыВыгрузкиПартнеров.ИзПланаПосещений Тогда  		                                                        			
		СформироватьМассивыДанныхПоПлануПосещений(УзелАгента, ПланПосещений, МассивКонтрагентов, МассивПартнеров);
		Если Константы.апВыгружатьКонтрагентов.Получить() Тогда
			ЗаполнитьМассивКонтрагентов(МассивПартнеров, МассивКонтрагентов);
		КонецЕсли;
	ИначеЕсли РежимВыгрузкиКонтрагентов = Перечисления.апРежимыВыгрузкиПартнеров.ИзСпискаПартнеровДляАгента Тогда 			
		ТекстЗапроса = ПолучитьТекстЗапросаДляНабораДанныхПоПартнерам();
		МассивПартнеров    = СформироватьМассивВыгружаемыхОбъектов("Справочники", "Партнеры",    ТекстЗапроса, УзелАгента);	
		Если Константы.апВыгружатьКонтрагентов.Получить() Тогда
			ТекстЗапроса = ПолучитьТекстЗапросаДляНабораДанныхПоКонтрагентам();
			МассивКонтрагентов = СформироватьМассивВыгружаемыхОбъектов("Справочники", "Контрагенты", ТекстЗапроса, УзелАгента);	
		КонецЕсли;
	КонецЕсли;
					
КонецПроцедуры // СформироватьСписокКлиентовАгента()

Функция ПолучитьСписокТорговыхАгентов() Экспорт
	
	СписокАгентов = Новый СписокЗначений;
	
	Выборка = ПланыОбмена.апМобильноеПриложениеТорговыйПредставитель.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПометкаУдаления или Не ЗначениеЗаполнено(Выборка.Пользователь) Тогда Продолжить; КонецЕсли;
		
		СерийныйНомер = Выборка.МобильныйКомпьютер.СерийныйНомер;
		
		Представление = Выборка.Пользователь.Наименование + ?(ЗначениеЗаполнено(СерийныйНомер), ". ИД устройства: " + СокрЛП(СерийныйНомер), "");
		
		СписокАгентов.Добавить(Выборка.Пользователь, Представление);
		
	КонецЦикла;
	
	Возврат СписокАгентов;
	
КонецФункции //ПолучитьСписокТорговыхАгентов() 

//Возвращает просто список ссылок на агентов
//
Функция ПолучитьСписокАгентов() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	апМобильноеПриложениеТорговыйПредставитель.Ссылка
	               |ИЗ
	               |	ПланОбмена.апМобильноеПриложениеТорговыйПредставитель КАК апМобильноеПриложениеТорговыйПредставитель
	               |ГДЕ
	               |	апМобильноеПриложениеТорговыйПредставитель.Код <> """"
	               |	И апМобильноеПриложениеТорговыйПредставитель.ПометкаУдаления = ЛОЖЬ";
	
	Результат = Запрос.Выполнить();
	
	СписокАгентов = Новый СписокЗначений;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл	
		СписокАгентов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СписокАгентов;
КонецФункции //ПолучитьСписокАгентов()

// Проверяет наличие каталога на диске и предлагает создать, если каталога не существует.
//
// Параметры
//  ИмяКаталога  – Строка, содержащая путь к каталогу файла на диске.
//
// Возвращаемое значение:
//   Булево – Истина, если каталог существует или создан, Ложь, если каталога нет.
//
Функция ПроверитьСуществованиеКаталога(ИмяКаталога, ВопросСоздания = Ложь, СоздаватьКаталогНаСервере = Ложь) Экспорт
	
	КаталогНаДиске = Новый Файл(ИмяКаталога);
	Если КаталогНаДиске.Существует() Тогда
		Возврат Истина;
	Иначе
		Если ВопросСоздания Тогда
			#Если Клиент Тогда
				Ответ = Вопрос("Каталог по адресу: """ + ИмяКаталога + """ не существует. Создать его?", РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Да Тогда				
					Попытка
						СоздатьКаталог(ИмяКаталога);					
						Возврат Истина;
					Исключение
						Возврат Ложь;
					КонецПопытки;
				Иначе  				
					Возврат Ложь;     				
				КонецЕсли;
			#Иначе
				Если СоздаватьКаталогНаСервере Тогда
					Попытка
						СоздатьКаталог(ИмяКаталога);					
						Возврат Истина;
					Исключение
						Возврат Ложь;
					КонецПопытки; 				
				Иначе
					Возврат Ложь;
				КонецЕсли;
			#КонецЕсли
		Иначе
			СоздатьКаталог(ИмяКаталога);
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // ПроверитьСуществованиеКаталога()

Функция ФорматироватьЧисло(ТекЗнач) Экспорт  	
	
	Если ТекЗнач = 0 Тогда
		Возврат "0";
	Иначе
		Возврат Строка(Формат(ТекЗнач, "ЧГ=0; ЧРД='.'"));
	КонецЕсли;
	
КонецФункции //ФорматироватьЧисло()

Процедура ДополнитьСлешВПуть(Каталог) Экспорт
	
	Если Прав(Каталог, 1) <> "\" Тогда
		Каталог = Каталог + "\";
	КонецЕсли;
	
КонецПроцедуры //ДополнитьСлешВПуть

Функция ДатаВремяВФорматXMLИз1С(лДатаВремя = Неопределено, Тип = "ДатаВремя") Экспорт
	
	ДатаВремя = ?(лДатаВремя = Неопределено, ТекущаяДата(), лДатаВремя);
	
	Если Тип = "Дата" Тогда		
		НужнаяДата = Формат(ДатаВремя, "ДФ=""гггг-ММ-дд""");
	ИначеЕсли Тип = "Время" Тогда	
		НужнаяДата = Формат(ДатаВремя, "ДФ=""ЧЧ-мм-сс""");
	Иначе
		НужнаяДата = Формат(ДатаВремя, "ДФ=""гггг-ММ-дд ЧЧ-мм-сс""");
	КонецЕсли;
	
	Возврат НужнаяДата;
	
КонецФункции //ДатаВремяВФорматXMLИз1С()  

Функция ДатаВремяВФорматXMLИз1СМТ(лДатаВремя = Неопределено, Тип = "ДатаВремя") Экспорт
	
	ДатаВремя = ?(лДатаВремя = Неопределено, ТекущаяДата(), лДатаВремя);
		
	НужнаяДата = Формат(ДатаВремя, "ДФ=""гггг-ММ-дд""");
	
	НужноеВремя = Формат(ДатаВремя, "ДФ=""ЧЧ:мм:сс""");
	
	Если Тип = "Дата" Тогда		
		НужноеЗначение = НужнаяДата;
	ИначеЕсли Тип = "Время" Тогда			
		НужноеЗначение = НужноеВремя;
	Иначе	
		Если ПустаяСтрока(НужнаяДата) или  ПустаяСтрока(НужноеВремя) Тогда
			Возврат "";
		КонецЕсли;	
		НужноеЗначение = НужнаяДата + "T" + НужноеВремя;
	КонецЕсли;
	
	Возврат НужноеЗначение;
	
КонецФункции //ДатаВремяВФорматXMLИз1СМТ()  

// Функция возвращает название дня недели
//
Функция ДеньНеделиСтр(НомерДня) Экспорт
	Если НомерДня = 1 Тогда
	    Возврат "Пн";
	ИначеЕсли НомерДня = 2 Тогда
		Возврат "Вт";
	ИначеЕсли НомерДня = 3 Тогда
		Возврат "Ср";		
	ИначеЕсли НомерДня = 4 Тогда
		Возврат "Чт";
	ИначеЕсли НомерДня = 5 Тогда
		Возврат "Пт";
	ИначеЕсли НомерДня = 6 Тогда
		Возврат "Сб";
	Иначе
		Возврат "Вс";
	КонецЕсли;
КонецФункции //ДеньНеделиСтр

// Функция преобразовывает переданный цвет в абосютное значение цвета
// Внимание! Данная фукнция может давать погрешность цвета, вызванную
// неоптимальными механизмами платформы 1С: Предприятия
//
Функция ПреобразоватьЦветВАбсолютный(лЦвет) Экспорт
	
	Таб = Новый ТабличныйДокумент;
	Таб.Вывод = ИспользованиеВывода.Разрешить;
	Таб.Область("R1C1").ЦветТекста = лЦвет;	 
	Таб.Записать(КаталогВременныхФайлов() + "ConvertColor.mxl", ТипФайлаТабличногоДокумента.MXL7); 
	Таб.Прочитать(КаталогВременныхФайлов() + "ConvertColor.mxl");
	
	Возврат Таб.Область("R1C1").ЦветТекста;
	
КонецФункции //ПреобразоватьЦветВАбсолютный()

// Заполняет справочник "апПечатныеФормыДокументов" значениями по умолчанию
//
Процедура ЗаполнитьСправочникПечатныхФорм() Экспорт
	
	//добавляем печатные формы в справочник в транзакции
	НачатьТранзакцию();  	
	
	СпрМенеджер = Справочники.апПечатныеФормыДокументов;
	
	ДобавитьПечатнуюФормуВСправочник("СчетНаОплату", 			   Перечисления.апВидыДокументов.Заказ, 		"Счет", 						 1, СпрМенеджер.ДокументЗаказ,			СпрМенеджер.СчетНаОплату);
	ДобавитьПечатнуюФормуВСправочник("ПриходныйКассовыйОрдер", 	   Перечисления.апВидыДокументов.ПКО,	 		"Приходный кассовый ордер", 	 1, СпрМенеджер.ДокументКассовыйОрдер, 	СпрМенеджер.ПриходныйКассовыйОрдер);
	ДобавитьПечатнуюФормуВСправочник("РасходныйКассовыйОрдер", 	   Перечисления.апВидыДокументов.РКО,	 		"Расходный кассовый ордер", 	 1, СпрМенеджер.ДокументКассовыйОрдер, 	СпрМенеджер.РасходныйКассовыйОрдер);	
	ДобавитьПечатнуюФормуВСправочник("ВозвратТоваровОтПокупателя", Перечисления.апВидыДокументов.Возврат,		"Возврат товаров от покупателя", 1, СпрМенеджер.ДокументПоступление, 	СпрМенеджер.ВозвратТоваровОтПокупателя);
	ДобавитьПечатнуюФормуВСправочник("РасходнаяНакладная", 		   Перечисления.апВидыДокументов.Реализация, 	"Упрощенная форма", 			 1, СпрМенеджер.ДокументРеализация, 	СпрМенеджер.РасходнаяНакладная);
	ДобавитьПечатнуюФормуВСправочник("Торг12", 					   Перечисления.апВидыДокументов.Реализация,	"ТОРГ-12", 						 2, СпрМенеджер.ДокументРеализация, 	СпрМенеджер.Торг12);
	ДобавитьПечатнуюФормуВСправочник("ТТН",	 					   Перечисления.апВидыДокументов.Реализация,	"ТТН",	 						 2, СпрМенеджер.ДокументРеализация, 	СпрМенеджер.ТТН);
	ДобавитьПечатнуюФормуВСправочник("СчетФактура",	 			   Перечисления.апВидыДокументов.Реализация,	"Счет-Фактура",	 				 2, СпрМенеджер.ДокументРеализация, 	СпрМенеджер.СчетФактура);
	ДобавитьПечатнуюФормуВСправочник("СправкаБТТН",	 			   Перечисления.апВидыДокументов.Реализация,	"Справка ""Б"" к ТТН",	 		 2, СпрМенеджер.ДокументРеализация, 	СпрМенеджер.СправкаБТТН);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры //ЗаполнитьСправочникаПечатныхФорм()
   
// Процедура восстанавливает исходные значения элемента справочника "апПечатныеФормыДокументов"
//
Процедура ДобавитьПечатнуюФормуВСправочник(Код, ВидДок, Наименование, Копий, Родитель, Ссылка)
	
	Эл = Ссылка.ПолучитьОбъект();
	Эл.Код 			= Код;
	Эл.ВидДокумента = ВидДок;
	Эл.Наименование = Наименование;	
	Эл.ЧислоКопий 	= Копий;	
	Эл.Родитель 	= Родитель;	
	Эл.Записать();
	
КонецПроцедуры //ДобавитьПечатнуюФормуВСправочник()


//////////////////////////////////////////////////////////////////
// Функции для генерации файла для службы Агент Плюс СОД  
//////////////////////////////////////////////////////////////////

Функция ПроверкаНастроекАгентСервера(СтруктураНастроек, ТекстОшибки = "") Экспорт
	 	
	ЕстьОшибки = Ложь;
	
	АдресСервера = СтруктураНастроек.Адрес;
	НомерПорта   = СтруктураНастроек.Порт;
	ПапкаОбмена  = СтруктураНастроек.Папка;
	
	Если ПустаяСтрока(АдресСервера) Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = ТекстОшибки + "Не указано значение константы ""Адрес службы обмена""!" + Символы.ПС;
	КонецЕсли;
	
	Если Найти(АдресСервера, " ") <> 0 Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = ТекстОшибки + "Неправильно указан адрес службы в константе ""Адрес службы обмена"" (в адресе есть символы ""пробел"")!" + Символы.ПС;		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НомерПорта) Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = ТекстОшибки + "Не указана значение константы ""Порт""! Номер порта должен быть больше нуля!" + Символы.ПС;
	КонецЕсли;
	
	Если СтрДлина(ПапкаОбмена) = 1 Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = ТекстОшибки + "Неправильно указано значение в константе ""Адрес службы обмена"")! Слишком короткий путь к папке обмена данными!" + Символы.ПС;
	КонецЕсли;
	
	Если ПустаяСтрока(ПапкаОбмена) Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = ТекстОшибки + "Не указано значение константы ""Папка обмена""!" + Символы.ПС;
	КонецЕсли;
	
	КаталогНаДиске = Новый Файл(ПапкаОбмена);
	Если Не КаталогНаДиске.Существует() Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = ТекстОшибки + "Не существует каталога, указанного в константе ""Папка обмена""!" + Символы.ПС;
	КонецЕсли;   	
	
	Если (Прав(ПапкаОбмена, 1) = "\") И (ЕстьОшибки = 0) Тогда
	    ПапкаОбмена = Лев(ПапкаОбмена, СтрДлина(ПапкаОбмена) - 1);
	КонецЕсли;
	
	Возврат ЕстьОшибки;
	
КонецФункции //ПроверкаНастроек()  

Функция ГенерацияФайлаНастроек(Настройки, ТекстОшибки = "", ТекстСообщения = "") Экспорт
	 	
	//Создаем XML-файл через обычный объект "Текст" (просто более компактный код)	
	Текст = Новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку("<?xml version=""1.0"" encoding=""UTF-16""?>");
	Текст.ДобавитьСтроку("<APlusServer VERSION=""2.5"">");
	Текст.ДобавитьСтроку("<ServerConfig PortExternal=""" + Строка(Формат(Настройки.Порт, "ЧГ=0"))+""" />");
	Текст.ДобавитьСтроку("<!-- PortExternal - номер порта для запросов от КПК -->");
	Текст.ДобавитьСтроку("<!-- Образец описания настроек для КПК: -->");
	Текст.ДобавитьСтроку("<!-- PPC DEVICE_ID=""00000000-0000-0000-0000-000000000000"" PSEUDONIM=""Agent1"" DIRECTORY=""PPC1"" -->");
    
	// Заносим в файл настроек идентификаторы задействованных КПК и их привязку к агентам
	КолПользователей = 0;   	
		
	Выборка = ПланыОбмена.апМобильноеПриложениеТорговыйПредставитель.Выбрать();
	
	СписокИдентификаторов = Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл				
		
		Если Выборка.ПометкаУдаления или 
			Выборка.Ссылка = ПланыОбмена.апМобильноеПриложениеТорговыйПредставитель.ЭтотУзел() Тогда
			Продолжить;
		КонецЕсли;
		
		НаимАгента 	= СтрЗаменить(СокрЛП(Выборка.Наименование),"""","'");
		ПапкаАгента = СокрЛП(Выборка.ИмяПользователя);
		МобильныйКомпьютер = Выборка.МобильныйКомпьютер;
		
		Если МобильныйКомпьютер.Пустая() Тогда
		    ТекстСообщения = ТекстСообщения + "Пропущен агент " + НаимАгента + ": не указано мобильное устройство!" + Символы.ПС;
			Продолжить;
		Иначе
			ИдентификаторУстройства = СокрЛП(МобильныйКомпьютер.СерийныйНомер);
		КонецЕсли;
		
		НайдСтрокаИД = СписокИдентификаторов.НайтиПоЗначению(ИдентификаторУстройства);
		Если Не НайдСтрокаИД = Неопределено Тогда
			ТекстСообщения = ТекстСообщения + "Пропущен агент " + НаимАгента + ": идентификатор устройства: " + ИдентификаторУстройства + " уже указан для агента: " + НайдСтрокаИД.Представление + "!" + Символы.ПС;		    
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(ПапкаАгента) Тогда
			ТекстСообщения = ТекстСообщения + "Пропущен агент " + НаимАгента + ": не указана папка обмена!" + Символы.ПС;		    
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(ИдентификаторУстройства) Тогда
			ТекстСообщения = ТекстСообщения + "Пропущен агент " + НаимАгента + ": не указан идентификатор мобильного устройства!" + Символы.ПС;		    		    
			Продолжить;
		КонецЕсли;
		
		Если СтрДлина(ИдентификаторУстройства) <> 36 Тогда
			ТекстСообщения = ТекстСообщения + "Пропущен агент " + НаимАгента + ": неправильно указан идентификатор мобильного устройства (длина <> 36 символов)!" + Символы.ПС;		    		    		    
			Продолжить;
		КонецЕсли; 
		
		КолПользователей = КолПользователей + 1;
		
		Текст.ДобавитьСтроку("<PPC DEVICE_ID=""" + ИдентификаторУстройства + """ PSEUDONIM=""" + Лев(НаимАгента, 60) + """ DIRECTORY=""" + ПапкаАгента + """ />");
		ТекстСообщения = ТекстСообщения + Строка(КолПользователей) + ". Выгружены данные для агента: " + НаимАгента + Символы.ПС;		
		
		СписокИдентификаторов.Добавить(ИдентификаторУстройства, НаимАгента);
		
	КонецЦикла;
	
	Текст.ДобавитьСтроку("</APlusServer>");
	
	ТекстСообщения = ТекстСообщения + "**************************************" + Символы.ПС;		
	ТекстСообщения = ТекстСообщения + "Выгружено пользователей: " + Строка(КолПользователей) + Символы.ПС;		
	
	Если КолПользователей = 0 Тогда
		ТекстОшибки = "Файл настроек не создан!" + Символы.ПС + 			
					  "Не указаны настройки для работы с сервером ни для одного торгового агента! Файл настроек не создан!";	
		Возврат Неопределено;
	КонецЕсли;	
	
	Возврат Текст;
		
КонецФункции

//////////////////////////////////////////////////////////////////
// Процедуры и функции для получения списков выгружаемых объектов  
// с использованием компоновщика настроек для агентов
//////////////////////////////////////////////////////////////////

// Формирует и возвращает структуру на основе переданного отбора компоновки данных
//
// Параметры:
//  Отбор - отбор компоновки данных
//
// Возвращаемое значение:
//  Структура, содержащая данные отбора
// 
Функция ПолучитьСтруктуруОтбораКомпоновкиДанных(Отбор) Экспорт

	СтруктураОтбора = Новый Структура();
	
	Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
		
		// Заполним структуру элемента отбора
		СтруктураЭлементаОтбора = Новый Структура();
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			СтруктураЭлементаОтбора.Вставить("ВидСравнения",ЭлементОтбора.ВидСравнения);
			СтруктураЭлементаОтбора.Вставить("ИдентификаторПользовательскойНастройки",ЭлементОтбора.ИдентификаторПользовательскойНастройки);
			СтруктураЭлементаОтбора.Вставить("Использование",ЭлементОтбора.Использование);
			СтруктураЭлементаОтбора.Вставить("ЛевоеЗначение",ЭлементОтбора.ЛевоеЗначение);
			СтруктураЭлементаОтбора.Вставить("ПравоеЗначение",ЭлементОтбора.ПравоеЗначение);
			СтруктураЭлементаОтбора.Вставить("Представление",ЭлементОтбора.Представление);
			СтруктураЭлементаОтбора.Вставить("ПредставлениеПользовательскойНастройки",ЭлементОтбора.ПредставлениеПользовательскойНастройки);
			СтруктураЭлементаОтбора.Вставить("Применение",ЭлементОтбора.Применение);
			СтруктураЭлементаОтбора.Вставить("РежимОтображения",ЭлементОтбора.РежимОтображения);
			
			// Структуру элемента отбора поместим в структуру отбора
			СтруктураОтбора.Вставить(ЭлементОтбора.ЛевоеЗначение, СтруктураЭлементаОтбора);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураОтбора;

КонецФункции

// Заполняет указанный отбор на основании структуры, содержащей данные отбора
//
// Параметры:
//  Отбор - отбор компоновки данных, который надо заполнить
//  Структура отбора - структура, содержащая данные для заполнения отбора
//
Процедура ЗаполнитьОтборКомпоновкиИзСтруктуры(Отбор, СтруктураОтбора) Экспорт

	Отбор.Элементы.Очистить();
	
	Для Каждого ЭлементСтруктурыОтбора из СтруктураОтбора Цикл
		
		ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		СтруктураЭлементаОтбора = ЭлементСтруктурыОтбора.Значение;
		
		Для Каждого Элемент из СтруктураЭлементаОтбора Цикл
			Если Элемент.Ключ = "ЛевоеЗначение" Тогда
				ЭлементОтбора[Элемент.Ключ] =  Новый ПолеКомпоновкиДанных(Элемент.Значение);
			Иначе
				ЭлементОтбора[Элемент.Ключ] = Элемент.Значение;
			КонецЕсли;
		КонецЦикла;	
		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьСтруктуруОтбораДляНастройки(СтруктураНастроекОтбора, ИмяНастройки)

	Настройка = Неопределено;
	Если СтруктураНастроекОтбора.Свойство(ИмяНастройки, Настройка) Тогда
		Если ТипЗнч(Настройка) = Тип("Структура") Тогда
			Возврат Настройка;
		КонецЕсли;
	КонецЕсли;

	Возврат Настройка;

КонецФункции
     
// Заполняет в переданном отборе элемент на основании структуры, содержащей данные отбора
//
// Параметры:
//  Отбор - отбор компоновки данных, который надо заполнить
//  СтруктураЭлементаОтбора - структура, содержащая данные для заполнения элемента отбора
//  ИмяЭлементаОтбора - имя поля - элемента отбора
//
Процедура ЗаполнитьЭлементОтбораКомпоновкиИзСтруктуры(Отбор, СтруктураНастроекОтбора, ИмяНастройки, ИмяЭлементаОтбора)

	СтруктураЭлементаОтбора = ПолучитьСтруктуруОтбораДляНастройки(СтруктураНастроекОтбора, ИмяНастройки);

	Если СтруктураЭлементаОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	Для Каждого Элемент из СтруктураЭлементаОтбора Цикл
		Если Элемент.Ключ = "ЛевоеЗначение" Тогда
			ЭлементОтбора[Элемент.Ключ] =  Новый ПолеКомпоновкиДанных(ИмяЭлементаОтбора);
		Иначе
			ЭлементОтбора[Элемент.Ключ] = Элемент.Значение;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Добавляет элемент отбора в настройки компоновки
//
// Параметры:
//  Настройки - настройки компоновки
//  ИмяПоля - имя поля, по которому задается отбор
//  Вид сравнения - вид сравнения компоновки данных
//  Использование - использование элемента отбора
//  ПравоеЗначение - правоз значение сравнения
//
Процедура ДобавитьЭлементОтбораВНастройкиСхемы(Настройки, ИмяПоля, ВидСравнения = Неопределено, Использование = Истина, ПравоеЗначение = Неопределено) Экспорт

	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;

	Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Элемент = Настройки.ДоступныеПоляОтбора.НайтиПоле(Поле);

	Если Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение = Элемент.Поле;
	ЭлементОтбора.ВидСравнения = ВидСравнения;
	ЭлементОтбора.Использование = Использование;
	ЭлементОтбора.ПравоеЗначение = ПравоеЗначение;

КонецПроцедуры

// Задает отборы для выборки объектов с использованием компоновки
//
// Параметры:
//  НастройкиКомпоновки - настройки компоновки данных, для которых задаются отборы
//  СтруктураНастроекОтбора - структура, содержащая описание устанавливаемого отбора
//  ИмяКласса - имя класса, к которому принадлежит объект (Справочники, Документы и т.д)
//  ИмяОбъекта - имя объекта метаданных, для которого добавляются отборы
//  ИспользоватьДополнительныеОтборы - признак необходимости установки доп. отборов для регистров (помимо ключевых полей)
//  СтруктураПараметровНастройкиОбмена - структура, содержащая парметры настройки обмена
//  ИспользуетсяВыборка - признак того, что используется выборка данных и отборы указываются для выборки
//
Процедура ДобавитьОтборыИзСхемыОбмена(НастройкиКомпоновки, СтруктураНастроекОтбора, ИмяКласса, ИмяОбъекта, 
									   ИспользуетсяВыборка = Ложь) Экспорт

	Если ИмяКласса = "Справочники" Тогда

		Если ИмяОбъекта = "Партнеры" Тогда
			ЗаполнитьЭлементОтбораКомпоновкиИзСтруктуры(НастройкиКомпоновки.Отбор, СтруктураНастроекОтбора, "Партнеры","Ссылка");
		ИначеЕсли ИмяОбъекта = "Контрагенты" Тогда
			ЗаполнитьЭлементОтбораКомпоновкиИзСтруктуры(НастройкиКомпоновки.Отбор, СтруктураНастроекОтбора, "Контрагенты","Ссылка");
		ИначеЕсли ИмяОбъекта = "КонтактныеЛицаПартнеров" Тогда
			ЗаполнитьЭлементОтбораКомпоновкиИзСтруктуры(НастройкиКомпоновки.Отбор, СтруктураНастроекОтбора, "Партнеры","Владелец");
			ДобавитьЭлементОтбораВНастройкиСхемы(НастройкиКомпоновки, "Владелец.ОбслуживаетсяТорговымиПредставителями", ВидСравненияКомпоновкиДанных.Равно, Истина, Истина);
		ИначеЕсли ИмяОбъекта = "Организации" Тогда
			ЗаполнитьЭлементОтбораКомпоновкиИзСтруктуры(НастройкиКомпоновки.Отбор, СтруктураНастроекОтбора, "Организации","Ссылка");
		ИначеЕсли ИмяОбъекта = "СоглашенияСКлиентами" Тогда
			Если ИспользуетсяВыборка Тогда
				ЗаполнитьЭлементОтбораКомпоновкиИзСтруктуры(НастройкиКомпоновки.Отбор, СтруктураНастроекОтбора, "Партнеры","Партнер");
			КонецЕсли;
		ИначеЕсли ИмяОбъекта = "Номенклатура" Тогда
			ЗаполнитьЭлементОтбораКомпоновкиИзСтруктуры(НастройкиКомпоновки.Отбор, СтруктураНастроекОтбора, "Номенклатура","Ссылка");
		ИначеЕсли ИмяОбъекта = "УпаковкиНоменклатуры" Тогда
			Если ИспользуетсяВыборка Тогда
				ЗаполнитьЭлементОтбораКомпоновкиИзСтруктуры(НастройкиКомпоновки.Отбор, СтруктураНастроекОтбора, "Номенклатура","Владелец");
			КонецЕсли;
		ИначеЕсли ИмяОбъекта = "ХарактеристикиНоменклатуры" Тогда
			Если ИспользуетсяВыборка Тогда
				ЗаполнитьЭлементОтбораКомпоновкиИзСтруктуры(НастройкиКомпоновки.Отбор, СтруктураНастроекОтбора, "Номенклатура","Владелец");
			КонецЕсли;
		ИначеЕсли ИмяОбъекта = "ВидыЦен" Тогда
			ЗаполнитьЭлементОтбораКомпоновкиИзСтруктуры(НастройкиКомпоновки.Отбор, СтруктураНастроекОтбора, "ВидыЦен","Ссылка");
		ИначеЕсли ИмяОбъекта = "Склады" Тогда
			ЗаполнитьЭлементОтбораКомпоновкиИзСтруктуры(НастройкиКомпоновки.Отбор, СтруктураНастроекОтбора, "Склады","Ссылка");
		ИначеЕсли ИмяОбъекта = "ПричиныОтменыЗаказовКлиентов" Тогда
			ЗаполнитьЭлементОтбораКомпоновкиИзСтруктуры(НастройкиКомпоновки.Отбор, СтруктураНастроекОтбора, "ПричиныОтменыЗаказовКлиентов","Ссылка");
		ИначеЕсли ИмяОбъекта = "НоменклатураПрисоединенныеФайлы" Тогда
			ЗаполнитьЭлементОтбораКомпоновкиИзСтруктуры(НастройкиКомпоновки.Отбор, СтруктураНастроекОтбора, "Номенклатура","Ссылка");
		КонецЕсли;
 
	КонецЕсли;

КонецПроцедуры

// Задает обязательные отборы для выборки объектов с использованием компоновки, налагаемые независимо от настроек пользователя
//
// Параметры:
//  НастройкиКомпоновки - настройки компоновки данных, для которых задаются отборы
//  ИмяКласса - имя класса, к которому принадлежит объект (Справочники, Документы и т.д)
//  ИмяОбъекта - имя объекта метаданных, для которого добавляются отборы
//  СтруктураПараметровНастройкиОбмена - структура, содержащая парметры настройки обмена
//
Процедура ДобавитьОбязательныеОтборы(НастройкиКомпоновки, ИмяКласса, ИмяОбъекта, СтруктураПараметровНастройкиОбмена)

	Если ИмяКласса = "Справочники" Тогда

		Если ИмяОбъекта = "Партнеры" Тогда
			
			ДобавитьЭлементОтбораВНастройкиСхемы(НастройкиКомпоновки, "Клиент", ВидСравненияКомпоновкиДанных.Равно, Истина, Истина);
			ДобавитьЭлементОтбораВНастройкиСхемы(НастройкиКомпоновки, "ОбслуживаетсяТорговымиПредставителями", ВидСравненияКомпоновкиДанных.Равно, Истина, Истина);
			
		ИначеЕсли ИмяОбъекта = "СоглашенияСКлиентами" Тогда
			
			ДобавитьЭлементОтбораВНастройкиСхемы(НастройкиКомпоновки, "Статус", ВидСравненияКомпоновкиДанных.Равно, Истина, Перечисления.СтатусыСоглашенийСКлиентами.Действует);
			ДобавитьЭлементОтбораВНастройкиСхемы(НастройкиКомпоновки, "ИспользуетсяВРаботеТорговыхПредставителей", ВидСравненияКомпоновкиДанных.Равно, Истина, Истина);
			
		ИначеЕсли ИмяОбъекта = "ВидыКонтактнойИнформации" Тогда
			
			СписокИспользуемыхГрупп = Новый СписокЗначений();
			СписокИспользуемыхГрупп.Добавить(Справочники.ВидыКонтактнойИнформации.СправочникПартнеры);
			СписокИспользуемыхГрупп.Добавить(Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров);
			
			ДобавитьЭлементОтбораВНастройкиСхемы(НастройкиКомпоновки, "Ссылка", ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии, Истина, СписокИспользуемыхГрупп);
			
		КонецЕсли;
		
	ИначеЕсли ИмяКласса = "Документы" Тогда

		Если ИмяОбъекта = "ЗаданиеТорговомуПредставителю" Тогда
			ДобавитьЭлементОтбораВНастройкиСхемы(НастройкиКомпоновки, "Статус", ВидСравненияКомпоновкиДанных.Равно, Истина, Перечисления.СтатусыЗаданийТорговымПредставителям.КОтработке);
			ДобавитьЭлементОтбораВНастройкиСхемы(НастройкиКомпоновки, "ТорговыйПредставитель", ВидСравненияКомпоновкиДанных.Равно, Истина, СтруктураПараметровНастройкиОбмена.ТорговыйПредставитель);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Формирует и возвращает схему компоновки данных для объекта
//
// Параметры:
//  Объект - объект, для которого требуется получить схему
//
// Возвращаемое значение:
//  Схема компоновки данных
//
Функция ПолучитьСхемуКомпоновкиДанныхДляОбъекта(ТекстЗапроса)
	
	СхемаКомпоновки = Новый СхемаКомпоновкиДанных();
	
	Источник = СхемаКомпоновки.ИсточникиДанных.Добавить();
	Источник.Имя			 	= "ИсточникДанных";
	Источник.СтрокаСоединения	= "";
	Источник.ТипИсточникаДанных = "Local";
	
	НаборДанных = СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя			   = "НаборДанных";	
	НаборДанных.ИсточникДанных = "ИсточникДанных";  	
	НаборДанных.Запрос 		   = ТекстЗапроса;
	
	Возврат СхемаКомпоновки;

КонецФункции

Функция СформироватьМассивВыгружаемыхОбъектов(ИмяКласса, ИмяОбъекта, ТекстЗапроса, УзелАгента) Экспорт
			
	СхемаКомпоновки 	= ПолучитьСхемуКомпоновкиДанныхДляОбъекта(ТекстЗапроса);
	НастройкиКомпоновки = МобильныеПриложения.СкомпоноватьНастройки(СхемаКомпоновки);
	
	СтруктураНастроекОтбора = МобильныеПриложения.ПолучитьСтруктуруНастроекОтбора(УзелАгента);
	
	ДобавитьОтборыИзСхемыОбмена(НастройкиКомпоновки, СтруктураНастроекОтбора, ИмяКласса, ИмяОбъекта);
	ДобавитьОбязательныеОтборы(НастройкиКомпоновки, ИмяКласса, ИмяОбъекта, Неопределено);
	
	МакетКомпоновки = ОбщегоНазначенияУТ.ПолучитьМакетКомпоновки(СхемаКомпоновки, НастройкиКомпоновки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
	ТаблицаРезультата = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ТаблицаРезультата.ВыгрузитьКолонку(0);
	
КонецФункции

//////////////////////////
// Работа с картинками
/////////////////////////

Функция ПолучитьИдентификаторОбъекта(ВладелецФайлов) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
					|	ИдентификаторОбъекта
					|ИЗ
					|	РегистрСведений.НаличиеПрисоединенныхФайлов
					|ГДЕ
					|	ОбъектСФайлами = &ОбъектСФайлами";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ОбъектСФайлами", ВладелецФайлов);
	РезультатВыполнения = Запрос.Выполнить();
	
	Если РезультатВыполнения.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	
	Выборка = РезультатВыполнения.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ИдентификаторОбъекта;
	
КонецФункции

// Формирует текст сообщения об ошибке, добавляя к нему ссылку на элемент
// справочника - хранимого файла
//
Функция ТекстОшибкиПриПолученииФайла(ИнформацияОбОшибкеФункции, Файл)
	
	СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибкеФункции);
	
	Если Файл <> Неопределено Тогда
		СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + Нстр("ru = 'Ссылка на файл: '");
		СообщениеОбОшибке = СообщениеОбОшибке + ПолучитьНавигационнуюСсылку(Файл);
	КонецЕсли;
	
	Возврат СообщениеОбОшибке;
	
КонецФункции

// Используется для получения данных файла в различных командах работы с файлами.
// Список получаемых данных можно уточнить в процедуре.
// Параметры
//  ПрисоединенныйФайл - ссылка на файл
//  УникальныйИдентификатор - уникальный идентификатор формы, используется при получении двоичных данных файла
//  ПолучатьСсылкуНаДвоичныеДанные - булево - требуется ли получить ссылку на двоичные данные файла,
//  							т.к. получение двоичных данных может быть ресурсоемкой операцией,
//  							необходимо уточнять, нужны ли эти данные на клиенте
// Возвращаемое значение
//  Структура с данными файла
// 
Функция ПолучитьДанныеФайла(ПрисоединенныйФайл, УникальныйИдентификатор = Неопределено, ПолучатьСсылкуНаДвоичныеДанные = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкаНаДвоичныеДанныеФайла = Неопределено;
	
	ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
	
	Если ПолучатьСсылкуНаДвоичныеДанные Тогда
		
		Если ФайлОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			ДвоичныеДанные = ФайлОбъект.ХранимыйФайл.Получить();
			Если ТипЗнч(УникальныйИдентификатор) = Тип("УникальныйИдентификатор") Тогда
				СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
			Иначе
				СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
			КонецЕсли;
		Иначе
			ПолныйПуть = ФайловыеФункции.ПолныйПутьТома(ФайлОбъект.Том) + ФайлОбъект.ПутьКФайлу;
			
			Попытка
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
				Если ТипЗнч(УникальныйИдентификатор) = Тип("УникальныйИдентификатор") Тогда
					СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
				Иначе
					СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
				КонецЕсли;
			Исключение
				СообщениеОбОшибке = ТекстОшибкиПриПолученииФайла(ИнформацияОбОшибке(), ПрисоединенныйФайл);
				ЗаписьЖурналаРегистрации("Открытие файла",
				                         УровеньЖурналаРегистрации.Ошибка,
				                         Метаданные.Справочники["апПрикрепленныеФайлы"],
				                         ПрисоединенныйФайл,
				                         СообщениеОбОшибке);
				
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка открытия файла - файл не найден на сервере. Возможно он удален антивирусной программой. Обратитесь к администратору.
					            | Файл: ""%1.%2""'"),
					            ФайлОбъект.Наименование,
					            ФайлОбъект.Расширение);
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительнаяИнформация = Новый Структура("СсылкаНаДвоичныеДанныеФайла, ОтносительныйПуть, ДатаМодификацииУниверсальная, ИмяФайла, Наименование, Расширение, Размер, ФайлРедактируется, ФайлРедактируетТекущийПользователь, Зашифрован, Редактирует, ПодписанЭЦП, Зашифрован");
	ДополнительнаяИнформация.СсылкаНаДвоичныеДанныеФайла  = СсылкаНаДвоичныеДанныеФайла;
	ДополнительнаяИнформация.ДатаМодификацииУниверсальная = ФайлОбъект.ДатаСоздания;
	ДополнительнаяИнформация.ОтносительныйПуть            = ПолучитьИдентификаторОбъекта(ФайлОбъект.ВладелецФайла) + "\";
	ДополнительнаяИнформация.ИмяФайла                     = ФайлОбъект.Наименование + "." + ФайлОбъект.Расширение;
	ДополнительнаяИнформация.Наименование                 = ФайлОбъект.Наименование;
	ДополнительнаяИнформация.Расширение                   = ФайлОбъект.Расширение;
	ДополнительнаяИнформация.Размер                       = ФайлОбъект.Размер;
	ДополнительнаяИнформация.ФайлРедактируется            = Ложь;
	ДополнительнаяИнформация.ФайлРедактируетТекущийПользователь = Истина;
	ДополнительнаяИнформация.Зашифрован 				  = Ложь;
	ДополнительнаяИнформация.Редактирует				  = Ложь;
	ДополнительнаяИнформация.ПодписанЭЦП 				  = Ложь;
	
	Возврат ДополнительнаяИнформация;
	
КонецФункции

// Записывает двоичные данные файла в информационную базу
//
// Параметры
// ПрисоединенныйФайлСсылка - ссылка на присоединенный файл
// ДвоичныеДанные - двоичные данные, которые требуется записать
//
Процедура ЗаписатьФайлВИнформационнуюБазу(ПрисоединенныйФайлСсылка, ДвоичныеДанные) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	//МенеджерЗаписи = РегистрыСведений.апПрисоединенныеФайлы.СоздатьМенеджерЗаписи();
	//МенеджерЗаписи.ПрисоединенныйФайл = ПрисоединенныйФайлСсылка;
	//МенеджерЗаписи.ХранимыйФайл = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
	//МенеджерЗаписи.Записать(Истина);
		
	// ПрисоединенныйФайлСсылка.ПолучитьОбъект();
	ПрисоединенныйФайлСсылка.ХранимыйФайл = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
  	
КонецПроцедуры

Функция ИзвлечьТекст(ДвоичныеДанные, Расширение, ИзвлеченныйТекст)
	
	Перем Отказ;
	
	Если ФайловыеФункции.ЭтоПлатформаWindows() И ФайловыеФункции.ФоновоеИзвлечениеТекстовФайловНаСервере() Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		ИзвлеченныйТекст = ФайловыеФункцииКлиентСервер.ИзвлечьТекстВоВременноеХранилище(ИмяВременногоФайла, , Отказ);
		УдалитьФайлы(ИмяВременногоФайла);
		
		Если Отказ Тогда
			Возврат Перечисления.СтатусыИзвлеченияТекстаФайлов.ИзвлечьНеУдалось;
		Иначе
			Возврат Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
		КонецЕсли;
	Иначе
		ИзвлеченныйТекст = "";
		Возврат Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
	КонецЕсли;
	
КонецФункции   

// Создает объект в справочнике для хранения файлов и заполняет его реквизиты по переданным параметрам.
//
// Параметры:
//  ВладелецФайла                  - ЛюбаяСсылка - владелец файла;
//  ИмяБезРасширения               - Строка - имя файла без расширения;
//  РасширениеБезТочки             - Строка - расширение файла (без точки вначале);
//  ВремяИзменения                 - Дата - дата и время изменения файла (местное время);
//  ВремяИзмененияУниверсальное    - Дата - дата и время изменения файла (UTC+0:00);
//  АдресФайлаВоВременномХранилище - Строка - адрес, указывающий на двоичные данные во временном хранилище;
//  АдресВременногоХранилищаТекста - Строка - адрес, указывающий на извлеченный текст из файла во временном хранилище.
//
// Возвращаемое значение:
//  Ссылка - ссылка на созданный объект.
Функция ДобавитьФайл(
			ВладелецФайла,
			ИмяБезРасширения,
			РасширениеБезТочки,
			ВремяИзменения,
			ВремяИзмененияУниверсальное,
			АдресФайлаВоВременномХранилище,
			АдресВременногоХранилищаТекста = "",
			// ЭД
			ИмяСправочника = "") Экспорт
			
	ПолноеИмяСправочника = "апПрикрепленныеФайлы";
			
	СсылкаНового = Справочники[ПолноеИмяСправочника].ПолучитьСсылку();
	ПрисоединенныйФайл = Справочники[ПолноеИмяСправочника].СоздатьЭлемент();
	ПрисоединенныйФайл.УстановитьСсылкуНового(СсылкаНового);
	
	ПрисоединенныйФайл.ВладелецФайла	= ВладелецФайла;	
	ПрисоединенныйФайл.ДатаСоздания		= ТекущаяДатаСеанса();
	ПрисоединенныйФайл.Описание			= "";
	ПрисоединенныйФайл.Наименование		= ИмяБезРасширения;
	ПрисоединенныйФайл.Расширение		= РасширениеБезТочки;
	ПрисоединенныйФайл.Автор		    = РасширениеБезТочки;	
	ПрисоединенныйФайл.ТипХраненияФайла = ФайловыеФункции.ПолучитьТипХраненияФайлов();
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
	
	ПрисоединенныйФайл.Размер = ДвоичныеДанные.Размер();
	
	ТранзакцияАктивна = Ложь;
	
	Попытка
		Если ПрисоединенныйФайл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			НачатьТранзакцию();
			ТранзакцияАктивна = Истина;
			//ЗаписатьФайлВИнформационнуюБазу(СсылкаНового, ДвоичныеДанные);
			
			//УстановитьПривилегированныйРежим(Истина);
	 		ПрисоединенныйФайл.ХранимыйФайл = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
 
			ПрисоединенныйФайл.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
			ПрисоединенныйФайл.ПутьКФайлу = "";
		Иначе
			
			// добавить в один из томов (где есть свободное место)
			ФайловыеФункции.ДобавитьНаДиск(ДвоичныеДанные, ПрисоединенныйФайл.ПутьКФайлу, ПрисоединенныйФайл.Том, ВремяИзменения, "",
											ИмяБезРасширения, РасширениеБезТочки, ПрисоединенныйФайл.Размер, Ложь);
			
		КонецЕсли;
		
		СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
		ИзвлеченныйТекст = "";
		
		Если ЭтоАдресВременногоХранилища(АдресВременногоХранилищаТекста) Тогда
			ИзвлеченныйТекст = ФайловыеФункции.ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
			СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
			//
		ИначеЕсли НЕ ФайловыеФункции.ФоновоеИзвлечениеТекстовФайловНаСервере() Тогда
			// Тексты извлекаются сразу, а не в фоновом задании
			СтатусИзвлеченияТекста = ИзвлечьТекст(ДвоичныеДанные, ПрисоединенныйФайл.Расширение, ИзвлеченныйТекст);
		КонецЕсли;
		
		ПрисоединенныйФайл.СтатусИзвлеченияТекста = СтатусИзвлеченияТекста;
		ПрисоединенныйФайл.ТекстХранилище = Новый ХранилищеЗначения(ИзвлеченныйТекст);
		
		Попытка
			ПрисоединенныйФайл.Записать();
		Исключение
			
			КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = НСтр("ru = 'Ошибка при добавлении файла ""%1"": '") + КраткоеПредставлениеОшибки;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ИмяБезРасширения + "." + РасширениеБезТочки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Если ТранзакцияАктивна Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			Возврат Неопределено;
		КонецПопытки;
		
		Если ТранзакцияАктивна Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	
	Исключение
		Если ТранзакцияАктивна Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Добавление присоединенного файла'"), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ПрисоединенныйФайл.Ссылка;
	
КонецФункции

Функция СгенерироватьФайлаНастроекАгентПлюсСОД(СтруктураНастроек, Отказ = Ложь) Экспорт
	 
	ТекстОшибки = "";
	Если апСерверМодуль.ПроверкаНастроекАгентСервера(СтруктураНастроек, ТекстОшибки) Тогда					    
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Отказ = Истина;
		Возврат "";
	КонецЕсли;			
	
	ТекстОшибки    = "";
	ТекстСообщения = "";
	ФайлНастроек = апСерверМодуль.ГенерацияФайлаНастроек(СтруктураНастроек, ТекстОшибки, ТекстСообщения);
	Если ФайлНастроек = Неопределено Тогда	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);	
		Отказ = Истина;
		Возврат "";
	КонецЕсли;
	
	апСерверМодуль.ДополнитьСлешВПуть(СтруктураНастроек.Папка);
	
	ИмяФайла = СтруктураНастроек.Папка + "config.xml";
	
	ФайлНастроек.Записать(ИмяФайла, КодировкаТекста.UTF16);
	
	Возврат ИмяФайла;
	
КонецФункции

// Выполнение команд из справочника "Команды"
//
Процедура ВыполнениеКоманд(КодНастройки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КодНастройки) Тогда
		ЗаписьЖурналаРегистрации("Выполнение команды с кодом " + КодНастройки, УровеньЖурналаРегистрации.Ошибка, , ,  "Нет кода настройки");
		Возврат;
	КонецЕсли;
	
	Команда = Справочники.апКоманды.НайтиПоКоду(КодНастройки);
	
	ЗаписьЖурналаРегистрации("Выполнение команды  " + Команда.Наименование, УровеньЖурналаРегистрации.Информация, , , "Начало выполнения");
	
	Если НЕ ЗначениеЗаполнено(Команда) ИЛИ Команда.ПометкаУдаления Тогда
		Если Команда.ПометкаУдаления Тогда
			ТекстОшибки = "Команда помечена на удаление";
		Иначе
			ТекстОшибки = "Команда не существует";
		КонецЕсли;
		ЗаписьЖурналаРегистрации("Выполнение команды с кодом " + КодНастройки, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);		
		Возврат;
	КонецЕсли;  
	
	#Если Не ТолстыйКлиентУправляемоеПриложение Тогда
		ТекстСообщения = "Выполнение команды доступно только в режиме запуска ""Толстый клиент""";
		ЗаписьЖурналаРегистрации("Выполнение команды " + Команда.Наименование, УровеньЖурналаРегистрации.Информация, , , ТекстСообщения);
		Возврат;	
	#КонецЕсли
	
	Попытка
		Выполнить(Команда.Параметр);
		
		ТекстСообщения = "Выполнение команды успешно завершено. Дата: " + Строка(ТекущаяДата());
		ЗаписьЖурналаРегистрации("Выполнение команды " + Команда.Наименование, УровеньЖурналаРегистрации.Информация, , , ТекстСообщения);				
	Исключение
		ЗаписьЖурналаРегистрации("Выполнение команды " + Команда.Наименование, УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());				
	КонецПопытки; 	
	
КонецПроцедуры // Процедура ВыполнениеКоманд()

// Функция проверяет константу с каталогом временных файлов.
// Если он не задан, то возвращает системный каталог временных файлов - в зависимости 
// от значения параметра ОбязательноВернуть
Функция ПолучитьКаталогВременныхФайлов(ОбязательноВернуть = Истина) Экспорт
	ИмяКаталога = Константы.апКаталогВременныхФайлов.Получить();
	
	КаталогНаДиске = Новый Файл(ИмяКаталога);
	
	Если (Не КаталогНаДиске.Существует()) Или (Не ЗначениеЗаполнено(ИмяКаталога)) Тогда
		Если ОбязательноВернуть Тогда 
			ИмяКаталога = КаталогВременныхФайлов();
		Иначе
			ИмяКаталога = "";	
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИмяКаталога;	
КонецФункции

// Очищаем по списку агентов за указанный период записи в регистре сведений апТрекиПеремещений
//
Процедура ОчиститьТрекиПоАгентамЗаПериод(НачДата, КонДата, СписокАгентов) Экспорт
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	апТрекиПередвижений.Агент,
	|	апТрекиПередвижений.Ключ
	|ИЗ
	|	РегистрСведений.апТрекиПередвижений КАК апТрекиПередвижений
	|ГДЕ
	|	апТрекиПередвижений.ДатаСоздания МЕЖДУ &НачДата И &КонДата
	|	И апТрекиПередвижений.Агент В(&СписокАгентов)";
	
	Запрос.УстановитьПараметр("НачДата", 	   НачДата);
	Запрос.УстановитьПараметр("КонДата", 	   КонДата);
	Запрос.УстановитьПараметр("СписокАгентов", СписокАгентов);
	
	Выборка = Запрос.Выполнить().Выбрать();
 
	Менеджер = РегистрыСведений.апТрекиПередвижений.СоздатьМенеджерЗаписи();
	
	Пока Выборка.Следующий() Цикл
		Менеджер.Агент        = Выборка.Агент;
		Менеджер.Ключ         = Выборка.Ключ;
		Менеджер.Прочитать();
		
		Если Менеджер.Выбран() Тогда
			Менеджер.Удалить();
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

//Функция по значению перечисления возвращает наименование документа как оно задано в метаданных
//
Функция ВернутьИмяДокументаПоЭлементуПеречисления(Эл) Экспорт
	ИмяДокумента = "";
	
	Если Эл = ПредопределенноеЗначение("Перечисление.апВидыДокументов.Заказ") Тогда
		ИмяДокумента = "ЗаказКлиента";
	ИначеЕсли Эл = ПредопределенноеЗначение("Перечисление.апВидыДокументов.Поступление") Тогда
		ИмяДокумента = "ПоступлениеТоваровУслуг";
	ИначеЕсли Эл = ПредопределенноеЗначение("Перечисление.апВидыДокументов.Реализация") Тогда
		ИмяДокумента = "РеализацияТоваровУслуг";
	ИначеЕсли Эл = ПредопределенноеЗначение("Перечисление.апВидыДокументов.ПКО") Тогда
		ИмяДокумента = "ПриходныйКассовыйОрдер";
	ИначеЕсли Эл = ПредопределенноеЗначение("Перечисление.апВидыДокументов.РКО") Тогда
		ИмяДокумента = "РасходныйКассовыйОрдер";
	ИначеЕсли Эл = ПредопределенноеЗначение("Перечисление.апВидыДокументов.Мерчендайзинг") Тогда
		ИмяДокумента = "апМерчендайзинг";	
	ИначеЕсли Эл = ПредопределенноеЗначение("Перечисление.апВидыДокументов.Посещение") Тогда
		ИмяДокумента = "апПосещение";	
	ИначеЕсли Эл = ПредопределенноеЗначение("Перечисление.апВидыДокументов.Возврат") Тогда
		ИмяДокумента = "ВозвратТоваровОтКлиента";
	ИначеЕсли Эл = ПредопределенноеЗначение("Перечисление.апВидыДокументов.Перемещение") Тогда
		ИмяДокумента = "ПеремещениеТоваров";	
	ИначеЕсли Эл = ПредопределенноеЗначение("Перечисление.апВидыДокументов.СчетФактура") Тогда
		ИмяДокумента = "СчетФактураВыданный";	
	ИначеЕсли Эл = ПредопределенноеЗначение("Перечисление.апВидыДокументов.Долг") Тогда
		ИмяДокумента = "";
	ИначеЕсли Эл = ПредопределенноеЗначение("Перечисление.апВидыДокументов.Маршрут") Тогда
		ИмяДокумента = "";	
	ИначеЕсли Эл = ПредопределенноеЗначение("Перечисление.апВидыДокументов.Задание") Тогда
		ИмяДокумента = "апЗадание";	
	КонецЕсли;
		
	Возврат ИмяДокумента;
КонецФункции
       
Функция ПолучитьКаталогПрограммы() Экспорт
	Возврат КаталогПрограммы();	
КонецФункции

Функция Транслит(РусскоеСлово) Экспорт
	РусскийАлфавит = "абвгдеёжзийклмнопрстуфхцчшщыэюяabcdefghijklmnopqrstuvwxyz1234567890";
	ТранслитАлфавит = "a 1b 2v 3g 4d 5e 6yo7zh8z 9i 10i 11k 12l 13m 14n 15o 16p 17r 18s 19t 20u 21f 22h 23c 24ch25sh26sh27i 28e 29yu30ya31a 32b 33c 34d 35e 36f 37g 38h 39i 40j 41k 42l 43m 44n 45o 46p 47q 48r 49s 50t 51u 52v 53w 54x 55y 56z 571 582 593 604 615 626 637 648 659 660 67";
	
	СловоВТранслите = "";
	
	Для Х=1 По СтрДлина(РусскоеСлово) Цикл
		РусскаяБуква = НРег(Сред(РусскоеСлово,Х,1));
		Н = Найти(РусскийАлфавит,РусскаяБуква);
		Если Н>0 Тогда
			Т = Найти(ТранслитАлфавит,Н);
			ТранслитБуква = СокрЛП(Сред(ТранслитАлфавит,Т-2,2));
			СловоВТранслите = СловоВТранслите+ТранслитБуква;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СловоВТранслите;
КонецФункции

// Процедура переводит переданную строку в транслит, убирая все символы, отличные от букв
//
Функция ТранслитБезСимволов(СтрокаДляПеревода) Экспорт
	ПромПреф = НРег(СокрЛП(СтрокаДляПеревода));
	УбратьСимволы = "()\/*:.+""ьъ',";
	СчетчикЦикла = 0;
	Для Поз = 1 По СтрДлина(УбратьСимволы) Цикл
		Символ = Сред(УбратьСимволы,Поз,1);
		ПромПреф = СтрЗаменить(ПромПреф,Символ,"");
	КонецЦикла;
	
	РусСимволы = "абвгдезийклмнопрстуфхцыэю -";
	АнгСимволы = "abvgdeziyklmnoprstufhcieu__";
	КолСимв = СтрДлина(РусСимволы);
	Для Поз = 1 По КолСимв Цикл
		РСимв = Сред(РусСимволы, Поз, 1);
		АСимв = Сред(АнгСимволы, Поз, 1);
		ПромПреф = СтрЗаменить(ПромПреф, РСимв, АСимв);
	КонецЦикла;
	РусСимволы = "ё ж ч ш щ я ";
	АнгСимволы = "yozhchshshya";
	КолСимв = СтрДлина(РусСимволы);
	Для Поз = 1 По КолСимв / 2 Цикл
		РСимв = Сред(РусСимволы, Поз * 2 - 1, 1);
		АСимв = Сред(АнгСимволы, Поз * 2 - 1, 2);
		ПромПреф = СтрЗаменить(ПромПреф, РСимв, АСимв);
	КонецЦикла;
	
	СтрокаВТранслите = Врег(Лев(ПромПреф,1))+Сред(ПромПреф,2);
	
	Возврат СтрокаВТранслите;
КонецФункции

//для HTML-отчетов
Функция СформироватьОтчетДляОтправки(ОтчетСсылка, ПараметрыЗапроса) Экспорт

	//ТабДок = Новый ТабличныйДокумент;
	
	//Если Не ТипОтчета Тогда
	//	
	//	ПутьКВнешнемуОтчету = КаталогВременныхФайлов() + Наименование + ".erf";
	//	ФайлОтчета = ХранилищеВнешнейОбработки.Получить();
	//	ФайлОтчета.Записать(ПутьКВнешнемуОтчету);
	//	ОбъектОтчета = ВнешниеОтчеты.Создать(ПутьКВнешнемуОтчету);
	//	ОбъектОтчета.Агент = Агент;
	//	
	//	Для Каждого ТекПараметр Из ПараметрыЗапроса Цикл
	//		Если ОбъектОтчета.Метаданные().Реквизиты.Найти(ТекПараметр.Ключ) = Неопределено Тогда 
	//			Сообщить("Не найден параметр отчета '" + ТекПараметр.Ключ + "'." + Символы.ПС + "Отчет будет сформирован некорректно.", СтатусСообщения.Важное);
	//		Иначе
	//			ОбъектОтчета[ТекПараметр.Ключ] = ТекПараметр.Значение;
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	Попытка
	//		ОбъектОтчета.СформироватьОтчет(ТабДок);
	//	Исключение КонецПопытки;
	//	
	//Иначе
	
	
	КаталогДляотчета = апСерверМодуль.ПолучитьКаталогВременныхФайлов(Истина) + "\reports\";
	
	//сначала почистим каталог
	УдалитьФайлы(КаталогДляотчета, "*.*");
	
	//добавим параметр "ПутьКФайлуОтчета"
	ПолныйПутьКФайлуОтчета = КаталогДляотчета + ОтчетСсылка.ИмяФайла + ".html";	
	ПараметрыЗапроса.Вставить("ПутьКФайлуОтчета", ПолныйПутьКФайлуОтчета);
	
	Попытка
		Выполнить(ОтчетСсылка.ТекстКоманды);
	Исключение
		ПолныйПутьКФайлуОтчета = "";	
	КонецПопытки;	
	
	Возврат ПолныйПутьКФайлуОтчета;	
КонецФункции // Функция СформироватьОтчетДляОтправки(ОтчетСсылка, ПараметрыЗапроса) Экспорт
