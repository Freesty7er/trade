// Позволяет пользователю выбрать каталог на диске.
//
// Параметры
//  ИмяКаталога  – Строка, содержащая начальный путь к каталогу на диске.
//	ЗаголовокДиалога - Строка, содержащая заголовок диалога
//
// Возвращаемое значение:
//   Булево – Истина, если каталог выбран, Ложь, если нет.
//
Функция ВыбратьКаталог(ИмяКаталога, Знач ЗаголовокДиалога = "Укажите каталог") Экспорт

	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Заголовок = ЗаголовокДиалога;
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Каталог = ИмяКаталога;

	Если Диалог.Выбрать() Тогда
		ИмяКаталога = Диалог.Каталог;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции // ВыбатьКаталог()

// Создает и устанавливает реквизиты диалога выбора фала.
//
// Параметры
//  МножественныйВыбор – Булево, признак множественного выбора.
//  НачальныйКаталог – Строка, содержащая начальный каталог выбора файла.
//
// Возвращаемое значение:
//   ДиалогВыбораФайлов – созданный диалог.
//
Функция ПолучитьДиалогВыбораФайлов(МножественныйВыбор, НачальныйКаталог = "") Экспорт

	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Каталог = НачальныйКаталог;
	Диалог.Заголовок = "Выберите файл...";
	Диалог.Фильтр = ПолучитьФильтрФайлов();
	Диалог.ПредварительныйПросмотр = Истина;
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.МножественныйВыбор = МножественныйВыбор;

	Возврат Диалог;

КонецФункции // ПолучитьДиалогВыбораФайлов()

// Формирует строку фильтра для диалога выбора файла с типами файлов.
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//   Строка – фильтр по типам файлов для диалога выбора файла.
//
Функция ПолучитьФильтрФайлов() Экспорт

	Возврат "Все файлы (*.*)|*.*|"
	      + "Документ Microsoft Word (*.doc)|*.doc|"
	      + "Документ Microsoft Excell (*.xls)|*.xls|"
	      + "Документ Microsoft PowerPoint (*.ppt)|*.ppt|"
	      + "Документ Microsoft Visio (*.vsd)|*.vsd|"
	      + "Письмо электронной почты (*.msg)|*.msg|"
	      + "Картинки (*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf)|*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf|"
	      + "Текстовый документ (*.txt)|*.txt|"
	      + "Табличный документ (*.mxl)|*.mxl|";
		  
КонецФункции // ПолучитьФильтрФайлов()

// Формирует строку фильтра для диалога выбора картинки с типами файлов.
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//   Строка – фильтр по типам файлов для диалога выбора картинки.
//
Функция ПолучитьФильтрИзображений() Экспорт

	Возврат "Все картинки (*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf)|*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf|" 
	      + "Формат bmp (*.bmp;*.dib;*.rle)|*.bmp;*.dib;*.rle|"
	      + "Формат jpeg (*.jpg;*.jpeg)|*.jpg;*.jpeg|"
	      + "Формат tiff (*.tif)|*.tif|"
	      + "Формат gif (*.gif)|*.gif|"
	      + "Формат png (*.png)|*.png|"
	      + "Формат icon (*.ico)|*.ico|"
	      + "Формат метафайл (*.wmf;*.emf)|*.wmf;*.emf|";

КонецФункции // ПолучитьФильтрИзображений()
	  
Процедура ПолучитьТекстЗаголовкаИРасписанияРегламентнойНастройки(ЗаданиеСуществует, ТекстЗаголовка, ТекстРасписания, РасписаниеАктивно, ТекущееРасписание) Экспорт
	
	//РасписаниеАктивно = Ложь;
	
	ТекстЗаголовка = "Дополнительные настройки задания";
	
	Если Не ЗаданиеСуществует Тогда
		
		//ТекстЗаголовка = "Создать регламентную настройку ...";	
		ТекстРасписания = "<Расписание не задано>";
		
	Иначе
		
		//ТекстЗаголовка = "Дополнительные настройки расписания ...";
		Если РасписаниеАктивно Тогда
			ПрефиксРасписания = "Расписание: ";
			РасписаниеАктивно = Истина;
		Иначе
			ПрефиксРасписания = "Расписание (НЕ АКТИВНО): ";
		КонецЕсли;
		
		ТекстРасписания = ПрефиксРасписания + Строка(ТекущееРасписание);
		
	КонецЕсли;	
	
КонецПроцедуры	  

// Заполняет список существующих в КПК документов для выбора
//
// Параметры
//  Элемент формы для которого необходимо создать список выбор
Процедура ЗаполнитьСписокДокументовДляВыбора(ЭлементФормы)Экспорт
	
	ЭлементФормы.Добавить("Order",     "Order");
	ЭлементФормы.Добавить("Inventory", "Inventory");
	ЭлементФормы.Добавить("Merch",	   "Merch");
	ЭлементФормы.Добавить("Move", 	   "Move");
	ЭлементФормы.Добавить("Cash", 	   "Cash");
	ЭлементФормы.Добавить("Visit", 	   "Visit");
	ЭлементФормы.Добавить("Arrival",   "Arrival");
	ЭлементФормы.Добавить("Sale", 	   "Sale");
	ЭлементФормы.Добавить("OutCash",   "OutCash");
	ЭлементФормы.Добавить("InvFact",   "InvFact");
	ЭлементФормы.Добавить("RSale",     "RSale");
	
КонецПроцедуры

// Функция предназначена для преобразования обычного текста в HTML формат
// Параметры:
//	Текст     - Строка - текст, преобразуемый в HTML-формат;
//	Кодировка - Строка - кодировка письма; 
//
Функция ПреобразоватьТекстВHTML(Текст) Экспорт
	
	Результат = ПреобразоватьФрагментТекстаВHTML(Текст);
	
	ФорматХТМЛ = "<HTML><HEAD>
	|<META http-equiv=Content-Type content=" + """" + "text/html; charset=utf-8""" + ">
	|<META content=" + """" + "MSHTML 6.00.2800.1400" + """" + " name=GENERATOR></HEAD>
	|<BODY>" + Результат + "</BODY></HTML>";
	
	Возврат ФорматХТМЛ;

КонецФункции

// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ПреобразоватьТекстИзХТМЛФорматаВПростой(ТекстВФорматеХТМЛ) Экспорт

	НовыйHTMLДокумент = Новый COMОбъект("HtmlFile");
	НовыйHTMLДокумент.open("text/html");
	НовыйHTMLДокумент.write(ТекстВФорматеХТМЛ);
	НовыйHTMLДокумент.close();
	
	Возврат СтрЗаменить(НовыйHTMLДокумент.all.item(0).innerText, Символ(13), "");

КонецФункции

//Функция предназначена для преобразования фрагмента обычного текста в HTML формат
//
Функция ПреобразоватьФрагментТекстаВHTML(Текст) Экспорт
	
	Результат = "";
	Результат = СтрЗаменить(Текст, "<" , "&lt");
	Результат = СтрЗаменить(Результат, ">" , "&gt");
	Результат = СтрЗаменить(Результат, Символы.ПС, "<BR>");
	Результат = "<P>" + Результат + "</P>";
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные
//

Процедура УдалитьФайл(ПолноеИмяФайла)
	
	Файл = Новый Файл(ПолноеИмяФайла);
	Файл.УстановитьТолькоЧтение(Ложь);
	УдалитьФайлы(ПолноеИмяФайла);
	
КонецПроцедуры

// Открывает форму присоединенного файла. Может использоваться как обработчик открытия
// присоединенного файла.
// Параметры
//  ПрисоединенныйФайл - ссылка на файл, карточку которого нужно открыть
//  СтандартнаяОбработка - булево, всегда устанавливается в Ложь
//
Процедура ОткрытьФормуПрисоединенногоФайла(ПрисоединенныйФайл, СтандартнаяОбработка = Ложь) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		ПараметрыОткрытия = Новый Структура("Ключ", ПрисоединенныйФайл);
		ОткрытьФорму("Справочник.апПрикрепленныеФайлы.Форма.ПрисоединенныйФайл", ПараметрыОткрытия,, ПрисоединенныйФайл);
	КонецЕсли;
	
КонецПроцедуры 

// Процедура для обработки команды добавления файлов. Пользователь выбирает
// файлы в диалоге выбора файлов и система пытается поместить их в хранилище файлов,
// если это возможно (если удовлетворяются: условия максимально допустимого размера,
// имеет допустимое расширение, наличие свободного места в томе, при хранении файлов
// в томах, а так же возможны другие условия).
//
// Параметры:
//  ВладелецФайла           - любая ссылка - владелец файла
//  УникальныйИдентификатор - уникальный идентификатор формы
//  Фильтр                  - Строка - необязательный параметр,
//                            позволяет задать фильтр выбираемого файла,
//                            например, картинки для номенклатуры
//
Процедура ДобавитьФайлы(ВладелецФайла, УникальныйИдентификатор, Фильтр = "") Экспорт
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	НастройкиРаботыСФайлами = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами();
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ВыборФайла.МножественныйВыбор = Истина;
		ВыборФайла.Заголовок = НСтр("ru = 'Выбор файла'");
		ВыборФайла.Фильтр = ?(ЗначениеЗаполнено(Фильтр), Фильтр, НСтр("ru = 'Все файлы (*.*)|*.*'"));
		
		Если ВыборФайла.Выбрать() Тогда
			ПрисоединенныеФайлыМассив = Новый Массив;
			ПоместитьВыбранныеФайлыВХранилище(ВыборФайла.ВыбранныеФайлы, ВладелецФайла,
												НастройкиРаботыСФайлами,
												ПрисоединенныеФайлыМассив,
												УникальныйИдентификатор);
			
			Если ПрисоединенныеФайлыМассив.Количество() = 1 Тогда
				ПрисоединенныйФайл = ПрисоединенныеФайлыМассив[0];
				
				ПоказатьОповещениеПользователя(
								НСтр("ru = 'Создание:'"),
								ПолучитьНавигационнуюСсылку(ПрисоединенныйФайл),
								ПрисоединенныйФайл,
								БиблиотекаКартинок.Информация32);
				
				//ОткрытьФорму("ОбщаяФорма.ПрисоединенныйФайл", 
				//	Новый Структура("ПрисоединенныйФайл, ЭтоНовый", ПрисоединенныйФайл, Истина),, 
				//	ПрисоединенныйФайл);
			КонецЕсли;
			
			Если ПрисоединенныеФайлыМассив.Количество() > 0 Тогда
				//ОповеститьОбИзменении(ПрисоединенныеФайлыМассив[0]);
				Оповестить("Запись_ПрисоединенныйФайл", Новый Структура("ЭтоНовый", Истина), 
					ПрисоединенныеФайлыМассив);
			КонецЕсли;
		
		КонецЕсли;
		
	Иначе // Если веб-клиент без подключенного расширения
		// артур тут надо дописать
		#Если ВебКлиент Тогда
			//ПрисоединенныйФайл = ПоместитьВыбранныеФайлыВХранилищеВеб(ВладелецФайла, НастройкиРаботыСФайлами, УникальныйИдентификатор);
			//
			//Если ПрисоединенныйФайл <> Неопределено Тогда
			//	ПоказатьОповещениеПользователя(
			//	НСтр("ru = 'Создание'"),
			//	ПолучитьНавигационнуюСсылку(ПрисоединенныйФайл),
			//	ПрисоединенныйФайл,
			//	БиблиотекаКартинок.Информация32);
			//	ОповеститьОбИзменении(ПрисоединенныйФайл);
			//	ОткрытьФорму("ОбщаяФорма.ПрисоединенныйФайл", 
			//	Новый Структура("ПрисоединенныйФайл", ПрисоединенныйФайл),, ПрисоединенныйФайл);
			//КонецЕсли;
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

Функция СообщениеОПревышенииМаксимальноДопустимогоРазмераФайла(РазмерФайла, МаксимальныйРазмерФайла, ИмяФайла)
	
	РазмерВМб = РазмерФайла / (1024 * 1024);
	РазмерВМбМакс = МаксимальныйРазмерФайла / (1024 * 1024);
	
	Возврат
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Размер файла ""%1"" (%2 Мб) превышает максимально допустимый размер файла (%3 Мб).'"),
			ИмяФайла,
			ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб),                
			ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМбМакс));
	
КонецФункции
  
Процедура ОбновитьИндикаторПрогресса(КоличествоФайлов, ТекущаяПозиция, ИмяФайла, РазмерФайла)
	
	ИндикаторПроцент = ТекущаяПозиция * 100 / КоличествоФайлов;
	
	РазмерВМб = РазмерФайла / (1024 * 1024);
	
	НадписьПодробнее =
	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Обрабатывается файл ""%1"" (%2 Мб)...'"),
		ИмяФайла, 
		ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
		
	ТекстСостояния = НСтр("ru = 'Импорт файлов с диска...'");
	
	Состояние(ТекстСостояния, ИндикаторПроцент, НадписьПодробнее, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

Процедура ИнформироватьПользователяОСохраненииФайла(ИмяФайла, РазмерФайла)
	
	ТекстПояснения =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Идет сохранение файла ""%1"" (%2 Мб).
						|Пожалуйста, подождите...'"),
			ИмяФайла,
			ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерФайла));
	
	Состояние(ТекстПояснения);
	
КонецПроцедуры

// Процедура для помещения файлов с диска в хранилище присоединенных файлов
// Параметры:
//  ВыбранныеФайлы - массив - пути к файлам на диске
//  ВладелецФайла - любая ссылка - владелец файла
//  МаксРазмерФайла - число - максимальный размер файла
//  ИзвлекатьТекстыФайловНаСервере - булево - извлекать тексты файлов на сервере
//  УникальныйИдентификатор - уникальный идентификатор формы
//
//  ПрисоединенныеФайлыМассив - массив добавленных в хранилище файлов (ссылки)
//
Процедура ПоместитьВыбранныеФайлыВХранилище(
			ВыбранныеФайлы,
			ВладелецФайла,
			НастройкиРаботыСФайлами,
			ПрисоединенныеФайлыМассив,
			УникальныйИдентификатор)
	
	МаксРазмерФайла						= НастройкиРаботыСФайлами.МаксимальныйРазмерФайла;
	ИзвлекатьТекстыФайловНаСервере		= НастройкиРаботыСФайлами.ИзвлекатьТекстыФайловНаСервере;
	ЗапретЗагрузкиФайловПоРасширению	= НастройкиРаботыСФайлами.ЗапретЗагрузкиФайловПоРасширению;
	СписокЗапрещенныхРасширений			= НастройкиРаботыСФайлами.СписокЗапрещенныхРасширений;
	
	ТекущаяПозиция = 0;
	
	Для Каждого ПолноеИмяФайла Из ВыбранныеФайлы Цикл
		
		ТекущаяПозиция = ТекущаяПозиция + 1;
		
		Файл = Новый Файл(ПолноеИмяФайла);
		
		Если Файл.Размер() > МаксРазмерФайла Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОПревышенииМаксимальноДопустимогоРазмераФайла(Файл.Размер(), МаксРазмерФайла, Файл.Имя));
			Продолжить;
		КонецЕсли;
		
		Если Не ФайловыеФункцииКлиентСервер.РасширениеФайлаРазрешеноДляЗагрузки(ЗапретЗагрузкиФайловПоРасширению, СписокЗапрещенныхРасширений, Файл.Расширение) Тогда
			ВызватьИсключение
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Загрузка файлов с расширением ""%1"" запрещена. Обратитесь к администратору системы.'"),
					Файл.Расширение);
		КонецЕсли;
		
		Если ИзвлекатьТекстыФайловНаСервере Тогда
			АдресВременногоХранилищаТекста = "";
		Иначе
			АдресВременногоХранилищаТекста = ФайловыеФункцииКлиентСервер.ИзвлечьТекстВоВременноеХранилище(ПолноеИмяФайла, УникальныйИдентификатор);
		КонецЕсли;
	
		ВремяИзменения = ТекущаяДата();
		ВремяИзмененияУниверсальное = Файл.ПолучитьУниверсальноеВремяИзменения();
		
		Если ВыбранныеФайлы.Количество() >1 Тогда
			ОбновитьИндикаторПрогресса(ВыбранныеФайлы.Количество(), ТекущаяПозиция, Файл.Имя, Файл.Размер());
		Иначе
			ИнформироватьПользователяОСохраненииФайла(Файл.Имя, Файл.Размер());
		КонецЕсли;
		
		ПомещаемыеФайлы = Новый Массив;
		Описание = Новый ОписаниеПередаваемогоФайла(Файл.ПолноеИмя, "");
		ПомещаемыеФайлы.Добавить(Описание);
		
		ПомещенныеФайлы = Новый Массив;
		
		Если НЕ ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, УникальныйИдентификатор) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка при помещении файла в хранилище: %1'"), Файл.ПолноеИмя) );
			Продолжить;
		КонецЕсли;
		
		АдресВременногоХранилищаФайла = ПомещенныеФайлы[0].Хранение;
		
		// Создадим карточку Файла в БД
		ПрисоединенныйФайл = апСерверМодуль.ДобавитьФайл(
			ВладелецФайла,
			Файл.ИмяБезРасширения,
			ФайловыеФункцииКлиентСервер.РасширениеБезТочки(Файл.Расширение),
			ВремяИзменения,
			ВремяИзмененияУниверсальное,
			АдресВременногоХранилищаФайла,
			АдресВременногоХранилищаТекста);
		
		Если ПрисоединенныйФайл = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПрисоединенныеФайлыМассив.Добавить(ПрисоединенныйФайл);
		
	КонецЦикла;
	
	Состояние("");
	
КонецПроцедуры

// Процедура для обработки команды открытия файла. Если файл открывается для чтения,
// Получает файл в рабочий каталог пользователя, при этом ищет файл в рабочем каталоге
// и предлагает получить файл с сервера или открыть существующий. Если файл редактируется
// безусловно открывает файл в рабочем каталоге (если есть) или получает его сервера.
// Параметры:
//  ДанныеФайла - структура - данные файла
//  ФайлРедактируется - булево - истина, если файл открывается для редактирования, иначе ложь
//
Процедура ОткрытьФайл(ДанныеФайла, ДляРедактирования = Истина, ИмяФайла = Неопределено, ОткрыватьФайл = Истина) Экспорт
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	Если ПодключитьРасширениеРаботыСФайлами()Тогда
		ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
		РабочийКаталогПользователя = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
		
		Если ИмяФайла = Неопределено Тогда
			ПолноеИмяФайлаНаКлиенте = РабочийКаталогПользователя + ДанныеФайла.ОтносительныйПуть + ДанныеФайла.ИмяФайла;
		Иначе
			ПолноеИмяФайлаНаКлиенте = РабочийКаталогПользователя + ДанныеФайла.ОтносительныйПуть + ИмяФайла;
		КонецЕсли;
		
		Отказ = Ложь;
		
		ФайлНаДиске = Новый Файл(ПолноеИмяФайлаНаКлиенте);
		
		Если ЗначениеЗаполнено(ДанныеФайла.Редактирует) // файл уже редактируется
		   И ДляРедактирования
		   И ФайлНаДиске.Существует() Тогда
			ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
			ПолучитьФайл = Ложь;
		ИначеЕсли ФайлНаДиске.Существует() Тогда
			Если ОткрыватьФайл Тогда
				// Тут происходит процедура получения файла с сервера.
				// Либо берется сохраненный файл в каталоге пользователя, либо
				// обновляется с сервера
				ПолучитьФайл = ДиалогНужноПолучитьФайлССервера(ПолноеИмяФайлаНаКлиенте, ДанныеФайла, ДляРедактирования, Отказ);
				Если Отказ Тогда
					Возврат;
				КонецЕсли;
			Иначе
				ПолучитьФайл = Ложь;
			КонецЕсли;
		Иначе
			ПолучитьФайл = Истина;
		КонецЕсли;
		
		ФайлМожноОткрывать = Истина;
		
		Если ПолучитьФайл Тогда
			ПолноеИмяФайлаНаКлиенте = "";
			
			Если ИмяФайла = Неопределено Тогда
				ИмяФайлаНаКлиенте = ДанныеФайла.ИмяФайла;
			Иначе
				ИмяФайлаНаКлиенте = ИмяФайла;
			КонецЕсли;
			
			ФайлМожноОткрывать = ПолучитьФайлВРабочийКаталог(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла,
												ДанныеФайла.ОтносительныйПуть,
												ДанныеФайла.ДатаМодификацииУниверсальная,
												ИмяФайлаНаКлиенте,                    												
												РабочийКаталогПользователя,
												ПолноеИмяФайлаНаКлиенте);
																							
		КонецЕсли;
		
		Если ОткрыватьФайл Тогда
			Если ФайлМожноОткрывать Тогда
				Если ДляРедактирования Тогда
					ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
				Иначе
					ФайлНаДиске.УстановитьТолькоЧтение(Истина);
				КонецЕсли;
				ОткрытьФайлПриложением(ПолноеИмяФайлаНаКлиенте);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ДанныеФайла.ФайлРедактируется И ДанныеФайла.ФайлРедактируетТекущийПользователь Тогда
			ФайловыеФункцииКлиент.ПоказатьНапоминаниеПриРедактировании();
		КонецЕсли;
		
		Если ИмяФайла = Неопределено Тогда
			ИмяФайлаНаКлиенте = ДанныеФайла.ИмяФайла;
		Иначе
			ИмяФайлаНаКлиенте = ИмяФайла;
		КонецЕсли;

		ПолучитьФайл(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ИмяФайлаНаКлиенте, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьКаталогСФайлом(ДанныеФайла) Экспорт
	
	Перем ПолноеИмяФайла;
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		
		ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
		РабочийКаталогПользователя = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
		
		Если ПустаяСтрока(РабочийКаталогПользователя) Тогда
			Предупреждение(НСтр("ru = 'Не задан путь к локальному кэшу файлов'"));
			Возврат;
		КонецЕсли;
		
		ПолныйПуть = РабочийКаталогПользователя + ДанныеФайла.ОтносительныйПуть + ДанныеФайла.ИмяФайла;
		
		Файл = Новый Файл(ПолныйПуть);
		
		Если НЕ Файл.Существует() Тогда
			КодВозврата = Вопрос(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файл ""%1"" отсутствует в рабочем каталоге! Получить файл с сервера?'"), Файл.Имя),
			РежимДиалогаВопрос.ДаНет);
			
			Если КодВозврата <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
			
			ПолноеИмяФайлаНаКлиенте = "";
			ПолучитьФайлВРабочийКаталог(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, 
										ДанныеФайла.ОтносительныйПуть, 
										ДанныеФайла.ДатаМодификацииУниверсальная, 
										ДанныеФайла.ИмяФайла,
										РабочийКаталогПользователя, 
										ПолноеИмяФайлаНаКлиенте);	
										
			
		КонецЕсли;
		
		ФайловыеФункцииКлиент.ОткрытьПроводникСФайлом(ПолныйПуть);
	Иначе
		#Если ВебКлиент Тогда
			Предупреждение(НСтр("ru = 'Для выполнения данной операции вам нужно установить расширение работы с файлами.'"));
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры
 
Процедура ОткрытьФайлПриложением(ИмяОткрываемогоФайла)
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	Если РасширениеПодключено Тогда
		// Открыть Файл
		Попытка
			
			ЗапуститьПриложение(ИмяОткрываемогоФайла);
			
		Исключение
			
			Инфо = ИнформацияОбОшибке();
			Предупреждение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								  НСтр("ru = 'Описание=""%1""'"),
								  Инфо.Описание));
			
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры
       
Функция ДиалогНужноПолучитьФайлССервера(ПолноеИмяФайлаНаКлиенте, ДанныеФайла, ФайлРедактируется, Отказ = Ложь)
	
	ФайлНаДиске = Новый Файл(ПолноеИмяФайлаНаКлиенте);
	
	ДатаФайлаВБазе = МестноеВремя(ДанныеФайла.ДатаМодификацииУниверсальная);
	ДатаФайлаНаДиске = МестноеВремя(ФайлНаДиске.ПолучитьУниверсальноеВремяИзменения());
	
	Если (ДатаФайлаНаДиске - ДатаФайлаВБазе) > 1 Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Файл",						ПолноеИмяФайлаНаКлиенте);
		ПараметрыОткрытияФормы.Вставить("ВремяИзмененияНаСервере",	ДатаФайлаВБазе);
		ПараметрыОткрытияФормы.Вставить("ВРабочемКаталоге",			ДатаФайлаНаДиске);
		ПараметрыОткрытияФормы.Вставить("Заголовок",				НСтр("ru = 'В рабочем каталоге более новый файл'"));
		
		Если ФайлРедактируется Тогда
			Сообщение = НСтр("ru = 'Файл на локальном компьютере, отмеченный как взятый на редактирование, имеет более позднюю дату изменения. Открыть файл из локального каталога или взять из информационной базы и перезаписать?'");
		Иначе
			Сообщение = НСтр("ru = 'Файл на локальном компьютере имеет более позднюю дату, возможно, он был изменен. Открыть существующий или взять с сервера и перезаписать?'");
		КонецЕсли;
		
		ПараметрыОткрытияФормы.Вставить("Сообщение", Сообщение);
		
		Результат = ОткрытьФормуМодально("ОбщаяФорма.ВыборДействияПриОбнаруженииБолееНовогоФайла", ПараметрыОткрытияФормы);
		
		Если Результат = КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
			Возврат Истина;
		Иначе
			Отказ = Истина;
			Возврат Неопределено;
		КонецЕсли;
		
	ИначеЕсли (ДатаФайлаВБазе - ДатаФайлаНаДиске) > 1 Тогда // в базе более новый
		Если ФайлРедактируется Тогда // В рабочем каталоге на редактирование
			ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить("Файл",						ДатаФайлаВБазе);
			ПараметрыОткрытияФормы.Вставить("ВремяИзмененияНаСервере",	ДатаФайлаВБазе);
			ПараметрыОткрытияФормы.Вставить("ВРабочемКаталоге",			ДатаФайлаНаДиске);
			ПараметрыОткрытияФормы.Вставить("Заголовок",				НСтр("ru = 'В рабочем каталоге более старый файл'"));
			
			Сообщение = НСтр("ru = 'Файл на локальном компьютере, отмеченный как взятый на редактирование, имеет более раннюю дату изменения, чем на сервере. Открыть файл из локального каталога или взять из информационной базы и перезаписать?'");
			ПараметрыОткрытияФормы.Вставить("Сообщение", Сообщение);
			
			Ответ = ОткрытьФормуМодально("ОбщаяФорма.ВыборДействияПриОбнаруженииБолееНовогоФайла", ПараметрыОткрытияФормы);
			
			Если Ответ = КодВозвратаДиалога.Да Тогда  // Открыть существующий
				Возврат Ложь;
			ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда // Выйти ничего не делая
				Отказ = Истина;
				Возврат Ложь;
			ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда  // Перезаписать
				УдалитьФайл(ПолноеИмяФайлаНаКлиенте);
				Возврат Истина;
			КонецЕсли;
		Иначе // В рабочем каталоге на чтение
			УдалитьФайл(ПолноеИмяФайлаНаКлиенте);
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьФайлВРабочийКаталог(СсылкаНаДвоичныеДанныеФайла,
									ОтносительныйПуть,
									ДатаСоздания,
									ИмяФайла,
									РабочийКаталогПользователя = "",
									ПолноеИмяФайлаНаКлиенте) Экспорт
	
	
	Если РабочийКаталогПользователя = Неопределено Или ПустаяСтрока(РабочийКаталогПользователя) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КаталогСохранения = РабочийКаталогПользователя + ОтносительныйПуть;
	
	Попытка
		СоздатьКаталог(КаталогСохранения);
	Исключение
		СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		СообщениеОбОшибке = НСтр("ru = 'Ошибка создания каталога на диске:'") + " " + СообщениеОбОшибке;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		Возврат Ложь;
	КонецПопытки;
	
	Файл = Новый Файл(КаталогСохранения + ИмяФайла);
	Если Файл.Существует() Тогда
		Файл.УстановитьТолькоЧтение(Ложь);
		УдалитьФайлы(КаталогСохранения + ИмяФайла);
	КонецЕсли;
	
	ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(КаталогСохранения + ИмяФайла, СсылкаНаДвоичныеДанныеФайла);
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
	
	ПолученныеФайлы = Новый Массив;
	
	Если ПолучитьФайлы(ПолучаемыеФайлы, ПолученныеФайлы, , Ложь) Тогда
		ПолноеИмяФайлаНаКлиенте = ПолученныеФайлы[0].Имя;
		Файл = Новый Файл(ПолноеИмяФайлаНаКлиенте);		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Функция для обработки команды сохранения файла в каталог на диске.
// Так же используется как вспомогательная функция при сохранении файла с ЭЦП.
// Параметры:
//  ДанныеФайла - структура - данные файла
// Возвращаемое значение
//  имя сохраненного файла
//
Функция СохранитьФайлКак(ДанныеФайла) Экспорт
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.ПолноеИмяФайла = ДанныеФайла.ИмяФайла;
		ВыборФайла.Расширение = ДанныеФайла.Расширение;
		ВыборФайла.Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Все файлы (*.%1)|*.%1'"), ДанныеФайла.Расширение, ДанныеФайла.Расширение);
		
		Если НЕ ВыборФайла.Выбрать() Тогда
			Возврат "";
		КонецЕсли;
		
		РазмерВМб = ДанныеФайла.Размер / (1024 * 1024);
		
		ТекстПояснения =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выполняется сохранение файла ""%1"" (%2 Мб)...
					|Пожалуйста, подождите.'"),
				ДанныеФайла.ИмяФайла, 
				ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб) );
		
		Состояние(ТекстПояснения);
		
		ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(ВыборФайла.ПолноеИмяФайла, ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		ПолучаемыеФайлы = Новый Массив;
		ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
		
		ПолученныеФайлы = Новый Массив;
		
		Если ПолучитьФайлы(ПолучаемыеФайлы, ПолученныеФайлы, , Ложь) Тогда
			Состояние(НСтр("ru = 'Файл успешно сохранен'"), , ВыборФайла.ПолноеИмяФайла);
		КонецЕсли;
		
		Возврат ВыборФайла.ПолноеИмяФайла;
	Иначе
		#Если ВебКлиент Тогда
			ПолучитьФайл(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла, Истина);
			Возврат ДанныеФайла.ИмяФайла;
		#КонецЕсли
	КонецЕсли;
	
КонецФункции

Процедура ЗадатьВопросПерезапускаАгентПлюсСОД(ИмяФайла) Экспорт
	
	//Если Вопрос("Записать новый файл настроек """ + ИмяФайла + """?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда		
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Записан файл настроек: " + ИмяФайла);		                      		
		ТекстВопроса = "Необходимо перезапустить службу ""Агент Плюс СОД"", если она была до этого запущена! Попытаться сделать это сейчас?"; 		
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда			
			Попытка
				ЗапуститьПриложение("net stop ""Agent Plus Service""");
				ЗапуститьПриложение("net start ""Agent Plus Service""");
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось выполнить перезапуск службы! Возможно, служба ""Агент Плюс СОД"" не установлена или недостаточно прав у текущего пользователя операционной системы!");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Причина: " + ОписаниеОшибки());				
			КонецПопытки;			
		КонецЕсли;			
	//КонецЕсли; 
	
	Предупреждение("Внимание! Если обработка обмена данными была запущена, то для вступления в силу изменений, необходимо ее перезапустить!", 60);		
	
КонецПроцедуры
    
// ЗагрузитьКомпонентуAPPlus()
//
// Параметры:
//   КПКОбъект - переменная, куда следует поместить
//               загруженный объект компоненты
// Описание:
//   Загружает внешнюю компоненту ПО Агент Плюс
//   
Функция ЗагрузитьВнешнююКомпонентуАП() Экспорт
	#Если ВебКлиент Тогда
		Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда			
			УстановитьРасширениеРаботыСФайлами();
			ПодключитьРасширениеРаботыСФайлами();			
		КонецЕсли;
	#КонецЕсли	
	   		
	Результат = Ложь;
	
	ИмяФайлаКомпоненты = "APPlus.dll";
	
	ПутьКФайлу = апСерверМодуль.ПолучитьКаталогПрограммы() + ИмяФайлаКомпоненты;
	
	ФайлКомпонентыНаДиске = Новый Файл(ПутьКФайлу);
	 	
	Если ФайлКомпонентыНаДиске.Существует() Тогда
		ИсточникКомпоненты = "Файл";
	Иначе
		ИсточникКомпоненты = "Макет";
	КонецЕсли;	
	
	КПКОбъектServer = "";
	
	Попытка
		Если ИсточникКомпоненты = "Файл" Тогда
			// Если библиотека находится в каталоге запуска 1С, то региструем ее в реестре
			Результат = ПодключитьВнешнююКомпоненту(ПутьКФайлу, "APPlus", ТипВнешнейКомпоненты.COM);
		Иначе
			//попробуем загрузить компоненту из общего макета
			УстановитьВнешнююКомпоненту("ОбщийМакет.апКомпонентаAPPlus");
			Результат = ПодключитьВнешнююКомпоненту("ОбщийМакет.апКомпонентаAPPlus", "APPlus");
		КонецЕсли;
					
		Если Результат Тогда				
			ИмяКомпонентыВРеестре = "AddIn.AddInObject.1";
				
			// Используем компоненту из реестра
			Результат = ПодключитьВнешнююКомпоненту(ИмяКомпонентыВРеестре);
				
			Если Результат Тогда					
				КПКОбъектServer = Новый("AddIn.CeDataExch");	
				Результат = КПКОбъектServer.CeGuestOnly(-1);
					
				Если Результат <> 1 Тогда                                     
					КПКОбъектServer.CeGuestOnly(1);            
				КонецЕсли;
			
				Результат = Истина;					
			Иначе					
				Сообщить("Не удалось подключить компоненту: " + ИмяФайлаКомпоненты + " из реестра операционной системы!", СтатусСообщения.Важное);					
				Сообщить("Попробуйте зарегистрировать компоненту в ручном режиме", СтатусСообщения.Информация);					
			КонецЕсли; //Если Результат Тогда				
		КонецЕсли; //Если Результат Тогда
			
	Исключение   		
		Сообщить("Не удалось загрузить компоненту " + ИмяФайлаКомпоненты + "!", СтатусСообщения.Важное);					
		Сообщить("1. Проверьте, все ли файлы компоненты скопированы в каталог " + апСерверМодуль.ПолучитьКаталогПрограммы(), СтатусСообщения.Внимание);
		Сообщить("2. Проверьте, не установлен ли на компьютере Firewall, блокирующий загрузку компоненты!", СтатусСообщения.Внимание);
		Результат = Ложь;          		
	КонецПопытки;   
			
	Если Не Результат Тогда	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось загрузить компоненту " + ИмяФайлаКомпоненты + "!");
	КонецЕсли;
	
	Возврат КПКОбъектServer;
	
КонецФункции // ЗагрузитьВнешнююКомпонентуАП()