

&НаКлиенте
Процедура ТаблицаКлиентурыПриАктивизацииСтроки(Элемент)
	// Вставить содержимое обработчика.
	ОбновитьСоставСписка(Элемент.ТекущаяСтрока);
КонецПроцедуры

Процедура ОбновитьСоставСписка(Элемент)
	 ЭтаФорма.ОбъектКлиентура = Элемент;
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаСоставаКлиентурыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = Ложь;
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаСоставаКлиентурыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = Ложь;
	
	ЗаписатьКлиентуру(ЭтаФорма.ОбъектКлиентура,ПараметрыПеретаскивания.Значение);
	ЭтаФорма.ОтобразитьИзменениеДанных(ЭтаФорма.ОбъектКлиентура,ВидИзмененияДанных.Изменение);
	ЭтаФорма.ОбновитьОтображениеДанных();

КонецПроцедуры

Процедура ЗаписатьКлиентуру(ОбъектКлиентура,МассивОбъектов)
	
	ТекОбъектКлиентура = ОбъектКлиентура.ПолучитьОбъект();
	ТабЧасть = ТекОбъектКлиентура.Состав;
	Если ТипЗнч(МассивОбъектов) = Тип("Массив") Тогда
		Для Каждого Перетаскиваемое Из МассивОбъектов Цикл
			НайденныеСтроки = ТабЧасть.Найти(Перетаскиваемое,"Контрагент");
			Если НайденныеСтроки = Неопределено Тогда
				НоваяСтрока = ТабЧасть.Добавить();
				НоваяСтрока.Контрагент = Перетаскиваемое;
			КонецЕсли;
		КонецЦикла;
		
		ТекОбъектКлиентура.Записать();
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаСоставКлиентурыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура УдалитьТекКлиентуру(ТекСтрока)
	ТекОбъект =  ОбъектКлиентура.ПолучитьОбъект();
	ТекОбъект.Состав.Удалить(ТекСтрока);
	ТекОбъект.Записать();
КонецПроцедуры


&НаКлиенте
Процедура УдалитьКлиентуру(Команда)
	// Вставить содержимое обработчика.
	ТекСтрока = ЭтаФорма.Элементы.ТаблицаСоставКлиентуры.ТекущаяСтрока;
	УдалитьТекКлиентуру(ТекСтрока);
	ЭтаФорма.ОтобразитьИзменениеДанных(ЭтаФорма.ОбъектКлиентура,ВидИзмененияДанных.Изменение);
	ОбновитьСоставСписка(ОбъектКлиентура);
	
	Настройка1СРаскрашиватьВходящихВКлиентуру = БПАГ.БПАГПолучитьНастройку("1СРаскрашиватьВходящихВКлиентуру");
	Если Настройка1СРаскрашиватьВходящихВКлиентуру Тогда
		Попытка
			ТаблицаБПАГКонтрагентовИзменениеФонаПриСменетекущегоРодителя(ЭтаФорма.Элементы.ТаблицаБПАГКонтрагентов.ТекущийРодитель);
		Исключение
		Конецпопытки
	КонецЕСли;
	
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаБПАГКонтрагентовОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	ТаблицаБПАГКонтрагентовИзменениеФонаПриСменетекущегоРодителя(Элемент.ТекущаяСтрока);
КонецПроцедуры

Процедура ТаблицаБПАГКонтрагентовИзменениеФона()
	
	Настройка1СРаскрашиватьВходящихВКлиентуру = БПАГ.БПАГПолучитьНастройку("1СРаскрашиватьВходящихВКлиентуру");
	Если НЕ Настройка1СРаскрашиватьВходящихВКлиентуру Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БПАГКонтрагенты.Ссылка КАК Контрагент 
	|ИЗ
	|	Справочник.БПАГКонтрагенты КАК БПАГКонтрагенты
	|ГДЕ
	|	БПАГКонтрагенты.Родитель = &ПустаяСсылка";
	
	Запрос.УстановитьПараметр("ПустаяСсылка", Справочники.БПАГКонтрагенты.ПустаяСсылка());
	
	ВыборкаКонтрагентов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекСтрока Из ВыборкаКонтрагентов Цикл      
		Запрос = Новый Запрос();
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	БПАГКлиентураСостав.Контрагент
		|ИЗ
		|	Справочник.БПАГКлиентура.Состав КАК БПАГКлиентураСостав
		|ГДЕ
		| (БПАГКлиентураСостав.ТорговаяТочка = &ПустаяТТ
		|				И ((БПАГКлиентураСостав.Контрагент = &Ссылка) ИЛИ (БПАГКлиентураСостав.Контрагент = &Родитель1) ИЛИ (БПАГКлиентураСостав.Контрагент = &Родитель2) ИЛИ (БПАГКлиентураСостав.Контрагент = &Родитель3) ИЛИ (БПАГКлиентураСостав.Контрагент = &Родитель4)))";
		
		Запрос.УстановитьПараметр("Ссылка", ТекСтрока.Контрагент);
		Запрос.УстановитьПараметр("Родитель1", ТекСтрока.Контрагент.Родитель);
		Запрос.УстановитьПараметр("Родитель2", ТекСтрока.Контрагент.Родитель.Родитель);
		Запрос.УстановитьПараметр("Родитель3", ТекСтрока.Контрагент.Родитель.Родитель.Родитель);
		Запрос.УстановитьПараметр("Родитель4", ТекСтрока.Контрагент.Родитель.Родитель.Родитель.Родитель);
		Запрос.УстановитьПараметр("ПустаяТТ", Справочники.БПАГТорговыеТочки.ПустаяСсылка());
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			//ТекСтрока.ЦветФона = ЦветПодсветки;
			//УсловноеОформление.Элементы.Очистить();
			ТмпСписок = Новый СписокЗначений;
			ТмпСписок.Добавить(ТекСтрока.Контрагент);
			
	        ЭлементОформления=СписокКонтрагентов.УсловноеОформление.Элементы.Добавить();
	        
	        ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	        ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	        ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	        ЭлементОтбора.Использование = Истина;
	        ЭлементОтбора.ПравоеЗначение = ТмпСписок;
			
	        
	        //цвет текста строки  
	        Элемент=ЭлементОформления.Оформление.Элементы[0];
	        Элемент.Использование=Истина;
	        Элемент.Значение=Новый Цвет(147, 220, 147);//118,194,141			
			
		ИначеЕсли НЕ ТекСтрока.Контрагент.ЭтоГруппа Тогда
			//Проверим вхождение конкретных ТТ
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	БПАГТорговыеТочки.Ссылка КАК ТТ,
			|	БПАГКлиентураСостав.ТорговаяТочка КАК ТТИзКлиентуры
			|ИЗ
			|	Справочник.БПАГТорговыеТочки КАК БПАГТорговыеТочки
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БПАГКлиентура.Состав КАК БПАГКлиентураСостав
			|		ПО БПАГТорговыеТочки.Ссылка = БПАГКлиентураСостав.ТорговаяТочка
			|ГДЕ
			|	БПАГТорговыеТочки.Владелец = &Владелец
			|	И НЕ БПАГТорговыеТочки.ПометкаУдаления";
			
			Запрос.УстановитьПараметр("Владелец", ТекСтрока.Контрагент);
			
			ТЗ = Запрос.Выполнить().Выгрузить();
			
			Если ТЗ.Количество() > 0 Тогда
				КоличествоПрисутствующихВКлиентуре = 0;
				Для Каждого тмпТТ Из ТЗ Цикл
					Если тмпТТ.ТТИзКлиентуры <> NULL Тогда
						КоличествоПрисутствующихВКлиентуре = КоличествоПрисутствующихВКлиентуре + 1;
					КонецЕсли;
				КонецЦикла;
				Если КоличествоПрисутствующихВКлиентуре = ТЗ.Количество() Тогда
					//Все есть в клиентуре
					//ТекСтрока.ЦветФона = ЦветПодсветки;
					ТмпСписок = Новый СписокЗначений;
					ТмпСписок.Добавить(ТекСтрока.Контрагент);
					
			        ЭлементОформления=СписокКонтрагентов.УсловноеОформление.Элементы.Добавить();
			        
			        ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			        ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
			        ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			        ЭлементОтбора.Использование = Истина;
			        ЭлементОтбора.ПравоеЗначение = ТмпСписок;
					
			        
			        //цвет текста строки  
			        Элемент=ЭлементОформления.Оформление.Элементы[0];
			        Элемент.Использование=Истина;
			        Элемент.Значение=Новый Цвет(147, 220, 147);			
				ИначеЕсли КоличествоПрисутствующихВКлиентуре > 0 Тогда
					//В клиентуре есть, но не вес
					//ТекСтрока.ЦветФона = ЦветНеполных;
					ТмпСписок = Новый СписокЗначений;
					ТмпСписок.Добавить(ТекСтрока.Контрагент);
					
			        ЭлементОформления=СписокКонтрагентов.УсловноеОформление.Элементы.Добавить();
			        
			        ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			        ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
			        ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			        ЭлементОтбора.Использование = Истина;
			        ЭлементОтбора.ПравоеЗначение = ТмпСписок;
					
			        
			        //цвет текста строки  
			        Элемент=ЭлементОформления.Оформление.Элементы[0];
			        Элемент.Использование=Истина;
			        Элемент.Значение=Новый Цвет(255,0,0);			
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	
	
	
	
	
	//ЭтаФорма.Элементы.ТаблицаБПАГКонтрагентов.ТекущаяСтрока
	
			//ЭлементУсловногоОформления = ЭтаФорма.СписокКонтрагентов.УсловноеОформление.Элементы.Добавить();//****
			//ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			//ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Наименование");
			////ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			////ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокКонтрагентов." + "Наименование");
			////ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
			////ЭлементОтбора.ПравоеЗначение = ЭтаФорма.Элементы.ТаблицаБПАГКонтрагентов.ТекущаяСтрока.Наименование; 
			//ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.ВесеннеЗеленый); 
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ТаблицаБПАГКонтрагентовИзменениеФона();
КонецПроцедуры

Процедура ТаблицаБПАГКонтрагентовИзменениеФонаПриСменетекущегоРодителя(Родитель)
	
	Если Родитель.ЭтоГруппа Тогда
		Запрос = Новый Запрос();
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	БПАГКонтрагенты.Ссылка КАК Контрагент 
		|ИЗ
		|	Справочник.БПАГКонтрагенты КАК БПАГКонтрагенты
		|ГДЕ
		|	БПАГКонтрагенты.Родитель = &Родитель";
		
		Запрос.УстановитьПараметр("Родитель", Родитель);
		
		ВыборкаКонтрагентов = Запрос.Выполнить().Выгрузить();
		
		Для Каждого ТекСтрока Из ВыборкаКонтрагентов Цикл      
			Запрос = Новый Запрос();
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	БПАГКлиентураСостав.Контрагент
			|ИЗ
			|	Справочник.БПАГКлиентура.Состав КАК БПАГКлиентураСостав
			|ГДЕ
			| (БПАГКлиентураСостав.ТорговаяТочка = &ПустаяТТ
			|				И ((БПАГКлиентураСостав.Контрагент = &Ссылка) ИЛИ (БПАГКлиентураСостав.Контрагент = &Родитель1) ИЛИ (БПАГКлиентураСостав.Контрагент = &Родитель2) ИЛИ (БПАГКлиентураСостав.Контрагент = &Родитель3) ИЛИ (БПАГКлиентураСостав.Контрагент = &Родитель4)))";
			
			Запрос.УстановитьПараметр("Ссылка", ТекСтрока.Контрагент);
			Запрос.УстановитьПараметр("Родитель1", ТекСтрока.Контрагент.Родитель);
			Запрос.УстановитьПараметр("Родитель2", ТекСтрока.Контрагент.Родитель.Родитель);
			Запрос.УстановитьПараметр("Родитель3", ТекСтрока.Контрагент.Родитель.Родитель.Родитель);
			Запрос.УстановитьПараметр("Родитель4", ТекСтрока.Контрагент.Родитель.Родитель.Родитель.Родитель);
			Запрос.УстановитьПараметр("ПустаяТТ", Справочники.БПАГТорговыеТочки.ПустаяСсылка());
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				//ТекСтрока.ЦветФона = ЦветПодсветки;
				//УсловноеОформление.Элементы.Очистить();
				ТмпСписок = Новый СписокЗначений;
				ТмпСписок.Добавить(ТекСтрока.Контрагент);
				
				ЭлементОформления=СписокКонтрагентов.УсловноеОформление.Элементы.Добавить();
				
				ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ПравоеЗначение = ТмпСписок;
				
				
				//цвет текста строки  
				Элемент=ЭлементОформления.Оформление.Элементы[0];
				Элемент.Использование=Истина;
				Элемент.Значение=Новый Цвет(147, 220, 147);			
				
			Иначе
				
				ТмпСписок = Новый СписокЗначений;
				ТмпСписок.Добавить(ТекСтрока.Контрагент);
				
				ЭлементОформления=СписокКонтрагентов.УсловноеОформление.Элементы.Добавить();
				
				ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ПравоеЗначение = ТмпСписок;
				
				
				//цвет текста строки  
				Элемент=ЭлементОформления.Оформление.Элементы[0];
				Элемент.Использование=Истина;
				Элемент.Значение=Новый Цвет(255,255,255);			
				
				
			КонецЕсли;
		КонецЦикла;
	Иначе
		Запрос = Новый Запрос();
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	БПАГКонтрагенты.Ссылка КАК Контрагент
		|ИЗ
		|	Справочник.БПАГКонтрагенты КАК БПАГКонтрагенты
		|ГДЕ
		|	БПАГКонтрагенты.Ссылка = &Контрагент";
		
		Запрос.УстановитьПараметр("Контрагент", Родитель);
		
		ВыборкаКонтрагентов = Запрос.Выполнить().Выгрузить();
		
		Для Каждого ТекСтрока Из ВыборкаКонтрагентов Цикл      
			Запрос = Новый Запрос();
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	БПАГКлиентураСостав.Контрагент
			|ИЗ
			|	Справочник.БПАГКлиентура.Состав КАК БПАГКлиентураСостав
			|ГДЕ
			| (БПАГКлиентураСостав.ТорговаяТочка = &ПустаяТТ
			|				И ((БПАГКлиентураСостав.Контрагент = &Ссылка) ИЛИ (БПАГКлиентураСостав.Контрагент = &Родитель1) ИЛИ (БПАГКлиентураСостав.Контрагент = &Родитель2) ИЛИ (БПАГКлиентураСостав.Контрагент = &Родитель3) ИЛИ (БПАГКлиентураСостав.Контрагент = &Родитель4)))";
			
			Запрос.УстановитьПараметр("Ссылка", ТекСтрока.Контрагент);
			Запрос.УстановитьПараметр("Родитель1", ТекСтрока.Контрагент.Родитель);
			Запрос.УстановитьПараметр("Родитель2", ТекСтрока.Контрагент.Родитель.Родитель);
			Запрос.УстановитьПараметр("Родитель3", ТекСтрока.Контрагент.Родитель.Родитель.Родитель);
			Запрос.УстановитьПараметр("Родитель4", ТекСтрока.Контрагент.Родитель.Родитель.Родитель.Родитель);
			Запрос.УстановитьПараметр("ПустаяТТ", Справочники.БПАГТорговыеТочки.ПустаяСсылка());
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				//ТекСтрока.ЦветФона = ЦветПодсветки;
				//УсловноеОформление.Элементы.Очистить();
				ТмпСписок = Новый СписокЗначений;
				ТмпСписок.Добавить(ТекСтрока.Контрагент);
				
				ЭлементОформления=СписокКонтрагентов.УсловноеОформление.Элементы.Добавить();
				
				ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ПравоеЗначение = ТмпСписок;
				
				
				//цвет текста строки  
				Элемент=ЭлементОформления.Оформление.Элементы[0];
				Элемент.Использование=Истина;
				Элемент.Значение=Новый Цвет(147, 220, 147);			
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ТаблицаБПАГКонтрагентовПриСменеТекущегоРодителя(Элемент)
	Настройка1СРаскрашиватьВходящихВКлиентуру = БПАГ.БПАГПолучитьНастройку("1СРаскрашиватьВходящихВКлиентуру");
	Если НЕ Настройка1СРаскрашиватьВходящихВКлиентуру Тогда
		Возврат;
	КонецЕсли;
	Попытка
	Если Элемент.ТекущийРодитель <> Неопределено Тогда
		ТаблицаБПАГКонтрагентовИзменениеФонаПриСменетекущегоРодителя(Элемент.ТекущийРодитель);
	КонецЕсли;
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСхемуКомпоновкиДанных(Команда)
	
	#Если ВебКлиент ИЛИ ТонкийКлиент Тогда
		Предупреждение(НСтр("ru = 'Настройка схемы компоновки данных может быть осуществлена только в режиме толстого клиента.'"));
	#Иначе
		
		//Определим, есть ли сохраненная СКД у клиентуры
		ВосстановитьСКД(Элементы.ТаблицаБПАГКлиентура.ТекущаяСтрока);
		// Если СКД не задана, то заполним ее по "шаблону"
		СКД = ?(ЗначениеЗаполнено(СхемаКомпоновкиДанных), СхемаКомпоновкиДанных.Получить(), Неопределено);
		Если СКД = Неопределено Тогда
			СКД = ПолучитьШаблонСхемыКомпоновкиДанных();
		КонецЕсли;
		
		// Вызовем конструктор для интерактивного изменения СКД
		КонструкторСКД = Новый КонструкторСхемыКомпоновкиДанных(СКД);
		КонструкторСКД.Редактировать(ЭтаФорма);
		
	#КонецЕсли
	
	
	
	
	
	
	
	
	
	
	
	
	
	//Конструктор = Новый КонструкторЗапроса; 
	//Конструктор.Текст = ТекстЗапроса;
	//Оповещение = Новый ОписаниеОповещения("ОткрытьКонструкторЗапросаЗавершение", ЭтотОбъект);
	//Конструктор.Показать(Оповещение);
КонецПроцедуры

&НаСервере
Функция ПолучитьШаблонСхемыКомпоновкиДанных()
	
	СхемаКомпоновки = Обработки.БПАГПанАгентЦентрУправления.ПолучитьМакет("СКДКлиентура");
	Возврат СхемаКомпоновки;
	
КонецФункции // ПолучитьШаблонСхемыКомпоновкиДанных()


&НаКлиенте
Процедура ОткрытьКонструкторЗапросаЗавершение(Текст, ДополнительныеПараметры) Экспорт 
	//Если НЕ Текст = Неопределено Тогда 
	//	ТекстЗапроса = Текст; 
	//КонецЕсли; 
КонецПроцедуры  

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	#Если ТолстыйКлиентОбычноеПриложение Или ТолстыйКлиентУправляемоеПриложение Тогда
	// Редактирование СКД доступно только в толстом клиенте
	Если Тип(ВыбранноеЗначение) = Тип("СхемаКомпоновкиДанных") Тогда
		СхемаКомпоновкиДанных = Новый ХранилищеЗначения(ВыбранноеЗначение);
		ТекущаяКлиентура = Элементы.ТаблицаБПАГКлиентура.ТекущаяСтрока;
		ЗаписатьСКД(СхемаКомпоновкиДанных, ТекущаяКлиентура);
	КонецЕсли;
	#КонецЕсли

КонецПроцедуры

&НаСервере
Процедура ЗаписатьСКД(СхемаКомпоновкиДанных, ТекущаяКлиентура)
	Объ = ТекущаяКлиентура.ПолучитьОбъект();
	Объ.СхемаКомпоновкиДанных = СхемаКомпоновкиДанных;
	Объ.Записать();
КонецПроцедуры	

&НаСервере
Процедура ВосстановитьСКД(ТекущаяКлиентура)
	Если ЗначениеЗаполнено(ТекущаяКлиентура.СхемаКомпоновкиДанных) Тогда
		СхемаКомпоновкиДанных = ТекущаяКлиентура.СхемаКомпоновкиДанных;
	КонецЕсли;	
КонецПроцедуры	


//&НаСервере
//Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
//	
//	СхемаКомпоновкиДанных = РеквизитФормыВЗначение("Объект").ПолучитьМакет("СКДКлиентура");
//	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
//	
//	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
//	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
//	
//КонецПроцедуры


&НаКлиенте
Процедура ПриЗакрытии()
	//Записать СКД
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//ВидПрикладногоРешения = БПАГ.ПолучитьВидПрикладногоРешения();
	СКД_Клиентура = РеквизитФормыВЗначение("ОбъектОбработка").ПолучитьМакет("СКДКлиентура");
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СКД_Клиентура, УникальныйИдентификатор);
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	Компоновщик.ЗагрузитьНастройки(СКД_Клиентура.НастройкиПоУмолчанию);
КонецПроцедуры

///СКД 2->

&НаСервере
Функция ПолучитьАдресаСхемыКомпоновкиДанныхВоВременномХранилище(Клиентура)
	
	Адреса = Новый Структура("СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных");
	
	// Схема
	Если ЗначениеЗаполнено(Клиентура.СхемаКомпоновкиДанных) ИЛИ ХранилищеСхемыКомпоновкиДанных = Неопределено Тогда
		//переделать
		СхемаИНастройки = ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(Клиентура.Ссылка, Клиентура.СхемаКомпоновкиДанных);
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
	Иначе
		СхемаКомпоновкиДанных = ХранилищеСхемыКомпоновкиДанных.Получить();
	КонецЕсли;
	
	Если СхемаКомпоновкиДанных = Неопределено Тогда
		//переделать из макета
		СхемаКомпоновкиДанных = Обработки.БПАГПанАгентЦентрУправления.ПолучитьМакет("СКДПартнеры");
	КонецЕсли;
	
	Адреса.СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	// Настройки
	Настройки = ХранилищеНастроекКомпоновкиДанных.Получить();
	Если ЗначениеЗаполнено(Настройки) Тогда
		Адреса.НастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(Настройки, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат Адреса;
	
КонецФункции

&НаСервере
Функция ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(Клиентура, ИмяМакета = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Описание",                  "");
	ВозвращаемоеЗначение.Вставить("СхемаКомпоновкиДанных",     Неопределено);
	ВозвращаемоеЗначение.Вставить("НастройкиКомпоновкиДанных", Неопределено);
	
	//Запрос = Новый Запрос(
	//"ВЫБРАТЬ
	//|	АвтоматическоеНачисление.ХранилищеСхемыКомпоновкиДанных КАК ХранилищеСхемыКомпоновкиДанных,
	//|	АвтоматическоеНачисление.ХранилищеНастроекКомпоновкиДанных КАК ХранилищеНастроекКомпоновкиДанных
	//|ИЗ
	//|	Справочник.ПравилаНачисленияИСписанияБонусныхБаллов КАК АвтоматическоеНачисление
	//|ГДЕ
	//|	АвтоматическоеНачисление.Ссылка = &Ссылка");
	//
	//Запрос.УстановитьПараметр("Ссылка", Ссылка);
	//
	//Результат = Запрос.Выполнить();
	//Выборка = Результат.Выбрать();
	//
	//Если Не ЗначениеЗаполнено(ИмяМакета) Тогда
	//	
	//	ВозвращаемоеЗначение.Описание = ИмяМакета;
	//	Если Выборка.Следующий() Тогда
	//		
	//		СхемаКомпоновкиДанных = Выборка.ХранилищеСхемыКомпоновкиДанных.Получить();
	//		Если СхемаКомпоновкиДанных = Неопределено Тогда
	//			ВозвращаемоеЗначение.СхемаКомпоновкиДанных = СформироватьНовуюСхемуКомпоновкиДанных();
	//			ВозвращаемоеЗначение.НастройкиКомпоновкиДанных = Неопределено;
	//		Иначе
	//			ВозвращаемоеЗначение.СхемаКомпоновкиДанных = СхемаКомпоновкиДанных;
	//			ВозвращаемоеЗначение.НастройкиКомпоновкиДанных = Выборка.ХранилищеНастроекКомпоновкиДанных.Получить();
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//Иначе
	//	
	//	ВозвращаемоеЗначение.Описание = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка)).Макеты.Найти(ИмяМакета).Синоним;
	//	ВозвращаемоеЗначение.СхемаКомпоновкиДанных = Справочники.ПравилаНачисленияИСписанияБонусныхБаллов.ПолучитьМакет(ИмяМакета);
	//	Если Выборка.Следующий() Тогда
	//		ВозвращаемоеЗначение.НастройкиКомпоновкиДанных = Выборка.ХранилищеНастроекКомпоновкиДанных.Получить();
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервере
Функция ПолучитьXML(Значение)
	
	Запись = Новый ЗаписьXML();
	Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(Запись, Значение);
	Возврат Запись.Закрыть();
	
КонецФункции


&НаСервере
Функция ПрименитьИзмененияКСхемеКомпоновкиДанных(АдресСхемыКомпоновкиДанныхВХранилище, АдресНастроекКомпоновкиДанных, Клиентура)
	
	//Если ЗначениеЗаполнено(Объект.СхемаКомпоновкиДанных) Тогда
	//	
	//	СхемаИНастройки = Справочники.ПравилаНачисленияИСписанияБонусныхБаллов.ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(Объект.Ссылка, Объект.СхемаКомпоновкиДанных);
	//	
	//	// Если схема компоновки данных из макета <> полученной из редактора схеме компоновки данных
	//	Если ПолучитьXML(СхемаИНастройки.СхемаКомпоновкиДанных) <> ПолучитьXML(ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанныхВХранилище)) Тогда
	//		Объект.СхемаКомпоновкиДанных   = "";
	//		ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанныхВХранилище));
	//	КонецЕсли;
	//	
	//	// Полученные настройки могут быть равны настройкам по умолчанию схемы.
	//	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	//	Попытка
	//		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаИНастройки.СхемаКомпоновкиДанных));
	//	Исключение
	//	КонецПопытки;
	//	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаИНастройки.СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	//	КомпоновщикНастроек.Восстановить();
	//	Если ПолучитьXML(КомпоновщикНастроек.ПолучитьНастройки()) <> ПолучитьXML(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных)) Тогда
	//		ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных));
	//	Иначе
	//		ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Неопределено);
	//	КонецЕсли;
	//	
	//Иначе
		
		Схема = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанныхВХранилище);
		ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(Схема);
		
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		Попытка
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
		Исключение
		КонецПопытки;
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КомпоновщикНастроек.Восстановить();
		Если ПолучитьXML(КомпоновщикНастроек.ПолучитьНастройки()) <> ПолучитьXML(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных)) Тогда
			ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных));
		Иначе
			ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Неопределено);
		КонецЕсли;
		//Записать в клиентуру
		Объ = Клиентура.ПолучитьОбъект();
		Объ.ХранилищеСхемыКомпоновкиДанных = ХранилищеСхемыКомпоновкиДанных;
		Объ.ХранилищеНастроекКомпоновкиДанных = ХранилищеНастроекКомпоновкиДанных;
		Объ.Записать();
		
		
	//КонецЕсли;
	
	//ИспользуетсяПроизвольныйОтбор = ХранилищеНастроекКомпоновкиДанных.Получить() <> Неопределено;
	
КонецФункции

&НаКлиенте
Процедура РедактироватьСхемуКомпоновкиДанных2(Команда)
	// Открыть редактор настроек схемы компоновки данных
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = НСтр("ru = 'Настройка схемы компоновки данных для клиентуры'");
	//ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = СтрЗаменить(ЗаголовокФормыНастройкиСхемыКомпоновкиДанных, "%1", Объект.Наименование);
	ТекущаяКлиентура = Элементы.ТаблицаБПАГКлиентура.ТекущаяСтрока;
	ХранилищеНастроекКомпоновкиДанных = ТекущаяКлиентура.Ссылка.ХранилищеНастроекКомпоновкиДанных;
	ХранилищеСхемыКомпоновкиДанных = ТекущаяКлиентура.Ссылка.ХранилищеСхемыКомпоновкиДанных;
	
	Адреса = ПолучитьАдресаСхемыКомпоновкиДанныхВоВременномХранилище(Элементы.ТаблицаБПАГКлиентура.ТекущаяСтрока);
	
	АдресХранилищаНастройкиКомпоновщика = ОткрытьФормуМодально("Обработка.БПАГПанАгентЦентрУправления.Форма.УпрощеннаяНастройкаСхемыКомпоновкиДанных",
		Новый Структура(
			"НеПомещатьНастройкиВСхемуКомпоновкиДанных,
			|НеРедактироватьСхемуКомпоновкиДанных,
			|НеЗагружатьСхемуКомпоновкиДанныхИзФайла,
			|НеНастраиватьУсловноеОформление,
			|НеНастраиватьВыбор,
			|НеНастраиватьПорядок,
			|УникальныйИдентификатор,
			|АдресСхемыКомпоновкиДанных,
			|АдресНастроекКомпоновкиДанных,
			|Заголовок",
			Истина,
			Ложь,
			Ложь,
			Истина,
			Истина,
			Истина,
			УникальныйИдентификатор,
			Адреса.СхемаКомпоновкиДанных,
			Адреса.НастройкиКомпоновкиДанных,
			ЗаголовокФормыНастройкиСхемыКомпоновкиДанных));
	
	Если ЗначениеЗаполнено(АдресХранилищаНастройкиКомпоновщика) Тогда
		ПрименитьИзмененияКСхемеКомпоновкиДанных(Адреса.СхемаКомпоновкиДанных, АдресХранилищаНастройкиКомпоновщика, ТекущаяКлиентура);
	КонецЕсли;

КонецПроцедуры
