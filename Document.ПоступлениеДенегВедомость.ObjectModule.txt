
#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	ФинРезультат 				= Движения.ФинансовыйРезультат;
	Деньги 						= Движения.ДенежныеСредства;
	ВзаиморасчетыСПокупателями 	= Движения.ВзаиморасчетыСПокупателями;
	ВзаиморасчетыСПоставщиками	= Движения.ВзаиморасчетыСПоставщиками;
	ПартииТоваров 				= Движения.ПартииТоваровНаСкладах;
	
	ФинРезультат.Записывать 				= Истина;
	Деньги.Записывать 						= Истина;
	ВзаиморасчетыСПокупателями.Записывать 	= Истина;
	ВзаиморасчетыСПоставщиками.Записывать	= Истина;
	ПартииТоваров.Записывать 				= Истина;
	
	// Денежные средства
	Движение = Деньги.Добавить();
	
	Движение.Период 		= ЭтотОбъект.Дата;
	Движение.ВидДвижения 	= ВидДвиженияНакопления.Приход;
	Движение.ДенежныйСчет	= ЭтотОбъект.ДенежныйСчет;
	Движение.Подразделение	= Подразделение;
	Движение.Сумма 			= ЭтотОбъект.СуммаДокумента * Курс/Кратность;
	Движение.СуммаВал		= ЭтотОбъект.СуммаДокумента;
	Движение.Валюта			= ВалютаДокумента;
	
	// Взаиморасчеты
	Для Каждого СтрокаДокумента Из ЭтотОбъект.СтрокиДокумента Цикл
		
		Движение = ВзаиморасчетыСПокупателями.Добавить();
		
		Движение.Период 		= ЭтотОбъект.Дата;
		Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
		Движение.Контрагент		= СтрокаДокумента.Контрагент;
		Движение.Подразделение	= Подразделение;
		
		Если СтрокаДокумента.Контрагент.ТипВеденияВзаиморасчетов = Перечисления.ТипыВеденияВзаиморасчетов.ПоДоговору Тогда
			Движение.Менеджер			= Справочники.Менеджеры.БезМенеджера;
			Движение.КредитныйДокумент 	= Документы.РасходнаяНакладная.ПустаяСсылка();
		Иначе
			Движение.Менеджер		= СтрокаДокумента.КредДокумент.Менеджер;
			Движение.КредитныйДокумент = СтрокаДокумента.КредДокумент;
		КонецЕсли;
		
		Движение.Сумма 			= СтрокаДокумента.Сумма * Курс/Кратность;
		Движение.СуммаВал		= СтрокаДокумента.Сумма;
		Движение.Валюта			= ВалютаДокумента;
		
		Если НЕ(СтрокаДокумента.СуммаСкидки = 0) Тогда
			
			// на расходы
			Движение = Финрезультат.Добавить();
			Движение.Период 		= ЭтотОбъект.Дата;
			Движение.Подразделение	= ЭтотОбъект.Подразделение;
			Движение.СтатьяЗатрат	= Справочники.СтатьиЗатрат.ПрочиеРасходы;
			Движение.СуммаРасходов	= СтрокаДокумента.СуммаСкидки * Курс/Кратность;
			
		КонецЕсли;
		
		// допроведем розницу .... ОБЯЗАТЕЛЬНО !!! после выполнения проверки документа
		// кроме Кривого рога (с 25/08/14) и Запорожья
		
		Если (ДополнительныеСвойства.УчетнаяПолитика.АвтоУчетРозницы) 
			И Не(Подразделение.Код = "000000006" И Дата > Дата("20140825")) 
			И Не(Подразделение.Код = "000000008") 
			И Не(Подразделение.Код = "000000004")
			И Не(Подразделение.Код = "000000005")
			И Не(Подразделение.Код = "000000147")
			И Не(Подразделение.Код = "000000125")
			И Не(Подразделение.Код = "000000131") Тогда
			
			СтруктураПараметровОтдела = Новый Структура("Организация, Контрагент", СтрокаДокумента.КредДокумент.Организация, СтрокаДокумента.Контрагент);
			РозницаСервер.ПолучитьПараметрыОтдела(СтруктураПараметровОтдела);
			
			//Если НЕ СтруктураПараметровОтдела.Подразделение = Неопределено И 
			//	НЕ СтрокаДокумента.КредДокумент.Запасы.Итог("СуммаБезСкидки") = 0 Тогда
			Если НЕ СтруктураПараметровОтдела.Подразделение = Неопределено Тогда
				
				Если СтрокаДокумента.КредДокумент.Запасы.Итог("СуммаБезСкидки") = 0 Тогда
					РеализованнаяНаценка = 0;
				Иначе
					РеализованнаяНаценка = Окр(СтрокаДокумента.Сумма *(1 - СтрокаДокумента.КредДокумент.Запасы.Итог("Сумма") / СтрокаДокумента.КредДокумент.Запасы.Итог("СуммаБезСкидки")), 2,РежимОкругления.Окр15как20);
				КонецЕсли;
				
				// Партии товаров в рознице
				Движение = ПартииТоваров.Добавить();
				
				Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
				Движение.Период 		= Дата;
				Движение.Подразделение 	= СтруктураПараметровОтдела.Подразделение;
				Движение.Склад 			= СтруктураПараметровОтдела.Склад;
				Движение.ЦФО 			= СтруктураПараметровОтдела.ОтделМагазина;
				Движение.Стоимость 		= (СтрокаДокумента.Сумма - РеализованнаяНаценка) * Курс/Кратность;
				Движение.СтоимостьВал	= СтрокаДокумента.Сумма - РеализованнаяНаценка;
				Движение.ПродСтоимость 	= СтрокаДокумента.Сумма * Курс/Кратность;
				
				// Взаиморасчеты с "Поставщиками"
				Движение = ВзаиморасчетыСПоставщиками.Добавить();
				
				Движение.ВидДвижения 	= ВидДвиженияНакопления.Приход;
				Движение.Период 		= Дата;
				Движение.Подразделение	= СтруктураПараметровОтдела.Подразделение;
				Движение.Контрагент 	= ДополнительныеСвойства.УчетнаяПолитика.Контрагент;
				Движение.ЦФО 			= СтруктураПараметровОтдела.ОтделМагазина;
				Движение.Сумма 			= СтрокаДокумента.Сумма * Курс/Кратность;
				Движение.СуммаВал		= СтрокаДокумента.Сумма;
				Движение.Валюта			= ВалютаДокумента;
				
				// Доходы
				Движение = Финрезультат.Добавить();
				Движение.Период 		= ЭтотОбъект.Дата;
				Движение.Подразделение	= СтруктураПараметровОтдела.Подразделение;
				Движение.Объект			= СтруктураПараметровОтдела.ОтделМагазина;
				Движение.СтатьяДоходов	= Справочники.СтатьиДоходов.МаржинальныйДоход;
				Движение.СуммаДоходов	= РеализованнаяНаценка * Курс/Кратность;

				
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;

	
	
	// Запись наборов записей.
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СуммаДокумента = СтрокиДокумента.Итог("Сумма") - СтрокиДокумента.Итог("СуммаСкидки");
	
	// Проверка заполнения валюты 
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента = Константы.ВалютаУчета.Получить();
		Курс = 1;
		Кратность = 1;
	КонецЕсли;
	
	//ОбщегоНазначенияСервер.УстановитьНомерДокумента(ЭтотОбъект);

КонецПроцедуры

Процедура ПриКопировании(объектКопирования)
	
	ЗаполнениеОбъектовСервер.ЗаполнитьДанныеСкопированногоДокумента(ЭтотОбъект, ОбъектКопирования);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(данныеЗаполнения, текстЗаполнения, стандартнаяОбработка)
	
	заполненНаОснованииДокумента = Ложь;
	
	ЗаполнениеОбъектовСервер.ЗаполнитьДанныеНовогоДокумента(ЭтотОбъект, данныеЗаполнения);
	
	// Заполнение по умолчанию.
	Если Подразделение.Пустая() Тогда
		Подразделение = ПользователиСервер.ПолучитьЗначениеНастройки("ОсновноеПодразделение");
	КонецЕсли;
	
	// Ввод на основании.
	типДанныхЗаполнения = ТипЗнч(данныеЗаполнения);
	
	Если типДанныхЗаполнения = Тип("Структура") Тогда
		
		ЗаполнитьДокументПоОтбору(данныеЗаполнения);
		
	ИначеЕсли типДанныхЗаполнения = Тип("ДокументСсылка.РасходДенег") Тогда
		
		ЗаполнитьДокументНаОснованииРасходДенег(данныеЗаполнения);
		заполненНаОснованииДокумента = Истина;
		
	КонецЕсли;
	
	свойствоСозданАвтоматически = Неопределено;
	Если ДополнительныеСвойства.Свойство("СозданАвтоматически", свойствоСозданАвтоматически) И свойствоСозданАвтоматически Тогда
		СозданАвтоматически = Истина;
		Комментарий = данныеЗаполнения.Комментарий;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеПоОснованию

Процедура ЗаполнитьДокументПоОтбору(Знач данныеЗаполнения)
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииРасходДенег(Знач данныеЗаполнения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Заполнение реквизитов документа.
	ЗаполнениеОбъектовСервер.ЗаполнитьРеквизитыДокументаПриВводеНаОсновании(ЭтотОбъект, данныеЗаполнения);
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	
	запрос.Текст =
	"ВЫБРАТЬ
	|	РасходДенег.Дата,
	|	РасходДенег.Ссылка КАК ДокументОснование,
	|	СД_СоответствияСрезПоследних.КлючСоответствия,
	|	ЕСТЬNULL(СД_СоответствияСрезПоследних.ПодразделениеЗначение, РасходДенег.Подразделение) КАК Подразделение,
	|	РасходДенег.ЦФО.Магазин КАК Контрагент,
	|	РасходДенег.СчетПолучателя КАК ДенежныйСчет
	|ИЗ
	|	Документ.РасходДенег КАК РасходДенег
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СД_Соответствия.СрезПоследних(&МоментВремени, КлючСоответствия.ВидДокумента = &ВидДокумента) КАК СД_СоответствияСрезПоследних
	|		ПО РасходДенег.Подразделение = СД_СоответствияСрезПоследних.КлючСоответствия.Подразделение
	|ГДЕ
	|	РасходДенег.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходДенег.ЦФО.Магазин КАК Контрагент,
	|	РасходДенег.СуммаДокумента
	|ИЗ
	|	Документ.РасходДенег КАК РасходДенег
	|ГДЕ
	|	РасходДенег.Ссылка = &ДокументОснование";
	
	#КонецОбласти
	
	запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	запрос.УстановитьПараметр("ДокументОснование", данныеЗаполнения);
	запрос.УстановитьПараметр("ВидДокумента", Перечисления.СД_ВидыСвязанныхДокументов.РасходДенег);
	
	результатЗапроса = запрос.ВыполнитьПакет();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, результатЗапроса[0].Выгрузить()[0]);
	
	//ДокументПриходнаяНакладнаяСервер.КонтрагентПриИзменении(ЭтотОбъект);
	
	//Запасы.Загрузить(результатЗапроса[1].Выгрузить());
	//Имущество.Загрузить(результатЗапроса[2].Выгрузить());

	
КонецПроцедуры

#КонецОбласти

#КонецОбласти