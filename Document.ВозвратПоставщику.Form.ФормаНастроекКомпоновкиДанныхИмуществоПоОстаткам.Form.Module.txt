
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	АдресСКД = ПоместитьВоВременноеХранилище(Документы.ВозвратПоставщику.ПолучитьМакет("СхемаКомпоновкиДанныхИмуществоПоОстаткам"),ЭтаФорма.УникальныйИдентификатор);
	
	схемаКомпоновкиДанных = Документы.ВозвратПоставщику.ПолучитьМакет("СхемаКомпоновкиДанныхИмуществоПоОстаткам");
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(схемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(схемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить();
	
	АдресНастроекСКД = Параметры.АдресНастроекСКД;
	
	//настройкиСКД = ПолучитьИзВременногоХранилища(АдресНастроекСКД);
	
	
	
	Регистратор = Параметры.Регистратор;
	ДатаДокумента = Параметры.ДатаДокумента;
	Подразделение = Параметры.Подразделение;
	
	#Область backup
	
	//АдресНастроекСКД = Параметры.АдресНастроекСКД;
	//АдресСКД = ПоместитьВоВременноеХранилище(Документы.ВозвратПоставщику.ПолучитьМакет("СхемаКомпоновкиДанныхИмуществоПоОстаткам"),ЭтаФорма.УникальныйИдентификатор);
	//Регистратор = Параметры.Регистратор;
	//ДатаДокумента = Параметры.ДатаДокумента;
	//Подразделение = Параметры.Подразделение;
	
	#КонецОбласти
	
КонецПроцедуры

#Область изменения_20180317_Карпачев_А_Ю

&НаСервереБезКонтекста
Функция КомпоновщикНастроекИнициализироватьНаСервере(АдресСКД)
	
	новыйКомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	новыйКомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПолучитьИзВременногоХранилища(АдресСКД)));
	
	Возврат новыйКомпоновщикНастроекКомпоновкиДанных;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура КомпоновщикНастроекИнициализировать()
	
	//КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	//схемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСКД);
	настройкиСКД = ПолучитьИзВременногоХранилища(АдресНастроекСКД);
	
	//КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	Если настройкиСКД = Неопределено Тогда
		
		//настройкиСКД = схемаКомпоновкиДанных.НастройкиПоУмолчанию;
		
		Для Каждого элементОтбор ИЗ настройкиСКД.Отбор.Элементы Цикл
			Если Строка(элементОтбор.ЛевоеЗначение) = "Подразделение" Тогда
				элементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				элементОтбор.ПравоеЗначение = Подразделение;
				элементОтбор.Использование = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	параметрыРегистратор = настройкиСКД.ПараметрыДанных.Элементы.Найти("Регистратор");
	Если параметрыРегистратор = Неопределено Тогда
		параметрыРегистратор = настройкиСКД.ПараметрыДанных.Элементы.Добавить();
		параметрыРегистратор.Параметр = Новый ПараметрКомпоновкиДанных("Регистратор");
		параметрыРегистратор.Значение = Регистратор;
		параметрыРегистратор.Использование = Истина;
	Иначе
		параметрыРегистратор.Значение = Регистратор;
		параметрыРегистратор.Использование = Истина;
	КонецЕсли;
	
	параметрыДатаДокумента = настройкиСКД.ПараметрыДанных.Элементы.Найти("ДатаДокумента");
	Если параметрыДатаДокумента = Неопределено Тогда
		параметрыДатаДокумента = настройкиСКД.ПараметрыДанных.Элементы.Добавить();
		параметрыДатаДокумента.Параметр = Новый ПараметрКомпоновкиДанных("ДатаДокумента");
		параметрыДатаДокумента.Значение = ДатаДокумента;
		параметрыДатаДокумента.Использование = Истина;
	Иначе
		Если параметрыДатаДокумента.Значение = Дата("00010101000000") Тогда
			параметрыДатаДокумента.Значение = ДатаДокумента;
			параметрыДатаДокумента.Использование = Истина;
		КонецЕсли;
	КонецЕсли;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(настройкиСКД);
	КомпоновщикНастроек.Восстановить();
	
	#Область backup
	
	//КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	//
	//схемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСКД);
	//настройкиСКД = ПолучитьИзВременногоХранилища(АдресНастроекСКД);
	//
	//КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	//
	//Если настройкиСКД = Неопределено Тогда
	//	
	//	настройкиСКД = схемаКомпоновкиДанных.НастройкиПоУмолчанию;
	//	
	//	Для Каждого элементОтбор ИЗ настройкиСКД.Отбор.Элементы Цикл
	//		Если Строка(элементОтбор.ЛевоеЗначение) = "Подразделение" Тогда
	//			элементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//			элементОтбор.ПравоеЗначение = Подразделение;
	//			элементОтбор.Использование = Истина;
	//			Прервать;
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//КонецЕсли;
	//
	//параметрыРегистратор = настройкиСКД.ПараметрыДанных.Элементы.Найти("Регистратор");
	//Если параметрыРегистратор = Неопределено Тогда
	//	параметрыРегистратор = настройкиСКД.ПараметрыДанных.Элементы.Добавить();
	//	параметрыРегистратор.Параметр = Новый ПараметрКомпоновкиДанных("Регистратор");
	//	параметрыРегистратор.Значение = Регистратор;
	//	параметрыРегистратор.Использование = Истина;
	//Иначе
	//	параметрыРегистратор.Значение = Регистратор;
	//	параметрыРегистратор.Использование = Истина;
	//КонецЕсли;
	//
	//параметрыДатаДокумента = настройкиСКД.ПараметрыДанных.Элементы.Найти("ДатаДокумента");
	//Если параметрыДатаДокумента = Неопределено Тогда
	//	параметрыДатаДокумента = настройкиСКД.ПараметрыДанных.Элементы.Добавить();
	//	параметрыДатаДокумента.Параметр = Новый ПараметрКомпоновкиДанных("ДатаДокумента");
	//	параметрыДатаДокумента.Значение = ДатаДокумента;
	//	параметрыДатаДокумента.Использование = Истина;
	//Иначе
	//	Если параметрыДатаДокумента.Значение = Дата("00010101000000") Тогда
	//		параметрыДатаДокумента.Значение = ДатаДокумента;
	//		параметрыДатаДокумента.Использование = Истина;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//КомпоновщикНастроек.ЗагрузитьНастройки(настройкиСКД);
	//КомпоновщикНастроек.Восстановить();
	
	#КонецОбласти
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	КомпоновщикНастроекИнициализировать();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнение(Команда)
	Оповестить("ИмуществоЗаполнитьПоОстаткам", Новый Структура("АдресНастроекСКД",ПоместитьВоВременноеХранилище(КомпоновщикНастроек.Настройки,ЭтаФорма.УникальныйИдентификатор)));
	Закрыть();
КонецПроцедуры
