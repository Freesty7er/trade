//////////////////////////////////////////////////////////////////
//		Функция определения версии протокола обмена 1С - POS	//

Функция ПолучитьТекущуюВерсиюПротоколаОбмена1С(ТекТипПО) Экспорт
	Если ТекТипПО = Перечисления.Р_ТипыПОПОС.ResPOS_Bistro Тогда
		Возврат 8;
	ИначеЕсли ТекТипПО = Перечисления.Р_ТипыПОПОС.ResPOS_Market Тогда
		Возврат 8;
	ИначеЕсли ТекТипПО = Перечисления.Р_ТипыПОПОС.ResPOS_Restaurant Тогда
		Возврат 8;
	ИначеЕсли ТекТипПО = Перечисления.Р_ТипыПОПОС.ТерминалАЗС_01М Тогда
		Возврат 5;
	ИначеЕсли ТекТипПО = Перечисления.Р_ТипыПОПОС.БлокАРМ2 Тогда
		Возврат 5;
	ИначеЕсли ТекТипПО = Перечисления.Р_ТипыПОПОС.ResPOS_Petrol Тогда
		Возврат 6;
	ИначеЕсли ТекТипПО = Перечисления.Р_ТипыПОПОС.ResPOS_Талоны Тогда
		Возврат 8;
	Иначе
		Возврат "";
	КонецЕсли
КонецФункции

//////////////////////////////////////////////////////////////////
//	Процедуры при начале работы системы и инициализация данных	//

Процедура ОбщиеДополнительныеДействияПриНачалеРаботыСистемы() Экспорт
	
	//#Если Клиент Тогда
		
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	//////Если НЕ ЗначениеЗаполнено(ПользовательИБ.Имя) Тогда
	//////	Предупреждение("Пользователь не выбран. Работа невозможна !");
	//////	ЗавершитьРаботуСистемы(Ложь, Ложь);
	//////	Возврат;
	//////КонецЕсли;
	//////ИспользоватьТолькоОсновнойИнтерфейс = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "Р_ОграничитьТолькоОсновнымИнтерфейсом");
	//////Если ПользовательИБ <> Неопределено И ПользовательИБ.ОсновнойИнтерфейс <> Неопределено И ТипЗнч(ИспользоватьТолькоОсновнойИнтерфейс) = Тип("Булево") И ИспользоватьТолькоОсновнойИнтерфейс Тогда
	//////	ОбщийИнтерфейсПользователя = ГлавныйИнтерфейс.Общий;
	//////	ОбщийИнтерфейсПользователя.Переключаемый = НЕ ИспользоватьТолькоОсновнойИнтерфейс;
	//////	СтрокаПодключенияИнтерфейсов = ?(НЕ ИспользоватьТолькоОсновнойИнтерфейс, "Общий,"+ПользовательИБ.ОсновнойИнтерфейс.Имя, ""+ПользовательИБ.ОсновнойИнтерфейс.Имя);
	//////	ГлавныйИнтерфейс.ПереключитьИнтерфейс(СтрокаПодключенияИнтерфейсов);
	//////КонецЕсли;
	
	Если РольДоступна("ПолныеПрава") Тогда
		
		//УказаниеСкладовВТЧД = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();
		//Если УказаниеСкладовВТЧД <> Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации Тогда
		//	Константы.УказаниеСкладовВТабличнойЧастиДокументов.Установить(Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации);
		//	Сообщить("Установлено в настройках параметров учета ""Указание складов в табличной части документа = Для документов поступления и реализации""");
		//КонецЕсли;
		
		//Установка видов номенклатуры
		//Если НЕ ЗначениеЗаполнено(Справочники.ВидыНоменклатуры.НайтиПоРеквизиту("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар)) Тогда
		//	СпрВН = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
		//	СпрВН.Наименование = "Товар";
		//	СпрВН.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
		//	СпрВН.УстановитьНовыйКод();
		//	СпрВН.Записать();
		//КонецЕсли;
		//Если НЕ ЗначениеЗаполнено(Справочники.ВидыНоменклатуры.НайтиПоРеквизиту("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Услуга)) Тогда
		//	СпрВН = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
		//	СпрВН.Наименование = "Услуга";
		//	СпрВН.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
		//	СпрВН.УстановитьНовыйКод();
		//	СпрВН.Записать();
		//КонецЕсли;
		//Если НЕ ЗначениеЗаполнено(Справочники.ВидыНоменклатуры.НайтиПоРеквизиту("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Комплект)) Тогда
		//	СпрВН = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
		//	СпрВН.Наименование = "Комплект";
		//	СпрВН.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Комплект;
		//	СпрВН.УстановитьНовыйКод();
		//	СпрВН.Записать();
		//КонецЕсли;
		
		//Установка назначений категорий объектов
		//Если Справочники.КатегорииОбъектов.Р_СкретчКарта.НазначениеКатегории <> ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура Тогда
		//	ОбСпр = Справочники.КатегорииОбъектов.Р_СкретчКарта.ПолучитьОбъект();
		//	ОбСпр.НазначениеКатегории = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;
		//	ОбСпр.Записать();
		//КонецЕсли;
		
		Если РольДоступна("Р_Обмен_ПОС") Тогда
			ЗаполнитьСправочникВидыПравДоступаОператоров();
		КонецЕсли;
		
	КонецЕсли;
	
	//Если РольДоступна("Р_Обмен_ПОС") Тогда
	//	ЖурналОбменаПОС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "Р_ЗапускатьЖурналОбменаПОС");
	//	Если (ЖурналОбменаПОС <> Неопределено) И ЖурналОбменаПОС Тогда
	//		Обработки.Р_УправлениеЖурналомОбменаПОС.ПолучитьФорму("Форма").Открыть();
	//	КонецЕсли;
	//	ОткрыватьМониторОбмена = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "Р_ЗапускатьМониторОбменаПОС");
	//	Если (ОткрыватьМониторОбмена <> Неопределено) И ОткрыватьМониторОбмена Тогда
	//		Обработки.Р_МониторОбменаПОС.ПолучитьФорму("Форма").Открыть();
	//	КонецЕсли;
	//КонецЕсли;
	
	//#КонецЕсли
	
Конецпроцедуры

Процедура ЗаполнитьСправочникВидыПравДоступаОператоров()
	
	Если РольДоступна("Р_Маркет_ПОС")  Тогда
		
		Справочники.Р_ВидыПравДоступаОператоров.ЗаполнитьЗначениямиПоУмолчанию();
		
	КонецЕсли;
	
КонецПроцедуры	// ЗаполнитьСправочникВидыПравДоступаОператоров()

//////////////////////////////////////////////////////////////////
//			Функции создания, полчения узлов обмена для POS		//

Функция СоздатьУзелОбменаПОПОС(ПОС, ТипПО) Экспорт
	УзелОбмена = НайтиУзелОбменаПОС(ПОС, ТипПО);
	Если НЕ ЗначениеЗаполнено(УзелОбмена) Тогда
		ПланОбмена = ПланыОбмена.Р_POS.СоздатьУзел();
		ПланОбмена.Код =  СокрЛП(ПОС.ИД_ПОС) + "--(" + Перечисления.Р_ТипыПОПОС.Индекс(ТипПО) + ")";
		ПланОбмена.Наименование = ПОС.Наименование + " (" + ТипПО + ")";
		ПланОбмена.ПОС = ПОС;
		ПланОбмена.ТипПО = ТипПО;
	Иначе
		ПланОбмена = УзелОбмена.ПолучитьОбъект();
		ПланОбмена.Код =  СокрЛП(ПОС.ИД_ПОС) + "--(" + Перечисления.Р_ТипыПОПОС.Индекс(ТипПО) + ")";
		ПланОбмена.Наименование = ПОС.Наименование + " (" + ТипПО + ")";
		ПланОбмена.ПометкаУдаления = ПОС.ПометкаУдаления;
	КонецЕсли;
	Попытка
		ПланОбмена.Записать();
		УзелОбмена = ПланОбмена.Ссылка;
	Исключение
		УзелОбмена = Неопределено;
	КонецПопытки;
	Возврат УзелОбмена;
КонецФункции

Функция ПолучитьУзелОбменаПОС(ПОС, ТипПО) Экспорт
	Если (НЕ ЗначениеЗаполнено(ПОС))
	 ИЛИ (НЕ ПОС.Активен)
	 ИЛИ (ПОС.ПометкаУдаления) Тогда
		Возврат ПланыОбмена.Р_POS.ПустаяСсылка();
	Иначе
		Возврат НайтиУзелОбменаПОС(ПОС, ТипПО);
	КонецЕсли;
КонецФункции

Функция НайтиУзелОбменаПОС(ПОС, ТипПО, ТекУзел=Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Р_POS.Ссылка
	|ИЗ
	|	ПланОбмена.Р_POS КАК Р_POS
	|ГДЕ
	|	Р_POS.ПОС = &ПОС
	|	И Р_POS.ТипПО = &ТипПО
	|	//УсловиеСсылка";
	Запрос.УстановитьПараметр("ПОС", ПОС);
	Запрос.УстановитьПараметр("ТипПО", ТипПО);
	Если ЗначениеЗаполнено(ТекУзел) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//УсловиеСсылка", "И Р_POS.Ссылка <> &ТекУзел");
		Запрос.УстановитьПараметр("ТекУзел", ТекУзел);
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат ПланыОбмена.Р_POS.ПустаяСсылка();
	КонецЕсли
КонецФункции

функция ПолучитьСписокУзлов_ПОС(Подразделение) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Р_POS.Ссылка
	|ИЗ
	|	ПланОбмена.Р_POS КАК Р_POS
	|ГДЕ
	|	Р_POS.ПОС.ОтделВМагазине.Подразделение = &Подразделение");
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Результат = Новый Массив;
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Результат.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат (Результат);
	
КонецФункции
//////////////////////////////////////////////////////////////////
//				Функции для работы с типами ПО ПОС				//

Функция ТипПОДляАЗС(ТипПО) Экспорт
	Если (ТипПО = Перечисления.Р_ТипыПОПОС.ResPOS_Petrol)
	 ИЛИ (ТипПО = Перечисления.Р_ТипыПОПОС.БлокАРМ2)
	 ИЛИ (ТипПО = Перечисления.Р_ТипыПОПОС.ТерминалАЗС_01М) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли
КонецФункции

Функция ТипПОДляОбщепита(ТипПО) Экспорт
	Если (ТипПО = Перечисления.Р_ТипыПОПОС.ResPOS_Bistro)
	 ИЛИ (ТипПО = Перечисления.Р_ТипыПОПОС.ResPOS_Restaurant) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли
КонецФункции

Функция ТоварДляПОПОСОбщепита(ПОС, ТипПО, Товар) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА (Р_Меню.Номенклатура ЕСТЬ NULL) И
	|			  (Р_МодификаторыНоменклатуры.Номенклатура ЕСТЬ NULL) И
	|			  (КомплектующиеНоменклатуры.Номенклатура ЕСТЬ NULL)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ) КАК ТоварОбщепита
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНом
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Р_ВидыМенюДляПОС КАК Р_ВидыМенюДляПОС
	|		ПО Р_ВидыМенюДляПОС.ПОС = &ПОС
	|		 И Р_ВидыМенюДляПОС.ТипПО = &ТипПО
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Р_Меню КАК Р_Меню
	|		ПО Р_Меню.Владелец = Р_ВидыМенюДляПОС.ВидМеню
	|		 И Р_Меню.Номенклатура = &Товар
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Р_МодификаторыНоменклатуры КАК Р_МодификаторыНоменклатуры
	|		ПО ((Р_МодификаторыНоменклатуры.Номенклатура = Р_Меню.Номенклатура) ИЛИ
	|			(Р_МодификаторыНоменклатуры.Номенклатура.ЭтоГруппа) ИЛИ
	|			(Р_МодификаторыНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)))
	|		 И Р_МодификаторыНоменклатуры.Модификатор.ДопНоменклатура = &Товар
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
	|		ПО КомплектующиеНоменклатуры.Номенклатура = Р_Меню.Номенклатура
	|		 И КомплектующиеНоменклатуры.Комплектующая = &Товар
	|ГДЕ
	|	СпрНом.Ссылка = &Товар";
	Запрос.УстановитьПараметр("ПОС", ПОС);
	Запрос.УстановитьПараметр("ТипПО", ТипПО);
	Запрос.УстановитьПараметр("Товар", Товар);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат (Выборка.ТоварОбщепита = 1);
	Иначе
		Возврат Ложь;
	КонецЕсли
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////
//	Получение данных о структуре предприятия: торговые точки, POS, типы ПО, Кассы ККМ	//

Функция ТорговаяТочкаСкладаПродажиИлиРезервуара(СкладСсылка, ОписаниеТТ, ОписаниеДляУдаления) Экспорт
	
	ТорговаяТочка = Неопределено;
	ВидТорговойТочки = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Склады.Ссылка КАК Склад,
	|	ВЫБОР
	|		КОГДА НЕ СкладыПродажи.ТорговаяТочка ЕСТЬ NULL
	|			ТОГДА СкладыПродажи.ТорговаяТочка
	|		КОГДА НЕ Резервуары.Владелец ЕСТЬ NULL
	|			ТОГДА Резервуары.Владелец
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.Р_ТорговыеТочки.ПустаяСсылка)
	|	КОНЕЦ КАК ТорговаяТочка,
	|	СкладыПродажи.ККР КАК ККР,
	|	СкладыПродажи.ПОС КАК ПОС,
	|	ВЫБОР
	|		КОГДА НЕ СкладыПродажи.ТорговаяТочка ЕСТЬ NULL
	|			ТОГДА ""Склад продажи""
	|		КОГДА НЕ Резервуары.Владелец ЕСТЬ NULL
	|			ТОГДА ""Резервуар (склад)""
	|		ИНАЧЕ
	|			""""
	|	КОНЕЦ КАК ВидСклада
	|ИЗ
	|	Справочник.Склады КАК Склады
	|	 ЛЕВОЕ СОЕДИНЕНИЕ
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			Р_ПОСКассы.Ссылка.ТорговаяТочка КАК ТорговаяТочка,
	|			Р_ПОСКассы.ККР КАК ККР,
	|			Р_ПОСКассы.Ссылка КАК ПОС
	|	 	ИЗ
	|			Справочник.Р_ПОС.Кассы КАК Р_ПОСКассы
	|	 	ГДЕ
	|			Р_ПОСКассы.Склад = &Склад) КАК СкладыПродажи
	|		ПО ИСТИНА
	|	 ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Р_СоставТорговойТочки КАК Резервуары
	|		ПО Склады.Ссылка = Резервуары.Склад
	|		 И (Резервуары.НомерРезервуара > 0)
	|ГДЕ
	|	Склады.Ссылка = &Склад";
	Запрос.УстановитьПараметр("Склад", СкладСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.ТорговаяТочка) Тогда
			ТорговаяТочка = Выборка.ТорговаяТочка;
			ОписаниеТТ = Выборка.ВидСклада + " """ + СкладСсылка + """ назначен торговой точке """ + ТорговаяТочка + """";
			Если ЗначениеЗаполнено(Выборка.ККР) Тогда
				ОписаниеДляУдаления = Выборка.ВидСклада + " """ + СкладСсылка + """ назначен ККР """ + Выборка.ККР + """ на POS """ + Выборка.ПОС + """ в торговой точке """ + ТорговаяТочка + """";
			Иначе
				ОписаниеДляУдаления = ОписаниеТТ;
			КонецЕсли
		КонецЕсли
	КонецЕсли;
	
	Возврат ТорговаяТочка;
	
КонецФункции

Функция ПолучитьБрендФилиалТорговойТочки(ДатаПолучения, ТТ) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Р_ТорговыеТочкиВСтруктуреПредприятияСрезПоследних.Филиал,
	|	Р_ТорговыеТочкиВСтруктуреПредприятияСрезПоследних.Бренд
	|ИЗ
	|	РегистрСведений.Р_ТорговыеТочкиВСтруктуреПредприятия.СрезПоследних(&ДатаПолучения, ТорговаяТочка = &ТорговаяТочка) КАК Р_ТорговыеТочкиВСтруктуреПредприятияСрезПоследних
	|ГДЕ
	|	Р_ТорговыеТочкиВСтруктуреПредприятияСрезПоследних.Актуален";
	Запрос.УстановитьПараметр("ДатаПолучения", ДатаПолучения);
	Запрос.УстановитьПараметр("ТорговаяТочка", ТТ);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	Иначе
		Возврат Неопределено;
	КонецЕсли
КонецФункции

Функция ПолучитьТорговыеТочкиОрганизации(Организация, ТипПО=Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Р_ПОСКассы.Ссылка.ТорговаяТочка КАК ТорговаяТочка
	|ИЗ
	|	Справочник.Р_ПОС.Кассы КАК Р_ПОСКассы
	|ГДЕ
	|	(НЕ Р_ПОСКассы.Ссылка.ПометкаУдаления)
	|	И Р_ПОСКассы.Организация = &Организация
	|	И Р_ПОСКассы.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	//УсловиеТипПО";
	Запрос.УстановитьПараметр("Организация", Организация);
	Если ЗначениеЗаполнено(ТипПО) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//УсловиеТипПО", "И (Р_ПОСКассы.ТипПО В (&ТипПО))");
		Запрос.УстановитьПараметр("ТипПО", ТипПО);
	КонецЕсли;
	Возврат Запрос.Выполнить().Выгрузить();	
КонецФункции

Функция ПолучитьПОПОСТорговойТочки(ТоргТочка, ТипПО=Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Р_ПОСУстПО.Ссылка КАК ПОС,
	|	Р_ПОСУстПО.ТипПО КАК ТипПО
	|ИЗ
	|	Справочник.Р_ПОС.УстПО КАК Р_ПОСУстПО
	|ГДЕ
	|	Р_ПОСУстПО.Ссылка.ТорговаяТочка = &ТоргТочка
	|	//УсловиеТипПО
	|УПОРЯДОЧИТЬ ПО
	|	Р_ПОСУстПО.Ссылка.Наименование,
	|	ТипПО";
	Запрос.УстановитьПараметр("ТоргТочка", ТоргТочка);
	Если ЗначениеЗаполнено(ТипПО) Тогда
		Если ТипЗнч(ТипПО) = Тип("СписокЗначений") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//УсловиеТипПО", "И (Р_ПОСУстПО.ТипПО В (&ТипПО))");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//УсловиеТипПО", "И (Р_ПОСУстПО.ТипПО = &ТипПО)");
		КонецЕсли;
		Запрос.УстановитьПараметр("ТипПО", ТипПО);
	КонецЕсли;
	РезЗапроса = Запрос.Выполнить();
	Если РезЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат РезЗапроса.Выгрузить();
	КонецЕсли
КонецФункции

Функция ПолучитьСкладыТорговойТочки(ТоргТочка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Р_СоставТорговойТочки.Склад
	|ИЗ
	|	Справочник.Р_СоставТорговойТочки КАК Р_СоставТорговойТочки
	|ГДЕ
	|	Р_СоставТорговойТочки.Владелец = &ТорговаяТочка
	|	И НЕ Р_СоставТорговойТочки.ПометкаУдаления";
	Запрос.УстановитьПараметр("ТорговаяТочка", ТоргТочка);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ПолучитьСкладыПродажиТорговойТочки(ТоргТочка, ТипПО=Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Р_ПОСКассы.Склад
	|ИЗ
	|	Справочник.Р_ПОС.Кассы КАК Р_ПОСКассы
	|ГДЕ
	|	(НЕ Р_ПОСКассы.Ссылка.ПометкаУдаления)
	|	И Р_ПОСКассы.Ссылка.ТорговаяТочка = &ТорговаяТочка
	|	И Р_ПОСКассы.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	//УсловиеТипПО";
	Запрос.УстановитьПараметр("ТорговаяТочка", ТоргТочка);
	Если ЗначениеЗаполнено(ТипПО) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//УсловиеТипПО", "И (Р_ПОСКассы.ТипПО В (&ТипПО))");
		Запрос.УстановитьПараметр("ТипПО", ТипПО);
	КонецЕсли;
	Возврат Запрос.Выполнить().Выгрузить();	
КонецФункции

Функция ПолучитьОрганизацииПодразделениеТорговойТочки(ТорговаяТочка, ТолькоПервую=Ложь, ТипПО=Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Р_ПОСКассы.Организация, 
	|	Р_ПОСКассы.Ссылка.ТорговаяТочка.Подразделение КАК Подразделение
	|ИЗ
	|	Справочник.Р_ПОС.Кассы КАК Р_ПОСКассы
	|ГДЕ
	|	НЕ Р_ПОСКассы.Ссылка.ПометкаУдаления
	|	И Р_ПОСКассы.Ссылка.ТорговаяТочка = &ТорговаяТочка
	|	//УсловиеТипПО";
	Запрос.УстановитьПараметр("ТорговаяТочка", ТорговаяТочка);
	Если ТолькоПервую Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ", "ВЫБРАТЬ ПЕРВЫЕ 1");
		Выборка = Запрос.Выполнить().Выбрать();
	КонецЕсли;
	Если ЗначениеЗаполнено(ТипПО) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//УсловиеТипПО", "И (Р_ПОСКассы.ТипПО В (&ТипПО))");
		Запрос.УстановитьПараметр("ТипПО", ТипПО);
	КонецЕсли;
	Возврат Запрос.Выполнить().Выгрузить();	
КонецФункции

Функция ТорговаяТочкаВходитВСеть(ТоргТочка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Р_ПОС.Ссылка
	|ИЗ
	|	Справочник.Р_ПОС КАК Р_ПОС
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Р_ТорговыеТочкиВСтруктуреПредприятия.СрезПоследних() КАК СтруктураПрп
	|	ПО СтруктураПрп.ТорговаяТочка = Р_ПОС.ТорговаяТочка
	|	 И СтруктураПрп.Актуален
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Р_ТорговыеТочкиВСтруктуреПредприятия.СрезПоследних( , ТорговаяТочка = &ТоргТочка) КАК СтруктураТоргТочки
	|	ПО СтруктураТоргТочки.Актуален
	|ГДЕ
	|	(НЕ Р_ПОС.ПометкаУдаления)
	|	И Р_ПОС.Активен
	|	И Р_ПОС.ТорговаяТочка <> &ТоргТочка
	|	И Р_ПОС.ТорговаяТочка.Подразделение = &ПодразделениеТоргТочки
	|	И СтруктураПрп.Бренд = СтруктураТоргТочки.Бренд";
	Запрос.УстановитьПараметр("ТоргТочка", ТоргТочка);
	Запрос.УстановитьПараметр("ПодразделениеТоргТочки", ТоргТочка.Подразделение);
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции

Функция ПолучитьТипыПОПОС(ПОС) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Р_ПОСУстПО.ТипПО
	|ИЗ
	|	Справочник.Р_ПОС.УстПО КАК Р_ПОСУстПО
	|ГДЕ
	|	Р_ПОСУстПО.Ссылка = &ПОС";
	Запрос.УстановитьПараметр("ПОС", ПОС);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ПолучитьККРКассаККМСкладПродажиПОПОС(ПОС, ТипПО) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Р_ПОСКассы.ККР КАК ККР,
	|	Р_ПОСКассы.КассаККМ КАК КассаККМ,
	|	Р_ПОСКассы.Организация КАК Организация,
	|	Р_ПОСКассы.Склад КАК Склад
	|ИЗ
	|	Справочник.Р_ПОС.Кассы КАК Р_ПОСКассы
	|ГДЕ
	|	(НЕ Р_ПОСКассы.Ссылка.ПометкаУдаления)
	|	И Р_ПОСКассы.Ссылка = &ПОС
	|	И (Р_ПОСКассы.ТипПО = &ТипПО)";
	Запрос.УстановитьПараметр("ПОС", ПОС);
	Запрос.УстановитьПараметр("ТипПО", ТипПО);
	Возврат Запрос.Выполнить().Выгрузить();	
КонецФункции

Функция ПолучитьСкладыПродажиПОПОС(ПОС, ТипПО=Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Р_ПОСКассы.Склад КАК Склад
	|ИЗ
	|	Справочник.Р_ПОС.Кассы КАК Р_ПОСКассы
	|ГДЕ
	|	(НЕ Р_ПОСКассы.Ссылка.ПометкаУдаления)
	|	И Р_ПОСКассы.Ссылка = &ПОС
	|	И Р_ПОСКассы.Склад <> ЗНАЧЕНИЕ(Справочник.ОтделыВМагазинах.ПустаяСсылка)
	|	//УсловиеТипПО";
	Запрос.УстановитьПараметр("ПОС", ПОС);
	Если ЗначениеЗаполнено(ТипПО) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//УсловиеТипПО", "И (Р_ПОСКассы.ТипПО = &ТипПО)");
		Запрос.УстановитьПараметр("ТипПО", ТипПО);
	КонецЕсли;
	Возврат Запрос.Выполнить().Выгрузить();	
КонецФункции

Функция ПолучитьСкладыПОПОС(ПОС, ТипПОПОС) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Р_СоставТорговойТочки.Склад,
	|	ВЫБОР КОГДА Р_ПОСКассы.Склад ЕСТЬ NULL
	|		ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Основной
	|ИЗ
	|	Справочник.Р_СоставТорговойТочки КАК Р_СоставТорговойТочки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Р_ПОС.Кассы КАК Р_ПОСКассы
	|		ПО Р_ПОСКассы.Склад = Р_СоставТорговойТочки.Склад
	|		 И Р_ПОСКассы.Ссылка = &ПОС
	|		 И Р_ПОСКассы.ТипПО = &ТипПОПОС
	|		 И Р_ПОСКассы.Ссылка.ТорговаяТочка = &ТорговаяТочка
	|ГДЕ
	|	НЕ Р_СоставТорговойТочки.ПометкаУдаления
	|	И Р_СоставТорговойТочки.Владелец = &ТорговаяТочка";
	//|	И Р_ПОСКассы.ТипПО = &ТипПОПОС";
	Запрос.УстановитьПараметр("ПОС", ПОС);
	Запрос.УстановитьПараметр("ТипПОПОС", ТипПОПОС);
	Запрос.УстановитьПараметр("ТорговаяТочка", ПОС.ТорговаяТочка);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ПолучитьТипыЦенПродажиОбщепитПОПОС(ПОС, ТипПО) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Р_ВидыМенюДляПОС.ВидМеню.ТипЦен КАК ТипЦен
	|ИЗ
	|	РегистрСведений.Р_ВидыМенюДляПОС КАК Р_ВидыМенюДляПОС
	|ГДЕ
	|	Р_ВидыМенюДляПОС.ПОС = &ПОС
	|	И Р_ВидыМенюДляПОС.ТипПО = &ТипПО";
	Запрос.УстановитьПараметр("ПОС", ПОС);
	Запрос.УстановитьПараметр("ТипПО", ТипПО);
	Возврат Запрос.Выполнить().Выгрузить();	
КонецФункции

Функция ПолучитьКассыККМПОПОС(ПОС, ТипПО=Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Р_ПОСКассы.КассаККМ,
	|	Р_ПОСКассы.ТипПО
	|ИЗ
	|	Справочник.Р_ПОС.Кассы КАК Р_ПОСКассы
	|ГДЕ
	|	(НЕ Р_ПОСКассы.Ссылка.ПометкаУдаления)
	|	И (Р_ПОСКассы.Ссылка = &ПОС)
	|	И (Р_ПОСКассы.КассаККМ <> ЗНАЧЕНИЕ(Справочник.КассыККМ.ПустаяСсылка))
	|	//УсловиеТипПО";
	Запрос.УстановитьПараметр("ПОС", ПОС);
	Если ЗначениеЗаполнено(ТипПО) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//УсловиеТипПО", "И (Р_ПОСКассы.ТипПО = &ТипПО)");
		Запрос.УстановитьПараметр("ТипПО", ТипПО);
	КонецЕсли;
	Возврат Запрос.Выполнить().Выгрузить();	
КонецФункции

Функция ПолучитьОрганизацииПОПОС(ПОС, ТипПОПОС, ТолькоПервую=Ложь) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Р_ПОСКассы.Организация
	|ИЗ
	|	Справочник.Р_ПОС.Кассы КАК Р_ПОСКассы
	|ГДЕ
	|	НЕ Р_ПОСКассы.Ссылка.ПометкаУдаления
	|	И Р_ПОСКассы.Ссылка = &ПОС
	|	И Р_ПОСКассы.ТипПО = &ТипПОПОС";
	Запрос.УстановитьПараметр("ПОС", ПОС);
	Запрос.УстановитьПараметр("ТипПОПОС", ТипПОПОС);
	Если ТолькоПервую Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ", "ВЫБРАТЬ ПЕРВЫЕ 1");
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Организация;
		Иначе
			Возврат Справочники.Организации.ПустаяСсылка();
		КонецЕсли
	Иначе
		Возврат Запрос.Выполнить().Выгрузить();	
	КонецЕсли
КонецФункции

Функция ПолучитьОрганизациюСкладПродажиПОПОСПроект(ПОС, ТипПОПОС, Проект) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Р_ПОСКассы.Организация,
	|	Р_ПОСКассы.Склад,
	|	Р_ПОСКассы.Ссылка.ТорговаяТочка.Подразделение КАК Подразделение
	|ИЗ
	|	Справочник.Р_ПОС.Кассы КАК Р_ПОСКассы
	|ГДЕ
	|	НЕ Р_ПОСКассы.Ссылка.ПометкаУдаления
	|	И Р_ПОСКассы.Ссылка = &ПОС
	|	И Р_ПОСКассы.ТипПО = &ТипПОПОС
	|	И Р_ПОСКассы.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	И Р_ПОСКассы.Проект = &Проект";
	Запрос.УстановитьПараметр("ПОС", ПОС);
	Запрос.УстановитьПараметр("ТипПОПОС", ТипПОПОС);
	Запрос.УстановитьПараметр("Проект", Проект);
	Возврат Запрос.Выполнить().Выгрузить();	
КонецФункции

Функция ПолучитьПроектыПОПОС(ПОС, ТипПО=Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Р_ПОСКассы.Проект
	|ИЗ
	|	Справочник.Р_ПОС.Кассы КАК Р_ПОСКассы
	|ГДЕ
	|	(НЕ Р_ПОСКассы.Ссылка.ПометкаУдаления)
	|	И Р_ПОСКассы.Ссылка = &ПОС
	|	//УсловиеТипПО";
	Запрос.УстановитьПараметр("ПОС", ПОС);
	Если ЗначениеЗаполнено(ТипПО) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//УсловиеТипПО", "И (Р_ПОСКассы.ТипПО = &ТипПО)");
		Запрос.УстановитьПараметр("ТипПО", ТипПО);
	КонецЕсли;
	Возврат Запрос.Выполнить().Выгрузить();	
КонецФункции

Функция ПолучитьПОПОСПоКассаККМ(КассаККМ) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Р_ПОСКассы.Ссылка КАК ПОС,
	|	Р_ПОСКассы.ТипПО КАК ТипПО
	|ИЗ
	|	Справочник.Р_ПОС.Кассы КАК Р_ПОСКассы
	|ГДЕ
	|	Р_ПОСКассы.КассаККМ = &КассаККМ";
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ПолучитьККРПоКассаККМ(КассаККМ) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Р_ПОСКассы.ККР КАК ККР
	|ИЗ
	|	Справочник.Р_ПОС.Кассы КАК Р_ПОСКассы
	|ГДЕ
	|	Р_ПОСКассы.КассаККМ = &КассаККМ";
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

//////////////////////////////////////////////////////
//			Получение данных о бонусах				//

Функция ПолучитьТаблицуПороговДляБонусов(ДатаПолучения) Экспорт
	
	ДокПорогов = Документы.Р_УстановкаПороговНачисленияБонусов.ПустаяСсылка();
	ВыборкаДокСтавок = Документы.Р_УстановкаПороговНачисленияБонусов.Выбрать( , ДатаПолучения, , "Дата Убыв");
	Пока ВыборкаДокСтавок.Следующий() Цикл
		Если НЕ ВыборкаДокСтавок.Проведен Тогда
			Продолжить;
		КонецЕсли;
		ДокПорогов = ВыборкаДокСтавок.Ссылка;
		Прервать;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Р_ПорогиНачисленияБонусовСрезПоследних.ЗначениеПорога,
	|	Р_ПорогиНачисленияБонусовСрезПоследних.НижняяГраница КАК НижняяГраница
	|ИЗ
	|	РегистрСведений.Р_ПорогиНачисленияБонусов.СрезПоследних(&Период, Регистратор = &ДокПорогов) КАК Р_ПорогиНачисленияБонусовСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	НижняяГраница";
	Запрос.УстановитьПараметр("Период", ДатаПолучения);
	Запрос.УстановитьПараметр("ДокПорогов", ДокПорогов);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьПроцентНачисленияБонусов(ДисконтнаяКарта, ДатаПолучения, СуммаКорректировки=0) Экспорт
	
	Процент = 0;
	
	Если ДисконтнаяКарта.Р_РучнойПроцентБонуса > 0 Тогда
		Процент = ДисконтнаяКарта.Р_РучнойПроцентБонуса;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПродажиПоБонуснымКартамОбороты.СуммаПродажиОборот
		|ИЗ
		|	РегистрНакопления.Р_ПродажиПоБонуснымКартам.Обороты(, &ДатаПолучения, Период, ДисконтнаяКарта = &ДисконтнаяКарта) КАК ПродажиПоБонуснымКартамОбороты";
		
		Запрос.УстановитьПараметр("ДисконтнаяКарта", ДисконтнаяКарта);
		Запрос.УстановитьПараметр("ДатаПолучения", ДатаПолучения);
		
		РасчетнаяСумма = 0;
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			РасчетнаяСумма = Выборка.СуммаПродажиОборот;
		КонецЕсли;
		
		РасчетнаяСумма = РасчетнаяСумма  + СуммаКорректировки;
		
		Если РасчетнаяСумма > 0 Тогда
			ТаблицаПорогов = ПолучитьТаблицуПороговДляБонусов(ДатаПолучения);
			Для Каждого СтрПорог Из ТаблицаПорогов Цикл
				Если РасчетнаяСумма >= СтрПорог.НижняяГраница Тогда
					Процент = СтрПорог.ЗначениеПорога;
				КонецЕсли;
			КонецЦикла
		КонецЕсли
		
	КонецЕсли;
	
	Возврат Процент;
	
КонецФункции

//////////////////////////////////////////////////////
//		Получение данных эмитента-эквайера			//

Функция Р_ДанныеЭмитентаЭквайрера(тЭмитент) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыЭквайринга.Ссылка КАК ДоговорЭквайрига,
	|	ДоговорыЭквайринга.ДоговорВзаиморасчетов
	|ИЗ
	|	Справочник.ДоговорыЭквайринга КАК ДоговорыЭквайринга
	|ГДЕ
	|	ДоговорыЭквайринга.Эквайрер = &Эмитент
	|	И НЕ ДоговорыЭквайринга.ПометкаУдаления";
	Запрос.УстановитьПараметр("Эмитент", тЭмитент);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	Иначе
		Возврат Неопределено;
	КонецЕсли
КонецФункции
	
//////////////////////////////////////////////////////
//			Поиск номенклатуры по офис-кодам		//

Функция НайтиНоменклатуруПоКодуОтПОС(КодТовара, ПОС, ТипПО)
	Результат = Справочники.Номенклатура.ПустаяСсылка();
	Если ЗначениеЗаполнено(ПОС) И ЗначениеЗаполнено(КодТовара) И (ТипЗнч(КодТовара) = Тип("Число")) Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		//|	Р_ТоварыНаПОС.Код,
		|	Р_ТоварыНаПОС.Номенклатура,
		//|	Р_ТоварыНаПОС.ХарактеристикаНоменклатуры,
		//|	Р_ТоварыНаПОС.СерияНоменклатуры,
		|	Р_ТоварыНаПОС.ЕдиницаИзмерения
		|ИЗ
		|	РегистрСведений.Р_ТоварыНаПОС КАК Р_ТоварыНаПОС
		|ГДЕ
		|	Р_ТоварыНаПОС.ПОС = &ПОС
		|	И Р_ТоварыНаПОС.ТипПО = &ТипПО
		|	И Р_ТоварыНаПОС.Код = &КодТовара");
		Запрос.УстановитьПараметр("ПОС", ПОС);
		Запрос.УстановитьПараметр("ТипПО", ТипПО);
		Запрос.УстановитьПараметр("КодТовара", КодТовара);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Выборка.Номенклатура;
		КонецЕсли
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция НайтиНоменклатуруПоКодуОтТТ(чКод, ТипКодаТовараИлиПОС=Неопределено, ТипПО=Неопределено) Экспорт
	Если ТипКодаТовараИлиПОС = Неопределено Тогда
		ОфисКодОбщий = Истина;	//Общий офис-код. Для ГСМ всегда общий
	ИначеЕсли ТипЗнч(ТипКодаТовараИлиПОС) = Тип("Булево") Тогда
		ОфисКодОбщий = ТипКодаТовараИлиПОС;
	Иначе
		ОфисКодОбщий = Ложь;
	КонецЕсли;
	НайденаНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	Если ОфисКодОбщий Тогда		//Общий
		НайденаНоменклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Р_КодДляПОС", чКод);
	Иначе						//Частный
		НайденаНоменклатура = НайтиНоменклатуруПоКодуОтПОС(чКод, ТипКодаТовараИлиПОС, ТипПО);
	КонецЕсли;
	Возврат НайденаНоменклатура;
КонецФункции

Функция ПолучитьПроектНоменклатуры(Товар, НаДату) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УстановкаПроектовДляНоменклатурыСрезПоследних.Проект
	|ИЗ
	|	РегистрСведений.УстановкаПроектовДляНоменклатуры.СрезПоследних(&Дата, НоменклатураПроекта = &Номенклатура) КАК УстановкаПроектовДляНоменклатурыСрезПоследних";
	Запрос.УстановитьПараметр("Дата", НаДату);
	Запрос.УстановитьПараметр("Номенклатура", Товар);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Проект;
	Иначе
		Возврат Справочники.Проекты.ПустаяСсылка();
	КонецЕсли
КонецФункции

Функция НоменклатураДляПОПОС(Товар, ПОС, ТипПО) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УстановкаПроектовДляНоменклатуры.СрезПоследних() КАК Проекты
	|		ПО Проекты.НоменклатураПроекта = Номенклатура.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Р_ПОС.Кассы КАК Р_ПОСКассы
	|		ПО Проекты.Проект = Р_ПОСКассы.Проект
	|ГДЕ
	|	НЕ Номенклатура.ПометкаУдаления
	|	И Номенклатура.Р_ВыгружатьНаПОС
	|	И Номенклатура.Ссылка = &Товар
	|	И Р_ПОСКассы.Ссылка = &ПОС
	|	И Р_ПОСКассы.ТипПО = &ТипПО";
	Запрос.УстановитьПараметр("Товар", Товар);
	Запрос.УстановитьПараметр("ПОС", ПОС);
	Запрос.УстановитьПараметр("ТипПО", ТипПО);
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции

Функция НоменклатураДляВыгрузкиНаПОПОС(Товар, ПОС, ТипПО) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВЫБОР
	|		КОГДА Р_ПОСУстПО.ОбщиеОфисКодыНаТовар ИЛИ
	|			  НЕ (Р_ТоварыНаПОС.Код ЕСТЬ NULL)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Используется
	|ИЗ
	|	Справочник.Р_ПОС.Кассы КАК Р_ПОСКассы
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Р_ПОС.УстПО КАК Р_ПОСУстПО
	|	ПО Р_ПОСУстПО.Ссылка = &ПОС
	|	 И Р_ПОСУстПО.ТипПО = &ТипПО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УстановкаПроектовДляНоменклатуры.СрезПоследних() КАК Проекты
	|		ПО Проекты.НоменклатураПроекта = &Товар
	|		 И НЕ Проекты.НоменклатураПроекта.ПометкаУдаления
	|		 И Проекты.НоменклатураПроекта.Р_ВыгружатьНаПОС
	|		 И Проекты.Проект = Р_ПОСКассы.Проект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Р_ТоварыНаПОС КАК Р_ТоварыНаПОС
	|		ПО Р_ПОСУстПО.ОбщиеОфисКодыНаТовар ИЛИ
	|		  ((Р_ТоварыНаПОС.Номенклатура = &Товар) И (Р_ТоварыНаПОС.ПОС = &ПОС) И (Р_ТоварыНаПОС.ТипПО = &ТипПО))
	|ГДЕ
	|	Р_ПОСКассы.Ссылка = &ПОС
	|	И Р_ПОСКассы.ТипПО = &ТипПО";
	Запрос.УстановитьПараметр("Товар", Товар);
	Запрос.УстановитьПараметр("ПОС", ПОС);
	Запрос.УстановитьПараметр("ТипПО", ТипПО);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Используется;
	Иначе
		Возврат Ложь;
	КонецЕсли
КонецФункции

//////////////////////////////////////////////////////
//			Работа с частными офис-кодами			//

Функция ДопустимоеЗначениеПОПОСДляЧастногоОфисКода(ПОС, ТипПО, Сообщать=Истина) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Р_ПОСУстПО.ОбщиеОфисКодыНаТовар
	|ИЗ
	|	Справочник.Р_ПОС.УстПО КАК Р_ПОСУстПО
	|ГДЕ
	|	Р_ПОСУстПО.Ссылка = &ПОС
	|	И Р_ПОСУстПО.ТипПО = &ТипПО";
	Запрос.УстановитьПараметр("ПОС", ПОС);
	Запрос.УстановитьПараметр("ТипПО", ТипПО);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.ОбщиеОфисКодыНаТовар Тогда
			Если Сообщать Тогда
			#Если Клиент Тогда
			Сообщить("Для POS """ + ПОС + """ (ПО " + ТипПО + ") назначен общий офис-код", СтатусСообщения.Внимание);
			#КонецЕсли
			КонецЕсли;
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли
	Иначе
		Если Сообщать Тогда
		#Если Клиент Тогда
		Сообщить("Для POS """ + ПОС + """ не назначен тип ПО """ + ТипПО + """", СтатусСообщения.Внимание);
		#КонецЕсли
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли
КонецФункции

Функция ДопустимыйЧастныйОфисКод(Код, ПОС, ТипПО, Товар) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Р_ТоварыНаПОС.Номенклатура
	|ИЗ
	|	РегистрСведений.Р_ТоварыНаПОС КАК Р_ТоварыНаПОС
	|ГДЕ
	|	Р_ТоварыНаПОС.Код = &Код
	|	И Р_ТоварыНаПОС.ПОС = &ПОС
	|	И Р_ТоварыНаПОС.ТипПО = &ТипПО
	|	И Р_ТоварыНаПОС.Номенклатура <> &Товар";
	Запрос.УстановитьПараметр("Код", Код);
	Запрос.УстановитьПараметр("ПОС", ПОС);
	Запрос.УстановитьПараметр("ТипПО", ТипПО);
	Запрос.УстановитьПараметр("Товар", Товар);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДругойТовар = Выборка.Номенклатура;
		#Если Клиент Тогда
		Предупреждение("Такой код уже назначен другому товару (" + ДругойТовар.Код + ") " + СокрЛП(ДругойТовар.Наименование));
		#КонецЕсли
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли
КонецФункции

Функция ДопустимыйТоварЧастногоОфисКода(Товар, ПОС, ТипПО) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Р_ТоварыНаПОС.Номенклатура
	|ИЗ
	|	РегистрСведений.Р_ТоварыНаПОС КАК Р_ТоварыНаПОС
	|ГДЕ
	|	Р_ТоварыНаПОС.ПОС = &ПОС
	|	И Р_ТоварыНаПОС.ТипПО = &ТипПО
	|	И Р_ТоварыНаПОС.Номенклатура = &Товар";
	Запрос.УстановитьПараметр("ПОС", ПОС);
	Запрос.УстановитьПараметр("ТипПО", ТипПО);
	Запрос.УстановитьПараметр("Товар", Товар);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	Иначе
		#Если Клиент Тогда
		Сообщить("Товар не назначен в списке частных офис-кодов", СтатусСообщения.Внимание);
		#КонецЕсли
		Возврат Ложь;
	КонецЕсли
КонецФункции

Функция ТоварИспользуетсяПОПОС(Товар, ПОС, ТипПО) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Р_ПОСУстПО.ОбщиеОфисКодыНаТовар ИЛИ
	|			  НЕ (Р_ТоварыНаПОС.Код ЕСТЬ NULL)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Используется
	|ИЗ
	|	Справочник.Р_ПОС.УстПО КАК Р_ПОСУстПО
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Р_ТоварыНаПОС КАК Р_ТоварыНаПОС
	|	ПО (НЕ Р_ПОСУстПО.ОбщиеОфисКодыНаТовар)
	|	 И Р_ТоварыНаПОС.ПОС = &ПОС
	|	 И Р_ТоварыНаПОС.ТипПО = &ТипПО
	|	 И Р_ТоварыНаПОС.Номенклатура = &Товар
	|ГДЕ
	|	Р_ПОСУстПО.Ссылка = &ПОС
	|	И Р_ПОСУстПО.ТипПО = &ТипПО";
	Запрос.УстановитьПараметр("ПОС", ПОС);
	Запрос.УстановитьПараметр("ТипПО", ТипПО);
	Запрос.УстановитьПараметр("Товар", Товар);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Используется;
	Иначе
		Возврат Ложь;
	КонецЕсли
КонецФункции

//////////////////////////////////////////////////////
//		Поиск док. по POS, типу ПО, Касса ККМ		//

Функция ПолучитьНомерСменыФРПОПОС(ПОС, ТипПО, КассаККМ, НомерСмены, Фиск, ДатаКонцаСмены, ДатаЭтоСутки=Ложь) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Р_СменаПОС.Ссылка.НомерСменыФР КАК НомерСменыФР
	|ИЗ
	|	Документ.Р_СменаПОС.КассыККМ КАК Р_СменаПОС
	|ГДЕ
	|	НЕ Р_СменаПОС.Ссылка.ПометкаУдаления
	|	И Р_СменаПОС.Ссылка.ПОС = &ПОС
	|	И Р_СменаПОС.Ссылка.ТипПО = &ТипПО
	|	И Р_СменаПОС.КассаККМ = &КассаККМ
	|	И Р_СменаПОС.Ссылка.НомерСмены = &НомерСмены
	|	И ВЫБОР
	|		КОГДА Р_СменаПОС.Ссылка.РежимФР = ЗНАЧЕНИЕ(Перечисление.Р_ВидыРежимовФР.БезФР)
	|			ТОГДА ЛОЖЬ
	|		КОГДА Р_СменаПОС.Ссылка.НомерСменыФР = 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ = &Фиск
	|	//УсловиеДата
	|УПОРЯДОЧИТЬ ПО
	|	Р_СменаПОС.Ссылка.ДатаЗакрытияСмены";
	Запрос.УстановитьПараметр("ПОС", ПОС);
	Запрос.УстановитьПараметр("ТипПО", ТипПО);
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	Запрос.УстановитьПараметр("НомерСмены", НомерСмены);
	Запрос.УстановитьПараметр("Фиск", Фиск);
	Если ДатаЭтоСутки Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//УсловиеДата",
		"И ((Р_СменаПОС.Ссылка.ДатаОткрытияСмены МЕЖДУ &НачСуток И &КонСуток) ИЛИ (Р_СменаПОС.Ссылка.ДатаЗакрытияСмены МЕЖДУ &НачСуток И &КонСуток))");
		Запрос.УстановитьПараметр("НачСуток", НачалоДня(ДатаКонцаСмены));
		Запрос.УстановитьПараметр("КонСуток", КонецДня(ДатаКонцаСмены));
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//УсловиеДата", "И (Р_СменаПОС.Ссылка.ДатаЗакрытияСмены = &ДатаКонцаСмены)");
		Запрос.УстановитьПараметр("ДатаКонцаСмены", ДатаКонцаСмены);
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.НомерСменыФР;
	Иначе
		Возврат "";
	КонецЕсли
КонецФункции

Функция ПолучитьДокументСменныйОтчетПОПОС(ПОС, ТипПО, КассаККМ, НомерСмены, Фиск, ДатаКонцаСмены, ДатаЭтоСутки=Ложь) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Р_СменаПОС.Ссылка
	|ИЗ
	|	Документ.Р_СменаПОС.КассыККМ КАК Р_СменаПОС
	|ГДЕ
	|	НЕ Р_СменаПОС.Ссылка.ПометкаУдаления
	|	И Р_СменаПОС.Ссылка.ПОС = &ПОС
	|	И Р_СменаПОС.Ссылка.ТипПО = &ТипПО
	|	И Р_СменаПОС.КассаККМ = &КассаККМ
	|	И Р_СменаПОС.Ссылка.НомерСмены = &НомерСмены
	|	И ВЫБОР
	|		КОГДА Р_СменаПОС.Ссылка.РежимФР = ЗНАЧЕНИЕ(Перечисление.Р_ВидыРежимовФР.БезФР)
	|			ТОГДА ЛОЖЬ
	|		КОГДА Р_СменаПОС.Ссылка.НомерСменыФР = 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ = &Фиск
	|	//УсловиеДата
	|УПОРЯДОЧИТЬ ПО
	|	Р_СменаПОС.Ссылка.ДатаЗакрытияСмены";
	Запрос.УстановитьПараметр("ПОС", ПОС);
	Запрос.УстановитьПараметр("ТипПО", ТипПО);
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	Запрос.УстановитьПараметр("НомерСмены", НомерСмены);
	Запрос.УстановитьПараметр("Фиск", Фиск);
	Если ДатаЭтоСутки Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//УсловиеДата",
		"И ((Р_СменаПОС.Ссылка.ДатаОткрытияСмены МЕЖДУ &НачСуток И &КонСуток) ИЛИ (Р_СменаПОС.Ссылка.ДатаЗакрытияСмены МЕЖДУ &НачСуток И &КонСуток))");
		Запрос.УстановитьПараметр("НачСуток", НачалоДня(ДатаКонцаСмены));
		Запрос.УстановитьПараметр("КонСуток", КонецДня(ДатаКонцаСмены));
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//УсловиеДата", "И (Р_СменаПОС.Ссылка.ДатаЗакрытияСмены = &ДатаКонцаСмены)");
		Запрос.УстановитьПараметр("ДатаКонцаСмены", ДатаКонцаСмены);
	КонецЕсли;
	ТабДок = Запрос.Выполнить().Выгрузить();
	Если ТабДок.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат ТабДок[0].Ссылка;
	КонецЕсли
КонецФункции

Функция ПолучитьДокументОтчетОРозничныхПродажах(ПОС, ТипПО, КассаККМ, НомерСмены, Фиск, ДатаСмены) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтчетОРозничныхПродажах.Ссылка
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	НЕ ОтчетОРозничныхПродажах.ПометкаУдаления
	|	И ОтчетОРозничныхПродажах.Р_ПОС = &ПОС
	|	И ОтчетОРозничныхПродажах.Р_ТипПО = &ТипПО
	|	И ОтчетОРозничныхПродажах.КассаККМ = &КассаККМ
	|	И ОтчетОРозничныхПродажах.Р_НомерСмены = &НомерСмены
	|	И ОтчетОРозничныхПродажах.ОтражатьВБухгалтерскомУчете = &Фиск
	|	И КОНЕЦПЕРИОДА(ОтчетОРозничныхПродажах.Дата, ДЕНЬ) = &КонДатаСмены";
	Запрос.УстановитьПараметр("ПОС", ПОС);
	Запрос.УстановитьПараметр("ТипПО", ТипПО);
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	Запрос.УстановитьПараметр("КонДатаСмены", КонецДня(ДатаСмены));
	Запрос.УстановитьПараметр("НомерСмены", НомерСмены);
	Запрос.УстановитьПараметр("Фиск", Фиск);
	ТабДок = Запрос.Выполнить().Выгрузить();
	Если ТабДок.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат ТабДок[0].Ссылка;
	КонецЕсли
КонецФункции

Функция ЕстьНезакрытыеСменыПОС(ПОС) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|		Чеки.Р_ПОС,
	|		Чеки.Р_ККР,
	|		Чеки.НомерСменыККМ,
	|		Чеки.Фискальный
	|ИЗ (
	|	ВЫБРАТЬ
	|		ЧекККМ.Р_ПОС,
	|		ЧекККМ.Р_ККР,
	|		ЧекККМ.НомерСменыККМ,
	|		ЧекККМ.Р_Фискальный КАК Фискальный
	|	ИЗ
	|		Документ.ЧекККМ КАК ЧекККМ
	|	ГДЕ
	|		ЧекККМ.Проведен
	|		И ЧекККМ.Дата > &Период
	|		И ЧекККМ.Р_ПОС = &ПОС
	//|		И ЧекККМ.Р_ТипПО = &ТипПО
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЧекККМ.Р_ПОС,
	|		ЧекККМ.Р_ККР,
	|		ЧекККМ.НомерСменыККМ,
	|		ЧекККМ.Р_Фискальный
	|	) КАК Чеки
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|	ПО Чеки.Р_ПОС = ОтчетОРозничныхПродажах.Р_ПОС
	|	 И Чеки.Р_ККР = ОтчетОРозничныхПродажах.Р_ККР
	|	 И Чеки.НомерСменыККМ = ОтчетОРозничныхПродажах.Р_НомерСмены
	|	 И Чеки.Фискальный = ОтчетОРозничныхПродажах.ОтражатьВБухгалтерскомУчете
	|	 И НЕ ОтчетОРозничныхПродажах.ПометкаУдаления
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.Р_СменаПОС КАК СменаПОС
	|	ПО Чеки.Р_ПОС = СменаПОС.ПОС
	|	 И СменаПОС.ККР = Чеки.Р_ККР
	//|	 И СменаПОС.НомерСменыОбщий = Чеки.НомерСменыККМ
	|	 И СменаПОС.НомерСмены = Чеки.НомерСменыККМ
	|	 И СменаПОС.Фискальная = Чеки.Фискальный
	|	 И НЕ СменаПОС.ПометкаУдаления
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Ссылка ЕСТЬ NULL
	|	ИЛИ СменаПОС.Ссылка ЕСТЬ NULL";
	Запрос.УстановитьПараметр("Период", ДобавитьМесяц(ТекущаяДата(), -1));
	Запрос.УстановитьПараметр("ПОС", ПОС);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли
КонецФункции

Функция ЕстьНезакрытыеСменыПОПОС(ПОС, ККР, ТипПО) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|		Чеки.Р_ПОС,
	|		Чеки.Р_ККР,
	|		Чеки.Р_ТипПО,
	|		Чеки.НомерСменыККМ,
	|		Чеки.Фискальный
	|ИЗ (
	|	ВЫБРАТЬ
	|		ЧекККМ.Р_ПОС,
	|		ЧекККМ.Р_ККР,
	|		ЧекККМ.Р_ТипПО,
	|		ЧекККМ.НомерСменыККМ,
	|		ЧекККМ.Р_Фискальный КАК Фискальный
	|	ИЗ
	|		Документ.ЧекККМ КАК ЧекККМ
	|	ГДЕ
	|		ЧекККМ.Проведен
	|		И ЧекККМ.Дата > &Период
	|		И ЧекККМ.Р_ПОС = &ПОС
	|		И ЧекККМ.Р_ККР = &ККР
	|		И ЧекККМ.Р_ТипПО = &ТипПО
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЧекККМ.Р_ПОС,
	|		ЧекККМ.Р_ККР,
	|		ЧекККМ.Р_ТипПО,
	|		ЧекККМ.НомерСменыККМ,
	|		ЧекККМ.Р_Фискальный
	|	) КАК Чеки
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|	ПО Чеки.Р_ПОС = ОтчетОРозничныхПродажах.Р_ПОС
	|	 И Чеки.Р_ККР = ОтчетОРозничныхПродажах.Р_ККР
	|	 И Чеки.Р_ТипПО = ОтчетОРозничныхПродажах.Р_ТипПО
	|	 И Чеки.НомерСменыККМ = ОтчетОРозничныхПродажах.Р_НомерСмены
	|	 И Чеки.Фискальный = ОтчетОРозничныхПродажах.ОтражатьВБухгалтерскомУчете
	|	 И НЕ ОтчетОРозничныхПродажах.ПометкаУдаления
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.Р_СменаПОС КАК СменаПОС
	|	ПО Чеки.Р_ПОС = СменаПОС.ПОС
	|	 И Чеки.Р_ККР = СменаПОС.ККР
	|	 И СменаПОС.ТипПО = Чеки.Р_ТипПО
	//|	 И СменаПОС.НомерСменыОбщий = Чеки.НомерСменыККМ
	|	 И СменаПОС.НомерСмены = Чеки.НомерСменыККМ
	|	 И СменаПОС.Фискальная = Чеки.Фискальный
	|	 И НЕ СменаПОС.ПометкаУдаления
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Ссылка ЕСТЬ NULL
	|	ИЛИ СменаПОС.Ссылка ЕСТЬ NULL";
	Запрос.УстановитьПараметр("Период", ДобавитьМесяц(ТекущаяДата(), -1));
	Запрос.УстановитьПараметр("ПОС", ПОС);
	Запрос.УстановитьПараметр("ККР", ККР);
	Запрос.УстановитьПараметр("ТипПО", ТипПО);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли
КонецФункции

//////////////////////////////////////////////
//		Процедуры общего назначения			//

Функция ДатаВремяПоследнегоОбменаПОПОСи1С(ПОС, ТипПО) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Р_СведенияОбОбменеПОС.ДатаПоследнегоОбмена КАК ДатаПоследнегоОбмена
	|ИЗ
	|	РегистрСведений.Р_СведенияОбОбменеПОС КАК Р_СведенияОбОбменеПОС
	|ГДЕ
	|	Р_СведенияОбОбменеПОС.ПОС = &ПОС
	|	И Р_СведенияОбОбменеПОС.ТипПО = &ТипПО
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПоследнегоОбмена УБЫВ";
	Запрос.УстановитьПараметр("ПОС", ПОС);
	Запрос.УстановитьПараметр("ТипПО", ТипПО);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДатаПоследнегоОбмена;
	Иначе
		Возврат Неопределено;
	КонецЕсли
КонецФункции

Функция ЭтоСкретчКарта(НоменклатураСсылка) Экспорт
	Если НЕ ЗначениеЗаполнено(НоменклатураСсылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК СкретчКарта
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
	|	  ПО  КатегорииОбъектов.Объект = Номенклатура.Ссылка
	|		И КатегорииОбъектов.Категория.НазначениеКатегории = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура)
	|		И (НЕ КатегорииОбъектов.Категория.ПометкаУдаления)
	|		И КатегорииОбъектов.Категория = ЗНАЧЕНИЕ(Справочник.КатегорииОбъектов.Р_СкретчКарта)
	|ГДЕ
	|	Номенклатура.Ссылка = &НоменклатураСсылка";
	Запрос.УстановитьПараметр("НоменклатураСсылка", НоменклатураСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат НЕ РезультатЗапроса.Пустой();
КонецФункции

//////////////////////////////////////////////////////////
//		Тип ПО, товар относится к определенной категории		//

Функция ТорговаяТочкаНаЗС(ТоргТочка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Р_ПОСУстПО.Ссылка КАК ПОС
	|ИЗ
	|	Справочник.Р_ПОС.УстПО КАК Р_ПОСУстПО
	|ГДЕ
	|	Р_ПОСУстПО.Ссылка.ТорговаяТочка = &ТоргТочка
	|	И НЕ Р_ПОСУстПО.Ссылка.ПометкаУдаления
	|	И (Р_ПОСУстПО.ТипПО В (&ТипПО))";
	Запрос.УстановитьПараметр("ТоргТочка", ТоргТочка);
	ТипПО = Новый СписокЗначений;
	ТипПО.Добавить(Перечисления.Р_ТипыПОПОС.ResPOS_Petrol);
	ТипПО.Добавить(Перечисления.Р_ТипыПОПОС.БлокАРМ2);
	ТипПО.Добавить(Перечисления.Р_ТипыПОПОС.ТерминалАЗС_01М);
	Запрос.УстановитьПараметр("ТипПО", ТипПО);
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции

Процедура Р_ОбработкаЗаполненияДокументов(Источник, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
	Если Не Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ДанныеЗаполнения)) ИЛИ ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда
		
		//Если ТипЗнч(ДанныеЗаполнения) <> Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		//	Возврат;
		//КонецЕсли;
		//Удалить !!!!!
		//Источник = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
		//Работа с Документом Рочет о розничных продажах на АЗС
		
		//Основные параметры, заполнения документа 
		//Источник.мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
		
		//УчетнаяПолитикаНеЗадана = Ложь;
		//Источник.мУчетнаяПолитикаБУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Источник.Дата, УчетнаяПолитикаНеЗадана, Источник.Организация, "Бух", ложь);
		
		//УчетнаяПолитикаНеЗадана = Ложь;
		//Источник.мУчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Источник.Дата, УчетнаяПолитикаНеЗадана, Источник.Организация, "Нал", ложь);
		
		//БУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ.ПолучитьОбъект();
		//мИспользоватьОборотнуюНоменклатуру = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура, "ВидСубконто") = Неопределено, Ложь, Истина);
		//Источник.мРазделятьПоСтавкамНДС  = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС, "ВидСубконто") = Неопределено, Ложь, Истина);
		
		//БУ = ПланыСчетов.Хозрасчетный.КассаВНациональнойВалюте;
		//Источник.ЕстьАналитикаПоОбособленнымПодразделениям = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделенияБезОбразованияЮрЛица, "ВидСубконто") = Неопределено, Ложь, Истина);
		
		//Источник.мУчетДенежныхСредствПоОбособленнымПодразделениям = Ложь;
		//Если Источник.мУчетнаяПолитикаБУ.Количество() > 0 Тогда	
		//	Источник.мУчетДенежныхСредствПоОбособленнымПодразделениям = Источник.ЕстьАналитикаПоОбособленнымПодразделениям И Источник.мУчетнаяПолитикаБУ.ВестиУчетДенежныхСредствПоОбособленнымПодразделениям;
		//КонецЕсли;
		
		//мСтруктураПараметровДенежныхСредств = Новый Структура;
		//мСтруктураПараметровДенежныхСредств.Вставить("ВидДенежныхСредств", Перечисления.ВидыДенежныхСредств.Наличные);
		
		//Общие параметры 
		//Основание = ДанныеЗаполнения;
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		//ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Источник,Основание);
		
		#Если Клиент Тогда
			//Источник.Дата = РабочаяДата;
		#КонецЕсли
		
		//Источник.ВалютаДокумента = ?(НЕ Источник.Касса.ВалютаДенежныхСредств.Пустая(),Источник.Касса.ВалютаДенежныхСредств,Источник.мВалютаРегламентированногоУчета);
		//ВалютаДокумента = Источник.ВалютаДокумента;
		
		//Если ЗначениеЗаполнено(Источник.Касса)
		//	И НЕ Источник.ВалютаДокумента = Источник.Касса.ВалютаДенежныхСредств Тогда
		//	Источник.Касса = Справочники.Кассы.ПустаяСсылка();
		//КонецЕсли;
		
		//Если НЕ ЗначениеЗаполнено(Источник.Касса) Тогда 
		//	Если Источник.ВалютаДокумента = Источник.Организация.ОсновнаяКасса.ВалютаДенежныхСредств Тогда
		//		Источник.Касса = Источник.Организация.ОсновнаяКасса;
		//	КонецЕсли;
		//КонецЕсли;
		
		//Источник.СчетКасса       = ?(ВалютаДокумента=Источник.мВалютаРегламентированногоУчета,ПланыСчетов.Хозрасчетный.КассаВНациональнойВалюте,ПланыСчетов.Хозрасчетный.КассаВИностраннойВалюте); 
		
		//СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Источник.Дата);
		//Источник.КурсДокумента      = СтруктураКурсаДокумента.Курс;
		//Источник.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		
		//Источник.ДокументОснование = Основание.Ссылка;
		
		
		//Для документа
		//ТаблицаПлатежей = Источник.РасшифровкаПлатежа.Выгрузить();
		//СтрокаПлатеж    = ТаблицаПлатежей.Добавить();
		//Источник.ВидОперации     = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка;
		
		//Источник.ВидПриемаРозничнойВыручки = Перечисления.ВидПриемаРозничнойВыручки.ИзКассы; 	
		//Источник.Контрагент   = Основание.КассаККМ;
		
		//Источник.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ДоходОтРозницы;
				
		//Источник.ОплатаПлатежнымиКартами.Загрузить(Основание.ОплатаПлатежнымиКартами.Выгрузить());
		//СуммаОплатыПлатежнымиКартами = Источник.ОплатаПлатежнымиКартами.Итог("Сумма");
		
		//Источник.СуммаДокумента = Источник.СуммаПродаж - Источник.СуммаВозврата - Источник.СуммаОплатыПлатежнымиКартами;
		
		//Заполнение Основной части документа: табличных частей и основных реквизитов
		//Для каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
		//	Р_ЗаполнитьПоРозничнойВыручкеУпр(Источник,СтрокаПлатеж);
		//КонецЦикла; 
		
		//Источник.РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		//Источник.СуммаДокумента=Источник.РасшифровкаПлатежа.Итог("СуммаПлатежа");

		//Заполнение Прочих параметров
		//Источник.Оплачено = Истина;
		//Источник.ОтражатьВУправленческомУчете = Истина;
		//Источник.ОтражатьВБухгалтерскомУчете  = Истина;
		
		//
		//Источник.Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
		
		//Для каждого СтрокаПлатеж Из Источник.РасшифровкаПлатежа Цикл
		//	УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,Источник.ВидОперации);
		//КонецЦикла; 
		//
		//Источник.НазначениеДенежныхСредств = Справочники.НазначенияНаличныхДенежныхСредств.Прочее;	
		//
		//Источник.УстановитьНомерОрдера();
		//Источник.ВыводитьНаПечатьСуммуНДС = Ложь;
		//
		//Для каждого СтрокаПлатеж Из Источник.РасшифровкаПлатежа Цикл
		//	Источник.ОпределитьСчетаУчетаРасчетовСКонтрагентом(СтрокаПлатеж, Ложь);	
		//КонецЦикла;
		//Источник.СтатьяДоходов = Справочники.СтатьиДоходов.НПНК_ДО_;
		//Источник.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПриходДенежныхСредствРозничнаяВыручка;

	//КонецЕсли;
	
КонецПроцедуры

//Предназначение для обработки заполнения Докумена "Приходный кассовый ордер"
Процедура Р_ЗаполнитьПоРозничнойВыручкеУпр(Источник,СтрокаПлатеж)
	
	//////Если ЗначениеЗаполнено(Источник.ДокументОснование) Тогда
	//////	Источник.Дата = Источник.ДокументОснование.Дата;
	//////Иначе
	//////	Возврат;
	//////КонецЕсли;
	//////
	//////Запрос = Новый Запрос;
	//////Запрос.УстановитьПараметр("РозничнаяТочка", Источник.Контрагент);
	//////СписокЗнач = Новый СписокЗначений;
	//////ВалютаДокумента = Источник.ВалютаДокумента;
	//////ДокументОснование = Источник.ДокументОснование;
	//////
	//////Запрос.Текст =	"ВЫБРАТЬ
	//////			  	|	ВЗ_ОтчетОРозничныхПродажах.СтавкаНДС,
	//////			  	|	ВЗ_ОтчетОРозничныхПродажах.СуммаНДСПродаж,
	//////			  	|	ВЗ_ОтчетОРозничныхПродажах.СуммаПродаж КАК СуммаПродаж,
	//////			  	|	ВЗ_ОтчетОРозничныхПродажах.СуммаНДСВозвратов,
	//////			  	|	ВЗ_ОтчетОРозничныхПродажах.СуммаВозвратов КАК СуммаВозвратов,
	//////			  	|	ВЗ_ОтчетОРозничныхПродажах.СтатьяКнигиПродаж
	//////			  	|ИЗ
	//////			  	|	(ВЫБРАТЬ
	//////			  	|		Р_ОтчетОРозничныхПродажахАЗСТовары.СтавкаНДС КАК СтавкаНДС,
	//////			  	|		СУММА(ВЫБОР
	//////			  	|				КОГДА Р_ОтчетОРозничныхПродажахАЗСТовары.СуммаНДС > 0
	//////			  	|					ТОГДА Р_ОтчетОРозничныхПродажахАЗСТовары.СуммаНДС
	//////			  	|				ИНАЧЕ 0
	//////			  	|			КОНЕЦ) КАК СуммаНДСПродаж,
	//////			  	|		СУММА(ВЫБОР
	//////			  	|				КОГДА Р_ОтчетОРозничныхПродажахАЗСТовары.Сумма > 0
	//////			  	|					ТОГДА Р_ОтчетОРозничныхПродажахАЗСТовары.Сумма + ВЫБОР
	//////			  	|							КОГДА Р_ОтчетОРозничныхПродажахАЗСТовары.Ссылка.СуммаВключаетНДС
	//////			  	|								ТОГДА 0
	//////			  	|							ИНАЧЕ Р_ОтчетОРозничныхПродажахАЗСТовары.СуммаНДС
	//////			  	|						КОНЕЦ
	//////			  	|				ИНАЧЕ 0
	//////			  	|			КОНЕЦ) КАК СуммаПродаж,
	//////			  	|		СУММА(ВЫБОР
	//////			  	|				КОГДА Р_ОтчетОРозничныхПродажахАЗСТовары.СуммаНДС < 0
	//////			  	|					ТОГДА Р_ОтчетОРозничныхПродажахАЗСТовары.СуммаНДС
	//////			  	|				ИНАЧЕ 0
	//////			  	|			КОНЕЦ) КАК СуммаНДСВозвратов,
	//////			  	|		СУММА(ВЫБОР
	//////			  	|				КОГДА Р_ОтчетОРозничныхПродажахАЗСТовары.Сумма < 0
	//////			  	|					ТОГДА Р_ОтчетОРозничныхПродажахАЗСТовары.Сумма + ВЫБОР
	//////			  	|							КОГДА Р_ОтчетОРозничныхПродажахАЗСТовары.Ссылка.СуммаВключаетНДС
	//////			  	|								ТОГДА 0
	//////			  	|							ИНАЧЕ Р_ОтчетОРозничныхПродажахАЗСТовары.СуммаНДС
	//////			  	|						КОНЕЦ
	//////			  	|				ИНАЧЕ 0
	//////			  	|			КОНЕЦ) КАК СуммаВозвратов,
	//////			  	|		ВЫБОР
	//////			  	|			КОГДА Р_ОтчетОРозничныхПродажахАЗСТовары.СтавкаНДС = &НДС20
	//////			  	|				ТОГДА &СтатьяКнигиПродажНДС20
	//////			  	|			КОГДА Р_ОтчетОРозничныхПродажахАЗСТовары.СтавкаНДС = &НДС0
	//////			  	|				ТОГДА &СтатьяКнигиПродажНДС0
	//////			  	|			КОГДА Р_ОтчетОРозничныхПродажахАЗСТовары.СтавкаНДС = &НеНДС
	//////			  	|				ТОГДА &СтатьяКнигиПродажНеНДС
	//////			  	|			КОГДА Р_ОтчетОРозничныхПродажахАЗСТовары.СтавкаНДС = &БезНДС
	//////			  	|				ТОГДА &СтатьяКнигиПродажБезНДС
	//////			  	|			ИНАЧЕ &СтатьяКнигиПродажПустая
	//////			  	|		КОНЕЦ КАК СтатьяКнигиПродаж
	//////			  	|	ИЗ
	//////			  	|		Документ.ОтчетОРозничныхПродажах.Товары КАК Р_ОтчетОРозничныхПродажахАЗСТовары
	//////			  	|	ГДЕ
	//////			  	|		Р_ОтчетОРозничныхПродажахАЗСТовары.Ссылка = &ДокОснование
	//////			  	|	
	//////			  	|	СГРУППИРОВАТЬ ПО
	//////			  	|		Р_ОтчетОРозничныхПродажахАЗСТовары.СтавкаНДС
	//////			  	|	
	//////				|	) КАК ВЗ_ОтчетОРозничныхПродажах
	//////			  	|ИТОГИ
	//////			  	|	СУММА(СуммаПродаж),
	//////			  	|	СУММА(СуммаВозвратов)
	//////			  	|ПО
	//////			  	|	ОБЩИЕ";
	//////
	//////Запрос.УстановитьПараметр("НДС20",                  Перечисления.СтавкиНДС.НДС20);
	//////Запрос.УстановитьПараметр("СтатьяКнигиПродажНДС20", Справочники.СтатьиНалоговыхДеклараций.НДС_НОПоСтавке20);
	//////Запрос.УстановитьПараметр("НДС0",                   Перечисления.СтавкиНДС.НДС0);
	//////Запрос.УстановитьПараметр("СтатьяКнигиПродажНДС0",  Справочники.СтатьиНалоговыхДеклараций.НДС_НОПоСтавке0Другие);
	//////Запрос.УстановитьПараметр("БезНДС",                 Перечисления.СтавкиНДС.БезНДС);
	//////Запрос.УстановитьПараметр("СтатьяКнигиПродажБезНДС",Справочники.СтатьиНалоговыхДеклараций.НДС_НООсвобожден);
	//////Запрос.УстановитьПараметр("НеНДС",                  Перечисления.СтавкиНДС.НеНДС);
	//////Запрос.УстановитьПараметр("СтатьяКнигиПродажНеНДС", Справочники.СтатьиНалоговыхДеклараций.НДС_НОНеОбъектНалог);
	//////Запрос.УстановитьПараметр("СтатьяКнигиПродажПустая",Справочники.СтатьиНалоговыхДеклараций.ПустаяСсылка());				
	//////Запрос.УстановитьПараметр("ДокОснование",           Источник.ДокументОснование);
	////////Запрос.УстановитьПараметр("ВидЭмитентаТалонов",     Перечисления.Р_ВидЭмитентаТалонов.Системный);
	//////
	//////Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//////ВыборкаПоВсемПродажамВозвратам = "";
	//////СуммаПродажПоОснованию		= 0;
	//////СуммаВозвратовПоОснованию	= 0;
	//////СуммаРазменнойМонеты		= 0;
	//////СуммаОплатыБанковскимиКредитами	= 0;
	//////СуммаОплатыПлатежнымиКартами	= 0;
	//////
	//////ОбщиеСуммыПродажВозвратов	= Новый Соответствие();	
	//////Если Выборка.Следующий() Тогда
	//////	// Итоги общие
	//////	СуммаПродажПоОснованию		= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаПродаж,	Источник.мВалютаРегламентированногоУчета, ВалютаДокумента, 1, Источник.КурсДокумента, 1, Источник.КратностьДокумента);
	//////	СуммаВозвратовПоОснованию	= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаВозвратов,Источник.мВалютаРегламентированногоУчета, ВалютаДокумента, 1, Источник.КурсДокумента, 1, Источник.КратностьДокумента);
	//////	// Детализация по ставкам НДС
	//////	ВыборкаПоВсемПродажамВозвратам = Выборка.Выбрать();
	//////Иначе
	//////	ВыборкаПоВсемПродажамВозвратам = Неопределено;
	//////КонецЕсли;
	//////
	//////СуммаОплатаПлатежнымиКартамиПоОснованию	= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ДокументОснование.ОплатаПлатежнымиКартами.Итог("Сумма"),Источник.мВалютаРегламентированногоУчета, ВалютаДокумента, 1, Источник.КурсДокумента, 1, Источник.КратностьДокумента);
	//////
	//////СуммаОплатаБанковскимиКредитамиПоОснованию	= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ДокументОснование.ОплатаБанковскимиКредитами.Итог("Сумма"),Источник.мВалютаРегламентированногоУчета, ВалютаДокумента, 1, Источник.КурсДокумента, 1, Источник.КратностьДокумента)
	//////											+ МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ДокументОснование.Р_ОплатаПоВедомостямТалонамКарточкамНаАЗС.Итог("Сумма"),Источник.мВалютаРегламентированногоУчета, ВалютаДокумента, 1, Источник.КурсДокумента, 1, Источник.КратностьДокумента);
	//////
	//////Запрос = Новый Запрос;
	//////Запрос.УстановитьПараметр("РозничнаяТочка", Источник.Контрагент);
	//////										
	//////Запрос.Текст =
	//////"ВЫБРАТЬ
	//////|	РозничнаяВыручкаОстаткиИОбороты.ВидРозничнойВыручки,
	//////|	СУММА(РозничнаяВыручкаОстаткиИОбороты.СуммаОборот) КАК СуммаКонечныйОстаток
	//////|ИЗ
	//////|	РегистрНакопления.РозничнаяВыручка.ОстаткиИОбороты(
	//////|			,
	//////|			,
	//////|			Регистратор,
	//////|			,
	//////|			РозничнаяТочка = &РозничнаяТочка
	//////|				И ВидРозничнойВыручки В (&ВидРозничнойВыручки)) КАК РозничнаяВыручкаОстаткиИОбороты
	//////|ГДЕ
	//////|	РозничнаяВыручкаОстаткиИОбороты.Регистратор = &Регистратор
	//////|
	//////|СГРУППИРОВАТЬ ПО
	//////|	РозничнаяВыручкаОстаткиИОбороты.ВидРозничнойВыручки";
	//////
	//////СписокЗнач = Новый СписокЗначений();
	//////СписокЗнач.Добавить(Перечисления.ВидыРозничнойВыручки.Продажа);
	//////СписокЗнач.Добавить(Перечисления.ВидыРозничнойВыручки.Возврат);
	//////СписокЗнач.Добавить(Перечисления.ВидыРозничнойВыручки.РазменнаяМонета);
	//////СписокЗнач.Добавить(Перечисления.ВидыРозничнойВыручки.ОплатаБанковскимиКредитами);
	//////СписокЗнач.Добавить(Перечисления.ВидыРозничнойВыручки.ОплатаПлатежнымиКартами);
	//////Запрос.УстановитьПараметр("ВидРозничнойВыручки", СписокЗнач);
	//////Запрос.УстановитьПараметр("Регистратор", Источник.ДокументОснование);
	//////Выборка = Запрос.Выполнить().Выбрать();
	//////
	//////Пока Выборка.Следующий() Цикл
	//////	Если (Выборка.ВидРозничнойВыручки = Перечисления.ВидыРозничнойВыручки.Возврат) Тогда
	//////		Источник.СуммаВозврата = Мин(-МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаКонечныйОстаток,
	//////								Источник.мВалютаРегламентированногоУчета, ВалютаДокумента,
	//////								1, Источник.КурсДокумента, 1, Источник.КратностьДокумента),
	//////						  		-СуммаВозвратовПоОснованию);

	//////	ИначеЕсли (Выборка.ВидРозничнойВыручки = Перечисления.ВидыРозничнойВыручки.Продажа) Тогда
	//////		СуммаПоОснованиюПродажи = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ОбщиеСуммыПродажВозвратов[Выборка.ВидРозничнойВыручки],  Источник.мВалютаРегламентированногоУчета, ВалютаДокумента, 1, Источник.КурсДокумента, 1, Источник.КратностьДокумента);
	//////		Источник.СуммаПродаж = Мин(МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаКонечныйОстаток,
	//////								Источник.мВалютаРегламентированногоУчета, ВалютаДокумента,
	//////								1, Источник.КурсДокумента, 1, Источник.КратностьДокумента),
	//////							СуммаПродажПоОснованию);
	//////	ИначеЕсли (Выборка.ВидРозничнойВыручки = Перечисления.ВидыРозничнойВыручки.РазменнаяМонета) Тогда	
	//////		Источник.СуммаРазменнойМонеты = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаКонечныйОстаток,
	//////								Источник.мВалютаРегламентированногоУчета, ВалютаДокумента,
	//////								1, Источник.КурсДокумента, 1, Источник.КратностьДокумента);			
	//////	ИначеЕсли (Выборка.ВидРозничнойВыручки = Перечисления.ВидыРозничнойВыручки.ОплатаБанковскимиКредитами) Тогда	
	//////		Источник.СуммаОплатыБанковскимиКредитами = МИН(- МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаКонечныйОстаток,
	//////													Источник.мВалютаРегламентированногоУчета, ВалютаДокумента,
	//////													1, Источник.КурсДокумента, 1, Источник.КратностьДокумента),
	//////													СуммаОплатаБанковскимиКредитамиПоОснованию);			
	//////	ИначеЕсли (Выборка.ВидРозничнойВыручки = Перечисления.ВидыРозничнойВыручки.ОплатаПлатежнымиКартами) Тогда	
	//////		Источник.СуммаОплатыПлатежнымиКартами = МИН(- МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаКонечныйОстаток,
	//////												Источник.мВалютаРегламентированногоУчета, ВалютаДокумента,
	//////												1, Источник.КурсДокумента, 1, Источник.КратностьДокумента),
	//////												СуммаОплатаПлатежнымиКартамиПоОснованию);			
	//////	КонецЕсли
	//////КонецЦикла;
	//////
	//////Если (ВыборкаПоВсемПродажамВозвратам <> Неопределено)
	//////   И (Источник.СуммаПродаж = СуммаПродажПоОснованию) И (-Источник.СуммаВозврата = СуммаВозвратовПоОснованию) Тогда
	//////	Пока ВыборкаПоВсемПродажамВозвратам.Следующий() Цикл
	//////		Если ВыборкаПоВсемПродажамВозвратам.СуммаПродаж <> 0 Тогда
	//////			СтрокаРозничнойВыручки = Источник.ПриемРозничнойВыручки.Добавить();
	//////			СтрокаРозничнойВыручки.СтавкаНДС = ВыборкаПоВсемПродажамВозвратам.СтавкаНДС;
	//////			СтрокаРозничнойВыручки.Сумма	= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ВыборкаПоВсемПродажамВозвратам.СуммаПродаж, Источник.мВалютаРегламентированногоУчета, ВалютаДокумента,
	//////			1, Источник.КурсДокумента, 1, Источник.КратностьДокумента);
	//////			СтрокаРозничнойВыручки.Возврат = Ложь;
	//////			СтрокаРозничнойВыручки.СуммаНДС = ВыборкаПоВсемПродажамВозвратам.СуммаНДСПродаж;
	//////			СтрокаРозничнойВыручки.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НалоговыеОбязательстваРозница;
	//////		КонецЕсли;
	//////		Если ВыборкаПоВсемПродажамВозвратам.СуммаВозвратов <> 0 Тогда
	//////			СтрокаРозничнойВыручки = Источник.ПриемРозничнойВыручки.Добавить();
	//////			СтрокаРозничнойВыручки.СтавкаНДС = ВыборкаПоВсемПродажамВозвратам.СтавкаНДС;
	//////			СтрокаРозничнойВыручки.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(-ВыборкаПоВсемПродажамВозвратам.СуммаВозвратов, Источник.мВалютаРегламентированногоУчета, ВалютаДокумента,
	//////			1, Источник.КурсДокумента, 1, Источник.КратностьДокумента);
	//////			СтрокаРозничнойВыручки.Возврат = Истина;
	//////			СтрокаРозничнойВыручки.СуммаНДС = -ВыборкаПоВсемПродажамВозвратам.СуммаНДСВозвратов;
	//////			СтрокаРозничнойВыручки.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НалоговыеОбязательстваРозница;
	//////		КонецЕсли;
	//////	КонецЦикла;
	//////КонецЕсли;
	//////
	//////СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПриходДенежныхСредствРозничнаяВыручка;
	//////СтрокаПлатеж.СуммаПлатежа = Источник.СуммаПродаж - Источник.СуммаВозврата + Источник.СуммаРазменнойМонеты - Источник.СуммаОплатыПлатежнымиКартами - Источник.СуммаОплатыБанковскимиКредитами;
	//////Источник.СуммаДокумента = СтрокаПлатеж.СуммаПлатежа;

КонецПроцедуры

