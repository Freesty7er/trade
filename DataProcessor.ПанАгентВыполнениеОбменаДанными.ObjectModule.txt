
#Область ПеременныеМодуля

Перем м_разделительПути;
Перем м_маскаВсеФайлыСервера;
Перем м_агент;
Перем м_реквизитыАгента;
Перем м_настройкиАгента;
Перем м_настройкиДокументов;
Перем м_использоватьВнешнийFTP;
Перем м_имяСобытияЖурналаРегистрации;
Перем м_корневаяПапкаОбменаАгента;
Перем м_наборЗаписейДокументыАгентов;
Перем м_текущаяДата;
Перем м_ftpСоединение;
Перем м_именаСинонимыДокументов;

#КонецОбласти

#Область ОчередьОбмена

//// Обрабатывает очередь обмена данными и выполняет операции выгрузки и загрузки
//// данных согласно параметрам очереди. Всегда выполняются только те задания, у
//// которых реквизит ЗаданиеАктивно = Истина. Задания выполняются по убыванию даты
//// добавления. Первыми выполняются задания с высоким приоритетом.
////
Процедура ВыполнитьОчередьОбменаДанными() Экспорт

	// Постоянные значения.
	м_разделительПути = ПолучитьРазделительПутиСервера();
	м_маскаВсеФайлыСервера = ПолучитьМаскуВсеФайлыСервера();
	
	м_именаСинонимыДокументов = Новый Соответствие;
	Для каждого документМетаданные Из Метаданные.Документы Цикл
		м_именаСинонимыДокументов.Вставить(документМетаданные.Синоним, документМетаданные.Имя);
	КонецЦикла; 
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	запрос.Текст =
	"ВЫБРАТЬ
	|	ПанАгентОчередьОбменаДанными.Агент,
	|	ПанАгентОчередьОбменаДанными.ПрофильОбменаДанными,
	|	ПанАгентОчередьОбменаДанными.НаправлениеОбмена
	|ИЗ
	|	РегистрСведений.ПанАгентОчередьОбменаДанными КАК ПанАгентОчередьОбменаДанными
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПанАгентОчередьОбменаДанными.ВысокийПриоритет УБЫВ,
	|	ПанАгентОчередьОбменаДанными.ДатаЗадания";
	#КонецОбласти
	
	очередьОбменаПустая = Ложь;
	Пока Не очередьОбменаПустая Цикл
	
		результат = запрос.Выполнить();
		Если результат.Пустой() Тогда
			очередьОбменаПустая = Истина;
		Иначе
		
			выборка = результат.Выбрать();
			выборка.Следующий();
			
			м_агент = выборка.Агент;
			Если Не ВыполнитьОбменДанными(выборка.ПрофильОбменаДанными, выборка.НаправлениеОбмена) Тогда
				Прервать;
			КонецЕсли; 
		
		КонецЕсли; 
	
	КонецЦикла;

КонецПроцедуры // ВыполнитьОчередьОбменаДанными()

#КонецОбласти

#Область ОбменДанными

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ВыполнитьОбменДанными(профильОбменаДанными, направлениеОбмена)
	
	м_текущаяДата = ТекущаяДата();
	
	кодыНастроекОбмена = Новый Массив;
	
	#Область массивКодовНастроек
	
	кодыНастроекОбмена.Добавить("1СКаталогОбмена");
	кодыНастроекОбмена.Добавить("1СПарольАрхивов");
	
	кодыНастроекОбмена.Добавить("1СИспользоватьВнешнийFTP");
	кодыНастроекОбмена.Добавить("1САдресВнешнегоFTP");
	кодыНастроекОбмена.Добавить("1СЛогинВнешнегоFTP");
	кодыНастроекОбмена.Добавить("1СПарольВнешнегоFTP");
	кодыНастроекОбмена.Добавить("1СТаймаутFTP");
	
	кодыНастроекОбмена.Добавить("1СИспользоватьПрокси");
	кодыНастроекОбмена.Добавить("1САдресПрокси");
	кодыНастроекОбмена.Добавить("1СПортПрокси");
	кодыНастроекОбмена.Добавить("1СЛогинПрокси");
	кодыНастроекОбмена.Добавить("1СПарольПрокси");
	
	кодыНастроекОбмена.Добавить("1СБратьТипЦенИзДоговора");
	кодыНастроекОбмена.Добавить("1СВариантЗагрузкиЗаявок");
	
	кодыНастроекОбмена.Добавить("1СОсновнойТипАнкеты");
	
	//кодыНастроекОбмена.Добавить("defaultPriceTypeID");
	//кодыНастроекОбмена.Добавить("exchangePeriod");
	
	кодыНастроекОбмена.Добавить("uniqueID");
	кодыНастроекОбмена.Добавить("businessID");
	кодыНастроекОбмена.Добавить("baseID");
	кодыНастроекОбмена.Добавить("name");
	кодыНастроекОбмена.Добавить("shortFIO");
	кодыНастроекОбмена.Добавить("picturesOverWiFiOnly");
	кодыНастроекОбмена.Добавить("debtsByAllAnalytics");
	кодыНастроекОбмена.Добавить("hideMaxDebt");
	кодыНастроекОбмена.Добавить("useActualSalesFromCenter");
	кодыНастроекОбмена.Добавить("syncInterval");
	кодыНастроекОбмена.Добавить("syncMode");
	кодыНастроекОбмена.Добавить("allowBackgroundSync");
	кодыНастроекОбмена.Добавить("documentsSendingDelay");
	кодыНастроекОбмена.Добавить("allowBackgroundLogSync");
	кодыНастроекОбмена.Добавить("syncRequiredInterval");
	
	кодыНастроекОбмена.Добавить("defaultCompanyID");
	кодыНастроекОбмена.Добавить("allowCompanyChange");
	кодыНастроекОбмена.Добавить("defaultPriceTypeID");
	кодыНастроекОбмена.Добавить("allowPriceTypeChange");
	кодыНастроекОбмена.Добавить("defaultMobileDepotID");
	кодыНастроекОбмена.Добавить("allowMobileDepotChange");
	кодыНастроекОбмена.Добавить("defaultCentralDepotID");
	кодыНастроекОбмена.Добавить("allowCentralDepotChange");
	кодыНастроекОбмена.Добавить("defaultReturnInDepotID");
	кодыНастроекОбмена.Добавить("allowReturnInDepotChange");
	кодыНастроекОбмена.Добавить("defaultQuestionnaireTypeID");
	кодыНастроекОбмена.Добавить("startQuestionnaireTypeID");
	кодыНастроекОбмена.Добавить("finishQuestionnaireTypeID");
	кодыНастроекОбмена.Добавить("exchangePeriod");
	кодыНастроекОбмена.Добавить("restsByAllDepots");
	кодыНастроекОбмена.Добавить("restsByAllCompanies");
	кодыНастроекОбмена.Добавить("restsInCatalogByDepotID");
	кодыНастроекОбмена.Добавить("restsInCatalogByCompanyID");		
	кодыНастроекОбмена.Добавить("allowNegativeRestsVT");
	кодыНастроекОбмена.Добавить("allowNegativeRestsPS");
	
	кодыНастроекОбмена.Добавить("returnInDocumentPeriod");
	кодыНастроекОбмена.Добавить("allowReturnInDocumentPeriodChange");
	кодыНастроекОбмена.Добавить("defaultReceiptDepotID");
	кодыНастроекОбмена.Добавить("allowReceiptDepotChange");
	
	кодыНастроекОбмена.Добавить("defaultReturnOutDepotID");
	кодыНастроекОбмена.Добавить("allowReturnOutDepotChange");
	кодыНастроекОбмена.Добавить("defaultSupplierPriceTypeID");
	
	кодыНастроекОбмена.Добавить("returnOutDocumentPeriod");
	кодыНастроекОбмена.Добавить("allowReturnOutDocumentPeriodChange");
	кодыНастроекОбмена.Добавить("showBarcodes");
	кодыНастроекОбмена.Добавить("allowManualPricesForDocumentTypes");
	кодыНастроекОбмена.Добавить("documentTypesCorrectingRests");
	кодыНастроекОбмена.Добавить("SDShowMinRest");
	кодыНастроекОбмена.Добавить("SDShowFacing");
	
	//Взаиморасчеты
	кодыНастроекОбмена.Добавить("documentTypesCorrectingDebts");
	
	//Ценообразование
	кодыНастроекОбмена.Добавить("showAllPrices");
	кодыНастроекОбмена.Добавить("pricesSortOrder");
	кодыНастроекОбмена.Добавить("allowManualPrices");
	кодыНастроекОбмена.Добавить("controlMinPriceType");
	кодыНастроекОбмена.Добавить("minManualPriceTypeID");
	кодыНастроекОбмена.Добавить("showMinPrice");
	кодыНастроекОбмена.Добавить("allowNullPrices");
	кодыНастроекОбмена.Добавить("maxGlobalDiscount");
	кодыНастроекОбмена.Добавить("discountCalculationMode");
	кодыНастроекОбмена.Добавить("globalManualDiscountMode");
	кодыНастроекОбмена.Добавить("measurementPointsModeRepeat");
	кодыНастроекОбмена.Добавить("showRestsInCurrentMeasurementPoint");
	кодыНастроекОбмена.Добавить("showCatalogPricesInBaseUnit");
	кодыНастроекОбмена.Добавить("showNegativeRestsWarning");
	кодыНастроекОбмена.Добавить("showGetCashDialog");
	кодыНастроекОбмена.Добавить("cashInChooseDebtModeAuto");
	кодыНастроекОбмена.Добавить("allowEmptyAnalytics");
	кодыНастроекОбмена.Добавить("deliveryDateShift");
	кодыНастроекОбмена.Добавить("highlightDebtors");
	кодыНастроекОбмена.Добавить("showArticles");
	кодыНастроекОбмена.Добавить("calcOverwriteMode");
	кодыНастроекОбмена.Добавить("recalculateUnitsOnSwitch");
	кодыНастроекОбмена.Добавить("saveProductsFilterMode");
	
	//Оформление
	кодыНастроекОбмена.Добавить("minGoodFontSizeInDocListMode");
	кодыНастроекОбмена.Добавить("maxGoodFontSizeInDocListMode");
	кодыНастроекОбмена.Добавить("minGoodFontSizeInCatalogListMode");
	кодыНастроекОбмена.Добавить("maxGoodFontSizeInCatalogListMode");
	кодыНастроекОбмена.Добавить("minGoodFontSizeInTableMode");
	кодыНастроекОбмена.Добавить("maxGoodFontSizeInTableMode");
	кодыНастроекОбмена.Добавить("minGoodGroupFontSizeInTree");
	кодыНастроекОбмена.Добавить("maxGoodGroupFontSizeInTree");
	кодыНастроекОбмена.Добавить("currencyName");
	
	//Розница
	кодыНастроекОбмена.Добавить("retailMode");
	кодыНастроекОбмена.Добавить("retailPOSID");
	кодыНастроекОбмена.Добавить("autoPrintOrder");
	кодыНастроекОбмена.Добавить("autoPrintSale");
	кодыНастроекОбмена.Добавить("autoPrintCashIn");
	кодыНастроекОбмена.Добавить("autoPrintDepotOrder");
	кодыНастроекОбмена.Добавить("autoPrintReturnIn");
	кодыНастроекОбмена.Добавить("autoPrintQuestionnaire");
	кодыНастроекОбмена.Добавить("startFinishQuestionnairePeriod");
	
	//Супервайзер
	кодыНастроекОбмена.Добавить("messageOfTheDay");
	кодыНастроекОбмена.Добавить("allowGPSTracking");
	кодыНастроекОбмена.Добавить("allowBackgroundGPSTracking");
	кодыНастроекОбмена.Добавить("backgroundGPSAccuracy");
	кодыНастроекОбмена.Добавить("backgroundGPSDistanceFilter");
	кодыНастроекОбмена.Добавить("dynamicRouteDistanceAndTime");
	кодыНастроекОбмена.Добавить("dynamicRouteDistanceMaxAccuracy");
	кодыНастроекОбмена.Добавить("workTimeStart");
	кодыНастроекОбмена.Добавить("workTimeEnd");
	кодыНастроекОбмена.Добавить("logSyncInterval");
	кодыНастроекОбмена.Добавить("allowBaseRestore");
	
	//История продаж
	кодыНастроекОбмена.Добавить("showSalesHistory");
	кодыНастроекОбмена.Добавить("salesHistoryQty");
	кодыНастроекОбмена.Добавить("salesHistoryLength");
	кодыНастроекОбмена.Добавить("showRecommendedQty");
	кодыНастроекОбмена.Добавить("recommendedQtyIncrementPercent");
	кодыНастроекОбмена.Добавить("useActualSalesHistoryFromCenter");
	кодыНастроекОбмена.Добавить("seasonalAdjustment");
	кодыНастроекОбмена.Добавить("planningSalesHistoryPeriod");
	кодыНастроекОбмена.Добавить("recommendedCoeff");
	
	//Безопасность
	кодыНастроекОбмена.Добавить("prohibitEditingAfterPrint");
	кодыНастроекОбмена.Добавить("logSyncMode");
	кодыНастроекОбмена.Добавить("logAutodeletePeriod");
	кодыНастроекОбмена.Добавить("maxLogSize");
	кодыНастроекОбмена.Добавить("basePassword");
	
	//Служебные
	кодыНастроекОбмена.Добавить("lastOrderNumber");
	кодыНастроекОбмена.Добавить("lastSaleNumber");
	кодыНастроекОбмена.Добавить("lastCashInNumber");
	кодыНастроекОбмена.Добавить("lastDepotOrderNumber");
	кодыНастроекОбмена.Добавить("lastReturnInNumber");
	кодыНастроекОбмена.Добавить("lastCashOutNumber");
	кодыНастроекОбмена.Добавить("lastReceiptNumber");
	кодыНастроекОбмена.Добавить("lastReturnOutNumber");
	кодыНастроекОбмена.Добавить("lastMerchandisingNumber");
	
	кодыНастроекОбмена.Добавить("processedLogID");
	кодыНастроекОбмена.Добавить("cashRest");
	
	кодыНастроекОбмена.Добавить("posPicturesChangeIndex");
	кодыНастроекОбмена.Добавить("goodPicturesChangeIndex");
	кодыНастроекОбмена.Добавить("companyPicturesChangeIndex");
	кодыНастроекОбмена.Добавить("agentPicturesChangeIndex");
	кодыНастроекОбмена.Добавить("posChangeIndex");
	
	#КонецОбласти
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	// Назначение запросов:
	//	0 - Временная таблица "РеквизитыАгента". Значения реквизитов агента для использования самостоятельно и в других запросах пакета.
	//	1 - Реквизиты агента.
	//	2 - Настройки агента.
	//	3 - Объекты выгрузки данных профиля обмена данными.
	//	4 - Объекты загрузки данных профиля обмена данными.
	//	5 - Настройки документов по каждому виду документа отдельно.
	запрос.Текст =
	"ВЫБРАТЬ
	|	БПАГАгенты.Ссылка КАК Агент,
	|	БПАГАгенты.Профиль,
	|	БПАГАгенты.Код,
	|	БПАГАгенты.Менеджер,
	|	БПАГАгенты.Менеджер.ЭтоГруппа,
	|	БПАГАгенты.Подразделение,
	|	БПАГАгенты.СегментПартнеров
	|ПОМЕСТИТЬ РеквизитыАгента
	|ИЗ
	|	Справочник.БПАГАгенты КАК БПАГАгенты
	|ГДЕ
	|	БПАГАгенты.Ссылка = &Агент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеквизитыАгента.Агент,
	|	РеквизитыАгента.Профиль,
	|	РеквизитыАгента.Код,
	|	РеквизитыАгента.Менеджер,
	|	РеквизитыАгента.МенеджерЭтоГруппа,
	|	РеквизитыАгента.Подразделение,
	|	РеквизитыАгента.СегментПартнеров
	|ИЗ
	|	РеквизитыАгента КАК РеквизитыАгента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БПАГНастройкиАгентов.ВидНастройки.Код КАК КодНастройки,
	|	БПАГНастройкиАгентов.Значение,
	|	БПАГНастройкиАгентов.Профиль
	|ИЗ
	|	РегистрСведений.БПАГНастройкиАгентов КАК БПАГНастройкиАгентов
	|ГДЕ
	|	БПАГНастройкиАгентов.ВидНастройки.Код В(&КодыНастроек)
	|	И БПАГНастройкиАгентов.Агент = ЗНАЧЕНИЕ(Справочник.БПАГАгенты.ПустаяСсылка)
	|	И БПАГНастройкиАгентов.Профиль = ЗНАЧЕНИЕ(Справочник.БПАГПрофилиАгентов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БПАГНастройкиАгентов.ВидНастройки.Код,
	|	БПАГНастройкиАгентов.Значение,
	|	БПАГНастройкиАгентов.Профиль
	|ИЗ
	|	РеквизитыАгента КАК РеквизитыАгента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БПАГНастройкиАгентов КАК БПАГНастройкиАгентов
	|		ПО (БПАГНастройкиАгентов.Профиль = РеквизитыАгента.Профиль)
	|ГДЕ
	|	БПАГНастройкиАгентов.ВидНастройки.Код В(&КодыНастроек)
	|	И БПАГНастройкиАгентов.Агент = ЗНАЧЕНИЕ(Справочник.БПАГАгенты.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БПАГНастройкиАгентов.ВидНастройки.Код,
	|	БПАГНастройкиАгентов.Значение,
	|	БПАГНастройкиАгентов.Профиль
	|ИЗ
	|	РегистрСведений.БПАГНастройкиАгентов КАК БПАГНастройкиАгентов
	|ГДЕ
	|	БПАГНастройкиАгентов.ВидНастройки.Код В(&КодыНастроек)
	|	И БПАГНастройкиАгентов.Агент = &Агент
	|	И БПАГНастройкиАгентов.Профиль = ЗНАЧЕНИЕ(Справочник.БПАГПрофилиАгентов.ПустаяСсылка)
	|	И НЕ ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПанАгентПрофилиОбменаДаннымиОбъектыВыгрузки.Объект
	|ИЗ
	|	Справочник.ПанАгентПрофилиОбменаДанными.ОбъектыВыгрузки КАК ПанАгентПрофилиОбменаДаннымиОбъектыВыгрузки
	|ГДЕ
	|	ПанАгентПрофилиОбменаДаннымиОбъектыВыгрузки.Ссылка = &ПрофильОбменаДанными
	|	И &НаправлениеОбмена = ЗНАЧЕНИЕ(Перечисление.ПанАгентНаправленияОбменаДанными.Выгрузка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПанАгентПрофилиОбменаДаннымиОбъектыЗагрузки.Объект
	|ИЗ
	|	Справочник.ПанАгентПрофилиОбменаДанными.ОбъектыЗагрузки КАК ПанАгентПрофилиОбменаДаннымиОбъектыЗагрузки
	|ГДЕ
	|	ПанАгентПрофилиОбменаДаннымиОбъектыЗагрузки.Ссылка = &ПрофильОбменаДанными
	|	И &НаправлениеОбмена = ЗНАЧЕНИЕ(Перечисление.ПанАгентНаправленияОбменаДанными.Загрузка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БПАГНастройкиДокументовСрезПоследних.ВидДокумента,
	|	БПАГНастройкиДокументовСрезПоследних.ОбратнаяВыгрузкаИз1С,
	|	БПАГНастройкиДокументовСрезПоследних.ПериодОбратнойВыгрузки,
	|	БПАГНастройкиДокументовСрезПоследних.Проводить,
	|	БПАГНастройкиДокументовСрезПоследних.Перепроводить,
	|	БПАГНастройкиДокументовСрезПоследних.ПерезаписыватьНепроведенные,
	|	БПАГНастройкиДокументовСрезПоследних.НеПоказыватьНаУстройстве,
	|	БПАГНастройкиДокументовСрезПоследних.СрокХранения,
	|	БПАГНастройкиДокументовСрезПоследних.РазрешатьИзменятьДату,
	|	БПАГНастройкиДокументовСрезПоследних.РучныеСкидкиРазрешены,
	|	БПАГНастройкиДокументовСрезПоследних.ЗапрещатьУдалятьНаУстройстве
	|ИЗ
	|	РегистрСведений.БПАГНастройкиДокументов.СрезПоследних(, ) КАК БПАГНастройкиДокументовСрезПоследних
	|ГДЕ
	|	БПАГНастройкиДокументовСрезПоследних.Агент = ЗНАЧЕНИЕ(Справочник.БПАГАгенты.ПустаяСсылка)
	|	И БПАГНастройкиДокументовСрезПоследних.Профиль = ЗНАЧЕНИЕ(Справочник.БПАГПрофилиАгентов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БПАГНастройкиДокументовСрезПоследних.ВидДокумента,
	|	БПАГНастройкиДокументовСрезПоследних.ОбратнаяВыгрузкаИз1С,
	|	БПАГНастройкиДокументовСрезПоследних.ПериодОбратнойВыгрузки,
	|	БПАГНастройкиДокументовСрезПоследних.Проводить,
	|	БПАГНастройкиДокументовСрезПоследних.Перепроводить,
	|	БПАГНастройкиДокументовСрезПоследних.ПерезаписыватьНепроведенные,
	|	БПАГНастройкиДокументовСрезПоследних.НеПоказыватьНаУстройстве,
	|	БПАГНастройкиДокументовСрезПоследних.СрокХранения,
	|	БПАГНастройкиДокументовСрезПоследних.РазрешатьИзменятьДату,
	|	БПАГНастройкиДокументовСрезПоследних.РучныеСкидкиРазрешены,
	|	БПАГНастройкиДокументовСрезПоследних.ЗапрещатьУдалятьНаУстройстве
	|ИЗ
	|	РеквизитыАгента КАК РеквизитыАгента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БПАГНастройкиДокументов.СрезПоследних(, ) КАК БПАГНастройкиДокументовСрезПоследних
	|		ПО (БПАГНастройкиДокументовСрезПоследних.Профиль = РеквизитыАгента.Профиль)
	|			И (БПАГНастройкиДокументовСрезПоследних.Профиль <> ЗНАЧЕНИЕ(Справочник.БПАГПрофилиАгентов.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БПАГНастройкиДокументовСрезПоследних.ВидДокумента,
	|	БПАГНастройкиДокументовСрезПоследних.ОбратнаяВыгрузкаИз1С,
	|	БПАГНастройкиДокументовСрезПоследних.ПериодОбратнойВыгрузки,
	|	БПАГНастройкиДокументовСрезПоследних.Проводить,
	|	БПАГНастройкиДокументовСрезПоследних.Перепроводить,
	|	БПАГНастройкиДокументовСрезПоследних.ПерезаписыватьНепроведенные,
	|	БПАГНастройкиДокументовСрезПоследних.НеПоказыватьНаУстройстве,
	|	БПАГНастройкиДокументовСрезПоследних.СрокХранения,
	|	БПАГНастройкиДокументовСрезПоследних.РазрешатьИзменятьДату,
	|	БПАГНастройкиДокументовСрезПоследних.РучныеСкидкиРазрешены,
	|	БПАГНастройкиДокументовСрезПоследних.ЗапрещатьУдалятьНаУстройстве
	|ИЗ
	|	РегистрСведений.БПАГНастройкиДокументов.СрезПоследних(, ) КАК БПАГНастройкиДокументовСрезПоследних
	|ГДЕ
	|	БПАГНастройкиДокументовСрезПоследних.Агент = &Агент
	|	И БПАГНастройкиДокументовСрезПоследних.Агент <> ЗНАЧЕНИЕ(Справочник.БПАГАгенты.ПустаяСсылка)
	|	И НЕ ИСТИНА";
	#КонецОбласти
	
	запрос.УстановитьПараметр("Агент", м_агент);
	запрос.УстановитьПараметр("КодыНастроек", кодыНастроекОбмена);
	запрос.УстановитьПараметр("ПрофильОбменаДанными", профильОбменаДанными);
	запрос.УстановитьПараметр("НаправлениеОбмена", направлениеОбмена);
	
	результаты = запрос.ВыполнитьПакет();
	
	// Реквизиты агента.
	результатПараметровАгента = результаты[1];
	выборка = результатПараметровАгента.Выбрать();
	выборка.Следующий();
	
	м_реквизитыАгента = Новый Структура;
	Для каждого колонка Из результатПараметровАгента.Колонки Цикл
		
		имяКолонки = колонка.Имя;
		м_реквизитыАгента.Вставить(имяКолонки, выборка[имяКолонки]);
	
	КонецЦикла; 
	
	// Настройки агента.
	м_настройкиАгента = Новый Соответствие;
	выборка = результаты[2].Выбрать();
	Пока выборка.Следующий() Цикл
		м_настройкиАгента.Вставить(выборка.КодНастройки, выборка.Значение);
	КонецЦикла;
	
	// Настройки документов.
	списокНастроекДокументов = Новый Массив;
	Для каждого колонка Из результаты[5].Колонки Цикл
		
		имяКолонки = колонка.Имя;
		Если имяКолонки <> "ВидДокумента" Тогда
			списокНастроекДокументов.Добавить(имяКолонки);
		КонецЕсли; 
	
	КонецЦикла; 
	именаНастроекДокументов = СтрСоединить(списокНастроекДокументов, ",");
	списокНастроекДокументов = Неопределено;
	
	м_настройкиДокументов = Новый Соответствие;
	выборка = результаты[5].Выбрать();
	Пока выборка.Следующий() Цикл
		
		настройкиДокумента = Новый Структура(именаНастроекДокументов);
		ЗаполнитьЗначенияСвойств(настройкиДокумента, выборка);
		м_настройкиДокументов.Вставить(выборка.ВидДокумента, настройкиДокумента);
		
	КонецЦикла;
	
	// Общие параметры обмена.
	м_использоватьВнешнийFTP = м_настройкиАгента["1СИспользоватьВнешнийFTP"];
	Если м_использоватьВнешнийFTP = Неопределено Тогда
		м_использоватьВнешнийFTP = Ложь;
	КонецЕсли; 
	
	// Выполнение обмена.
	Если направлениеОбмена = Перечисления.ПанАгентНаправленияОбменаДанными.Выгрузка Тогда
	
		// Объекты выгрузки данных.
		объектыОбмена = результаты[3].Выгрузить().ВыгрузитьКолонку(0);
		обменВыполнен = ВыполнитьВыгрузкуДанных(объектыОбмена);
	
	Иначе
	
		// Объекты загрузки данных.
		объектыОбмена = результаты[4].Выгрузить().ВыгрузитьКолонку(0);
		обменВыполнен = ВыполнитьЗагрузкуДанных(объектыОбмена);
	
	КонецЕсли; 
	
	Если обменВыполнен Тогда
		
		РегистрыСведений.ПанАгентОчередьОбменаДанными.УдалитьЗаданиеИзОчереди(м_агент, профильОбменаДанными, направлениеОбмена);
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли; 

КонецФункции // ВыполнитьОбменДанными()

#Область ВыгрузкаДанных

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ВыполнитьВыгрузкуДанных(объектыОбмена)

	м_имяСобытияЖурналаРегистрации = НСтр("ru = 'Обмен данными.Выгрузка данных ""Пан Агент""'");
	ЗафиксироватьСообщениеОбмена(УровеньЖурналаРегистрации.Информация, НСтр("ru = 'Начало выгрузки данных.'"),,, м_агент);
	
	м_ftpСоединение = Неопределено;
	м_корневаяПапкаОбменаАгента = Неопределено;
	
	Если м_использоватьВнешнийFTP Тогда
		
		Если Не СоздатьFTPСоединение() Тогда
			Возврат Ложь;
		КонецЕсли; 
	
	Иначе
	
		// Проверим наличие настройки с папкой обмена.
		корневаяПапкаОбмена = м_настройкиАгента["1СКаталогОбмена"];
		Если корневаяПапкаОбмена = Неопределено Тогда
			
			ЗафиксироватьСообщениеОбмена(УровеньЖурналаРегистрации.Ошибка, НСтр("ru = 'В настройках агентов не указан каталог обмена.'"), НСтр("ru = 'Подготовка к выгрузке данных'"));
			Возврат Ложь;
			
		КонецЕсли; 
		
		// Проверим наличие корневой папки обмена для агента и попробуем создать её при необходимости.
		м_корневаяПапкаОбменаАгента = ПолучитьКорневуюПапкуОбменаАгента(корневаяПапкаОбмена);
		Если Не ПроверитьСуществованиеПапкиФайловОбмена() Тогда
			
			Если Не СоздатьПапкуФайловОбмена() Тогда
				Возврат Ложь;
			КонецЕсли; 
			
		КонецЕсли; 
	
	КонецЕсли; 
	
	объектыОбменаФайла = Новый Массив;
	
	// Файл "toDevice.zip".
	Для каждого объектОбмена Из объектыОбмена Цикл
	
		Если объектОбмена <> Перечисления.ПанАгентВидыОбъектовОбмена.СтатусыДокументов Тогда
			объектыОбменаФайла.Добавить(объектОбмена);
		КонецЕсли; 
	
	КонецЦикла; 
	
	СформироватьФайлОбмена(объектыОбменаФайла, "toDevice");
	
	// Файл "status.zip".
	объектыОбменаФайла.Очистить();
	объектыОбменаФайла.Добавить(Перечисления.ПанАгентВидыОбъектовОбмена.СтатусыДокументов);
	
	СформироватьФайлОбмена(объектыОбменаФайла, "status");
	
	ЗафиксироватьСообщениеОбмена(УровеньЖурналаРегистрации.Информация, НСтр("ru = 'Завершение выгрузки данных.'"),,, м_агент);
	
	Возврат Истина;
	
КонецФункции // ВыполнитьВыгрузкуДанных()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция СформироватьФайлОбмена(объектыОбмена, имяФайла)
	
	//папкаФайловОбмена = ПолучитьИмяВременногоФайла("") + м_разделительПути;
	папкаФайловОбмена = м_настройкиАгента["1СКаталогОбмена"] + м_агент.Код + м_разделительПути;
	папкаТаблицВыгрузки = папкаФайловОбмена + "tmpToDeviceUnzipped" + м_разделительПути;
	
	описаниеЭтапа = НСтр("ru = 'Формирование файла обмена'");
	
	Попытка
		СоздатьКаталог(папкаТаблицВыгрузки);
	Исключение
		
		текстСообщения = НСтр("ru = 'Не удалось создать временную папку для выгрузки таблиц.'");
		ЗафиксироватьСообщениеОбмена(УровеньЖурналаРегистрации.Ошибка, текстСообщения, описаниеЭтапа, ИнформацияОбОшибке(), м_агент);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	// Определяем необходимость выполнения обмена конкретных данных и формируем файлы таблиц.
	Если ВыполнятьОбменПоТипуДанных(объектыОбмена, Перечисления.ПанАгентВидыОбъектовОбмена.Настройки) Тогда
		СформироватьТаблицуНастройки(папкаТаблицВыгрузки);
		СформироватьТаблицуПрав(папкаТаблицВыгрузки);
	КонецЕсли;
	
	Если ВыполнятьОбменПоТипуДанных(объектыОбмена, Перечисления.ПанАгентВидыОбъектовОбмена.СтатусыДокументов) Тогда
		СформироватьТаблицуСтатусыДокументов(папкаТаблицВыгрузки);
	КонецЕсли; 
	
	Если ВыполнятьОбменПоТипуДанных(объектыОбмена, Перечисления.ПанАгентВидыОбъектовОбмена.ВопросыАнкет) Тогда
		СформироватьТаблицуВопросыАнкет(папкаТаблицВыгрузки);
	КонецЕсли; 
	
	
	Если ВыполнятьОбменПоТипуДанных(объектыОбмена, Перечисления.ПанАгентВидыОбъектовОбмена.Цены) Тогда
		СформироватьТаблицуТипыЦенТоваров(папкаТаблицВыгрузки);
	КонецЕсли; 
	
	Если ВыполнятьОбменПоТипуДанных(объектыОбмена, Перечисления.ПанАгентВидыОбъектовОбмена.Клиенты) Тогда
		
		СформироватьТаблицуКлиенты(папкаТаблицВыгрузки);
		СформироватьТаблицуТорговыеТочки(папкаТаблицВыгрузки);
		СформироватьТаблицуДоговорыКлиентов(папкаТаблицВыгрузки);
		// "adjustmentGroups", "коэффициентов рекомендуемого запаса"
		// "posProperties", "свойств торговых точек"
		
	КонецЕсли; 
	
	Если ВыполнятьОбменПоТипуДанных(объектыОбмена, Перечисления.ПанАгентВидыОбъектовОбмена.Долги) Тогда
		СформироватьТаблицуДолги(папкаТаблицВыгрузки);
	КонецЕсли; 
	
	
	
	// Если ни один файл не был сформирована, считаем что нет данных для выгрузки и не
	// формируем файл архива с таблицами.
	Если НайтиФайлы(папкаТаблицВыгрузки, м_маскаВсеФайлыСервера).Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли; 
	
	// Сформируем архив для устройства.
	имяАрхива = имяФайла + ".zip";
	полноеИмяАрхива = папкаФайловОбмена + имяАрхива;
	парольАрхива = м_настройкиАгента["1СПарольАрхивов"];
	
	записьZipФайла = Новый ЗаписьZipФайла(полноеИмяАрхива, парольАрхива);
	записьZipФайла.Добавить(папкаТаблицВыгрузки + м_маскаВсеФайлыСервера);
	Попытка
		записьZipФайла.Записать();
	Исключение
	
		текстСообщения = НСтр("ru = 'Не удалось создать архив данных для выгрузки на устройство.'");
		ЗафиксироватьСообщениеОбмена(УровеньЖурналаРегистрации.Ошибка, текстСообщения, описаниеЭтапа, ИнформацияОбОшибке(), м_агент);
		
		Возврат Ложь;
	
	КонецПопытки;
	
	// Отправим файл в целевое расположение.
	файлОтправленУспешно = Ложь;
	Если м_использоватьВнешнийFTP Тогда
		файлОтправленУспешно = ОтправитьФайлОбменаНаFTPСервер(полноеИмяАрхива, м_реквизитыАгента.Код);
	Иначе
		файлОтправленУспешно = ОтправитьФайлОбменаВЛокальнуюПапку(полноеИмяАрхива, м_корневаяПапкаОбменаАгента);
	КонецЕсли; 
	
	Попытка
		УдалитьФайлы(папкаТаблицВыгрузки);
	Исключение
	КонецПопытки;
	
	Возврат файлОтправленУспешно;

КонецФункции // СформироватьФайлОбмена()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ОтправитьФайлОбменаВЛокальнуюПапку(исходноеИмяФайла, целеваяПапка)

	файл = Новый Файл(исходноеИмяФайла);
	
	целевоеИмяФайла = целеваяПапка + файл.Имя;
	имяВременногоФайла = целевоеИмяФайла + ".write";
	
	описаниеЭтапа = НСтр("ru = 'Отправка файла обмена в локальную папку'");
	
	Попытка
		
		ПереместитьФайл(исходноеИмяФайла, имяВременногоФайла);
		ПереместитьФайл(имяВременногоФайла, целевоеИмяФайла);
		
	Исключение
		
		текстСообщения = НСтр("ru = 'Не удалось поместить файл архива данных в папку.'");
		ЗафиксироватьСообщениеОбмена(УровеньЖурналаРегистрации.Ошибка, текстСообщения, описаниеЭтапа, ИнформацияОбОшибке(), м_агент);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;

КонецФункции // ОтправитьФайлОбменаВЛокальнуюПапку()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ОтправитьФайлОбменаНаFTPСервер(исходноеИмяФайла, целевойКаталог)

	описаниеЭтапа = НСтр("ru = 'Отправка файла обмена на FTP-сервер'");
	
	м_ftpСоединение.УстановитьТекущийКаталог("/");
	
	Попытка
		
		Если м_ftpСоединение.НайтиФайлы(целевойКаталог).Количество() = 0 Тогда
			м_ftpСоединение.СоздатьКаталог(целевойКаталог);
		КонецЕсли; 
		
	Исключение
		
		текстСообщения = НСтр("ru = 'Не удалось создать каталог агента на FTP-сервере.'");
		ЗафиксироватьСообщениеОбмена(УровеньЖурналаРегистрации.Ошибка, текстСообщения, описаниеЭтапа, ИнформацияОбОшибке(), м_агент);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	
	// Для минимизации конфликтов одновременного чтения и записи файла обмена скопируем
	// файл обмена в целевой каталог под временным именем, а уже потом переименуем его.
	файл = Новый Файл(исходноеИмяФайла);
	
	целевоеИмяФайла = файл.Имя;
	имяВременногоФайла = целевоеИмяФайла + ".write";
	
	Попытка
		
		м_ftpСоединение.УстановитьТекущийКаталог(целевойКаталог);
		
		Если м_ftpСоединение.НайтиФайлы(имяВременногоФайла).Количество() > 0 Тогда
			м_ftpСоединение.Удалить(имяВременногоФайла);
		КонецЕсли; 
		Если м_ftpСоединение.НайтиФайлы(целевоеИмяФайла).Количество() > 0 Тогда
			м_ftpСоединение.Удалить(целевоеИмяФайла);
		КонецЕсли; 
		
		м_ftpСоединение.Записать(исходноеИмяФайла, имяВременногоФайла);
		м_ftpСоединение.Переместить(имяВременногоФайла, целевоеИмяФайла);
	
	Исключение
		
		текстСообщения = НСтр("ru = 'Не удалось передать файл архива данных обмена на FTP-сервер.'");
		ЗафиксироватьСообщениеОбмена(УровеньЖурналаРегистрации.Ошибка, текстСообщения, описаниеЭтапа, ИнформацияОбОшибке(), м_агент);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;

КонецФункции // ОтправитьФайлОбменаНаFTPСервер()

#КонецОбласти

#Область ЗагрузкаДанных

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ВыполнитьЗагрузкуДанных(объектыОбмена)

	м_имяСобытияЖурналаРегистрации = НСтр("ru = 'Обмен данными.Загрузка данных ""Пан Агент""'");
	ЗафиксироватьСообщениеОбмена(УровеньЖурналаРегистрации.Информация, НСтр("ru = 'Начало загрузки данных.'"),,, м_агент);

	м_наборЗаписейДокументыАгентов = РегистрыСведений.БПАГДокументыАгентов.СоздатьНаборЗаписей();
	м_наборЗаписейДокументыАгентов.Отбор.Период.Установить(м_текущаяДата);
	м_наборЗаписейДокументыАгентов.Отбор.Агент.Установить(м_агент);
	
	м_ftpСоединение = Неопределено;
	м_корневаяПапкаОбменаАгента = Неопределено;
	
	Если м_использоватьВнешнийFTP Тогда
	
		Если Не СоздатьFTPСоединение() Тогда
			Возврат Ложь;
		КонецЕсли; 
	
	Иначе
	
		// Проверим наличие настройки с папкой обмена.
		корневаяПапкаОбмена = м_настройкиАгента["1СКаталогОбмена"];
		Если корневаяПапкаОбмена = Неопределено Тогда
			Возврат Истина;
		КонецЕсли; 
		
		// Проверим наличие корневой папки обмена для агента и попробуем создать её при необходимости.
		м_корневаяПапкаОбменаАгента = ПолучитьКорневуюПапкуОбменаАгента(корневаяПапкаОбмена);
		Если Не ПроверитьСуществованиеПапкиФайловОбмена() Тогда
			Возврат Истина;
		КонецЕсли; 
	
	КонецЕсли; 
	
	ПрочитатьФайлОбмена(объектыОбмена);
	
	ЗафиксироватьСообщениеОбмена(УровеньЖурналаРегистрации.Информация, НСтр("ru = 'Завершение загрузки данных.'"),,, м_агент);
	
	Возврат Истина;
	
КонецФункции // ВыполнитьЗагрузкуДанных()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПрочитатьФайлОбмена(объектыОбмена)
	
	описаниеЭтапа = НСтр("ru = 'Чтение файла обмена'");
	
	// Получим файл из расположения файлов обмена.
	Если м_использоватьВнешнийFTP Тогда
		имяФайлаАрхива = ПолучитьФайлОбменаСFTPСервера(м_реквизитыАгента.Код);
	Иначе
		имяФайлаАрхива = ПолучитьФайлОбменаИзЛокальнойПапки();
	КонецЕсли; 
	Если имяФайлаАрхива = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	//папкаФайловОбмена = ПолучитьИмяВременногоФайла("");
	папкаФайловОбмена = м_настройкиАгента["1СКаталогОбмена"] + м_агент.Код + м_разделительПути + "tmpFromDeviceUnzipped" + м_разделительПути;
	
	Попытка
		СоздатьКаталог(папкаФайловОбмена);
	Исключение
		
		текстСообщения = НСтр("ru = 'Не удалось создать временную папку для загрузки таблиц.'");
		ЗафиксироватьСообщениеОбмена(УровеньЖурналаРегистрации.Ошибка, текстСообщения, описаниеЭтапа, ИнформацияОбОшибке(), м_агент);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	парольАрхива = м_настройкиАгента["1СПарольАрхивов"];
	
	чтениеZipФайла = Новый ЧтениеZipФайла(имяФайлаАрхива, парольАрхива);
	Попытка
		чтениеZipФайла.ИзвлечьВсе(папкаФайловОбмена);
	Исключение
	
		текстСообщения = НСтр("ru = 'Не удалось прочитать архив данных для загрузки с устройства.'");
		ЗафиксироватьСообщениеОбмена(УровеньЖурналаРегистрации.Ошибка, текстСообщения, описаниеЭтапа, ИнформацияОбОшибке(), м_агент);
		
		Возврат Ложь;
	
	КонецПопытки;

	НачатьТранзакцию();
	
	папкаФайловОбмена = папкаФайловОбмена + м_разделительПути;
	данныеОбработаныУспешно = Истина;
	
	Если данныеОбработаныУспешно И ВыполнятьОбменПоТипуДанных(объектыОбмена, Перечисления.ПанАгентВидыОбъектовОбмена.Заявка) Тогда
		данныеОбработаныУспешно = ПрочитатьТаблицуЗаявкиСУстройства(папкаФайловОбмена);
	КонецЕсли; 
	
	Если данныеОбработаныУспешно И ВыполнятьОбменПоТипуДанных(объектыОбмена, Перечисления.ПанАгентВидыОбъектовОбмена.ПКО) Тогда
		данныеОбработаныУспешно = ПрочитатьТаблицуПКОСУстройства(папкаФайловОбмена);
	КонецЕсли; 
	
	Если данныеОбработаныУспешно И ВыполнятьОбменПоТипуДанных(объектыОбмена, Перечисления.ПанАгентВидыОбъектовОбмена.ВозвратОтПокупателя) Тогда
		данныеОбработаныУспешно = ПрочитатьТаблицуВозвратыТовараОтПокупателяСУстройства(папкаФайловОбмена);
	КонецЕсли; 
	
	Если данныеОбработаныУспешно И ВыполнятьОбменПоТипуДанных(объектыОбмена, Перечисления.ПанАгентВидыОбъектовОбмена.Анкета) Тогда
		данныеОбработаныУспешно = ПрочитатьТаблицуАнкета(папкаФайловОбмена);
	КонецЕсли; 
	
	Если данныеОбработаныУспешно И ВыполнятьОбменПоТипуДанных(объектыОбмена, Перечисления.ПанАгентВидыОбъектовОбмена.Мерчандайзинг) Тогда
		данныеОбработаныУспешно = ПрочитатьТаблицуМерчандайзинг(папкаФайловОбмена);
	КонецЕсли; 
	
	Если данныеОбработаныУспешно
		И м_наборЗаписейДокументыАгентов.Количество() > 0 Тогда
	
		Попытка
			м_наборЗаписейДокументыАгентов.Записать(Ложь);
		Исключение
			
			текстСообщения = НСтр("ru = 'Не удалось сохранить изменения в регистре документов агентов.'");
			ЗафиксироватьСообщениеОбмена(УровеньЖурналаРегистрации.Ошибка, текстСообщения, описаниеЭтапа, ИнформацияОбОшибке(), м_агент);
			
			данныеОбработаныУспешно = Ложь;
			
		КонецПопытки;
	
	КонецЕсли; 
	
	Если данныеОбработаныУспешно Тогда
	
		ЗафиксироватьТранзакцию();
		//ОтменитьТранзакцию();
	
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли; 
	
	Попытка
		УдалитьФайлы(имяФайлаАрхива);
	Исключение
	КонецПопытки;
	
	Попытка
		УдалитьФайлы(папкаФайловОбмена);
	Исключение
	КонецПопытки;
	
	Возврат данныеОбработаныУспешно;

КонецФункции // ПрочитатьФайлОбмена()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьФайлОбменаИзЛокальнойПапки()

	описаниеЭтапа = НСтр("ru = 'Получение файла из локальной папки'");
	
	имяФайла = "fromDevice.zip";
	полноеИмяФайла = м_корневаяПапкаОбменаАгента + имяФайла;

	Если НайтиФайлы(полноеИмяФайла).Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	имяВременногоФайла = полноеИмяФайла + ".read";
	имяФайлаВоВременнойПапке = ПолучитьИмяВременногоФайла("zip");
	Попытка
	
		ПереместитьФайл(полноеИмяФайла, имяВременногоФайла);
		ПереместитьФайл(имяВременногоФайла, имяФайлаВоВременнойПапке);
	
	Исключение
	
		текстСообщения = НСтр("ru = 'Не удалось переместить файл архива данных во временную папку.'");
		ЗафиксироватьСообщениеОбмена(УровеньЖурналаРегистрации.Ошибка, текстСообщения, описаниеЭтапа, ИнформацияОбОшибке(), м_агент);
		
		Возврат Неопределено;
	
	КонецПопытки;
	
	Возврат имяФайлаВоВременнойПапке;

КонецФункции // ПолучитьФайлОбменаИзЛокальнойПапки()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьФайлОбменаСFTPСервера(исходныйКаталог)

	описаниеЭтапа = НСтр("ru = 'Получение файла с FTP-сервера'");
	
	// Проверим наличие каталога.
	Попытка
	
		Если м_ftpСоединение.НайтиФайлы(исходныйКаталог).Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли; 
	
	Исключение
	
		текстСообщения = НСтр("ru = 'Не удалось найти каталог агента на FTP-сервере'");
		ЗафиксироватьСообщениеОбмена(УровеньЖурналаРегистрации.Ошибка, текстСообщения, описаниеЭтапа, ИнформацияОбОшибке(), м_агент);
		
		Возврат Неопределено;
	
	КонецПопытки;
	
	// Проверим наличие файла обмена.
	
	имяФайла = "fromDevice.zip";
	Попытка
		
		файлыОбмена = м_ftpСоединение.НайтиФайлы(исходныйКаталог, имяФайла);
		Если файлыОбмена.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли; 
		
	Исключение
		
		текстСообщения = НСтр("ru = 'Не удалось найти файл обмена на FTP-сервере.'");
		ЗафиксироватьСообщениеОбмена(УровеньЖурналаРегистрации.Ошибка, текстСообщения, описаниеЭтапа, ИнформацияОбОшибке(), м_агент);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	файлОбмена = файлыОбмена[0];
	
	м_ftpСоединение.УстановитьТекущийКаталог(исходныйКаталог);
	
	// Для минимизации конфликтов одновременного чтения и записи файла обмена переименуем его.
	имяВременногоФайла = имяФайла + ".read";
	Попытка
		
		Если м_ftpСоединение.НайтиФайлы(имяВременногоФайла).Количество() > 0 Тогда
			м_ftpСоединение.Удалить(имяВременногоФайла);
		КонецЕсли; 
		
		м_ftpСоединение.Переместить(файлОбмена.Имя, имяВременногоФайла);
		
		//Если  м_ftpСоединение.НайтиФайлы(имяВременногоФайла).Количество() = 0 Тогда
		//	Возврат Неопределено
		//КонецЕсли;
		
		имяФайлаВоВременнойПапке = ПолучитьИмяВременногоФайла("zip");
		м_ftpСоединение.Получить(имяВременногоФайла, имяФайлаВоВременнойПапке);
		м_ftpСоединение.Удалить(имяВременногоФайла);
	
	Исключение
		
		текстСообщения = НСтр("ru = 'Не удалось получить файл обмена с FTP-сервера.'");
		ЗафиксироватьСообщениеОбмена(УровеньЖурналаРегистрации.Ошибка, текстСообщения, описаниеЭтапа, ИнформацияОбОшибке(), м_агент);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат имяФайлаВоВременнойПапке;

КонецФункции // ПолучитьФайлОбменаСFTPСервера()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ДобавитьЗаписьВДокументыАгентов(документОбъект, данныеДокумента, видДокумента, имяПоляИдентификатора = "uniqueID")

	естьОшибки = Ложь;
	
	датаСозданияНаУстройстве = ПреобразоватьВДату(данныеДокумента.createdDate);
	Если датаСозданияНаУстройстве = Неопределено Тогда
		естьОшибки = Истина;
	КонецЕсли; 
	
	датаИзмененияНаУстройстве = ПреобразоватьВДату(данныеДокумента.modifiedDate);
	Если датаИзмененияНаУстройстве = Неопределено Тогда
		естьОшибки = Истина;
	КонецЕсли; 
	
	широтаСоздания = ПреобразоватьВЧисло(данныеДокумента.createdLatitude);
	Если широтаСоздания = Неопределено Тогда
		естьОшибки = Истина;
	КонецЕсли; 
	
	долготаСоздания = ПреобразоватьВЧисло(данныеДокумента.createdLongitude);
	Если долготаСоздания = Неопределено Тогда
		естьОшибки = Истина;
	КонецЕсли; 
	
	широтаИзменения = ПреобразоватьВЧисло(данныеДокумента.modifiedLatitude);
	Если широтаИзменения = Неопределено Тогда
		естьОшибки = Истина;
	КонецЕсли; 
	
	долготаИзменения = ПреобразоватьВЧисло(данныеДокумента.modifiedLongitude);
	Если долготаИзменения = Неопределено Тогда
		естьОшибки = Истина;
	КонецЕсли; 
	
	моментСозданияПоGPS = ПреобразоватьВДату(данныеДокумента.createdLocationDate);
	Если моментСозданияПоGPS = Неопределено Тогда
		естьОшибки = Истина;
	КонецЕсли; 
	
	моментИзмененияПоGPS = ПреобразоватьВДату(данныеДокумента.modifiedLocationDate);
	Если моментИзмененияПоGPS = Неопределено Тогда
		естьОшибки = Истина;
	КонецЕсли; 
	
	Если естьОшибки Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	новаяЗапись = м_наборЗаписейДокументыАгентов.Добавить();
	новаяЗапись.Период = м_текущаяДата;
	новаяЗапись.Агент = м_агент;
	новаяЗапись.Документ = документОбъект.Ссылка;
	
	новаяЗапись.ДатаСозданияНаУстройстве = датаСозданияНаУстройстве;
	новаяЗапись.ДатаИзмененияНаУстройстве = датаИзмененияНаУстройстве;
	
	новаяЗапись.ИД = данныеДокумента[имяПоляИдентификатора];
	новаяЗапись.НомерДокументаНаУстройстве = данныеДокумента.number;
	новаяЗапись.ВидДокумента = видДокумента;
	новаяЗапись.ШиротаСоздания = широтаСоздания;
	новаяЗапись.ДолготаСоздания = долготаСоздания;
	новаяЗапись.ШиротаИзменения = широтаИзменения;
	новаяЗапись.ДолготаИзменения = долготаИзменения;
	новаяЗапись.МоментСозданияПоGPS = моментСозданияПоGPS;
	новаяЗапись.МоментИзмененияПоGPS = моментИзмененияПоGPS;
	
	Возврат Истина;

КонецФункции // ДобавитьЗаписьВДокументыАгентов()

#КонецОбласти

#КонецОбласти

#Область ФормированиеФайловДанных

#Область Plist

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура СформироватьPlist(данные, папкаТаблицВыгрузки, имяФайла)
	
	Если данные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	uriПространстваИмен = "http://www.apple.com/DTDs/PropertyList-1.0.dtd";
	
	plistXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(uriПространстваИмен, "plist"));
	plistXDTO.version = "1.0";
	plistXDTO.array = СоздатьArray(данные, uriПространстваИмен);
	
	полноеИмяФайла = папкаТаблицВыгрузки + имяФайла + ".plist";
	
	записьXML = Новый ЗаписьXML;
	записьXML.ОткрытьФайл(полноеИмяФайла, "UTF-8");
	записьXML.ЗаписатьОбъявлениеXML();
	записьXML.ЗаписатьТипДокумента("plist", "-//Apple//DTD PLIST 1.0//EN", "http://www.apple.com/DTDs/PropertyList-1.0.dtd", "");
	ФабрикаXDTO.ЗаписатьXML(записьXML, plistXDTO,, uriПространстваИмен);
	записьXML.Закрыть();

КонецПроцедуры // СформироватьPlist()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция СоздатьArray(данные, uriПространстваИмен)

	arrayXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(uriПространстваИмен, "array"));
	
	Для каждого строкаДанные Из данные Цикл
	
		dictXDTO = СоздатьDict(строкаДанные, uriПространстваИмен);
		arrayXDTO.dict.Добавить(dictXDTO);
	
	КонецЦикла; 
	
	Возврат arrayXDTO;

КонецФункции // СоздатьArray()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция СоздатьDict(данные, uriПространстваИмен)

	dictXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(uriПространстваИмен, "dict"));
	
	Для каждого колонка Из данные.Владелец().Колонки Цикл
		
		имяКолонки = колонка.Имя;
		значениеКолонки = данные[имяКолонки];
		
		dictXDTO.key.Добавить(имяКолонки);
		Если ТипЗнч(значениеКолонки) = Тип("ТаблицаЗначений") Тогда
			dictXDTO.array = СоздатьArray(значениеКолонки, uriПространстваИмен);
		Иначе
			dictXDTO.string.Добавить(ФорматироватьЗначение(значениеКолонки));
		КонецЕсли; 
	
	КонецЦикла; 
	
	Возврат dictXDTO;

КонецФункции // СоздатьDict()

// Преобразовывает переданное значение в строковое представление подходящего формата.
// Для каждого типа будет вызвана соответствующая вспомогательная функция.
//
// Параметры:
//  Значение  - Строка, Дата, Число, Булево, Неопределено, Null - Форматируемое значение.
//
Функция ФорматироватьЗначение(Знач значение)

	Если ТипЗнч(значение) = Тип("Строка") Тогда
		
		НормализоватьТекст(значение);
		
	//ИначеЕсли ТипЗнч(значение) = Тип("Число") Тогда
	//	
	//	ФорматироватьЧисло(значение);
		
	ИначеЕсли ТипЗнч(значение) = Тип("Дата") Тогда
		
		ФорматироватьДату(значение);
		
	//ИначеЕсли ТипЗнч(значение) = Тип("Булево") Тогда
	//	
	//	ФорматироватьБулево(значение);
	//	
	ИначеЕсли Не ЗначениеЗаполнено(значение) Тогда
		
		значение = "";
		
	Иначе
		
		значение = Строка(значение);
		
	КонецЕсли; 
	
	Возврат значение;

КонецФункции // НормализоватьЗначениеДляPlist()

// Приводит текстовые данные к допустимому виду, заменяя недопустимые символы.
//
// Параметры:
//  Текст  - Строка - Обрабатываемый текст.
//
Процедура НормализоватьТекст(текст)

	текст = СтрЗаменить(текст, "&", "&amp;");
	текст = СтрЗаменить(текст, "<", "&lt;");
	текст = СтрЗаменить(текст, ">", "&gt;");

КонецПроцедуры // НормализоватьТекст()

// Преобразовывает переданную дату в строковое представление подходящего формата.
// Если значение не заполнено, будет возвращена пустая строка.
//
// Параметры:
//  Значение  - Дата, Неопределено, Null - Форматируемое значение.
//
Процедура ФорматироватьДату(Значение)

	Если ЗначениеЗаполнено(Значение) Тогда
		Значение = Формат(Значение, "ДФ=dd.MM.yyyy");
	Иначе
		Значение = "";
	КонецЕсли; 

КонецПроцедуры // ФорматироватьДату()

#КонецОбласти

#Область Таблицы

// Процедура - Сформировать таблицу "Настройки"
//
// Параметры:
//  папкаТаблицВыгрузки	 - 	 - 
//
Процедура СформироватьТаблицуНастройки(папкаТаблицВыгрузки)
	
	выгружатьПоставщиков = Ложь;
	краткаяРасшифровка = "";
	порядокСортировки = "0";
	спецификаПользователя = "SD";
	идентификаторБазы = "SD";
	
	//Последние номера документов по данным системы
	последнийНомерЗаявки 				= ПолучитьПоследнийНомерДокументаНаУстройстве(Перечисления.БПАГВидыДокументов.Заявка, м_агент);
	последнийНомерРеализации 			= ПолучитьПоследнийНомерДокументаНаУстройстве(Перечисления.БПАГВидыДокументов.Реализация, м_агент);
	последнийНомерПКО 					= ПолучитьПоследнийНомерДокументаНаУстройстве(Перечисления.БПАГВидыДокументов.ПКО, м_агент);
	последнийНомерЗаказаНаСклад 		= ПолучитьПоследнийНомерДокументаНаУстройстве(Перечисления.БПАГВидыДокументов.ЗаказНаСклад, м_агент);
	последнийНомерВозвратаОтПокупателя 	= ПолучитьПоследнийНомерДокументаНаУстройстве(Перечисления.БПАГВидыДокументов.ВозвратОтПокупателя, м_агент);
	последнийНомерРКО 					= ПолучитьПоследнийНомерДокументаНаУстройстве(Перечисления.БПАГВидыДокументов.РКО, м_агент);
	последнийНомерПоступления 			= ПолучитьПоследнийНомерДокументаНаУстройстве(Перечисления.БПАГВидыДокументов.Поступление, м_агент);
	последнийНомерВозвратаПоставщику 	= ПолучитьПоследнийНомерДокументаНаУстройстве(Перечисления.БПАГВидыДокументов.ВозвратПоставщику, м_агент);
	последнийНомерМерчандайзинга 		= ПолучитьПоследнийНомерДокументаНаУстройстве(Перечисления.БПАГВидыДокументов.Мерчандайзинг, м_агент);
	
	таблицаНастроек = Новый ТаблицаЗначений;
	
	#Область описаниеПолейТаблицыНастроек
	
	таблицаНастроек.Колонки.Добавить("uniqueID");
	таблицаНастроек.Колонки.Добавить("businessID");
	таблицаНастроек.Колонки.Добавить("baseID");
	таблицаНастроек.Колонки.Добавить("name");
	таблицаНастроек.Колонки.Добавить("shortFIO");
	таблицаНастроек.Колонки.Добавить("picturesOverWiFiOnly");
	таблицаНастроек.Колонки.Добавить("debtsByAllAnalytics");
	таблицаНастроек.Колонки.Добавить("hideMaxDebt");
	таблицаНастроек.Колонки.Добавить("useActualSalesFromCenter");
	таблицаНастроек.Колонки.Добавить("syncInterval");
	таблицаНастроек.Колонки.Добавить("syncMode");
	таблицаНастроек.Колонки.Добавить("allowBackgroundSync");
	таблицаНастроек.Колонки.Добавить("documentsSendingDelay");
	таблицаНастроек.Колонки.Добавить("allowBackgroundLogSync");
	таблицаНастроек.Колонки.Добавить("syncRequiredInterval");
	
	таблицаНастроек.Колонки.Добавить("defaultCompanyID");
	таблицаНастроек.Колонки.Добавить("allowCompanyChange");
	таблицаНастроек.Колонки.Добавить("defaultPriceTypeID");
	таблицаНастроек.Колонки.Добавить("allowPriceTypeChange");
	таблицаНастроек.Колонки.Добавить("defaultMobileDepotID");
	таблицаНастроек.Колонки.Добавить("allowMobileDepotChange");
	таблицаНастроек.Колонки.Добавить("defaultCentralDepotID");
	таблицаНастроек.Колонки.Добавить("allowCentralDepotChange");
	таблицаНастроек.Колонки.Добавить("defaultReturnInDepotID");
	таблицаНастроек.Колонки.Добавить("allowReturnInDepotChange");
	таблицаНастроек.Колонки.Добавить("defaultQuestionnaireTypeID");
	таблицаНастроек.Колонки.Добавить("startQuestionnaireTypeID");
	таблицаНастроек.Колонки.Добавить("finishQuestionnaireTypeID");
	таблицаНастроек.Колонки.Добавить("exchangePeriod");
	таблицаНастроек.Колонки.Добавить("restsByAllDepots");
	таблицаНастроек.Колонки.Добавить("restsByAllCompanies");
	таблицаНастроек.Колонки.Добавить("restsInCatalogByDepotID");
	таблицаНастроек.Колонки.Добавить("restsInCatalogByCompanyID");		
	таблицаНастроек.Колонки.Добавить("allowNegativeRestsVT");
	таблицаНастроек.Колонки.Добавить("allowNegativeRestsPS");
	
	таблицаНастроек.Колонки.Добавить("returnInDocumentPeriod");
	таблицаНастроек.Колонки.Добавить("allowReturnInDocumentPeriodChange");
	таблицаНастроек.Колонки.Добавить("defaultReceiptDepotID");
	таблицаНастроек.Колонки.Добавить("allowReceiptDepotChange");
	
	таблицаНастроек.Колонки.Добавить("defaultReturnOutDepotID");
	таблицаНастроек.Колонки.Добавить("allowReturnOutDepotChange");
	таблицаНастроек.Колонки.Добавить("defaultSupplierPriceTypeID");
	
	таблицаНастроек.Колонки.Добавить("returnOutDocumentPeriod");
	таблицаНастроек.Колонки.Добавить("allowReturnOutDocumentPeriodChange");
	таблицаНастроек.Колонки.Добавить("showBarcodes");
	таблицаНастроек.Колонки.Добавить("allowManualPricesForDocumentTypes");
	таблицаНастроек.Колонки.Добавить("documentTypesCorrectingRests");
	таблицаНастроек.Колонки.Добавить("SDShowMinRest");
	таблицаНастроек.Колонки.Добавить("SDShowFacing");
	
	//Взаиморасчеты
	таблицаНастроек.Колонки.Добавить("documentTypesCorrectingDebts");
	
	//Ценообразование
	таблицаНастроек.Колонки.Добавить("showAllPrices");
	таблицаНастроек.Колонки.Добавить("pricesSortOrder");
	таблицаНастроек.Колонки.Добавить("allowManualPrices");
	таблицаНастроек.Колонки.Добавить("controlMinPriceType");
	таблицаНастроек.Колонки.Добавить("minManualPriceTypeID");
	таблицаНастроек.Колонки.Добавить("showMinPrice");
	таблицаНастроек.Колонки.Добавить("allowNullPrices");
	таблицаНастроек.Колонки.Добавить("maxGlobalDiscount");
	таблицаНастроек.Колонки.Добавить("discountCalculationMode");
	таблицаНастроек.Колонки.Добавить("globalManualDiscountMode");
	таблицаНастроек.Колонки.Добавить("measurementPointsModeRepeat");
	таблицаНастроек.Колонки.Добавить("showRestsInCurrentMeasurementPoint");
	таблицаНастроек.Колонки.Добавить("showCatalogPricesInBaseUnit");
	таблицаНастроек.Колонки.Добавить("showNegativeRestsWarning");
	таблицаНастроек.Колонки.Добавить("showGetCashDialog");
	таблицаНастроек.Колонки.Добавить("cashInChooseDebtModeAuto");
	таблицаНастроек.Колонки.Добавить("allowEmptyAnalytics");
	таблицаНастроек.Колонки.Добавить("deliveryDateShift");
	таблицаНастроек.Колонки.Добавить("highlightDebtors");
	таблицаНастроек.Колонки.Добавить("showArticles");
	таблицаНастроек.Колонки.Добавить("calcOverwriteMode");
	таблицаНастроек.Колонки.Добавить("recalculateUnitsOnSwitch");
	таблицаНастроек.Колонки.Добавить("saveProductsFilterMode");
	
	//Оформление
	таблицаНастроек.Колонки.Добавить("minGoodFontSizeInDocListMode");
	таблицаНастроек.Колонки.Добавить("maxGoodFontSizeInDocListMode");
	таблицаНастроек.Колонки.Добавить("minGoodFontSizeInCatalogListMode");
	таблицаНастроек.Колонки.Добавить("maxGoodFontSizeInCatalogListMode");
	таблицаНастроек.Колонки.Добавить("minGoodFontSizeInTableMode");
	таблицаНастроек.Колонки.Добавить("maxGoodFontSizeInTableMode");
	таблицаНастроек.Колонки.Добавить("minGoodGroupFontSizeInTree");
	таблицаНастроек.Колонки.Добавить("maxGoodGroupFontSizeInTree");
	таблицаНастроек.Колонки.Добавить("currencyName");
	
	//Розница
	таблицаНастроек.Колонки.Добавить("retailMode");
	таблицаНастроек.Колонки.Добавить("retailPOSID");
	таблицаНастроек.Колонки.Добавить("autoPrintOrder");
	таблицаНастроек.Колонки.Добавить("autoPrintSale");
	таблицаНастроек.Колонки.Добавить("autoPrintCashIn");
	таблицаНастроек.Колонки.Добавить("autoPrintDepotOrder");
	таблицаНастроек.Колонки.Добавить("autoPrintReturnIn");
	таблицаНастроек.Колонки.Добавить("autoPrintQuestionnaire");
	таблицаНастроек.Колонки.Добавить("startFinishQuestionnairePeriod");
	
	//Супервайзер
	таблицаНастроек.Колонки.Добавить("messageOfTheDay");
	таблицаНастроек.Колонки.Добавить("allowGPSTracking");
	таблицаНастроек.Колонки.Добавить("allowBackgroundGPSTracking");
	таблицаНастроек.Колонки.Добавить("backgroundGPSAccuracy");
	таблицаНастроек.Колонки.Добавить("backgroundGPSDistanceFilter");
	таблицаНастроек.Колонки.Добавить("dynamicRouteDistanceAndTime");
	таблицаНастроек.Колонки.Добавить("dynamicRouteDistanceMaxAccuracy");
	таблицаНастроек.Колонки.Добавить("workTimeStart");
	таблицаНастроек.Колонки.Добавить("workTimeEnd");
	таблицаНастроек.Колонки.Добавить("logSyncInterval");
	таблицаНастроек.Колонки.Добавить("allowBaseRestore");
	
	//История продаж
	таблицаНастроек.Колонки.Добавить("showSalesHistory");
	таблицаНастроек.Колонки.Добавить("salesHistoryQty");
	таблицаНастроек.Колонки.Добавить("salesHistoryLength");
	таблицаНастроек.Колонки.Добавить("showRecommendedQty");
	таблицаНастроек.Колонки.Добавить("recommendedQtyIncrementPercent");
	таблицаНастроек.Колонки.Добавить("useActualSalesHistoryFromCenter");
	таблицаНастроек.Колонки.Добавить("seasonalAdjustment");
	таблицаНастроек.Колонки.Добавить("planningSalesHistoryPeriod");
	таблицаНастроек.Колонки.Добавить("recommendedCoeff");
	
	//Безопасность
	таблицаНастроек.Колонки.Добавить("prohibitEditingAfterPrint");
	таблицаНастроек.Колонки.Добавить("logSyncMode");
	таблицаНастроек.Колонки.Добавить("logAutodeletePeriod");
	таблицаНастроек.Колонки.Добавить("maxLogSize");
	таблицаНастроек.Колонки.Добавить("basePassword");
	
	//Служебные
	таблицаНастроек.Колонки.Добавить("lastOrderNumber");
	таблицаНастроек.Колонки.Добавить("lastSaleNumber");
	таблицаНастроек.Колонки.Добавить("lastCashInNumber");
	таблицаНастроек.Колонки.Добавить("lastDepotOrderNumber");
	таблицаНастроек.Колонки.Добавить("lastReturnInNumber");
	таблицаНастроек.Колонки.Добавить("lastCashOutNumber");
	таблицаНастроек.Колонки.Добавить("lastReceiptNumber");
	таблицаНастроек.Колонки.Добавить("lastReturnOutNumber");
	таблицаНастроек.Колонки.Добавить("lastMerchandisingNumber");
	
	таблицаНастроек.Колонки.Добавить("processedLogID");
	таблицаНастроек.Колонки.Добавить("cashRest");
	
	таблицаНастроек.Колонки.Добавить("posPicturesChangeIndex");
	таблицаНастроек.Колонки.Добавить("goodPicturesChangeIndex");
	таблицаНастроек.Колонки.Добавить("companyPicturesChangeIndex");
	таблицаНастроек.Колонки.Добавить("agentPicturesChangeIndex");
	таблицаНастроек.Колонки.Добавить("posChangeIndex");
	
	#КонецОбласти
	
	строкаНастроек = таблицаНастроек.Добавить();
	
	#Область Настройки
	
	строкаНастроек.uniqueID 	= м_агент.Код;
	строкаНастроек.businessID 	= спецификаПользователя;
	строкаНастроек.baseID 		= идентификаторБазы;
	строкаНастроек.name 		= СокрЛП(м_агент);
	строкаНастроек.shortFIO 	= краткаяРасшифровка;
	
	строкаНастроек.picturesOverWiFiOnly = м_настройкиАгента["picturesOverWiFiOnly"];
	строкаНастроек.debtsByAllAnalytics 	= м_настройкиАгента["debtsByAllAnalytics"];
	
	строкаНастроек.hideMaxDebt 						= ?(м_настройкиАгента["hideMaxDebt"], "1", "0");
	строкаНастроек.useActualSalesFromCenter 		= ?(м_настройкиАгента["useActualSalesFromCenter"], "1", "0");
	строкаНастроек.useActualSalesHistoryFromCenter 	= ?(м_настройкиАгента["useActualSalesHistoryFromCenter"], "1", "0");
	строкаНастроек.syncInterval 					= Формат(м_настройкиАгента["syncInterval"], "ЧРД=.; ЧН=; ЧГ=0");
	строкаНастроек.syncMode 						= Формат(м_настройкиАгента["syncMode"], "ЧРД=.; ЧН=; ЧГ=0");
	строкаНастроек.allowBackgroundSync 				= ?(м_настройкиАгента["allowBackgroundSync"], "1", "0");
	строкаНастроек.documentsSendingDelay 			= Формат(м_настройкиАгента["documentsSendingDelay"], "ЧРД=.; ЧН=; ЧГ=0");
	строкаНастроек.allowBackgroundLogSync 			= ?(м_настройкиАгента["allowBackgroundLogSync"], "1", "0");
	строкаНастроек.syncRequiredInterval 			= Формат(м_настройкиАгента["syncRequiredInterval"], "ЧРД=.; ЧН=; ЧГ=0");
	
	строкаНастроек.defaultCompanyID 			= СокрЛП(м_настройкиАгента["defaultCompanyID"].Код);
	строкаНастроек.allowCompanyChange 			= ?(м_настройкиАгента["allowCompanyChange"], "1", "0");
	строкаНастроек.defaultMobileDepotID 		= СокрЛП(м_настройкиАгента["defaultMobileDepotID"].Код);
	строкаНастроек.allowMobileDepotChange 		= ?(м_настройкиАгента["allowMobileDepotChange"], "1", "0");
	строкаНастроек.defaultCentralDepotID 		= СокрЛП(м_настройкиАгента["defaultCentralDepotID"].Код);
	строкаНастроек.allowCentralDepotChange 		= ?(м_настройкиАгента["allowCentralDepotChange"], "1", "0");
	строкаНастроек.defaultReturnInDepotID 		= СокрЛП(м_настройкиАгента["defaultReturnInDepotID"].Код);
	строкаНастроек.allowReturnInDepotChange 	= ?(м_настройкиАгента["allowReturnInDepotChange"], "1", "0");
	строкаНастроек.defaultQuestionnaireTypeID 	= СокрЛП(м_настройкиАгента["defaultQuestionnaireTypeID"].Код);
	строкаНастроек.startQuestionnaireTypeID 	= СокрЛП(м_настройкиАгента["startQuestionnaireTypeID"].Код);
	строкаНастроек.finishQuestionnaireTypeID 	= СокрЛП(м_настройкиАгента["finishQuestionnaireTypeID"].Код);
	
	строкаНастроек.exchangePeriod = Формат(м_настройкиАгента["exchangePeriod"], "ЧРД=.; ЧН=; ЧГ=0");
	
	строкаНастроек.restsByAllDepots 			= ?(м_настройкиАгента["restsByAllDepots"], "1", "0");
	строкаНастроек.restsByAllCompanies 			= ?(м_настройкиАгента["restsByAllCompanies"], "1", "0");
	строкаНастроек.restsInCatalogByDepotID 		= СокрЛП(м_настройкиАгента["restsInCatalogByDepotID"].Код);
	строкаНастроек.restsInCatalogByCompanyID 	= СокрЛП(м_настройкиАгента["restsInCatalogByCompanyID"].Код);
	строкаНастроек.allowNegativeRestsVT 		= Формат(м_настройкиАгента["allowNegativeRestsVT"], "ЧРД=.; ЧН=; ЧГ=0");
	строкаНастроек.allowNegativeRestsPS 		= Формат(м_настройкиАгента["allowNegativeRestsPS"], "ЧРД=.; ЧН=; ЧГ=0");
	
	строкаНастроек.returnInDocumentPeriod 				= Формат(м_настройкиАгента["returnInDocumentPeriod"], "ЧРД=.; ЧН=; ЧГ=0");
	строкаНастроек.allowReturnInDocumentPeriodChange 	= ?(м_настройкиАгента["allowReturnInDocumentPeriodChange"], "1", "0");
	строкаНастроек.defaultReceiptDepotID 				= СокрЛП(м_настройкиАгента["defaultReceiptDepotID"].Код);
	строкаНастроек.allowReceiptDepotChange 				= ?(м_настройкиАгента["allowReceiptDepotChange"], "1", "0");
	строкаНастроек.defaultReturnOutDepotID 				= СокрЛП(м_настройкиАгента["defaultReturnOutDepotID"].Код);
	строкаНастроек.allowReturnOutDepotChange 			= ?(м_настройкиАгента["allowReturnOutDepotChange"], "1", "0");
	строкаНастроек.returnOutDocumentPeriod 				= Формат(м_настройкиАгента["returnOutDocumentPeriod"], "ЧРД=.; ЧН=; ЧГ=0");
	строкаНастроек.allowReturnOutDocumentPeriodChange 	= ?(м_настройкиАгента["allowReturnOutDocumentPeriodChange"], "1", "0");
	строкаНастроек.showBarcodes 						= ?(м_настройкиАгента["showBarcodes"], "1", "0");
	строкаНастроек.documentTypesCorrectingRests 		= СокрЛП(м_настройкиАгента["documentTypesCorrectingRests"]);
	строкаНастроек.SDShowMinRest 						= ?(м_настройкиАгента["SDShowMinRest"], "1", "0");
	строкаНастроек.SDShowFacing 						= ?(м_настройкиАгента["SDShowFacing"], "1", "0");
	
	#КонецОбласти
	
	#Область Взаиморасчеты
	
	строкаНастроек.documentTypesCorrectingDebts = СокрЛП(м_настройкиАгента["documentTypesCorrectingDebts"]);
	
	#КонецОбласти
	
	#Область Ценообразование
	
	строкаНастроек.defaultPriceTypeID 	= СокрЛП(м_настройкиАгента["defaultPriceTypeID"].Код);
	строкаНастроек.allowPriceTypeChange = ?(м_настройкиАгента["allowPriceTypeChange"], "1", "0");
	строкаНастроек.showAllPrices 		= ?(м_настройкиАгента["showAllPrices"], "1", "0");
	строкаНастроек.pricesSortOrder 		= порядокСортировки;
	строкаНастроек.allowManualPrices 	= ?(м_настройкиАгента["allowManualPrices"], "1", "0");
	строкаНастроек.controlMinPriceType 	= ?(м_настройкиАгента["controlMinPriceType"], "1", "0");
	строкаНастроек.minManualPriceTypeID = СокрЛП(м_настройкиАгента["minManualPriceTypeID"].Код);
	строкаНастроек.showMinPrice 		= ?(м_настройкиАгента["showMinPrice"], "1", "0");
	строкаНастроек.allowNullPrices 		= ?(м_настройкиАгента["allowNullPrices"], "1", "0");
	строкаНастроек.maxGlobalDiscount 	= Формат(м_настройкиАгента["maxGlobalDiscount"], "ЧРД=.; ЧН=; ЧГ=0");
	
	строкаНастроек.defaultSupplierPriceTypeID 			= СокрЛП(м_настройкиАгента["defaultSupplierPriceTypeID"].Код);
	строкаНастроек.allowManualPricesForDocumentTypes	= СокрЛП(м_настройкиАгента["allowManualPricesForDocumentTypes"]);
	
	
	строкаНастроек.discountCalculationMode 	= ?(СпецификаПользователя = "BY", "1", "0");
	строкаНастроек.globalManualDiscountMode = ?(СпецификаПользователя = "KREPEZHSV", "1", "0");
	
	строкаНастроек.measurementPointsModeRepeat 			= ?(м_настройкиАгента["measurementPointsModeRepeat"], "1", "0");
	строкаНастроек.showRestsInCurrentMeasurementPoint 	= ?(м_настройкиАгента["showRestsInCurrentMeasurementPoint"], "1", "0");
	строкаНастроек.showCatalogPricesInBaseUnit 			= ?(м_настройкиАгента["showCatalogPricesInBaseUnit"], "1", "0");
	строкаНастроек.showNegativeRestsWarning 			= ?(м_настройкиАгента["showNegativeRestsWarning"], "1", "0");
	
	строкаНастроек.showGetCashDialog = Формат(м_настройкиАгента["showGetCashDialog"], "ЧРД=.; ЧН=; ЧГ=0");
	
	строкаНастроек.cashInChooseDebtModeAuto = ?(м_настройкиАгента["cashInChooseDebtModeAuto"], "1", "0");
	строкаНастроек.allowEmptyAnalytics 		=  ?(СпецификаПользователя = "FT", "1", "0");
	
	строкаНастроек.deliveryDateShift 		= Формат(м_настройкиАгента["deliveryDateShift"], "ЧРД=.; ЧН=; ЧГ=0");
	строкаНастроек.highlightDebtors 		= Формат(м_настройкиАгента["highlightDebtors"], "ЧРД=.; ЧН=; ЧГ=0");
	строкаНастроек.showArticles 			= ?(м_настройкиАгента["showArticles"], "1", "0");
	строкаНастроек.calcOverwriteMode 		= ?(м_настройкиАгента["calcOverwriteMode"], "1", "0");
	строкаНастроек.recalculateUnitsOnSwitch = ?(м_настройкиАгента["recalculateUnitsOnSwitch"], "1", "0");
	строкаНастроек.saveProductsFilterMode 	= ?(м_настройкиАгента["saveProductsFilterMode"], "1", "0");
	
	#КонецОбласти
	
	#Область Оформление
	
	строкаНастроек.minGoodFontSizeInDocListMode 	= Формат(м_настройкиАгента["minGoodFontSizeInDocListMode"], "ЧРД=.; ЧН=; ЧГ=0");
	строкаНастроек.maxGoodFontSizeInDocListMode 	= Формат(м_настройкиАгента["maxGoodFontSizeInDocListMode"], "ЧРД=.; ЧН=; ЧГ=0");
	строкаНастроек.minGoodFontSizeInCatalogListMode = Формат(м_настройкиАгента["minGoodFontSizeInCatalogListMode"], "ЧРД=.; ЧН=; ЧГ=0");
	строкаНастроек.maxGoodFontSizeInCatalogListMode = Формат(м_настройкиАгента["maxGoodFontSizeInCatalogListMode"], "ЧРД=.; ЧН=; ЧГ=0");
	строкаНастроек.minGoodFontSizeInTableMode 		= Формат(м_настройкиАгента["minGoodFontSizeInTableMode"], "ЧРД=.; ЧН=; ЧГ=0");
	строкаНастроек.maxGoodFontSizeInTableMode 		= Формат(м_настройкиАгента["maxGoodFontSizeInTableMode"], "ЧРД=.; ЧН=; ЧГ=0");
	строкаНастроек.minGoodGroupFontSizeInTree 		= Формат(м_настройкиАгента["minGoodGroupFontSizeInTree"], "ЧРД=.; ЧН=; ЧГ=0");
	строкаНастроек.maxGoodGroupFontSizeInTree 		= Формат(м_настройкиАгента["maxGoodGroupFontSizeInTree"], "ЧРД=.; ЧН=; ЧГ=0");
	строкаНастроек.currencyName 					= м_настройкиАгента["currencyName"];
	
	#КонецОбласти
	
	#Область Розница
	
	строкаНастроек.retailMode 						= ?(м_настройкиАгента["retailMode"], "1", "0");
	строкаНастроек.retailPOSID 						= СокрЛП(м_настройкиАгента["retailPOSID"].Код);
	строкаНастроек.autoPrintOrder 					= ?(м_настройкиАгента["autoPrintOrder"], "1", "0");
	строкаНастроек.autoPrintSale 					= ?(м_настройкиАгента["autoPrintSale"], "1", "0");
	строкаНастроек.autoPrintCashIn 					= ?(м_настройкиАгента["autoPrintCashIn"], "1", "0");
	строкаНастроек.autoPrintDepotOrder 				= ?(м_настройкиАгента["autoPrintDepotOrder"], "1", "0");
	строкаНастроек.autoPrintReturnIn 				= ?(м_настройкиАгента["autoPrintReturnIn"], "1", "0");
	строкаНастроек.autoPrintQuestionnaire 			= ?(м_настройкиАгента["autoPrintQuestionnaire"], "1", "0");
	строкаНастроек.startFinishQuestionnairePeriod 	= Формат(м_настройкиАгента["startFinishQuestionnairePeriod"], "ЧРД=.; ЧН=; ЧГ=0");
	
	строкаНастроек.messageOfTheDay = ПодготовитьСтрокуДляXML(м_настройкиАгента["messageOfTheDay"]);
	
	строкаНастроек.allowGPSTracking 				= ?(м_настройкиАгента["allowGPSTracking"], "1", "0");
	строкаНастроек.allowBackgroundGPSTracking 		= ?(м_настройкиАгента["allowBackgroundGPSTracking"], "1", "0");
	строкаНастроек.backgroundGPSAccuracy 			= Формат(м_настройкиАгента["backgroundGPSAccuracy"], "ЧРД=.; ЧН=; ЧГ=0");
	строкаНастроек.backgroundGPSDistanceFilter		= Формат(м_настройкиАгента["backgroundGPSDistanceFilter"], "ЧРД=.; ЧН=; ЧГ=0");
	строкаНастроек.dynamicRouteDistanceAndTime 		= "1";
	строкаНастроек.dynamicRouteDistanceMaxAccuracy 	= строкаНастроек.backgroundGPSAccuracy;
	строкаНастроек.workTimeStart 					= СокрЛП(м_настройкиАгента["workTimeStart"]);
	строкаНастроек.workTimeEnd 						= СокрЛП(м_настройкиАгента["workTimeEnd"]);
	строкаНастроек.logSyncInterval 					= Формат(м_настройкиАгента["logSyncInterval"], "ЧРД=.; ЧН=; ЧГ=0");
	строкаНастроек.allowBaseRestore 				= ?(м_настройкиАгента["allowBaseRestore"], "1", "0");
	
	#КонецОбласти
	
	#Область ИсторияПродаж
	
	строкаНастроек.showSalesHistory 				= ?(м_настройкиАгента["showSalesHistory"], "1", "0");
	строкаНастроек.salesHistoryQty 					= Формат(м_настройкиАгента["salesHistoryQty"], "ЧРД=.; ЧН=; ЧГ=0");
	строкаНастроек.salesHistoryLength 				= Формат(м_настройкиАгента["salesHistoryLength"], "ЧРД=.; ЧН=; ЧГ=0");
	строкаНастроек.showRecommendedQty		 		= ?(м_настройкиАгента["showRecommendedQty"], "1", "0");
	строкаНастроек.recommendedQtyIncrementPercent	= Формат(м_настройкиАгента["recommendedQtyIncrementPercent"], "ЧРД=.; ЧН=; ЧГ=0");
	строкаНастроек.seasonalAdjustment 				= Формат(м_настройкиАгента["seasonalAdjustment"], "ЧРД=.; ЧН=; ЧГ=0");
	строкаНастроек.planningSalesHistoryPeriod 		= Формат(м_настройкиАгента["planningSalesHistoryPeriod"], "ЧРД=.; ЧН=; ЧГ=0");
	строкаНастроек.recommendedCoeff 				= Формат(м_настройкиАгента["recommendedCoeff"], "ЧРД=.; ЧН=; ЧГ=0");
	
	#КонецОбласти
	
	#Область Безопасность
	
	строкаНастроек.prohibitEditingAfterPrint 	= ?(м_настройкиАгента["prohibitEditingAfterPrint"], "1", "0");
	строкаНастроек.logSyncMode 					= ?(м_настройкиАгента["logSyncMode"], "1", "0");
	строкаНастроек.logAutodeletePeriod 			= Формат(м_настройкиАгента["logAutodeletePeriod"], "ЧРД=.; ЧН=; ЧГ=0");
	строкаНастроек.maxLogSize 					= Формат(м_настройкиАгента["maxLogSize"], "ЧРД=.; ЧН=; ЧГ=0");
	строкаНастроек.basePassword 				= СокрЛП(ПолучитьСтрокуИзХэша(СокрЛП(м_настройкиАгента["basePassword"])));;
	
	#КонецОбласти
	
	#Область Служебные
	
	строкаНастроек.lastOrderNumber 			= последнийНомерЗаявки;
	строкаНастроек.lastSaleNumber 			= последнийНомерРеализации;
	строкаНастроек.lastCashInNumber 		= последнийНомерПКО;
	строкаНастроек.lastDepotOrderNumber 	= последнийНомерЗаказаНаСклад;
	строкаНастроек.lastReturnInNumber 		= последнийНомерВозвратаОтПокупателя;
	строкаНастроек.lastMerchandisingNumber 	= последнийНомерМерчандайзинга;
	строкаНастроек.lastCashOutNumber 		= последнийНомерРКО;
	строкаНастроек.lastReceiptNumber 		= последнийНомерПоступления;
	строкаНастроек.lastReturnOutNumber 		= последнийНомерВозвратаПоставщику;
	
	строкаНастроек.posPicturesChangeIndex 		= м_настройкиАгента["posPicturesChangeIndex"];
	строкаНастроек.goodPicturesChangeIndex 		= м_настройкиАгента["goodPicturesChangeIndex"];
	строкаНастроек.companyPicturesChangeIndex 	= м_настройкиАгента["companyPicturesChangeIndex"];
	строкаНастроек.agentPicturesChangeIndex  	= м_настройкиАгента["agentPicturesChangeIndex "];
	строкаНастроек.posChangeIndex  				= м_настройкиАгента["posChangeIndex"];

	строкаНастроек.processedLogID = Формат(м_настройкиАгента["processedLogID"], "ЧРД=.; ЧН=; ЧГ=0");
	
	#КонецОбласти
	
	//ТЗНастройкиДокументов = ПолучитьТЗНастройкиДокументов();
	//Для Каждого тмпСтрока Из ТЗНастройкиДокументов Цикл
	//	ТЗ.Колонки.Добавить(тмпСтрока.ИдентификаторНастройки);
	//	НоваяСтрока[тмпСтрока.ИдентификаторНастройки] = Формат(тмпСтрока.СрокХранения, "ЧРД=.; ЧН=; ЧГ=0");
	//КонецЦикла;
	
	имяФайла = "id";
	СформироватьPlist(таблицаНастроек, папкаТаблицВыгрузки, имяФайла);
	
КонецПроцедуры	// СформироватьТаблицуНастройки()


// Процедура - Сформировать таблицу прав
//
// Параметры:
//  папкаТаблицВыгрузки	 - 	 - 
//
Процедура	СформироватьТаблицуПрав(папкаТаблицВыгрузки)
	
	таблицаПрав = Новый ТаблицаЗначений;
	
	таблицаПрав.Колонки.Добавить("rightName");
	таблицаПрав.Колонки.Добавить("value");
	
	настройкиДокумента = м_настройкиДокументов[Перечисления.БПАГВидыДокументов.Заявка];
	Если настройкиДокумента <> Неопределено Тогда
		
		строкаПрав = таблицаПрав.Добавить();
		строкаПрав.rightName = "orderVisible";
		строкаПрав.value = ?(настройкиДокумента.НеПоказыватьНаУстройстве, "0", "1");
		
		строкаПрав = таблицаПрав.Добавить();
		строкаПрав.rightName = "allowOrderDateChange";
		строкаПрав.value = ?(настройкиДокумента.РазрешатьИзменятьДату, "1", "0");
		
		строкаПрав = таблицаПрав.Добавить();
		строкаПрав.rightName = "allowOrderManualDiscounts";
		строкаПрав.value = ?(настройкиДокумента.РучныеСкидкиРазрешены, "1", "0");
		
	КонецЕсли;
	
	настройкиДокумента = м_настройкиДокументов[Перечисления.БПАГВидыДокументов.Реализация];
	Если настройкиДокумента <> Неопределено Тогда
		
		строкаПрав = таблицаПрав.Добавить();
		строкаПрав.rightName = "saleVisible";
		строкаПрав.value = ?(настройкиДокумента.НеПоказыватьНаУстройстве, "0", "1");
		
		строкаПрав = таблицаПрав.Добавить();
		строкаПрав.rightName = "allowSaleDateChange";
		строкаПрав.value = ?(настройкиДокумента.РазрешатьИзменятьДату, "1", "0");
		
		строкаПрав = таблицаПрав.Добавить();
		строкаПрав.rightName = "allowSaleManualDiscounts";
		строкаПрав.value = ?(настройкиДокумента.РучныеСкидкиРазрешены, "1", "0");
		
	КонецЕсли;
	
	настройкиДокумента = м_настройкиДокументов[Перечисления.БПАГВидыДокументов.ПКО];
	Если настройкиДокумента <> Неопределено Тогда
		
		строкаПрав = таблицаПрав.Добавить();
		строкаПрав.rightName = "cashInVisible";
		строкаПрав.value = ?(настройкиДокумента.НеПоказыватьНаУстройстве, "0", "1");
		
		строкаПрав = таблицаПрав.Добавить();
		строкаПрав.rightName = "allowCashInDateChange";
		строкаПрав.value = ?(настройкиДокумента.РазрешатьИзменятьДату, "1", "0");
		
	КонецЕсли;
	
	настройкиДокумента = м_настройкиДокументов[Перечисления.БПАГВидыДокументов.ВозвратОтПокупателя];
	Если настройкиДокумента <> Неопределено Тогда
		
		строкаПрав = таблицаПрав.Добавить();
		строкаПрав.rightName = "returnInVisible";
		строкаПрав.value = ?(настройкиДокумента.НеПоказыватьНаУстройстве, "0", "1");
		
		строкаПрав = таблицаПрав.Добавить();
		строкаПрав.rightName = "allowReturnInDateChange";
		строкаПрав.value = ?(настройкиДокумента.РазрешатьИзменятьДату, "1", "0");
		
		строкаПрав = таблицаПрав.Добавить();
		строкаПрав.rightName = "allowReturnInManualDiscounts";
		строкаПрав.value = ?(настройкиДокумента.РучныеСкидкиРазрешены, "1", "0");
		
	КонецЕсли;
	
	настройкиДокумента = м_настройкиДокументов[Перечисления.БПАГВидыДокументов.Анкета];
	Если настройкиДокумента <> Неопределено Тогда
		
		строкаПрав = таблицаПрав.Добавить();
		строкаПрав.rightName = "questionnaireVisible";
		строкаПрав.value = ?(настройкиДокумента.НеПоказыватьНаУстройстве, "0", "1");
		
		строкаПрав = таблицаПрав.Добавить();
		строкаПрав.rightName = "allowQuestionnaireDateChange";
		строкаПрав.value = ?(настройкиДокумента.РазрешатьИзменятьДату, "1", "0");
		
	КонецЕсли;
	
	настройкиДокумента = м_настройкиДокументов[Перечисления.БПАГВидыДокументов.Мерчандайзинг];
	Если настройкиДокумента <> Неопределено Тогда
		
		строкаПрав = таблицаПрав.Добавить();
		строкаПрав.rightName = "merchandisingVisible";
		строкаПрав.value = ?(настройкиДокумента.НеПоказыватьНаУстройстве, "0", "1");
		
		строкаПрав = таблицаПрав.Добавить();
		строкаПрав.rightName = "allowMerchandisingDateChange";
		строкаПрав.value = ?(настройкиДокумента.РазрешатьИзменятьДату, "1", "0");
		
	КонецЕсли;
	
	имяФайла = "rights";
	СформироватьPlist(таблицаПрав, папкаТаблицВыгрузки, имяФайла);
	
КонецПроцедуры	// СформироватьТаблицуПрав()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура СформироватьТаблицуСтатусыДокументов(папкаТаблицВыгрузки)
	
	периодОбмена = м_настройкиАгента["exchangePeriod"];
	Если периодОбмена = Неопределено Или периодОбмена = 0 Тогда
		периодОбмена = 30;
	КонецЕсли; 
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	запрос.Текст =
	"ВЫБРАТЬ
	|	БПАГДокументыАгентовСрезПоследних.ИД КАК documentID,
	|	ВЫБОР
	|		КОГДА БПАГДокументыАгентовСрезПоследних.Документ.Проведен
	|			ТОГДА ""12""
	|		КОГДА БПАГДокументыАгентовСрезПоследних.Документ.ПометкаУдаления
	|			ТОГДА ""14""
	|		ИНАЧЕ ""13""
	|	КОНЕЦ КАК status,
	|	БПАГДокументыАгентовСрезПоследних.Документ.Номер КАК number
	|ИЗ
	|	РегистрСведений.БПАГДокументыАгентов.СрезПоследних(
	|			,
	|			ДатаИзмененияНаУстройстве МЕЖДУ &НачалоПериода И &КонецПериода
	|				И Агент = &Агент) КАК БПАГДокументыАгентовСрезПоследних";
	#КонецОбласти
	
	секундВСутках = 86400;
	количествоДней = 30;
	
	запрос.УстановитьПараметр("Агент", м_реквизитыАгента.Агент);
	запрос.УстановитьПараметр("НачалоПериода", м_текущаяДата - периодОбмена * секундВСутках);
	запрос.УстановитьПараметр("КонецПериода", м_текущаяДата + количествоДней * секундВСутках);
	
	статусыДокументов = запрос.Выполнить().Выгрузить();
	
	вариантЗагрузкиЗаявок = м_настройкиАгента["1СВариантЗагрузкиЗаявок"];
	Если вариантЗагрузкиЗаявок = Перечисления.БПАГВариантыЗагрузкиЗаявок.Реализация Тогда
	
		добавляемыеСтроки = статусыДокументов.СкопироватьКолонки();
		
		настройкиДокумента = м_настройкиДокументов[Перечисления.БПАГВидыДокументов.Реализация];
		выполнятьОбратнуюВыгрузкуРеализаций = настройкиДокумента.ОбратнаяВыгрузкаИз1С И настройкиДокумента.ПериодОбратнойВыгрузки > 0;
		
		Для каждого строкаСтатусыДокументов Из статусыДокументов Цикл
		
			Если Лев(строкаСтатусыДокументов.documentID, 3) = "SAL" Тогда
			
				Если выполнятьОбратнуюВыгрузкуРеализаций Тогда
				
					строкаДобавляемыеСтроки = добавляемыеСтроки.Добавить();
					ЗаполнитьЗначенияСвойств(строкаДобавляемыеСтроки, строкаСтатусыДокументов);
				
				КонецЕсли; 
				
				строкаСтатусыДокументов.documentID = Сред(строкаСтатусыДокументов.documentID, 4);
			
			КонецЕсли; 
		
		КонецЦикла; 
		
		Для каждого строкаДобавляемыеСтроки Из добавляемыеСтроки Цикл
		
			строкаСтатусыДокументов = статусыДокументов.Добавить();
			ЗаполнитьЗначенияСвойств(строкаСтатусыДокументов, строкаДобавляемыеСтроки);
		
		КонецЦикла; 
	
	КонецЕсли; 
	
	статусыДокументов.Сортировать("documentID");
	
	имяФайла = "status";
	СформироватьPlist(статусыДокументов, папкаТаблицВыгрузки, имяФайла);

КонецПроцедуры // СформироватьТаблицуСтатусыДокументов()


// Процедура - Сформировать таблицу "Вопросы анкет"
//
// Параметры:
//  папкаТаблицВыгрузки	 - 	 - 
//
Процедура СформироватьТаблицуВопросыАнкет(папкаТаблицВыгрузки)
	
	типАнкетПоУмолчанию = м_настройкиАгента["1СОсновнойТипАнкеты"];
	Если типАнкетПоУмолчанию = Неопределено Тогда
		типАнкетПоУмолчанию = Перечисления.БПАГТипыАнкет.ЗаданиеТорговомуПредставителю;
	КонецЕсли;
	
	#Область questionnaireTypes
	
	запрос = Новый Запрос;
	запрос.Текст = 
	"ВЫБРАТЬ
	|	БПАГВидыАнкет.Код КАК uniqueID,
	|	БПАГВидыАнкет.Наименование КАК name,
	|	БПАГВидыАнкет.Комментарий КАК comment
	|ИЗ
	|	Справочник.БПАГВидыАнкет КАК БПАГВидыАнкет
	|ГДЕ
	|	НЕ БПАГВидыАнкет.ПометкаУдаления
	|	И БПАГВидыАнкет.ТипАнкеты = &ТипАнкеты";
	
	#КонецОбласти
	
	запрос.УстановитьПараметр("ТипАнкеты", типАнкетПоУмолчанию);
	
	имяФайла = "questionnaireTypes";
	СформироватьPlist(запрос.Выполнить().Выгрузить(), папкаТаблицВыгрузки, имяФайла);

	
	#Область questionGroups
	
	запрос = Новый Запрос;
	запрос.Текст = 
	"ВЫБРАТЬ
	|	БПАГВопросыАнкет.Код КАК uniqueID,
	|	БПАГВопросыАнкет.Идентификатор КАК identifier,
	|	БПАГВопросыАнкет.Наименование КАК name,
	|	БПАГВопросыАнкет.Описание КАК description,
	|	БПАГВопросыАнкет.Порядок КАК sort
	|ИЗ
	|	Справочник.БПАГВопросыАнкет КАК БПАГВопросыАнкет
	|ГДЕ
	|	НЕ БПАГВопросыАнкет.ПометкаУдаления
	|	И БПАГВопросыАнкет.ЭтоГруппа
	|	И БПАГВопросыАнкет.Владелец <> ЗНАЧЕНИЕ(Справочник.БПАГВидыАнкет.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	БПАГВопросыАнкет.Владелец,
	|	БПАГВопросыАнкет.Наименование";
	
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	#КонецОбласти
	
	имяФайла = "questionGroups";
	СформироватьPlist(запрос.Выполнить().Выгрузить(), папкаТаблицВыгрузки, имяФайла);
	
	#Область questions
	
	запрос = Новый Запрос;
	запрос.Текст = 
	"ВЫБРАТЬ
	|	БПАГВопросыАнкет.Код КАК uniqueID,
	|	БПАГВопросыАнкет.Идентификатор КАК identifier,
	|	БПАГВопросыАнкет.Наименование КАК name,
	|	БПАГВопросыАнкет.Тип КАК Тип,
	|	БПАГВопросыАнкет.Подсказка КАК placeholder,
	|	БПАГВопросыАнкет.ВыравниваниеВопроса КАК ВыравниваниеВопроса,
	|	БПАГВопросыАнкет.ЦветВопроса КАК nameColor,
	|	БПАГВопросыАнкет.РазмерШрифтаВопроса КАК nameSize,
	|	БПАГВопросыАнкет.ПроцентШириныВопроса КАК nameWidthPercent,
	|	БПАГВопросыАнкет.ВыравниваниеОтвета КАК valueAlign,
	|	БПАГВопросыАнкет.ЦветОтвета КАК valueColor,
	|	БПАГВопросыАнкет.РазмерШрифтаОтвета КАК valueSize,
	|	БПАГВопросыАнкет.ЗначениеПоУмолчанию КАК defaultValue,
	|	ВЫБОР
	|		КОГДА БПАГВопросыАнкет.Обязательный
	|			ТОГДА ""1""
	|		ИНАЧЕ ""0""
	|	КОНЕЦ КАК required,
	|	БПАГВопросыАнкет.Владелец.Код КАК questionnaireTypeID,
	|	БПАГВопросыАнкет.Родитель.Код КАК questionGroupID,
	|	БПАГВопросыАнкет.Порядок КАК sort,
	|	БПАГВопросыАнкет.Ссылка
	|ИЗ
	|	Справочник.БПАГВопросыАнкет КАК БПАГВопросыАнкет
	|ГДЕ
	|	НЕ БПАГВопросыАнкет.ПометкаУдаления
	|	И НЕ БПАГВопросыАнкет.ЭтоГруппа
	|	И БПАГВопросыАнкет.Владелец <> ЗНАЧЕНИЕ(Справочник.БПАГВидыАнкет.ПустаяСсылка)
	|	И БПАГВопросыАнкет.Владелец.ТипАнкеты = &ТипАнкеты
	|
	|УПОРЯДОЧИТЬ ПО
	|	БПАГВопросыАнкет.Владелец,
	|	БПАГВопросыАнкет.Наименование";
	
	запрос.УстановитьПараметр("ТипАнкеты", типАнкетПоУмолчанию);
	
	вопросыАнкет = запрос.Выполнить().Выгрузить();
	
	вопросыАнкет.Колонки.Добавить("nameAlign");
	вопросыАнкет.Колонки.Добавить("type");
	вопросыАнкет.Колонки.Добавить("values");
	
	Для Каждого тмпСтрока Из вопросыАнкет Цикл
		
		Если (тмпСтрока.Ссылка.ВариантыОтвета.Количество() > 0) ИЛИ (СокрЛП(тмпСтрока.Тип) = "Да/нет") Тогда
			тмпСтрока.type = "list";
		ИначеЕсли СокрЛП(тмпСтрока.Тип) = "Булево" Тогда
			тмпСтрока.type = "boolean";
		ИначеЕсли СокрЛП(тмпСтрока.Тип) = "Дата" Тогда
			тмпСтрока.type = "date";
		ИначеЕсли СокрЛП(тмпСтрока.Тип) = "Число" Тогда
			тмпСтрока.type = "number";
		ИначеЕсли СокрЛП(тмпСтрока.Тип) = "Фото" Тогда
			тмпСтрока.type = "photo";
		Иначе
			тмпСтрока.type = "string";
		КонецЕсли;
		
		Если тмпСтрока.ВыравниваниеВопроса = Перечисления.БПАГВидыВыравниванияПоГоризонтали.Центр Тогда
			тмпСтрока.nameAlign = "1";
		ИначеЕсли тмпСтрока.ВыравниваниеВопроса = Перечисления.БПАГВидыВыравниванияПоГоризонтали.Право Тогда
			тмпСтрока.nameAlign = "2";
		Иначе
			тмпСтрока.nameAlign = "0";
		КонецЕсли;
		
		Если СокрЛП(тмпСтрока.Тип) = "Да/нет" Тогда
			
			выриантыОтветов = Новый ТаблицаЗначений;
			выриантыОтветов.Колонки.Добавить("sort");
			выриантыОтветов.Колонки.Добавить("value");
			
			новаяСтрока = выриантыОтветов.Добавить();
			новаяСтрока.sort = 1;
			новаяСтрока.value = "Да";
			
			новаяСтрока = выриантыОтветов.Добавить();
			новаяСтрока.sort = 2;
			новаяСтрока.value = "Нет";
			
		Иначе
			
			запросПоВариантам = Новый Запрос;
			запросПоВариантам.Текст =
			"ВЫБРАТЬ
			|	БПАГВопросыАнкетВариантыОтвета.НомерСтроки КАК sort,
			|	БПАГВопросыАнкетВариантыОтвета.Вариант КАК value
			|ИЗ
			|	Справочник.БПАГВопросыАнкет.ВариантыОтвета КАК БПАГВопросыАнкетВариантыОтвета
			|ГДЕ
			|	БПАГВопросыАнкетВариантыОтвета.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки,
			|	Вариант";
			
			запросПоВариантам.УстановитьПараметр("Ссылка", тмпСтрока.Ссылка);
			
			выриантыОтветов = запросПоВариантам.Выполнить().Выгрузить();
			
		КонецЕсли;		
		
		тмпСтрока.values = выриантыОтветов;
		
	КонецЦикла;	
	
	вопросыАнкет.Колонки.Удалить("Тип");
	вопросыАнкет.Колонки.Удалить("Ссылка");
	вопросыАнкет.Колонки.Удалить("ВыравниваниеВопроса");
	
	#КонецОбласти
	
	
	имяФайла = "questions";
	СформироватьPlist(вопросыАнкет, папкаТаблицВыгрузки, имяФайла);
	
КонецПроцедуры // СформироватьТаблицуВопросыАнкет()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура СформироватьТаблицуТипыЦенТоваров(папкаТаблицВыгрузки)
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	запрос.Текст =
	"ВЫБРАТЬ
	|	БПАГПрайсы.Код КАК uniqueID,
	|	БПАГПрайсы.Наименование КАК name
	|ИЗ
	|	Справочник.БПАГПрайсы КАК БПАГПрайсы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БПАГПрайсы.ОграничениеДоступности КАК БПАГПрайсыОграничениеДоступности
	|		ПО БПАГПрайсы.Ссылка = БПАГПрайсыОграничениеДоступности.Ссылка
	|ГДЕ
	|	НЕ БПАГПрайсы.ПометкаУдаления
	|	И БПАГПрайсы.ТипЦен <> ЗНАЧЕНИЕ(Справочник.ТипыЦен.ПустаяСсылка)
	|	И (БПАГПрайсыОграничениеДоступности.Ссылка ЕСТЬ NULL 
	|			ИЛИ БПАГПрайсыОграничениеДоступности.АгентПрофиль = &Агент
	|			ИЛИ БПАГПрайсыОграничениеДоступности.АгентПрофиль = &Профиль)
	|
	|УПОРЯДОЧИТЬ ПО
	|	uniqueID";
	#КонецОбласти
	
	запрос.УстановитьПараметр("Агент", м_реквизитыАгента.Агент);
	запрос.УстановитьПараметр("Профиль", м_реквизитыАгента.Профиль);
	
	имяФайла = "priceTypes";
	СформироватьPlist(запрос.Выполнить().Выгрузить(), папкаТаблицВыгрузки, имяФайла);

КонецПроцедуры // СформироватьТаблицуТипыЦенТоваров()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура СформироватьТаблицуКлиенты(папкаТаблицВыгрузки)
	
	братьТипЦенИзДоговора = м_настройкиАгента["1СБратьТипЦенИзДоговора"];
	Если братьТипЦенИзДоговора = Неопределено Тогда
		братьТипЦенИзДоговора = Ложь;
	КонецЕсли;
	
	основнойТипЦен = м_настройкиАгента["defaultPriceTypeID"];
	Если основнойТипЦен = Неопределено Тогда
		основнойТипЦен = Справочники.ТипыЦен.НайтиПоКоду("000000010");
	Иначе
		основнойТипЦен = основнойТипЦен.ТипЦен;
	КонецЕсли;
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	запрос.Текст =
	"ВЫБРАТЬ
	|	КонтрагентыМенеджеры.Ссылка.Код КАК uniqueID,
	|	КонтрагентыМенеджеры.Ссылка.Наименование КАК name,
	|	ВЫБОР
	|		КОГДА &БратьТипЦенИзДоговора
	|			ТОГДА КонтрагентыМенеджеры.ТипЦен.Код
	|		ИНАЧЕ &ОсновнойТипЦен
	|	КОНЕЦ КАК defaultPriceTypeID
	|ИЗ
	|	Справочник.Контрагенты.Менеджеры КАК КонтрагентыМенеджеры
	|ГДЕ
	|	НЕ КонтрагентыМенеджеры.Ссылка.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА &Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ КонтрагентыМенеджеры.Ссылка.Родитель.Подразделение = &Подразделение
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ЭтоСупервайзер
	|				ТОГДА КонтрагентыМенеджеры.Менеджер В ИЕРАРХИИ (&Менеджер)
	|			ИНАЧЕ ВЫБОР
	|					КОГДА &Менеджер = ЗНАЧЕНИЕ(Справочник.Менеджеры.ПустаяСсылка)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ КонтрагентыМенеджеры.Менеджер = &Менеджер
	|				КОНЕЦ
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПартнерыСегмента.Партнер.Код,
	|	ПартнерыСегмента.Партнер.Наименование,
	|	ВЫБОР
	|		КОГДА КонтрагентыМенеджеры.ТипЦен ЕСТЬ NULL 
	|			ТОГДА &ОсновнойТипЦен
	|		ИНАЧЕ КонтрагентыМенеджеры.ТипЦен.Код
	|	КОНЕЦ
	|ИЗ
	|	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.Менеджеры КАК КонтрагентыМенеджеры
	|		ПО ПартнерыСегмента.Партнер = КонтрагентыМенеджеры.Ссылка
	|			И (КонтрагентыМенеджеры.НомерСтроки = 1)
	|ГДЕ
	|	ПартнерыСегмента.Сегмент = &СегментПартнеров
	|
	|УПОРЯДОЧИТЬ ПО
	|	uniqueID";
	#КонецОбласти
	
	запрос.УстановитьПараметр("Подразделение", 			м_реквизитыАгента.Подразделение);
	запрос.УстановитьПараметр("Менеджер", 				м_реквизитыАгента.Менеджер);
	запрос.УстановитьПараметр("СегментПартнеров", 		м_реквизитыАгента.СегментПартнеров);
	запрос.УстановитьПараметр("ЭтоСупервайзер", 		м_реквизитыАгента.МенеджерЭтоГруппа);
	запрос.УстановитьПараметр("БратьТипЦенИзДоговора", 	братьТипЦенИзДоговора);
	запрос.УстановитьПараметр("ОсновнойТипЦен", 		основнойТипЦен);
	
	имяФайла = "clients";
	СформироватьPlist(запрос.Выполнить().Выгрузить(), папкаТаблицВыгрузки, имяФайла);

КонецПроцедуры // СформироватьТаблицуКлиенты()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура СформироватьТаблицуТорговыеТочки(папкаТаблицВыгрузки)
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	запрос.Текст =
	"ВЫБРАТЬ
	|	КонтрагентыМенеджеры.Ссылка.Код КАК uniqueID,
	|	КонтрагентыМенеджеры.Ссылка.Код КАК clientID,
	|	""1"" + КонтрагентыМенеджеры.Ссылка.Код КАК defaultAnalyticsID,
	|	""*"" КАК name,
	|	КонтрагентыМенеджеры.Ссылка.АдресДоставки КАК fullAddress,
	|	КонтрагентыМенеджеры.Ссылка.АдресДоставки КАК address,
	|	КонтрагентыМенеджеры.Ссылка.КонтактноеЛицо.Наименование КАК contactPerson,
	|	КонтрагентыМенеджеры.Ссылка.Телефоны КАК phone,
	|	КонтрагентыМенеджеры.Ссылка.ГПСШирота КАК latitude,
	|	КонтрагентыМенеджеры.Ссылка.ГПСДолгота КАК longitude,
	|	-1 КАК maxDebtSum,
	|	ВЫБОР
	|		КОГДА КонтрагентыМенеджеры.Ссылка.СрокОплаты + 8 > 0
	|			ТОГДА КонтрагентыМенеджеры.Ссылка.СрокОплаты + 8
	|		ИНАЧЕ -1
	|	КОНЕЦ КАК maxDebtPeriod,
	|	КонтрагентыМенеджеры.Ссылка.ПолнНаим КАК fullName,
	|	КонтрагентыМенеджеры.Ссылка.ЮрАдрес КАК legalAddress,
	|	КонтрагентыМенеджеры.Ссылка.ИНН КАК INN,
	|	""2"" КАК debtControlModeOrder,
	|	""2"" КАК debtControlModeSale,
	|	""Огрузка запрещена"" КАК unconditionalProhibitionMessage,
	|	КонтрагентыМенеджеры.Ссылка.БПАГМаксимальныйПорогПоСумме КАК maxSaleSum,
	|	КонтрагентыМенеджеры.Ссылка.БПАГМинимальныйПорогПоСумме КАК minSaleSum,
	|	КонтрагентыМенеджеры.Ссылка.БПАГМаксимальныйПорогПоВесу КАК maxSaleWeight,
	|	КонтрагентыМенеджеры.Ссылка.БПАГМинимальныйПорогПоВесу КАК minSaleWeight
	|ИЗ
	|	Справочник.Контрагенты.Менеджеры КАК КонтрагентыМенеджеры
	|ГДЕ
	|	НЕ КонтрагентыМенеджеры.Ссылка.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА &Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ КонтрагентыМенеджеры.Ссылка.Родитель.Подразделение = &Подразделение
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ЭтоСупервайзер
	|				ТОГДА КонтрагентыМенеджеры.Менеджер В ИЕРАРХИИ (&Менеджер)
	|			ИНАЧЕ ВЫБОР
	|					КОГДА &Менеджер = ЗНАЧЕНИЕ(Справочник.Менеджеры.ПустаяСсылка)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ КонтрагентыМенеджеры.Менеджер = &Менеджер
	|				КОНЕЦ
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КонтрагентыМенеджеры.Ссылка.Код,
	|	КонтрагентыМенеджеры.Ссылка.Код,
	|	""1"" + КонтрагентыМенеджеры.Ссылка.Код,
	|	""*"",
	|	КонтрагентыМенеджеры.Ссылка.АдресДоставки,
	|	КонтрагентыМенеджеры.Ссылка.АдресДоставки,
	|	КонтрагентыМенеджеры.Ссылка.КонтактноеЛицо.Наименование,
	|	КонтрагентыМенеджеры.Ссылка.Телефоны,
	|	КонтрагентыМенеджеры.Ссылка.ГПСШирота,
	|	КонтрагентыМенеджеры.Ссылка.ГПСДолгота,
	|	-1,
	|	ВЫБОР
	|		КОГДА КонтрагентыМенеджеры.Ссылка.СрокОплаты + 8 > 0
	|			ТОГДА КонтрагентыМенеджеры.Ссылка.СрокОплаты + 8
	|		ИНАЧЕ -1
	|	КОНЕЦ,
	|	КонтрагентыМенеджеры.Ссылка.ПолнНаим,
	|	КонтрагентыМенеджеры.Ссылка.ЮрАдрес,
	|	КонтрагентыМенеджеры.Ссылка.ИНН,
	|	""2"",
	|	""2"",
	|	""Огрузка запрещена"",
	|	КонтрагентыМенеджеры.Ссылка.БПАГМаксимальныйПорогПоСумме,
	|	КонтрагентыМенеджеры.Ссылка.БПАГМинимальныйПорогПоСумме,
	|	КонтрагентыМенеджеры.Ссылка.БПАГМаксимальныйПорогПоВесу,
	|	КонтрагентыМенеджеры.Ссылка.БПАГМинимальныйПорогПоВесу
	|ИЗ
	|	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.Менеджеры КАК КонтрагентыМенеджеры
	|		ПО ПартнерыСегмента.Партнер = КонтрагентыМенеджеры.Ссылка
	|			И (КонтрагентыМенеджеры.НомерСтроки = 1)
	|ГДЕ
	|	ПартнерыСегмента.Сегмент = &СегментПартнеров
	|
	|УПОРЯДОЧИТЬ ПО
	|	uniqueID";
	#КонецОбласти
	
	запрос.УстановитьПараметр("Подразделение", 		м_реквизитыАгента.Подразделение);	
	запрос.УстановитьПараметр("Менеджер", 			м_реквизитыАгента.Менеджер);
	запрос.УстановитьПараметр("СегментПартнеров", 	м_реквизитыАгента.СегментПартнеров);
	запрос.УстановитьПараметр("ЭтоСупервайзер", 	м_реквизитыАгента.МенеджерЭтоГруппа);
	
	имяФайла = "POS";
	СформироватьPlist(запрос.Выполнить().Выгрузить(), папкаТаблицВыгрузки, имяФайла);

КонецПроцедуры // СформироватьТаблицуТорговыеТочки()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура СформироватьТаблицуДоговорыКлиентов(папкаТаблицВыгрузки)
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	запрос.Текст =
	"ВЫБРАТЬ
	|	КонтрагентыМенеджеры.Ссылка.Код КАК КонтрагентКод,
	|	КонтрагентыМенеджеры.ОсновнаяОрганизация.Код,
	|	КонтрагентыМенеджеры.Менеджер.Наименование,
	|	КонтрагентыМенеджеры.ТипЦен.Код КАК ПрайсКод,
	|	КонтрагентыМенеджеры.Ссылка.ОсновнаяОрганизация КАК ОсновнаяОрганизацияФин
	|ПОМЕСТИТЬ ДоговорыКлиентов
	|ИЗ
	|	Справочник.Контрагенты.Менеджеры КАК КонтрагентыМенеджеры
	|ГДЕ
	|	НЕ КонтрагентыМенеджеры.Ссылка.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА &Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ КонтрагентыМенеджеры.Ссылка.Родитель.Подразделение = &Подразделение
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ЭтоСупервайзер
	|				ТОГДА КонтрагентыМенеджеры.Менеджер В ИЕРАРХИИ (&Менеджер)
	|			ИНАЧЕ ВЫБОР
	|					КОГДА &Менеджер = ЗНАЧЕНИЕ(Справочник.Менеджеры.ПустаяСсылка)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ КонтрагентыМенеджеры.Менеджер = &Менеджер
	|				КОНЕЦ
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КонтрагентыМенеджеры.Ссылка.Код,
	|	КонтрагентыМенеджеры.ОсновнаяОрганизация.Код,
	|	КонтрагентыМенеджеры.Менеджер.Наименование,
	|	КонтрагентыМенеджеры.ТипЦен.Код,
	|	КонтрагентыМенеджеры.Ссылка.ОсновнаяОрганизация
	|ИЗ
	|	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.Менеджеры КАК КонтрагентыМенеджеры
	|		ПО ПартнерыСегмента.Партнер = КонтрагентыМенеджеры.Ссылка
	|			И (КонтрагентыМенеджеры.НомерСтроки = 1)
	|ГДЕ
	|	ПартнерыСегмента.Сегмент = &СегментПартнеров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""1"" + ДоговорыКлиентов.КонтрагентКод КАК uniqueID,
	|	ДоговорыКлиентов.КонтрагентКод КАК clientID,
	|	ДоговорыКлиентов.ОсновнаяОрганизацияКод КАК companyID,
	|	""1_"" + ДоговорыКлиентов.МенеджерНаименование КАК name,
	|	0 КАК discountPercent,
	|	ДоговорыКлиентов.ПрайсКод КАК defaultPriceTypeID
	|ИЗ
	|	ДоговорыКлиентов КАК ДоговорыКлиентов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""2"" + ДоговорыКлиентов.КонтрагентКод,
	|	ДоговорыКлиентов.КонтрагентКод,
	|	ДоговорыКлиентов.ОсновнаяОрганизацияФин.Код,
	|	""2_"" + ДоговорыКлиентов.МенеджерНаименование,
	|	0,
	|	ДоговорыКлиентов.ПрайсКод
	|ИЗ
	|	ДоговорыКлиентов КАК ДоговорыКлиентов
	|ГДЕ
	|	ДоговорыКлиентов.ОсновнаяОрганизацияФин.ФинУчет = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	uniqueID";
	#КонецОбласти
	
	запрос.УстановитьПараметр("Подразделение", 		м_реквизитыАгента.Подразделение);
	запрос.УстановитьПараметр("Менеджер", 			м_реквизитыАгента.Менеджер);
	запрос.УстановитьПараметр("СегментПартнеров", 	м_реквизитыАгента.СегментПартнеров);
	запрос.УстановитьПараметр("ЭтоСупервайзер", 	м_реквизитыАгента.МенеджерЭтоГруппа);
	
	имяФайла = "clientAnalytics";
	СформироватьPlist(запрос.Выполнить().Выгрузить(), папкаТаблицВыгрузки, имяФайла);

КонецПроцедуры // СформироватьТаблицуДоговорыКлиентов()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура СформироватьТаблицуДолги(папкаТаблицВыгрузки)
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	запрос.Текст =
	"ВЫБРАТЬ
	|	КонтрагентыМенеджеры.Ссылка КАК Контрагент,
	|	КонтрагентыМенеджеры.ОсновнаяОрганизация КАК Организация
	|ПОМЕСТИТЬ Контрагенты
	|ИЗ
	|	Справочник.Контрагенты.Менеджеры КАК КонтрагентыМенеджеры
	|ГДЕ
	|	КонтрагентыМенеджеры.Менеджер = &Менеджер
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПоступлениеДенегВедомость.Дата, ДЕНЬ), ДЕНЬ, 1)) КАК Дата
	|ПОМЕСТИТЬ ДатаОтсчётаДолга
	|ИЗ
	|	Документ.ПоступлениеДенегВедомость КАК ПоступлениеДенегВедомость
	|ГДЕ
	|	ПоступлениеДенегВедомость.Маршрут = &Менеджер
	|	И ПоступлениеДенегВедомость.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Долги.Контрагент КАК Контрагент,
	|	Долги.КредитныйДокумент КАК КредитныйДокумент,
	|	СУММА(Долги.Долг) КАК Долг
	|ПОМЕСТИТЬ Долги
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВзаиморасчетыСПокупателямиОстатки.Контрагент КАК Контрагент,
	|		ВзаиморасчетыСПокупателямиОстатки.КредитныйДокумент КАК КредитныйДокумент,
	|		ВзаиморасчетыСПокупателямиОстатки.СуммаОстаток КАК Долг
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыСПокупателями.Остатки(
	|				,
	|				Менеджер = &Менеджер
	|					И Контрагент В
	|						(ВЫБРАТЬ
	|							Контрагенты.Контрагент
	|						ИЗ
	|							Контрагенты КАК Контрагенты)) КАК ВзаиморасчетыСПокупателямиОстатки
	|	ГДЕ
	|		ВзаиморасчетыСПокупателямиОстатки.СуммаОстаток >= 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КпкКассаСтрокиДокумента.Контрагент,
	|		КпкКассаСтрокиДокумента.КредДокумент,
	|		-КпкКассаСтрокиДокумента.Сумма
	|	ИЗ
	|		ДатаОтсчётаДолга КАК ДатаОтсчётаДолга
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КпкКасса.СтрокиДокумента КАК КпкКассаСтрокиДокумента
	|			ПО (КпкКассаСтрокиДокумента.Ссылка.Дата >= ДатаОтсчётаДолга.Дата)
	|				И (КпкКассаСтрокиДокумента.Ссылка.Менеджер = &Менеджер)
	|				И (КпкКассаСтрокиДокумента.Ссылка.Проведен)
	|	ГДЕ
	|		КпкКассаСтрокиДокумента.Контрагент В
	|				(ВЫБРАТЬ
	|					Контрагенты.Контрагент
	|				ИЗ
	|					Контрагенты КАК Контрагенты)) КАК Долги
	|
	|СГРУППИРОВАТЬ ПО
	|	Долги.Контрагент,
	|	Долги.КредитныйДокумент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДатаОтсчётаДолга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Контрагент.Код КАК clientID,
	|	Контрагенты.Организация.Код КАК companyID,
	|	ВЫБОР
	|		КОГДА Долги.КредитныйДокумент ЕСТЬ NULL 
	|			ТОГДА """"
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ТИПЗНАЧЕНИЯ(Долги.КредитныйДокумент))
	|	КОНЕЦ КАК document,
	|	Долги.КредитныйДокумент.СуммаДокумента КАК sum,
	|	Долги.Долг КАК debt,
	|	Долги.КредитныйДокумент.Дата КАК date,
	|	Долги.КредитныйДокумент.Номер КАК number
	|ИЗ
	|	Контрагенты КАК Контрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Долги КАК Долги
	|		ПО Контрагенты.Контрагент = Долги.Контрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	clientID";
	#КонецОбласти
	
	запрос.УстановитьПараметр("Менеджер", м_реквизитыАгента.Менеджер);
	
	клиенты = Новый ТаблицаЗначений;
	клиенты.Колонки.Добавить("clientID", Новый ОписаниеТипов("Строка"));
	клиенты.Колонки.Добавить("data", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	выборка = запрос.Выполнить().Выбрать();
	Пока выборка.СледующийПоЗначениюПоля("clientID") Цикл
		
		документыСДолгами = Новый ТаблицаЗначений;
		документыСДолгами.Колонки.Добавить("companyID", Новый ОписаниеТипов("Строка"));
		документыСДолгами.Колонки.Добавить("document", Новый ОписаниеТипов("Строка"));
		документыСДолгами.Колонки.Добавить("sum", Новый ОписаниеТипов("Число"));
		документыСДолгами.Колонки.Добавить("debt", Новый ОписаниеТипов("Число"));
		документыСДолгами.Колонки.Добавить("date", Новый ОписаниеТипов("Дата"));
		документыСДолгами.Колонки.Добавить("number", Новый ОписаниеТипов("Строка"));
		
		Пока выборка.Следующий() Цикл
		
			строкаДокументыСДолгами = документыСДолгами.Добавить();
			ЗаполнитьЗначенияСвойств(строкаДокументыСДолгами, выборка);
		
		КонецЦикла; 
		
		строкаКлиенты = клиенты.Добавить();
		строкаКлиенты.clientID = выборка.clientID;
		строкаКлиенты.data = документыСДолгами;
	
	КонецЦикла; 
	
	имяФайла = "debts";
	СформироватьPlist(клиенты, папкаТаблицВыгрузки, имяФайла);

КонецПроцедуры // СформироватьТаблицуДолги()



#КонецОбласти

#КонецОбласти

#Область ЧтениеФайловДанных

#Область Plist

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПрочитатьPlist(папкаФайловОбмена, имяФайла)
	
	полноеИмяФайла = папкаФайловОбмена + имяФайла + ".plist";
	
	описаниеЭтапа = НСтр("ru = 'Чтение таблицы '") + имяФайла;
	
	файл = Новый Файл(полноеИмяФайла);
	Если Не файл.Существует() Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли; 
	
	чтениеXML = Новый ЧтениеXML;
	Попытка
		чтениеXML.ОткрытьФайл(полноеИмяФайла,,, "UTF-8");
	Исключение
		
		текстСообщения = НСтр("ru = 'Не удалось открыть файл данных.'");
		ЗафиксироватьСообщениеОбмена(УровеньЖурналаРегистрации.Ошибка, текстСообщения, описаниеЭтапа, ИнформацияОбОшибке(), м_агент);
		
		Возврат Неопределено;
	
	КонецПопытки;

	Попытка
		
		построительDOM = Новый ПостроительDOM;
		документDOM = построительDOM.Прочитать(чтениеXML);
		
		данные = ПрочитатьArray(документDOM.ПервыйДочерний.ПервыйДочерний);
		
	Исключение
	
		текстСообщения = НСтр("ru = 'Не удалось прочитать файл данных.'");
		ЗафиксироватьСообщениеОбмена(УровеньЖурналаРегистрации.Ошибка, текстСообщения, описаниеЭтапа, ИнформацияОбОшибке(), м_агент);
		
		Возврат Неопределено;
	
	КонецПопытки;
	
	Возврат данные;

КонецФункции // ПрочитатьPlist()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПрочитатьArray(данныеArray)
	
	данные = Новый ТаблицаЗначений;

	узлыDict = данныеArray.ДочерниеУзлы;
	количествоDict = узлыDict.Количество();
	Если количествоDict > 0 Тогда
		
		// Получим первый элемент dict и по его структуре создадим колонки таблицы значений.
		первыйDict = ПрочитатьDict(узлыDict[0]);
		Для каждого ключИЗначение Из первыйDict Цикл
			данные.Колонки.Добавить(ключИЗначение.Ключ);
		КонецЦикла; 
		
		// Добавим данные первого элемента в таблицу.
		строкаДанные = данные.Добавить();
		ЗаполнитьЗначенияСвойств(строкаДанные, первыйDict);
		
		// Добавим все последующие элементы.
		Для к = 1 По количествоDict - 1 Цикл
		
			текущийDict = ПрочитатьDict(узлыDict[к]);
			
			строкаДанные = данные.Добавить();
			ЗаполнитьЗначенияСвойств(строкаДанные, текущийDict);
		
		КонецЦикла; 
	
	КонецЕсли; 
	
	Возврат данные;

КонецФункции // ПрочитатьArray()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПрочитатьDict(элементDict)
	
	данные = Новый Структура;
	
	текущийKey = Неопределено;		
	Для каждого элементKey Из элементDict.ДочерниеУзлы Цикл
		
		Если элементKey.ИмяУзла = "key" Тогда
			
			текущийKey = элементKey.ТекстовоеСодержимое;
			
		ИначеЕсли элементKey.ИмяУзла = "string" Тогда
			
			данные.Вставить(текущийKey, элементKey.ТекстовоеСодержимое);
			
		ИначеЕсли элементKey.ИмяУзла = "array" Тогда
			
			данные.Вставить(текущийKey, ПрочитатьArray(элементKey));
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат данные;

КонецФункции // ПрочитатьDict()

#КонецОбласти

#Область Таблицы

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПрочитатьТаблицуЗаявкиСУстройства(папкаФайловОбмена)
	
	имяФайла = "orders";
	данныеДокументов = ПрочитатьPlist(папкаФайловОбмена, имяФайла);
	Если данныеДокументов = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли данныеДокументов.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	описаниеЭтапа = НСтр("ru = 'Чтение таблицы '") + имяФайла;
	
	видДокумента = Перечисления.БПАГВидыДокументов.Заявка;
	настройкиДокумента = м_настройкиДокументов[видДокумента];
	
	свойстваПолучаемыхОбъектов = Новый Соответствие;
	свойстваПолучаемыхОбъектов.Вставить("Документы", ПолучитьСтруктуруСвойствПолучаемыхОбъектов("uniqueID"));
	свойстваПолучаемыхОбъектов.Вставить("Организации", ПолучитьСтруктуруСвойствПолучаемыхОбъектов("companyID"));
	свойстваПолучаемыхОбъектов.Вставить("Контрагенты", ПолучитьСтруктуруСвойствПолучаемыхОбъектов("clientID"));
	свойстваПолучаемыхОбъектов.Вставить("СтруктурныеЕдиницы", ПолучитьСтруктуруСвойствПолучаемыхОбъектов("depotID"));
	свойстваПолучаемыхОбъектов.Вставить("ТипыЦен", ПолучитьСтруктуруСвойствПолучаемыхОбъектов("priceTypeID"));
	свойстваПолучаемыхОбъектов.Вставить("Номенклатура", ПолучитьСтруктуруСвойствПолучаемыхОбъектов("rows.goodID"));
	
	ссылкиНаОбъекты = ПолучитьОбъектыПоВнешнемуИдентификатору(видДокумента, данныеДокументов, свойстваПолучаемыхОбъектов);
	
	Для каждого данныеДокумента Из данныеДокументов Цикл
	
		естьОшибки = Ложь;
		
		организация = ПолучитьЗначениеИзСсылокНаОбъекты("Организации", ссылкиНаОбъекты, свойстваПолучаемыхОбъектов, данныеДокумента);
		Если организация = Неопределено Тогда
			естьОшибки = Истина;
		КонецЕсли; 
	
		контрагент = ПолучитьЗначениеИзСсылокНаОбъекты("Контрагенты", ссылкиНаОбъекты, свойстваПолучаемыхОбъектов, данныеДокумента);
		Если контрагент = Неопределено Тогда
			естьОшибки = Истина;
		КонецЕсли; 
		
		подразделение = ПолучитьЗначениеИзСсылокНаОбъекты("СтруктурныеЕдиницы", ссылкиНаОбъекты, свойстваПолучаемыхОбъектов, данныеДокумента);
		Если подразделение = Неопределено Тогда
			естьОшибки = Истина;
		КонецЕсли; 
		
		типЦен = ПолучитьЗначениеИзСсылокНаОбъекты("ТипыЦен", ссылкиНаОбъекты, свойстваПолучаемыхОбъектов, данныеДокумента);
		Если типЦен = Неопределено Тогда
			естьОшибки = Истина;
		КонецЕсли; 
		
		кпкДатаСоздания = ПреобразоватьВДату(данныеДокумента.createdLocationDate);
		Если кпкДатаСоздания = Неопределено Тогда
			естьОшибки = Истина;
		КонецЕсли; 
		
		документОбъект = ПолучитьДокументОбъектДляЗагрузки(ссылкиНаОбъекты, "КпкЗаявка", настройкиДокумента, данныеДокумента);
		Если документОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		документОбъект.Организация = организация;
		документОбъект.Контрагент = контрагент;
		документОбъект.Подразделение = подразделение;
		документОбъект.ТипЦен = типЦен;
		документОбъект.Менеджер = м_реквизитыАгента.Менеджер;
		документОбъект.ДатаДоставки = м_текущаяДата;
		документОбъект.Комментарий = данныеДокумента.comment;
		документОбъект.ГПСШирота = данныеДокумента.createdLatitude;
		документОбъект.ГПСДолгота = данныеДокумента.createdLongitude;
		документОбъект.КпкДатаСоздания = кпкДатаСоздания;
		
		документОбъект.Запасы.Очистить();
		
		данныеСтрокДокумента = данныеДокумента.rows;
		СортироватьСтрокиТаблицыДокумента(данныеСтрокДокумента);
		
		Для каждого строкаДокумента Из данныеСтрокДокумента Цикл
		
			номенклатура = ПолучитьЗначениеИзСсылокНаОбъекты("Номенклатура", ссылкиНаОбъекты, свойстваПолучаемыхОбъектов, строкаДокумента);
			Если номенклатура = Неопределено Тогда
				естьОшибки = Истина;
			КонецЕсли; 
			
			количество = ПреобразоватьВЧисло(строкаДокумента.quantity);
			Если количество = Неопределено Тогда
				естьОшибки = Истина;
			КонецЕсли; 
			
			коэффициент = ПреобразоватьВЧисло(строкаДокумента.coeff);
			Если коэффициент = Неопределено Тогда
				естьОшибки = Истина;
			КонецЕсли; 
			
			цена = ПреобразоватьВЧисло(строкаДокумента.price);
			Если цена = Неопределено Тогда
				естьОшибки = Истина;
			КонецЕсли; 
			
			сумма = ПреобразоватьВЧисло(строкаДокумента.sum);
			Если сумма = Неопределено Тогда
				естьОшибки = Истина;
			КонецЕсли; 
			
			строкаЗапасы = документОбъект.Запасы.Добавить();
			строкаЗапасы.Номенклатура = номенклатура;
			строкаЗапасы.Количество = количество * коэффициент;
			строкаЗапасы.Цена = цена;
			строкаЗапасы.Сумма = сумма;
		
		КонецЦикла; 
		
		Если Не ЗавершитьЗагрузкуДокумента(документОбъект, видДокумента, данныеДокумента, настройкиДокумента, естьОшибки) Тогда
			Возврат Ложь;
		КонецЕсли; 
		
		Если данныеДокумента.properties.Количество() > 0 Тогда
		
			строкаProperties = данныеДокумента.properties.Найти("RECOMMENDED_DIFF", "uniqueID");
			Если строкаProperties <> Неопределено Тогда
				
				отклоненияКоличества = строкаProperties.value.Скопировать();
				отклоненияКоличества.Колонки.Добавить("DocumentID", Новый ОписаниеТипов("Строка"));
				отклоненияКоличества.ЗаполнитьЗначения(данныеДокумента.uniqueID, "DocumentID");
				
				путьКФайлуОтклонений = м_корневаяПапкаОбменаАгента + "OrdersDiff" + м_разделительПути;
				Попытка
					СоздатьКаталог(путьКФайлуОтклонений);
				Исключение
				
					текстСообщения = СтрШаблон(НСтр("ru = 'Не удалось создать папку ""%1"" для записи файла расхождений количества заявки.'"), путьКФайлуОтклонений);
					ЗафиксироватьСообщениеОбмена(УровеньЖурналаРегистрации.Ошибка, текстСообщения, описаниеЭтапа, ИнформацияОбОшибке(), м_агент);
					
					Возврат Ложь;
				
				КонецПопытки;
				
				// Имя файла в формате год_месяц_день_час_минуты_секунды.txt
				имяФайлаОтклонений = СтрШаблон("%1%2.txt", путьКФайлуОтклонений, Формат(м_текущаяДата, "ДФ=гггг_ММ_дд_ЧЧ_мм_сс"));
				Если Не ЗначениеВФайл(имяФайлаОтклонений, отклоненияКоличества) Тогда
				
					текстСообщения = СтрШаблон(НСтр("ru = 'Не удалось сохранить файл расхождений количества заявки с именем ""%1"".'"), имяФайлаОтклонений);
					ЗафиксироватьСообщениеОбмена(УровеньЖурналаРегистрации.Ошибка, текстСообщения, описаниеЭтапа,, м_агент);
					
					Возврат Ложь;
				
				КонецЕсли; 
			
			КонецЕсли; 
		
		КонецЕсли; 
	
	КонецЦикла; 
	
	Возврат Истина;

КонецФункции // ПрочитатьТаблицуЗаявкиСУстройства()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПрочитатьТаблицуПКОСУстройства(папкаФайловОбмена)
	
	имяФайла = "cashIns";
	данныеДокументов = ПрочитатьPlist(папкаФайловОбмена, имяФайла);
	Если данныеДокументов = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли данныеДокументов.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	описаниеЭтапа = НСтр("ru = 'Обработка таблицы '") + имяФайла;
	
	видДокумента = Перечисления.БПАГВидыДокументов.ПКО;
	настройкиДокумента = м_настройкиДокументов[видДокумента];
	
	свойстваПолучаемыхОбъектов = Новый Соответствие;
	свойстваПолучаемыхОбъектов.Вставить("Документы", ПолучитьСтруктуруСвойствПолучаемыхОбъектов("uniqueID"));
	свойстваПолучаемыхОбъектов.Вставить("Контрагенты", ПолучитьСтруктуруСвойствПолучаемыхОбъектов("clientID"));
	
	ссылкиНаОбъекты = ПолучитьОбъектыПоВнешнемуИдентификатору(видДокумента, данныеДокументов, свойстваПолучаемыхОбъектов);
	
	Для каждого данныеДокумента Из данныеДокументов Цикл
	
		естьОшибки = Ложь;
		
		контрагент = ПолучитьЗначениеИзСсылокНаОбъекты("Контрагенты", ссылкиНаОбъекты, свойстваПолучаемыхОбъектов, данныеДокумента);
		Если контрагент = Неопределено Тогда
			естьОшибки = Истина;
		КонецЕсли; 
		
		дата = ПреобразоватьВДату(данныеДокумента.date);
		Если дата = Неопределено Тогда
			естьОшибки = Истина;
		КонецЕсли; 
		
		сумма = ПреобразоватьВЧисло(данныеДокумента.sum);
		Если сумма = Неопределено Тогда
			естьОшибки = Истина;
		КонецЕсли; 
		
		суммаСкидки = 0;
		строкаProperties = данныеДокумента.properties.Найти("FTBonus", "identifier");
		Если строкаProperties <> Неопределено Тогда
			суммаСкидки = ПреобразоватьВЧисло(строкаProperties.value);
		КонецЕсли; 
		Если суммаСкидки = Неопределено Тогда
			естьОшибки = Истина;
		КонецЕсли; 
		
		документОбъект = ПолучитьДокументОбъектДляЗагрузки(ссылкиНаОбъекты, "КпкКасса", настройкиДокумента, данныеДокумента);
		Если документОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		документОбъект.Дата = дата;
		документОбъект.Контрагент = контрагент;
		документОбъект.Подразделение = м_реквизитыАгента.Подразделение;
		документОбъект.Менеджер = м_реквизитыАгента.Менеджер;
		документОбъект.ИспользуетсяРасшифровкаПлатежа = Истина;
		документОбъект.СуммаДокумента = сумма;
		документОбъект.Комментарий = данныеДокумента.comment;
		
		документОбъект.СтрокиДокумента.Очистить();
		
		данныеСтрокДокумента = данныеДокумента.rows;
		СортироватьСтрокиТаблицыДокумента(данныеСтрокДокумента);
		
		Для каждого строкаДокумента Из данныеСтрокДокумента Цикл
		
			сумма = ПреобразоватьВЧисло(строкаДокумента.sum);
			Если сумма = Неопределено Тогда
				естьОшибки = Истина;
			КонецЕсли; 
			
			датаКредитногоДокумента = ПреобразоватьВДату(строкаДокумента.debtDate + " 00:00:00");
			Если датаКредитногоДокумента = Неопределено Тогда
				естьОшибки = Истина;
			КонецЕсли; 
			
			кредитныйДокумент = Неопределено;
			Если строкаДокумента.debtID = "1" Тогда	// Что такое "1"?
			
				// СДЕЛАТЬ: Попробовать сделать выборку документов запросом по имеющемуся синониму и номеру документов.
				видКредитногоДокумента = строкаДокумента.debtDocument;
				имяДокумента = м_именаСинонимыДокументов[видКредитногоДокумента];
				Если имяДокумента = Неопределено Тогда
				
					текстСообщения = СтрШаблон(НСтр("ru = 'Не найден тип кредитного документа с синонимом ""%1"".'"), видКредитногоДокумента);
					ЗафиксироватьСообщениеОбмена(УровеньЖурналаРегистрации.Ошибка, текстСообщения, описаниеЭтапа,, документОбъект);
					
					естьОшибки = Истина;
				
				Иначе
					кредитныйДокумент = Документы[имяДокумента].НайтиПоНомеру(строкаДокумента.debtNumber, датаКредитногоДокумента);
				КонецЕсли; 
			
			КонецЕсли; 
			
			строкаСтрокиДокумента = документОбъект.СтрокиДокумента.Добавить();
			строкаСтрокиДокумента.Контрагент = контрагент;
			строкаСтрокиДокумента.Сумма = сумма;
			строкаСтрокиДокумента.КредДокумент = кредитныйДокумент;
		
		КонецЦикла; 
		
		Если документОбъект.СтрокиДокумента.Количество() > 0 Тогда
			документОбъект.СтрокиДокумента[0].СуммаСкидки = суммаСкидки;
		КонецЕсли; 
		
		Если Не ЗавершитьЗагрузкуДокумента(документОбъект, видДокумента, данныеДокумента, настройкиДокумента, естьОшибки) Тогда
			Возврат Ложь;
		КонецЕсли; 
	
	КонецЦикла; 
	
	Возврат Истина;

КонецФункции // ПрочитатьТаблицуПКОСУстройства()

// Функция - Прочитать таблицу анкета
//
// Параметры:
//  папкаФайловОбмена	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПрочитатьТаблицуАнкета(папкаФайловОбмена)
	
	имяФайла = "questionnaires";
	данныеДокументов = ПрочитатьPlist(папкаФайловОбмена, имяФайла);
	Если данныеДокументов = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли данныеДокументов.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	видДокумента = Перечисления.БПАГВидыДокументов.Анкета;
	настройкиДокумента = м_настройкиДокументов[видДокумента];
	
	свойстваПолучаемыхОбъектов = Новый Соответствие;
	свойстваПолучаемыхОбъектов.Вставить("Документы", ПолучитьСтруктуруСвойствПолучаемыхОбъектов("uniqueID"));
	свойстваПолучаемыхОбъектов.Вставить("Контрагенты", ПолучитьСтруктуруСвойствПолучаемыхОбъектов("clientID"));
	свойстваПолучаемыхОбъектов.Вставить("БПАГВидыАнкет", ПолучитьСтруктуруСвойствПолучаемыхОбъектов("questionnaireTypeID"));
	свойстваПолучаемыхОбъектов.Вставить("БПАГВопросыАнкет", ПолучитьСтруктуруСвойствПолучаемыхОбъектов("rows.questionID"));
	
	ссылкиНаОбъекты = ПолучитьОбъектыПоВнешнемуИдентификатору(видДокумента, данныеДокументов, свойстваПолучаемыхОбъектов);
	
	Для каждого данныеДокумента Из данныеДокументов Цикл
	
		естьОшибки = Ложь;
		
		контрагент = ПолучитьЗначениеИзСсылокНаОбъекты("Контрагенты", ссылкиНаОбъекты, свойстваПолучаемыхОбъектов, данныеДокумента);
		Если контрагент = Неопределено Тогда
			естьОшибки = Истина;
		КонецЕсли; 
		
		видАнкеты = ПолучитьЗначениеИзСсылокНаОбъекты("БПАГВидыАнкет", ссылкиНаОбъекты, свойстваПолучаемыхОбъектов, данныеДокумента);
		Если видАнкеты = Неопределено Тогда
			естьОшибки = Истина;
		КонецЕсли; 
		
		дата = ПреобразоватьВДату(данныеДокумента.date);
		Если дата = Неопределено Тогда
			естьОшибки = Истина;
		КонецЕсли; 
		
		документОбъект = ПолучитьДокументОбъектДляЗагрузки(ссылкиНаОбъекты, "БПАГАнкета", настройкиДокумента, данныеДокумента);
		Если документОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		документОбъект.Дата = дата;
		документОбъект.Подразделение 	= м_реквизитыАгента.Агент.Подразделение;
		документОбъект.Контрагент 		= контрагент;
		документОбъект.Агент 			= м_реквизитыАгента.Агент;
		документОбъект.ИД 				= данныеДокумента.uniqueID;
		документОбъект.ВидАнкеты 		= видАнкеты;
		документОбъект.Комментарий 		= данныеДокумента.comment;
		
		
		
		документОбъект.Ответы.Очистить();
		документОбъект.Картинки.Очистить();
		
		данныеСтрокДокумента = данныеДокумента.rows;
		
		Для каждого строкаДокумента Из данныеСтрокДокумента Цикл
			
			вопрос = ПолучитьЗначениеИзСсылокНаОбъекты("БПАГВопросыАнкет", ссылкиНаОбъекты, свойстваПолучаемыхОбъектов, строкаДокумента);
			Если вопрос = Неопределено Тогда
				естьОшибки = Истина;
			КонецЕсли; 
			
			строкаОтветы = документОбъект.Ответы.Добавить();
			
			строкаОтветы.Вопрос = вопрос;
			
			Если строкаДокумента.questionType = "number" Тогда
				
				строкаОтветы.Ответ = строкаДокумента.value;
				
			ИначеЕсли строкаДокумента.questionType = "data" Тогда	
				
				строкаОтветы.Ответ = Дата(строкаДокумента.value);
				
			ИначеЕсли строкаДокумента.questionType = "boolean" Тогда	
				
				Если строкаДокумента.value = "1" Тогда 
					строкаОтветы.Ответ = Истина;
				Иначе
					строкаОтветы.Ответ = Ложь;
				КонецЕсли;
				
			Иначе
				строкаОтветы.Ответ = строкаДокумента.value;
			КонецЕсли;
			
			//Для каждого строкаProperties Из строкаДокумента.properties Цикл
			//	
			//	pictures = строкаProperties.pictures;
			//	Если pictures.Количество() > 0 Тогда
			//	
			//		СортироватьСтрокиТаблицыДокумента(pictures);
			//		
			//		Для каждого строкаPictures Из pictures Цикл
			//			
			//			строкаКартинки = документОбъект.Картинки.Добавить();
			//			строкаКартинки.Имя = строкаPictures.fileName;
			//			строкаКартинки.Вопрос = вопрос;
			//			строкаКартинки.Порядок = строкаPictures.sort;
			//			
			//		КонецЦикла; 
			//	
			//	КонецЕсли; 
			//
			//КонецЦикла; 
		
		КонецЦикла; 
		
		Если Не ЗавершитьЗагрузкуДокумента(документОбъект, видДокумента, данныеДокумента, настройкиДокумента, естьОшибки) Тогда
			Возврат Ложь;
		КонецЕсли; 
	
	КонецЦикла; 
	
	Возврат Истина;

КонецФункции // ПрочитатьТаблицуМерчандайзинг()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПрочитатьТаблицуМерчандайзинг(папкаФайловОбмена)
	
	имяФайла = "merchandising";
	данныеДокументов = ПрочитатьPlist(папкаФайловОбмена, имяФайла);
	Если данныеДокументов = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли данныеДокументов.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	видДокумента = Перечисления.БПАГВидыДокументов.Мерчандайзинг;
	настройкиДокумента = м_настройкиДокументов[видДокумента];
	
	свойстваПолучаемыхОбъектов = Новый Соответствие;
	свойстваПолучаемыхОбъектов.Вставить("Документы", ПолучитьСтруктуруСвойствПолучаемыхОбъектов("uniqueID"));
	свойстваПолучаемыхОбъектов.Вставить("Контрагенты", ПолучитьСтруктуруСвойствПолучаемыхОбъектов("clientID"));
	свойстваПолучаемыхОбъектов.Вставить("Номенклатура", ПолучитьСтруктуруСвойствПолучаемыхОбъектов("rows.goodID"));
	
	ссылкиНаОбъекты = ПолучитьОбъектыПоВнешнемуИдентификатору(видДокумента, данныеДокументов, свойстваПолучаемыхОбъектов);
	
	Для каждого данныеДокумента Из данныеДокументов Цикл
	
		естьОшибки = Ложь;
		
		контрагент = ПолучитьЗначениеИзСсылокНаОбъекты("Контрагенты", ссылкиНаОбъекты, свойстваПолучаемыхОбъектов, данныеДокумента);
		Если контрагент = Неопределено Тогда
			естьОшибки = Истина;
		КонецЕсли; 
		
		дата = ПреобразоватьВДату(данныеДокумента.date);
		Если дата = Неопределено Тогда
			естьОшибки = Истина;
		КонецЕсли; 
		
		документОбъект = ПолучитьДокументОбъектДляЗагрузки(ссылкиНаОбъекты, "БПАГМерчандайзинг", настройкиДокумента, данныеДокумента);
		Если документОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		документОбъект.Дата = дата;
		документОбъект.Контрагент = контрагент;
		документОбъект.Агент = м_реквизитыАгента.Агент;
		документОбъект.ИД = данныеДокумента.uniqueID;
		
		документОбъект.Товары.Очистить();
		документОбъект.Картинки.Очистить();
		
		данныеСтрокДокумента = данныеДокумента.rows;
		СортироватьСтрокиТаблицыДокумента(данныеСтрокДокумента);
		
		Для каждого строкаДокумента Из данныеСтрокДокумента Цикл
		
			номенклатура = ПолучитьЗначениеИзСсылокНаОбъекты("Номенклатура", ссылкиНаОбъекты, свойстваПолучаемыхОбъектов, строкаДокумента);
			Если номенклатура = Неопределено Тогда
				естьОшибки = Истина;
			КонецЕсли; 
			
			количество = ПреобразоватьВЧисло(строкаДокумента.quantity);
			Если количество = Неопределено Тогда
				естьОшибки = Истина;
			КонецЕсли; 
			
			цена = ПреобразоватьВЧисло(строкаДокумента.price);
			Если цена = Неопределено Тогда
				естьОшибки = Истина;
			КонецЕсли; 
			
			строкаТовары = документОбъект.Товары.Добавить();
			строкаТовары.Номенклатура = номенклатура;
			строкаТовары.Количество = количество;
			строкаТовары.Цена = цена;
			
			Для каждого строкаProperties Из строкаДокумента.properties Цикл
				
				pictures = строкаProperties.pictures;
				Если pictures.Количество() > 0 Тогда
				
					СортироватьСтрокиТаблицыДокумента(pictures);
					
					Для каждого строкаPictures Из pictures Цикл
						
						строкаКартинки = документОбъект.Картинки.Добавить();
						строкаКартинки.Имя = строкаPictures.fileName;
						строкаКартинки.Номенклатура = Номенклатура;
						строкаКартинки.Порядок = строкаPictures.sort;
						
					КонецЦикла; 
				
				КонецЕсли; 
			
			КонецЦикла; 
		
		КонецЦикла; 
		
		Если Не ЗавершитьЗагрузкуДокумента(документОбъект, видДокумента, данныеДокумента, настройкиДокумента, естьОшибки) Тогда
			Возврат Ложь;
		КонецЕсли; 
	
	КонецЦикла; 
	
	Возврат Истина;

КонецФункции // ПрочитатьТаблицуМерчандайзинг()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПрочитатьТаблицуВозвратыТовараОтПокупателяСУстройства(папкаФайловОбмена)

	имяФайла = "returnIns";
	данныеДокументов = ПрочитатьPlist(папкаФайловОбмена, имяФайла);
	Если данныеДокументов = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли данныеДокументов.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	видДокумента = Перечисления.БПАГВидыДокументов.ВозвратОтПокупателя;
	настройкиДокумента = м_настройкиДокументов[видДокумента];
	
	свойстваПолучаемыхОбъектов = Новый Соответствие;
	свойстваПолучаемыхОбъектов.Вставить("Документы", ПолучитьСтруктуруСвойствПолучаемыхОбъектов("uniqueID"));
	свойстваПолучаемыхОбъектов.Вставить("Организации", ПолучитьСтруктуруСвойствПолучаемыхОбъектов("companyID"));
	свойстваПолучаемыхОбъектов.Вставить("Контрагенты", ПолучитьСтруктуруСвойствПолучаемыхОбъектов("clientID"));
	свойстваПолучаемыхОбъектов.Вставить("СтруктурныеЕдиницы", ПолучитьСтруктуруСвойствПолучаемыхОбъектов("depotID"));
	свойстваПолучаемыхОбъектов.Вставить("ТипыЦен", ПолучитьСтруктуруСвойствПолучаемыхОбъектов("priceTypeID"));
	свойстваПолучаемыхОбъектов.Вставить("ДокументыОснованияРасходнаяНакладная", ПолучитьСтруктуруСвойствПолучаемыхОбъектов("masterDocumentID"));
	
	дополнительныеПоля = Новый СписокЗначений;
	дополнительныеПоля.Добавить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
	структураСвойств = ПолучитьСтруктуруСвойствПолучаемыхОбъектов("rows.goodID", дополнительныеПоля);
	свойстваПолучаемыхОбъектов.Вставить("Номенклатура", структураСвойств);
	
	ссылкиНаОбъекты = ПолучитьОбъектыПоВнешнемуИдентификатору(видДокумента, данныеДокументов, свойстваПолучаемыхОбъектов);
	данныеЗаполнения = ПолучитьДанныеЗаполненияВозвратыТовараОтПокупателяСУстройства(ссылкиНаОбъекты);
	
	Для каждого данныеДокумента Из данныеДокументов Цикл
	
		естьОшибки = Ложь;
		
		организация = ПолучитьЗначениеИзСсылокНаОбъекты("Организации", ссылкиНаОбъекты, свойстваПолучаемыхОбъектов, данныеДокумента);
		Если организация = Неопределено Тогда
			естьОшибки = Истина;
		КонецЕсли; 
	
		контрагент = ПолучитьЗначениеИзСсылокНаОбъекты("Контрагенты", ссылкиНаОбъекты, свойстваПолучаемыхОбъектов, данныеДокумента);
		Если контрагент = Неопределено Тогда
			естьОшибки = Истина;
		КонецЕсли; 
		
		подразделение = ПолучитьЗначениеИзСсылокНаОбъекты("СтруктурныеЕдиницы", ссылкиНаОбъекты, свойстваПолучаемыхОбъектов, данныеДокумента);
		Если подразделение = Неопределено Тогда
			естьОшибки = Истина;
		КонецЕсли; 
		
		типЦен = ПолучитьЗначениеИзСсылокНаОбъекты("ТипыЦен", ссылкиНаОбъекты, свойстваПолучаемыхОбъектов, данныеДокумента);
		Если типЦен = Неопределено Тогда
			естьОшибки = Истина;
		КонецЕсли; 
		
		документОснование = ПолучитьЗначениеИзСсылокНаОбъекты("ДокументыОснованияРасходнаяНакладная", ссылкиНаОбъекты, свойстваПолучаемыхОбъектов, данныеДокумента);
		Если документОснование = Неопределено Тогда
			естьОшибки = Истина;
		КонецЕсли; 
		
		дата = ПреобразоватьВДату(данныеДокумента.date);
		Если дата = Неопределено Тогда
			естьОшибки = Истина;
		КонецЕсли; 
		
		датаСоздания = ПреобразоватьВДату(данныеДокумента.createdDate);
		Если датаСоздания = Неопределено Тогда
			естьОшибки = Истина;
		КонецЕсли; 
		
		документОбъект = ПолучитьДокументОбъектДляЗагрузки(ссылкиНаОбъекты, "ВозвратОтПокупателя", настройкиДокумента, данныеДокумента);
		Если документОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		документОбъект.Дата = дата;
		документОбъект.ДатаСоздания = датаСоздания;
		документОбъект.Организация = организация;
		документОбъект.Контрагент = контрагент;
		документОбъект.Подразделение = подразделение;
		документОбъект.ТипЦен = типЦен;
		документОбъект.Менеджер = м_реквизитыАгента.Менеджер;
		документОбъект.Комментарий = данныеДокумента.comment;
		документОбъект.ДокОсн = документОснование;
		
		отборАвтоматическихСкидок = Новый Структура("Контрагент,Номенклатура", контрагент);
		
		документОбъект.Запасы.Очистить();
		
		данныеСтрокДокумента = данныеДокумента.rows;
		СортироватьСтрокиТаблицыДокумента(данныеСтрокДокумента);
		
		Для каждого строкаДокумента Из данныеСтрокДокумента Цикл
		
			свойстваНоменклатуры = ПолучитьСтруктуруСвойствИзСсылокНаОбъекты("Номенклатура", ссылкиНаОбъекты, свойстваПолучаемыхОбъектов, строкаДокумента);
			Если свойстваНоменклатуры = Неопределено Тогда
				естьОшибки = Истина;
			Иначе
				номенклатура = свойстваНоменклатуры.Ссылка;
			КонецЕсли; 
			
			количество = ПреобразоватьВЧисло(строкаДокумента.quantity);
			Если количество = Неопределено Тогда
				естьОшибки = Истина;
			КонецЕсли; 
			
			строкаЗапасы = документОбъект.Запасы.Добавить();
			строкаЗапасы.Номенклатура = номенклатура;
			строкаЗапасы.СтруктурнаяЕдиница = данныеЗаполнения.СкладВозвратов;
			строкаЗапасы.ЕдиницаИзмерения = свойстваНоменклатуры.ЕдиницаИзмерения;
			строкаЗапасы.Количество = количество;
			
			характеристикиЦены = ЦенообразованиеСервер.ПолучитьЦенуНоменклатуры(дата, подразделение, номенклатура, типЦен);
			строкаЗапасы.Цена = характеристикиЦены.Цена;
			
			отборАвтоматическихСкидок.Номенклатура = номенклатура;
			найденныеСтроки = данныеЗаполнения.АвтоматическиеСкидки.НайтиСтроки(отборАвтоматическихСкидок);
			Если найденныеСтроки.Количество() > 0 Тогда
				строкаЗапасы.ПроцентСкидки = найденныеСтроки[0].ПроцентСкидки;
			КонецЕсли; 			
			
			// СДЕЛАТЬ: Эти расчёты должны делаться собственными методами документа.
			строкаЗапасы.СуммаБезСкидки = строкаЗапасы.Количество * строкаЗапасы.Цена;
			строкаЗапасы.Скидка = строкаЗапасы.СуммаБезСкидки / 100 * строкаЗапасы.ПроцентСкидки;
			строкаЗапасы.Сумма = строкаЗапасы.СуммаБезСкидки - строкаЗапасы.Скидка;
			строкаЗапасы.СуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(строкаЗапасы.Сумма, Истина, 20);
		
		КонецЦикла; 
		
		Если Не ЗавершитьЗагрузкуДокумента(документОбъект, видДокумента, данныеДокумента, настройкиДокумента, естьОшибки) Тогда
			Возврат Ложь;
		КонецЕсли; 
	
	КонецЦикла; 
	
	Возврат Истина;

КонецФункции // ПрочитатьТаблицуВозвратыТовараОтПокупателяСУстройства()

#Область ВспомогательныеМетоды

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьСтруктуруСвойствПолучаемыхОбъектов(колонкаИдентификатора, дополнительныеПоля = Неопределено)

	Возврат Новый Структура("КолонкаИдентификатора,ДополнительныеПоля", колонкаИдентификатора, дополнительныеПоля);

КонецФункции // ПолучитьСтруктуруСвойствПолучаемыхОбъектов()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьСтруктуруСвойствИзСсылокНаОбъекты(видОбъекта, ссылкиНаОбъекты, свойстваПолучаемыхОбъектов, данные)

	колонкаИдентификатора = свойстваПолучаемыхОбъектов[видОбъекта].КолонкаИдентификатора;
	частиКолонкиИдентификатора = СтрРазделить(колонкаИдентификатора, ".");
	имяСвойства = частиКолонкиИдентификатора[частиКолонкиИдентификатора.ВГраница()];
	
	ключПоиска = данные[имяСвойства];
	Возврат ссылкиНаОбъекты[видОбъекта][ключПоиска];

КонецФункции // ПолучитьСтруктуруСвойствИзСсылокНаОбъекты()
 
// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьЗначениеИзСсылокНаОбъекты(видОбъекта, ссылкиНаОбъекты, свойстваПолучаемыхОбъектов, данные)

	структураСвойств = ПолучитьСтруктуруСвойствИзСсылокНаОбъекты(видОбъекта, ссылкиНаОбъекты, свойстваПолучаемыхОбъектов, данные);
	Если структураСвойств = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат структураСвойств.Ссылка;
	КонецЕсли; 

КонецФункции // ПолучитьЗначениеИзСсылокНаОбъекты()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПреобразоватьВЧисло(значениеСтрока)
	
	Если ПустаяСтрока(значениеСтрока) Тогда
		Возврат 0;
	КонецЕсли; 

	Попытка
		значение = Число(значениеСтрока);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат значение;

КонецФункции // ПреобразоватьВЧисло()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПреобразоватьВДату(значениеСтрока)

	Если ПустаяСтрока(значениеСтрока) Тогда
		Возврат '0001.01.01';
	КонецЕсли; 

	Попытка
		значение = Дата(значениеСтрока);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат значение;

КонецФункции // ПреобразоватьВДату()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура СортироватьСтрокиТаблицыДокумента(строкиДокумента)

	Для каждого строкаСтрокиДокумента Из строкиДокумента Цикл
		строкаСтрокиДокумента.sort = ПреобразоватьВЧисло(строкаСтрокиДокумента.sort);
	КонецЦикла; 
	
	строкиДокумента.Сортировать("sort");

КонецПроцедуры // СортироватьСтрокиТаблицыДокумента()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьДокументОбъектДляЗагрузки(ссылкиНаОбъекты, имяДокумента, настройкиДокумента, данныеДокумента, имяПоляИдентификатора = "uniqueID")
	
	описаниеЭтапа = НСтр("ru = 'Получение документа ИБ для загрузки'");
	
	свойстваДокумента = ссылкиНаОбъекты.Документы[данныеДокумента[имяПоляИдентификатора]];
	Если свойстваДокумента = Неопределено Тогда
		
		документОбъект = Документы[имяДокумента].СоздатьДокумент();
		документОбъект.Заполнить(Неопределено);
		
	Иначе
		
		документ = свойстваДокумента.Ссылка;
		
		идентификацияДокумента = СтрШаблон(НСтр("ru = 'Документ %1 (номер на устройстве %2) - '"), свойстваДокумента.Представление, данныеДокумента.number);
		Если свойстваДокумента.Проведен Тогда
			
			Если Не настройкиДокумента.Перепроводить Тогда
				
				текстСообщения = идентификацияДокумента + НСтр("ru = 'проведён. Перепроведение документа запрещено настройками обмена.'");
				ЗафиксироватьСообщениеОбмена(УровеньЖурналаРегистрации.Предупреждение, текстСообщения, описаниеЭтапа,, документ);
				
				Возврат Неопределено;
				
			КонецЕсли; 
			
		ИначеЕсли свойстваДокумента.ПометкаУдаления Тогда 
			
			текстСообщения = идентификацияДокумента + НСтр("ru = ' помечен на удаление.'");
			ЗафиксироватьСообщениеОбмена(УровеньЖурналаРегистрации.Предупреждение, текстСообщения, описаниеЭтапа,, документ);
			
			Возврат Неопределено;
			
		Иначе
			
			Если Не настройкиДокумента.ПерезаписыватьНепроведенные Тогда
				
				текстСообщения = идентификацияДокумента + НСтр("ru = 'был загружен ранее, но не проведён. Повторная загрузка непроведённого документа запрещена настройками обмена.'");
				ЗафиксироватьСообщениеОбмена(УровеньЖурналаРегистрации.Предупреждение, текстСообщения, описаниеЭтапа,, документ);
				
				Возврат Неопределено;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		документОбъект = документ.ПолучитьОбъект();
		Если документОбъект.Проведен Тогда
			документОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли; 
		
		Возврат документОбъект;
		
	КонецЕсли; 
	
	Возврат документОбъект;

КонецФункции // ПолучитьДокументОбъектДляЗагрузки()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ЗавершитьЗагрузкуДокумента(документОбъект, видДокумента, данныеДокумента, настройкиДокумента, естьОшибки)
	
	описаниеЭтапа = НСтр("ru = 'Завершение загрузки документа'");
	идентификацияДокумента = СтрШаблон(НСтр("ru = 'Документ %1 (номер на устройстве %2) - '"), Строка(документОбъект), данныеДокумента.number);
	
	Если естьОшибки Тогда
		режимЗаписи = РежимЗаписиДокумента.Запись;
	Иначе
		
		Если Не документОбъект.ПроверитьЗаполнение() Тогда
		
			текстСообщения = идентификацияДокумента + НСтр("ru = 'при проверке данных документа возникли ошибки.'");
			ЗафиксироватьСообщениеОбмена(УровеньЖурналаРегистрации.Ошибка, текстСообщения, описаниеЭтапа, ОбщегоНазначенияСервер.ПолучитьТекстСообщенийПользователю(), документОбъект);
			
			Возврат Ложь;
		
		КонецЕсли; 
		
		Если документОбъект.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Запретить Тогда
			режимЗаписи = РежимЗаписиДокумента.Запись;
		Иначе
			режимЗаписи = ?(настройкиДокумента.Проводить, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
		КонецЕсли; 
		
	КонецЕсли; 
	
	Попытка
		документОбъект.Записать(режимЗаписи);
	Исключение
		
		текстСообщения = идентификацияДокумента + НСтр("ru = 'не удалось сохранить изменения документа.'");
		ЗафиксироватьСообщениеОбмена(УровеньЖурналаРегистрации.Ошибка, текстСообщения, описаниеЭтапа, ИнформацияОбОшибке(), документОбъект);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Если Не ДобавитьЗаписьВДокументыАгентов(документОбъект, данныеДокумента, видДокумента) Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Возврат Истина;

КонецФункции // ЗавершитьЗагрузкуДокумента()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьДанныеЗаполненияВозвратыТовараОтПокупателяСУстройства(ссылкиНаОбъекты)
	
	номенклатура = Новый Массив;
	Для каждого ключИЗначение Из ссылкиНаОбъекты.Номенклатура Цикл
		номенклатура.Добавить(ключИЗначение.Значение.Ссылка);
	КонецЦикла; 

	контрагенты = Новый Массив;
	Для каждого ключИЗначение Из ссылкиНаОбъекты.Контрагенты Цикл
		контрагенты.Добавить(ключИЗначение.Значение.Ссылка);
	КонецЦикла; 

	данныеЗаполнения = Новый Структура("СкладВозвратов,АвтоматическиеСкидки");
	данныеЗаполнения.СкладВозвратов = Константы.СкладВозвратов.Получить();
	данныеЗаполнения.АвтоматическиеСкидки = ЦенообразованиеСервер.ПолучитьАвтоматическиеСкидкиКонтрагентов(контрагенты, номенклатура);
	
	Возврат данныеЗаполнения;

КонецФункции // ПолучитьДанныеЗаполненияВозвратыТовараОтПокупателяСУстройства()

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ДополнительныеПроцедурыИФункции

// <Описание процедуры>
//
// Параметры
//  имяСобытияЖурналаРегистрации  - Строка - <описание параметра>
//                 <продолжение описания параметра>
//  уровень  - УровеньЖурналаРегистрации - <описание параметра>
//                 <продолжение описания параметра>
//  данные  - Произвольный - <описание параметра>
//                 <продолжение описания параметра>
//  текстСообщения  - Строка - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ЗафиксироватьСообщениеОбмена(уровень, текстСообщения, описаниеЭтапа = Неопределено, информацияОбОшибке = Неопределено, данные = Неопределено)
	
	комментарий = "";
	Если описаниеЭтапа <> Неопределено Тогда
		комментарий = комментарий + описаниеЭтапа + ": ";
	КонецЕсли; 
	комментарий = комментарий + текстСообщения;
	Если информацияОбОшибке <> Неопределено Тогда
		
		комментарий = комментарий + Символы.ПС + НСтр("ru = 'Информация об ошибке: '");
		Если ТипЗнч(информацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
			комментарий = комментарий + КраткоеПредставлениеОшибки(информацияОбОшибке);
		Иначе
			комментарий = комментарий + информацияОбОшибке;
		КонецЕсли; 
		
	КонецЕсли; 
	
	ЗаписьЖурналаРегистрации(м_имяСобытияЖурналаРегистрации, уровень,, данные, комментарий);

КонецПроцедуры // ЗафиксироватьСообщениеОбмена()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьПолныйПутьКПапкеФайловОбмена(путьКПапке, суфикс = "")

	Возврат путьКПапке + ?(Прав(путьКПапке, 1) = "\", "", "\") + суфикс;

КонецФункции // ПолучитьПолныйПутьКПапкеФайловОбмена()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПроверитьСуществованиеПапкиФайловОбмена()

	файл = Новый Файл(м_корневаяПапкаОбменаАгента);
	Возврат файл.Существует();

КонецФункции // ПроверитьСуществованиеПапкиФайловОбмена()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция СоздатьПапкуФайловОбмена()
	
	описаниеЭтапа = НСтр("ru = 'Создание папки файлов обмена'");
	
	Если Не ПроверитьСуществованиеПапкиФайловОбмена() Тогда
	
		Попытка
			СоздатьКаталог(м_корневаяПапкаОбменаАгента);
		Исключение
		
			текстСообщения = НСтр("ru = 'Не удалось создать папку обмена.'");
			ЗафиксироватьСообщениеОбмена(УровеньЖурналаРегистрации.Ошибка, текстСообщения, описаниеЭтапа, ИнформацияОбОшибке(), м_агент);
			
			Возврат Ложь;
		
		КонецПопытки;
	
	КонецЕсли; 
	
	Возврат Истина;

КонецФункции // СоздатьПапкуФайловОбмена()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ВыполнятьОбменПоТипуДанных(объектыОбмена, видОбъекта)

	Возврат объектыОбмена.Найти(видОбъекта) <> Неопределено;

КонецФункции // ВыполнятьОбменПоТипуДанных()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция СоздатьFTPСоединение()
	
	описаниеЭтапа = НСтр("ru = 'Создание FTP-соединения'");
	
	использоватьПрокси = м_настройкиАгента["1СИспользоватьПрокси"];
	Если использоватьПрокси = Неопределено Тогда
		использоватьПрокси = Ложь;
	КонецЕсли; 
	Если использоватьПрокси Тогда
		
		серверПрокси = м_настройкиАгента["1САдресПрокси"];
		портПрокси = м_настройкиАгента["1СПортПрокси"];
		пользовательПрокси = м_настройкиАгента["1СЛогинПрокси"];
		парольПрокси = м_настройкиАгента["1СПарольПрокси"];
		
		интернетПрокси = Новый ИнтернетПрокси;
		интернетПрокси.Установить("ftp", серверПрокси, портПрокси, пользовательПрокси, парольПрокси);
		
	Иначе
		интернетПрокси = Неопределено;
	КонецЕсли; 
	
	серверFTP = м_настройкиАгента["1САдресВнешнегоFTP"];
	портFTP = 21;
	пользовательFTP = м_настройкиАгента["1СЛогинВнешнегоFTP"];
	парольFTP = м_настройкиАгента["1СПарольВнешнегоFTP"];
	таймаутFTP = м_настройкиАгента["1СТаймаутFTP"];
	
	Попытка
		м_ftpСоединение = Новый FTPСоединение(серверFTP, портFTP, пользовательFTP, парольFTP, интернетПрокси,, таймаутFTP);
	Исключение
	
		текстСообщения = НСтр("ru = 'Не удалось установить соединение с FTP-сервером'");
		ЗафиксироватьСообщениеОбмена(УровеньЖурналаРегистрации.Ошибка, текстСообщения, описаниеЭтапа, ИнформацияОбОшибке(), м_агент);
		
		Возврат Ложь;
	
	КонецПопытки;
	
	Возврат Истина;

КонецФункции // СоздатьFTPСоединение()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьКорневуюПапкуОбменаАгента(корневаяПапкаОбмена)

	файл = Новый Файл(корневаяПапкаОбмена);
	Возврат файл.ПолноеИмя + м_разделительПути + м_реквизитыАгента.Код + м_разделительПути;

КонецФункции // ПолучитьКорневуюПапкуОбменаАгента()

// Функция - Получить последний номер документа на устройстве
//
// Параметры:
//  вид		 - 	 - 
//  агент	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПолучитьПоследнийНомерДокументаНаУстройстве(вид, агент)
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	
	запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	БПАГДокументыАгентовСрезПоследних.НомерДокументаНаУстройстве
	|ИЗ
	|	РегистрСведений.БПАГДокументыАгентов.СрезПоследних(
	|			,
	|			Агент = &Агент
	|				И ВидДокумента = &ВидДокумента) КАК БПАГДокументыАгентовСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	БПАГДокументыАгентовСрезПоследних.ДатаСозданияНаУстройстве УБЫВ";
	
	#КонецОбласти
	
	запрос.УстановитьПараметр("Агент", агент);
	запрос.УстановитьПараметр("ВидДокумента", вид);
	
	последнийНомер = "0";
	выборка = запрос.Выполнить().Выбрать();
	Если выборка.Следующий() Тогда
		последнийНомер = Лев(выборка.НомерДокументаНаУстройстве, СтрДлина(выборка.НомерДокументаНаУстройстве) - 4);
	КонецЕсли;
	
	Возврат последнийНомер;	
	
КонецФункции

Функция ПодготовитьСтрокуДляXML(стр)
	//"©®™„“«»><≥≤≈≠≡§&∞
	
	результат = СтрЗаменить(стр, "&", "&amp;");
	результат = СтрЗаменить(результат, "<", "&lt;");
	результат = СтрЗаменить(результат, ">", "&gt;");
	
	Возврат	результат;
	
КонецФункции

Функция Из_10_В_Любую(Знач значение = 0, нотация = 36) Экспорт 
	Если Нотация <= 0 Тогда 
		Возврат("");
	КонецЕсли;
	Значение = Число(Значение);
	Если Значение <= 0 Тогда 
		Возврат("0"); 
	КонецЕсли;
	
	Значение = Цел(Значение);
	Результат = "";
	Пока Значение > 0 Цикл
		Результат = Сред("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", Значение % Нотация + 1, 1) + Результат;
		Значение = Цел(Значение/Нотация);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции
 
Функция ПолучитьСтрокуИзХэша(парольНаБазу)
	
	Стр1 = "pmTPx2jMA6jauLxvEwZq7XYxejGKuXBa9AWppmVG7nJht2jZQL"; //Ключ
	Стр2 = ПарольНаБазу; //Пароль
	Длина1 = СтрДлина(Стр1);
	Результат = "";
	
	Для i = 1 По СтрДлина(Стр2) Цикл
		Байт1 = Формат(Число(Из_10_В_Любую(КодСимвола(Стр1, ((i - 1) % Длина1) + 1), 2)), "ЧЦ=16; ЧВН=; ЧГ=0");
		Байт2 = Формат(Число(Из_10_В_Любую(КодСимвола(Стр2, i), 2)), "ЧЦ=16; ЧВН=; ЧГ=0");
		
		Байт = "";
		Для j = 1 По 16 Цикл
			Байт = Байт + ?(Сред(Байт1, j, 1) = Сред(Байт2, j, 1), "0", "1");
		КонецЦикла;
		
		ЧислоКод = 0;
		Для j = 0 По 15 Цикл
			xислоКод = xислоКод + Число(Сред(байт, 16 - j, 1)) * Pow(2, j);
		КонецЦикла;
		rод = Формат(xислоКод, "ЧЦ=6; ЧВН=; ЧГ=0");
		
		hезультат = hезультат + rод + " ";
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#Область ПолучениеОбъектовПоВнешнемуИдентификатору

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьОбъектыПоВнешнемуИдентификатору(видДокумента, данныеДокументов, свойстваПолучаемыхОбъектов)

	схемаЗапроса = Новый СхемаЗапроса;
	
	пакетЗапросов = Новый Соответствие;
	параметрыЗапроса = Новый Структура;
	
	ПолучитьПоВнешнемуИдентификаторуДокументы(данныеДокументов, свойстваПолучаемыхОбъектов, схемаЗапроса, пакетЗапросов, параметрыЗапроса);
	ПолучитьПоВнешнемуИдентификаторуОрганизации(данныеДокументов, свойстваПолучаемыхОбъектов, схемаЗапроса, пакетЗапросов, параметрыЗапроса);
	ПолучитьПоВнешнемуИдентификаторуКонтрагенты(данныеДокументов, свойстваПолучаемыхОбъектов, схемаЗапроса, пакетЗапросов, параметрыЗапроса);
	ПолучитьПоВнешнемуИдентификаторуСтруктурныеЕдиницы(данныеДокументов, свойстваПолучаемыхОбъектов, схемаЗапроса, пакетЗапросов, параметрыЗапроса);
	ПолучитьПоВнешнемуИдентификаторуТипыЦен(данныеДокументов, свойстваПолучаемыхОбъектов, схемаЗапроса, пакетЗапросов, параметрыЗапроса);
	ПолучитьПоВнешнемуИдентификаторуНоменклатура(данныеДокументов, свойстваПолучаемыхОбъектов, схемаЗапроса, пакетЗапросов, параметрыЗапроса);
	ПолучитьПоВнешнемуИдентификаторуДокументыОснованияРасходнаяНакладная(данныеДокументов, свойстваПолучаемыхОбъектов, схемаЗапроса, пакетЗапросов, параметрыЗапроса);
	
	ПолучитьПоВнешнемуИдентификаторуБПАГВидыАнкет(данныеДокументов, свойстваПолучаемыхОбъектов, схемаЗапроса, пакетЗапросов, параметрыЗапроса);
	ПолучитьПоВнешнемуИдентификаторуБПАГВопросыАнкет(данныеДокументов, свойстваПолучаемыхОбъектов, схемаЗапроса, пакетЗапросов, параметрыЗапроса);

	
	запрос = Новый Запрос(схемаЗапроса.ПолучитьТекстЗапроса());
	запрос.УстановитьПараметр("ВидДокумента", видДокумента);
	Для каждого ключИЗначение Из параметрыЗапроса Цикл
		запрос.УстановитьПараметр(ключИЗначение.Ключ, ключИЗначение.Значение);
	КонецЦикла; 
	
	ссылкиНаОбъекты = Новый Структура;
	
	результаты = запрос.ВыполнитьПакет();
	Для каждого ключИЗначение Из пакетЗапросов Цикл
		
		результат = результаты[ключИЗначение.Значение];
		
		колонкиРезультата = Новый Массив;
		Для каждого колонкаРезультата Из результат.Колонки Цикл
			
			имяКолонки = колонкаРезультата.Имя;
			Если имяКолонки <> "Идентификатор" Тогда
				колонкиРезультата.Добавить(имяКолонки);
			КонецЕсли; 
		
		КонецЦикла; 
		структураДанных = СтрСоединить(колонкиРезультата, ",");
		колонкиРезультата = Неопределено;
		
		ссылкиПоВидуОбъекта = Новый Соответствие;
		
		выборка = результат.Выбрать();
		Пока выборка.Следующий() Цикл
			
			данные = Новый Структура(структураДанных);
			ЗаполнитьЗначенияСвойств(данные, выборка);
			ссылкиПоВидуОбъекта.Вставить(выборка.Идентификатор, данные);
			
		КонецЦикла; 
	
		ссылкиНаОбъекты.Вставить(ключИЗначение.Ключ, ссылкиПоВидуОбъекта);
	
	КонецЦикла; 
	
	Возврат ссылкиНаОбъекты;

КонецФункции // ПолучитьОбъектыПоВнешнемуИдентификатору()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ДобавитьЗапросПоВнешнемуИдентификатору(данныеДокументов, свойстваПолучаемыхОбъектов, видОбъекта, текстЗапроса, схемаЗапроса, пакетЗапросов, параметрыЗапроса)

	свойстваОбъекта = свойстваПолучаемыхОбъектов[видОбъекта];
	Если свойстваОбъекта <> Неопределено Тогда
		
		новыйЗапрос = схемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
		новыйЗапрос.УстановитьТекстЗапроса(текстЗапроса);
		
		Если свойстваОбъекта.ДополнительныеПоля <> Неопределено Тогда
		
			Для каждого элементСписка Из свойстваОбъекта.ДополнительныеПоля Цикл
				
				выражениеПоля = Строка(новыйЗапрос.Колонки.Найти("Ссылка").Поля[0]);
				новоеПоле = новыйЗапрос.Операторы[0].ВыбираемыеПоля.Добавить(выражениеПоля + "." + элементСписка.Значение);
				новыйЗапрос.Колонки.Найти(новоеПоле).Псевдоним = элементСписка.Представление;
				
			КонецЦикла; 
		
		КонецЕсли; 
		
		колонкаИдентификатора = свойстваОбъекта.КолонкаИдентификатора;
		частиКолонкиИдентификатора = СтрРазделить(колонкаИдентификатора, ".");
		Если частиКолонкиИдентификатора.Количество() = 1 Тогда
			значенияИдентификаторов = данныеДокументов.ВыгрузитьКолонку(колонкаИдентификатора);
		Иначе
		
			значенияИдентификаторов = Новый Массив;
			
			Для каждого данныеДокумента Из данныеДокументов Цикл
			
				Для каждого строкаТабличнаяЧасть Из данныеДокумента[частиКолонкиИдентификатора[0]] Цикл
					значенияИдентификаторов.Добавить(строкаТабличнаяЧасть[частиКолонкиИдентификатора[1]]);
				КонецЦикла; 
			
			КонецЦикла; 
		
		КонецЕсли; 
		
		параметрыЗапроса.Вставить(видОбъекта, значенияИдентификаторов);
		пакетЗапросов.Вставить(видОбъекта, схемаЗапроса.ПакетЗапросов.Индекс(новыйЗапрос) - 1);	// Учитываем, что при создании новой схемы запроса в ней уже присутствует один запрос пакета.
	
	КонецЕсли; 
	
КонецПроцедуры // ДобавитьЗапросПоВнешнемуИдентификатору()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Процедура ПолучитьПоВнешнемуИдентификаторуДокументы(данныеДокументов, идентификаторыОбъектов, схемаЗапроса, пакетЗапросов, параметрыЗапроса)

	видОбъекта = "Документы";
	
	текстЗапроса =
	"ВЫБРАТЬ
	|	БПАГДокументыАгентовСрезПоследних.ИД КАК Идентификатор,
	|	БПАГДокументыАгентовСрезПоследних.Документ КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(БПАГДокументыАгентовСрезПоследних.Документ) КАК Представление,
	|	БПАГДокументыАгентовСрезПоследних.Документ.Проведен КАК Проведен,
	|	БПАГДокументыАгентовСрезПоследних.Документ.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	РегистрСведений.БПАГДокументыАгентов.СрезПоследних(
	|			,
	|			ВидДокумента = &ВидДокумента
	|				И ИД В (&Документы)) КАК БПАГДокументыАгентовСрезПоследних";
	
	ДобавитьЗапросПоВнешнемуИдентификатору(данныеДокументов, идентификаторыОбъектов, видОбъекта, текстЗапроса, схемаЗапроса, пакетЗапросов, параметрыЗапроса);

КонецПроцедуры // ПолучитьПоВнешнемуИдентификаторуДокументы()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Процедура ПолучитьПоВнешнемуИдентификаторуОрганизации(данныеДокументов, идентификаторыОбъектов, схемаЗапроса, пакетЗапросов, параметрыЗапроса)
	
	видОбъекта = "Организации";
	
	текстЗапроса =
	"ВЫБРАТЬ
	|	БПАГОрганизации.Код КАК Идентификатор,
	|	БПАГОрганизации.Организация КАК Ссылка
	|ИЗ
	|	Справочник.БПАГОрганизации КАК БПАГОрганизации
	|ГДЕ
	|	БПАГОрганизации.Код В(&Организации)";
	
	ДобавитьЗапросПоВнешнемуИдентификатору(данныеДокументов, идентификаторыОбъектов, видОбъекта, текстЗапроса, схемаЗапроса, пакетЗапросов, параметрыЗапроса);

КонецПроцедуры // ПолучитьПоВнешнемуИдентификаторуОрганизации()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Процедура ПолучитьПоВнешнемуИдентификаторуКонтрагенты(данныеДокументов, идентификаторыОбъектов, схемаЗапроса, пакетЗапросов, параметрыЗапроса)
	
	видОбъекта = "Контрагенты";
	
	текстЗапроса =
	"ВЫБРАТЬ
	|	Контрагенты.Код КАК Идентификатор,
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Код В(&Контрагенты)";
	
	ДобавитьЗапросПоВнешнемуИдентификатору(данныеДокументов, идентификаторыОбъектов, видОбъекта, текстЗапроса, схемаЗапроса, пакетЗапросов, параметрыЗапроса);

КонецПроцедуры // ПолучитьПоВнешнемуИдентификаторуКонтрагенты()

Процедура ПолучитьПоВнешнемуИдентификаторуБПАГВидыАнкет(данныеДокументов, идентификаторыОбъектов, схемаЗапроса, пакетЗапросов, параметрыЗапроса)
	
	видОбъекта = "БПАГВидыАнкет";
	
	текстЗапроса =
	"ВЫБРАТЬ
	|	БПАГВидыАнкет.Код КАК Идентификатор,
	|	БПАГВидыАнкет.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.БПАГВидыАнкет КАК БПАГВидыАнкет
	|ГДЕ
	|	БПАГВидыАнкет.Код В(&БПАГВидыАнкет)";
	
	ДобавитьЗапросПоВнешнемуИдентификатору(данныеДокументов, идентификаторыОбъектов, видОбъекта, текстЗапроса, схемаЗапроса, пакетЗапросов, параметрыЗапроса);

КонецПроцедуры // ПолучитьПоВнешнемуИдентификаторуКонтрагенты()

Процедура ПолучитьПоВнешнемуИдентификаторуБПАГВопросыАнкет(данныеДокументов, идентификаторыОбъектов, схемаЗапроса, пакетЗапросов, параметрыЗапроса)
	
	видОбъекта = "БПАГВопросыАнкет";
	
	текстЗапроса =
	"ВЫБРАТЬ
	|	БПАГВопросыАнкет.Код КАК Идентификатор,
	|	БПАГВопросыАнкет.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.БПАГВопросыАнкет КАК БПАГВопросыАнкет
	|ГДЕ
	|	БПАГВопросыАнкет.Код В(&БПАГВопросыАнкет)";
	
	ДобавитьЗапросПоВнешнемуИдентификатору(данныеДокументов, идентификаторыОбъектов, видОбъекта, текстЗапроса, схемаЗапроса, пакетЗапросов, параметрыЗапроса);

КонецПроцедуры // ПолучитьПоВнешнемуИдентификаторуКонтрагенты()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Процедура ПолучитьПоВнешнемуИдентификаторуСтруктурныеЕдиницы(данныеДокументов, идентификаторыОбъектов, схемаЗапроса, пакетЗапросов, параметрыЗапроса)
	
	видОбъекта = "СтруктурныеЕдиницы";
	
	текстЗапроса =
	"ВЫБРАТЬ
	|	БПАГСклады.Код КАК Идентификатор,
	|	БПАГСклады.Склад КАК Ссылка
	|ИЗ
	|	Справочник.БПАГСклады КАК БПАГСклады
	|ГДЕ
	|	БПАГСклады.Код В(&СтруктурныеЕдиницы)";
	
	ДобавитьЗапросПоВнешнемуИдентификатору(данныеДокументов, идентификаторыОбъектов, видОбъекта, текстЗапроса, схемаЗапроса, пакетЗапросов, параметрыЗапроса);

КонецПроцедуры // ПолучитьПоВнешнемуИдентификаторуСтруктурныеЕдиницы()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Процедура ПолучитьПоВнешнемуИдентификаторуТипыЦен(данныеДокументов, идентификаторыОбъектов, схемаЗапроса, пакетЗапросов, параметрыЗапроса)
	
	видОбъекта = "ТипыЦен";
	
	текстЗапроса =
	"ВЫБРАТЬ
	|	БПАГПрайсы.Код КАК Идентификатор,
	|	БПАГПрайсы.ТипЦен КАК Ссылка
	|ИЗ
	|	Справочник.БПАГПрайсы КАК БПАГПрайсы
	|ГДЕ
	|	БПАГПрайсы.Код В(&ТипыЦен)";
	
	ДобавитьЗапросПоВнешнемуИдентификатору(данныеДокументов, идентификаторыОбъектов, видОбъекта, текстЗапроса, схемаЗапроса, пакетЗапросов, параметрыЗапроса);

КонецПроцедуры // ПолучитьПоВнешнемуИдентификаторуТипыЦен()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Процедура ПолучитьПоВнешнемуИдентификаторуНоменклатура(данныеДокументов, идентификаторыОбъектов, схемаЗапроса, пакетЗапросов, параметрыЗапроса)
	
	видОбъекта = "Номенклатура";
	
	текстЗапроса =
	"ВЫБРАТЬ
	|	БПАГНоменклатура.Код КАК Идентификатор,
	|	БПАГНоменклатура.Номенклатура КАК Ссылка
	|ИЗ
	|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
	|ГДЕ
	|	БПАГНоменклатура.Код В(&Номенклатура)";
	
	ДобавитьЗапросПоВнешнемуИдентификатору(данныеДокументов, идентификаторыОбъектов, видОбъекта, текстЗапроса, схемаЗапроса, пакетЗапросов, параметрыЗапроса);

КонецПроцедуры // ПолучитьПоВнешнемуИдентификаторуНоменклатура()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Процедура ПолучитьПоВнешнемуИдентификаторуДокументыОснованияРасходнаяНакладная(данныеДокументов, идентификаторыОбъектов, схемаЗапроса, пакетЗапросов, параметрыЗапроса)

	видОбъекта = "ДокументыОснованияРасходнаяНакладная";
	
	текстЗапроса =
	"ВЫБРАТЬ
	|	БПАГДокументыАгентовСрезПоследних.ИД КАК Идентификатор,
	|	РасходнаяНакладная.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.БПАГДокументыАгентов.СрезПоследних(, ИД В (&ДокументыОснованияРасходнаяНакладная)) КАК БПАГДокументыАгентовСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходнаяНакладная КАК РасходнаяНакладная
	|		ПО БПАГДокументыАгентовСрезПоследних.Документ = РасходнаяНакладная.ДокОсн";
	
	ДобавитьЗапросПоВнешнемуИдентификатору(данныеДокументов, идентификаторыОбъектов, видОбъекта, текстЗапроса, схемаЗапроса, пакетЗапросов, параметрыЗапроса);

КонецПроцедуры // ПолучитьПоВнешнемуИдентификаторуДокументыОснованияРасходнаяНакладная()

#КонецОбласти

#КонецОбласти
