
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КомандаПодбора = Параметры.Команда;
	
	ТолькоЧтоОткрыт = Истина;
	
	// Отбор по родителю
	Если Параметры.Свойство("Поставщик") Тогда
		Поставщик = Параметры.Поставщик;
		ОтборПоПоставщику = Истина;
	Иначе
		ОтборПоПоставщику = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("Контрагент") Тогда
		Контрагент = Параметры.Контрагент;
		ОтборПоПокупателю = Истина;
	Иначе
		ОтборПоПокупателю = Ложь;
	КонецЕсли;
	
	// Показывать цены
	Если Параметры.Свойство("ТипЦен") Тогда
		ТипЦен = Параметры.ТипЦен;
		ИспользуютсяЦены = Истина;
	Иначе
		ИспользуютсяЦены = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("Подразделение") Тогда
		Подразделение = Параметры.Подразделение;
		ИспользуютсяЦены = Истина;
		ЕстьПодразделение = Истина;
	Иначе
		ИспользуютсяЦены = Ложь;
		ЕстьПодразделение = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("СтрокиДокумента") Тогда
		СтрокиДокумента.Загрузить(ЗначениеИзСтрокиВнутр(Параметры.СтрокиДокумента));
	КонецЕсли;
	
	//Настройки динамеческих списков
	ОбновитьДанныеФормыНаСервере();
	
КонецПроцедуры

&НаСервере
// Процедура обновляет данные формы "Подбор" на сервере
//
// Условием выполнения служит изменение пользовательских параметров отображения формы либо 
// изменение организации, структурной единицы
//
Процедура ОбновитьДанныеФормыНаСервере(ВыбраннаяГруппаНоменклатуры = Неопределено)

	СтруктураНастроек 			= ПолучитьНастройкиПодбора();
	
	// Видимость
	УстановитьВидимостьПолейДинамическогоСписка(СтруктураНастроек);

	// Тексты запросов
	УстановитьТекстЗапросаСпискаЗапасов(СтруктураНастроек);

КонецПроцедуры

&НаСервере
// Процедура считывает пользовательские настройки отображения данных
// в форме подбора
//
Функция ПолучитьНастройкиПодбора()
	
	// Проверка дополнительных ограничений ...
	
	Пользователь 			= Пользователи.ТекущийПользователь();
	
	Возврат Новый Структура("ПоказыватьЦены", ИСТИНА);
	
КонецФункции //ПолучитьНастройкиПодбора()

&НаСервере
Процедура УстановитьВидимостьПолейДинамическогоСписка(СтруктураНастроек)
	
	Элементы.СписокНоменклатурыЦена.Видимость = СтруктураНастроек.ПоказыватьЦены И ИспользуютсяЦены;
	Элементы.СписокНоменклатурыЦена.Заголовок = СтрЗаменить(ТипЦен.Наименование, "Категория", "Кат.");
	
	Элементы.СписокНоменклатурыГруппаИнформация.Видимость = ЕстьПодразделение;
 
КонецПроцедуры

&НаСервере
// Процедура устанавливает текст запроса для динамического списка "СписокЗапасов"
//
// Параметры:
// СтруктураНастроек - Структура, содержит значение пользовательских настроек
//
Процедура УстановитьТекстЗапросаСпискаЗапасов(СтруктураНастроек)

	ЗапросСЦенами 				= СтруктураНастроек.ПоказыватьЦены И ИспользуютсяЦены;
	ЗапросСИнформацией			= ЕстьПодразделение;
	
	СписокНоменклатуры.ПроизвольныйЗапрос = Истина;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СправочникНоменклатура.Наименование,
	               |	СправочникНоменклатура.ЭтоГруппа,
	               |	&УсловиеВыводаПоляКолво КАК Колво,
	               |	&УсловиеВыводаПоляЦена КАК Цена,
	               |	&УсловиеВыводаПоляЗакупка КАК Закупка,
	               |	&УсловиеВыводаПоляОстаток КАК Остаток,
	               |	&УсловиеВыводаПоляДефицит КАК Дефицит,
	               |	&УсловиеВыводаПоляИстория КАК История
	               |ИЗ
	               |	Справочник.Номенклатура КАК СправочникНоменклатура";
		

		
	Если ЗапросСЦенами Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ПериодЦен, ТипЦен = &ТипЦен И Подразделение = &Подразделение) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО СправочникНоменклатура.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			";
		
	КонецЕсли;
	
	Если ЗапросСИнформацией Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|       // Остатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах.Остатки(
		|				&ПериодЦен,
		|				Подразделение = &Подразделение
		|					И Номенклатура.Родитель.Поставщик = &Поставщик
		|					И Склад <> &СкладВозвратов) КАК ПартииТоваровНаСкладахОстатки
		|		ПО ПартииТоваровНаСкладахОстатки.Номенклатура = СправочникНоменклатура.Ссылка
		|
		|       // Закупки
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ПартииТоваровНаСкладахОбороты.Номенклатура КАК Номенклатура,
		|			СУММА(ВЫБОР
		|					КОГДА ПартииТоваровНаСкладахОбороты.Регистратор ССЫЛКА Документ.РасходнаяНакладная
		|						ТОГДА ЕСТЬNULL(ПартииТоваровНаСкладахОбороты.КоличествоРасход, 0)
		|					ИНАЧЕ 0
		|				КОНЕЦ) КАК Закупка
		|		ИЗ
		|			РегистрНакопления.ПартииТоваровНаСкладах.Обороты(
		|					&ДатаНачала,
		|					&ДатаОкончания,
		|					Авто,
		|					Подразделение = &Подразделение
		|						И Номенклатура.Родитель.Поставщик = &Поставщик
		|						И Склад <> &СкладВозвратов) КАК ПартииТоваровНаСкладахОбороты
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ПартииТоваровНаСкладахОбороты.Номенклатура) КАК Закупки
		|		ПО СправочникНоменклатура.Ссылка = Закупки.Номенклатура
		|
		|       // Дефицит
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЗаказыПокупателейОбороты.Номенклатура КАК Номенклатура,
		|			СУММА(ЗаказыПокупателейОбороты.ЗаказаноОборот - ЗаказыПокупателейОбороты.ОтгруженоОборот) КАК Дефицит
		|		ИЗ
		|			РегистрНакопления.ЗаказыПокупателей.Обороты(
		|					&ДатаНачала,
		|					&ДатаОкончания,
		|					Авто,
		|					Подразделение = &Подразделение
		|						И Номенклатура.Родитель.Поставщик = &Поставщик) КАК ЗаказыПокупателейОбороты
		|		ГДЕ
		|			ЗаказыПокупателейОбороты.ЗаказПокупателя.Статус = ИСТИНА
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ЗаказыПокупателейОбороты.Номенклатура) КАК ТаблицаДефицита
		|		ПО СправочникНоменклатура.Ссылка = ТаблицаДефицита.Номенклатура
		|			";
		
	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеВыводаПоляЦена", ?(ЗапросСЦенами, "
		|	ЦеныНоменклатурыСрезПоследних.Цена ", "0"));
		
	УсловиеВыводаПоляКолво = "0";	
	Если СтрокиДокумента.Количество() > 0 И 1=1 Тогда
		
		УсловиеВыводаПоляКолво = "ВЫБОР";
		
		Индекс = 0;
		
		Для Каждого СтрокаДокумента Из СтрокиДокумента Цикл
			
			Индекс = Индекс + 1;
			УсловиеВыводаПоляКолво = УсловиеВыводаПоляКолво + " КОГДА СправочникНоменклатура.Ссылка = &Номенклатура"+СокрЛП(Индекс)+" ТОГДА " + Формат(СтрокаДокумента.Количество, "ЧГ=");
			
		КонецЦикла;
		
		УсловиеВыводаПоляКолво = УсловиеВыводаПоляКолво + " ИНАЧЕ 0 КОНЕЦ";
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеВыводаПоляКолво", УсловиеВыводаПоляКолво);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеВыводаПоляЗакупка", ?(ЗапросСИнформацией, "
		|	ЕСТЬNULL(Закупки.Закупка, 0)", "0"));
	
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеВыводаПоляОстаток", ?(ЗапросСИнформацией, "
		|	ЕСТЬNULL(ПартииТоваровНаСкладахОстатки.КоличествоОстаток, 0)", "0"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеВыводаПоляДефицит", ?(ЗапросСИнформацией, "
		|	ЕСТЬNULL(ТаблицаДефицита.Дефицит, 0)", "0"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеВыводаПоляИстория", ?(1=2, "
		|	.Колво ", """"""));
	
		
	ТекстЗапроса = ТекстЗапроса + "
		|
		|ГДЕ
		|	СправочникНоменклатура.ЭтоГруппа = ЛОЖЬ
		|   И СправочникНоменклатура.НеАктуально = ЛОЖЬ
		|	И ВЫБОР
		|			КОГДА &ОтборПоПоставщику
		|					И НЕ &Поставщик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|				ТОГДА СправочникНоменклатура.Ссылка.Родитель.Поставщик = (&Поставщик)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
		
		
	// Обновим текст запроса
	Если НЕ СписокНоменклатуры.ТекстЗапроса = ТекстЗапроса Тогда
		
		СписокНоменклатуры.ТекстЗапроса = ТекстЗапроса;
		
	КонецЕсли;
		
	// Параметры запроса
	УстановитьПараметрДинамическогоСписка(СписокНоменклатуры, "ПериодЦен", 		Новый Граница(КонецДня(ДатаОстатков),ВидГраницы.Включая));
	УстановитьПараметрДинамическогоСписка(СписокНоменклатуры, "ДатаНачала", 	Период.ДатаНачала);
	УстановитьПараметрДинамическогоСписка(СписокНоменклатуры, "ДатаОкончания", 	Новый Граница(КонецДня(Период.ДатаОкончания),ВидГраницы.Включая));
	
	СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("ТипЦен", 			ТипЦен);
	СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("Подразделение", 	Подразделение);
	
	СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("Поставщик", 			Поставщик);
	СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("ОтборПоПоставщику", 	ОтборПоПоставщику);
	
	СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("СкладВозвратов",	Константы.СкладВозвратов.Получить());
	
	Если СтрокиДокумента.Количество() > 0 Тогда
		Индекс = 0;
		Для Каждого СтрокаДокумента Из СтрокиДокумента Цикл
			
			Индекс = Индекс + 1;
			УстановитьПараметрДинамическогоСписка(СписокНоменклатуры, "Номенклатура"+СокрЛП(Индекс), 		СтрокаДокумента.Номенклатура);
			
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
// Устанавливает значение параметра динамического списка на сервере
//
// Параметры:
// ДинамическийСписок - динамический список, для которого устанавливается параметр
// Имя - имя параметра динамического списка
// ЗначениеПараметра - значение устанавливаемого параметра
//
Процедура УстановитьПараметрДинамическогоСписка(ДинамическийСписок, Имя, ЗначениеПараметра)
	
	Если НЕ ДинамическийСписок.Параметры.Элементы.Найти(Имя) = Неопределено Тогда
	
		ДинамическийСписок.Параметры.УстановитьЗначениеПараметра(Имя, ЗначениеПараметра);
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрДинамическогоСписка()

&НаСервере
Процедура ОбновитьСтрокиДокумента(Номенклатура, Количество)
	
	Отбор = Новый Структура();
	Отбор.Вставить("Номенклатура",Номенклатура);
	Строки = СтрокиДокумента.НайтиСтроки(Отбор);
	Если Строки.Количество() > 0 Тогда
		Строки[0].Количество = Количество;
	Иначе
		НоваяСтрока = СтрокиДокумента.Добавить();
		НоваяСтрока.Номенклатура = Номенклатура;
		НоваяСтрока.Количество = Количество;
	КонецЕсли;
	
	//ОбновитьДанныеФормыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТипЗначения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный));
	
	СтруктураПодбора = Новый Структура();
	СтруктураПодбора.Вставить("Команда",      КомандаПодбора);
	СтруктураПодбора.Вставить("Номенклатура", Значение);

	
	Количество = Элементы.СписокНоменклатуры.ТекущиеДанные.Колво;
	КоличествоНакладная = 1;
	
	Если 1=2 Тогда
		
		
	Иначе
		Если НЕ ВвестиЗначение(Количество, "Введите количество", ТипЗначения) Тогда
			Возврат;
		КонецЕсли;	
	
		СтруктураПодбора.Вставить("Количество",   Количество);
		
		Элементы.СписокНоменклатуры.ТекущиеДанные.Колво = Количество;
		
		ОбновитьСтрокиДокумента(Значение, Количество);
		
		ЭтаФорма.ОбновитьОтображениеДанных();
		
		
	КонецЕсли;
	
	ПолучитьДанныеНоменклатуры(СтруктураПодбора);
	
	ОповеститьОВыборе(СтруктураПодбора);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьДанныеНоменклатуры(СтруктураДанных)
	СтруктураДанных.Вставить("ЕдиницаИзмерения",			СтруктураДанных.Номенклатура.ЕдиницаИзмерения);
КонецПроцедуры //

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	Элементы.СписокНоменклатуры.ТекущаяСтрока = СтрокаПоиска;
	//СтрокаПоиска = 0;
КонецПроцедуры

&НаКлиенте
// Процедура обновляет дерево номенклатуры.
//
Процедура ОбновитьСписокНоменклатуры()
		
	//СписокЗапасов.Параметры.УстановитьЗначениеПараметра("СтруктурнаяЕдиница", Склад);
	СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("ПериодЦен", КонецДня(ДатаОстатков));
	СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("ДатаНачала", Период.ДатаНачала);
	СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", Период.ДатаОкончания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ДатаОстатков = Период.ДатаОкончания;
	//ОбновитьСписокНоменклатуры();
	ОбновитьДанныеФормыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДатаОстатковПриИзменении(Элемент)
	//ОбновитьСписокНоменклатуры();
	ОбновитьДанныеФормыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	//Если Настройки.Получить("ОтборПоПоставщику") = Неопределено Тогда
	//	ОтборПоПоставщику = Истина;
	//КонецЕсли;
	//
	//Если Настройки.Получить("ДатаОстатков") = Неопределено Тогда
	//	ДатаОстатков = ТекущаяДата();
	//КонецЕсли;
	//
	//Если Настройки.Получить("Период") = Неопределено Тогда
	//	Период.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
	//	Период.ДатаНачала = НачалоДня(ТекущаяДата() - 7*24*60*60);
	//	Период.ДатаОкончания = ТекущаяДата();
	//КонецЕсли;
	
	//Настройки динамеческих списков
	//ОбновитьДанныеФормыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьСписок(Команда)
	ОбновитьДанныеФормыНаСервере();
КонецПроцедуры
