&НаСервере
Перем мДерево, мУжеВСписке;

&НаСервере
Перем мКэшРеквизитовДокумента;

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
// Процедура вывода дерева структуры подчиненности документа.
//
Процедура ВывестиДеревоДокументов()
	
	Попытка
		ДеревоДокументов.ПолучитьЭлементы().Очистить();
		мДерево = ДеревоДокументов;	
		мУжеВСписке = Новый Соответствие;
		мКэшРеквизитовДокумента = Новый Соответствие;
		
		ВывестиРодительскиеДокументы(ДокументСсылка);	
		
		ВывестиПодчиненныеДокументы(мДерево);
		
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
// Процедура выполняет вывод родительских документов.
//
Процедура ВывестиРодительскиеДокументы(ДокументСсылка)
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	СписокРеквизитов = Новый СписокЗначений;
	
	Для Каждого Реквизит ИЗ МетаданныеДокумента.Реквизиты Цикл
		ТипыРеквизита = Реквизит.Тип.Типы();
		Для Каждого ТекущийТип ИЗ ТипыРеквизита Цикл
			МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);
			
			Если МетаданныеРеквизита<>Неопределено И Метаданные.Документы.Содержит(МетаданныеРеквизита) 
				И ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
				Попытка
					ЗначениеРеквизита = ДокументСсылка[Реквизит.Имя];
				Исключение
					Прервать;
				КонецПопытки;
				ЕСли ЗначениеРеквизита<>Неопределено И НЕ ЗначениеРеквизита.Пустая() И ТипЗнч(ЗначениеРеквизита) = ТекущийТип 
					И мУжеВСписке[ЗначениеРеквизита] = Неопределено И СписокРеквизитов.НайтиПоЗначению(ДокументСсылка[Реквизит.Имя]) = Неопределено Тогда
					Попытка
						СписокРеквизитов.Добавить(ЗначениеРеквизита,Формат(ЗначениеРеквизита.Дата,"ДФ=yyyyMMddЧЧММсс"));
					Исключение
						ОтладкаТекстОшибки = ОписаниеОшибки();
					КонецПопытки;	
				КонецЕсли;
			КонецЕсли;			
			
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ТЧ Из МетаданныеДокумента.ТабличныеЧасти Цикл
		СтрРеквизитов = "";
		
		Попытка
			СодержимоеТЧ = ДокументСсылка[ТЧ.Имя].Выгрузить();
		Исключение
			Прервать;
		КонецПопытки;
		
		Для Каждого Реквизит ИЗ ТЧ.Реквизиты Цикл
			ТипыРеквизита = Реквизит.Тип.Типы();
			Для Каждого ТекущийТип ИЗ ТипыРеквизита Цикл
				МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);				
				Если МетаданныеРеквизита<>Неопределено И Метаданные.Документы.Содержит(МетаданныеРеквизита) 
					И ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
					СтрРеквизитов = СтрРеквизитов + ?(СтрРеквизитов = "", "", ", ") + Реквизит.Имя;
					Прервать;
				КонецЕсли;						
			КонецЦикла;
		КонецЦикла;
		
		СодержимоеТЧ.Свернуть(СтрРеквизитов);
		Для Каждого КолонкаТЧ ИЗ СодержимоеТЧ.Колонки Цикл
			Для Каждого СтрокаТЧ ИЗ СодержимоеТЧ Цикл
				Попытка
					ЗначениеРеквизита = СтрокаТЧ[КолонкаТЧ.Имя];
				Исключение
					Продолжить;
				КонецПопытки;
				МетаданныеЗначения = Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеРеквизита));
				Если МетаданныеЗначения = Неопределено Тогда
					// базовый тип
					Продолжить;
				КонецЕсли;
				
				ЕСли ЗначениеРеквизита<>Неопределено И НЕ ЗначениеРеквизита.Пустая()
					И Метаданные.Документы.Содержит(МетаданныеЗначения)
					И мУжеВСписке[ЗначениеРеквизита] = Неопределено Тогда
					Если СписокРеквизитов.НайтиПоЗначению(ЗначениеРеквизита) = Неопределено Тогда
						Попытка
							СписокРеквизитов.Добавить(ЗначениеРеквизита,Формат(ЗначениеРеквизита.Дата,"ДФ=yyyyMMddЧЧММсс"));
						Исключение
							ОтладкаТекстОшибки = ОписаниеОшибки();
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;		
	КонецЦикла;
	СписокРеквизитов.СортироватьПоПредставлению();
	мУжеВСписке.Вставить(ДокументСсылка, Истина);
	
	Если СписокРеквизитов.Количество() = 1 Тогда
		ВывестиРодительскиеДокументы(СписокРеквизитов[0].Значение);
	ИначеЕсли СписокРеквизитов.Количество() > 1 Тогда
		ВывестиБезРодителей(СписокРеквизитов);		
	КонецЕсли;
	
	
	СтрокаДерева = мДерево.ПолучитьЭлементы().Добавить();
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка, #СозданАвтоматически, Комментарий, Проведен, ПометкаУдаления, Представление, Подразделение, #Валюта, #Сумма, """ + МетаданныеДокумента.Имя + """ КАК Метаданные
	| ИЗ Документ."+МетаданныеДокумента.Имя + " ГДЕ Ссылка = &Ссылка");
	
	Если МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Валюта", "ВалютаДокумента КАК ВалютаДокумента");
	ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("ВалютаДенежныхСредств") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Валюта", "ВалютаДенежныхСредств КАК ВалютаДокумента");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Валюта", "NULL КАК ВалютаДокумента");
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("СуммаДокумента") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Сумма", "СуммаДокумента КАК СуммаДокумента");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Сумма", "0 КАК СуммаДокумента");
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("СозданАвтоматически") <> Неопределено Тогда
		запрос.Текст = СтрЗаменить(Запрос.Текст, "#СозданАвтоматически", "СозданАвтоматически КАК СозданАвтоматически");
	Иначе
		запрос.Текст = СтрЗаменить(Запрос.Текст, "#СозданАвтоматически", "ЛОЖЬ КАК СозданАвтоматически");
	КонецЕсли;
	
	запрос.УстановитьПараметр("Ссылка", документСсылка);
	
	выборка  = Запрос.Выполнить().Выбрать();
	ЕСли выборка.Следующий() Тогда		
		
		строкаДерева.Ссылка					= выборка.Ссылка;
		строкаДерева.ДокументПредставление 	= выборка.Представление;
		строкаДерева.ВидДокумента 			= выборка.Метаданные;
		строкаДерева.ВалютаДокумента 		= выборка.ВалютаДокумента;
		строкаДерева.СуммаДокумента 		= выборка.СуммаДокумента;
		строкаДерева.Проведен 				= выборка.Проведен;
		строкаДерева.Подразделение 			= выборка.Подразделение;
		строкаДерева.ПометкаУдаления 		= выборка.ПометкаУдаления;
		строкаДерева.Комментарий	 		= выборка.Комментарий;
		строкаДерева.СозданАвтоматически 	= выборка.СозданАвтоматически;
		строкаДерева.Картинка 				= НомерКартинки(строкаДерева);
		строкаДерева.ПроведениеРазрешено 	= выборка.Ссылка.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить;
		
	Иначе
		
		строкаДерева.Ссылка					= документСсылка;
		строкаДерева.ДокументПредставление 	= Строка(документСсылка);
		строкаДерева.ВалютаДокумента 		= выборка.ВалютаДокумента;
		строкаДерева.СуммаДокумента 		= выборка.СуммаДокумента;
		строкаДерева.Проведен 				= выборка.Проведен;
		строкаДерева.Подразделение 			= выборка.Подразделение;
		строкаДерева.ПометкаУдаления 		= выборка.ПометкаУдаления;
		строкаДерева.Комментарий 			= выборка.Комментарий;
		строкаДерева.СозданАвтоматически 	= выборка.СозданАвтоматически;
		строкаДерева.Картинка 				= НомерКартинки(строкаДерева);
		строкаДерева.ПроведениеРазрешено 	= ДокументСсылка.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить;
		
	КонецЕсли;
	
	мДерево = СтрокаДерева;
	
КонецПроцедуры

&НаСервере
// Процедура осуществляет вывод родительских документов с ограничением по уровню в дереве.
//
Процедура ВывестиБезРодителей(СписокДокументов)
	
	Для Каждого ЭлементСписка Из СписокДокументов Цикл
		
		МетаданныеДокумента = ЭлементСписка.Значение.Метаданные();
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка, #СозданАвтоматически, Комментарий, Проведен, ПометкаУдаления, Представление, Подразделение, #Валюта, #Сумма, """ + МетаданныеДокумента.Имя + """ КАК Метаданные
		| ИЗ Документ."+МетаданныеДокумента.Имя + " ГДЕ Ссылка = &Ссылка");
		
		Если МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Валюта", "ВалютаДокумента КАК ВалютаДокумента");
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("ВалютаДенежныхСредств") <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Валюта", "ВалютаДенежныхСредств КАК ВалютаДокумента");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Валюта", "NULL КАК ВалютаДокумента");
		КонецЕсли;
		
		Если МетаданныеДокумента.Реквизиты.Найти("СуммаДокумента") <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Сумма", "СуммаДокумента КАК СуммаДокумента");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Сумма", "0 КАК СуммаДокумента");
		КонецЕсли;
		
		Если МетаданныеДокумента.Реквизиты.Найти("СозданАвтоматически") <> Неопределено Тогда
			запрос.Текст = СтрЗаменить(Запрос.Текст, "#СозданАвтоматически", "СозданАвтоматически КАК СозданАвтоматически");
		Иначе
			запрос.Текст = СтрЗаменить(Запрос.Текст, "#СозданАвтоматически", "ЛОЖЬ КАК СозданАвтоматически");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Ссылка", ЭлементСписка.Значение);
		
		выборка  = запрос.Выполнить().Выбрать();
		ЕСли выборка.Следующий() Тогда
			
			Если мУжеВСписке[Выборка.Ссылка] = Неопределено Тогда
				
				СтрокаДерева = мДерево.ПолучитьЭлементы().Добавить();
				
				строкаДерева.Ссылка				= выборка.Ссылка;
				строкаДерева.ВалютаДокумента	= выборка.ВалютаДокумента;
				строкаДерева.СуммаДокумента		= выборка.СуммаДокумента;
				строкаДерева.ДокументПредставление = выборка.Представление;
				строкаДерева.ВидДокумента 		= выборка.Метаданные;
				строкаДерева.Проведен 			= выборка.Проведен;
				строкаДерева.Подразделение 		= выборка.Подразделение;
				строкаДерева.ПометкаУдаления 	= выборка.ПометкаУдаления;			
				строкаДерева.ОграничениеПоРодителям = Истина;
				строкаДерева.Комментарий 		=  выборка.Комментарий;
				строкаДерева.СозданАвтоматически =  выборка.СозданАвтоматически;
				строкаДерева.Картинка 			= НомерКартинки(строкаДерева);
				
				мУжеВСписке.Вставить(Выборка.Ссылка, Истина);
				
			КонецЕсли;
			
		КонецЕсли;		
		
	КонецЦикла;
	
	мДерево = СтрокаДерева;
	
КонецПроцедуры

&НаСервере
// Процедура осуществляет вывод подчиненных документов.
//
Процедура ВывестиПодчиненныеДокументы(СтрокаДерева)
	
	ТекущийДокумент = СтрокаДерева.Ссылка;	
	Таблица = ПолучитьСписокПодчиненныхДокументов(ТекущийДокумент);	
	КэшПоТипамДокументов = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы ИЗ Таблица Цикл
		МетаданныеДокумента = СтрокаТаблицы.Ссылка.Метаданные();
		Если НЕ ПравоДоступа("Чтение", МетаданныеДокумента) Тогда
			Продолжить;
		КонецЕсли;			
		ИмяДокумента = МетаданныеДокумента.Имя;
		СинонимДокумента = МетаданныеДокумента.Синоним;
		
		ДополнитьКэшМетаданных(МетаданныеДокумента, ИмяДокумента);
		
		СтруктураТипа = КэшПоТипамДокументов[ИмяДокумента];
		Если СтруктураТипа = Неопределено Тогда
			СтруктураТипа = Новый Структура("Синоним, МассивСсылок", СинонимДокумента, Новый Массив);
			КэшПоТипамДокументов.Вставить(ИмяДокумента, СтруктураТипа);
		КонецЕсли;
		СтруктураТипа.МассивСсылок.Добавить(СтрокаТаблицы.Ссылка);		
	КонецЦикла;
	
	ЕСли КэшПоТипамДокументов.Количество() = 0 ТОгда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаНачало = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ (";
	ТекстЗапросаКонец = ") КАК ПодчиненныеДокументы УПОРЯДОЧИТЬ ПО ПодчиненныеДокументы.Дата";
	Запрос = Новый Запрос;
	Для Каждого КлючИЗначение ИЗ КэшПоТипамДокументов Цикл
		Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "", "
		|ВЫБРАТЬ ", "
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ") + "
		|Дата, Ссылка, Проведен, СозданАвтоматически, Комментарий, ПометкаУдаления, Представление, Подразделение,  """ + КлючИЗначение.Ключ + """ КАК Метаданные, #Валюта, #Сумма 
		|ИЗ Документ." + КлючИЗначение.Ключ + "
		|ГДЕ Ссылка В (&" + КлючИЗначение.Ключ + ")";
		
		Если мКэшРеквизитовДокумента[КлючИЗначение.Ключ]["ВалютаДокумента"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Валюта", "ВалютаДокумента КАК ВалютаДокумента");
		ИначеЕсли мКэшРеквизитовДокумента[КлючИЗначение.Ключ]["ВалютаДенежныхСредств"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Валюта", "ВалютаДенежныхСредств КАК ВалютаДокумента");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Валюта", "NULL КАК ВалютаДокумента");
		КонецЕсли;
		
		Если мКэшРеквизитовДокумента[КлючИЗначение.Ключ]["СуммаДокумента"] Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Сумма", "СуммаДокумента КАК СуммаДокумента");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Сумма", "0 КАК СуммаДокумента");
		КонецЕсли;			
		
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение.МассивСсылок);		
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапросаНачало + Запрос.Текст + ТекстЗапросаКонец;
	
	выборка = запрос.Выполнить().Выбрать();	
	Пока выборка.Следующий() Цикл
		
		Если мУжеВСписке[Выборка.Ссылка] = Неопределено Тогда
			
			новаяСтрока 						= СтрокаДерева.ПолучитьЭлементы().Добавить();
			новаяСтрока.Ссылка 					= выборка.Ссылка;
			новаяСтрока.СуммаДокумента 			= выборка.СуммаДокумента;
			новаяСтрока.ВалютаДокумента 		= выборка.ВалютаДокумента;
			новаяСтрока.ДокументПредставление 	= выборка.Представление;
			новаяСтрока.Проведен 				= выборка.Проведен;
			новаяСтрока.Подразделение 			= выборка.Подразделение;
			новаяСтрока.ПометкаУдаления 		= выборка.ПометкаУдаления;
			новаяСтрока.Комментарий				= выборка.Комментарий;
			новаяСтрока.СозданАвтоматически		= выборка.СозданАвтоматически;
			новаяСтрока.Картинка 				= НомерКартинки(НоваяСтрока);
			
			мУжеВСписке.Вставить(Выборка.Ссылка, Истина);
			ВывестиПодчиненныеДокументы(НоваяСтрока);
			новаяСтрока.ВидДокумента = Выборка.Метаданные;
			новаяСтрока.ПроведениеРазрешено = Выборка.Ссылка.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить;
			
		КонецЕсли;
		
	КонецЦикла;		
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняет открытие формы текущего документа.
//                                                         
Процедура ОткрытьФормуДокумента()
	
	Попытка
		
		СтруктураОткрытия = Новый Структура("Ключ", Элементы.ДеревоДокументов.ТекущиеДанные.Ссылка);
		Форма = ПолучитьФорму("Документ." + Элементы.ДеревоДокументов.ТекущиеДанные.ВидДокумента + ".ФормаОбъекта", СтруктураОткрытия);
		
		Если Элементы.ДеревоДокументов.ТекущиеДанные.Ссылка = ДокументСсылка И Форма.Открыта() Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Документ уже открыт!'");
			Сообщение.Сообщить();
		КонецЕсли;
		
		Форма.Открыть();
		
	Исключение
		
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ДокументСсылка, ОписаниеОшибки());
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
// Функция выполняет поиск подчиненных документов текущего документа.
//
Функция ПолучитьСписокПодчиненныхДокументов(ДокументОснование) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	
	Для Каждого ЭлементСостава ИЗ Метаданные.КритерииОтбора.СтруктураПодчиненности.Состав Цикл
		
		ПутьКДанным = ЭлементСостава.ПолноеИмя();
		СтруктураПутьКДанным = РазобратьПутьКОбъектуМетаданных(ПутьКДанным);
		
		ЕСли НЕ ПравоДоступа("Чтение", СтруктураПутьКДанным.Метаданные) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОбъекта = СтруктураПутьКДанным.ТипОбъекта + "." + СтруктураПутьКДанным.ВидОбъекта;
		
		ТекущаяСтрокаГДЕ = "ГДЕ " + СтруктураПутьКДанным.ВидОбъекта + "." +СтруктураПутьКДанным.ИмяРеквизита + " = &ЗначениеКритерияОтбора";
		
		ИмяТЧ = Лев(СтруктураПутьКДанным.ИмяРеквизита, Найти(СтруктураПутьКДанным.ИмяРеквизита, ".")-1);
		ИмяРеквизита = Лев(СтруктураПутьКДанным.ИмяРеквизита, Найти(СтруктураПутьКДанным.ИмяРеквизита, ".")-1);
		ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ОБЪЕДИНИТЬ
		|ВЫБРАТЬ") + "
		|" + СтруктураПутьКДанным.ВидОбъекта +".Ссылка ИЗ " + ИмяОбъекта + "." + СтруктураПутьКДанным.ИмяТаблЧасти + " КАК " + СтруктураПутьКДанным.ВидОбъекта + "
		|" + СтрЗаменить(ТекущаяСтрокаГДЕ, "..", ".") + "
		|";
		
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", ДокументОснование);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
// Функция возвращает путь к объекту метаданных
// ТипОбъектаМетаданных.ИмяДокумента.ТабличнаяЧасть.ИмяТабличнойЧасти.Реквизит.ИмяРеквизита.
// ТипОбъектаМетаданных должен быть Справочник или Документ.
//
// Параметры:
//  ПутьКДанным - строка.
//
// Возвращаемое значение:
//  Структура - путь к объекту метаданных
//
Функция РазобратьПутьКОбъектуМетаданных(ПутьКДанным) Экспорт
	
	Структура = Новый Структура;
	
	СоответствиеИмен = Новый Массив();
	СоответствиеИмен.Добавить("ТипОбъекта");
	СоответствиеИмен.Добавить("ВидОбъекта");
	СоответствиеИмен.Добавить("ПутьКДанным");
	СоответствиеИмен.Добавить("ИмяТаблЧасти");
	СоответствиеИмен.Добавить("ИмяРеквизита");
	
	Для индекс = 1 по 3 Цикл
		
		Точка = Найти(ПутьКДанным, ".");
		ТекущееЗначение = Лев(ПутьКДанным, Точка-1);
		Структура.Вставить(СоответствиеИмен[индекс-1], ТекущееЗначение);
		ПутьКДанным = Сред(ПутьКДанным, Точка+1);
		
	КонецЦикла;
	
	ПутьКДанным = СтрЗаменить(ПутьКДанным, "Реквизит.", "");
	
	Если Структура.ПутьКДанным = "ТабличнаяЧасть" Тогда
		
		Для индекс = 4 по 5  Цикл 
			
			Точка = Найти(ПутьКДанным, ".");
			Если Точка = 0 Тогда
				ТекущееЗначение = ПутьКДанным;
			Иначе
				ТекущееЗначение = Лев(ПутьКДанным, Точка-1);
			КонецЕсли;
			
			Структура.Вставить(СоответствиеИмен[индекс-1], ТекущееЗначение);
			ПутьКДанным = Сред(ПутьКДанным,  Точка+1);
			
		КонецЦикла;
		
	Иначе
		
		Структура.Вставить(СоответствиеИмен[3], "");
		Структура.Вставить(СоответствиеИмен[4], ПутьКДанным);
		
	КонецЕсли;
	
	Если Структура.ТипОбъекта = "Документ" Тогда
		Структура.Вставить("Метаданные", Метаданные.Документы[Структура.ВидОбъекта]);
	Иначе
		Структура.Вставить("Метаданные", Метаданные.Справочники[Структура.ВидОбъекта]);
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции // РазобратьПутьКОбъектуМетаданных()

&НаКлиенте
// Процедура закрывает форму с предупреждением.
//
Процедура ЗакрытьФормуСПредупреждением(ТекстПредупреждения)
	
	ВызватьИсключение ТекстПредупреждения;
	
КонецПроцедуры

&НаСервере
// Процедура дополняет кэш метаданных.
//
Процедура ДополнитьКэшМетаданных(МетаданныеДокумента, ИмяДокумента)
	
	РеквизитыДокумента = мКэшРеквизитовДокумента[ИмяДокумента];
	Если РеквизитыДокумента = Неопределено Тогда
		
		РеквизитыДокумента = Новый Соответствие;		
		РеквизитыДокумента.Вставить("ВалютаДокумента", МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено);		
		РеквизитыДокумента.Вставить("ВалютаДенежныхСредств", МетаданныеДокумента.Реквизиты.Найти("ВалютаДенежныхСредств") <> Неопределено);		
		РеквизитыДокумента.Вставить("СуммаДокумента", МетаданныеДокумента.Реквизиты.Найти("СуммаДокумента") <> Неопределено);		
		РеквизитыДокумента.Вставить("СозданАвтоматически", МетаданныеДокумента.Реквизиты.Найти("СозданАвтоматически") <> Неопределено);		
		
		мКэшРеквизитовДокумента.Вставить(ИмяДокумента, РеквизитыДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Функция проверяет доступность изменяемого документа.
//
Функция ОсновнойДокументЕщеДоступен()
	
	ИмяТекущегоДокумента = ДокументСсылка.Метаданные().Имя;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ Представление ИЗ Документ." + ИмяТекущегоДокумента + " ГДЕ Ссылка = &ТекущийДокумент";
	Запрос.УстановитьПараметр("ТекущийДокумент", ДокументСсылка);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Функция возвращает номер картинки.
//
Функция НомерКартинки(СтрокаДерева)
	
	Если СтрокаДерева.ПометкаУдаления Тогда
		Возврат 2;
	ИначеЕсли СтрокаДерева.Проведен Тогда
		Возврат 1;
	Иначе	
		Возврат 0;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
// Процедура обновляет доступность кнопок Провести и Отменить проведение.
//
Процедура ОбновитьДоступностьКнопок()
	
	Элементы.Провести.        Доступность = Элементы.ДеревоДокументов.ТекущиеДанные.ПроведениеРазрешено;
	Элементы.ОтменаПроведения.Доступность = Элементы.ДеревоДокументов.ТекущиеДанные.ПроведениеРазрешено;
	
КонецПроцедуры 

&НаСервере
// Функция осуществляет проведение выбранного документа.
//
Функция ПровестиСервер(ДокументСсылка)
	
	Объект = ДокументСсылка.ПолучитьОбъект();
	Попытка
		Объект.Заблокировать();
		Объект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		Объект.Разблокировать();
	Исключение
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Невозможно заблокировать документ.'");
		Сообщение.Сообщить();
		
		Возврат Неопределено;
		
	КонецПопытки; 
	
	Возврат Объект.Проведен;
	
КонецФункции

&НаСервере
// Функция осуществляет отмену проведения выбранного документа.
//
Функция ОтменаПроведенияСервер(ДокументСсылка)
	
	Объект = ДокументСсылка.ПолучитьОбъект();
	Попытка
		Объект.Заблокировать();
		Объект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Объект.Разблокировать();
	Исключение
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Невозможно заблокировать документ.'");
		Сообщение.Сообщить();
		
		Возврат Неопределено;
		
	КонецПопытки; 
	
	Возврат Объект.Проведен;
	
КонецФункции

&НаСервере
// Функция устанавливает пометку на удаление выбранного документа.
//
Функция УстановитьПометкуУдаленияСервер(ДокументСсылка)
	
	Объект = ДокументСсылка.ПолучитьОбъект();
	Попытка
		Объект.Заблокировать();
		Объект.УстановитьПометкуУдаления(НЕ Объект.ПометкаУдаления);
		Объект.Разблокировать();
	Исключение
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Невозможно заблокировать документ.'");
		Сообщение.Сообщить();
		
		Возврат Неопределено;
		
	КонецПопытки; 
	
	Возврат Объект.ПометкаУдаления;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
// Процедура - обработчик события ПриСозданииНаСервере формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.ДокументСсылка = Неопределено ИЛИ Параметры.ДокументСсылка.Пустая() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДокументСсылка = Параметры.ДокументСсылка; 
	
	ВывестиДеревоДокументов();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии(Отказ)
	
	Элементы.ДеревоДокументов.ТекущаяСтрока = ДеревоДокументов.ПолучитьЭлементы()[0];
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
// Процедура - обработчик события Перед началом изменения табличного поля ДеревоДокументов.
//
Процедура ДеревоДокументовПередНачаломИзменения(Элемент, Отказ)	
	ОткрытьФормуДокумента();
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик действия Открыть.
//
Процедура ОткрытьДокумент(Команда)
	
	Если Элементы.ДеревоДокументов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуДокумента();	 
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик действия Обновить.
//
Процедура Обновить(Команда)
	
	Если ОсновнойДокументЕщеДоступен() Тогда
		ВывестиДеревоДокументов(); 
	Иначе
		ЗакрытьФормуСПредупреждением(НСтр("ru = 'Документ, для которого сформирован отчет о структуре
		|подчиненности был удален, или же стал недоступен.'"));
	КонецЕсли;		
	
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик действия ВывестиДляТекущего.
//
Процедура ВывестиДляТекущего(Команда)	
	
	Если Элементы.ДеревоДокументов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокументСсылка = Элементы.ДеревоДокументов.ТекущиеДанные.Ссылка;
	Если ОсновнойДокументЕщеДоступен() Тогда
		ДеревоДокументов.ПолучитьЭлементы().Очистить();	
		ВывестиДеревоДокументов();
	Иначе
		ЗакрытьФормуСПредупреждением(НСтр("ru = 'Документ, для которого сформирован отчет о структуре
		|подчиненности был удален, или же стал недоступен.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик действия НайтиВСписке.
//
Процедура НайтиВСписке(Команда)
	
	Если Элементы.ДеревоДокументов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ФормаСписка = ПолучитьФорму("Документ."+Элементы.ДеревоДокументов.ТекущиеДанные.ВидДокумента + ".ФормаСписка");
		ФормаСписка.Элементы.Список.ТекущаяСтрока = Элементы.ДеревоДокументов.ТекущиеДанные.Ссылка;
		ФормаСписка.Открыть();
	Исключение
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ДокументСсылка, ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик действия Провести.
//
Процедура Провести(Кнопка)
	
	Если Элементы.ДеревоДокументов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка       
		результатПроведения = ПровестиСервер(Элементы.ДеревоДокументов.ТекущиеДанные.Ссылка);
		
		Если результатПроведения = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Элементы.ДеревоДокументов.ТекущиеДанные.Проведен = результатПроведения;
		Элементы.ДеревоДокументов.ТекущиеДанные.Картинка = НомерКартинки(Элементы.ДеревоДокументов.ТекущиеДанные);
	Исключение
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Не удалось провести документ %Документ%!'");;
		Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%Документ%", Элементы.ДеревоДокументов.ТекущиеДанные.ДокументПредставление);
		Сообщение.Сообщить();
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик действия Отмена проведения.
//
Процедура ОтменаПроведения(Кнопка)
	
	Если Элементы.ДеревоДокументов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Элементы.ДеревоДокументов.ТекущиеДанные.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		результатОтменыПроведения = ОтменаПроведенияСервер(Элементы.ДеревоДокументов.ТекущиеДанные.Ссылка);
		
		Если результатОтменыПроведения = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Элементы.ДеревоДокументов.ТекущиеДанные.Проведен = результатОтменыПроведения; 
		Элементы.ДеревоДокументов.ТекущиеДанные.Картинка = НомерКартинки(Элементы.ДеревоДокументов.ТекущиеДанные);
	Исключение
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Не удалось сделать непроведенным документ %Документ%!'");;
		Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%Документ%", Элементы.ДеревоДокументов.ТекущиеДанные.ДокументПредставление);
		Сообщение.Сообщить();
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриАктивизацииСтроки реквизита ДеревоДокументов.
//
Процедура ДеревоДокументовПриАктивизацииСтроки(Элемент)
	ОбновитьДоступностьКнопок();	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик действия УстановитьПометкуУдаления.
//
Процедура УстановитьПометкуУдаления(Кнопка)	
	
	Если Элементы.ДеревоДокументов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		пометкаУдаления = УстановитьПометкуУдаленияСервер(Элементы.ДеревоДокументов.ТекущиеДанные.Ссылка);
		
		Если пометкаУдаления = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Элементы.ДеревоДокументов.ТекущиеДанные.ПометкаУдаления = ПометкаУдаления;
		Элементы.ДеревоДокументов.ТекущиеДанные.Проведен = Ложь;
		Элементы.ДеревоДокументов.ТекущиеДанные.Картинка = НомерКартинки(Элементы.ДеревоДокументов.ТекущиеДанные);
		
		ОбновитьДоступностьКнопок();
		
	Исключение
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Не удалось установить пометку удаления на документ %Документ%!'");;
		Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%Документ%", Элементы.ДеревоДокументов.ТекущиеДанные.ДокументПредставление);
		Сообщение.Сообщить();
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик действия Выбор дерева документов.
//
Процедура ДеревоДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.ДеревоДокументов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуДокумента();
	
КонецПроцедуры










