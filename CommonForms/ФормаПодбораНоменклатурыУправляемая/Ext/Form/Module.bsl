&НаСервереБезКонтекста
Процедура ПолучитьДанныеНоменклатуры(СтруктураДанных)
	СтруктураДанных.Вставить("ЕдиницаИзмерения",			СтруктураДанных.Номенклатура.ЕдиницаИзмерения);
КонецПроцедуры //
 
&НаКлиенте
Процедура СписокНоменклатурыВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТипЗначения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный));
	
	СтруктураПодбора = Новый Структура();
	СтруктураПодбора.Вставить("Команда",      КомандаПодбора);
	СтруктураПодбора.Вставить("Номенклатура", Значение);

	
	Количество = 1;
	КоличествоНакладная = 1;
	
	Если ВводКоличестваПоНакладной Тогда
		
		КоличествоИЦена = Новый Структура("КоличествоНакладная, Количество, ЦенаДоступна, Цена", 0, 0, Ложь, 0);
		КоличествоИЦена = ОткрытьФормуМодально("ОбщаяФорма.ФормаКоличествоИЦена", Новый Структура("ЗначениеЗаполнения", КоличествоИЦена));
		
		Если ТипЗнч(КоличествоИЦена) = Тип("Структура") Тогда
			
			Если КоличествоИЦена.Свойство("Количество") Тогда
				СтруктураПодбора.Вставить("Количество",   		 КоличествоИЦена.Количество);
			КонецЕсли;
			
			Если КоличествоИЦена.Свойство("Количество") Тогда
				СтруктураПодбора.Вставить("КоличествоНакладная", КоличествоИЦена.КоличествоНакладная);
			КонецЕсли;
			
			
			

			////Применим правила округления из вида цен компании
			//Если ЗначениеЗаполнено(ВидЦен) Тогда
			//	
			//	Цена = ОкруглитьЦену(Цена, ВидЦенПорядокОкругления, ВидЦенОкруглятьВБольшуюСторону);
			//	
			//КонецЕсли;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;

		
	Иначе
		Если НЕ ВвестиЗначение(Количество, "Введите количество", ТипЗначения) Тогда
			Возврат;
		КонецЕсли;	
	
		СтруктураПодбора.Вставить("Количество",   Количество);
		
	КонецЕсли;
	
	ПолучитьДанныеНоменклатуры(СтруктураПодбора);
	
	ОповеститьОВыборе(СтруктураПодбора);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоставщик(ЗначениеОтбора)

	ЭлементОтбора = СписокНоменклатуры.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Поставщик");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = ЗначениеОтбора;
	
КонецПроцедуры //

// Процедура добавляет вывод остатков в список номенклатуры
//
&НаСервере
Процедура УстановитьСписокСОстатками()

	//СписокНоменклатуры.ПроизвольныйЗапрос = Истина;
	//
	//Если Параметры.Склад.Пустая() Тогда
	//	СписокНоменклатуры.ТекстЗапроса =
	//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//		|	СпрНоменклатура.Ссылка,
	//		|	СпрНоменклатура.Код,
	//		|	СпрНоменклатура.Наименование,
	//		|	СпрНоменклатура.НаименованиеПолное,
	//		|	СвободныеОстаткиОстатки.КоличествоОстаток
	//		|ИЗ
	//		|	Справочник.Номенклатура КАК СпрНоменклатура
	//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(&Дата, ) КАК СвободныеОстаткиОстатки
	//		|		ПО СпрНоменклатура.Ссылка = СвободныеОстаткиОстатки.Номенклатура";
	//Иначе
	//	
	//	СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("Склад", Параметры.Склад);
	//	
	//	СписокНоменклатуры.ТекстЗапроса =
	//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//		|	СпрНоменклатура.Ссылка,
	//		|	СпрНоменклатура.Код,
	//		|	СпрНоменклатура.Наименование,
	//		|	СпрНоменклатура.НаименованиеПолное,
	//		|	СвободныеОстаткиОстатки.КоличествоОстаток
	//		|ИЗ
	//		|	Справочник.Номенклатура КАК СпрНоменклатура
	//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(&Дата, Склад = &Склад) КАК СвободныеОстаткиОстатки
	//		|		ПО СпрНоменклатура.Ссылка = СвободныеОстаткиОстатки.Номенклатура";
	//КонецЕсли; 
	//								  
	//СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("Дата", Параметры.ДатаРасчетов);
	//
	//СписокНоменклатуры.ОсновнаяТаблица = "СпрНоменклатура";
	//
	//ПолеКоличество = Элементы.Добавить("КоличествоОстаток", Тип("ПолеФормы"), Элементы.СписокНоменклатуры);
	//ПолеКоличество.ПутьКДанным = "СписокНоменклатуры.КоличествоОстаток";
	//ПолеКоличество.Заголовок = "Остаток";
	//ПолеКоличество.Подсказка = "Остаток номенклатуры";
	
КонецПроцедуры //
 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("Команда", КомандаПодбора);
	
	Если Параметры.ОтборПоПоставщику Тогда
		УстановитьОтборПоставщик(Параметры.Поставщик);
	КонецЕсли;
	
	Если Параметры.Свойство("ВводКоличестваПоНакладной") Тогда
		ВводКоличестваПоНакладной = ИСТИНА;	
	КонецЕсли;
	
	//Если глЗначениеПеременной("ИспользоватьРегистрСвободныеОстатки") Тогда
	//	УстановитьСписокСОстатками();
	//КонецЕсли;
	
	ТолькоЧтоОткрыт = Истина;
	Группа = Справочники.Номенклатура.ПустаяСсылка();
	ОтборПоГруппе = Истина;
	
	Если Параметры.Свойство("ТипЦен") Тогда
		ТипЦен = Параметры.ТипЦен;
		ИспользуютсяЦены = Истина;
	Иначе
		ИспользуютсяЦены = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("Подразделение") Тогда
		Подразделение = Параметры.Подразделение;
		ИспользуютсяЦены = Истина;
	Иначе
		ИспользуютсяЦены = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("Период") Тогда
		
		Период = Параметры.Период;
		
	Иначе
		
		Период = ТекущаяДата();
		
	КонецЕсли;
	
	//Настройки динамеческих списков
	ОбновитьДанныеФормыНаСервере();

	
КонецПроцедуры

&НаСервере
// Процедура обновляет данные формы "Подбор" на сервере
//
// Условием выполнения служит изменение пользовательских параметров отображения формы либо 
// изменение организации, структурной единицы
//
Процедура ОбновитьДанныеФормыНаСервере(ВыбраннаяГруппаНоменклатуры = Неопределено)

	СтруктураНастроек 			= ПолучитьНастройкиПодбора();

	
	// Видимость
	УстановитьВидимостьПолейДинамическогоСписка(СтруктураНастроек);

	// Тексты запросов
	УстановитьТекстЗапросаСпискаЗапасов(СтруктураНастроек);

КонецПроцедуры

&НаСервере
// Процедура считывает пользовательские настройки отображения данных
// в форме подбора
//
Функция ПолучитьНастройкиПодбора()
	
	Пользователь 			= Пользователи.ТекущийПользователь();
	
	
	Возврат Новый Структура("ЗапрашиватьКоличествоИЦену, ПоказыватьЦены, ЗапоминатьТекущуюИерархию",
				ЛОЖЬ,
				ИСТИНА,
				ИСТИНА);
	
КонецФункции //ПолучитьНастройкиПодбора()

&НаКлиенте
// Процедура обновляет дерево номенклатуры.
//
Процедура ОбновитьСписокНоменклатуры()
		
	//СписокЗапасов.Параметры.УстановитьЗначениеПараметра("СтруктурнаяЕдиница", Склад);
	СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("Группа", Группа);
	СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("ОтборПоГруппе", ОтборПоГруппе);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИерархияПриСменеТекущегоРодителя(Элемент)
	
	Если ТолькоЧтоОткрыт Тогда
		ТолькоЧтоОткрыт = Ложь;
	Иначе
		Группа = Элемент.ТекущийРодитель;
		ОбновитьСписокНоменклатуры();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИерархияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Группа = ВыбранноеЗначение;
	ОбновитьСписокНоменклатуры();

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИерархияВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Группа = Значение;
	ОбновитьСписокНоменклатуры();

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИерархияПередРазворачиванием(Элемент, Строка, Отказ)
	
	Если ТолькоЧтоОткрыт Тогда
		ТолькоЧтоОткрыт = Ложь;
	Иначе
		Группа = Строка;
		ОбновитьСписокНоменклатуры();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИерархияПередСворачиванием(Элемент, Строка, Отказ)
	
	Группа = Строка;
	ОбновитьСписокНоменклатуры();

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИерархияПриАктивизацииСтроки(Элемент)
	
	СтандартнаяОбработка = Ложь;
	Группа = Элемент.ТекущаяСтрока;
	ОбновитьСписокНоменклатуры();

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПолейДинамическогоСписка(СтруктураНастроек)
	
	Элементы.СписокНоменклатурыЦена.Видимость = СтруктураНастроек.ПоказыватьЦены И ИспользуютсяЦены;
	Элементы.СписокНоменклатурыЦена.Заголовок = ТипЦен.Наименование;
 
КонецПроцедуры


&НаСервере
// Процедура устанавливает текст запроса для динамического списка "СписокЗапасов"
//
// Параметры:
// СтруктураНастроек - Структура, содержит значение пользовательских настроек
//
Процедура УстановитьТекстЗапросаСпискаЗапасов(СтруктураНастроек)

	ЗапросСЦенами 				= СтруктураНастроек.ПоказыватьЦены;
	
	СписокНоменклатуры.ПроизвольныйЗапрос = Истина;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	СправочникНоменклатура.Код,
		|	СправочникНоменклатура.Наименование,
		|	СправочникНоменклатура.Родитель,
		|	СправочникНоменклатура.Родитель.Поставщик КАК Поставщик,
		|	СправочникНоменклатура.НеАктуально,
		|	&УсловиеВыводаПоляЦена КАК Цена,
		|	&УсловиеВыводаПоляОстаток КАК Остаток
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура";
		

		
	Если ЗапросСЦенами Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ПериодЦен, ТипЦен = &ТипЦен И Подразделение = &Подразделение) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО СправочникНоменклатура.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах.Остатки(, Подразделение = &Подразделение
		|			И ВидХранения <> ЗНАЧЕНИЕ(Перечисление.ВидыХраненияЗапасов.ВПодотчете)) КАК ПартииТоваровНаСкладахОстатки
		|		ПО ПартииТоваровНаСкладахОстатки.Номенклатура = СправочникНоменклатура.Ссылка
		|			";
		
	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеВыводаПоляЦена", ?(ЗапросСЦенами, "
		|	ЦеныНоменклатурыСрезПоследних.Цена ", "0"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеВыводаПоляОстаток", ?(ЗапросСЦенами, "
		|	ПартииТоваровНаСкладахОстатки.КоличествоОстаток ", "0"));	
	
		
	ТекстЗапроса = ТекстЗапроса + "
		|
		|ГДЕ
		|	СправочникНоменклатура.ЭтоГруппа = ЛОЖЬ
		|	И ВЫБОР
		|			КОГДА &ОтборПоГруппе
		|					И НЕ &Группа = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|				ТОГДА СправочникНоменклатура.Ссылка.Родитель В ИЕРАРХИИ (&Группа)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
		
		
	// Обновим текст запроса
	Если НЕ СписокНоменклатуры.ТекстЗапроса = ТекстЗапроса Тогда
		
		СписокНоменклатуры.ТекстЗапроса = ТекстЗапроса;
		
	КонецЕсли;
	
	// Параметры запроса
	УстановитьПараметрДинамическогоСписка(СписокНоменклатуры, "ПериодЦен", 		Период);
	УстановитьПараметрДинамическогоСписка(СписокНоменклатуры, "ТипЦен", 		ТипЦен);
	УстановитьПараметрДинамическогоСписка(СписокНоменклатуры, "Подразделение", 	Подразделение);

		
КонецПроцедуры

&НаСервере
// Устанавливает значение параметра динамического списка на сервере
//
// Параметры:
// ДинамическийСписок - динамический список, для которого устанавливается параметр
// Имя - имя параметра динамического списка
// ЗначениеПараметра - значение устанавливаемого параметра
//
Процедура УстановитьПараметрДинамическогоСписка(ДинамическийСписок, Имя, ЗначениеПараметра)
	
	Если НЕ ДинамическийСписок.Параметры.Элементы.Найти(Имя) = Неопределено Тогда
	
		ДинамическийСписок.Параметры.УстановитьЗначениеПараметра(Имя, ЗначениеПараметра);
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрДинамическогоСписка()
