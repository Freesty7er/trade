
Функция БПАГПолучитьНастройку(Имя, Агент = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПанАгент") Тогда
		Возврат "Ошибка";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БПАГНастройкиАгентов.Агент,
	|	БПАГНастройкиАгентов.Профиль,
	|	БПАГНастройкиАгентов.ВидНастройки КАК Настройка,
	|	БПАГНастройкиАгентов.Значение,
	|	БПАГНастройкиАгентов.ВидНастройки.Код КАК ИмяНастройки
	|ИЗ
	|	РегистрСведений.БПАГНастройкиАгентов КАК БПАГНастройкиАгентов";
	
	НастройкиАгентов = Запрос.Выполнить().Выгрузить();
	
	АгентНеЗадан = Ложь;
	Если Агент = Неопределено Тогда
		АгентНеЗадан = Истина;
	ИначеЕсли Агент.Пустая() Тогда
		АгентНеЗадан = Истина;
	КонецЕсли;
	
	Если АгентНеЗадан Тогда
		//Общие настройки
		Отбор = Новый Структура();
		Отбор.Вставить("Агент", Справочники.БПАГАгенты.ПустаяСсылка());
		Отбор.Вставить("Профиль", Справочники.БПАГПрофилиАгентов.ПустаяСсылка());
		Отбор.Вставить("ИмяНастройки", Имя);
	
		НайденныеСуществующиеНастройки = НастройкиАгентов.НайтиСтроки(Отбор);
		Если НайденныеСуществующиеНастройки.Количество() = 0 Тогда
			БПАГ.ИнформационноеСообщение("Не найдена общая настройка " + Имя + "!");
			Возврат "Ошибка";
		Иначе
			Возврат НайденныеСуществующиеНастройки[0].Значение;
		КонецЕсли;
	Иначе
		//Настройки агента
		Отбор = Новый Структура();
		Отбор.Вставить("Агент", Агент);
		Отбор.Вставить("Профиль", Справочники.БПАГПрофилиАгентов.ПустаяСсылка());
		Отбор.Вставить("ИмяНастройки", Имя);
	
		НайденныеСуществующиеНастройки = НастройкиАгентов.НайтиСтроки(Отбор);
		Если НайденныеСуществующиеНастройки.Количество() = 0 Тогда
			//Настройки профиля
			Отбор = Новый Структура();
			Отбор.Вставить("Агент", Справочники.БПАГАгенты.ПустаяСсылка());
			Отбор.Вставить("Профиль", Агент.Профиль);
			Отбор.Вставить("ИмяНастройки", Имя);
		
			НайденныеСуществующиеНастройки = НастройкиАгентов.НайтиСтроки(Отбор);
			Если НайденныеСуществующиеНастройки.Количество() = 0 Тогда
				//Общие настройки
				Отбор = Новый Структура();
				Отбор.Вставить("Агент", Справочники.БПАГАгенты.ПустаяСсылка());
				Отбор.Вставить("Профиль", Справочники.БПАГПрофилиАгентов.ПустаяСсылка());
				Отбор.Вставить("ИмяНастройки", Имя);
			
				НайденныеСуществующиеНастройки = НастройкиАгентов.НайтиСтроки(Отбор);
				Если НайденныеСуществующиеНастройки.Количество() = 0 Тогда
					БПАГ.ИнформационноеСообщение("Не найдена настройка агента " + Имя + " для " + Агент + "!");
					Возврат "Ошибка";
				Иначе
					Возврат НайденныеСуществующиеНастройки[0].Значение;
				КонецЕсли;
			Иначе
				Возврат НайденныеСуществующиеНастройки[0].Значение;
			КонецЕсли;
		Иначе
			Возврат НайденныеСуществующиеНастройки[0].Значение;
		КонецЕсли;
			
	КонецЕсли;
	
КонецФункции

Процедура ИнформационноеСообщение(Текст, Режим = -1, Лог = Неопределено) Экспорт
	Сообщение = Новый СообщениеПользователю();
    Сообщение.Текст = Текст;
    Сообщение.Сообщить();
	
	#Если Клиент Тогда
		//Сообщить(Текст);
	#Иначе
		//NIY В лог-файл
	#КонецЕсли
	
	Если Лог <> Неопределено Тогда
		Лог.ДобавитьСтроку(Текст);
	КонецЕсли;		
КонецПроцедуры

Процедура глПрогрессор(Сообщение, Всего, Текущ) Экспорт

	#Если Клиент Тогда
		Стр1Прогрессора = "||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||";
		Стр2Прогрессора = "''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''";
		
		Если Всего > 0 Тогда

			Процент = Цел(Текущ / Всего * 100);

			Если Процент > Цел((Текущ - 1) / Всего * 100) Тогда
				Состояние(Сообщение + ": " + Формат(Процент, "Ч(0)2") + "% " + Лев(Стр1Прогрессора, Мин(99, Процент)) + Лев(Стр2Прогрессора, Мин(99, 99 - Процент)) + "|");
			КонецЕсли; 

		КонецЕсли;
	#КонецЕсли

КонецПроцедуры

Функция ПревратитьСтрокуВТранслит(тмпСтрока) Экспорт
	
	НоваяСтрока = тмпСтрока;
	
	Строка1 = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдеёжзийклмнопрстуфхцчшщъыьэюя№#|+=;«/?\:*«<>ҐЄІЇґєіï’“”"""; //Внимание, на 1 символ больше за счет двойных кавычек
	Строка2 = "ABVGDEEZZIYKLMNOPRSTUFHCCSS'Y'EUYabvgdeezziyklmnoprstufhccss'y'euyNN             GEIIgeii''''";
	
	СтрокаЭталон = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz.-!,'()_[] ";
	
	Для i = 1 По СтрДлина(НоваяСтрока) Цикл
		
		Буква = Сред(НоваяСтрока, i, 1);
		
		Поз = Найти(Строка1, Буква);
		Если Поз > 0 Тогда
			НоваяСтрока = СтрЗаменить(НоваяСтрока, Буква, Сред(Строка2, Поз, 1));
		ИначеЕсли Найти(СтрокаЭталон, Буква) = 0 Тогда //Неизвестный символ
			НоваяСтрока = СтрЗаменить(НоваяСтрока, Буква, "x");
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НоваяСтрока;
	
КонецФункции

Функция ПолучитьСпецификуПользователя() Экспорт
	
	Возврат "SD";
	
	ФайлСпецифики = Новый Файл(БПАГ.БПАГПолучитьНастройку("1СКаталогОбмена") + "sp.txt");
	Если ФайлСпецифики.Существует() Тогда
		Текст = Новый ТекстовыйДокумент;
		Текст.Прочитать(ФайлСпецифики.ПолноеИмя);
		Возврат Текст.ПолучитьСтроку(1);
	Иначе
		Сообщить("не нашел");
		Возврат "";
	КонецЕсли;
КонецФункции

Функция ПолучитьПрокси() Экспорт
	Если БПАГПолучитьНастройку("1СИспользоватьПрокси") Тогда
		ПроксиСервер = Новый ИнтернетПрокси;
		ПроксиСервер.Установить("HTTP", БПАГПолучитьНастройку("1САдресПрокси"), БПАГПолучитьНастройку("1СПортПрокси"));
		ПроксиСервер.Установить("FTP", БПАГПолучитьНастройку("1САдресПрокси"), БПАГПолучитьНастройку("1СПортПрокси"));
		ПроксиСервер.Пользователь = БПАГПолучитьНастройку("1СЛогинПрокси");
		ПроксиСервер.Пароль = БПАГПолучитьНастройку("1СПарольПрокси");
		Возврат ПроксиСервер;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Процедура БПАГВыгрузкаДанных() Экспорт
	
	Обработка = Обработки.БПАГПанАгентЦентрУправления.Создать();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БПАГАгенты.Ссылка КАК Агент,
	|	БПАГАгенты.Код КАК Код
	|ИЗ
	|	Справочник.БПАГАгенты КАК БПАГАгенты
	|ГДЕ
	|	НЕ БПАГАгенты.ПометкаУдаления
	|	И НЕ БПАГАгенты.ЭтоГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	БПАГАгенты.Наименование";
	
	Результат = Обработка.МодульОбъектаОбменДанными("Выгрузка", "Все", Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура БПАГЗагрузкаДанных() Экспорт
	
	Обработка = Обработки.БПАГПанАгентЦентрУправления.Создать();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БПАГАгенты.Ссылка КАК Агент,
	|	БПАГАгенты.Код КАК Код
	|ИЗ
	|	Справочник.БПАГАгенты КАК БПАГАгенты
	|ГДЕ
	|	НЕ БПАГАгенты.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	БПАГАгенты.Наименование";
	
	Результат = Обработка.МодульОбъектаОбменДанными("Загрузка", "Все", Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Функция ПолучитьВидПрикладногоРешения() Экспорт
	//Если Найти(Метаданные.Синоним, "Управление торговлей, редакция 11") > 0 Тогда
	//	Возврат "УТ11";	 
	//ИначеЕсли Найти(Метаданные.Синоним, "Управление небольшой фирмой") > 0 Тогда
		Возврат "УНФ";	 
	//Иначе	
	//	Возврат "УТ10"
	//КонецЕсли;
КонецФункции

Процедура БПАГСинхронизацияКонтрагентов() Экспорт
	Обработка = Обработки.БПАГПанАгентЦентрУправления.Создать();
	Обработка.КонтрагентыСинхронизироватьВсе();
КонецПроцедуры

Процедура БПАГСинхронизацияНоменклатуры() Экспорт
	Обработка = Обработки.БПАГПанАгентЦентрУправления.Создать();
	Обработка.НоменклатураСинхронизироватьВсе();
КонецПроцедуры


Процедура БПАГПриЗаписиСправочникаНоменклатуры(СправочникОбъект)
	
	Если СправочникОбъект.ЭтоГруппа И НЕ СправочникОбъект.Ссылка.СчетУчета = ПланыСчетов.Внутренний.Товары Тогда
		Возврат;
		
	ИначеЕсли НЕ СправочникОбъект.ЭтоГруппа И НЕ СправочникОбъект.Родитель.СчетУчета = ПланыСчетов.Внутренний.Товары Тогда
		Возврат;
		
	КонецЕсли;

	БПАГНоменклатураСсылка = Справочники.БПАГНоменклатура.НайтиПоРеквизиту("Номенклатура", СправочникОбъект.Ссылка);
	
	Если  БПАГНоменклатураСсылка = Справочники.БПАГНоменклатура.ПустаяСсылка() Тогда
		
		Если СправочникОбъект.ЭтоГруппа Тогда
			БПАГНоменклатураОбъект = Справочники.БПАГНоменклатура.СоздатьГруппу();
		Иначе
			БПАГНоменклатураОбъект = Справочники.БПАГНоменклатура.СоздатьЭлемент();
			
			Если ЗначениеЗаполнено(СправочникОбъект.Родитель) Тогда
				
				Родитель = Справочники.БПАГНоменклатура.НайтиПоРеквизиту("Номенклатура", СправочникОбъект.Родитель.Ссылка);
				Если Родитель = Справочники.БПАГНоменклатура.ПустаяСсылка() Тогда
					
					Родитель = Справочники.БПАГНоменклатура.СоздатьГруппу();
					
					Родитель.Наименование = СправочникОбъект.Родитель.Наименование;
					Родитель.Номенклатура = СправочникОбъект.Родитель;
					Родитель.Записать();
					
					Родитель = Родитель.Ссылка;
					
				КонецЕсли;
				
				БПАГНоменклатураОбъект.Родитель = Родитель;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		БПАГНоменклатураОбъект = БПАГНоменклатураСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	БПАГНоменклатураОбъект.Наименование 	= СправочникОбъект.Наименование;
	БПАГНоменклатураОбъект.Номенклатура 	= СправочникОбъект.Ссылка;
	БПАГНоменклатураОбъект.ПометкаУдаления 	= СправочникОбъект.ПометкаУдаления;
	
	БПАГНоменклатураОбъект.Записать();
	
КонецПроцедуры
	
//	----------------------------------------------------------------------------
//	БПАГПриЗаписиСправочникаПриЗаписи()
//		Описание: Обновляет информацию при изменении Номенклатуры и Организаций
//
Процедура БПАГПриЗаписиСправочникаПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.Организации") Тогда
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.Номенклатура") Тогда
		
		БПАГПриЗаписиСправочникаНоменклатуры(Источник);
		
	КонецЕсли;
	
КонецПроцедуры
Функция ПреобразоватьЦветИз10В16(Цвет) Экспорт
	Результат = "";
	Для i = 0 По 2 Цикл
		Триада = Сред(Цвет, i * 3 + 1, 3);
		Триада = ?(Триада = "", "0", Триада);
		Значение = Число(Триада);
		Остат = Значение % 16 + 1;
		Результат1 = Сред("0123456789ABCDEF", Остат, 1);
		Значение = Цел(Значение / 16);
		Остат = Значение % 16 + 1;
		Результат2 = Сред("0123456789ABCDEF", Остат, 1);
		Значение = Цел(Значение / 16);
		Результат = Результат + Результат2 + Результат1;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Процедура СформироватьПроизвольныеОтчеты() Экспорт
	
	СпецификаПользователя = БПАГ.ПолучитьСпецификуПользователя();
	
	КаталогОбмена = БПАГ.БПАГПолучитьНастройку("1СКаталогОбмена");
	
	//Если (СпецификаПользователя = "Sarmat") или (СпецификаПользователя = "SB") Тогда //ПАКЛ в серию
	ВидПрикладногоРешения = ПолучитьВидПрикладногоРешения();
	Если ВидПрикладногоРешения = "УТ10" Тогда
		Попытка
			//Отчет по остаткам тары
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	БПАГТорговыеТочки.Ссылка КАК Ссылка,
			|	ТоварыПереданныеОстатки.Номенклатура.Наименование КАК Товар,
			|	ТоварыПереданныеОстатки.КоличествоОстаток КАК Остаток
			|ИЗ
			|	Справочник.БПАГТорговыеТочки КАК БПАГТорговыеТочки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыПереданные.Остатки(, СтатусПередачи = &СтатусВозвратнаяТара) КАК ТоварыПереданныеОстатки
			|		ПО БПАГТорговыеТочки.Владелец.Контрагент = ТоварыПереданныеОстатки.Контрагент
			|ГДЕ
			|	ТоварыПереданныеОстатки.КоличествоОстаток > 0
			|
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка,
			|	Товар
			|ИТОГИ
			|	СУММА(Остаток)
			|ПО
			|	Ссылка";
			
			Запрос.УстановитьПараметр("СтатусВозвратнаяТара", Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара);
			
			Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
			Пока Выборка.Следующий() Цикл
				
				КраткоеИмяФайла = "Tara" + СокрЛП(Выборка.Ссылка.Код) + ".html";
				ИмяФайла = КаталогОбмена + "images\" + КраткоеИмяФайла;
				Текст = Новый ЗаписьТекста(ИмяФайла);
				
				СлучайнаяСтрока = БПАГ.СформироватьСтрокуСлучайнойДлины(255);
				
				Текст.ЗаписатьСтроку("<!DOCTYPE html>
				|<!--" + СлучайнаяСтрока + "-->
				|<html>
				|<head>
				|<meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8"" />
				|    <title>Остатки тары</title>
				|    <style type=""text/css"">
				|        body {
				|            padding: 15px;
				|            margin: 0;
				|            font: 14px 'Helvetica Neue', Helvetica, 'Lucida Grande', 'Lucida Sans Unicode', Arial, sans-serif;
				|        }
				|        h2 {
				|            font-size: 1.5em;
				|        }
				|        table, th, td {
				|            border: 1px solid black;
				|        }
				|        th, tr.bold {
				|            font-weight: bold;
				|        }
				|        td.right {
				|            text-align: right;
				|        }
				|    </style>
				|</head>
				|<body>
				|<h2>Остатки тары</h2>
				|<table cellspacing=""0"" cellpadding=""3px"" width=""100%"">
				|    <tr>
				|        <th width=""80%"">Тара</th>
				|        <th width=""20%"">Остаток</th>
				|    </tr>");
				
				ВыборкаПоТоварам = Выборка.Выбрать(ОбходРезультатаЗапроса.Прямой);
				Итог = 0;
				Пока ВыборкаПоТоварам.Следующий() Цикл
					Текст.ЗаписатьСтроку("<tr>
					|    <td>" + ВыборкаПоТоварам.Товар + "</td>
					|    <td class=""right"">" + ВыборкаПоТоварам.Остаток + "</td>
					|</tr>");
					Итог = Итог + ВыборкаПоТоварам.Остаток;
				КонецЦикла;
				Текст.ЗаписатьСтроку("<tr class=""bold"">
				|	<td class=""right"">ИТОГО:</td>
				|	<td class=""right"">" + Итог + "</td>
				|</tr>
				|</table>
				|</body>
				|</html>");
				
				
				Текст.Закрыть();
				
				//Подцепим сформированный файл, если его еще нет.
				Картинки = Выборка.Ссылка.Картинки.Найти(КраткоеИмяФайла, "Имя");
				Если Картинки = Неопределено Тогда
					Объ = Выборка.Ссылка.ПолучитьОбъект();
					НоваяКартинка = Объ.Картинки.Добавить();
					НоваяКартинка.Имя = КраткоеИмяФайла;
					Объ.Записать();
				КонецЕсли;
				
			КонецЦикла;
			
		Исключение
			Сообщить("Нет данных по возвратной таре.");
		КонецПопытки;
	КонецЕсли;
	//КонецЕсли;
	
	Если СпецификаПользователя = "FT" Тогда
		//Отчет по поступлениям товара за последние 5 дней с текущей даты
		
		КраткоеИмяФайла = "Receipts5Days.html";
		ИмяФайла = КаталогОбмена + "images\" + КраткоеИмяФайла;
		Текст = Новый ЗаписьТекста(ИмяФайла);
		
		СлучайнаяСтрока = БПАГ.СформироватьСтрокуСлучайнойДлины(255);
		
		Текст.ЗаписатьСтроку("<!DOCTYPE html>
							|<!--" + СлучайнаяСтрока + "-->
							|<html>
							|<head>
							|<meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8"" />
							|    <title>Поступления за последние 5 дней</title>
							|    <style type=""text/css"">
							|        body {
							|            padding: 15px;
							|            margin: 0;
							|            font: 14px 'Helvetica Neue', Helvetica, 'Lucida Grande', 'Lucida Sans Unicode', Arial, sans-serif;
							|        }
							|        h2 {
							|            font-size: 1.5em;
							|        }
							|        table, th, td {
							|            border: 1px solid black;
							|        }
							|        th, tr.bold {
							|            font-weight: bold;
							|        }
							|        td.right {
							|            text-align: right;
							|        }
							|    </style>
							|</head>
							|<body>
							|<h2>Поступления за последние 5 дней</h2>");
	
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслугТовары.Ссылка.Дата КАК Дата,
		|	ПоступлениеТоваровУслугТовары.Ссылка.Контрагент КАК Контрагент,
		|	ПоступлениеТоваровУслугТовары.Количество КАК Количество,
		|	ПоступлениеТоваровУслугТовары.Номенклатура.Наименование КАК Товар,
		|	ПоступлениеТоваровУслугТовары.Ссылка КАК Ссылка,
		|	ПоступлениеТоваровУслугТовары.Номенклатура.Артикул КАК Артикул,
		|	ВЫБОР
		|		КОГДА ПоступлениеТоваровУслугТовары.Упаковка.Наименование = """"
		|				ИЛИ ПоступлениеТоваровУслугТовары.Упаковка = NULL
		|				ИЛИ ПоступлениеТоваровУслугТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ПоступлениеТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения.Наименование
		|		ИНАЧЕ ПоступлениеТоваровУслугТовары.Упаковка.Наименование
		|	КОНЕЦ КАК Упаковка,
		|	ПоступлениеТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
		|	ПоступлениеТоваровУслугТовары.КоличествоУпаковок КАК КоличествоУпаковок
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|ГДЕ
		|	ПоступлениеТоваровУслугТовары.Ссылка.Проведен
		|	И ПоступлениеТоваровУслугТовары.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
		|	И ПоступлениеТоваровУслугТовары.Ссылка.Склад.Наименование = &Склад
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ,
		|	НомерСтроки
		|ИТОГИ
		|	СУММА(Количество)
		|ПО
		|	Ссылка";
		
		Запрос.УстановитьПараметр("ДатаКонца", ТекущаяДата());
		Запрос.УстановитьПараметр("ДатаНачала", ТекущаяДата() - 5 * 24 * 60 * 60);
		Запрос.УстановитьПараметр("Склад","Основной (Скотопрогонная)");
		ТЗ = Запрос.Выполнить().Выгрузить();
		Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
		
		Пока Выборка.Следующий() Цикл
			ТекущаяДата = Лев(СокрЛП(Выборка.Дата), 10);
			ТекущееВремя = Прав(СокрЛП(Выборка.Дата), 8);
			//Текст.ЗаписатьСтроку("<tr>
			//					|</tr>
			//					|<tr class=""bold"">
			//					|	<td>" + Формат(Выборка.Дата, "ДФ=dd.MM.yy") + "</td>
			//					|	<td>" + Выборка.Контрагент + "</td>
			//					|</tr>
			//					|<table cellspacing=""0"" cellpadding=""3px"" width=""100%"">
			//					|    <tr>
			//					|        <th width=""15%"">Артикул</th>
			//					|        <th width=""65%"">Товар</th>
			//					|        <th width=""12%"">Кол-во</th>
			//					|        <th width=""8%"">Ед.</th>
			//					|    </tr>");
			
						Текст.ЗаписатьСтроку("<br>
    							|</br>
								|<tr class=""bold"">
        						|	<td>" + "Дата: " + ТекущаяДата + " Время: " + ТекущееВремя + "</td>
        						|	<td>" + "Поставщик: " + Выборка.Контрагент + "</td>
    							|</tr>
								|<table cellspacing=""0"" cellpadding=""3px"" width=""100%"">
								|    <tr>
								|        <th width=""5%"">№</th>
								|        <th width=""15%"">Артикул</th>
								|        <th width=""60%"">Товар</th>
								|        <th width=""12%"">Кол-во</th>
								|        <th width=""8%"">Ед.</th>
								|    </tr>");

			
			ВыборкаПоТоварам = Выборка.Выбрать(ОбходРезультатаЗапроса.Прямой);

			Пока ВыборкаПоТоварам.Следующий() Цикл
				Текст.ЗаписатьСтроку("<tr>
								    |    <td>" + ВыборкаПоТоварам.НомерСтроки + "</td>
								    |    <td>" + ВыборкаПоТоварам.Артикул + "</td>
								    |    <td>" + ВыборкаПоТоварам.Товар + "</td>
								    |    <td class=""right"">" + ВыборкаПоТоварам.КоличествоУпаковок + "</td>
								    |    <td>" + ВыборкаПоТоварам.Упаковка + "</td>
								    |</tr>");
			КонецЦикла;

			Текст.ЗаписатьСтроку("</table>");
			
		КонецЦикла;
		
		Текст.ЗаписатьСтроку("</body>
							|</html>");
		
		Текст.Закрыть();
		
		//Подцепим сформированный файл, если его еще нет.
		Выборка = Справочники.БПАГОрганизации.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Не Выборка.ПометкаУдаления Тогда
				Картинки = Выборка.Картинки.Найти(КраткоеИмяФайла, "Имя");
				Если Картинки = Неопределено Тогда
					Объ = Выборка.ПолучитьОбъект();
					НоваяКартинка = Объ.Картинки.Добавить();
					НоваяКартинка.Имя = КраткоеИмяФайла;
					Объ.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	
	
	
КонецПроцедуры

Функция СформироватьСлучайнуюСтроку(Длина) Экспорт
	СтрокаЭталон = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	
	СлучайнаяСтрока = "";
	Для i = 1 По Длина Цикл
		СлучайнаяСтрока = СлучайнаяСтрока + Сред(СтрокаЭталон, ГСЧ.СлучайноеЧисло(1, СтрДлина(СтрокаЭталон)), 1);
	КонецЦикла;
	
	Возврат СлучайнаяСтрока;
	
КонецФункции

Функция СформироватьСтрокуСлучайнойДлины(МаксимальнаяДлина) Экспорт
	
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	
	Длина = ГСЧ.СлучайноеЧисло(1, МаксимальнаяДлина);
	
	СлучайнаяСтрока = "";
	Для i = 1 По Длина Цикл
		СлучайнаяСтрока = СлучайнаяСтрока + " ";
	КонецЦикла;
	
	Возврат СлучайнаяСтрока;
	
КонецФункции

Процедура БПАГПриЗаписиРТиУПриЗаписи(Источник, Отказ) Экспорт
	Попытка
		ВидПрикладногоРешения = ПолучитьВидПрикладногоРешения();
		Если ВидПрикладногоРешения = "УТ11" Тогда
			ОбратнаяВыгрузкаИз1С = Ложь;
			ТмпКонтрагент = Справочники.Партнеры.ПустаяСсылка();
			Если ТипЗнч(Источник) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
				НастройкиДокументаРеализация = БПАГПолучитьНастройкиДокумента(Перечисления.БПАГВидыДокументов.Реализация, ТекущаяДата());
				НастройкиДокументаРеализацияПоЗаявке = БПАГПолучитьНастройкиДокумента(Перечисления.БПАГВидыДокументов.РеализацияПоЗаявке, ТекущаяДата());
				ОбратнаяВыгрузкаИз1С = НастройкиДокументаРеализация.ОбратнаяВыгрузкаИз1С ИЛИ НастройкиДокументаРеализацияПоЗаявке.ОбратнаяВыгрузкаИз1С;
				ТмпКонтрагент = Источник.Партнер;
			ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказКлиента") Тогда	
				НастройкиДокумента = БПАГПолучитьНастройкиДокумента(Перечисления.БПАГВидыДокументов.Заявка, ТекущаяДата());
				ОбратнаяВыгрузкаИз1С = НастройкиДокумента.ОбратнаяВыгрузкаИз1С;
				ТмпКонтрагент = Источник.Партнер;
			ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ВозвратТоваровОтКлиента") Тогда	
				НастройкиДокумента = БПАГПолучитьНастройкиДокумента(Перечисления.БПАГВидыДокументов.ВозвратОтПокупателя, ТекущаяДата());
				ОбратнаяВыгрузкаИз1С = НастройкиДокумента.ОбратнаяВыгрузкаИз1С;
				ТмпКонтрагент = Источник.Партнер;
			ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда	
				НастройкиДокумента = БПАГПолучитьНастройкиДокумента(Перечисления.БПАГВидыДокументов.РКО, ТекущаяДата());
				ОбратнаяВыгрузкаИз1С = НастройкиДокумента.ОбратнаяВыгрузкаИз1С;
				Для Каждого ТмпСтрока из Источник.РасшифровкаПлатежа Цикл
					Если НЕ ТмпСтрока.Партнер.Пустая() Тогда
						ТмпКонтрагент = ТмпСтрока.Партнер;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда	
				НастройкиДокумента = БПАГПолучитьНастройкиДокумента(Перечисления.БПАГВидыДокументов.ПКО, ТекущаяДата());
				ОбратнаяВыгрузкаИз1С = НастройкиДокумента.ОбратнаяВыгрузкаИз1С;
				Для Каждого ТмпСтрока из Источник.РасшифровкаПлатежа Цикл
					Если НЕ ТмпСтрока.Партнер.Пустая() Тогда
						ТмпКонтрагент = ТмпСтрока.Партнер;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;	
				
				Если ОбратнаяВыгрузкаИз1С Тогда
					//Поиск документа в регистре БПАГДокументыАгентов
					Запрос = Новый Запрос;
					Запрос.Текст = 
					
					"ВЫБРАТЬ
					|	БПАГДокументыАгентовСрезПоследних.Агент,
					|	БПАГДокументыАгентовСрезПоследних.Документ,
					|	БПАГДокументыАгентовСрезПоследних.ТорговаяТочка,
					|	БПАГДокументыАгентовСрезПоследних.ДатаСозданияНаУстройстве,
					|	БПАГДокументыАгентовСрезПоследних.ДатаИзмененияНаУстройстве,
					|	БПАГДокументыАгентовСрезПоследних.ИД,
					|	БПАГДокументыАгентовСрезПоследних.НомерДокументаНаУстройстве,
					|	БПАГДокументыАгентовСрезПоследних.ВидДокумента,
					|	БПАГДокументыАгентовСрезПоследних.ШиротаСоздания,
					|	БПАГДокументыАгентовСрезПоследних.ДолготаСоздания,
					|	БПАГДокументыАгентовСрезПоследних.ШиротаИзменения,
					|	БПАГДокументыАгентовСрезПоследних.ДолготаИзменения,
					|	БПАГДокументыАгентовСрезПоследних.МоментСозданияПоGPS,
					|	БПАГДокументыАгентовСрезПоследних.МоментИзмененияПоGPS,
					|	БПАГДокументыАгентовСрезПоследних.Период
					|ИЗ
					|	РегистрСведений.БПАГДокументыАгентов.СрезПоследних(, Документ = &Документ) КАК БПАГДокументыАгентовСрезПоследних";
					
					Запрос.УстановитьПараметр("Документ", Источник.Ссылка);
					
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						//Если отличаются контрагенты, то сделать новую запись с другим контрагентом.
						Если (Выборка.ТорговаяТочка.Владелец.Партнер <> ТмпКонтрагент) Тогда
							//Новая ТТ определяется как первая ТТ партнера
							
							НоваяТТ = ПолучитьНовуюТТ(ТмпКонтрагент); 
							
							НаборЗаписей = РегистрыСведений.БПАГДокументыАгентов.СоздатьНаборЗаписей();
							НаборЗаписей.Отбор.Период.Установить(Выборка.Период); 
							НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ); 
							НаборЗаписей.Прочитать(); 
							
							Для Каждого Запись Из НаборЗаписей Цикл 
								Запись.ТорговаяТочка = НоваяТТ; 
							КонецЦикла; 
							НаборЗаписей.Записать();					
							
							
							//НоваяЗаписьДокументыАгентов = РегистрыСведений.БПАГДокументыАгентов.СоздатьМенеджерЗаписи();
							//НоваяЗаписьДокументыАгентов.ВидДокумента = Выборка.ВидДокумента;
							//
							//НоваяЗаписьДокументыАгентов.Период = ТекущаяДата();
							//НоваяЗаписьДокументыАгентов.Агент = Выборка.Агент;
							//НоваяЗаписьДокументыАгентов.Документ = Выборка.Документ;
							//НоваяЗаписьДокументыАгентов.ТорговаяТочка = НоваяТТ;
							//НоваяЗаписьДокументыАгентов.ДатаСозданияНаУстройстве = Выборка.ДатаСозданияНаУстройстве;
							//НоваяЗаписьДокументыАгентов.ДатаИзмененияНаУстройстве = Выборка.ДатаИзмененияНаУстройстве;
							//
							//НоваяЗаписьДокументыАгентов.ИД = Выборка.ИД;
							//НоваяЗаписьДокументыАгентов.НомерДокументаНаУстройстве = Выборка.НомерДокументаНаУстройстве;
							//НоваяЗаписьДокументыАгентов.ШиротаСоздания = Выборка.ШиротаСоздания;
							//НоваяЗаписьДокументыАгентов.ДолготаСоздания = Выборка.ДолготаСоздания;
							//НоваяЗаписьДокументыАгентов.ШиротаИзменения = Выборка.ШиротаИзменения;
							//НоваяЗаписьДокументыАгентов.ДолготаИзменения = Выборка.ДолготаИзменения;
							//НоваяЗаписьДокументыАгентов.МоментСозданияПоGPS = Выборка.МоментСозданияПоGPS;
							//НоваяЗаписьДокументыАгентов.МоментИзмененияПоGPS = Выборка.МоментИзмененияПоGPS;
							//НоваяЗаписьДокументыАгентов.Записать();
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;
				
			//КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция БПАГПолучитьНастройкиДокумента(ВидДокумента, Дата,  Агент = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БПАГНастройкиДокументовСрезПоследних.*,
	|	1 КАК Релевантность
	|ИЗ
	|	РегистрСведений.БПАГНастройкиДокументов.СрезПоследних(&МоментВремени, ) КАК БПАГНастройкиДокументовСрезПоследних
	|ГДЕ
	|	БПАГНастройкиДокументовСрезПоследних.ВидДокумента = &ВидДокумента
	|	И БПАГНастройкиДокументовСрезПоследних.Агент = &Агент
	|	И БПАГНастройкиДокументовСрезПоследних.Агент <> ЗНАЧЕНИЕ(Справочник.БПАГАгенты.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БПАГНастройкиДокументовСрезПоследних.*,
	|	2
	|ИЗ
	|	РегистрСведений.БПАГНастройкиДокументов.СрезПоследних(&МоментВремени, ) КАК БПАГНастройкиДокументовСрезПоследних
	|ГДЕ
	|	БПАГНастройкиДокументовСрезПоследних.ВидДокумента = &ВидДокумента
	|	И БПАГНастройкиДокументовСрезПоследних.Профиль = &Профиль
	|	И БПАГНастройкиДокументовСрезПоследних.Профиль <> ЗНАЧЕНИЕ(Справочник.БПАГПрофилиАгентов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БПАГНастройкиДокументовСрезПоследних.*,
	|	3
	|ИЗ
	|	РегистрСведений.БПАГНастройкиДокументов.СрезПоследних(&МоментВремени, ) КАК БПАГНастройкиДокументовСрезПоследних
	|ГДЕ
	|	БПАГНастройкиДокументовСрезПоследних.ВидДокумента = &ВидДокумента
	|	И БПАГНастройкиДокументовСрезПоследних.Агент = ЗНАЧЕНИЕ(Справочник.БПАГАгенты.ПустаяСсылка)
	|	И БПАГНастройкиДокументовСрезПоследних.Профиль = ЗНАЧЕНИЕ(Справочник.БПАГПрофилиАгентов.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Релевантность";
	
	Запрос.УстановитьПараметр("МоментВремени", Дата);
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	Запрос.УстановитьПараметр("Агент", Агент);
	Запрос.УстановитьПараметр("Профиль", ?(Агент = Неопределено, Неопределено, Агент.Профиль));

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьНовуюТТ(Партнер)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БПАГТорговыеТочки.Код,
	|	БПАГТорговыеТочки.Владелец,
	|	БПАГТорговыеТочки.Ссылка,
	|	БПАГТорговыеТочки.Договор
	|ИЗ
	|	Справочник.БПАГТорговыеТочки КАК БПАГТорговыеТочки
	|ГДЕ
	|	БПАГТорговыеТочки.Владелец.Партнер = &Партнер";
	
	Запрос.УстановитьПараметр("Партнер", Партнер);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции	

Функция ПолучитьСодержимоеАнкеты(ВидАнкеты, Анкета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БПАГВопросыАнкет.Ссылка КАК Вопрос,
	|	БПАГВопросыАнкет.ЭтоГруппа КАК ЭтоГруппа,
	|	БПАГВопросыАнкет.Тип КАК Тип,
	|	БПАГВопросыАнкет.Наименование КАК Наименование,
	|	ВложенныйЗапрос.Ответ КАК Ответ,
	|	БПАГВопросыАнкет.ЦветВопроса КАК ЦветВопроса,
	|	БПАГВопросыАнкет.РазмерШрифтаВопроса КАК РазмерШрифтаВопроса,
	|	БПАГВопросыАнкет.ЦветОтвета КАК ЦветОтвета,
	|	БПАГВопросыАнкет.РазмерШрифтаОтвета КАК РазмерШрифтаОтвета,
	|	БПАГВопросыАнкет.Код КАК Код,
	|	ВЫБОР
	|		КОГДА БПАГВопросыАнкет.Родитель.Код ЕСТЬ NULL 
	|			ТОГДА БПАГВопросыАнкет.Порядок * 1000000000
	|		ИНАЧЕ БПАГВопросыАнкет.Родитель.Порядок * 1000000000 + БПАГВопросыАнкет.Порядок + 1
	|	КОНЕЦ КАК ГлобальныйПорядок,
	|	БПАГВопросыАнкет.ВариантыОтвета.(
	|		Вариант КАК Вариант
	|	) КАК ВариантыОтвета
	|ИЗ
	|	Справочник.БПАГВопросыАнкет КАК БПАГВопросыАнкет
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			БПАГВопросыАнкет.Наименование КАК Наименование,
	|			БПАГАнкетаОтветы.Ответ КАК Ответ,
	|			БПАГВопросыАнкет.Ссылка КАК Ссылка
	|		ИЗ
	|			Справочник.БПАГВопросыАнкет КАК БПАГВопросыАнкет
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.БПАГАнкета.Ответы КАК БПАГАнкетаОтветы
	|				ПО БПАГВопросыАнкет.Ссылка = БПАГАнкетаОтветы.Вопрос
	|		ГДЕ
	|			БПАГАнкетаОтветы.Ссылка = &Ссылка) КАК ВложенныйЗапрос
	|		ПО БПАГВопросыАнкет.Ссылка = ВложенныйЗапрос.Ссылка
	|ГДЕ
	|	БПАГВопросыАнкет.Владелец = &Владелец
	|	И НЕ БПАГВопросыАнкет.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГлобальныйПорядок,
	|	БПАГВопросыАнкет.Порядок,
	|	Наименование,
	|	БПАГВопросыАнкет.ВариантыОтвета.НомерСтроки";
	Запрос.УстановитьПараметр("Ссылка", Анкета);
	Запрос.УстановитьПараметр("Владелец", ВидАнкеты);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	ТЗ.Колонки.Добавить("ИмяРеквизита");
	
	Возврат ТЗ;
	
КонецФункции

Функция ПолучитьHTMLАнкеты(Анкета, КаталогОбмена) Экспорт
	ВидАнкеты = Анкета.ВидАнкеты;
	
	КаталогКартинокАгента = КаталогОбмена + СокрЛП(Анкета.Агент.Код) + "\Images\";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БПАГАнкета.Номер,
	|	БПАГАнкета.Дата,
	|	БПАГАнкета.ВидАнкеты.Наименование КАК ВидАнкеты,
	|	БПАГАнкета.Агент.Наименование КАК Агент,
	|	БПАГАнкета.Агент.Код КАК КодАгента,
	|	БПАГАнкета.Контрагент.Наименование КАК Контрагент,
	|	БПАГАнкета.ТорговаяТочка.Наименование КАК ТТ,
	|	БПАГАнкета.ТорговаяТочка.Адрес КАК АдресТТ,
	|	БПАГАнкета.Комментарий
	|ИЗ
	|	Документ.БПАГАнкета КАК БПАГАнкета
	|ГДЕ
	|	БПАГАнкета.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Анкета);
	
	Шапка = Запрос.Выполнить().Выгрузить();
	
	Ответы = БПАГ.ПолучитьСодержимоеАнкеты(ВидАнкеты, Анкета);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БПАГАнкетаКартинки.Вопрос.Код КАК КодВопроса,
	|	БПАГАнкетаКартинки.Имя
	|ИЗ
	|	Документ.БПАГАнкета.Картинки КАК БПАГАнкетаКартинки
	|ГДЕ
	|	БПАГАнкетаКартинки.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	БПАГАнкетаКартинки.Порядок";
	Запрос.УстановитьПараметр("Ссылка", Анкета);
	
	Фото = Запрос.Выполнить().Выгрузить();
	
	СтрокаОтветов = "";
	Для Каждого тмпСтрока Из Ответы Цикл
		
		Если тмпСтрока.ЭтоГруппа Тогда
			СтрокаОтветов = СтрокаОтветов + "<br><div><table bgcolor=#F5D0A9 width=""100%""><tr><td><strong>" + тмпСтрока.Наименование + "</strong></td></tr></table></div>";
		Иначе
			Ответ = Строка(тмпСтрока.Ответ);
			
			СтрокаФото = "";
			Отбор = Новый Структура();
			Отбор.Вставить("КодВопроса", тмпСтрока.Код);
			МассивФото = Фото.НайтиСтроки(Отбор);
			Для Каждого тмпФото Из МассивФото Цикл
				СтрокаФото = СтрокаФото + "<img src=""file://" + КаталогКартинокАгента + тмпФото.Имя + """ width = ""20%"" alt=""" + СокрЛП(тмпСтрока.Код) + """ hspace=3 vspace=3/>";
			КонецЦикла;
			
			СтрокаОтветов = СтрокаОтветов + "<div><span style="" font-size: " + ?(тмпСтрока.РазмерШрифтаВопроса = 0, "12", СокрЛП(тмпСтрока.РазмерШрифтаВопроса)) + "px; color: #" + БПАГ.ПреобразоватьЦветИз10В16(тмпСтрока.ЦветВопроса) + ";"">" + ?(тмпСтрока.Наименование = "", "", тмпСтрока.Наименование + ":") + "</span> <span style="" font-size: " + ?(тмпСтрока.РазмерШрифтаОтвета = 0, "14", СокрЛП(тмпСтрока.РазмерШрифтаОтвета)) + "px; color: #" + БПАГ.ПреобразоватьЦветИз10В16(тмпСтрока.ЦветОтвета) + ";"">" + Ответ + "</span></div>" + СтрокаФото;
			
		КонецЕсли;
	КонецЦикла;
	
	Текст = "<!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.0 Transitional//EN"">
		|<HTML>
		|<HEAD>
		|<META HTTP-EQUIV=""Content-Type"" CONTENT=""text/html; CHARSET=utf-8"">
		|<TITLE></TITLE>
		|<STYLE type=""text/css"">
		|    }
		|    body, td, th {
		|        font-size: 14px;
		|		 font-family: Arial, sans-serif;
		|    }
		|    td, th {
		|        vertical-align: top;
		|    }
		|    .left {
		|        text-align: left;
		|    }
		|    .right {
		|        text-align: right;
		|    }
		|    .center {
		|        text-align: center;
		|    }
		|</STYLE>
		|</HEAD>
		|<BODY>
		|<table bgcolor=#F5D0A9 width=""100%""><tr><td><strong>" + Шапка[0].ВидАнкеты + " №" + Шапка[0].Номер + " от " + Шапка[0].Дата + "</td></tr>
		|<tr><td>" + Шапка[0].Контрагент + "</td></tr>
		|<tr><td>" + Шапка[0].Комментарий + "</td></tr>
		|</strong></p></table><br>" + СтрокаОтветов + "
		|</BODY>
		|</HTML>";
		
	Возврат Текст;
		
КонецФункции

Функция ПолучитьМассивКартинокАнкеты(Анкета, КодВопроса, КаталогОбмена) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БПАГАнкетаКартинки.Имя КАК ИмяФайла
	|ИЗ
	|	Документ.БПАГАнкета.Картинки КАК БПАГАнкетаКартинки
	|ГДЕ
	|	БПАГАнкетаКартинки.Вопрос.Код = &КодВопроса
	|	И БПАГАнкетаКартинки.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	БПАГАнкетаКартинки.Порядок";
	
	Запрос.УстановитьПараметр("Ссылка", Анкета);
	Запрос.УстановитьПараметр("КодВопроса", КодВопроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	КаталогКартинокАгента = КаталогОбмена + СокрЛП(Анкета.Агент.Код) + "\Images\";
	
	МассивФото = Новый Массив;
	Пока Выборка.Следующий() Цикл		
		МассивФото.Добавить(КаталогКартинокАгента + Выборка.ИмяФайла);
	КонецЦикла;
	
	Возврат МассивФото;

КонецФункции

Функция ПолучитьЗаголовокГалереиКартинок(КодВопроса) Экспорт
	
	ЗаголовокГалереи = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БПАГВопросыАнкет.Родитель.Наименование КАК НаименованиеРодителя,
	|	БПАГВопросыАнкет.Наименование КАК Наименование
	|ИЗ
	|	Справочник.БПАГВопросыАнкет КАК БПАГВопросыАнкет
	|ГДЕ
	|	БПАГВопросыАнкет.Код = &Код";
	Запрос.УстановитьПараметр("Код", КодВопроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда

		НаименованиеРодителя = Выборка.НаименованиеРодителя;
		
		Если НаименованиеРодителя <> "" Тогда
			ЗаголовокГалереи = НаименованиеРодителя + ". " + Символы.ПС;
		КонецЕсли;

		ЗаголовокГалереи = ЗаголовокГалереи + Выборка.Наименование;
	КонецЕсли;
	
	Возврат ЗаголовокГалереи;

КонецФункции


Функция ПолучитьHTMLМерчандайзинга(Документ, КаталогОбмена) Экспорт
	
	КаталогКартинокАгента = КаталогОбмена + СокрЛП(Документ.Агент.Код) + "\Images\";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БПАГФотоДокументов.Документ,
	|	БПАГФотоДокументов.Порядок КАК Порядок,
	|	БПАГФотоДокументов.Фото КАК Имя
	|ИЗ
	|	РегистрСведений.БПАГФотоДокументов КАК БПАГФотоДокументов
	|ГДЕ
	|	БПАГФотоДокументов.Документ = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	Фото = Запрос.Выполнить().Выгрузить();
	
	СодержимоеФотоШапки = "";
	СодержимоеФотоШапки = СодержимоеФотоШапки + "<tr><td>";
	Для Каждого тмпСтрока Из Фото Цикл
		
		СтрокаФото = "";
		СтрокаФото = СтрокаФото + "<img src=""file://" + КаталогКартинокАгента + тмпСтрока.Имя + """ width=300px alt=""" + "" + """ hspace=3 vspace=3/>";
		СодержимоеФотоШапки = СодержимоеФотоШапки + СтрокаФото;
	КонецЦикла;
	СодержимоеФотоШапки = СодержимоеФотоШапки + "</td></tr>";
	
	//*************************************
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	
	запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БПАГМерчандайзинг.Номер,
	|	БПАГМерчандайзинг.Дата,
	|	БПАГМерчандайзинг.Агент.Наименование КАК Агент,
	|	БПАГМерчандайзинг.Агент.Код КАК КодАгента,
	|	БПАГМерчандайзинг.Контрагент.Наименование КАК Контрагент,
	|	БПАГМерчандайзинг.ТорговаяТочка.Наименование КАК ТТ,
	|	БПАГМерчандайзинг.ТорговаяТочка.Адрес КАК АдресТТ
	|ИЗ
	|	Документ.БПАГМерчандайзинг КАК БПАГМерчандайзинг
	|ГДЕ
	|	БПАГМерчандайзинг.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БПАГСторЧек.Номер,
	|	БПАГСторЧек.Дата,
	|	БПАГСторЧек.Агент.Наименование,
	|	БПАГСторЧек.Агент.Код,
	|	БПАГСторЧек.Контрагент.Наименование,
	|	БПАГСторЧек.Контрагент.Наименование,
	|	БПАГСторЧек.Контрагент.АдресДоставки
	|ИЗ
	|	Документ.БПАГСторЧек КАК БПАГСторЧек
	|ГДЕ
	|	БПАГСторЧек.Ссылка = &Ссылка";
	
	#КонецОбласти
	
	запрос.УстановитьПараметр("Ссылка", Документ);
	
	шапка = запрос.Выполнить().Выгрузить();
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	
	запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БПАГМерчандайзингТовары.Номенклатура.Наименование КАК Наименование,
	|	БПАГМерчандайзингТовары.Номенклатура.Код КАК Код,
	|	БПАГМерчандайзингТовары.Количество КАК Количество,
	|	БПАГМерчандайзингТовары.Цена КАК Цена,
	|	БПАГМерчандайзингТовары.КоличествоФейсингов КАК КоличествоФейсингов,
	|	БПАГМерчандайзингТовары.СоответствиеПланограмме КАК СоответствиеПланограмме
	|ИЗ
	|	Документ.БПАГМерчандайзинг.Товары КАК БПАГМерчандайзингТовары
	|ГДЕ
	|	БПАГМерчандайзингТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БПАГСторЧекТовары.Номенклатура.Наименование,
	|	БПАГСторЧекТовары.Номенклатура.Код,
	|	БПАГСторЧекТовары.Количество,
	|	БПАГСторЧекТовары.Цена,
	|	БПАГСторЧекТовары.КоличествоФейсингов,
	|	БПАГСторЧекТовары.СоответствиеПланограмме
	|ИЗ
	|	Документ.БПАГСторЧек.Товары КАК БПАГСторЧекТовары
	|ГДЕ
	|	БПАГСторЧекТовары.Ссылка = &Ссылка";
	
	#КонецОбласти
	
	запрос.УстановитьПараметр("Ссылка", документ);
	
	строки = запрос.Выполнить().Выгрузить();
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	
	запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БПАГМерчандайзингКартинки.Номенклатура.Код КАК КодТовара,
	|	БПАГМерчандайзингКартинки.Имя
	|ИЗ
	|	Документ.БПАГМерчандайзинг.Картинки КАК БПАГМерчандайзингКартинки
	|ГДЕ
	|	БПАГМерчандайзингКартинки.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БПАГСторЧекКартинки.Номенклатура.Код,
	|	БПАГСторЧекКартинки.Имя
	|ИЗ
	|	Документ.БПАГСторЧек.Картинки КАК БПАГСторЧекКартинки
	|ГДЕ
	|	БПАГСторЧекКартинки.Ссылка = &Ссылка";
	
	#КонецОбласти
	
	запрос.УстановитьПараметр("Ссылка", Документ);
	
	Фото = запрос.Выполнить().Выгрузить();
	
	//Свойства в шапку документа
	запрос = Новый Запрос;
	
	запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БПАГЗначенияКатегорийСтрокДокументов.Документ,
	|	БПАГЗначенияКатегорийСтрокДокументов.Категория,
	|	БПАГЗначенияКатегорийСтрокДокументов.Значение,
	|	БПАГЗначенияКатегорийСтрокДокументов.Товар
	|ИЗ
	|	РегистрСведений.БПАГЗначенияКатегорийСтрокДокументов КАК БПАГЗначенияКатегорийСтрокДокументов
	|ГДЕ
	|	БПАГЗначенияКатегорийСтрокДокументов.Документ = &Ссылка";	
	
	запрос.УстановитьПараметр("Ссылка", Документ);
	
	значенияКатегорийСтрок = запрос.Выполнить().Выгрузить();
	
	заголовокФотоШапки = "";
	Для Каждого тмпСтрока Из значенияКатегорийСтрок Цикл
	   заголовокФотоШапки = заголовокФотоШапки + "</td><td bgcolor=#EEEEEE width=15% align=right>" + тмпСтрока.Категория;
	КонецЦикла;
	
	заголовокТабличнойЧасти = "";
	заголовокТабличнойЧасти = заголовокТабличнойЧасти + 
		"<tr><td bgcolor=#EEEEEE width=70%>" + "Товар" + 
		"</td><td bgcolor=#EEEEEE width=15% align=right>" + 
		"Количество" +  
		"</td><td bgcolor=#EEEEEE width=15% align=right>" + 
		"Количество фейсингов" + 
		"</td><td bgcolor=#EEEEEE width=15% align=right>" + 
		"Соответствие планограмме" + 
		заголовокФотоШапки + 
		"</td><td bgcolor=#EEEEEE>" + 
		"Фото" + 
		"</td></tr>";
	
	
	содержимоеТабличнойЧасти = заголовокТабличнойЧасти;
	Для Каждого тмпСтрока Из строки Цикл
		
		строкаФото = "";
		
		отбор = Новый Структура();
		отбор.Вставить("КодТовара", тмпСтрока.Код);
		
		массивФото = фото.НайтиСтроки(отбор);
		Если массивФото.Количество() > 0 Тогда
			строкаФото = строкаФото + 
				"<img src=""file://" + 
				каталогКартинокАгента + 
				массивФото[0].Имя + 
				""" width=70px alt=""" + 
				СокрЛП(тмпСтрока.Код) + 
				""" hspace=3 vspace=3/>";
				
		КонецЕсли;
		
		//СодержимоеТабличнойЧасти = СодержимоеТабличнойЧасти + "<tr><td bgcolor=#EEEEEE width=70%>" + тмпСтрока.Наименование + "</td><td bgcolor=#EEEEEE width=15% align=right>" + тмпСтрока.Количество + "</td><td>" + СтрокаФото + "</td></tr>";
		//СодержимоеТабличнойЧасти = СодержимоеТабличнойЧасти + "<tr><td bgcolor=#EEEEEE width=70%>" + тмпСтрока.Наименование + "</td><td bgcolor=#EEEEEE width=15% align=right>" + тмпСтрока.Количество + "</td><td bgcolor=#EEEEEE width=15% align=right>" + тмпСтрока.КоличествоФейсингов + "</td><td bgcolor=#EEEEEE width=15% align=right>" + ?(тмпСтрока.СоответствиеПланограмме, "Да", "Нет") + "</td><td bgcolor=#EEEEEE width=15% align=right>" + тмпСтрока.Категория1 + "</td><td>" + СтрокаФото + "</td></tr>";
		
		//определим, есть ли значения свойств в строке товара
		строкаЗначенияСвойствТовара = "";
		Для Каждого тмпСтрокаКатегории Из значенияКатегорийСтрок Цикл
			тмпНоменклатура = тмпСтрокаКатегории.Товар;
			Если тмпНоменклатура.Код = тмпСтрокаКатегории.Товар.Код Тогда	
		   		строкаЗначенияСвойствТовара = СтрокаЗначенияСвойствТовара + "</td><td bgcolor=#EEEEEE width=15% align=right>" + тмпСтрокаКатегории.Значение;
		    КонецЕсли;                                                      
		КонецЦикла;
		
		содержимоеТабличнойЧасти = содержимоеТабличнойЧасти + 
			"<tr><td bgcolor=#EEEEEE width=70%>" + 
			тмпСтрока.Наименование + 
			"</td><td bgcolor=#EEEEEE width=15% align=right>" + 
			тмпСтрока.Количество + 
			"</td><td bgcolor=#EEEEEE width=15% align=right>" + 
			тмпСтрока.КоличествоФейсингов + 
			"</td><td bgcolor=#EEEEEE width=15% align=right>" + 
			?(тмпСтрока.СоответствиеПланограмме, "Да", "Нет") + 
			строкаЗначенияСвойствТовара + 
			"</td><td>" + 
			строкаФото + 
			"</td></tr>";
			
	КонецЦикла;
	
	текст = "<!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.0 Transitional//EN"">
		|<HTML>
		|<HEAD>
		|<META HTTP-EQUIV=""Content-Type"" CONTENT=""text/html; CHARSET=utf-8"">
		|<TITLE></TITLE>
		|<STYLE type=""text/css"">
		|    }
		|    body, td, th {
		|        font-size: 14px;
		|		 font-family: Arial, sans-serif;
		|    }
		|    td, th {
		|        vertical-align: top;
		|    }
		|    .left {
		|        text-align: left;
		|    }
		|    .right {
		|        text-align: right;
		|    }
		|    .center {
		|        text-align: center;
		|    }
		|</STYLE>
		|</HEAD>
		|<BODY>
		|<table bgcolor=#F5D0A9 width=""100%""><tr><td><strong>" + "Мерчандайзинг №" + Шапка[0].Номер + " от " + Шапка[0].Дата + "</td></tr>
		|<tr><td>" + Шапка[0].Контрагент + "</td></tr>
		|<tr><td>" + Шапка[0].ТТ + "</td></tr>
		|</strong></p></table><br><table width=100%>" + содержимоеФотоШапки + "</table>
		//|</strong></p></table><br><table width=100%>" + ЗаголовокТабличнойЧасти + "</table>
		|</strong></p></table><br><table width=100%>" + содержимоеТабличнойЧасти + "</table>
		|</BODY>
		|</HTML>";
		
		
	Возврат текст;
		
КонецФункции

Функция ПолучитьHTMLМерчандайзингаУдалитьПроцедуру(Документ, КаталогОбмена) Экспорт
	
	КаталогКартинокАгента = КаталогОбмена + СокрЛП(Документ.Агент.Код) + "\Images\";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БПАГМерчандайзинг.Номер,
	|	БПАГМерчандайзинг.Дата,
	|	БПАГМерчандайзинг.Агент.Наименование КАК Агент,
	|	БПАГМерчандайзинг.Агент.Код КАК КодАгента,
	|	БПАГМерчандайзинг.Контрагент.Наименование КАК Контрагент,
	|	БПАГМерчандайзинг.ТорговаяТочка.Наименование КАК ТТ,
	|	БПАГМерчандайзинг.ТорговаяТочка.Адрес КАК АдресТТ
	|ИЗ
	|	Документ.БПАГМерчандайзинг КАК БПАГМерчандайзинг
	|ГДЕ
	|	БПАГМерчандайзинг.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	Шапка = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БПАГМерчандайзингТовары.Номенклатура.Наименование КАК Наименование,
	|	БПАГМерчандайзингТовары.Номенклатура.Код КАК Код,
	|	БПАГМерчандайзингТовары.Количество КАК Количество,
	|	БПАГМерчандайзингТовары.Цена КАК Цена
	|ИЗ
	|	Документ.БПАГМерчандайзинг.Товары КАК БПАГМерчандайзингТовары
	|ГДЕ
	|	БПАГМерчандайзингТовары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	БПАГМерчандайзингТовары.НомерСтроки";
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	Строки = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БПАГМерчандайзингКартинки.Номенклатура.Код КАК КодТовара,
	|	БПАГМерчандайзингКартинки.Имя
	|ИЗ
	|	Документ.БПАГМерчандайзинг.Картинки КАК БПАГМерчандайзингКартинки
	|ГДЕ
	|	БПАГМерчандайзингКартинки.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	БПАГМерчандайзингКартинки.Порядок";
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	Фото = Запрос.Выполнить().Выгрузить();
	
	СодержимоеТабличнойЧасти = "";
	Для Каждого тмпСтрока Из Строки Цикл
		
		СтрокаФото = "";
		Отбор = Новый Структура();
		Отбор.Вставить("КодТовара", тмпСтрока.Код);
		МассивФото = Фото.НайтиСтроки(Отбор);
		Если МассивФото.Количество() > 0 Тогда
			СтрокаФото = СтрокаФото + "<img src=""file://" + КаталогКартинокАгента + МассивФото[0].Имя + """ width=70px alt=""" + СокрЛП(тмпСтрока.Код) + """ hspace=3 vspace=3/>";
		КонецЕсли;
		
		СодержимоеТабличнойЧасти = СодержимоеТабличнойЧасти + "<tr><td bgcolor=#EEEEEE width=70%>" + тмпСтрока.Наименование + "</td><td bgcolor=#EEEEEE width=15% align=right>" + тмпСтрока.Количество + "</td><td>" + СтрокаФото + "</td></tr>";
	КонецЦикла;
	
	Текст = "<!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.0 Transitional//EN"">
		|<HTML>
		|<HEAD>
		|<META HTTP-EQUIV=""Content-Type"" CONTENT=""text/html; CHARSET=utf-8"">
		|<TITLE></TITLE>
		|<STYLE type=""text/css"">
		|    }
		|    body, td, th {
		|        font-size: 14px;
		|		 font-family: Arial, sans-serif;
		|    }
		|    td, th {
		|        vertical-align: top;
		|    }
		|    .left {
		|        text-align: left;
		|    }
		|    .right {
		|        text-align: right;
		|    }
		|    .center {
		|        text-align: center;
		|    }
		|</STYLE>
		|</HEAD>
		|<BODY>
		|<table bgcolor=#F5D0A9 width=""100%""><tr><td><strong>" + "Мерчандайзинг №" + Шапка[0].Номер + " от " + Шапка[0].Дата + "</td></tr>
		|<tr><td>" + Шапка[0].Контрагент + "</td></tr>
		|<tr><td>" + Шапка[0].ТТ + "</td></tr>
		|</strong></p></table><br><table width=100%>" + СодержимоеТабличнойЧасти + "</table>
		|</BODY>
		|</HTML>";
		
	Возврат Текст;
		
КонецФункции

Функция ПолучитьМассивКартинокМерчандайзинга(документ, кодТовара, каталогОбмена) Экспорт
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	
	запрос.Текст =
	"ВЫБРАТЬ
	|	БПАГМерчандайзингКартинки.Имя КАК ИмяФайла
	|ИЗ
	|	Документ.БПАГМерчандайзинг.Картинки КАК БПАГМерчандайзингКартинки
	|ГДЕ
	|	БПАГМерчандайзингКартинки.Номенклатура.Код = &КодТовара
	|	И БПАГМерчандайзингКартинки.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БПАГСторЧекКартинки.Имя
	|ИЗ
	|	Документ.БПАГСторЧек.Картинки КАК БПАГСторЧекКартинки
	|ГДЕ
	|	БПАГСторЧекКартинки.Ссылка = &Ссылка";
	
	#КонецОбласти
	
	запрос.УстановитьПараметр("Ссылка", документ);
	запрос.УстановитьПараметр("КодТовара", кодТовара);
	
	выборка = запрос.Выполнить().Выбрать();
	каталогКартинокАгента = каталогОбмена + СокрЛП(документ.Агент.Код) + "\Images\";
	
	массивФото = Новый Массив;
	Пока выборка.Следующий() Цикл		
		массивФото.Добавить(каталогКартинокАгента + выборка.ИмяФайла);
	КонецЦикла;
	
	Возврат массивФото;

КонецФункции


Функция ПолучитьHTMLШапкиМерчандайзинга(Документ, КаталогОбмена) Экспорт
	
	КаталогКартинокАгента = КаталогОбмена + СокрЛП(Документ.Агент.Код) + "\Images\";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БПАГМерчандайзинг.Номер,
	|	БПАГМерчандайзинг.Дата,
	|	БПАГМерчандайзинг.Агент.Наименование КАК Агент,
	|	БПАГМерчандайзинг.Агент.Код КАК КодАгента,
	|	БПАГМерчандайзинг.Контрагент.Наименование КАК Контрагент,
	|	БПАГМерчандайзинг.ТорговаяТочка.Наименование КАК ТТ,
	|	БПАГМерчандайзинг.ТорговаяТочка.Адрес КАК АдресТТ
	|ИЗ
	|	Документ.БПАГМерчандайзинг КАК БПАГМерчандайзинг
	|ГДЕ
	|	БПАГМерчандайзинг.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	Шапка = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БПАГМерчандайзингТовары.Номенклатура.Наименование КАК Наименование,
	|	БПАГМерчандайзингТовары.Номенклатура.Код КАК Код,
	|	БПАГМерчандайзингТовары.Количество КАК Количество,
	|	БПАГМерчандайзингТовары.Цена КАК Цена
	|ИЗ
	|	Документ.БПАГМерчандайзинг.Товары КАК БПАГМерчандайзингТовары
	|ГДЕ
	|	БПАГМерчандайзингТовары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	БПАГМерчандайзингТовары.НомерСтроки";
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	Строки = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	БПАГМерчандайзингКартинки.Номенклатура.Код КАК КодТовара,
	//|	БПАГМерчандайзингКартинки.Имя
	//|ИЗ
	//|	Документ.БПАГМерчандайзинг.Картинки КАК БПАГМерчандайзингКартинки
	//|ГДЕ
	//|	БПАГМерчандайзингКартинки.Ссылка = &Ссылка
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	БПАГМерчандайзингКартинки.Порядок";
	"ВЫБРАТЬ
	|	БПАГФотоДокументов.Документ,
	|	БПАГФотоДокументов.Порядок КАК Порядок,
	|	БПАГФотоДокументов.Фото КАК Имя
	|ИЗ
	|	РегистрСведений.БПАГФотоДокументов КАК БПАГФотоДокументов
	|ГДЕ
	|	БПАГФотоДокументов.Документ = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	Фото = Запрос.Выполнить().Выгрузить();
	
	СодержимоеТабличнойЧасти = "";
	СодержимоеТабличнойЧасти = СодержимоеТабличнойЧасти + "<tr><td>";
	Для Каждого тмпСтрока Из Фото Цикл
		
		СтрокаФото = "";
		//Отбор = Новый Структура();
		//Отбор.Вставить("КодТовара", тмпСтрока.Код);
		//МассивФото = Фото.НайтиСтроки(Отбор);
		//Если МассивФото.Количество() > 0 Тогда
		//СтрокаФото = СтрокаФото + "<img src=""file://" + КаталогКартинокАгента + МассивФото[0].Имя + """ width=70px alt=""" + СокрЛП(тмпСтрока.Код) + """ hspace=3 vspace=3/>";
		//КонецЕсли;
		СтрокаФото = СтрокаФото + "<img src=""file://" + КаталогКартинокАгента + тмпСтрока.Имя + """ width=70px alt=""" + "" + """ hspace=3 vspace=3/>";
		//СодержимоеТабличнойЧасти = СодержимоеТабличнойЧасти + "<tr><td>" + СтрокаФото + "</td></tr>";
		СодержимоеТабличнойЧасти = СодержимоеТабличнойЧасти + СтрокаФото;
	КонецЦикла;
	СодержимоеТабличнойЧасти = СодержимоеТабличнойЧасти + "</td></tr>";
	
	Текст = "<!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.0 Transitional//EN"">
		|<HTML>
		|<HEAD>
		|<META HTTP-EQUIV=""Content-Type"" CONTENT=""text/html; CHARSET=utf-8"">
		|<TITLE></TITLE>
		|<STYLE type=""text/css"">
		|    }
		|    body, td, th {
		|        font-size: 14px;
		|		 font-family: Arial, sans-serif;
		|    }
		|    td, th {
		|        vertical-align: top;
		|    }
		|    .left {
		|        text-align: left;
		|    }
		|    .right {
		|        text-align: right;
		|    }
		|    .center {
		|        text-align: center;
		|    }
		|</STYLE>
		|</HEAD>
		|<BODY>
//		|<table bgcolor=#F5D0A9 width=""100%""><tr><td><strong>" + "Мерчандайзинг №" + Шапка[0].Номер + " от " + Шапка[0].Дата + "</td></tr>
//		|<tr><td>" + Шапка[0].Контрагент + "</td></tr>
//		|<tr><td>" + Шапка[0].ТТ + "</td></tr>
		|</strong></p></table><br><table width=100%>" + СодержимоеТабличнойЧасти + "</table>
		|</BODY>
		|</HTML>";
		
	Возврат Текст;
		
КонецФункции

Функция ПолучитьМассивКартинокШапкиМерчандайзинга(Документ, КодТовара, КаталогОбмена) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БПАГФотоДокументов.Документ,
	|	БПАГФотоДокументов.Порядок КАК Порядок,
	|	БПАГФотоДокументов.Фото КАК ИмяФайла
	|ИЗ
	|	РегистрСведений.БПАГФотоДокументов КАК БПАГФотоДокументов
	|ГДЕ
	|	БПАГФотоДокументов.Документ = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Запрос.УстановитьПараметр("Ссылка", Документ);
	//Запрос.УстановитьПараметр("КодТовара", КодТовара);
	
	Выборка = Запрос.Выполнить().Выбрать();
	КаталогКартинокАгента = КаталогОбмена + СокрЛП(Документ.Агент.Код) + "\Images\";
	
	МассивФото = Новый Массив;
	Пока Выборка.Следующий() Цикл		
		МассивФото.Добавить(КаталогКартинокАгента + Выборка.ИмяФайла);
	КонецЦикла;
	
	Возврат МассивФото;

КонецФункции


