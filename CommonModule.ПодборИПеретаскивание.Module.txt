
#Область Подбор

// Инициализирует подбор путем открытия формы подбора и установки её параметров.
//
// Параметры
//  стПараметрыПодбора  - Структура - Содержит набор параметров подбора. Может содержать такие свойства:
//                 ИмяОбъекта  - Строка - Имя объекта, форму выбора которого необходимо использовать для подбора. Образуется
//                 		как полный путь к прикладному объекту (например, "Справочник.Товары"). Это свойство не может
//                 		использоваться совместно со свойством "ИмяФормы".
//                 ИмяФормы  - Строка - Имя формы, которая будет использоваться для подбора. Правила образования имени формы
//                 		можно найти в описании функции глобального контекста ПолучитьФорму(). Это свойство не может
//                 		использоваться совместно со свойством "ИмяОбъекта".
//                 ПолеТаблицы  - ПолеФормы - Поле таблицы формы, содержащее данные, получаемые подбором. Из свойств поля
//                 		будут получены параметры выбора формы подбора.
//                 ДополнительныеПараметрыОтбора  - Структура - Содержит параметры отбора, которые должны быть добавлены в
//                 		форму подбора в дополнение к параметрам выбора поля таблицы. Ключ структуры - имя элемента
//                 		отбора, а значение - значение отбора.
//                 ДополнительныеПараметрыФормы  - Структура - Параметры формы, которые будут переданы в открываемую форму
//                 		подбора. Ключ структуры - имя параметра, а значение - значение параметра формы.
//
Процедура ОткрытьПодбор(стПараметрыПодбора) Экспорт
	
	ПолеТаблицы = стПараметрыПодбора.ПолеТаблицы;
	
	// Параметры формы подбора.
	стПараметрыФормыПодбора = Новый Структура;
	стПараметрыФормыПодбора.Вставить("ЗакрыватьПриВыборе", Ложь);
	стПараметрыФормыПодбора.Вставить("РежимВыбора", Ложь);
	стПараметрыФормыПодбора.Вставить("МножественныйВыбор", Истина);
	стПараметрыФормыПодбора.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	
	// Дополнительные параметры формы.
	ДополнительныеПараметрыФормы = Неопределено;
	Если стПараметрыПодбора.Свойство("ДополнительныеПараметрыФормы", ДополнительныеПараметрыФормы) И ДополнительныеПараметрыФормы <> Неопределено Тогда
	
		Для каждого КлючИЗначение Из ДополнительныеПараметрыФормы Цикл
			стПараметрыФормыПодбора.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла; 
	
	КонецЕсли; 
	
	// Отбор списка.
	ФиксированныеНастройки = Новый НастройкиКомпоновкиДанных;
	
	Для каждого ПараметрВыбора Из ПолеТаблицы.ПараметрыВыбора Цикл
		
		ИмяОтбора = ПараметрВыбора.Имя;
		
		ПрефиксЭлементаОтбора = "Отбор.";
		Если Лев(ИмяОтбора, 6) = ПрефиксЭлементаОтбора Тогда
			ДобавитьЭлементОтбораСписка(ФиксированныеНастройки.Отбор, Сред(ИмяОтбора, 7), ПараметрВыбора.Значение);
		Иначе
			стПараметрыФормыПодбора.Вставить(ИмяОтбора, ПараметрВыбора.Значение);
		КонецЕсли; 
		
	КонецЦикла; 
	
	// Дополнительные параметры отбора.
	ДополнительныеПараметрыОтбора = Неопределено;
	Если стПараметрыПодбора.Свойство("ДополнительныеПараметрыОтбора", ДополнительныеПараметрыОтбора) И ДополнительныеПараметрыОтбора <> Неопределено Тогда
	
		Для каждого КлючИЗначение Из ДополнительныеПараметрыОтбора Цикл
			ДобавитьЭлементОтбораСписка(ФиксированныеНастройки.Отбор, КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла; 
	
	КонецЕсли; 
	
	стПараметрыФормыПодбора.Вставить("ФиксированныеНастройки", ФиксированныеНастройки);
	
	// Имя формы подбора.
	ИмяФормы = Неопределено;
	Если Не стПараметрыПодбора.Свойство("ИмяФормы", ИмяФормы) Или ИмяФормы = Неопределено Тогда
		ИмяФормы = стПараметрыПодбора.ИмяОбъекта + ".ФормаВыбора";
	КонецЕсли; 
	
	Таблица = ПолучитьФормуОбъектаИТаблицуФормы(стПараметрыПодбора.ПолеТаблицы).ТаблицаФормы;
	
	// Открываем форму подбора.
	ОткрытьФорму(ИмяФормы, стПараметрыФормыПодбора, Таблица,, ВариантОткрытияОкна.ОтдельноеОкно,,, РежимОткрытияОкнаФормы.Независимый);

КонецПроцедуры // ОткрытьПодбор()

// Обработка выбора значений в форме подбора. Процедура вызывается из обработчика события "ОбработкаВыбора"
// таблицы формы.
//
// Параметры
//  ВыбранноеЗначение  - Массив, Произвольный - Выбранное значение. В этот параметр передаётся соответствующее
//                 значение обработчика события "ОбработкаВыбора" таблицы формы.
//  КоллекцияДанных  - ДанныеФормыКоллекция, СписокЗначений - Коллекция данных, непосредственно в которую будут добавлены
//                 новые данные.
//  ИмяРеквизитаКоллекцииДанных  - Строка - Имя реквизита коллекции данных, содержащего подбираемые данные.
//  ПолеТаблицыФормы  - ПолеФормы - Поле формы, связанное с реквизитом таблицы формы.
//  ОбработчикВыбора  - ОписаниеОповещения, Неопределено - Описание оповещения, которое будет выполнено после выбора
//                 нового значения для дополнительной обработки этого значения. Если обработчик не указан, никаких
//                 дополнительных действий выполнено не будет.
//
Процедура ОбработатьПодбор(
	ВыбранноеЗначение,
	КоллекцияДанных,
	ИмяРеквизитаКоллекцииДанных,
	ПолеТаблицыФормы,
	ОбработчикВыбора = Неопределено) Экспорт

	ДобавитьВыбранныеЗначенияВКоллекциюДанных(ВыбранноеЗначение, КоллекцияДанных, ИмяРеквизитаКоллекцииДанных, ПолеТаблицыФормы, ОбработчикВыбора);

КонецПроцедуры // ОбработатьПодбор()

// Обработка выбора номенклатуры в форме подбора. Процедура вызывается из обработчика события "ОбработкаВыбора"
// таблицы формы. Предназначена для специальной обработки подбора значений типа СправочникСсылка.Номенклатура.
//
// Параметры
//  ВыбранноеЗначение  - Массив, Произвольный - Выбранное значение. В этот параметр передаётся соответствующее
//                 значение обработчика события "ОбработкаВыбора" таблицы формы.
//  КоллекцияДанных  - ДанныеФормыКоллекция, СписокЗначений - Коллекция данных, непосредственно в которую будут добавлены
//                 новые данные.
//  ИмяРеквизитаКоллекцииДанных  - Строка - Имя реквизита коллекции данных, содержащего подбираемые данные.
//  ПолеТаблицыФормы  - ПолеФормы - Поле формы, связанное с реквизитом таблицы формы.
//  ОбработчикВыбора  - ОписаниеОповещения, Неопределено - Описание оповещения, которое будет выполнено после выбора
//                 нового значения для дополнительной обработки этого значения. Если обработчик не указан, никаких
//                 дополнительных действий выполнено не будет.
//  ИмяРеквизитаКоличества  - Строка - Имя реквизита таблицы, в котором содержатся данные о количестве
//                 выбранной номенклатуры. При выборе режима "Запрашивать количество" введённое количество будет
//                 заполнено в этот реквизит таблицы.
//  ОбработчикВыбораКоличества  - ОписаниеОповещения, Неопределено - Описание оповещения, которое будет выполнено после
//                 выбора нового значения для дополнительной обработки этого значения. Если обработчик не указан, никаких
//                 дополнительных действий выполнено не будет.
//
Процедура ОбработатьПодборНоменклатура(
	ВыбранноеЗначение,
	КоллекцияДанных,
	ИмяРеквизитаКоллекцииДанных,
	ПолеТаблицыФормы,
	ОбработчикВыбора = Неопределено,
	ИмяРеквизитаКоличества = "Количество",
	ОбработчикВыбораКоличества = Неопределено) Экспорт
	
	мЗначенияДополнительныхРеквизитов = Новый Массив(1);
	мЗначенияДополнительныхРеквизитов[0] = Новый Структура("Имя,Значение,ОбработчикВыбора", ИмяРеквизитаКоличества, ВыбранноеЗначение.Количество, ОбработчикВыбораКоличества);
	ДобавитьВыбранныеЗначенияВКоллекциюДанных(ВыбранноеЗначение.Номенклатура, КоллекцияДанных, ИмяРеквизитаКоллекцииДанных, ПолеТаблицыФормы, ОбработчикВыбора, мЗначенияДополнительныхРеквизитов);

КонецПроцедуры // ОбработатьПодборНоменклатура()

#КонецОбласти 

#Область Перетаскивание

// Проверяет корректность перетаскиваемых данных. Для этого в функцию передаётся описание ожидаемого типа данных
// и отбор, которому должны соответствовать перетаскиваемые данные. При некорректных данных перетаскивание
// будет отменено.
//
// Параметры
//  ПараметрыПеретаскивания  - ПараметрыПеретаскивания - Содержит перетаскиваемое значение, тип действия и возможные
//                 действия при перетаскивании. Эти данные передаются в параметре события ПроверкаПеретаскивания.
//                 Дополнительные сведения содержатся в синтакс-помошнике.
//  СтандартнаяОбработка  - Булево - В данный параметр передаётся признак выполнения стандартной (системной) обработки
//                 события. Если в теле процедуры-обработчика установить данному параметру значение Ложь, стандартная
//                 обработка события производиться не будет.
//  ТипДанных  - Строка - Перетаскиваемые объекты будут проверяться на соответствие указанному типу.
//  Отбор  - Структура, Неопределено - Описание отбора. В качестве ключа элементов структуры указываются имена
//                 реквизитов проверяемых объектов, а в значениях элементов - значения, которым должен
//                 соответствовать реквизит объекта. В качестве значений структуры допускается использовать
//                 массив значений. Отбор может отсутствовать, тогда проверка на соответствие проводиться
//                 не будет.
//
Процедура ПроверкаПеретаскивания(
	ПараметрыПеретаскивания,
	СтандартнаяОбработка,
	ТипДанных,
	Отбор = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
	
	// Проверим тип данных и соответствие отбору. При несоответствии - отменим перетаскивание.
	Если ОбщегоНазначенияСервер.ПроверитьСоответствиеОбъектаОтбору(ПараметрыПеретаскивания.Значение, Отбор, Тип(ТипДанных)) Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
	Иначе
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли; 

КонецПроцедуры // ПроверкаПеретаскивания()

// Обрабатывает окончание перетаскивания в поле - приёмнике данных.
//
// Параметры
//  ПараметрыПеретаскивания  - ПараметрыПеретаскивания - Содержит перетаскиваемое значение, тип действия и возможные
//                 действия при перетаскивании. Эти данные передаются в параметре события ПроверкаПеретаскивания.
//                 Дополнительные сведения содержатся в синтакс-помошнике.
//  КоллекцияДанных  - ДанныеФормыКоллекция, СписокЗначений - Коллекция данных, непосредственно в которую будут добавлены
//                 новые данные.
//  ИмяРеквизитаКоллекцииДанных  - Строка - Имя реквизита таблицы, содержащего перетаскиваемые данные.
//  ПолеТаблицыФормы  - ПолеФормы - Поле формы, связанное с реквизитом таблицы формы.
//  ОбработчикВыбора  - ОписаниеОповещения, Неопределено - Описание оповещения, которое будет выполнено после выбора
//                 нового значения для дополнительной обработки этого значения. Если обработчик не указан, никаких
//                 дополнительных действий выполнено не будет.
//
Процедура Перетаскивание(
	ПараметрыПеретаскивания,
	КоллекцияДанных,
	ИмяРеквизитаКоллекцииДанных,
	ПолеТаблицыФормы,
	ОбработчикВыбора = Неопределено) Экспорт
	
	ДобавитьВыбранныеЗначенияВКоллекциюДанных(ПараметрыПеретаскивания.Значение, КоллекцияДанных, ИмяРеквизитаКоллекцииДанных, ПолеТаблицыФормы, ОбработчикВыбора);

КонецПроцедуры // Перетаскивание()

#КонецОбласти 

#Область ДополнительныеПроцедурыИФункции

// Добавляет новый элемент отбора в отбор списка формы подбора.
//
// Параметры
//  Отбор  - ОтборКомпоновкиДанных - Объект отбора, в который будет добавлен новый элемент.
//  ПутьКДаннымПоля  - Строка - Указывает путь к данным поля элемента отбора.
//  Значение  - СписокЗначений, Массив, ФиксированныйМассив, Произвольный - Произвольное значение или
//                 набор произвольных значений для отбора.
//
Процедура ДобавитьЭлементОтбораСписка(Отбор, ПутьКДаннымПоля, Значение)
	
	ТипЗначенияОтбора = ТипЗнч(Значение);

	ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
	ЭлементОтбора.ПравоеЗначение = Значение;
	Если ТипЗначенияОтбора = Тип("СписокЗначений") Или ТипЗначенияОтбора = Тип("Массив") Или ТипЗначенияОтбора = Тип("ФиксированныйМассив") Тогда
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	КонецЕсли; 
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

КонецПроцедуры // ДобавитьЭлементОтбораСписка()

// Непосредственно добавляет выбранные объекты подбора или перетаскивания в таблицу.
//
// Параметры
//  ВыбранноеЗначение  - Массив, Произвольный - Выбранное значение или массив значений.
//  КоллекцияДанных  - ДанныеФормыКоллекция, СписокЗначений - Коллекция данных, непосредственно в которую будут добавлены
//                 новые данные.
//  ИмяРеквизитаКоллекцииДанных  - Строка - Имя реквизита таблицы, содержащего добавляемые данные.
//  ПолеТаблицыФормы  - ПолеФормы - Поле формы, связанное с реквизитом таблицы формы.
//  ОбработчикВыбора  - ОписаниеОповещения, Неопределено - Описание оповещения, которое будет выполнено после выбора
//                 нового значения для дополнительной обработки этого значения. Если обработчик не указан, никаких
//                 дополнительных действий выполнено не будет.
//  мЗначенияДополнительныхРеквизитов  - Массив - Набор значений реквизитов, которые будут заполнены для каждой добавленной
//                 Имя  - Строка - Имя реквизита.
//                 Значение  - Произвольный - Устанавливаемое значение реквизита.
//                 ОбработчикВыбора  - ОписаниеОповещения, Неопределено - Описание оповещения, которое будет выполнено после
//                 		выбора нового значения для дополнительной обработки этого значения. Если обработчик не указан, никаких
//                 		дополнительных действий выполнено не будет.
//
Процедура ДобавитьВыбранныеЗначенияВКоллекциюДанных(
	ВыбранноеЗначение,
	КоллекцияДанных,
	ИмяРеквизитаКоллекцииДанных,
	ПолеТаблицыФормы,
	ОбработчикВыбора = Неопределено,
	мЗначенияДополнительныхРеквизитов = Неопределено)

	стДанные = ПолучитьФормуОбъектаИТаблицуФормы(ПолеТаблицыФормы);
	ФормаОбъекта = стДанные.ФормаОбъекта;
	ТаблицаФормы = стДанные.ТаблицаФормы;

	// Массив выбранных значений.
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		мОбъекты = ВыбранноеЗначение;
	Иначе
		
		мОбъекты = Новый Массив(1);
		мОбъекты[0] = ВыбранноеЗначение;
		
	КонецЕсли;
	
	// Добавим выбранные значения в таблицу.
	мНовыеСтроки = Новый Массив;
	Для каждого Объект Из мОбъекты Цикл
		
		Если ТипЗнч(КоллекцияДанных) = Тип("СписокЗначений") Тогда
			НайденнаяСтрока = КоллекцияДанных.НайтиПоЗначению(Объект);
		Иначе
		
			мНайденныеСтроки = КоллекцияДанных.НайтиСтроки(Новый Структура(ИмяРеквизитаКоллекцииДанных, Объект));
			НайденнаяСтрока = ?(мНайденныеСтроки.Количество() = 0, Неопределено, мНайденныеСтроки[0]);
		
		КонецЕсли; 
		
		Если НайденнаяСтрока = Неопределено Тогда
			
			НоваяСтрока = ДобавитьНовуюСтрокуПодбора(КоллекцияДанных, ИмяРеквизитаКоллекцииДанных, Объект, ТаблицаФормы, мЗначенияДополнительныхРеквизитов);
			мНовыеСтроки.Добавить(НоваяСтрока);
			
			ФормаОбъекта.Модифицированность = Истина;	// Для нестандартного вызова подбора установим признак модифицированности формы.
			
		Иначе
			ТаблицаФормы.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли; 
	
	КонецЦикла; 
	
	// Если указан обработчик - вызовем его.
	Если ОбработчикВыбора <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОбработчикВыбора, мНовыеСтроки);
	КонецЕсли;
	
	// Заполним значения дополнительных параметров.
	Если мЗначенияДополнительныхРеквизитов <> Неопределено Тогда
		
		Для каждого стЗначенияДополнительныхРеквизитов Из мЗначенияДополнительныхРеквизитов Цикл
			
			// Если указан обработчик для поля формы - вызовем его.
			Если стЗначенияДополнительныхРеквизитов.ОбработчикВыбора <> Неопределено Тогда
				ВыполнитьОбработкуОповещения(стЗначенияДополнительныхРеквизитов.ОбработчикВыбора, мНовыеСтроки);
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЕсли;

КонецПроцедуры // ДобавитьВыбранныеЗначенияВКоллекциюДанных()

// По переданному элементу формы типа "ПолеФормы" определяет таблицу формы, которой принадлежит это поле, и саму
// форму, в которой расположены элементы управления.
//
// Параметры
//  ПолеТаблицыФормы  - ПолеФормы - Поле таблицы, которое представляет добавляемые в таблицу данные.
//
// Возвращаемое значение:
//   Структура   - Таблица формы и форма, полученные через переданное поле формы. Содержит следующие свойства:
//                 ФормаОбъекта  - УправляемаяФорма - Форма объекта, в которой расположены элементы управления.
//                 ТаблицаФормы  - ТаблицаФормы - Таблица формы, которой принадлежит переданное поле.
//
Функция ПолучитьФормуОбъектаИТаблицуФормы(ПолеТаблицыФормы) Экспорт

	// Получим форму объекта и родительскую таблицу формы по иерархии элементов формы. Это делается потому, что поле
	// таблицы, в которое осуществляется добавление выбранных значений, может принадлежать группе колонок, а не
	// непосредственно таблице.
	ФормаОбъекта = Неопределено;
	ТаблицаФормы = Неопределено;
	РодительПоля = ПолеТаблицыФормы.Родитель;
	Пока Истина Цикл
		
		РодительПоляТип = ТипЗнч(РодительПоля);
		Если РодительПоляТип = Тип("УправляемаяФорма") Тогда
		
			ФормаОбъекта = РодительПоля;
			Прервать;
		
		ИначеЕсли РодительПоляТип = Тип("ТаблицаФормы") Тогда
			ТаблицаФормы = РодительПоля;
		КонецЕсли; 
		
		РодительПоля = РодительПоля.Родитель;
		
	КонецЦикла; 
	
	Возврат Новый Структура("ФормаОбъекта,ТаблицаФормы", ФормаОбъекта, ТаблицаФормы);

КонецФункции // ПолучитьФормуОбъектаИТаблицуФормы()

// Добавляет новую строку в переданную коллекцию данных. Указанный реквизит коллекции будет заполнен выбранным
// значением. При необходимости будут заполнены и другие реквизиты.
//
// Параметры
//  КоллекцияДанных  - ДанныеФормыКоллекция, СписокЗначений - Коллекция данных, непосредственно в которую будут добавлены
//                 новые данные.
//  ИмяРеквизитаКоллекцииДанных  - Строка - Имя реквизита таблицы, содержащего добавляемые данные.
//  Объект  - Любая ссылка - Добавляемые данные.
//  ТаблицаФормы  - ТаблицаФормы - Таблица формы, которой принадлежит переданное поле.
//  мЗначенияДополнительныхРеквизитов  - Массив - Набор значений реквизитов, которые будут заполнены для каждой добавленной
//                 строки таблицы. Каждое значение представляет собой структуру, в качестве ключа элементов котрой
//                 указываются имена реквизитов таблицы, а в значениях элементов - значения, которыми будут заполнены эти
//                 реквизиты.
//
// Возвращаемое значение:
//   ДанныеФормыЭлементКоллекции   - Новая строка коллекции данных.
//
Функция ДобавитьНовуюСтрокуПодбора(
	КоллекцияДанных,
	ИмяРеквизитаКоллекцииДанных,
	Объект,
	ТаблицаФормы,
	мЗначенияДополнительныхРеквизитов = Неопределено)
	
	НоваяСтрока = КоллекцияДанных.Добавить();
	НоваяСтрока[ИмяРеквизитаКоллекцииДанных] = Объект;
	
	ТаблицаФормы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	// Заполним значения дополнительных параметров.
	Если мЗначенияДополнительныхРеквизитов <> Неопределено Тогда
		
		Для каждого стЗначенияДополнительныхРеквизитов Из мЗначенияДополнительныхРеквизитов Цикл
			НоваяСтрока[стЗначенияДополнительныхРеквизитов.Имя] = стЗначенияДополнительныхРеквизитов.Значение;
		КонецЦикла; 
		
	КонецЕсли;
	
	Возврат НоваяСтрока;

КонецФункции // ДобавитьНовуюСтрокуПодбора()

#КонецОбласти 
