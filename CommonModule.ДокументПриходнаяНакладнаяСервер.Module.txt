
// Обрабатывает изменение значения реквизита "Контрагент".
//
// Параметры:
//  объект  - ДанныеФормыСтруктура, ДокументОбъект.ПриходнаяНакладная - Объект, в
//                 котором обрабатывает изменение значения реквизита.
//
Процедура КонтрагентПриИзменении(объект) Экспорт

	контрагентТипЦен = объект.Контрагент.ТипЦен;
	Если контрагентТипЦен.Пустая() Тогда
		объект.ТипЦен = Справочники.ТипыЦен.Закупка;
	Иначе
		объект.ТипЦен = контрагентТипЦен;
	КонецЕсли; 
	
	Если объект.Ссылка.Пустая() Тогда
		объект.Подразделение = объект.Контрагент.Родитель.Подразделение;
	КонецЕсли;
	
	объект.Скидка = объект.Контрагент.ПроцентСкидки;
	
	ТипЦенПриИзменении(объект);

КонецПроцедуры // КонтрагентПриИзменении()

// Обрабатывает изменение значения реквизита "ТипЦен".
//
// Параметры:
//  объект  - ДанныеФормыСтруктура, ДокументОбъект.ПриходнаяНакладная - Объект, в
//                 котором обрабатывает изменение значения реквизита.
//
Процедура ТипЦенПриИзменении(объект) Экспорт

	наборНоменклатуры = ОбработкаТабличныхЧастейКлиентСервер.ВыгрузитьКолонку(объект.Запасы, "Номенклатура");
	характеристикиЦен = ЦенообразованиеСервер.ПолучитьЦеныНоменклатуры(объект.Дата, объект.Подразделение, наборНоменклатуры, объект.ТипЦен);
	
	Для каждого строкаЗапасы Из объект.Запасы Цикл
	
		ЗаполнитьЗначенияСвойств(строкаЗапасы, характеристикиЦен[строкаЗапасы.Номенклатура]);
		ДокументПриходнаяНакладнаяКлиентСервер.РассчитатьДанныеСтроки(строкаЗапасы);
	
	КонецЦикла; 

КонецПроцедуры // ТипЦенПриИзменении()

// Обрабатывает данные указанных строк таблицы "Запасы" при изменении значения
// реквизита "Номенклатура".
//
// Параметры:
//  объект  - ДанныеФормыСтруктура, ДокументОбъект.ПриходнаяНакладная - Объект, в
//                 котором обрабатывает изменение значения реквизита.
//  данные  - Табличная часть, Массив - Коллекция обрабатываемых строк: табличная часть
//                 или массив идентификаторов строк таблицы формы (тип Число).
//
Процедура ОбработатьДанныеСтрокПриИзмененииНоменклатурыЗапасы(объект, данные) Экспорт
	
	коллекцияСтрок = ОбработкаТабличныхЧастейСервер.ПолучитьКоллекциюОбрабатываемыхСтрок(данные, объект);
	наборНоменклатуры = ОбработкаТабличныхЧастейКлиентСервер.ВыгрузитьКолонку(коллекцияСтрок, "Номенклатура");

	характеристикиЦен = ЦенообразованиеСервер.ПолучитьЦеныНоменклатуры(объект.Дата, объект.Подразделение, наборНоменклатуры, объект.ТипЦен);
	
	Для каждого данныеСтроки Из коллекцияСтрок Цикл
		
		номенклатура = данныеСтроки.Номенклатура;
		
		ЗаполнитьЗначенияСвойств(данныеСтроки, характеристикиЦен[номенклатура]);
		данныеСтроки.ЕдиницаИзмерения = номенклатура.ЕдиницаИзмерения;

		ДокументПриходнаяНакладнаяКлиентСервер.РассчитатьДанныеСтроки(данныеСтроки);
		
	КонецЦикла; 

КонецПроцедуры // ОбработатьДанныеСтрокПриИзмененииНоменклатурыЗапасы()

// Обрабатывает данные указанных строк таблицы "Запасы" при изменении значения
// реквизита "Количество".
//
// Параметры:
//  объект  - ДанныеФормыСтруктура, ДокументОбъект.ПриходнаяНакладная - Объект, в
//                 котором обрабатывает изменение значения реквизита.
//  данные  - Табличная часть, Массив - Коллекция обрабатываемых строк: табличная часть
//                 или массив идентификаторов строк таблицы формы (тип Число).
//
Процедура ОбработатьДанныеСтрокПриИзмененииКоличества(объект, данные) Экспорт

	коллекцияСтрок = ОбработкаТабличныхЧастейСервер.ПолучитьКоллекциюОбрабатываемыхСтрок(данные, объект);
	
	Для каждого данныеСтроки Из коллекцияСтрок Цикл
		ДокументПриходнаяНакладнаяКлиентСервер.РассчитатьДанныеСтроки(данныеСтроки);
	КонецЦикла; 

КонецПроцедуры // ОбработатьДанныеСтрокПриИзмененииКоличества()

// Распределяет дополнительные расходы на запасы.
//
// Параметры:
//  объект  - ДанныеФормыСтруктура, ДокументОбъект.ПриходнаяНакладная - Объект, в
//                 котором распределяются расходы.
//
Процедура РаспределитьРасходы(объект) Экспорт

	Если Не объект.ВключатьРасходыВСебестоимость
		Или объект.ДопРасходыНаПриобретение.Итог("Сумма") = 0 Тогда
		
		// Нечего распределять.
		Возврат;
	КонецЕсли;
	
	// Отберём только косвенные расходы.
	прямыеРасходы = Новый ТаблицаЗначений;                               
	прямыеРасходы.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	прямыеРасходы.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	
	суммаКРаспределению = 0;
	
	Для каждого строкаДопРасходыНаПриобретение Из объект.ДопРасходыНаПриобретение Цикл
		
		Если ЗначениеЗаполнено(строкаДопРасходыНаПриобретение.Номенклатура) Тогда
			
			новаяСтрока = прямыеРасходы.Добавить();
			новаяСтрока.Номенклатура = строкаДопРасходыНаПриобретение.Номенклатура;
			новаяСтрока.Сумма = строкаДопРасходыНаПриобретение.Сумма;
			
		Иначе
			суммаКРаспределению = суммаКРаспределению + строкаДопРасходыНаПриобретение.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	запрос.Текст =
	"ВЫБРАТЬ
	|	Запасы.Номенклатура,
	|	Запасы.БазаРаспределения,
	|	Запасы.НомерСтроки
	|ПОМЕСТИТЬ ТаблицаЗапасы
	|ИЗ
	|	&Запасы КАК Запасы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураВес.Номенклатура,
	|	НоменклатураВес.БазаРаспределения,
	|	СУММА(НоменклатураВесИтоги.БазаРаспределения) КАК БазаИтого,
	|	НоменклатураВес.БазаРаспределения / СУММА(НоменклатураВесИтоги.БазаРаспределения) * &СуммаКРаспределению КАК Сумма,
	|	НоменклатураВес.НомерСтроки
	|ИЗ
	|	ТаблицаЗапасы КАК НоменклатураВес
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЗапасы КАК НоменклатураВесИтоги
	|		ПО (ИСТИНА)
	|
	|СГРУППИРОВАТЬ ПО
	|	НоменклатураВес.Номенклатура,
	|	НоменклатураВес.БазаРаспределения,
	|	НоменклатураВес.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатураВес.НомерСтроки";
	#КонецОбласти
	
	таблицаЗапасы = Новый ТаблицаЗначений;                               
	таблицаЗапасы.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	таблицаЗапасы.Колонки.Добавить("БазаРаспределения", Новый ОписаниеТипов("Число"));
	таблицаЗапасы.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	
	Для каждого строкаЗапасы Из объект.Запасы Цикл
		
		новаяСтрока = таблицаЗапасы.Добавить();
		новаяСтрока.НомерСтроки = строкаЗапасы.НомерСтроки;
		новаяСтрока.Номенклатура = строкаЗапасы.Номенклатура;
		новаяСтрока.БазаРаспределения = ?(строкаЗапасы.Номенклатура.Вес = 0, 1, строкаЗапасы.Номенклатура.Вес) * строкаЗапасы.Количество;
		
	КонецЦикла;
	
	Если таблицаЗапасы.Итог("БазаРаспределения") = 0 Тогда
		Возврат;	// Нет базы распределения.
	КонецЕсли;
	
	запрос.УстановитьПараметр("Запасы", таблицаЗапасы);
	запрос.УстановитьПараметр("СуммаКРаспределению", СуммаКРаспределению);
	
	выборка = запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока выборка.Следующий() Цикл
		
		текущаяСтрока = объект.Запасы[выборка.НомерСтроки - 1];
		текущаяСтрока.Маркетинг = выборка.Сумма / текущаяСтрока.Количество; // нужна точность (15,5)
		
		// Поищем "прямые расходы".
		параметрыОтбора = Новый Структура;
		параметрыОтбора.Вставить("Номенклатура", текущаяСтрока.Номенклатура);
		найденныеСтроки = прямыеРасходы.НайтиСтроки(параметрыОтбора);

		Если найденныеСтроки.Количество() > 0 Тогда
			
			суммаПрямыхРасходов = 0;
			Для индекс = 0 По найденныеСтроки.Количество() - 1 Цикл
				суммаПрямыхРасходов = суммаПрямыхРасходов + найденныеСтроки[индекс].Сумма;
			КонецЦикла;
			
			текущаяСтрока.Маркетинг = текущаяСтрока.Маркетинг + (суммаПрямыхРасходов / текущаяСтрока.Количество);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // РаспределитьРасходы()
