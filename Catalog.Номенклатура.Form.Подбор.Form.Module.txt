
#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("Подразделение", Подразделение);
	Параметры.Свойство("РазрешитьЗапрашиватьКоличество", РазрешитьЗапрашиватьКоличество);
	
	период = Неопределено;
	Параметры.Свойство("Период", период);
	
	типЦен = Неопределено;
	Параметры.Свойство("ТипЦен", типЦен);
	
	менеджер = Неопределено;
	Параметры.Свойство("Менеджер", менеджер);
	
	Список.Параметры.УстановитьЗначениеПараметра("Период", период);
	Список.Параметры.УстановитьЗначениеПараметра("ПериодПродаж", период);	// Из-за ошибки платформы один и тот же период передаём списку под разными именами.
	Список.Параметры.УстановитьЗначениеПараметра("Подразделение", Подразделение);
	Список.Параметры.УстановитьЗначениеПараметра("Менеджер", менеджер);
	Список.Параметры.УстановитьЗначениеПараметра("ТипЦен", типЦен);
	Список.Параметры.УстановитьЗначениеПараметра("ВалютаЦены", Константы.ВалютаУчета.Получить());
	
	ЗаполнитьДеревоГрупп(менеджер);	
	
	Элементы.Подразделение.Видимость 			= Не Подразделение.Пустая();
	Элементы.Остаток.Видимость 					= Элементы.Подразделение.Видимость;
	Элементы.ЗапрашиватьКоличество.Видимость 	= РазрешитьЗапрашиватьКоличество;
	
	Если Не Элементы.Найти("Цена") = Неопределено Тогда
		Если ЗначениеЗаполнено(типЦен) И ТипЗнч(типЦен) = Тип("СправочникСсылка.ТипыЦен") Тогда
			Элементы.Цена.Заголовок = типЦен.Наименование;
		Иначе
			Элементы.Цена.Видимость = Ложь;
		КонецЕсли; 
	КонецЕсли;
	
	КоличествоОписаниеТипа = Метаданные.ОпределяемыеТипы.КоличествоНеотрицательное.Тип;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		группаНоменклатуры = Неопределено;
	Иначе
		группаНоменклатуры = ТекущиеДанные.Ссылка;
	КонецЕсли; 
	Список.Параметры.УстановитьЗначениеПараметра("ГруппаНоменклатуры", группаНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если РазрешитьЗапрашиватьКоличество Тогда
		Элементы.ЗапрашиватьКоличество.Доступность = (Элемент.ВыделенныеСтроки.Количество() = 1);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	Если РазрешитьЗапрашиватьКоличество Тогда
		
		СтандартнаяОбработка = Ложь;
		
		стДанныеПодбора = Новый Структура("Номенклатура,Количество", Значение, 0);
		
		Если Значение.Количество() = 1 И ЗапрашиватьКоличество Тогда
			
			КвалификаторыЧисла = КоличествоОписаниеТипа.КвалификаторыЧисла;
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВводКоличества", ЭтотОбъект, стДанныеПодбора);
			ПоказатьВводЧисла(ОписаниеОповещения, 1, НСтр("ru = 'Введите количество'"), КвалификаторыЧисла.Разрядность, КвалификаторыЧисла.РазрядностьДробнойЧасти);
			
		Иначе
			ОповеститьОВыбореЗначений(стДанныеПодбора);
		КонецЕсли; 
	
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#Область ДействияКоманд

&НаКлиенте
Процедура ОбзорКартинок(Команда)
	
	текущаяСтрока = Элементы.Список.ТекущаяСтрока;
	Если текущаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для просмотра картинок необходимо выбрать номенклатуру в списке номенклатуры.'"));
	Иначе
		ОткрытьФорму("Справочник.Номенклатура.Форма.ОбзорКартинок", Новый Структура("Номенклатура", текущаяСтрока), ЭтотОбъект);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеПроцедурыИФункции

// Посылает оповещение владельцу формы о выполнении выбора или подбора.
//
// Параметры:
//  стДанныеПодбора  - Структура - Выбранные данные. Содержит следующие поля:
//                 Номенклатура  - Массив - Набор выбранных значений типа СправочникСсылка.Номенклатура.
//                 Количество  - Число - Количество номенклатуры.
//
&НаКлиенте
Процедура ОповеститьОВыбореЗначений(стДанныеПодбора)
	ОповеститьОВыборе(стДанныеПодбора);
КонецПроцедуры // ОповеститьОВыбореЗначений()

// Процедура обратного вызова для обработки ввода количества номенклатуры.
//
// Параметры:
//  Число  - Число, Неопределено - Введённое значение количества. Если пользователь отказался от выбора, будет
//                 передано значение Неопределено.
//  стДанныеПодбора  - Структура - Выбранные данные. Поля структуры описаны в процедуре ОповеститьОВыбореЗначений().
//
&НаКлиенте
Процедура ОбработатьВводКоличества(Число, стДанныеПодбора) Экспорт

	Если Число <> Неопределено Тогда
		
		стДанныеПодбора.Количество = Число;
		ОповеститьОВыбореЗначений(стДанныеПодбора);
	
	КонецЕсли; 

КонецПроцедуры // ОбработатьВводКоличества()

// Заполняет дерево групп для ассортимента агента, у которого указан требуемый
// менеджер.
//
// Параметры:
//  менеджер  - СправочникСсылка.Менеджеры - Менеджер, по значению которого будет
//                 найден агент со списком ассортимента.
//
&НаСервере
Процедура ЗаполнитьДеревоГрупп(менеджер)

	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БПАГАссортиментыСостав.Номенклатура.Номенклатура КАК Ссылка
	|ИЗ
	|	Справочник.БПАГАссортименты.Состав КАК БПАГАссортиментыСостав
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГАгенты КАК БПАГАгенты
	|		ПО БПАГАссортиментыСостав.Ссылка = БПАГАгенты.Ассортимент
	|ГДЕ
	|	БПАГАгенты.Менеджер = &Менеджер
	|	И БПАГАссортиментыСостав.Номенклатура.Номенклатура.ЭтоГруппа
	|	И НЕ БПАГАссортиментыСостав.Номенклатура.Номенклатура.ПометкаУдаления";
	#КонецОбласти
	
	запрос.УстановитьПараметр("Менеджер", менеджер);
	
	кэшСтрокДерева = Новый Соответствие;
	
	временноеДерево = РеквизитФормыВЗначение("Дерево");
	
	выборка = запрос.Выполнить().Выбрать();
	Пока выборка.Следующий() Цикл
		ДобавитьГруппуВДерево(выборка.Ссылка, временноеДерево, кэшСтрокДерева);
	КонецЦикла; 
	
	временноеДерево.Строки.Сортировать("Ссылка", Истина);
	ЗначениеВРеквизитФормы(временноеДерево, "Дерево");

КонецПроцедуры // ЗаполнитьДеревоГрупп()

// Рекурсивно добавляет группу номенклатуры в дерево групп.
//
// Параметры:
//  группаНоменклатуры  - СправочникСсылка.Номенклатура - Добавляемая группа номенклатуры.
//  коллекцияДерева  - ДеревоЗначений, СтрокаДереваЗначений - Элемент, в коллекцию строк
//                 которого будет добавлена группа номенклатуры.
//  кэшСтрокДерева  - Соответствие - Кэш строк дерева для более эффективного поиска. В
//                 качестве ключа используется ссылка на элемент справочника "Номенклатура",
//                 а значением является строка дерева значений, в которой находится этот
//                 элемент.
//
// Возвращаемое значение:
//   СтрокаДереваЗначений   - Добавленная строка дерева групп.
//
&НаСервере
Функция ДобавитьГруппуВДерево(группаНоменклатуры, коллекцияДерева, кэшСтрокДерева)

	Родитель = группаНоменклатуры.Родитель;
	Если Родитель.Пустая() Тогда
		строкаРодитель = коллекцияДерева;
	Иначе
	
		строкаРодитель = кэшСтрокДерева[Родитель];
		Если строкаРодитель = Неопределено Тогда
			строкаРодитель = ДобавитьГруппуВДерево(Родитель, коллекцияДерева, кэшСтрокДерева);
		КонецЕсли; 
	
	КонецЕсли; 
	
	строкаКоллекцияДерева = строкаРодитель.Строки.Добавить();
	строкаКоллекцияДерева.Ссылка = группаНоменклатуры;
	
	кэшСтрокДерева.Вставить(группаНоменклатуры, строкаКоллекцияДерева);
	
	Возврат строкаКоллекцияДерева;
	
КонецФункции // ДобавитьГруппуВДерево()

#КонецОбласти 