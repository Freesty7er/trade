
#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(отказ, режимПроведения)
	
	итСуммаПереоценки = 0;
	итСуммаНедостачи = 0;
	итСуммаИзлишки = 0;
	
	Движения.ПартииТоваровНаСкладах.Записывать = Истина;
	Движения.ФинансовыйРезультат.Записывать = Истина;
	
	Для Каждого строкаЗапасы Из Состав Цикл
		
		// переоценка
		Если Не(строкаЗапасы.Сумма = строкаЗапасы.Стоимость) Тогда
			
			движение = Движения.ПартииТоваровНаСкладах.ДобавитьПриход();
			
			движение.Период 		= Дата;
			движение.Номенклатура 	= строкаЗапасы.Номенклатура;
			движение.Склад 			= СтруктурнаяЕдиница;
			движение.Подразделение 	= Подразделение;
			движение.Количество 	= 0;
			движение.Стоимость 		= Окр(строкаЗапасы.Сумма - строкаЗапасы.Стоимость, 2);
			движение.СчетУчета		= строкаЗапасы.Номенклатура.СчетУчета;
			//движение.КорСчет		= ПланыСчетов.Внутренний.;
			движение.ВидХранения	= Перечисления.ВидыХраненияЗапасов.НаСкладе;
			
			итСуммаПереоценки = итСуммаПереоценки + Окр(строкаЗапасы.Сумма - строкаЗапасы.Стоимость, 2)
			
		КонецЕсли;

		
		// Оприхдуем излишки
		Если Не(строкаЗапасы.КоличествоИзлишек = 0) Тогда
			
			движение = Движения.ПартииТоваровНаСкладах.ДобавитьРасход();
			
			движение.Период 		= Дата;
			движение.Номенклатура 	= строкаЗапасы.Номенклатура;
			движение.Склад 			= СтруктурнаяЕдиница;
			движение.Подразделение 	= Подразделение;
			движение.Количество 	= -строкаЗапасы.КоличествоИзлишек;
			движение.Стоимость 		= -1*Окр(строкаЗапасы.СуммаИзлишек, 2);
			движение.СчетУчета		= строкаЗапасы.Номенклатура.СчетУчета;
			//движение.КорСчет		= ПланыСчетов.Внутренний.;
			движение.ВидХранения	= Перечисления.ВидыХраненияЗапасов.НаСкладе;
			
			итСуммаИзлишки = итСуммаИзлишки + строкаЗапасы.СуммаИзлишек;
			
		КонецЕсли;
		
		// Спишем недостачу
		Если Не(строкаЗапасы.КоличествоНедостача = 0) Тогда
			
			движение = Движения.ПартииТоваровНаСкладах.ДобавитьРасход();
			
			движение.Период 		= Дата;
			движение.Номенклатура 	= строкаЗапасы.Номенклатура;
			движение.Склад 			= СтруктурнаяЕдиница;
			движение.Подразделение 	= Подразделение;
			движение.Количество 	= строкаЗапасы.КоличествоНедостача;
			движение.Стоимость 		= Окр(строкаЗапасы.СуммаНедостача, 2);
			движение.СчетУчета		= строкаЗапасы.Номенклатура.СчетУчета;
			//движение.КорСчет		= ПланыСчетов.Внутренний.;
			движение.ВидХранения	= Перечисления.ВидыХраненияЗапасов.НаСкладе;
			
			итСуммаНедостачи = итСуммаНедостачи + строкаЗапасы.СуммаНедостача;
			
		КонецЕсли;
		
	
	КонецЦикла;
	
	Если Не итСуммаПереоценки = 0 Тогда
		
		движение = Движения.ФинансовыйРезультат.Добавить();
		
		движение.Период 		= Дата;
		движение.Подразделение	= Подразделение;
		движение.СтатьяДоходов 	= Справочники.СтатьиДоходов.Переоценка;
		движение.СуммаДоходов	= итСуммаПереоценки;

	КонецЕсли;
	
	
	Если Не (итСуммаНедостачи - итСуммаИзлишки) = 0 Тогда
		
		движение = Движения.ФинансовыйРезультат.Добавить();
		
		движение.Период 		= Дата;
		движение.Подразделение	= Подразделение;
		
		Если СтруктурнаяЕдиница.СтатьяЗатратПриСписанииНедостачи.Пустая() Тогда
			движение.СтатьяЗатрат	= Справочники.СтатьиЗатрат.СписаниеНедостачи;
		Иначе
			движение.СтатьяЗатрат	= СтруктурнаяЕдиница.СтатьяЗатратПриСписанииНедостачи;
		КонецЕсли;
		
		движение.СуммаРасходов	= итСуммаНедостачи - итСуммаИзлишки;
		
	КонецЕсли;
	
	#Область ПоследовательностьЗапасы
	
	Если Не отказ Тогда
		
		запрос = Новый Запрос;
		
		#Область ТекстЗапроса
		
		запрос.Текст =
		"ВЫБРАТЬ
		|	СоставДокумента.Ссылка.Подразделение,
		|	СоставДокумента.Номенклатура.Родитель.Склад КАК МестоХранения,
		|	СоставДокумента.Номенклатура.Родитель.СчетУчета КАК СчетУчета
		|ИЗ
		|	Документ.Инвентаризация.Состав КАК СоставДокумента
		|ГДЕ
		|	СоставДокумента.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	СоставДокумента.Номенклатура.Родитель.СчетУчета,
		|	СоставДокумента.Ссылка.Подразделение,
		|	СоставДокумента.Номенклатура.Родитель.Склад";
			
		#КонецОбласти 
		
		запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		результатЗапроса = запрос.Выполнить();
		
		ПринадлежностьПоследовательностям.Запасы.Загрузить(результатЗапроса.Выгрузить());
		
		отбор = Новый Структура ("Подразделение, МестоХранения, СчетУчета");
		
		выборка = результатЗапроса.Выбрать();
		Пока выборка.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(отбор, выборка);
			
			Последовательности.Запасы.УстановитьГраницу(МоментВремени(), отбор);
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти 
	
КонецПроцедуры

Процедура ПередЗаписью(отказ, режимЗаписи, режимПроведения)
	
	ПринадлежностьПоследовательностям.Запасы.Очистить();
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Подразделение.Пустая() Тогда
		
		ТекстСообщения = НСтр("ru = 'Запись невозможна без заполнения Подразделения.'");
		ПроверкаДанныхКлиентСервер.СообщитьОбОшибке(отказ, текстСообщения, ЭтотОбъект, "Подразделение");
		
	КонецЕсли;
	
	Если Не Дата = КонецДня(Дата) Тогда
		Дата = КонецДня(Дата);
	КонецЕсли;
	
	УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);

	
	СуммаДокумента = Состав.Итог("СуммаИзлишек") - Состав.Итог("СуммаНедостача");
	
КонецПроцедуры

Процедура ПриКопировании(объектКопирования)
	
	ЗаполнениеОбъектовСервер.ЗаполнитьДанныеСкопированногоДокумента(ЭтотОбъект, ОбъектКопирования);
	
КонецПроцедуры

#КонецОбласти 