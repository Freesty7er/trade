
&НаСервере
Процедура ЗаполнитьСервер()
	
	Если Объект.Проведен Тогда
		ПроверкаДанныхКлиентСервер.СообщитьОбОшибке(истина, "Отмените проведение документа", Объект, );
		Возврат;
	КонецЕсли;
	
	запрос = Новый Запрос;
	запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	#Область ТекстЗапроса
	
	запрос.Текст =
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Цена - ЦеныНоменклатурыСрезПоследних.Цена * &ПроцентСкидки / 100 КАК Цена
	|ПОМЕСТИТЬ Цены
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&ДатаСреза,
	|			ТипЦен = &ЦенаСклада
	|				И Номенклатура В ИЕРАРХИИ (&НоменклатурнаяГруппа)
	|				И Подразделение = &Подразделение) КАК ЦеныНоменклатурыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартииТоваровНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
	|	ПартииТоваровНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток КАК Количество,
	|	0 КАК КоличествоФакт,
	|	ПартииТоваровНаСкладахОстаткиИОбороты.СтоимостьКонечныйОстаток КАК Стоимость,
	|	ПартииТоваровНаСкладахОстаткиИОбороты.КоличествоПриход КАК КоличествоЗакупка
	|ПОМЕСТИТЬ ВТ_ИсходныеДанные
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах.ОстаткиИОбороты(
	|			&НачалоПериода,
	|			&ДатаСреза,
	|			,
	|			,
	|			Номенклатура В ИЕРАРХИИ (&НоменклатурнаяГруппа)
	|				И Склад = &Склад
	|				И Подразделение = &Подразделение
	|				И ВидХранения <> ЗНАЧЕНИЕ(Перечисление.ВидыХраненияЗапасов.ВПодотчете)) КАК ПартииТоваровНаСкладахОстаткиИОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИнвентаризацияСостав.Номенклатура,
	|	0,
	|	ИнвентаризацияСостав.КоличествоФакт,
	|	0,
	|	0
	|ИЗ
	|	Документ.Инвентаризация.Состав КАК ИнвентаризацияСостав
	|ГДЕ
	|	ИнвентаризацияСостав.Ссылка = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Цены.Цена, 0) = 0
	|			ТОГДА ЕСТЬNULL(ЦеныНоменклатурыЗакупка.Цена, 0)
	|		ИНАЧЕ Цены.Цена
	|	КОНЕЦ КАК Цена,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(Цены.Цена, 0) = 0
	|				ТОГДА ЕСТЬNULL(ЦеныНоменклатурыЗакупка.Цена, 0)
	|			ИНАЧЕ Цены.Цена
	|		КОНЕЦ * ВложенныйЗапрос.Количество) КАК Сумма,
	|	СУММА(ВложенныйЗапрос.КоличествоФакт) КАК КоличествоФакт,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(Цены.Цена, 0) = 0
	|				ТОГДА ЕСТЬNULL(ЦеныНоменклатурыЗакупка.Цена, 0)
	|			ИНАЧЕ Цены.Цена
	|		КОНЕЦ * ВложенныйЗапрос.КоличествоФакт) КАК СуммаФакт,
	|	СУММА(ВложенныйЗапрос.Стоимость) КАК Стоимость,
	|	МАКСИМУМ(ВложенныйЗапрос.Номенклатура.НормаПроцентаУсушки) КАК НормаПроцентаУсушки,
	|	СУММА(ВложенныйЗапрос.КоличествоЗакупка) КАК КоличествоЗакупка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_ИсходныеДанные.Номенклатура КАК Номенклатура,
	|		СУММА(ВТ_ИсходныеДанные.Количество) КАК Количество,
	|		СУММА(ВТ_ИсходныеДанные.КоличествоФакт) КАК КоличествоФакт,
	|		СУММА(ВТ_ИсходныеДанные.Стоимость) КАК Стоимость,
	|		СУММА(ВТ_ИсходныеДанные.КоличествоЗакупка) КАК КоличествоЗакупка
	|	ИЗ
	|		ВТ_ИсходныеДанные КАК ВТ_ИсходныеДанные
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТ_ИсходныеДанные.Номенклатура) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ Цены КАК Цены
	|		ПО ВложенныйЗапрос.Номенклатура = Цены.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ДатаСреза,
	|				ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.Закупка)
	|					И Номенклатура В ИЕРАРХИИ (&НоменклатурнаяГруппа)
	|					И Подразделение = &Подразделение) КАК ЦеныНоменклатурыЗакупка
	|		ПО ВложенныйЗапрос.Номенклатура = ЦеныНоменклатурыЗакупка.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Цены.Цена, 0) = 0
	|			ТОГДА ЕСТЬNULL(ЦеныНоменклатурыЗакупка.Цена, 0)
	|		ИНАЧЕ Цены.Цена
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.Номенклатура.Наименование";
	
	#КонецОбласти
	
	запрос.УстановитьПараметр("НоменклатурнаяГруппа", Объект.НоменклатурнаяГруппа);
	запрос.УстановитьПараметр("Склад", Объект.СтруктурнаяЕдиница);
	запрос.УстановитьПараметр("НачалоПериода", НачалоДня(Объект.Дата) - 7*24*60*60 );
	запрос.УстановитьПараметр("ДатаСреза", Новый Граница(Объект.Дата, ВидГраницы.Включая));
	запрос.УстановитьПараметр("ПроцентСкидки", Объект.ПроцентСкидки);
	запрос.УстановитьПараметр("ДокументСсылка", Объект.Ссылка);
	запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	
	СтурктураПараметровПоПодразделению = Новый Структура("Подразделение, ДатаСреза", Объект.Подразделение, Объект.Дата);
	СтурктураПараметровПоПодразделению = ЦенообразованиеСервер.ПолучитьПараметрыУчетаПоПодразделению(СтурктураПараметровПоПодразделению);
	
	запрос.УстановитьПараметр("ЦенаСклада", СтурктураПараметровПоПодразделению.ЦенаСклада);
	
	результатЗапроса = запрос.Выполнить();
	
	#Область ПолучениеВременныхТаблиц
	
	запрос.Текст =
	"ВЫБРАТЬ * ИЗ ВТ_ИсходныеДанные";
	
	#КонецОбласти
	
	выборка = результатЗапроса.Выбрать();
	
	Запасы = Объект.Состав;
	Запасы.Очистить();
	
	Пока выборка.Следующий() Цикл
		
		строкаТабличнойЧасти = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
		
		строкаТабличнойЧасти.Сумма = строкаТабличнойЧасти.Количество*строкаТабличнойЧасти.Цена;
		
		Если (строкаТабличнойЧасти.Количество - строкаТабличнойЧасти.КоличествоФакт) > 0 Тогда
			// недостача
			строкаТабличнойЧасти.КоличествоИзлишек = 0;
			строкаТабличнойЧасти.КоличествоНедостача = строкаТабличнойЧасти.Количество - строкаТабличнойЧасти.КоличествоФакт;
		Иначе
			// лишак
			СтрокаТабличнойЧасти.КоличествоНедостача = 0;
			СтрокаТабличнойЧасти.КоличествоИзлишек = СтрокаТабличнойЧасти.КоличествоФакт-СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
		
		строкаТабличнойЧасти.СуммаНедостача = строкаТабличнойЧасти.КоличествоНедостача * строкаТабличнойЧасти.Цена;
		строкаТабличнойЧасти.СуммаИзлишек = строкаТабличнойЧасти.КоличествоИзлишек * строкаТабличнойЧасти.Цена;
		
		строкаТабличнойЧасти.КодОшибки = 0;	
		
		Если строкаТабличнойЧасти.КоличествоНедостача > 0 Тогда
			
			Если (строкаТабличнойЧасти.КоличествоНедостача > строкаТабличнойЧасти.КоличествоЗакупка * (строкаТабличнойЧасти.НормаПроцентаУсушки / 100)) И 
				НЕ (строкаТабличнойЧасти.НормаПроцентаУсушки = 0) Тогда
				
				// недостача больше установленной нормы
				строкаТабличнойЧасти.КодОшибки = 1;
				
			ИначеЕсли (строкаТабличнойЧасти.КоличествоНедостача > 0) И 
				 (строкаТабличнойЧасти.НормаПроцентаУсушки = 0) Тогда
				
				строкаТабличнойЧасти.КодОшибки = 2;	
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	ЗаполнитьСервер();
	
КонецПроцедуры

&НаСервере
Функция СтруктурнаяЕдиницаПриИзмененииСервер()
	Возврат Новый Структура("ПроцентСкидки", Объект.СтруктурнаяЕдиница.ПроцентСкидки);
КонецФункции

&НаКлиенте
Процедура СтруктурнаяЕдиницаПриИзменении(Элемент)
	СтруктураПараметров = СтруктурнаяЕдиницаПриИзмененииСервер();
	Объект.ПроцентСкидки = СтруктураПараметров.ПроцентСкидки;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(структураДанные)
	
	стурктураПараметровПоПодразделению = Новый Структура("Подразделение, ДатаСреза", структураДанные.Подразделение, структураДанные.ДатаСреза);
	стурктураПараметровПоПодразделению = ЦенообразованиеСервер.ПолучитьПараметрыУчетаПоПодразделению(стурктураПараметровПоПодразделению);
	
	Если структураДанные.Номенклатура.СчетУчета = ПланыСчетов.Внутренний.Топливо Или 
			структураДанные.Номенклатура.СчетУчета = ПланыСчетов.Внутренний.ЗапасныеЧасти Тогда
			
		мЦенаСклада = Справочники.ТипыЦен.Закупка;		
	Иначе
		мЦенаСклада = стурктураПараметровПоПодразделению.ЦенаСклада;
	КонецЕсли;
	
	// Получим цену
	структураПараметров = Новый Структура("Номенклатура, ТипЦен, Подразделение, ДатаСреза, Контрагент", 
		структураДанные.Номенклатура, 
		мЦенаСклада, 
		структураДанные.Подразделение, 
		структураДанные.ДатаСреза);
	
	структураДанные.Вставить("Цена", ЦенообразованиеСервер.ВернутьЦенуНоменклатуры(структураПараметров));
	структураДанные.Вставить("ЕдиницаИзмерения", структураДанные.Номенклатура.ЕдиницаИзмерения);
	структураДанные.Вставить("НормаПроцентаУсушки", структураДанные.Номенклатура.НормаПроцентаУсушки);
	
	//СтруктураДанные.Вставить("Количество", 33);
	
	Возврат структураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаКлиенте
Процедура РасчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Состав.ТекущиеДанные;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Сумма 		= СтрокаТабличнойЧасти.Количество*СтрокаТабличнойЧасти.Цена;
	СтрокаТабличнойЧасти.СуммаФакт	= СтрокаТабличнойЧасти.КоличествоФакт*СтрокаТабличнойЧасти.Цена;
	
	Если (СтрокаТабличнойЧасти.Количество-СтрокаТабличнойЧасти.КоличествоФакт) > 0 Тогда
		// недостача
		СтрокаТабличнойЧасти.КоличествоИзлишек = 0;
		СтрокаТабличнойЧасти.КоличествоНедостача = СтрокаТабличнойЧасти.Количество-СтрокаТабличнойЧасти.КоличествоФакт;
	Иначе
		// лишак
		СтрокаТабличнойЧасти.КоличествоНедостача = 0;
		СтрокаТабличнойЧасти.КоличествоИзлишек = СтрокаТабличнойЧасти.КоличествоФакт-СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СуммаНедостача = СтрокаТабличнойЧасти.КоличествоНедостача*СтрокаТабличнойЧасти.Цена;
	СтрокаТабличнойЧасти.СуммаИзлишек = СтрокаТабличнойЧасти.КоличествоИзлишек*СтрокаТабличнойЧасти.Цена;
	
	СтрокаТабличнойЧасти.КодОшибки = 0;
	
	Если СтрокаТабличнойЧасти.КоличествоНедостача > 0 Тогда
		
		Если (СтрокаТабличнойЧасти.КоличествоНедостача > СтрокаТабличнойЧасти.КоличествоЗакупка * (СтрокаТабличнойЧасти.НормаПроцентаУсушки / 100)) И 
			НЕ (СтрокаТабличнойЧасти.НормаПроцентаУсушки = 0) Тогда
			
			// недостача больше установленной нормы
			СтрокаТабличнойЧасти.КодОшибки = 1;
			
		ИначеЕсли (СтрокаТабличнойЧасти.КоличествоНедостача > 0) И 
				 (СтрокаТабличнойЧасти.НормаПроцентаУсушки = 0) Тогда
			
			СтрокаТабличнойЧасти.КодОшибки = 2;	
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // РасчитатьСуммуВСтрокеТабличнойЧасти()

&НаКлиенте
Процедура ЗапасыРасчетСтроки(Элемент)
	РасчитатьСуммуВСтрокеТабличнойЧасти();	
КонецПроцедуры


&НаКлиенте
Процедура СоставНоменклатураПриИзменении(Элемент)
	
	строкаТабличнойЧасти = Элементы.Состав.ТекущиеДанные;
	
	структураДанные = Новый Структура();
	структураДанные.Вставить("Номенклатура", строкаТабличнойЧасти.Номенклатура);
	структураДанные.Вставить("Подразделение", Объект.Подразделение);
	структураДанные.Вставить("ДатаСреза", Объект.Дата);
	
	структураДанные = ПолучитьДанныеНоменклатураПриИзменении(структураДанные);
	
	строкаТабличнойЧасти.ЕдиницаИзмерения 		= структураДанные.ЕдиницаИзмерения;
	строкаТабличнойЧасти.Цена 					= структураДанные.Цена - структураДанные.Цена*Объект.ПроцентСкидки/100 ;
	строкаТабличнойЧасти.НормаПроцентаУсушки 	= структураДанные.НормаПроцентаУсушки;
	
	РасчитатьСуммуВСтрокеТабличнойЧасти(строкаТабличнойЧасти);

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УправлениеНебольшойФирмойСервер.ЗаполнитьШапкуДокумента(
		Объект,
		,
		Параметры.ЗначениеКопирования,
		Параметры.Основание,
		СостояниеДокумента,
		КартинкаСостоянияДокумента,
		РазрешеноПроведение,
		Параметры.ЗначенияЗаполнения
	);
КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	ДействиеПодбор("Запасы");
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПодбор(ИмяТабличнойЧасти)
	
	Если ИмяТабличнойЧасти = "Запасы" Тогда
		Команда = "ПодборВТабличнуюЧастьЗапасы";
	КонецЕсли;
	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда", Команда);
	
	ДобавитьПоставщикаВПараметрыОтбора(СтруктураПараметровПодбора);
	ДобавитьТипЦенВПараметрыОтбора(СтруктураПараметровПодбора);
	
	ВременнаяДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), ТекущаяДата(), Объект.Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов", ВременнаяДатаРасчетов);
	//СтруктураПараметровПодбора.Вставить("ВводКоличестваПоНакладной", Истина);
	
	РаботаСДиалогамиКлиент.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);
		
КонецПроцедуры //

&НаСервере
Процедура ДобавитьПоставщикаВПараметрыОтбора(СтруктураПараметровПодбора)
	
	СтруктураПараметровПодбора.Вставить("Поставщик", Объект.СтруктурнаяЕдиница.Поставщик);
	СтруктураПараметровПодбора.Вставить("ОтборПоПоставщику", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТипЦенВПараметрыОтбора(СтруктураПараметровПодбора)
	
	
	
	//СтруктураПараметровПодбора.Вставить("Поставщик", Объект.Контрагент);
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		
		СтурктураПараметровПоПодразделению = Новый Структура("Подразделение, ДатаСреза", Объект.Подразделение, Объект.Дата);
		СтурктураПараметровПоПодразделению = ЦенообразованиеСервер.ПолучитьПараметрыУчетаПоПодразделению(СтурктураПараметровПоПодразделению);
	
		СтруктураПараметровПодбора.Вставить("ТипЦен", СтурктураПараметровПоПодразделению.ЦенаСклада);
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		СтруктураПараметровПодбора.Вставить("Подразделение", Объект.Подразделение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Перем Команда;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		ВыбранноеЗначение.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьЗапасы" Тогда
			ОбработкаПодбора("Состав", ВыбранноеЗначение);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПодбора(ИмяТабличнойЧасти, ЗначениеВыбора) Экспорт

	Перем Номенклатура;
	Перем Количество;
	Перем КоличествоНакладная;
	
	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура",					Номенклатура);
	ЗначениеВыбора.Свойство("Количество",				Количество);

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	// Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	
	
	МассивСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивСтрок.Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Неопределено;
	Иначе
		СтрокаТабличнойЧасти = МассивСтрок[0];
	КонецЕсли;
	
	// в приходной накладной не суммируем
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
		СтрокаТабличнойЧасти.КоличествоФакт = СтрокаТабличнойЧасти.КоличествоФакт + Количество;
		
		//РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	Иначе
		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].Добавить();
		СтрокаТабличнойЧасти.Номенклатура     			= Номенклатура;
		СтрокаТабличнойЧасти.КоличествоФакт    			= Количество;
		
	КонецЕсли;
	
	//РассчитатьСуммуДокумента();
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные.Вставить("Подразделение", ЭтаФорма.Объект.Подразделение);
	СтруктураДанные.Вставить("ДатаСреза", ЭтаФорма.Объект.Дата);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	
	СтрокаТабличнойЧасти.Цена 			= СтруктураДанные.Цена - СтруктураДанные.Цена*Объект.ПроцентСкидки/100 ;
	//СтрокаТабличнойЧасти.Количество 	= СтруктураДанные.Количество;
	
	РасчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);

КонецПроцедуры //

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ Объект.ОтметкаБухгалтераОПроверке Тогда
		СтандартныйЗаголовок = ЭтаФорма.Заголовок;
		ЭтаФорма.Заголовок = "(Не подписан)" + ЭтаФорма.Заголовок;
	КонецЕсли;

КонецПроцедуры
