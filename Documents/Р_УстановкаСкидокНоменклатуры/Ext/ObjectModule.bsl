Перем мУдалятьДвижения;

#Область ОбработчикиСобытий

Процедура ПриКопировании(объектКопирования)
	
	ЗаполнениеОбъектовСервер.ЗаполнитьДанныеСкопированногоДокумента(ЭтотОбъект, объектКопирования);
	
КонецПроцедуры

#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	//Если ЭтоНовый() Тогда
	//	Предупреждение("Документ можно распечатать только после его записи");
	//	Возврат;
	//ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
	//	Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
	//	Возврат;
	//КонецЕсли;

	//Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
	//	Возврат;
	//КонецЕсли;

	//Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

	//	ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
	//	
	//	Если ТабДокумент = Неопределено Тогда
	//		Возврат
	//	КонецЕсли;
	//	
	//КонецЕсли;

	//УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать()

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Функция возвращает массив строк из ТЧ "СоставНабора"
// по заданному ключу строки.
//
// Параметры:
//  КлючСтроки – ключ по которому нужно отобрать строки.
//  СтрокаТабличнойЧасти – строка ТЧ "Бонусы". Если указана,
//   и СтрокаТабличнойЧасти.Номенклатура.Комплект,
//   то в массиве возвращается только эта строка.
//
// Возвращаемое значение:
//  Массив, состоящий из строк ТЧ "СоставНабора"
//  или из одного элемента - переданная СтрокаТабличнойЧасти.
//
Функция ПолучитьСоставСтроки(КлючСтроки, СтрокаТабличнойЧасти = Неопределено) Экспорт

	Если СтрокаТабличнойЧасти <> Неопределено И Не СтрокаТабличнойЧасти.Номенклатура.Комплект Тогда
		МассивЭлементов = Новый Массив;
		МассивЭлементов.Добавить(СтрокаТабличнойЧасти);
	Иначе
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСтроки", КлючСтроки);

		МассивЭлементов = СоставНабора.НайтиСтроки(СтруктураПоиска);
	КонецЕсли;

	Возврат МассивЭлементов;

КонецФункции // ПолучитьСоставСтроки()

// Функция определяет пуст ли состав ТЧ "СоставНабора"
// по заданному ключу строки.
//
// Параметры:
//  КлючСтроки – ключ, по которому нужно определить, пуст ли состав.
//
// Возвращаемое значение:
//  Булево. Истина - если, состав по заданному ключу пустой.
//
Функция СоставСтрокиНеЗаполнен(КлючСтроки) Экспорт

	Результат = (СоставНабора.Найти(КлючСтроки, "КлючСтроки") = Неопределено);

	Возврат Результат;

КонецФункции // СоставСтрокиНеЗаполнен()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов, влияющих на проведение, не заполнен или
// заполнен некорректно, то устанавливается флаг отказа в проведении.
//
// Параметры:
//  ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа.
//  Отказ - флаг отказа в проведении.
//  Заголовок - заголовок сообщения об ошибках.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить.
	СтруктураОбязательныхПолей = Новый Структура;
	СтруктураОбязательныхПолей.Вставить("ВидОперации");
	СтруктураОбязательныхПолей.Вставить("ДатаНачала");

	Если ВидОперации <> Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.НатуральныеСкидки Тогда
		СтруктураОбязательныхПолей.Вставить("Валюта");
	КонецЕсли;

	Если ДляВсейНоменклатуры И ВидОперации = Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.ПоНоменклатуре Тогда
		СтруктураОбязательныхПолей.Вставить("Качество");
	КонецЕсли;

	Если (ВидОперации = Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.ПоНоменклатуре
	 Или ВидОперации = Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.ПоЦеновымГруппам)
	   И //(Условие = Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты
	 (Условие = Перечисления.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт
	 Или Условие = Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте) Тогда
		СтруктураОбязательныхПолей.Вставить("ЗначениеУсловия");
	КонецЕсли;

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	Если ДатаНачала > ДатаОкончания И ЗначениеЗаполнено(ДатаОкончания) Тогда
		Сообщить("Дата начала действия скидки не может быть больше даты окончания действия скидки");
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения табличной части "Товары".
// Если какой-то из реквизитов, влияющих на проведение, не заполнен или
// заполнен некорректно, то устанавливается флаг отказа в проведении.
//
// Параметры:
//  ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа.
//  Отказ - флаг отказа в проведении.
//  Заголовок - заголовок сообщения об ошибках.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить.
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Качество");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения табличной части "ЦеновыеГруппы".
// Если какой-то из реквизитов, влияющих на проведение, не заполнен или
// заполнен некорректно, то устанавливается флаг отказа в проведении.
//
// Параметры:
//  ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа.
//  Отказ - флаг отказа в проведении.
//  Заголовок - заголовок сообщения об ошибках.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиЦеновыеГруппы(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если ЦеновыеГруппы.Количество() = 0 Тогда
		Сообщить("Необходимо заполнить перечень ценовых групп!");
		Отказ = Истина;
	КонецЕсли;

	// Укажем, что надо проверить.
	СтруктураОбязательныхПолей = Новый Структура("ЦеноваяГруппа,  Качество");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ЦеновыеГруппы", СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиЦеновыеГруппы()

// Проверяет правильность заполнения табличной части "СоставНабора".
// Если какой-то из реквизитов, влияющих на проведение, не заполнен или
// заполнен некорректно, то устанавливается флаг отказа в проведении.
//
// Параметры:
//  ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа.
//  Отказ - флаг отказа в проведении.
//  Заголовок - заголовок сообщения об ошибках.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиСоставНабора(СтруктураШапкиДокумента, Отказ, Заголовок)

	ПредставлениеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти["Бонусы"].Представление();

	Для Каждого СтрокаБонус Из Бонусы Цикл
		//Если СтрокаБонус.Номенклатура.Комплект Тогда
		//	Если СоставСтрокиНеЗаполнен(СтрокаБонус.КлючСтроки - 1) Тогда
		//		СтрокаНачалаСообщенияОбОшибке = "Для комплекта номенклатуры в строке номер """+ СокрЛП(СтрокаБонус.НомерСтроки) +
		//		                                """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

		//		Сообщить(СтрокаНачалаСообщенияОбОшибке + "не задан состав!");
		//		Отказ = Истина;
		//	КонецЕсли;
		//КонецЕсли;

		Если СоставСтрокиНеЗаполнен(СтрокаБонус.КлючСтроки) Тогда
			СтрокаНачалаСообщенияОбОшибке = "Для спец. предложения в строке номер """+ СокрЛП(СтрокаБонус.НомерСтроки) +
			                                """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

			Сообщить(СтрокаНачалаСообщенияОбОшибке + "не задан состав!");
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;

	// Проверить заполнение ТЧ "Состав набора".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура");
	СтруктураПолей.Вставить("Количество");
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "СоставНабора", СтруктураПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиСоставНабора()

// Выполняет движения по регистрам.
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаПоТоварам, ТаблицаПоПолучателям, ТаблицаПоДнямНедели, ТаблицаПоЦеновымГруппам, ТаблицаПоБонусам, Отказ, Заголовок)

	//Если СтруктураШапкиДокумента.ДляВсехПолучателей Тогда
	//	ТаблицаПоПолучателям.Очистить();

	//	ПустойПолучатель = ТаблицаПоПолучателям.Добавить();
	//	Если ВидСкидки = Перечисления.ВидыСкидок.Оптовая Тогда
	//		ПустойПолучатель.Получатель = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	//	Иначе
	//		ПустойПолучатель.Получатель = "";
	//	КонецЕсли;
	//КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.ПоНоменклатуре Тогда
		Если СтруктураШапкиДокумента.ДляВсейНоменклатуры Тогда
			ТаблицаПоТоварам.Очистить();

			ПустойТовар = ТаблицаПоТоварам.Добавить();
			ПустойТовар.Номенклатура               = Неопределено;
			ПустойТовар.ХарактеристикаНоменклатуры = Неопределено;
			ПустойТовар.Качество                   = СтруктураШапкиДокумента.Качество;
			ПустойТовар.ПроцентСкидкиНаценки       = СтруктураШапкиДокумента.ПроцентСкидкиНаценки;
			ПустойТовар.ОграничениеСкидкиНаценки   = СтруктураШапкиДокумента.ОграничениеСкидкиНаценки;
		КонецЕсли;

		НаборДвижений = Движения.СкидкиНаценкиНоменклатуры;
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		//Для каждого ТекСтрокаПолучателя Из ТаблицаПоПолучателям Цикл
			Для каждого ТекСтрокаТовара Из ТаблицаПоТоварам Цикл
				Движение = ТаблицаДвижений.Добавить();
				ПустойПолучатель = Истина;
				ПустойКонтрагент = Истина;
				//Если ПустойКонтрагент Тогда
				//	ПолучательДвижения = ТекСтрокаПолучателя.Получатель;
				//Иначе
				//	Если ПустойПолучатель Тогда
						ПолучательДвижения = Справочники.Контрагенты.ПустаяСсылка();
				//	Иначе
				//		ПолучательДвижения = ТекСтрокаПолучателя.Получатель;
				//	КонецЕсли;
				//КонецЕсли;

				Движение.ПолучательСкидки           = ПолучательДвижения;

				Движение.Номенклатура               = ТекСтрокаТовара.Номенклатура;
				Движение.ХарактеристикаНоменклатуры = ТекСтрокаТовара.ХарактеристикаНоменклатуры;
				Движение.Качество                   = ТекСтрокаТовара.Качество;

				Движение.Условие                    = ?(СтруктураШапкиДокумента.Условие = Перечисления.УсловияСкидкиНаценки.БезУсловий,
														Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара, СтруктураШапкиДокумента.Условие);
				Движение.ЗначениеУсловия            = ?(СтруктураШапкиДокумента.Условие = Перечисления.УсловияСкидкиНаценки.БезУсловий,
														0, СтруктураШапкиДокумента.ЗначениеУсловия);
				
				Движение.ПроцентСкидкиНаценки       = ТекСтрокаТовара.ПроцентСкидкиНаценки;
				Движение.ОграничениеСкидкиНаценки   = ТекСтрокаТовара.ОграничениеСкидкиНаценки;
				
				Движение.Валюта                     = СтруктураШапкиДокумента.Валюта;
			КонецЦикла;
		//КонецЦикла;

		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДатаОкончания,"ДатаОкончания");

		Если Не Отказ Тогда
			НаборДвижений.мПериод          = СтруктураШапкиДокумента.ДатаНачала;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			Движения.СкидкиНаценкиНоменклатуры.ВыполнитьДвижения();
		КонецЕсли;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.ПоЦеновымГруппам Тогда
		Если ТаблицаПоЦеновымГруппам.Количество() <> 0 Тогда
			НаборДвижений = Движения.СкидкиНаценкиПоЦеновымГруппам;
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

			//Для каждого ТекСтрокаПолучателя Из ТаблицаПоПолучателям Цикл
			//	Для каждого ТекСтрокаЦеноваяГруппа Из ТаблицаПоЦеновымГруппам Цикл
			//		Движение=ТаблицаДвижений.Добавить();
			//		ПустойПолучатель = НЕ ЗначениеЗаполнено(ТекСтрокаПолучателя.Получатель);
			//		ПустойКонтрагент = НЕ ЗначениеЗаполнено(ТекСтрокаПолучателя.Контрагент);

			//		Если ПустойКонтрагент Тогда
			//			ПолучательДвижения = ТекСтрокаПолучателя.Получатель;
			//		Иначе
			//			Если ПустойПолучатель Тогда
			//				ПолучательДвижения = ТекСтрокаПолучателя.Контрагент;
			//			Иначе
			//				ПолучательДвижения = ТекСтрокаПолучателя.Получатель;
			//			КонецЕсли;
			//		КонецЕсли;

			//		Движение.ПолучательСкидки           = ПолучательДвижения;

			//		Движение.ЦеноваяГруппа              = ТекСтрокаЦеноваяГруппа.ЦеноваяГруппа;
			//		Движение.Качество                   = ТекСтрокаЦеноваяГруппа.Качество;

			//		Движение.Условие                    = ?(СтруктураШапкиДокумента.Условие = Перечисления.УсловияСкидкиНаценки.БезУсловий,
			//		Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара, СтруктураШапкиДокумента.Условие);
			//		Движение.ЗначениеУсловия            = ?(СтруктураШапкиДокумента.Условие = Перечисления.УсловияСкидкиНаценки.БезУсловий,
			//		0, СтруктураШапкиДокумента.ЗначениеУсловия);

			//		Движение.ПроцентСкидкиНаценки       = ТекСтрокаЦеноваяГруппа.ПроцентСкидкиНаценки;
			//		Движение.ОграничениеСкидкиНаценки   = ТекСтрокаЦеноваяГруппа.ОграничениеСкидкиНаценки;

			//		Движение.Валюта                     = СтруктураШапкиДокумента.Валюта;
			//	КонецЦикла;
			//КонецЦикла;

			ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДатаОкончания,"ДатаОкончания");

			Если Не Отказ Тогда
				НаборДвижений.мПериод          = СтруктураШапкиДокумента.ДатаНачала;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
				Движения.СкидкиНаценкиПоЦеновымГруппам.ВыполнитьДвижения();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.НатуральныеСкидки Тогда
		//Если ТаблицаПоБонусам.Количество() <> 0 Тогда
			//НаборДвижений = Движения.СкидкиНоменклатурыНатуральные;
			//ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

			//Для Каждого ТекСтрокаПолучателя Из ТаблицаПоПолучателям Цикл
			//	Для Каждого ТекСтрокаБонус Из ТаблицаПоБонусам Цикл
			//		Движение = ТаблицаДвижений.Добавить();
			//		ПустойПолучатель = НЕ ЗначениеЗаполнено(ТекСтрокаПолучателя.Получатель);
			//		ПустойКонтрагент = НЕ ЗначениеЗаполнено(ТекСтрокаПолучателя.Контрагент);

			//		Если ПустойКонтрагент Тогда
			//			ПолучательДвижения = ТекСтрокаПолучателя.Получатель;
			//		Иначе
			//			Если ПустойПолучатель Тогда
			//				ПолучательДвижения = ТекСтрокаПолучателя.Контрагент;
			//			Иначе
			//				ПолучательДвижения = ТекСтрокаПолучателя.Получатель;
			//			КонецЕсли;
			//		КонецЕсли;

			//		Движение.ПолучательСкидки = ПолучательДвижения;
			//		Движение.Номенклатура = ТекСтрокаБонус.Номенклатура;
			//		Движение.ХарактеристикаНоменклатуры = ТекСтрокаБонус.ХарактеристикаНоменклатуры;
			//		Движение.Качество = ТекСтрокаБонус.Качество;
			//		Движение.СпецПредложение = ТекСтрокаБонус.СпецПредложение;
			//		Движение.ХарактеристикаСпецПредложения = ТекСтрокаБонус.ХарактеристикаСпецПредложения;
			//		Движение.Количество = ТекСтрокаБонус.Количество * ТекСтрокаБонус.ЕдиницаИзмерения.Коэффициент / ТекСтрокаБонус.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
			//	КонецЦикла;
			//КонецЦикла;

			//ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДатаОкончания,"ДатаОкончания");

			//Если Не Отказ Тогда
			//	НаборДвижений.мПериод          = СтруктураШапкиДокумента.ДатаНачала;
			//	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			//	Движения.СкидкиНоменклатурыНатуральные.ВыполнитьДвижения();
			//КонецЕсли;

			НаборДвижений = Движения.СпецПредложения;
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

			//Для Каждого ТекСтрокаБонус Из ТаблицаПоБонусам Цикл
				//СоставКомплекта = ПолучитьСоставСтроки(ТекСтрокаБонус.КлючСтроки - 1, ТекСтрокаБонус);
				СоставКомплекта = ПолучитьСоставСтроки(1, Неопределено);


				//Запишем движения комплектующих спец. предложения.
				//Комплектующие, за которые даются бонусы.
				Для Каждого СтрокаКомплектующей Из СоставКомплекта Цикл
					Движение = ТаблицаДвижений.Добавить();
					//Движение.Номенклатура = СтрокаКомплектующей.СпецПредложение;
					//Движение.ХарактеристикаНоменклатуры = ТекСтрокаБонус.ХарактеристикаСпецПредложения;
					Движение.Комплектующая = СтрокаКомплектующей.Номенклатура;
					//Движение.ХарактеристикаКомплектующей = СтрокаКомплектующей.ХарактеристикаНоменклатуры;
//ЗАМЕНА РЕЗОНАНС
// ИСХОДНЫЙ ТЕКСТ
//					Движение.Количество = СтрокаКомплектующей.Количество * СтрокаКомплектующей.ЕдиницаИзмерения.Коэффициент / СтрокаКомплектующей.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
// НОВЫЙ ТЕКСТ
					//Если СтрокаКомплектующей.Номенклатура.ЭтоГруппа Тогда
						Движение.Количество = СтрокаКомплектующей.Количество;
					//Иначе
					//	Движение.Количество = СтрокаКомплектующей.Количество * СтрокаКомплектующей.ЕдиницаИзмерения.Коэффициент / СтрокаКомплектующей.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
					//КонецЕсли; 
//КОНЕЦ ЗАМЕНЫ
					Движение.ЭтоБонус = Ложь;
				КонецЦикла;

				//И комплектующие-бонусы.
				СоставКомплекта = ПолучитьСоставСтроки(2);

				Для Каждого СтрокаКомплектующей Из СоставКомплекта Цикл
					Движение = ТаблицаДвижений.Добавить();
					//Движение.Номенклатура = СтрокаКомплектующей.СпецПредложение;
					//Движение.ХарактеристикаНоменклатуры = СтрокаКомплектующей.ХарактеристикаСпецПредложения;
					Движение.Комплектующая = СтрокаКомплектующей.Номенклатура;
					Движение.ХарактеристикаКомплектующей = СтрокаКомплектующей.ХарактеристикаНоменклатуры;
//ЗАМЕНА РЕЗОНАНС
// ИСХОДНЫЙ ТЕКСТ
//					Движение.Количество = СтрокаКомплектующей.Количество * СтрокаКомплектующей.ЕдиницаИзмерения.Коэффициент / СтрокаКомплектующей.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
// НОВЫЙ ТЕКСТ
					//Если СтрокаКомплектующей.Номенклатура.ЭтоГруппа Тогда
						Движение.Количество = СтрокаКомплектующей.Количество;
					//Иначе
					//	Движение.Количество = СтрокаКомплектующей.Количество * СтрокаКомплектующей.ЕдиницаИзмерения.Коэффициент / СтрокаКомплектующей.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
					//КонецЕсли; 
//КОНЕЦ ЗАМЕНЫ
					Движение.ЭтоБонус = Истина;
				КонецЦикла;
			//КонецЦикла;

			Если Не Отказ Тогда
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
				НаборДвижений.мПериод          = СтруктураШапкиДокумента.ДатаНачала;
				Движения.СпецПредложения.ВыполнитьДвижения();
			КонецЕсли;
		//КонецЕсли;
		//Конец натуральных скидок
	КонецЕсли;

	ЗаписыватьДвиженияПоВремениСкидок = Ложь;
	НаборДвиженийВремяДействияСкидок = Движения.ВремяДействияСкидок;
	ТаблицаДвижений = НаборДвиженийВремяДействияСкидок.Выгрузить();
	ВремяНачала = Неопределено;
	ВремяОкончания = Неопределено;

	Для каждого ДеньНедели Из ТаблицаПоДнямНедели Цикл
		Если ДеньНедели.Выбран Тогда
			Движение                = ТаблицаДвижений.Добавить();
			Движение.ВремяНачала    = ДеньНедели.ВремяНачала;
			Движение.ВремяОкончания = ДеньНедели.ВремяОкончания;
			Движение.ДеньНедели     = ДеньНедели.ДеньНедели;

			Если ВремяНачала = Неопределено Тогда
				ВремяНачала = ДеньНедели.ВремяНачала;
			ИначеЕсли ВремяНачала <> ДеньНедели.ВремяНачала Тогда
				ЗаписыватьДвиженияПоВремениСкидок = Истина;
			КонецЕсли;

			Если ЗначениеЗаполнено(ДеньНедели.ВремяНачала)
			 Или Движение.ВремяОкончания <> '00010101235959' Тогда
				ЗаписыватьДвиженияПоВремениСкидок = Истина;
			КонецЕсли;

			Если ВремяОкончания = Неопределено Тогда
				ВремяОкончания = ДеньНедели.ВремяОкончания;
			ИначеЕсли ВремяОкончания <> ДеньНедели.ВремяОкончания Тогда
				ЗаписыватьДвиженияПоВремениСкидок = Истина;
			КонецЕсли;
		Иначе
			ЗаписыватьДвиженияПоВремениСкидок = Истина;
		КонецЕсли;
		
	КонецЦикла;

	Если Не Отказ И ЗаписыватьДвиженияПоВремениСкидок Тогда
		НаборДвиженийВремяДействияСкидок.мПериод          = СтруктураШапкиДокумента.ДатаНачала;
		НаборДвиженийВремяДействияСкидок.мТаблицаДвижений = ТаблицаДвижений;
		Движения.ВремяДействияСкидок.ВыполнитьДвижения();
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, Режим)

	Движения.ВремяДействияСкидок.Записывать = Истина;
	Движения.СкидкиНаценкиНоменклатуры.Записывать = Истина;
	Движения.СкидкиНаценкиПоЦеновымГруппам.Записывать = Истина;
	Движения.СкидкиНоменклатурыНатуральные.Записывать = Истина;
	Движения.СпецПредложения.Записывать = Истина;
	
	Если мУдалятьДвижения Тогда
		УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Сформируем структуру реквизитов шапки документа.
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);

	ТекВид = ?(Условие = Перечисления.УсловияСкидкиНаценки.БезУсловий, Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара, Условие);
	Если Условие = Перечисления.УсловияСкидкиНаценки.БезУсловий Тогда
		ТекВид = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара;
	ИначеЕсли Условие = Перечисления.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт Тогда
		ТекВид = Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте;
	Иначе
		ТекВид = Условие;
	КонецЕсли;

	//Если Не РассчитыватьАвтоматическиеСкидки(ТекВид) Тогда
	//	НаименованиеВида = "";
	//	Если ТекВид = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара Тогда
	//		НаименованиеВида = "Скидка по количеству товара";
	//	ИначеЕсли ТекВид = Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента Тогда
	//		НаименованиеВида = "Скидка по сумме документа";
	//	ИначеЕсли ТекВид = Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте Тогда
	//		НаименованиеВида = "Скидка по дисконтной карте";
	//	//ИначеЕсли ТекВид = Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты Тогда
	//	//	НаименованиеВида = "Скидка по виду оплаты";
	//	КонецЕсли;

	//	Сообщить("В учетной политике не указано использование скидок этого вида ("+ НаименованиеВида + ")."
	//	                    + Символы.ПС + "Скидка не может быть назначена.");
	//						Отказ = Истина;
	//КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.ПоНоменклатуре
		И Не ДляВсейНоменклатуры И Товары.Количество() = 0 Тогда
		Сообщить("Необходимо заполнить перечень товаров или установить флажок ""Для всей номенклатуры""!");Отказ = Истина;
	КонецЕсли;

	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("Качество"                  , "Качество");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"      , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("ОграничениеСкидкиНаценки"  , "ОграничениеСкидкиНаценки");

	РезультатЗапросаПоТоварам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	ТаблицаПоТоварам = РезультатЗапросаПоТоварам.Выгрузить();

	//СтруктураПолей = Новый Структура;
	//СтруктураПолей.Вставить("Контрагент", "Контрагент");
	//СтруктураПолей.Вставить("Получатель", "Получатель");

	//РезультатЗапросаПоПолучателям = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ПолучателиСкидки", СтруктураПолей);
	//ТаблицаПоПолучателям = РезультатЗапросаПоПолучателям.Выгрузить();

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Выбран"        , "Выбран");
	СтруктураПолей.Вставить("ДеньНедели"    , "ДеньНедели");
	СтруктураПолей.Вставить("ВремяНачала"   , "ВремяНачала");
	СтруктураПолей.Вставить("ВремяОкончания", "ВремяОкончания");

	РезультатЗапросаПоДнямНедели = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВремяПоДнямНедели", СтруктураПолей);
	ТаблицаПоДнямНедели = РезультатЗапросаПоДнямНедели.Выгрузить();

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ЦеноваяГруппа"           , "ЦеноваяГруппа");
	СтруктураПолей.Вставить("Качество"                , "Качество");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"    , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("ОграничениеСкидкиНаценки", "ОграничениеСкидкиНаценки");

	РезультатЗапросаПоЦеновымГруппам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ЦеновыеГруппы", СтруктураПолей);
	ТаблицаПоЦеновымГруппам = РезультатЗапросаПоЦеновымГруппам.Выгрузить();
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"                 , "Номенклатура");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"   , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("Качество"                     , "Качество");
	СтруктураПолей.Вставить("СпецПредложение"              , "СпецПредложение");
	СтруктураПолей.Вставить("ХарактеристикаСпецПредложения", "ХарактеристикаСпецПредложения");
	СтруктураПолей.Вставить("КлючСтроки"                   , "КлючСтроки");
	СтруктураПолей.Вставить("Количество"                   , "Количество");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"             , "ЕдиницаИзмерения");

	РезультатЗапросаПоБонусам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Бонусы", СтруктураПолей);
	ТаблицаПоБонусам = РезультатЗапросаПоБонусам.Выгрузить();

	Если ВидОперации = Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.ПоНоменклатуре Тогда
		ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.ПоЦеновымГруппам Тогда
		ПроверитьЗаполнениеТабличнойЧастиЦеновыеГруппы(СтруктураШапкиДокумента, Отказ, Заголовок);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.НатуральныеСкидки Тогда
		//ПроверитьЗаполнениеТабличнойЧастиБонусы(СтруктураШапкиДокумента, Отказ, Заголовок);
		ПроверитьЗаполнениеТабличнойЧастиСоставНабора(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;

	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, , ТаблицаПоДнямНедели, ТаблицаПоЦеновымГруппам, ТаблицаПоБонусам, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаУдаленияПроведения(Отказ)

	
	УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры // ОбработкаУдаленияПроведения

Процедура ПриЗаписи(Отказ)
		// регистрация изменений для всех узлов ... "ПланыОбмена.Р_POS"
	Выборка = ПланыОбмена.Р_POS.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка = ПланыОбмена.Р_POS.ЭтотУзел() Тогда
			Продолжить;
		КонецЕсли;
		
		ПланыОбмена.ЗарегистрироватьИзменения(Выборка.Ссылка, Ссылка);
		
	КонецЦикла;

	
	//// регистрация изменений ...
	//СписокУзлов = Р_ОбщегоНазначения_ПОС.ПолучитьСписокУзлов_ПОС(Подразделение);
	//Если НЕ СписокУзлов = Неопределено Тогда
	//	ПланыОбмена.ЗарегистрироватьИзменения(СписокУзлов, Ссылка);
	//КонецЕсли

КонецПроцедуры

Функция СформироватьСтруктуруШапкиДокумента(ДокументОбъект) Экспорт
	
	ВалютаРегламентированногоУчета = Константы.ВалютаУчета.Получить();
	
	СтруктураШапкиДокумента = Новый Структура;
	СтруктураШапкиДокумента.Вставить("Ссылка", ДокументОбъект.Ссылка);
	СтруктураШапкиДокумента.Вставить("Дата", ДокументОбъект.Дата);
	СтруктураШапкиДокумента.Вставить("Номер",  ДокументОбъект.Номер);
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	СтруктураШапкиДокумента.Вставить("ВидДокумента",  МетаданныеДокумента.Имя);
	СтруктураШапкиДокумента.Вставить("ПредставлениеВидаДокумента",  МетаданныеДокумента.Представление());
	СтруктураШапкиДокумента.Вставить("ПредставлениеДокумента", СокрЛП(ДокументОбъект));
	                                                
	ИмяДокумента = МетаданныеДокумента.Имя;
	Для каждого Реквизит из МетаданныеДокумента.Реквизиты Цикл
		СтруктураШапкиДокумента.Вставить(Реквизит.Имя, ДокументОбъект[Реквизит.Имя]);
	КонецЦикла;
	СтруктураШапкиДокумента.Вставить("ВидДокумента",  ИмяДокумента);

	//Отображение данных о валютах
	СтруктураШапкиДокумента.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);	

	Если СтруктураШапкиДокумента.Свойство("ВалютаДокумента") Тогда
		СтруктураШапкиДокумента.Вставить("КурсДокумента",      ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета));
		СтруктураШапкиДокумента.Вставить("КратностьДокумента", ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета));

	КонецЕсли;
	
		
	//Отображение обязательных данных о договоре
	Если СтруктураШапкиДокумента.Свойство("ДоговорКонтрагента") Тогда

		Если ТипЗнч(СтруктураШапкиДокумента.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") тогда
			СтруктураШапкиДокумента.Вставить("ВедениеВзаиморасчетов",    СтруктураШапкиДокумента.ДоговорКонтрагента.ВедениеВзаиморасчетов);
			СтруктураШапкиДокумента.Вставить("ВалютаВзаиморасчетов",     СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов);
			СтруктураШапкиДокумента.Вставить("Внешнеэкономический",      СтруктураШапкиДокумента.ДоговорКонтрагента.Внешнеэкономический);
		КонецЕсли;

	КонецЕсли;	
	
	Возврат СтруктураШапкиДокумента;
	
КонецФункции // СформироватьСтруктуруШапкиДокумента()

// Формирует структуру дерева значений, содержащего имена полей, которые
// нужно заполнить в запросе по шапке документа.
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Дерево значений.
//
Функция СформироватьДеревоПолейЗапросаПоШапке()  Экспорт

	ДеревоПолейЗапросаПоШапке = Новый ДеревоЗначений;

	ОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	
	ДеревоПолейЗапросаПоШапке.Колонки.Добавить("Объект"   , ОписаниеТиповСтрока);
	ДеревоПолейЗапросаПоШапке.Колонки.Добавить("Поле"     , ОписаниеТиповСтрока);
	ДеревоПолейЗапросаПоШапке.Колонки.Добавить("Псевдоним", ОписаниеТиповСтрока);
	
	Возврат ДеревоПолейЗапросаПоШапке;

КонецФункции // СформироватьДеревоПолейЗапросаПоШапке()

Процедура ЗагрузитьВТаблицуЗначений(ТаблицаИсточник, ТаблицаПриемник) Экспорт

	// Заполним значения в совпадающих колонках.
	Для каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл

		СтрокаТаблицыПриемника = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);

	КонецЦикла;

КонецПроцедуры // ЗагрузитьВТаблицуЗначений()

Процедура УдалитьДвиженияРегистратора(ДокументОбъект, Отказ) Экспорт
	
	// получение списка регистров, по которым существуют движения
	ТаблицаДвижений = ПолныеПрава.ОпределитьНаличиеДвиженийПоРегистратору(ДокументОбъект.Ссылка);
	ТаблицаДвижений.Колонки.Добавить("НаборЗаписей");
	ТаблицаДвижений.Колонки.Добавить("БезусловноеУдаление", Новый ОписаниеТипов("Булево"));
		
	Для Каждого СтрокаДвижения ИЗ ТаблицаДвижений Цикл
		// имя регистра передается как значение, полученное с помощью
		// функции ПолноеИмя() метаданных регистра
		ПозицияТочки = Найти(СтрокаДвижения.Имя, ".");
		ТипРегистра = Лев(СтрокаДвижения.Имя, ПозицияТочки - 1);
		ИмяРегистра = СокрП(Сред(СтрокаДвижения.Имя, ПозицияТочки + 1));
		
		ЕСли ТипРегистра = "РегистрНакопления" Тогда
			МетаданныеНабора = Метаданные.РегистрыНакопления[ИмяРегистра];
			Набор = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
			
		ИначеЕсли ТипРегистра = "РегистрБухгалтерии" Тогда
			МетаданныеНабора = Метаданные.РегистрыБухгалтерии[ИмяРегистра];
			Набор = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
			
		ИначеЕсли ТипРегистра = "РегистрСведений" Тогда
			МетаданныеНабора = Метаданные.РегистрыСведений[ИмяРегистра];
			Набор = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
			
		ИначеЕсли ТипРегистра = "РегистрРасчета" Тогда
			МетаданныеНабора = Метаданные.РегистрыРасчета[ИмяРегистра];
			Набор = РегистрыРасчета[ИмяРегистра].СоздатьНаборЗаписей();
			
		КонецЕсли;
			
		Если НЕ ПравоДоступа("Изменение", МетаданныеНабора) Тогда
			// отсутствуют права на всю таблицу регистра
			Сообщить("Нарушение прав доступа");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
			
		Набор.Отбор.Регистратор.Установить(ДокументОбъект.Ссылка);
		// набор не записывается сразу, чтобы не откатывать транзакцию, если впоследствии
		// выяснится, что на один из регистров не хватает прав.
		СтрокаДвижения.НаборЗаписей = Набор;
		
	КонецЦикла;
	
	Для Каждого СтрокаДвижения ИЗ ТаблицаДвижений Цикл
		Если СтрокаДвижения.БезусловноеУдаление Тогда
			ПолныеПрава.ЗаписатьНаборЗаписейНаСервере(СтрокаДвижения.НаборЗаписей, ДокументОбъект.Ссылка);
		Иначе
			Попытка
				СтрокаДвижения.НаборЗаписей.Записать();
			Исключение
				// возможно «сработал» RLS или механизм даты запрета изменения
				Сообщить(ОписаниеОшибки());
				Отказ = Истина;
				ВызватьИсключение "Операция не выполнена";
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	ОчисткаКоллекцииДвиженийДокумента(ДокументОбъект);
	
	// Удаление записей регистрации из всех последовательностей
	УдалитьРегистрациюДокументаВПоследовательностях(ДокументОбъект, Истина);

КонецПроцедуры

Процедура ОчисткаКоллекцииДвиженийДокумента(ДокументОбъект) Экспорт
		
	Для Каждого Движение ИЗ ДокументОбъект.Движения Цикл
		Если Движение.Количество() > 0 Тогда
			Движение.Очистить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьРегистрациюДокументаВПоследовательностях(ДокументОбъект, ПроверятьДвижения = Ложь)Экспорт

	// получение списка последовательностей в которых зарегистрирован документ
	Если ПроверятьДвижения Тогда
		ТаблицаРегистраций = ОпределитьНаличиеРегистрацииДокументаВПоследовательности(ДокументОбъект);
	КонецЕсли;      
	КоллекцияПоследовательностей = ДокументОбъект.ПринадлежностьПоследовательностям;
	Для Каждого НаборЗаписейРегистрацииВПоследовательности ИЗ КоллекцияПоследовательностей Цикл
		Если (НаборЗаписейРегистрацииВПоследовательности.Количество() > 0)
		  ИЛИ (ПроверятьДвижения И (НЕ ТаблицаРегистраций.Найти(НаборЗаписейРегистрацииВПоследовательности.Метаданные().Имя,"Имя") = Неопределено)) Тогда
		   НаборЗаписейРегистрацииВПоследовательности.Очистить();

		КонецЕсли;
	КонецЦикла;
КонецПроцедуры//УдалитьРегистрациюДокументаВПоследовательностях

Функция ОпределитьНаличиеРегистрацииДокументаВПоследовательности(ДокументОбъект) Экспорт
	ТекстЗапроса = "";	
	
	Для Каждого Последовательность ИЗ ДокументОбъект.ПринадлежностьПоследовательностям Цикл
		// в запросе получаем имена последовательностей, в которых документ зарегистрирован
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ """ + Последовательность.Метаданные().Имя 
		+  """ КАК Имя ИЗ " + Последовательность.Метаданные().ПолноеИмя()  
		+ " ГДЕ Регистратор = &Регистратор";
		
	КонецЦикла;
	
	Если ТекстЗапроса = "" Тогда
		Возврат Новый ТаблицаЗначений();
	Иначе
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Регистратор", ДокументОбъект.Ссылка);
		ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();	
		Возврат ТаблицаЗапроса;
	КонецЕсли;
	
КонецФункции

Функция СформироватьЗапросПоТабличнойЧасти(ДокументОбъект, ИмяТабличнойЧасти, СтруктураПолей,
											СтруктураПростыхПолей = Неопределено,
											СтруктураСложныхПолей = Неопределено) Экспорт
											
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "";
	
	ДокументМетаданные = ДокументОбъект.Метаданные();

	Для Каждого Реквизит Из СтруктураПолей Цикл

		ТекстЗапроса  = ТекстЗапроса + ",
		|Док." + Реквизит.Значение + 
		?(НЕ ЗначениеЗаполнено(Реквизит.Ключ), "", " КАК " + СокрЛП(Реквизит.Ключ));

	КонецЦикла;
	
	ТекстСоединение="";
	
	Запрос = Новый Запрос;

 	Если ТипЗнч(СтруктураПростыхПолей) = Тип("Структура") Тогда // Добавим к запросу конструкции.
 		НомерПараметра = 0;
 		Для Каждого Элемент Из СтруктураПростыхПолей Цикл
 			Если НЕ ЗначениеЗаполнено(Элемент.Ключ) Тогда
 				Продолжить;
 			КонецЕсли;
 			НомерПараметра = НомерПараметра + 1;
			Если ВРЕГ(Элемент.Ключ) = "ПРОЕКТ" Тогда
				ТекстЗапроса  = ТекстЗапроса + ",
				| " + Элемент.Значение + 
				" КАК " + СокрЛП(Элемент.Ключ);
			Иначе	
				ТекстЗапроса  = ТекстЗапроса + ",
	 			| &ПараметрЗапроса" + НомерПараметра + " КАК " + СокрЛП(Элемент.Ключ);
	 			Запрос.УстановитьПараметр("ПараметрЗапроса" + НомерПараметра, Элемент.Значение);
			КонецЕсли;

		КонецЦикла;
		
		Если СтруктураПростыхПолей.Свойство("Проект") Тогда
			
			ТекстСоединение="
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УстановкаПроектовДляНоменклатуры.СрезПоследних(&ДатаДок, НоменклатураПроекта В (ВЫБРАТЬ Номенклатура ИЗ Документ." + ДокументМетаданные.Имя + "."+ СокрЛП(ИмяТабличнойЧасти) + " ГДЕ Ссылка = &ДокументСсылка)) КАК ПроектыНоменклатуры
			|ПО Док.Номенклатура=ПроектыНоменклатуры.НоменклатураПроекта";
			
			Запрос.УстановитьПараметр("ДатаДок",ДокументОбъект.Дата);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(СтруктураСложныхПолей) = Тип("Структура") Тогда // Добавим к запросу конструкции.
		
		Для Каждого Элемент Из СтруктураСложныхПолей Цикл
			
			ТекстЗапроса  = ТекстЗапроса + ",
			| " + Элемент.Значение + 
			" КАК " + СокрЛП(Элемент.Ключ);
			
		КонецЦикла;
		
	КонецЕсли;

	Запрос.Текст = "ВЫБРАТЬ 
				| Док.НомерСтроки " + ТекстЗапроса + "
				| ИЗ 
				|      Документ." + ДокументМетаданные.Имя + "."+ СокрЛП(ИмяТабличнойЧасти) + 
				" КАК Док"+ТекстСоединение+" 
				|     ГДЕ Док.Ссылка = &ДокументСсылка";


	// Установим параметры запроса.
	Запрос.УстановитьПараметр("ДокументСсылка" , ДокументОбъект.Ссылка);
	
	Если ДокументОбъект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ Док.Ссылка = &ДокументСсылка", "ГДЕ ЛОЖЬ");
	КонецЕсли;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоТабличнойЧасти()

