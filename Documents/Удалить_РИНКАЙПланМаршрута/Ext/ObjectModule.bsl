//[02.02.2016 23:57:06] valentin.dp: Ресурс = "/riro/WebServiceInterface"; меняете на /riro/WebService2Interface
//[0:04:10] valentin.dp: переходите по ссылке http://www.rinkai.eu/riro/WebService2Interface?xsd=1
//[0:04:39] valentin.dp: сохраняете как xml, импортируете XDTO в конфигурацию



Перем wsKey;

Функция ПолучитьОтветHTTP(ТекстЗапроса,МетодСервиса,МетодСервисаОтвет)
	Сервер = "rinkai.eu";
    Ресурс = "/riro/WebService2Interface";
	
	ПроксиСервер = Новый ИнтернетПрокси;
	//ПроксиСервер.Пользователь = Константы.ПроксиПользователь.Получить();
	//ПроксиСервер.Пароль       = Константы.ПроксиПароль.Получить();
	
	ПроксиСервер.Пользователь = "";
	ПроксиСервер.Пароль       = ""; 
    HTTP =  Новый HTTPСоединение(Сервер,,,,ПроксиСервер,120);
	
	Если HTTP = Неопределено Тогда
		Сообщить("Не удалось установить HTTP соединение!");
		Возврат "";
	КонецЕсли;	

 
	ТекстЗапроса = "<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:web=""http://webservice.riro.rinkai/"">
				|   <soapenv:Header/>
				|   <soapenv:Body> 
				|      <web:"+МетодСервиса+">
				|      "+ТекстЗапроса+"
				|      </web:"+МетодСервиса+">
				|   </soapenv:Body>
				|</soapenv:Envelope>";
    
		
	ЗаголовокHTTP = Новый Соответствие();
    ЗаголовокHTTP.Вставить("Content-type", "text/xml;charset=UTF-8");
	ЗаголовокHTTP.Вставить("SOAPAction"  , "");

	
	HTTPЗапрос = Новый HTTPЗапрос(Ресурс,ЗаголовокHTTP);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТекстЗапроса,"UTF-8");
	
	
    HTTPОтвет = HTTP.ОтправитьДляОбработки(HTTPЗапрос);
	
	Если HTTPОтвет = Неопределено Тогда
		Сообщить("Не удалось получить ответ!");
		Возврат "";
	КонецЕсли;
	
    Запрос    = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	Запрос = Сред(Запрос,Найти(Запрос,"<return>"));
	Запрос = Сред(Запрос,1,Найти(Запрос,"</return>")-1) + "</return>";
	Запрос = 
	"<"+МетодСервисаОтвет+" xmlns=""http://webservice.riro.rinkai/"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">
	|"+Запрос+"
    |</"+МетодСервисаОтвет+">";
	
	
	Возврат Запрос; 
КонецФункции


Функция ПолучитьИндентификаторСклада()

	//Возврат Подразделение.Код;
	Возврат "FNO";
	
КонецФункции	


Процедура УдалитьЗаказыИзВременнойТаблицыWS()
	
	МетодСервиса 		= "DeleteAllLocationsAndOrders2";
	МетодСервисаОтвет 	= "DeleteAllLocationsAndOrders2Response"; 
	
	ТипОбъекта = ФабрикаXDTO.Тип("http://webservice.riro.rinkai/", МетодСервиса);
	
	ОбъектXDTO                    = ФабрикаXDTO.Создать(ТипОбъекта);
	ОбъектXDTO.wsKey              = wsKey;
	depotUserDefinedId            = ПолучитьИндентификаторСклада();
	Если depotUserDefinedId = "" Тогда
		Возврат;
	КонецЕсли;	
	ОбъектXDTO.depotUserDefinedId = depotUserDefinedId;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку(); // запись в строку
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
	ДанныеXML = ЗаписьXML.Закрыть(); // документ готов!
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ДанныеXML);
	//Удаляем первыю и последнюю строку, теги с определение метода
	ТекстовыйДокумент.УдалитьСтроку(1);
	ТекстовыйДокумент.УдалитьСтроку(ТекстовыйДокумент.КоличествоСтрок());
	ТекстЗапроса = ТекстовыйДокумент.ПолучитьТекст(); 	
    Если ТекстЗапроса = "" Тогда Возврат КонецЕсли;

	Результат = ПолучитьОтветHTTP(ТекстЗапроса,МетодСервиса,МетодСервисаОтвет);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Результат);
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,ФабрикаXDTO.Тип("http://webservice.riro.rinkai/", МетодСервисаОтвет));
	
	Если ОбъектXDTO.return = 0 Тогда
	Иначе
		Сообщить("Ошибка передачи данных. Код ошибки "+Строка(ОбъектXDTO.return.CallResult));
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьТаблицуДляВыгрузкиВCSV()
	
	ТаблицаВыгрузки = Новый ТаблицаЗначений;
	ТаблицаВыгрузки.Колонки.Добавить("Identification");
	ТаблицаВыгрузки.Колонки.Добавить("IdDeliveryPlace");
	ТаблицаВыгрузки.Колонки.Добавить("Name");
	ТаблицаВыгрузки.Колонки.Добавить("Street");
	ТаблицаВыгрузки.Колонки.Добавить("House");
	ТаблицаВыгрузки.Колонки.Добавить("Postcode");
	ТаблицаВыгрузки.Колонки.Добавить("City");
	ТаблицаВыгрузки.Колонки.Добавить("Country");
	ТаблицаВыгрузки.Колонки.Добавить("CommentDeliveryPlace");
	ТаблицаВыгрузки.Колонки.Добавить("Mail");
	ТаблицаВыгрузки.Колонки.Добавить("Phone");
	ТаблицаВыгрузки.Колонки.Добавить("StartFirstTimeWindow");
	ТаблицаВыгрузки.Колонки.Добавить("EndFirstTimeWindow");
	ТаблицаВыгрузки.Колонки.Добавить("StartSecondTimeWindow");
	ТаблицаВыгрузки.Колонки.Добавить("EndSecondTimeWindow");
	ТаблицаВыгрузки.Колонки.Добавить("EarliestPossibleLoadingStart");
	ТаблицаВыгрузки.Колонки.Добавить("LatestPossibleLoadingStart");
	ТаблицаВыгрузки.Колонки.Добавить("Longitude");
	ТаблицаВыгрузки.Колонки.Добавить("Latitude");
    ТаблицаВыгрузки.Колонки.Добавить("AdminTime");
	ТаблицаВыгрузки.Колонки.Добавить("UnloadingTime");
	ТаблицаВыгрузки.Колонки.Добавить("WeightLimit");
	ТаблицаВыгрузки.Колонки.Добавить("VehicleType");
    ТаблицаВыгрузки.Колонки.Добавить("IdOrder");
	ТаблицаВыгрузки.Колонки.Добавить("DateOrder");
	ТаблицаВыгрузки.Колонки.Добавить("CommentOrder");
	ТаблицаВыгрузки.Колонки.Добавить("OrderItems");
	ТаблицаВыгрузки.Колонки.Добавить("IdVehicle");
	ТаблицаВыгрузки.Колонки.Добавить("IdRoute");
	ТаблицаВыгрузки.Колонки.Добавить("StopOrder");
	
	
    //Заполним таблицу
	сообщить("Формирование таблицы выгрузки...");
	
	//ТаблицаЗаказов = ОбщегоНазначения.ПолучитьМассивИзДерева(ДеревоЗаказов);
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КпкЗаявкаЗапасы.Ссылка КАК Заказ,
	|	КпкЗаявкаЗапасы.Ссылка.Контрагент КАК ТорговаяТочка,
	|	СУММА(КпкЗаявкаЗапасы.Количество * КпкЗаявкаЗапасы.Номенклатура.Вес) КАК ВесЗаказа,
	|	&РИНКАЙ_ВременноеОкноС_1 КАК РИНКАЙ_ВременноеОкноС_1,
	|	&РИНКАЙ_ВременноеОкноДо_1 КАК РИНКАЙ_ВременноеОкноДо_1,
	|	&ДатаПоУмолчанию КАК РИНКАЙ_ВременноеОкноС_2,
	|	&ДатаПоУмолчанию КАК РИНКАЙ_ВременноеОкноДо_2,
	|	&РИНКАЙ_АдминистративноеВремя КАК РИНКАЙ_АдминистративноеВремя
	|ИЗ
	|	Документ.КпкЗаявка.Запасы КАК КпкЗаявкаЗапасы
	|ГДЕ
	|	КпкЗаявкаЗапасы.Ссылка.Проведен = ИСТИНА
	|	И КпкЗаявкаЗапасы.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И КпкЗаявкаЗапасы.Ссылка.Подразделение = &Подразделение
	|
	|СГРУППИРОВАТЬ ПО
	|	КпкЗаявкаЗапасы.Ссылка,
	|	КпкЗаявкаЗапасы.Ссылка.Контрагент");
	
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(Дата));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Дата));
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ДатаПоУмолчанию", Дата(1,1,1));
	Запрос.УстановитьПараметр("РИНКАЙ_ВременноеОкноС_1", Дата("01.01.0001 "+"7:00:00"));
	Запрос.УстановитьПараметр("РИНКАЙ_ВременноеОкноДо_1", Дата("01.01.0001 "+"20:00:00"));
	Запрос.УстановитьПараметр("РИНКАЙ_АдминистративноеВремя", Дата("01.01.0001 "+"0:10:00"));
	
	ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();
	
	Прогресс = 0;
	//Если ПроверкаЗаполнения(ТаблицаЗаказов) = Ложь Тогда
	//	Возврат ТаблицаВыгрузки;
	//КонецЕсли;	
	
	Для Каждого СтрокаЗаказа Из ТаблицаЗаказов Цикл
		
		Если СтрокаЗаказа.Заказ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаВыгрузки = ТаблицаВыгрузки.Добавить();
		
		СтрокаВыгрузки.Identification       = "RIRO_INPUT_LOCATIONSANDORDERS_V3.00";
		СтрокаВыгрузки.IdDeliveryPlace      = СтрокаЗаказа.ТорговаяТочка.Код;
		СтрокаВыгрузки.Name                 = СтрокаЗаказа.ТорговаяТочка.Наименование;
		СтрокаВыгрузки.Street               = СтрокаЗаказа.ТорговаяТочка.АдресДоставкиУлица.Наименование;
		СтрокаВыгрузки.House                = СтрокаЗаказа.ТорговаяТочка.АдресДоставкиДом;
		СтрокаВыгрузки.Postcode             = "";
		СтрокаВыгрузки.City                 = СтрокаЗаказа.ТорговаяТочка.АдресДоставкиГород.Наименование;
		СтрокаВыгрузки.Country              = "UA";
		СтрокаВыгрузки.CommentDeliveryPlace = "";
		СтрокаВыгрузки.Mail                 = ""; 
		СтрокаВыгрузки.Phone                = "";
		
		//СтрокаВыгрузки.StartFirstTimeWindow  = "-1";
		Если СтрокаЗаказа.ТорговаяТочка.РИНКАЙ_ВременноеОкноС_1 = Дата(1,1,1) Тогда
			СтрокаВыгрузки.StartFirstTimeWindow  = Час(СтрокаЗаказа.РИНКАЙ_ВременноеОкноС_1)*3600+Минута(СтрокаЗаказа.РИНКАЙ_ВременноеОкноС_1)*60+Секунда(СтрокаЗаказа.РИНКАЙ_ВременноеОкноС_1);
		Иначе
			СтрокаВыгрузки.StartFirstTimeWindow  = Час(СтрокаЗаказа.ТорговаяТочка.РИНКАЙ_ВременноеОкноС_1)*3600+Минута(СтрокаЗаказа.ТорговаяТочка.РИНКАЙ_ВременноеОкноС_1)*60+Секунда(СтрокаЗаказа.ТорговаяТочка.РИНКАЙ_ВременноеОкноС_1); 
		КонецЕсли;
		
		//СтрокаВыгрузки.EndFirstTimeWindow = "-1";
		Если СтрокаЗаказа.ТорговаяТочка.РИНКАЙ_ВременноеОкноДо_1 = Дата(1,1,1) Тогда
			СтрокаВыгрузки.EndFirstTimeWindow = Час(СтрокаЗаказа.РИНКАЙ_ВременноеОкноДо_1)*3600+Минута(СтрокаЗаказа.РИНКАЙ_ВременноеОкноДо_1)*60+Секунда(СтрокаЗаказа.РИНКАЙ_ВременноеОкноДо_1);
		Иначе
			СтрокаВыгрузки.EndFirstTimeWindow = Час(СтрокаЗаказа.ТорговаяТочка.РИНКАЙ_ВременноеОкноДо_1)*3600+Минута(СтрокаЗаказа.ТорговаяТочка.РИНКАЙ_ВременноеОкноДо_1)*60+Секунда(СтрокаЗаказа.ТорговаяТочка.РИНКАЙ_ВременноеОкноДо_1);
		КонецЕсли;
		
		
		//СтрокаВыгрузки.StartSecondTimeWindow        = "-1";	
		Если СтрокаЗаказа.ТорговаяТочка.РИНКАЙ_ВременноеОкноС_2 = Дата(1,1,1) Тогда
			
			Если СтрокаЗаказа.РИНКАЙ_ВременноеОкноС_2 = Дата(1,1,1) Тогда
				СтрокаВыгрузки.StartSecondTimeWindow        = "-1";	
			Иначе
				СтрокаВыгрузки.StartSecondTimeWindow  = Час(СтрокаЗаказа.РИНКАЙ_ВременноеОкноС_2)*3600+Минута(СтрокаЗаказа.РИНКАЙ_ВременноеОкноС_2)*60+Секунда(СтрокаЗаказа.ВременноеОкноС2);
			КонецЕсли;
			
		Иначе
			СтрокаВыгрузки.StartSecondTimeWindow  = Час(СтрокаЗаказа.ТорговаяТочка.РИНКАЙ_ВременноеОкноС_2)*3600+Минута(СтрокаЗаказа.ТорговаяТочка.РИНКАЙ_ВременноеОкноС_2)*60+Секунда(СтрокаЗаказа.ТорговаяТочка.РИНКАЙ_ВременноеОкноС_2); 
		КонецЕсли;
		
		//СтрокаВыгрузки.EndSecondTimeWindow          = "-1";	
		Если СтрокаЗаказа.ТорговаяТочка.РИНКАЙ_ВременноеОкноДо_2 = Дата(1,1,1) Тогда
			
			Если СтрокаЗаказа.РИНКАЙ_ВременноеОкноДо_2 = Дата(1,1,1) Тогда
				СтрокаВыгрузки.EndSecondTimeWindow          = "-1";	
			Иначе
				СтрокаВыгрузки.EndSecondTimeWindow = Час(СтрокаЗаказа.РИНКАЙ_ВременноеОкноДо_2)*3600+Минута(СтрокаЗаказа.РИНКАЙ_ВременноеОкноДо_2)*60+Секунда(СтрокаЗаказа.РИНКАЙ_ВременноеОкноДо_2);
			КонецЕсли;
			
		Иначе
			СтрокаВыгрузки.EndSecondTimeWindow = Час(СтрокаЗаказа.ТорговаяТочка.РИНКАЙ_ВременноеОкноДо_2)*3600+Минута(СтрокаЗаказа.ТорговаяТочка.РИНКАЙ_ВременноеОкноДо_2)*60+Секунда(СтрокаЗаказа.ТорговаяТочка.РИНКАЙ_ВременноеОкноДо_2);
		КонецЕсли;

		
		СтрокаВыгрузки.EarliestPossibleLoadingStart = "-1";
		СтрокаВыгрузки.LatestPossibleLoadingStart   = "-1";
		
		//Если ВыгружатьКоординаты Тогда
			СтрокаВыгрузки.Longitude                    = ?(СтрДлина(СтрокаЗаказа.ТорговаяТочка.ГПСДолгота)>2,СтрокаЗаказа.ТорговаяТочка.ГПСДолгота,"-1000");
			СтрокаВыгрузки.Latitude                     = ?(СтрДлина(СтрокаЗаказа.ТорговаяТочка.ГПСШирота)>2,СтрокаЗаказа.ТорговаяТочка.ГПСШирота,"-1000");
		//Иначе	
		//	Если СтрокаЗаказа.ТорговаяТочка.ВыгруженВСистемуRinkai Тогда
		//		СтрокаВыгрузки.Longitude                    = "-1000";
		//		СтрокаВыгрузки.Latitude  	                = "-1000"
		//	Иначе	
		//		СтрокаВыгрузки.Longitude                    = ?(СтрДлина(СтрокаЗаказа.ТорговаяТочка.Долгота)>2,СтрокаЗаказа.ТорговаяТочка.Долгота,"-1000");
		//		СтрокаВыгрузки.Latitude                     = ?(СтрДлина(СтрокаЗаказа.ТорговаяТочка.Широта)>2,СтрокаЗаказа.ТорговаяТочка.Широта,"-1000");
		//		ТорговаяТочка = СтрокаЗаказа.ТорговаяТочка.ПолучитьОбъект();
		//		ТорговаяТочка.ВыгруженВСистемуRinkai = Истина;
		//		ТорговаяТочка.Записать();
		//	КонецЕсли;
		//КонецЕсли;
		
		//СтрокаВыгрузки.AdminTime = "-1";
		Если СтрокаЗаказа.ТорговаяТочка.РИНКАЙ_АдминистративноеВремя = Дата(1,1,1) Тогда
			
			Если СтрокаЗаказа.РИНКАЙ_АдминистративноеВремя = Дата(1,1,1) Тогда
				СтрокаВыгрузки.AdminTime          = "-1";	
			Иначе
				СтрокаВыгрузки.AdminTime = Минута(СтрокаЗаказа.РИНКАЙ_АдминистративноеВремя)*60;
			КонецЕсли;
			
		Иначе
			СтрокаВыгрузки.AdminTime = Минута(СтрокаЗаказа.ТорговаяТочка.РИНКАЙ_АдминистративноеВремя)*60;
		КонецЕсли;
		
		
		СтрокаВыгрузки.UnloadingTime = "-1";
		СтрокаВыгрузки.WeightLimit   = "-1";
		СтрокаВыгрузки.VehicleType   = "-1";
		СтрокаВыгрузки.IdOrder       = Формат(Число(СтрокаЗаказа.Заказ.Номер),"ЧГ=");
		СтрокаВыгрузки.DateOrder     = Формат(СтрокаЗаказа.Заказ.ДатаДоставки,"ДФ=гггММдд");
		СтрокаВыгрузки.CommentOrder  = СокрЛП(СтрокаЗаказа.Заказ.Комментарий);
		СтрокаВыгрузки.OrderItems    = "W:"+СтрЗаменить(Формат(Число(СтрокаЗаказа.ВесЗаказа),"ЧГ="),",",".")+"#V:0#WB:0#VB:0";
		СтрокаВыгрузки.IdVehicle     = СокрЛП(СтрокаЗаказа.Заказ.МаршрутРазвоза.Код);
		СтрокаВыгрузки.IdRoute       = СокрЛП(СтрокаЗаказа.Заказ.МаршрутРазвоза.Код);//"-1"; 
		СтрокаВыгрузки.StopOrder     = "0";
		Прогресс = Прогресс + 1;
		//Состояние("Формирование таблицы выгрузки "+Прогресс);
	КонецЦикла;
	
    Возврат ТаблицаВыгрузки;	
КонецФункции

Функция ПолучитьТекстЗапросаДляЗаказов(МетодСервиса,ТаблицаВыгрузки)
	
	ТипОбъекта = ФабрикаXDTO.Тип("http://webservice.riro.rinkai/", МетодСервиса);
	
	ОбъектXDTO                    = ФабрикаXDTO.Создать(ТипОбъекта);
	ОбъектXDTO.wsKey              = wsKey;
	depotUserDefinedId            = ПолучитьИндентификаторСклада();
	Если depotUserDefinedId = "" Тогда
		Возврат "";
	КонецЕсли;	
	//ОбъектXDTO.depotUserDefinedId = depotUserDefinedId;
	
	Если ТаблицаВыгрузки.Количество() = 0 Тогда
		Сообщить("Нет данных, сформируйте отчет!");
		Возврат "";
	КонецЕсли;	
	
	Для Каждого СтрокаВыгрузки Из ТаблицаВыгрузки Цикл
		locationAndOrder = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://webservice.riro.rinkai/", "wsLocationAndOrder2"));
		locationAndOrder.DepotUserDefinedId     = depotUserDefinedId;
		locationAndOrder.LocationUserDefinedId  = СтрокаВыгрузки.IdDeliveryPlace;
		locationAndOrder.Name                   = СтрокаВыгрузки.Name;
		locationAndOrder.Country                = СтрокаВыгрузки.Country;
		locationAndOrder.City                   = СтрокаВыгрузки.City;
		locationAndOrder.Street                 = СтрокаВыгрузки.Street;
		locationAndOrder.HouseNumber            = СтрокаВыгрузки.House;
		locationAndOrder.PostCode               = СтрокаВыгрузки.PostCode;
		locationAndOrder.LocationComment        = СтрокаВыгрузки.CommentDeliveryPlace;
		locationAndOrder.Mail                   = СтрокаВыгрузки.Mail;
		locationAndOrder.Phone                  = СтрокаВыгрузки.Phone;
		locationAndOrder.TW1F                   = СтрокаВыгрузки.StartFirstTimeWindow;
		locationAndOrder.TW1T                   = СтрокаВыгрузки.EndFirstTimeWindow;
		locationAndOrder.TW2F                   = СтрокаВыгрузки.StartSecondTimeWindow;
		locationAndOrder.TW2T                   = СтрокаВыгрузки.EndSecondTimeWindow;
		locationAndOrder.LoadingStartTimeFrom   = СтрокаВыгрузки.EarliestPossibleLoadingStart;
		locationAndOrder.LoadingStartTimeTo     = СтрокаВыгрузки.LatestPossibleLoadingStart;
		locationAndOrder.GeoX                   = СтрокаВыгрузки.Longitude;
		locationAndOrder.GeoY                   = СтрокаВыгрузки.Latitude;
		locationAndOrder.TimeAtCustomer         = СтрокаВыгрузки.UnloadingTime;
		locationAndOrder.AdminTimeAtCustomer    = СтрокаВыгрузки.AdminTime;
		locationAndOrder.WeightLimit            = СтрокаВыгрузки.WeightLimit;
		locationAndOrder.VehicleTypeRestriction = СтрокаВыгрузки.VehicleType;
		locationAndOrder.OrderUserDefinedId     = СтрокаВыгрузки.IdOrder;
		locationAndOrder.Date                   = СтрокаВыгрузки.DateOrder;
		locationAndOrder.OrderComment           = СтрокаВыгрузки.CommentOrder;
		locationAndOrder.Items                  = СтрокаВыгрузки.OrderItems;
		locationAndOrder.VehicleUserDefinedId	= СтрокаВыгрузки.IdVehicle;
		locationAndOrder.RouteUserDefinedId		= СтрокаВыгрузки.IdRoute;

		ОбъектXDTO.locationsAndOrders.Добавить(locationAndOrder);	
	КонецЦикла;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку(); // запись в строку
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
	ДанныеXML = ЗаписьXML.Закрыть(); // документ готов!
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ДанныеXML);
	//Удаляем первыю и последнюю строку, теги с определение метода
	ТекстовыйДокумент.УдалитьСтроку(1);
	ТекстовыйДокумент.УдалитьСтроку(ТекстовыйДокумент.КоличествоСтрок());
	Возврат ТекстовыйДокумент.ПолучитьТекст(); 	
КонецФункции

Процедура ВыгрузитьЗаказыWS() Экспорт
	
	
	УдалитьЗаказыИзВременнойТаблицыWS();
	МетодСервиса      = "InsertLocationsAndOrdersForMultipleDepots2";
	МетодСервисаОтвет = "InsertLocationsAndOrdersForMultipleDepots2Response";
	ТаблицаВыгрузки   = ПодготовитьТаблицуДляВыгрузкиВCSV();
	ТекстЗапроса      = ПолучитьТекстЗапросаДляЗаказов(МетодСервиса,ТаблицаВыгрузки);
	
	Если ТекстЗапроса = "" Тогда Возврат КонецЕсли;
	Результат = ПолучитьОтветHTTP(ТекстЗапроса,МетодСервиса,МетодСервисаОтвет);
	//Результат = ПолучитьОтвет(ТекстЗапроса,МетодСервиса,МетодСервисаОтвет);
	Если Результат = "" Тогда Возврат КонецЕсли;
	ТаблицаВыгрузки.Колонки.Добавить("СтатусОтправки");
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Результат);
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,ФабрикаXDTO.Тип("http://webservice.riro.rinkai/", МетодСервисаОтвет));
	
	
	
	Для Индекс = 0 По ОбъектXDTO.return.InsertResults.Количество() - 1 Цикл
		ТаблицаВыгрузки[Индекс].СтатусОтправки = ОбъектXDTO.return.InsertResults[Индекс];
		Если Не ОбъектXDTO.return.InsertResults[Индекс] = 0 Тогда
			Сообщить("Ошибка передачи данных по заказу "+ТаблицаВыгрузки[Индекс].IdOrder+" торговой точки "+ТаблицаВыгрузки[Индекс].Name+". Код ошибки "+Строка(ОбъектXDTO.return.InsertResults[Индекс]));
		КонецЕсли;
	КонецЦикла;
	
	
	
	Если ОбъектXDTO.return.CallResult = 0 Тогда
		Сообщить("Данные успешно отправлены!");
	Иначе
		Сообщить("Ошибка передачи данных. Код ошибки "+Строка(ОбъектXDTO.return.CallResult));
	КонецЕсли;	

КонецПроцедуры

//  ----------------------------------------------------------------------------
//	ЗАГРУЗКА ЗАКАЗОВ
//	"GetPlans"
//  ----------------------------------------------------------------------------


//	ПолучитьТекстЗапросаДляПланов()
Функция ПолучитьТекстЗапросаДляПланов(МетодСервиса)
	
	ТипОбъекта = ФабрикаXDTO.Тип("http://webservice.riro.rinkai/", МетодСервиса);
	
	ОбъектXDTO                    = ФабрикаXDTO.Создать(ТипОбъекта);
	ОбъектXDTO.wsKey              = wsKey;
	depotUserDefinedId            = ПолучитьИндентификаторСклада();
	
	Если depotUserDefinedId = "" Тогда
		Возврат "";
	КонецЕсли;	
	
	ОбъектXDTO.depotUserDefinedId = depotUserDefinedId;
	
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку(); // запись в строку
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
	ДанныеXML = ЗаписьXML.Закрыть(); // документ готов!
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ДанныеXML);
	
	//Удаляем первыю и последнюю строку, теги с определение метода
	ТекстовыйДокумент.УдалитьСтроку(1);
	ТекстовыйДокумент.УдалитьСтроку(ТекстовыйДокумент.КоличествоСтрок());
	
	Возврат ТекстовыйДокумент.ПолучитьТекст(); 		
	
КонецФункции

//	Загрузка_RinkaiWS()
Процедура Загрузка_RinkaiWS(ОбъектXDTO)
	
	//ТаблицаЗагрузки  = СформироватьТаблицуЗагрузки();
	Остановки.Очистить();
	
	//Отобразим доступные планы
	//ФормаПланов = ЭтотОбъект.ПолучитьФорму("ФормаПланов",);
	
	
	//ТаблицаПланов = СформироватьТаблицуПланов();
	КолвоПланов = 1;
	Для Каждого План Из ОбъектXDTO.Return.Plans Цикл
		СтрокаПлана                     = Планы.Добавить();
		СтрокаПлана.Номер               = КолвоПланов;
		СтрокаПлана.НомерПлана          = План.PlanId;
		СтрокаПлана.Склад               = План.DepotUserDefinedId;
		СтрокаПлана.План                = План.Description;
		СтрокаПлана.ДатаСоздания        = Дата(Формат(План.CreationDate,"ЧГ="));
		СтрокаПлана.ВремяСоздания       = Дата("00010101"+?(СтрДлина(Формат(План.CreationTime,"ЧГ="))<6,"0"+Формат(План.CreationTime,"ЧГ="),Формат(План.CreationTime,"ЧГ=")));
		СтрокаПлана.ЦенаПлана           = План.Costs;
		СтрокаПлана.Километры           = План.Km;
		СтрокаПлана.ЗатраченноеВремя    = План.Time;
		СтрокаПлана.КоличествоМаршрутов = План.NoOfRoutes;
		КолвоПланов = КолвоПланов + 1;
	КонецЦикла;
	
	
	
	
	//Результат = ФормаПланов.ОткрытьМодально();
	//Если Результат = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	
	//НужныйПлан =  ОбъектXDTO.Return.Plans[Результат.Номер-1];
	Для Индекс = 1 По КолвоПланов - 1 Цикл
		НужныйПлан =  ОбъектXDTO.Return.Plans[Индекс-1];
		
		ЗаполнитьТаблицуЗагрузки(НужныйПлан.Routes);
		
		
		//Дополним таблицу данными из 1С
		//НачалоПериода = НачалоНедели(КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Период").Значение.ДатаНачала);
		//КонецПериода = КонецНедели(КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Период").Значение.ДатаОкончания);
		НачалоПериода = НачалоДня(Дата);
		КонецПериода = КонецДня(Дата);
		
		МассивНомеровЗаказов = Остановки.ВыгрузитьКолонку("НомерЗаказа");
		//ОбщегоНазначенияКлиентСервер.УдалитьПовторяющиесяЭлементыМассива(МассивНомеровЗаказов);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	кпкЗаявка.Ссылка,
		|	кпкЗаявка.Номер
		|ИЗ
		|	Документ.кпкЗаявка КАК кпкЗаявка
		|ГДЕ
		|	кпкЗаявка.Номер В(&Массив)
		|	И кпкЗаявка.ДатаДоставки МЕЖДУ &НачалоПериода И &КонецПериода
		|";
		
		Запрос.УстановитьПараметр("НачалоПериода",НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода",КонецПериода);
		Запрос.УстановитьПараметр("Массив",МассивНомеровЗаказов);
		
		Выборка = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаЗагрузки Из Остановки Цикл
			
			НомерЗаказа = Формат(Число(СтрокаЗагрузки.НомерЗаказа), "ЧЦ=11; ЧДЦ=; ЧВН=; ЧГ=");
			
			Если Выборка.Найти(НомерЗаказа,"Номер") <> Неопределено Тогда
				
				СтрокаЗагрузки.Заказ              = Выборка.Найти(СтрокаЗагрузки.НомерЗаказа).Ссылка;
				СтрокаЗагрузки.НаименованиеТТ     = СтрокаЗагрузки.Заказ.Контрагент.Наименование;
				СтрокаЗагрузки.НомерТорговойТочки = СтрокаЗагрузки.Заказ.Контрагент.Код;
				СтрокаЗагрузки.ТорговаяТочка      = СтрокаЗагрузки.Заказ.Контрагент;
				СтрокаЗагрузки.Улица              = СтрокаЗагрузки.Контрагент.АдресДоставкиУлица.Наименование;
				СтрокаЗагрузки.ДатаЗаказа         = СтрокаЗагрузки.Заказ.Дата; 
				СтрокаЗагрузки.ВесЗаказа          = СтрокаЗагрузки.Заказ.Запасы.Итог("Количество");
				СтрокаЗагрузки.КомментарийЗаказа  = СтрокаЗагрузки.Заказ.Комментарий;
				СтрокаЗагрузки.ВременноеОкноНачало  = ?(ЗначениеЗаполнено(СтрокаЗагрузки.ТорговаяТочка.РИНКАЙ_ВременноеОкноС_1),СтрокаЗагрузки.ТорговаяТочка.РИНКАЙ_ВременноеОкноС_1,Дата(1,1,1,8,0,0));
				СтрокаЗагрузки.ВременноеОкноКонец   = ?(ЗначениеЗаполнено(СтрокаЗагрузки.ТорговаяТочка.РИНКАЙ_ВременноеОкноДо_1),СтрокаЗагрузки.ТорговаяТочка.РИНКАЙ_ВременноеОкноДо_1,Дата(1,1,1,20,0,0));
				СтрокаЗагрузки.ВременноеОкноНачало2 = СтрокаЗагрузки.ТорговаяТочка.РИНКАЙ_ВременноеОкноС_2;
				СтрокаЗагрузки.ВременноеОкноКонец2  = СтрокаЗагрузки.ТорговаяТочка.РИНКАЙ_ВременноеОкноДо_1;
			Иначе
				Сообщить("Заказ с номером "+НомерЗаказа+" не найден в базе 1С!");
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	f=1;
	//ЗаполнитьДеревоRinkai();
	
КонецПроцедуры


//	ЗаполнитьТаблицуЗагрузки()
Процедура ЗаполнитьТаблицуЗагрузки(Маршруты)
	НомерМаршрута = 1;
	сообщить("Заполнение таблицы загрузки...");
	Для Каждого Маршрут Из Маршруты Цикл
		Для Каждого Остановка Из Маршрут.Stops Цикл
			СтрокаТаблицы = Остановки.Добавить();
			СтрокаТаблицы.ВерсияCSV                  = "WebService"; 
			СтрокаТаблицы.НомерМаршрута              = НомерМаршрута;
			СтрокаТаблицы.ИндентификаторМаршрута     = НомерМаршрута;
			СтрокаТаблицы.ДатаМаршрута               = Дата(Формат(Маршрут.Date,"ЧГ="));
			СтрокаТаблицы.НомерАвтомобиля            = Маршрут.VehicleUserDefinedId;
			СтрокаТаблицы.НомернойЗнак               = Маршрут.VehicleUserDefinedId;
			СтрокаТаблицы.КомментарийАвтомобиля      = Маршрут.Comment;
			СтрокаТаблицы.СтоимостьМаршрута          = Маршрут.Costs;
			СтрокаТаблицы.Километраж                 = Маршрут.Km;
			СтрокаТаблицы.Отправление                = ПолучитьВремяИзСекунд(Маршрут.DepartureTime);
			СтрокаТаблицы.Прибытие                   = ПолучитьВремяИзСекунд(Маршрут.ArrivalTime);
			СтрокаТаблицы.ПродолжительностьВождения  = ПолучитьВремяИзСекунд(Маршрут.ArrivalTime - Маршрут.DepartureTime);
			СтрокаТаблицы.КоличествоОстановок        = Маршрут.NoOfStops;
			СтрокаТаблицы.Грузоподъемность           = 0;
			СтрокаТаблицы.ОбъемАвтомобиля            = 0;
			СтрокаТаблицы.ДопПараметрАвтомобиля      = 0;
			СтрокаТаблицы.Вес                        = 0;
			СтрокаТаблицы.Объем                      = 0;
			СтрокаТаблицы.ДопПараметр                = 0;
			СтрокаТаблицы.ВесВозврат                 = 0;
			СтрокаТаблицы.ОбъемВозврат               = 0;
			СтрокаТаблицы.ДопПараметрВозврат         = 0;
			СтрокаТаблицы.НачалоМаршрута             = ПолучитьВремяИзСекунд(Маршрут.StartTime);
			СтрокаТаблицы.КонецМаршрута              = ПолучитьВремяИзСекунд(Маршрут.EndTime);
			СтрокаТаблицы.ПродолжительностьЗагрузки  = 0;
			СтрокаТаблицы.ПродолжительностьРазгрузки = 0;
			СтрокаТаблицы.СтопЗаказ                  = 0;
			СтрокаТаблицы.НомерТорговойТочки         = 0;
			СтрокаТаблицы.ДатаЗаказа                 = Дата(1,1,1);
			СтрокаТаблицы.НаименованиеТТ             = "";
			СтрокаТаблицы.Улица                      = "";
			СтрокаТаблицы.Дом                        = "";
			СтрокаТаблицы.Индекс                     = "";
			СтрокаТаблицы.Город                      = "";                               
			СтрокаТаблицы.Страна                     = "";
			СтрокаТаблицы.КомментарийТТ              = "";
			СтрокаТаблицы.Долгота                    = Остановка.GeoX;
			СтрокаТаблицы.Широта                     = Остановка.GeoY;
			СтрокаТаблицы.НомерЗаказа                = Строка(Число(Остановка.OrderUserDefinedId));
			СтрокаТаблицы.КомментарийЗаказа          = "";
			СтрокаТаблицы.РасстояниеОтПредТочки      = Остановка.Km;
			СтрокаТаблицы.ВремяПрибытия              = ПолучитьВремяИзСекунд(Остановка.ArrivalTime);
			СтрокаТаблицы.ВремяОтъезда               = ПолучитьВремяИзСекунд(Остановка.DepartureTime);
			СтрокаТаблицы.ВременноеОкноНачало        = 0;
			СтрокаТаблицы.ВременноеОкноКонец         = 0;
			СтрокаТаблицы.ВременноеОкноНачало2       = 0;
			СтрокаТаблицы.ВременноеОкноКонец2        = 0;
			СтрокаТаблицы.ВесЗаказа                  = 0;
			СтрокаТаблицы.ОбъемЗаказа                = 0;
			СтрокаТаблицы.ДопПараметрЗаказ           = 0;
			СтрокаТаблицы.ВесВозвратЗаказа           = 0;
			СтрокаТаблицы.ОбъемВозвратЗаказ          = 0;
			СтрокаТаблицы.ДопПараметрВозвратЗаказа   = 0;
		КонецЦикла;
		НомерМаршрута = НомерМаршрута + 1;
	КонецЦикла;		
КонецПроцедуры

//	УдалитьПланыИзВременнойТаблицыWS()
Процедура УдалитьПланыИзВременнойТаблицыWS()
	МетодСервиса 		= "DeleteAllPlans2";
	МетодСервисаОтвет 	= "DeleteAllPlans2Response"; 
	ТипОбъекта = ФабрикаXDTO.Тип("http://webservice.riro.rinkai/", МетодСервиса);
	
	ОбъектXDTO                    = ФабрикаXDTO.Создать(ТипОбъекта);
	ОбъектXDTO.wsKey              = wsKey;
	depotUserDefinedId            = ПолучитьИндентификаторСклада();
	Если depotUserDefinedId = "" Тогда
		Возврат;
	КонецЕсли;	
	ОбъектXDTO.depotUserDefinedId = depotUserDefinedId;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку(); // запись в строку
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
	ДанныеXML = ЗаписьXML.Закрыть(); // документ готов!
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ДанныеXML);
	//Удаляем первыю и последнюю строку, теги с определение метода
	ТекстовыйДокумент.УдалитьСтроку(1);
	ТекстовыйДокумент.УдалитьСтроку(ТекстовыйДокумент.КоличествоСтрок());
	ТекстЗапроса = ТекстовыйДокумент.ПолучитьТекст(); 	
    Если ТекстЗапроса = "" Тогда Возврат КонецЕсли;

	Результат = ПолучитьОтветHTTP(ТекстЗапроса,МетодСервиса,МетодСервисаОтвет);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Результат);
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,ФабрикаXDTO.Тип("http://webservice.riro.rinkai/", МетодСервисаОтвет));
	
	Если ОбъектXDTO.return = 0 Тогда
	Иначе
		Сообщить("Ошибка передачи данных. Код ошибки "+Строка(ОбъектXDTO.return.CallResult));
	КонецЕсли;		
КонецПроцедуры	


//	ЗагрузитьЗаказыWS()
Процедура ЗагрузитьЗаказыWS() Экспорт
	
	
	МетодСервиса      = "GetPlans2";
	МетодСервисаОтвет = "GetPlans2Response";
	ТекстЗапроса      = ПолучитьТекстЗапросаДляПланов(МетодСервиса);
	
	Если ТекстЗапроса = "" Тогда Возврат КонецЕсли;
	
	Результат = ПолучитьОтветHTTP(ТекстЗапроса,МетодСервиса,МетодСервисаОтвет);
	Если Результат = "" Тогда Возврат КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Результат);
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,ФабрикаXDTO.Тип("http://webservice.riro.rinkai/", МетодСервисаОтвет));
	
			
	Если ОбъектXDTO.return.CallResult = 0 Тогда
		Сообщить("Данные успешно получены!");
	Иначе
		Сообщить("Ошибка получения данных. Код ошибки "+Строка(ОбъектXDTO.return.CallResult));
		Возврат;
	КонецЕсли;	

    Загрузка_RinkaiWS(ОбъектXDTO);
	
	//Если УдалятьПланыПослеЗагрузки Тогда
	Если 1=2 Тогда
		УдалитьПланыИзВременнойТаблицыWS();
	КонецЕсли;
	
КонецПроцедуры	// ЗагрузитьЗаказыWS()




Функция ПолучитьВремяИзСекунд(Время)
  Минуты  = Цел(Время/60);
  Секунды = Время - Минуты*60;
  Часы    = Цел(Минуты/60);
  МинутыОстаток = Минуты - Часы*60;
  
  СтрокаСекунды = Формат(Секунды,"ЧЦ=2;ЧГ=;ЧВН=;ЧН=");
  СтрокаМинуты  = Формат(МинутыОстаток,"ЧЦ=2;ЧГ=;ЧВН=;ЧН=");
  СтрокаЧасы    = Формат(Часы,"ЧЦ=2;ЧГ=;ЧВН=;ЧН=");
    
  Возврат Дата("00010101"+СтрокаЧасы+СтрокаМинуты+СтрокаЧасы);
КонецФункции

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// заполним маршруты в кпкЗаявках
	НачатьТранзакцию();
	
	Для Каждого СтрокаОстановки Из Остановки Цикл
		
		Если НЕ(СтрокаОстановки.Заявка.МаршрутРазвоза = Справочники.МаршрутыРазвоза.ПустойМаршрут) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаявкаОбъект = СтрокаОстановки.Заявка.ПолучитьОбъект();
		ЗаявкаОбъект.МаршрутРазвоза = СтрокаОстановки.МаршрутРазвоза;
		ЗаявкаОбъект.Записать();
		
		Если 1=1 Тогда
			сообщить(СтрШаблон("Установлен маршрут: %1, в заявке %2", СтрокаОстановки.МаршрутРазвоза, СтрокаОстановки.Заявка));
		КонецЕсли;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры



wsKey = "fain0n0";