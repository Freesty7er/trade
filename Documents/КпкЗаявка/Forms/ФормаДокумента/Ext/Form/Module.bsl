
#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не Параметры.ЗначениеКопирования.Пустая() Тогда
		ОбновитьИнформациюОДолгахКонтрагента();
	КонецЕсли;
	
	открытиеИзЗадачи = Неопределено;
	Если Параметры.ДополнительныеПараметры.Свойство("ОткрытиеИзЗадачи", открытиеИзЗадачи) И открытиеИзЗадачи Тогда
		Элементы.Подразделение.ТолькоПросмотр = Истина;
		Элементы.Контрагент.ТолькоПросмотр = Истина;
		//Элементы.Менеджер.ТолькоПросмотр = Истина;
		Элементы.ТипЦен.ТолькоПросмотр = Истина;
		Элементы.Организация.ТолькоПросмотр = Истина;
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ОбновитьИнформациюОДолгахКонтрагента();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
	
		Если ДолгПросроченный > 0 Тогда
			
			ТекстСообщения = НСтр("ru = 'У контрагента имеется просроченная задолженность.'");
			Предупреждение(ТекстСообщения);
		
		КонецЕсли; 
	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(отказ, текущийОбъект, параметрыЗаписи)
	
	// проверка задолженности
	стДолги = Документы.КпкЗаявка.ПолучитьИнформациюОДолгахКонтрагента(текущийОбъект);
	Если стДолги.ДолгПросроченный > 0 И Не Объект.Контрагент.КД_КаналСбыта = Справочники.КД_КаналыСбыта.СобственнаяРозница() Тогда
		
		текстСообщения = НСтр("ru = 'Проведение документа невозможно при наличии просроченной задолжности.'");
		ПроверкаДанныхКлиентСервер.СообщитьОбОшибке(Отказ, ТекстСообщения, ЭтотОбъект, "Контрагент");
		
	КонецЕсли; 
	
	Если ПолучитьФункциональнуюОпцию("ВыполнятьПроверкуСтандартаВЗаявке", Новый Структура("Период, Подразделение", текущийОбъект.Дата, текущийОбъект.Подразделение)) Тогда
		
		запрос = Новый Запрос;
		запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		#Область ТекстЗапроса
		
		запрос.Текст = 
		"ВЫБРАТЬ
		|	КпкЗаявкаЗапасы.НомерСтроки,
		|	КпкЗаявкаЗапасы.Единица,
		|	КпкЗаявкаЗапасы.Количество,
		|	КпкЗаявкаЗапасы.КоличествоИзменено,
		|	КпкЗаявкаЗапасы.КоличествоРекомендовано,
		|	КпкЗаявкаЗапасы.Коэффициент,
		|	ВЫРАЗИТЬ(КпкЗаявкаЗапасы.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	КпкЗаявкаЗапасы.Сумма,
		|	КпкЗаявкаЗапасы.Цена,
		|	КпкЗаявкаЗапасы.КоличествоЗаказанное
		|ПОМЕСТИТЬ ВТ_Запасы
		|ИЗ
		|	&тч_Запасы КАК КпкЗаявкаЗапасы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодыСтандартаПоГруппеПродукта.Подразделение,
		|	ПериодыСтандартаПоГруппеПродукта.ГруппаПродукции,
		|	ПериодыСтандартаПоГруппеПродукта.КатегорияТТ,
		|	ПериодыСтандартаПоГруппеПродукта.ТорговаяТочка,
		|	КД_СтандартПрисутствия.Номенклатура,
		|	1 КАК ЕстьСтандарт,
		|	КД_СтандартПрисутствия.ПриоритетПродукта
		|ПОМЕСТИТЬ ВТ_СтандартПрисутствия
		|ИЗ
		|	(ВЫБРАТЬ
		|		КД_КатегорииТорговыхТочекСрезПоследних.Подразделение КАК Подразделение,
		|		КД_КатегорииТорговыхТочекСрезПоследних.ГруппаПродукции КАК ГруппаПродукции,
		|		КД_КатегорииТорговыхТочекСрезПоследних.КатегорияТТ КАК КатегорияТТ,
		|		КД_КатегорииТорговыхТочекСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
		|		МАКСИМУМ(КД_СтандартПрисутствия.Период) КАК ПериодСтандарта,
		|		МАКСИМУМ(КД_СтандартПрисутствия1.Период) КАК ПериодСтандартаТТ
		|	ИЗ
		|		РегистрСведений.КД_КатегорииТорговыхТочек.СрезПоследних(
		|				&ДатаДокумента,
		|				ТорговаяТочка = &Контрагент
		|					И ГруппаПродукции В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							ВТ_Запасы.Номенклатура.КД_Группа
		|						ИЗ
		|							ВТ_Запасы)) КАК КД_КатегорииТорговыхТочекСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КД_СтандартПрисутствия КАК КД_СтандартПрисутствия
		|			ПО КД_КатегорииТорговыхТочекСрезПоследних.Подразделение = КД_СтандартПрисутствия.Подразделение
		|				И КД_КатегорииТорговыхТочекСрезПоследних.ГруппаПродукции = КД_СтандартПрисутствия.ГруппаПродукции
		|				И КД_КатегорииТорговыхТочекСрезПоследних.КатегорияТТ = КД_СтандартПрисутствия.КатегорияТТ
		|				И (КД_СтандартПрисутствия.Период МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаДокумента, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ДатаДокумента, МЕСЯЦ))
		|				И (КД_СтандартПрисутствия.ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КД_СтандартПрисутствия КАК КД_СтандартПрисутствия1
		|			ПО КД_КатегорииТорговыхТочекСрезПоследних.Подразделение = КД_СтандартПрисутствия1.Подразделение
		|				И КД_КатегорииТорговыхТочекСрезПоследних.ГруппаПродукции = КД_СтандартПрисутствия1.ГруппаПродукции
		|				И КД_КатегорииТорговыхТочекСрезПоследних.КатегорияТТ = КД_СтандартПрисутствия1.КатегорияТТ
		|				И (КД_СтандартПрисутствия1.Период МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаДокумента, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ДатаДокумента, МЕСЯЦ))
		|				И КД_КатегорииТорговыхТочекСрезПоследних.ТорговаяТочка = КД_СтандартПрисутствия1.ТорговаяТочка
		|	
		|	СГРУППИРОВАТЬ ПО
		|		КД_КатегорииТорговыхТочекСрезПоследних.Подразделение,
		|		КД_КатегорииТорговыхТочекСрезПоследних.ГруппаПродукции,
		|		КД_КатегорииТорговыхТочекСрезПоследних.КатегорияТТ,
		|		КД_КатегорииТорговыхТочекСрезПоследних.ТорговаяТочка) КАК ПериодыСтандартаПоГруппеПродукта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КД_СтандартПрисутствия КАК КД_СтандартПрисутствия
		|		ПО ПериодыСтандартаПоГруппеПродукта.Подразделение = КД_СтандартПрисутствия.Подразделение
		|			И ПериодыСтандартаПоГруппеПродукта.ГруппаПродукции = КД_СтандартПрисутствия.ГруппаПродукции
		|			И ПериодыСтандартаПоГруппеПродукта.КатегорияТТ = КД_СтандартПрисутствия.КатегорияТТ
		|			И (ВЫБОР
		|				КОГДА ПериодыСтандартаПоГруппеПродукта.ПериодСтандартаТТ ЕСТЬ NULL 
		|					ТОГДА КД_СтандартПрисутствия.ТорговаяТочка = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|				ИНАЧЕ КД_СтандартПрисутствия.ТорговаяТочка = ПериодыСтандартаПоГруппеПродукта.ТорговаяТочка
		|			КОНЕЦ)
		|			И (ВЫБОР
		|				КОГДА ПериодыСтандартаПоГруппеПродукта.ПериодСтандартаТТ ЕСТЬ NULL 
		|					ТОГДА КД_СтандартПрисутствия.Период = ПериодыСтандартаПоГруппеПродукта.ПериодСтандарта
		|				ИНАЧЕ КД_СтандартПрисутствия.Период = ПериодыСтандартаПоГруппеПродукта.ПериодСтандартаТТ
		|			КОНЕЦ)
		|ГДЕ
		|	НЕ КД_СтандартПрисутствия.Номенклатура ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.НомерСтроки,
		|	ВложенныйЗапрос.Номенклатура
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_Запасы.НомерСтроки КАК НомерСтроки,
		|		ВТ_Запасы.Единица КАК Единица,
		|		ВТ_Запасы.Количество КАК Количество,
		|		ВТ_Запасы.КоличествоИзменено КАК КоличествоИзменено,
		|		ВТ_Запасы.КоличествоРекомендовано КАК КоличествоРекомендовано,
		|		ВТ_Запасы.Коэффициент КАК Коэффициент,
		|		ВТ_Запасы.Номенклатура КАК Номенклатура,
		|		ВТ_Запасы.Номенклатура.КД_Группа КАК НоменклатураКД_Группа,
		|		ВТ_Запасы.Сумма КАК Сумма,
		|		ВТ_Запасы.Цена КАК Цена,
		|		ВТ_Запасы.КоличествоЗаказанное КАК КоличествоЗаказанное,
		|		ЕстьСтандартПоГруппеПродукта.КатегорияТТ КАК КатегорияТТ,
		|		ВЫБОР
		|			КОГДА ЕстьСтандартПоГруппеПродукта.ЕстьСтандарт > 0
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ЕстьСтандарт,
		|		ВТ_СтандартПрисутствия.ПриоритетПродукта КАК ПриоритетПродукта
		|	ИЗ
		|		ВТ_Запасы КАК ВТ_Запасы
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ВТ_СтандартПрисутствия.ГруппаПродукции КАК ГруппаПродукта,
		|				ВТ_СтандартПрисутствия.КатегорияТТ КАК КатегорияТТ,
		|				СУММА(ВТ_СтандартПрисутствия.ЕстьСтандарт) КАК ЕстьСтандарт
		|			ИЗ
		|				ВТ_СтандартПрисутствия КАК ВТ_СтандартПрисутствия
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ВТ_СтандартПрисутствия.ГруппаПродукции,
		|				ВТ_СтандартПрисутствия.КатегорияТТ) КАК ЕстьСтандартПоГруппеПродукта
		|			ПО ВТ_Запасы.Номенклатура.КД_Группа = ЕстьСтандартПоГруппеПродукта.ГруппаПродукта
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтандартПрисутствия КАК ВТ_СтандартПрисутствия
		|			ПО ВТ_Запасы.Номенклатура = ВТ_СтандартПрисутствия.Номенклатура) КАК ВложенныйЗапрос
		|ГДЕ
		|	ВложенныйЗапрос.ЕстьСтандарт
		|	И ВложенныйЗапрос.ПриоритетПродукта ЕСТЬ NULL 
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.НомерСтроки";
		
		#КонецОбласти
		
		запрос.УстановитьПараметр("ДатаДокумента",Объект.Дата);
		запрос.УстановитьПараметр("тч_Запасы",Объект.Запасы.Выгрузить());
		запрос.УстановитьПараметр("Контрагент",Объект.Контрагент);
		
		результатЗапроса = запрос.Выполнить();
		
		#Область ПолучениеВременныхТаблиц
		
		запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_Запасы";
		запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_СтандартПрисутствия";
		запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТ_СтандартПрисутствия.ГруппаПродукции КАК ГруппаПродукта,
		|	ВТ_СтандартПрисутствия.КатегорияТТ КАК КатегорияТТ,
		|	СУММА(ВТ_СтандартПрисутствия.ЕстьСтандарт) КАК ЕстьСтандарт
		|ИЗ
		|	ВТ_СтандартПрисутствия КАК ВТ_СтандартПрисутствия
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_СтандартПрисутствия.ГруппаПродукции,
		|	ВТ_СтандартПрисутствия.КатегорияТТ";
		
		запрос.Текст =
		"ВЫБРАТЬ
		|	ВТ_Запасы.НомерСтроки КАК НомерСтроки,
		|	ВТ_Запасы.Единица КАК Единица,
		|	ВТ_Запасы.Количество КАК Количество,
		|	ВТ_Запасы.КоличествоИзменено КАК КоличествоИзменено,
		|	ВТ_Запасы.КоличествоРекомендовано КАК КоличествоРекомендовано,
		|	ВТ_Запасы.Коэффициент КАК Коэффициент,
		|	ВТ_Запасы.Номенклатура КАК Номенклатура,
		|	ВТ_Запасы.Номенклатура.КД_Группа КАК НоменклатураКД_Группа,
		|	ВТ_Запасы.Сумма КАК Сумма,
		|	ВТ_Запасы.Цена КАК Цена,
		|	ВТ_Запасы.КоличествоЗаказанное КАК КоличествоЗаказанное,
		|	ЕстьСтандартПоГруппеПродукта.КатегорияТТ КАК КатегорияТТ,
		|	ВЫБОР
		|		КОГДА ЕстьСтандартПоГруппеПродукта.ЕстьСтандарт > 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьСтандарт,
		|	ВТ_СтандартПрисутствия.ПриоритетПродукта КАК ПриоритетПродукта
		|ИЗ
		|	ВТ_Запасы КАК ВТ_Запасы
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВТ_СтандартПрисутствия.ГруппаПродукции КАК ГруппаПродукта,
		|			ВТ_СтандартПрисутствия.КатегорияТТ КАК КатегорияТТ,
		|			СУММА(ВТ_СтандартПрисутствия.ЕстьСтандарт) КАК ЕстьСтандарт
		|		ИЗ
		|			ВТ_СтандартПрисутствия КАК ВТ_СтандартПрисутствия
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ВТ_СтандартПрисутствия.ГруппаПродукции,
		|			ВТ_СтандартПрисутствия.КатегорияТТ) КАК ЕстьСтандартПоГруппеПродукта
		|		ПО ВТ_Запасы.Номенклатура.КД_Группа = ЕстьСтандартПоГруппеПродукта.ГруппаПродукта
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтандартПрисутствия КАК ВТ_СтандартПрисутствия
		|		ПО ВТ_Запасы.Номенклатура = ВТ_СтандартПрисутствия.Номенклатура";
		
		#КонецОбласти
		
		Если Не результатЗапроса.Пустой() И ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения Тогда
			
			текстСообщения = НСтр(СтрШаблон("ru = 'Невозможно выполнить %1 документа!'", ?(ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись,"запись","проведение")));
			
			ПроверкаДанныхКлиентСервер.СообщитьОбОшибке(отказ, текстСообщения, ЭтотОбъект, "Комментарий");
			
			выборка = результатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока выборка.Следующий() Цикл
				
				текстСообщения = НСтр(СтрШаблон("ru = '(строка: №%2) Номенклатура: %1 - не найдена в стандарте присутствия.'", выборка.Номенклатура, выборка.НомерСтроки));
				
				ПроверкаДанныхКлиентСервер.СообщитьОбОшибке(отказ, текстСообщения, ЭтотОбъект, "Комментарий");
				
				// мониторинг
				имяСобытияЖурналаРегистрации = НСтр("ru = 'Мониторинг'");
				
				Если отказ Тогда
					
					ЗаписьЖурналаРегистрации(имяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.КпкЗаявка, СокрЛП(Объект.Дата)+"/"+СокрЛП(Объект.Контрагент), текстСообщения);
					отказ = ложь;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ОбработатьИзменениеДатыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	ОбработатьИзменениеКонтрагентаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	ОбработатьИзменениеМенеджераНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТипЦенПриИзменении(Элемент)
	ЗаполнитьЦеныПоТипуЦен();
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	ОбновитьИнформациюОДолгахКонтрагента();
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОписаниеОповещенияНоменклатура = Новый ОписаниеОповещения("ОбработатьВыборНоменклатурыПриПодбореПеретаскивании", ЭтотОбъект);
	ОписаниеОповещенияКоличество = Новый ОписаниеОповещения("ОбработатьВыборКоличестваПриПодбореПеретаскивании", ЭтотОбъект);
	ПодборИПеретаскивание.ОбработатьПодборНоменклатура(ВыбранноеЗначение, Объект.Запасы, "Номенклатура", Элементы.ЗапасыНоменклатура, ОписаниеОповещенияНоменклатура,, ОписаниеОповещенияКоличество);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	ПодборИПеретаскивание.ПроверкаПеретаскивания(ПараметрыПеретаскивания, СтандартнаяОбработка, "СправочникСсылка.Номенклатура", Новый Структура("ЭтоГруппа", Ложь));
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборНоменклатурыПриПодбореПеретаскивании", ЭтотОбъект);
	ПодборИПеретаскивание.Перетаскивание(ПараметрыПеретаскивания, Объект.Запасы, "Номенклатура", Элементы.ЗапасыНоменклатура, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	ОбработатьДанныеСтрокПриИзмененииНоменклатуры(Элементы.Запасы.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	ОбработатьДанныеСтрокПриИзмененииКоличества(Элементы.Запасы.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЦенаПриИзменении(Элемент)
	РассчитатьДанныеСтроки(Элементы.Запасы.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСуммаПриИзменении(Элемент)
	ПриИзмененииСуммы(Элементы.Запасы.ТекущиеДанные);
КонецПроцедуры

#КонецОбласти

#Область ДействияКоманд

&НаКлиенте
Процедура Подбор(Команда)
	
	параметрыПодбора = Новый Структура;
	параметрыПодбора.Вставить("ИмяФормы", "Справочник.Номенклатура.Форма.Подбор");
	параметрыПодбора.Вставить("ПолеТаблицы", Элементы.ЗапасыНоменклатура);
	
	дополнительныеПараметрыФормы = Новый Структура;
	дополнительныеПараметрыФормы.Вставить("Период", Объект.Дата);
	дополнительныеПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
	дополнительныеПараметрыФормы.Вставить("ТипЦен", Объект.ТипЦен);
	дополнительныеПараметрыФормы.Вставить("Менеджер", Объект.Менеджер);
	дополнительныеПараметрыФормы.Вставить("РазрешитьЗапрашиватьКоличество", Истина);
	параметрыПодбора.Вставить("ДополнительныеПараметрыФормы", дополнительныеПараметрыФормы);
	
	ПодборИПеретаскивание.ОткрытьПодбор(параметрыПодбора);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПлановымиДаннымиНаСервере()
	
	периодЗаполнения = Новый СтандартныйПериод(НачалоДня(Объект.Дата), КонецДня(Объект.Дата));
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	
	запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтделыВМагазинах.Ссылка КАК ОтделВМагазинеСсылка
	|ИЗ
	|	Справочник.ОтделыВМагазинах КАК ОтделыВМагазинах
	|ГДЕ
	|	ОтделыВМагазинах.Магазин = &Магазин
	|	И ОтделыВМагазинах.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И ОтделыВМагазинах.ПометкаУдаления = ЛОЖЬ";
		
	#КонецОбласти
	
	запрос.УстановитьПараметр("Магазин", Объект.Контрагент);
	
	результатЗапроса = запрос.Выполнить();
	
	Если результатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	выборка = результатЗапроса.Выбрать();
	выборка.Следующий();
	
	отделВМагазине = выборка.ОтделВМагазинеСсылка;
	
	результатЗапроса = Документы.КпкЗаявка.ПолучитьПлановыеДанныеДляВнутреннегоЗаказа(периодЗаполнения, отделВМагазине.Подразделение, отделВМагазине);
	
	Если результатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Запасы.Очистить();
	Объект.Планирование.Очистить();
	
	выборка = результатЗапроса.Выбрать();
	Пока выборка.Следующий() Цикл
		
		количество = выборка.РекомендуемыйЗаказ;
		
		строкаДанных = Объект.Планирование.Добавить();
		ЗаполнитьЗначенияСвойств(строкаДанных, выборка);
		строкаДанных.Количество = количество;
		
		Если количество <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		кратностьУпаковки = количество / выборка.КратностьУпаковки - Цел(количество / выборка.КратностьУпаковки);
		Если кратностьУпаковки < выборка.КоэффициентВыравнивания Тогда
			единицаКратности = 0;
		Иначе
			единицаКратности = 1;
		КонецЕсли;
		
		количество = Окр((Цел(количество / выборка.КратностьУпаковки) + единицаКратности)*выборка.КратностьУпаковки, 3, РежимОкругления.Окр15как20);

		строкаСообщения = СтрШаблон("Код товара=%1; Продажи=%2; Кон.ост=%3; Рек.запас=%4; Мин.ост=%5; Кратность=%6; Коэф.выравнивания=%7; Коэф.рек.запаса=%8; Заказ=%9;",
			выборка.Номенклатура.Код,
			выборка.Продажи,
			выборка.КонечныйОстаток,
			выборка.РекомендуемыйЗапас,
			выборка.МинимальныйОстаток,
			выборка.КратностьУпаковки,
			выборка.КоэффициентВыравнивания,
			выборка.КоэффициентРекомендуемогоЗапаса,
			Количество);
			
		//ДобавитьСтрокуВЛог(строкаСообщения, -1);
		//сообщить(строкаСообщения);
		
		
		Если количество <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		строкаДанных = Объект.Запасы.Добавить();
		
		строкаДанных.Номенклатура = выборка.Номенклатура;
		строкаДанных.Единица = выборка.Номенклатура.ЕдиницаИзмерения;
		строкаДанных.КоличествоРекомендовано = количество;
		строкаДанных.Количество = количество;
		
		//ДобавитьСтрокуВЛог(СтрокаДанных.количество, -1);
		
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПлановымиДанными(Команда)
	ЗаполнитьПлановымиДаннымиНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеПроцедурыИФункции

#Область ОбработкаДанныхСтрок

// Рассчитывает данные строки табличной части.
//
// Параметры
//  ДанныеСтроки  - ДанныеФормыЭлементКоллекции - Строка табличной части, для которой рассчитываются
//                 данные.
//
&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьДанныеСтроки(ДанныеСтроки)

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДанныеСтроки(ДанныеСтроки);

КонецПроцедуры // РассчитатьДанныеСтроки()

// Возникает после изменения значения суммовых реквизитов табличной части.
//
// Параметры
//  ДанныеСтроки  - ДанныеФормыЭлементКоллекции - Текущие данные табличной части.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииСуммы(ДанныеСтроки)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммы(ДанныеСтроки);

КонецПроцедуры // ПриИзмененииСуммы()

// Обрабатывает данные указанных строк таблицы "Запасы" при изменении
// значения реквизита "Номенклатура".
//
// Параметры:
//  ДанныеСтрок  - ДанныеФормыЭлементКоллекции, Массив - Одна строка или набор строк,
//                 для которых выполняется обработка данных.
//
&НаКлиенте
Процедура ОбработатьДанныеСтрокПриИзмененииНоменклатуры(ДанныеСтрок)
	
	ОбработатьДанныеСтрокПриИзмененииНоменклатурыНаСервере(ОбработкаТабличныхЧастейКлиентСервер.ПолучитьИдентификаторыСтрок(ДанныеСтрок));
	
КонецПроцедуры // ОбработатьДанныеСтрокПриИзмененииНоменклатуры()

// Обрабатывает на сервере данные указанных строк таблицы "Запасы" при изменении
// значения реквизита "Номенклатура".
//
// Параметры:
//  мИдентификаторыСтрок  - Массив - Набор идентификаторов строк таблицы.
//
&НаСервере
Процедура ОбработатьДанныеСтрокПриИзмененииНоменклатурыНаСервере(Знач мИдентификаторыСтрок)
	
	мДанныеСтрок = ОбработкаТабличныхЧастейКлиентСервер.ПолучитьСтрокиПоИдентификаторам(Объект.Запасы, мИдентификаторыСтрок);
	мНоменклатура = ОбработкаТабличныхЧастейКлиентСервер.ВыгрузитьКолонку(мДанныеСтрок, "Номенклатура");

	соХарактеристикиЦен = ЦенообразованиеСервер.ПолучитьЦеныНоменклатуры(Объект.Дата, Объект.Подразделение, мНоменклатура, Объект.ТипЦен, Константы.ВалютаУчета.Получить());
	
	Для каждого ДанныеСтроки Из мДанныеСтрок Цикл
		
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, соХарактеристикиЦен[ДанныеСтроки.Номенклатура]);
		РассчитатьДанныеСтроки(ДанныеСтроки);
		
	КонецЦикла; 

КонецПроцедуры // ОбработатьДанныеСтрокПриИзмененииНоменклатурыНаСервере()

// Обрабатывает данные указанных строк таблицы при изменении значения реквизита
// "Количество".
//
// Параметры:
//  ДанныеСтрок  - ДанныеФормыЭлементКоллекции, Массив - Одна строка или набор строк,
//                 для которых выполняется обработка данных.
//
&НаКлиенте
Процедура ОбработатьДанныеСтрокПриИзмененииКоличества(ДанныеСтрок)
	
	мДанныеСтрок = ОбщегоНазначенияКлиентСервер.ПреобразоватьЗначениеВМассив(ДанныеСтрок);
	
	Для каждого ДанныеСтроки Из мДанныеСтрок Цикл
		РассчитатьДанныеСтроки(ДанныеСтроки);
	КонецЦикла; 
	
КонецПроцедуры // ОбработатьДанныеСтрокПриИзмененииКоличества()

#КонецОбласти

#Область ПодборИПеретаскивание

// Процедура обратного вызова для обработки выбора номенклатуры в табличной части
// "Запасы" при подборе или перетаскивании.
//
// Параметры:
//  ДанныеСтрок  - Массив - Набор элементов типа ДанныеФормыЭлементКоллекции, представляющих
//                 собой добавленные в табличную часть строки.
//  ДополнительныеПараметры  - Неопределено - Не используется.
//
&НаКлиенте
Процедура ОбработатьВыборНоменклатурыПриПодбореПеретаскивании(ДанныеСтрок, ДополнительныеПараметры) Экспорт

	ОбработатьДанныеСтрокПриИзмененииНоменклатуры(ДанныеСтрок);

КонецПроцедуры // ОбработатьВыборНоменклатурыПриПодбореПеретаскивании()

// Процедура обратного вызова для обработки выбора количества в табличных частях
// при подборе или перетаскивании.
//
// Параметры:
//  ДанныеСтрок  - Массив - Набор элементов типа ДанныеФормыЭлементКоллекции, представляющих
//                 собой добавленные в табличную часть строки.
//  ДополнительныеПараметры  - Неопределено - Не используется.
//
&НаКлиенте
Процедура ОбработатьВыборКоличестваПриПодбореПеретаскивании(ДанныеСтрок, ДополнительныеПараметры) Экспорт

	ОбработатьДанныеСтрокПриИзмененииКоличества(ДанныеСтрок);

КонецПроцедуры // ОбработатьВыборКоличестваПриПодбореПеретаскивании()

#КонецОбласти 

// Устанавливает новый тип цен при изменении реквизитов документа. Если тип цен будет
// установлен, цены табличной части будут заплнены согласно новому типу цен.
//
&НаСервере
Процедура ИзменитьТипЦен()

	Если Объект.Контрагент.Пустая()
		Или Объект.Менеджер.Пустая() Тогда
		
		Объект.ТипЦен 		= Неопределено;
		Объект.Организация 	= Неопределено;
	Иначе
		сОраганизацияТипЦен = ПолучитьТипЦенОрганизацию();
		
		Объект.Организация 	= сОраганизацияТипЦен.Организация;
		Объект.ТипЦен 		= сОраганизацияТипЦен.ТипЦен;
		
		ЗаполнитьЦеныПоТипуЦен();
		
	КонецЕсли;
	
	Если Объект.ТипЦен.Пустая() Тогда
		
		Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
			
			СтрокаЗапасы.Цена = 0;
			РассчитатьДанныеСтроки(СтрокаЗапасы);
			
		КонецЦикла; 
		
	КонецЕсли; 

КонецПроцедуры // ИзменитьТипЦен()

// Возвращает тип цен и организацию согласно данных документа.
//
// Возвращаемое значение:
//   СправочникСсылка.ТипыЦен   - Новый тип цен. Если тип цен определить не удалось, будет
//                 возвращено значение Неопределено.
//
&НаСервере
Функция ПолучитьТипЦенОрганизацию()

	ВозврашаемоеЗначение = Новый Структура("ТипЦен, Организация", Неопределено, Неопределено);
	
	Запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КонтрагентыМенеджеры.ТипЦен,
	|	КонтрагентыМенеджеры.ОсновнаяОрганизация КАК Организация
	|ИЗ
	|	Справочник.Контрагенты.Менеджеры КАК КонтрагентыМенеджеры
	|ГДЕ
	|	КонтрагентыМенеджеры.Ссылка = &Контрагент
	|	И КонтрагентыМенеджеры.Менеджер = &Менеджер
	|	И НЕ КонтрагентыМенеджеры.ТипЦен.ПометкаУдаления";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("Менеджер", Объект.Менеджер);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		
	Иначе
	
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(ВозврашаемоеЗначение, Выборка);
		
	КонецЕсли;
	
	Возврат ВозврашаемоеЗначение;

КонецФункции // ПолучитьТипЦен()

// Заполняет цены табличной части по выбранному типу цен.
//
&НаСервере
Процедура ЗаполнитьЦеныПоТипуЦен()

	мНоменклатура = ОбработкаТабличныхЧастейКлиентСервер.ВыгрузитьКолонку(Объект.Запасы, "Номенклатура");
	соХарактеристикиЦен = ЦенообразованиеСервер.ПолучитьЦеныНоменклатуры(Объект.Дата, Объект.Подразделение, мНоменклатура, Объект.ТипЦен, Константы.ВалютаУчета.Получить());
	
	Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
		
		СтрокаЗапасы.Цена = соХарактеристикиЦен[СтрокаЗапасы.Номенклатура].Цена;
		РассчитатьДанныеСтроки(СтрокаЗапасы);
		
	КонецЦикла; 

КонецПроцедуры // ЗаполнитьЦеныПоТипуЦен()

// Выполняет обработку данных документа при изменении реквизита "Контрагент".
//
&НаСервере
Процедура ОбработатьИзменениеКонтрагентаНаСервере()

	ИзменитьТипЦен();
	ОбновитьИнформациюОДолгахКонтрагента();

КонецПроцедуры // ОбработатьИзменениеКонтрагентаНаСервере()

// Выполняет обработку данных документа при изменении реквизита "Менеджер".
//
&НаСервере
Процедура ОбработатьИзменениеМенеджераНаСервере()

	ИзменитьТипЦен();
	ОбновитьИнформациюОДолгахКонтрагента();

КонецПроцедуры // ОбработатьИзменениеМенеджераНаСервере()

// Выполняет обработку данных документа при изменении реквизита "Дата".
//
&НаСервере
Процедура ОбработатьИзменениеДатыНаСервере()

	ЗаполнитьЦеныПоТипуЦен();
	ОбновитьИнформациюОДолгахКонтрагента();

КонецПроцедуры // ОбработатьИзменениеДатыНаСервере()

// Обновляет информацию о долгах контрагента при изменении данных документа.
//
&НаСервере
Процедура ОбновитьИнформациюОДолгахКонтрагента()

	стДолги = Документы.КпкЗаявка.ПолучитьИнформациюОДолгахКонтрагента(Объект);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, стДолги);

КонецПроцедуры // ОбновитьИнформациюОДолгахКонтрагента()
#КонецОбласти
