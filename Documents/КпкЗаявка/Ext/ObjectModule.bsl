#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(данныеЗаполнения, стандартнаяОбработка)

	ЗаполнениеОбъектовСервер.ЗаполнитьДанныеНовогоДокумента(ЭтотОбъект, ДанныеЗаполнения);
	
	// Заполнение по умолчанию.
	Если Организация.Пустая() Тогда
		Организация = ПользователиСервер.ПолучитьЗначениеНастройки("ОсновнаяОрганизация");
	КонецЕсли; 
	
	Если Подразделение.Пустая() Тогда
		Подразделение = ПользователиСервер.ПолучитьЗначениеНастройки("ОсновноеПодразделение");
	КонецЕсли; 
	
	Если Ответственный.Пустая() Тогда
		Ответственный = ПользователиСервер.ПолучитьЗначениеНастройки("ОсновнойОтветственный");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаДоставки) Тогда
		ДатаДоставки = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если МаршрутРазвоза.Пустая() Тогда
		МаршрутРазвоза = Справочники.МаршрутыРазвоза.ПустойМаршрут;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(отказ, режимПроведения)
	
	Движения.ЗаказыПокупателей.Записывать = Истина;
	
	Запрос = Новый Запрос;
	#Область ТекстЗапроса
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КпкЗаявкаЗапасы.Ссылка.Дата КАК Период,
	|	КпкЗаявкаЗапасы.Ссылка.Подразделение,
	|	КпкЗаявкаЗапасы.Номенклатура.Родитель.Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА КпкЗаявкаЗапасы.Ссылка.Менеджер = ЗНАЧЕНИЕ(Справочник.Менеджеры.ПустаяСсылка)
	|			ТОГДА КпкЗаявкаЗапасы.Ссылка.Агент.Менеджер
	|		ИНАЧЕ КпкЗаявкаЗапасы.Ссылка.Менеджер
	|	КОНЕЦ КАК Менеджер,
	|	КпкЗаявкаЗапасы.Ссылка.Контрагент,
	|	КпкЗаявкаЗапасы.Номенклатура,
	|	КпкЗаявкаЗапасы.Ссылка КАК ЗаказПокупателя,
	|	КпкЗаявкаЗапасы.Количество КАК Заказано
	|ИЗ
	|	Документ.КпкЗаявка.Запасы КАК КпкЗаявкаЗапасы
	|ГДЕ
	|	КпкЗаявкаЗапасы.Ссылка = &Документ";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("Документ", Ссылка);
	
	Движения.ЗаказыПокупателей.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(отказ, проверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("Организация");
	ПроверяемыеРеквизиты.Добавить("ТипЦен");
	
КонецПроцедуры

Процедура ПередЗаписью(отказ, режимЗаписи, режимПроведения)

	Если ОбменДанными.Загрузка Тогда
		// Обмен данными. Проверки не выполняем.
		Возврат;
	КонецЕсли; 
	
	Если ПометкаУдаления = Ссылка.ПометкаУдаления Тогда
		
		Если РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения Тогда
			
			Если Не Отказ Тогда
				
				ПредставлениеКомментария = СокрЛП(Комментарий);
				СуммаДокумента = ОбщегоНазначенияСервер.ПолучитьСуммуДокумента(ЭтотОбъект, "Запасы");
				
			КонецЕсли; 
			
		КонецЕсли;
		
		//Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		//
		//	стДолги = Документы.КпкЗаявка.ПолучитьИнформациюОДолгахКонтрагента(ЭтотОбъект);
		//	Если стДолги.ДолгПросроченный > 0 Тогда
		//		
		//		Если ПустаяСтрока(Комментарий) Тогда
		//			
		//			ТекстСообщения = НСтр("ru = 'Проведение документа невозможно без указания ответственного лица, разрешившего отгрузку при наличии просроченной задолжности.'");
		//			ПроверкаДанныхКлиентСервер.СообщитьОбОшибке(Отказ, ТекстСообщения, ЭтотОбъект, "Комментарий");
		//			Отказ = Ложь;
		//		КонецЕсли; 
		//		
		//	КонецЕсли; 
		//
		//КонецЕсли; 
	
	КонецЕсли; 
	
	Если Запасы.Итог("Сумма") = 0 Тогда
		
		мНоменклатура = ОбработкаТабличныхЧастейКлиентСервер.ВыгрузитьКолонку(Запасы, "Номенклатура");
		соХарактеристикиЦен = ЦенообразованиеСервер.ПолучитьЦеныНоменклатуры(Дата, Подразделение, мНоменклатура, ТипЦен, Константы.ВалютаУчета.Получить());
		
		Для каждого строкаЗапасы Из Запасы Цикл
			
			строкаЗапасы.Цена = соХарактеристикиЦен[СтрокаЗапасы.Номенклатура].Цена;
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДанныеСтроки(строкаЗапасы);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(объектКопирования)
	
	ЗаполнениеОбъектовСервер.ЗаполнитьДанныеСкопированногоДокумента(ЭтотОбъект, объектКопирования);
	
	МаршрутРазвоза = Справочники.МаршрутыРазвоза.ПустойМаршрут;
	
КонецПроцедуры

#КонецОбласти
