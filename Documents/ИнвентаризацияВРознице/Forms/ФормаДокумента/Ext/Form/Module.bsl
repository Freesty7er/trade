#Область ДополнительныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСличительнуюВедомостьНаСервере(структураПараметров)
	
	периодЗаполнения = структураПараметров.ПериодЗаполнения;
	
	запрос = Новый Запрос;
	запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	#Область ТекстЗапроса
	
	запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИнвентаризацияВРознице.Подразделение,
	|	ЕСТЬNULL(Р_ТорговыеТочки.ТипЦеныПродажи, ЗНАЧЕНИЕ(Справочник.ТипыЦен.ПустаяСсылка)) КАК ТипЦеныПродажи,
	|	ИнвентаризацияВРознице.ОтделВМагазине
	|ПОМЕСТИТЬ ВТ_ДополнительныеПараметры
	|ИЗ
	|	Документ.ИнвентаризацияВРознице КАК ИнвентаризацияВРознице
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Р_ТорговыеТочки КАК Р_ТорговыеТочки
	|		ПО ИнвентаризацияВРознице.ОтделВМагазине.Магазин = Р_ТорговыеТочки.КонтрагентЧастноеЛицо
	|ГДЕ
	|	ИнвентаризацияВРознице.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФактическоеНаличие.Номенклатура,
	|	ФактическоеНаличие.КоличествоФакт
	|ПОМЕСТИТЬ ВТ_ФактическоеНаличие
	|ИЗ
	|	&ФактическоеНачилие КАК ФактическоеНаличие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	СУММА(ВложенныйЗапрос.КоличествоФакт) КАК КоличествоФакт,
	|	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
	|	СУММА(ВложенныйЗапрос.КоличествоРасход) КАК КоличествоРасход
	|ПОМЕСТИТЬ ВТ_Состав
	|ИЗ
	|	(ВЫБРАТЬ
	|		ФактическоеНаличие.Номенклатура КАК Номенклатура,
	|		ФактическоеНаличие.КоличествоФакт КАК КоличествоФакт,
	|		0 КАК Количество,
	|		0 КАК КоличествоРасход
	|	ИЗ
	|		ВТ_ФактическоеНаличие КАК ФактическоеНаличие
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыВРозницеОстаткиИОбороты.Номенклатура,
	|		0,
	|		ТоварыВРозницеОстаткиИОбороты.КоличествоКонечныйОстаток,
	|		ТоварыВРозницеОстаткиИОбороты.КоличествоРасход
	|	ИЗ
	|		РегистрНакопления.ТоварыВРознице.ОстаткиИОбороты(
	|				&ДатаНачала,
	|				&ДатаОкончания,
	|				,
	|				,
	|				Подразделение В
	|						(ВЫБРАТЬ ПЕРВЫЕ 1
	|							ДополнительныеПараметры.Подразделение
	|						ИЗ
	|							ВТ_ДополнительныеПараметры КАК ДополнительныеПараметры)
	|					И ОтделМагазина В
	|						(ВЫБРАТЬ ПЕРВЫЕ 1
	|							ДополнительныеПараметры.ОтделВМагазине
	|						ИЗ
	|							ВТ_ДополнительныеПараметры КАК ДополнительныеПараметры)) КАК ТоварыВРозницеОстаткиИОбороты) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Состав.Номенклатура,
	|	ВТ_Состав.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	|	ВТ_Состав.Количество,
	|	ВТ_Состав.КоличествоФакт,
	|	ВТ_Состав.КоличествоРасход,
	|	ВТ_Состав.Количество * ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Сумма,
	|	ВТ_Состав.КоличествоФакт * ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК СуммаФакт,
	|	ВЫБОР
	|		КОГДА ВТ_Состав.Номенклатура.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.Шт)
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_Состав.Номенклатура.Родитель.ПроцентСкидкиНаВес
	|	КОНЕЦ КАК ПроцентСкидкиНаВес,
	|	ВЫБОР
	|		КОГДА ВТ_Состав.Количество - ВТ_Состав.КоличествоФакт < 0
	|			ТОГДА -(ВТ_Состав.Количество - ВТ_Состав.КоличествоФакт)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоИзлишек,
	|	ВЫБОР
	|		КОГДА ВТ_Состав.Количество - ВТ_Состав.КоличествоФакт > 0
	|			ТОГДА ВТ_Состав.Количество - ВТ_Состав.КоличествоФакт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоНедостача,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА ВТ_Состав.Количество - ВТ_Состав.КоличествоФакт > 0
	|					ТОГДА ВТ_Состав.Количество - ВТ_Состав.КоличествоФакт
	|				ИНАЧЕ 0
	|			КОНЕЦ > ВТ_Состав.КоличествоРасход * ВЫБОР
	|				КОГДА ВТ_Состав.Номенклатура.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.Шт)
	|					ТОГДА 0
	|				ИНАЧЕ ВТ_Состав.Номенклатура.Родитель.ПроцентСкидкиНаВес / 100
	|			КОНЕЦ
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_Состав.Количество - ВТ_Состав.КоличествоФакт > 0
	|						ТОГДА ВТ_Состав.Количество - ВТ_Состав.КоличествоФакт
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоНедостачаПревышениеЛимита,
	|	ВЫБОР
	|		КОГДА ВТ_Состав.Количество - ВТ_Состав.КоличествоФакт < 0
	|			ТОГДА -(ВТ_Состав.Количество - ВТ_Состав.КоличествоФакт)
	|		ИНАЧЕ 0
	|	КОНЕЦ * ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК СуммаИзлишек,
	|	ВЫБОР
	|		КОГДА ВТ_Состав.Количество - ВТ_Состав.КоличествоФакт > 0
	|			ТОГДА ВТ_Состав.Количество - ВТ_Состав.КоличествоФакт
	|		ИНАЧЕ 0
	|	КОНЕЦ * ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК СуммаНедостача,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА ВТ_Состав.Количество - ВТ_Состав.КоличествоФакт > 0
	|					ТОГДА ВТ_Состав.Количество - ВТ_Состав.КоличествоФакт
	|				ИНАЧЕ 0
	|			КОНЕЦ > ВТ_Состав.КоличествоРасход * ВЫБОР
	|				КОГДА ВТ_Состав.Номенклатура.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.Шт)
	|					ТОГДА 0
	|				ИНАЧЕ ВТ_Состав.Номенклатура.Родитель.ПроцентСкидкиНаВес / 100
	|			КОНЕЦ
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_Состав.Количество - ВТ_Состав.КоличествоФакт > 0
	|						ТОГДА ВТ_Состав.Количество - ВТ_Состав.КоличествоФакт
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ * ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК СуммаНедостачаПревышениеЛимита,
	|	0 КАК КодОшибки
	|ИЗ
	|	ВТ_Состав КАК ВТ_Состав
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ДатаСреза,
	|				Подразделение В
	|						(ВЫБРАТЬ ПЕРВЫЕ 1
	|							ДополнительныеПараметры.Подразделение
	|						ИЗ
	|							ВТ_ДополнительныеПараметры КАК ДополнительныеПараметры)
	|					И ТипЦен В
	|						(ВЫБРАТЬ ПЕРВЫЕ 1
	|							ДополнительныеПараметры.ТипЦеныПродажи
	|						ИЗ
	|							ВТ_ДополнительныеПараметры КАК ДополнительныеПараметры)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ВТ_Состав.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|ГДЕ
	|	НЕ ВТ_Состав.Количество - ВТ_Состав.КоличествоФакт = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Состав.Номенклатура.Наименование";
	
	#КонецОбласти
	
	запрос.УстановитьПараметр("ФактическоеНачилие", Объект.Опись.Выгрузить(,"Номенклатура, ЕдиницаИзмерения, КоличествоФакт"));
	запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	запрос.УстановитьПараметр("ДатаСреза", Объект.Дата);
	
	запрос.УстановитьПараметр("ДатаНачала", периодЗаполнения.ДатаНачала);
	запрос.УстановитьПараметр("ДатаОкончания", периодЗаполнения.ДатаОкончания);
	
	результатЗапроса = запрос.Выполнить();
	
	#Область ПолучениеВременныхТаблиц
	запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_ДополнительныеПараметры";
	запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_ФактическоеНаличие";
	запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_Состав";
	#КонецОбласти 
	
	Объект.Состав.Загрузить(результатЗапроса.Выгрузить());
	
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//Запасы = Объект.Состав;
	//Запасы.Очистить();
	//
	//Пока Выборка.Следующий() Цикл
	//	
	//	СтрокаТабличнойЧасти = Запасы.Добавить();
	//	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
	//	
	//	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество*СтрокаТабличнойЧасти.Цена;
	//	
	//	Если (СтрокаТабличнойЧасти.Количество-СтрокаТабличнойЧасти.КоличествоФакт) > 0 Тогда
	//		// недостача
	//		СтрокаТабличнойЧасти.КоличествоИзлишек = 0;
	//		СтрокаТабличнойЧасти.КоличествоНедостача = СтрокаТабличнойЧасти.Количество-СтрокаТабличнойЧасти.КоличествоФакт;
	//	Иначе
	//		// лишак
	//		СтрокаТабличнойЧасти.КоличествоНедостача = 0;
	//		СтрокаТабличнойЧасти.КоличествоИзлишек = СтрокаТабличнойЧасти.КоличествоФакт-СтрокаТабличнойЧасти.Количество;
	//	КонецЕсли;
	//	
	//	СтрокаТабличнойЧасти.СуммаНедостача = СтрокаТабличнойЧасти.КоличествоНедостача*СтрокаТабличнойЧасти.Цена;
	//	СтрокаТабличнойЧасти.СуммаИзлишек = СтрокаТабличнойЧасти.КоличествоИзлишек*СтрокаТабличнойЧасти.Цена;
	//	
	//	СтрокаТабличнойЧасти.КодОшибки = 0;	
	//	
	//	Если СтрокаТабличнойЧасти.КоличествоНедостача > 0 Тогда
	//		
	//		Если (СтрокаТабличнойЧасти.КоличествоНедостача > СтрокаТабличнойЧасти.КоличествоЗакупка * (СтрокаТабличнойЧасти.НормаПроцентаУсушки / 100)) И 
	//			НЕ (СтрокаТабличнойЧасти.НормаПроцентаУсушки = 0) Тогда
	//			
	//			// недостача больше установленной нормы
	//			СтрокаТабличнойЧасти.КодОшибки = 1;
	//			
	//		ИначеЕсли (СтрокаТабличнойЧасти.КоличествоНедостача > 0) И 
	//			 (СтрокаТабличнойЧасти.НормаПроцентаУсушки = 0) Тогда
	//			
	//			СтрокаТабличнойЧасти.КодОшибки = 2;	
	//			
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЦеныНаСервере()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИнвентаризацияВРозницеОпись.Ссылка,
	|	ИнвентаризацияВРозницеОпись.НомерСтроки,
	|	ИнвентаризацияВРозницеОпись.Номенклатура,
	|	ИнвентаризацияВРозницеОпись.ЕдиницаИзмерения,
	|	ЦеныНоменклатурыСрезПоследних.Цена,
	|	ИнвентаризацияВРозницеОпись.КоличествоФакт,
	|	ЦеныНоменклатурыСрезПоследних.Цена * ИнвентаризацияВРозницеОпись.КоличествоФакт КАК СуммаФакт
	|ИЗ
	|	Документ.ИнвентаризацияВРознице.Опись КАК ИнвентаризацияВРозницеОпись
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ДатаЦен,
	|				Подразделение = &Подразделение
	|					И ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ИнвентаризацияВРозницеОпись.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|ГДЕ
	|	ИнвентаризацияВРозницеОпись.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", 		Объект.Ссылка);
	Запрос.УстановитьПараметр("ДатаЦен", 		Объект.Дата);
	Запрос.УстановитьПараметр("Подразделение", 	Объект.Подразделение);
	Запрос.УстановитьПараметр("ТипЦен", 		Объект.ОтделВМагазине.Магазин.ТипЦен);
	
	Объект.Опись.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УправлениеНебольшойФирмойСервер.ЗаполнитьШапкуДокумента(
		Объект,
		,
		Параметры.ЗначениеКопирования,
		Параметры.Основание,
		СостояниеДокумента,
		КартинкаСостоянияДокумента,
		РазрешеноПроведение,
		Параметры.ЗначенияЗаполнения
	);
КонецПроцедуры

&НаСервере
Функция СтруктурнаяЕдиницаПриИзмененииСервер()
	Возврат Новый Структура("ПроцентСкидки", Объект.СтруктурнаяЕдиница.ПроцентСкидки);
КонецФункции

&НаКлиенте
Процедура СтруктурнаяЕдиницаПриИзменении(Элемент)
	СтруктураПараметров = СтруктурнаяЕдиницаПриИзмененииСервер();
	Объект.ПроцентСкидки = СтруктураПараметров.ПроцентСкидки;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(имяСобытия, параметр, источник)
	
	Если имяСобытия = "ВыполнитьЗаполнениеСличительнойВедомостиПоРознице" Тогда
		
		ЗаполнитьСличительнуюВедомостьНаСервере(параметр);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 



&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтурктураПараметровПоПодразделению = Новый Структура("Подразделение, ДатаСреза", СтруктураДанные.Подразделение, СтруктураДанные.ДатаСреза);
	СтурктураПараметровПоПодразделению = ЦенообразованиеСервер.ПолучитьПараметрыУчетаПоПодразделению(СтурктураПараметровПоПодразделению);
	
	// Получим цену
	СтруктураПараметров = Новый Структура("Номенклатура, ТипЦен, Подразделение, ДатаСреза, Контрагент", СтруктураДанные.Номенклатура, СтурктураПараметровПоПодразделению.ЦенаСклада, СтруктураДанные.Подразделение, СтруктураДанные.ДатаСреза);
	
	СтруктураДанные.Вставить("Цена", ЦенообразованиеСервер.ВернутьЦенуНоменклатуры(СтруктураПараметров));
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	СтруктураДанные.Вставить("НормаПроцентаУсушки", СтруктураДанные.Номенклатура.НормаПроцентаУсушки);
	
	//СтруктураДанные.Вставить("Количество", 33);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаКлиенте
Процедура РасчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Состав.ТекущиеДанные;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Сумма 		= СтрокаТабличнойЧасти.Количество*СтрокаТабличнойЧасти.Цена;
	СтрокаТабличнойЧасти.СуммаФакт	= СтрокаТабличнойЧасти.КоличествоФакт*СтрокаТабличнойЧасти.Цена;
	
	Если (СтрокаТабличнойЧасти.Количество-СтрокаТабличнойЧасти.КоличествоФакт) > 0 Тогда
		// недостача
		СтрокаТабличнойЧасти.КоличествоИзлишек = 0;
		СтрокаТабличнойЧасти.КоличествоНедостача = СтрокаТабличнойЧасти.Количество-СтрокаТабличнойЧасти.КоличествоФакт;
	Иначе
		// лишак
		СтрокаТабличнойЧасти.КоличествоНедостача = 0;
		СтрокаТабличнойЧасти.КоличествоИзлишек = СтрокаТабличнойЧасти.КоличествоФакт-СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СуммаНедостача = СтрокаТабличнойЧасти.КоличествоНедостача*СтрокаТабличнойЧасти.Цена;
	СтрокаТабличнойЧасти.СуммаИзлишек = СтрокаТабличнойЧасти.КоличествоИзлишек*СтрокаТабличнойЧасти.Цена;
	
	СтрокаТабличнойЧасти.КодОшибки = 0;
	
	Если СтрокаТабличнойЧасти.КоличествоНедостача > 0 Тогда
		
		Если (СтрокаТабличнойЧасти.КоличествоНедостача > СтрокаТабличнойЧасти.КоличествоЗакупка * (СтрокаТабличнойЧасти.НормаПроцентаУсушки / 100)) И 
			НЕ (СтрокаТабличнойЧасти.НормаПроцентаУсушки = 0) Тогда
			
			// недостача больше установленной нормы
			СтрокаТабличнойЧасти.КодОшибки = 1;
			
		ИначеЕсли (СтрокаТабличнойЧасти.КоличествоНедостача > 0) И 
				 (СтрокаТабличнойЧасти.НормаПроцентаУсушки = 0) Тогда
			
			СтрокаТабличнойЧасти.КодОшибки = 2;	
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // РасчитатьСуммуВСтрокеТабличнойЧасти()

&НаКлиенте
Процедура ЗапасыРасчетСтроки(Элемент)
	РасчитатьСуммуВСтрокеТабличнойЧасти();	
КонецПроцедуры


&НаКлиенте
Процедура СоставНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Состав.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Подразделение", ЭтаФорма.Объект.Подразделение);
	СтруктураДанные.Вставить("ДатаСреза", ЭтаФорма.Объект.Дата);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Цена 			= СтруктураДанные.Цена - СтруктураДанные.Цена*Объект.ПроцентСкидки/100 ;
	СтрокаТабличнойЧасти.НормаПроцентаУсушки 	= СтруктураДанные.НормаПроцентаУсушки;
	
	РасчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);

КонецПроцедуры


&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	ДействиеПодбор("Запасы");
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПодбор(ИмяТабличнойЧасти)
	
	Если ИмяТабличнойЧасти = "Запасы" Тогда
		Команда = "ПодборВТабличнуюЧастьЗапасы";
	КонецЕсли;
	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда", Команда);
	
	ДобавитьПоставщикаВПараметрыОтбора(СтруктураПараметровПодбора);
	ДобавитьТипЦенВПараметрыОтбора(СтруктураПараметровПодбора);
	
	ВременнаяДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), ТекущаяДата(), Объект.Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов", ВременнаяДатаРасчетов);
	//СтруктураПараметровПодбора.Вставить("ВводКоличестваПоНакладной", Истина);
	
	РаботаСДиалогамиКлиент.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);
		
КонецПроцедуры //

&НаСервере
Процедура ДобавитьПоставщикаВПараметрыОтбора(СтруктураПараметровПодбора)
	
	СтруктураПараметровПодбора.Вставить("Поставщик", Объект.СтруктурнаяЕдиница.Поставщик);
	СтруктураПараметровПодбора.Вставить("ОтборПоПоставщику", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТипЦенВПараметрыОтбора(СтруктураПараметровПодбора)
	
	
	
	//СтруктураПараметровПодбора.Вставить("Поставщик", Объект.Контрагент);
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		
		СтурктураПараметровПоПодразделению = Новый Структура("Подразделение, ДатаСреза", Объект.Подразделение, Объект.Дата);
		СтурктураПараметровПоПодразделению = ЦенообразованиеСервер.ПолучитьПараметрыУчетаПоПодразделению(СтурктураПараметровПоПодразделению);
	
		СтруктураПараметровПодбора.Вставить("ТипЦен", СтурктураПараметровПоПодразделению.ЦенаСклада);
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		СтруктураПараметровПодбора.Вставить("Подразделение", Объект.Подразделение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Перем Команда;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		ВыбранноеЗначение.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьЗапасы" Тогда
			ОбработкаПодбора("Состав", ВыбранноеЗначение);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПодбора(ИмяТабличнойЧасти, ЗначениеВыбора) Экспорт

	Перем Номенклатура;
	Перем Количество;
	Перем КоличествоНакладная;
	
	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура",					Номенклатура);
	ЗначениеВыбора.Свойство("Количество",				Количество);

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	// Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	
	
	МассивСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивСтрок.Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Неопределено;
	Иначе
		СтрокаТабличнойЧасти = МассивСтрок[0];
	КонецЕсли;
	
	// в приходной накладной не суммируем
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
		СтрокаТабличнойЧасти.КоличествоФакт = СтрокаТабличнойЧасти.КоличествоФакт + Количество;
		
		//РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	Иначе
		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].Добавить();
		СтрокаТабличнойЧасти.Номенклатура     			= Номенклатура;
		СтрокаТабличнойЧасти.КоличествоФакт    			= Количество;
		
	КонецЕсли;
	
	//РассчитатьСуммуДокумента();
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные.Вставить("Подразделение", ЭтаФорма.Объект.Подразделение);
	СтруктураДанные.Вставить("ДатаСреза", ЭтаФорма.Объект.Дата);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	
	СтрокаТабличнойЧасти.Цена 			= СтруктураДанные.Цена - СтруктураДанные.Цена*Объект.ПроцентСкидки/100 ;
	//СтрокаТабличнойЧасти.Количество 	= СтруктураДанные.Количество;
	
	РасчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);

КонецПроцедуры //

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ Объект.ОтметкаБухгалтераОПроверке Тогда
		СтандартныйЗаголовок = ЭтаФорма.Заголовок;
		ЭтаФорма.Заголовок = "(Не подписан)" + ЭтаФорма.Заголовок;
	КонецЕсли;

КонецПроцедуры



#Область ДействияКоманд

&НаКлиенте
Процедура ЗаполнитьСличительнуюВедомость(Команда)
	
	ОткрытьФорму("Документ.ИнвентаризацияВРознице.Форма.ФормаПараметрыЗаполнения",,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦены(Команда)
	
	ЗаполнитьЦеныНаСервере();
	
КонецПроцедуры



#КонецОбласти 