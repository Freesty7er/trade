
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(отказ, стандартнаяОбработка)
	
	ТолькоПросмотр = Объект.СозданАвтоматически;
	
	
	
	документОснование = Параметры.Основание;
	Если документОснование = Неопределено Тогда
		Параметры.ЗначенияЗаполнения.Свойство("ДокументОснование", документОснование);
	КонецЕсли;
	
	Если ТипЗнч(документОснование) = Тип("ДокументСсылка.КпкЗаявка") Или 
			ТипЗнч(документОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			
		Если Не документОснование.Проведен Тогда
			текстСообщения = НСтр("ru = 'Вводить на основании непроведенного документа запрещено!'");
			ПроверкаДанныхКлиентСервер.СообщитьОбОшибке(отказ, текстСообщения, документОснование);		
		КонецЕсли;
		
	КонецЕсли;
	
	
	ЦенообразованиеСервер.УстановитьДоступныеТипыЦенВДокументе(Элементы.ТипЦен, Объект.Подразделение, Объект.Дата);
	
	Компания = Объект.Организация;
	Контрагент = Объект.Контрагент;
	ВалютаРасчетов = Объект.ВалютаДокумента;
	ДатаДокумента = Объект.Дата;
	
	НациональнаяВалюта = Константы.ВалютаУчета.Получить();
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", НациональнаяВалюта));
	КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	
	Элементы.ЗапасыЦена.ТолькоПросмотр = Не РольДоступна("ИзменениеЦенВДокументах");
	Элементы.ТипЦен.ТолькоПросмотр = Не РольДоступна("РазрешениеНаИзменениеТипаЦенВДокументахОтгрузки");
	Элементы.ЗапасыСтруктурнаяЕдиница.ТолькоПросмотр = Не РольДоступна("ИзменениеСкладаВДокументахОтгрузки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Перем Команда;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		ВыбранноеЗначение.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьЗапасы" Тогда
			ОбработкаПодбора("Запасы", ВыбранноеЗначение);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(отказ, текущийОбъект, параметрыЗаписи)
	текущийОбъект.ДополнительныеСвойства.Вставить("ИнтерактивнаяЗаписьДокумента", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(отказ, параметрыЗаписи)
	
	Если ВыполняетсяПроверкаПоКаналуСбыта Тогда
		ВыполняетсяПроверкаПоКаналуСбыта = Ложь;
	Иначе
		
		Если Не ВыполненаПроверкаОснованияНаСервере() Тогда
		 
			отказ = Истина;
			
			текстСообщения = "Внимание !!!"+Символы.ПС+
				"Вы создаете документ без документа основания ." + Символы.ПС +
				"Ответственность за погашение задолженности по этой накладной ложится на создателя документа." + Символы.ПС +
				"Вы уверены что хотите создать Расходную накладную без заявки ? ";
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект), текстСообщения, РежимДиалогаВопрос.ДаНет);
			
			ВыполняетсяПроверкаПоКаналуСбыта = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытий

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	УстановитьДоступныеТипыЦен();
	
	ПересчетДокумента();

КонецПроцедуры

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	СтруктураДанные = ПолучитьДанныеКонтрагентприИзменении();
	
	ЭтаФорма.Объект.ТипЦен = СтруктураДанные.ТипЦен;
	
	ПересчетДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	
	Если Объект.Дата <> ДатаПередИзменением Тогда
		
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением, ВалютаРасчетов);
		
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		КурсНовый = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
		КратностьНовый = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
		
		Если НЕ(Объект.Курс = КурсНовый) Или НЕ(Объект.Кратность = КратностьНовый) Тогда
			Объект.Курс = КурсНовый;
			Объект.Кратность = КратностьНовый;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		
		СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении();
		
		Если НЕ ЗначениеЗаполнено(ЭтаФорма.Объект.Подразделение) Тогда
			
			ЭтаФорма.Объект.Подразделение = СтруктураДанные.Подразделение;
			
			УстановитьДоступныеТипыЦен();
			
		КонецЕсли;
		
		ВалютаРасчетовПередИзменением = ВалютаРасчетов;
		ВалютаРасчетов = СтруктураДанные.ВалютаРасчетов;
		
		Объект.Курс      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
		Объект.Кратность = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
		
		
		ИзменилсяВидЦен = Объект.ТипЦен <> СтруктураДанные.ТипЦен;
			//И ЗначениеЗаполнено(СтруктураДанные.ТипЦен);
			
		ПересчетНеобходим = (Объект.Запасы.Количество() > 0);
			
		Если ИзменилсяВидЦен Тогда
			
			Объект.ТипЦен = СтруктураДанные.ТипЦен;
			
		КонецЕсли;
			
		// из-за автоматическиз скидок пересчитывать документ надо в любом случае	
		ПересчетДокумента();	
		
		Если (ЗначениеЗаполнено(ВалютаРасчетов) И ВалютаРасчетовПередИзменением <> СтруктураДанные.ВалютаРасчетов)
			И Объект.ВалютаДокумента <> СтруктураДанные.ВалютаРасчетов Тогда
			
			Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
			Предупреждение(НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом! Необходимо проверить валюту документа!'"));
			
			
		КонецЕсли;
		
		ВалютаРасчетов = СтруктураДанные.ВалютаРасчетов;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипЦенПриИзменении(Элемент)
	ПересчетДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриАктивизацииЯчейки(элемент)
	
	Если элемент.ТекущийЭлемент.Имя = "КоличествоОтгружено" Тогда
		Если СтрНайти(элемент.ТекущиеДанные.ЕдиницаИзмерения, "шт") = 0 Тогда
			элемент.ТекущийЭлемент.ФорматРедактирования = "NFD=3";
		Иначе
			элемент.ТекущийЭлемент.ФорматРедактирования = "NFD=0";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтруктурнаяЕдиницаНачалоВыбора(элемент, данныеВыбора, стандартнаяОбработка)
	данныеВыбора = ПолучитьДанныеВыбораСтруктурнойЕдиницы(Элементы.Запасы.ТекущиеДанные.ПолучитьИдентификатор());
	стандартнаяОбработка = Ложь;
КонецПроцедуры


#КонецОбласти 

#Область КомандыФормы

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	ДействиеПодбор("Запасы");
КонецПроцедуры
	
#КонецОбласти 

#Область ДополнительныеПроцедурыИФункции

&НаКлиенте
Процедура ПересчетДокумента()
	
	
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
		//СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		//СтруктураДанные.Вставить("ТипЦен", ЭтаФорма.Объект.ТипЦен);
		//СтруктураДанные.Вставить("Подразделение", ЭтаФорма.Объект.Подразделение);
		//СтруктураДанные.Вставить("ДатаСреза", ЭтаФорма.Объект.Дата);
		//СтруктураДанные.Вставить("Контрагент", ЭтаФорма.Объект.Контрагент);
		
		//СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		// Выполнить общие действия для всех документов при изменении номенклатуры.
		СтруктураДанные = ОбработкаТабличныхЧастейСервер.ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные, Объект);
		
		СтрокаТабличнойЧасти.ЕдиницаИзмерения 	= СтруктураДанные.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Цена 				= СтруктураДанные.Цена;
		СтрокаТабличнойЧасти.ПроцентСкидки 		= СтруктураДанные.ПроцентСкидки;
		СтрокаТабличнойЧасти.ПроцентСкидкиНаВес	= СтруктураДанные.ПроцентСкидкиНаВес;
		
		//РасчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
		ОбработкаТабличныхЧастейКлиент.РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПодбор(ИмяТабличнойЧасти)
	
	Если ИмяТабличнойЧасти = "Запасы" Тогда
		Команда = "ПодборВТабличнуюЧастьЗапасы";
	КонецЕсли;
	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда", Команда);
	
	ДобавитьПоставщикаВПараметрыОтбора(СтруктураПараметровПодбора);
	ДобавитьТипЦенВПараметрыОтбора(СтруктураПараметровПодбора);
	
	ВременнаяДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), ТекущаяДата(), Объект.Дата);
	СтруктураПараметровПодбора.Вставить("Период", ВременнаяДатаРасчетов);
	
	РаботаСДиалогамиКлиент.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);
		
КонецПроцедуры //

&НаСервереБезКонтекста
Функция ПолучитьДанныеОрганизацияПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ФинУчет", СтруктураДанные.Организация.ФинУчет);
	
	Возврат СтруктураДанные;

КонецФункции

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	//СтруктураДанные.Вставить("ТипЦен", ЭтаФорма.Объект.ТипЦен);
	//СтруктураДанные.Вставить("Подразделение", ЭтаФорма.Объект.Подразделение);
	//СтруктураДанные.Вставить("ДатаСреза", ЭтаФорма.Объект.Дата);
	//СтруктураДанные.Вставить("Контрагент", ЭтаФорма.Объект.Контрагент);
	//
	//СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	СтруктураДанные = ОбработкаТабличныхЧастейСервер.ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные, Объект);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения 	= СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.СтруктурнаяЕдиница	= СтруктураДанные.СтруктурнаяЕдиница;
	СтрокаТабличнойЧасти.Цена 				= СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.ПроцентСкидки 		= СтруктураДанные.ПроцентСкидки;
	СтрокаТабличнойЧасти.ПроцентСкидкиНаВес	= СтруктураДанные.ПроцентСкидкиНаВес;
	
	//РасчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиент.РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);

КонецПроцедуры

&НаКлиенте
Процедура РасчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация", ЭтаФорма.Объект.Организация);

	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении(СтруктураДанные);
	
	Если НЕ(СтрокаТабличнойЧасти.КоличествоОтгружено = 0) Тогда
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоОтгружено - СтрокаТабличнойЧасти.КоличествоОтгружено*СтрокаТабличнойЧасти.ПроцентСкидкиНаВес/100;
	КонецЕсли;
	
	Если НЕ(СтрокаТабличнойЧасти.КоличествоЗаказано = 0) Тогда
		СтрокаТабличнойЧасти.КоличествоОтклонение = СтрокаТабличнойЧасти.КоличествоЗаказано - СтрокаТабличнойЧасти.Количество; 	
	КонецЕсли;		

	
	СтрокаТабличнойЧасти.СуммаБезСкидки = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	Если СтруктураДанные.ФинУчет Тогда
		
		СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.СуммаБезСкидки / 6;
		
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Скидка 	= СтрокаТабличнойЧасти.СуммаБезСкидки * СтрокаТабличнойЧасти.ПроцентСкидки/ 100;
	СтрокаТабличнойЧасти.Сумма 		= СтрокаТабличнойЧасти.СуммаБезСкидки - СтрокаТабличнойЧасти.Скидка;
	
КонецПроцедуры // РасчитатьСуммуВСтрокеТабличнойЧасти()

&НаКлиенте
Процедура ЗапасыРасчетСтроки(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоОтгружено;
	
	//РасчитатьСуммуВСтрокеТабличнойЧасти();	
	ОбработкаТабличныхЧастейКлиент.РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением, ВалютаРасчетов)
	
	РазностьДат = УправлениеНебольшойФирмойСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	ВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", ВалютаРасчетов));
		
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат
	);
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность
	);
	
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	// Получим цену
	СтруктураПараметров = Новый Структура("Номенклатура, ТипЦен, Подразделение, ДатаСреза, Контрагент", СтруктураДанные.Номенклатура, СтруктураДанные.ТипЦен, СтруктураДанные.Подразделение, СтруктураДанные.ДатаСреза, СтруктураДанные.Контрагент);
	
	СтруктураДанные.Вставить("Цена", ЦенообразованиеСервер.ВернутьЦенуНоменклатуры(СтруктураПараметров));
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	СтруктураДанные.Вставить("СтруктурнаяЕдиница", СтруктураДанные.Номенклатура.Родитель.Склад);
	СтруктураДанные.Вставить("ПроцентСкидкиНаВес", ЦенообразованиеСервер.ВернутьСкидкуНаВес(СтруктураДанные));
	
	СоответствиеСкидок = ЦенообразованиеСервер.ВернутьАвтоматическиеСкидки(СтруктураПараметров);
	//СтруктураДанные.Вставить("ПроцентСкидки", СоответствиеСкидок.Получить(СокрЛП(СтруктураДанные.Номенклатура.Родитель.Код) +" / "+СокрЛП(СтруктураДанные.Номенклатура.ЦеноваяГруппа.Код)) );
	СтруктураДанные.Вставить("ПроцентСкидки", СоответствиеСкидок.Получить(СокрЛП(СтруктураДанные.Номенклатура.Родитель.Код) +" / "+СокрЛП(Справочники.ЦеновыеГруппы.ПустаяСсылка().Код)) );
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении()
	
	СтруктураДанные = Новый Структура();
	
	//СтруктураДанные.Вставить("Контрагент", ЭтаФорма.Объект.Контрагент);
	//СтруктураДанные.Вставить("Менеджер", ЭтаФорма.Объект.Менеджер);
	
	СтруктураДанные.Вставить("ТипЦен", Справочники.ТипыЦен.ПустаяСсылка());
	
	//Если Объект.Менеджер.НомерКоманды = 2 Тогда
	//	СтруктураДанные.ТипЦен = Объект.Контрагент.ТипЦен2;
	//ИначеЕсли Объект.Менеджер.НомерКоманды = 3 Тогда
	//	СтруктураДанные.ТипЦен = Объект.Контрагент.ТипЦен3;	
	//Иначе
	//	СтруктураДанные.ТипЦен = Объект.Контрагент.ТипЦен;
	//КонецЕсли;
	
	СтрокаУсловийПоставки = Объект.Контрагент.Менеджеры.Найти(Объект.Менеджер, "Менеджер");
	
	Если НЕ СтрокаУсловийПоставки = Неопределено Тогда
		
		СтруктураДанные.ТипЦен = СтрокаУсловийПоставки.ТипЦен;
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("Подразделение", Объект.Контрагент.Родитель.Подразделение);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		Объект.Контрагент.ВалютаРасчетов
	);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Объект.Контрагент.ВалютаРасчетов))
	);
	
	
	Возврат СтруктураДанные;
	
КонецФункции

&НаСервере
Процедура ДобавитьПоставщикаВПараметрыОтбора(СтруктураПараметровПодбора)
	
	//СтруктураПараметровПодбора.Вставить("Поставщик", Объект.Контрагент);
	СтруктураПараметровПодбора.Вставить("ОтборПоПоставщику", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТипЦенВПараметрыОтбора(СтруктураПараметровПодбора)
	
	//СтруктураПараметровПодбора.Вставить("Поставщик", Объект.Контрагент);
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		СтруктураПараметровПодбора.Вставить("ТипЦен", Объект.ТипЦен);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		СтруктураПараметровПодбора.Вставить("Подразделение", Объект.Подразделение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПодбора(ИмяТабличнойЧасти, ЗначениеВыбора) Экспорт

	Перем Номенклатура;
	Перем Количество;
	
	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура",					Номенклатура);
	ЗначениеВыбора.Свойство("Количество",					Количество);

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	// Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	
	
	МассивСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивСтрок.Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Неопределено;
	Иначе
		СтрокаТабличнойЧасти = МассивСтрок[0];
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
		
		//РаботаСДиалогамиКлиент.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	Иначе
		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].Добавить();
		СтрокаТабличнойЧасти.Номенклатура     			= Номенклатура;
		СтрокаТабличнойЧасти.Количество       			= Количество;
		
	КонецЕсли;
	
	//РассчитатьСуммуДокумента();
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	//СтруктураДанные.Вставить("ТипЦен", ЭтаФорма.Объект.ТипЦен);
	//СтруктураДанные.Вставить("Подразделение", ЭтаФорма.Объект.Подразделение);
	//СтруктураДанные.Вставить("ДатаСреза", ЭтаФорма.Объект.Дата);
	//СтруктураДанные.Вставить("Контрагент", ЭтаФорма.Объект.Контрагент);	
	
	//СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	СтруктураДанные = ОбработкаТабличныхЧастейСервер.ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные, Объект);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения 	= СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.СтруктурнаяЕдиница = СтруктураДанные.СтруктурнаяЕдиница;
	
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.ПроцентСкидки 	= СтруктураДанные.ПроцентСкидки;
	
	СтрокаТабличнойЧасти.КоличествоОтгружено = СтрокаТабличнойЧасти.Количество;

	//РасчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиент.РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры //

&НаСервере
Процедура УстановитьДоступныеТипыЦен()
	ЦенообразованиеСервер.УстановитьДоступныеТипыЦенВДокументе(Элементы.ТипЦен, Объект.Подразделение, Объект.Дата);	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(результатВопроса, параметрыЗаписи) Экспорт
        
	Если результатВопроса = КодВозвратаДиалога.Да Тогда
		Записать();
	Иначе
		ВыполняетсяПроверкаПоКаналуСбыта = Ложь;
	КонецЕсли;
        
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокКаналовСбыта()
	списокКаналовСбыта = Новый СписокЗначений;
	списокКаналовСбыта.Добавить(Справочники.КД_КаналыСбыта.НайтиПоКоду("000000008"));//Сети национальные
	списокКаналовСбыта.Добавить(Справочники.КД_КаналыСбыта.НайтиПоКоду("000000007"));//Производство
	списокКаналовСбыта.Добавить(Справочники.КД_КаналыСбыта.НайтиПоКоду("000000006"));//Линейная розница
	списокКаналовСбыта.Добавить(Справочники.КД_КаналыСбыта.НайтиПоКоду("000000005"));//Рынок
	списокКаналовСбыта.Добавить(Справочники.КД_КаналыСбыта.НайтиПоКоду("000000004"));//ХоРеКа
	списокКаналовСбыта.Добавить(Справочники.КД_КаналыСбыта.НайтиПоКоду("000000003"));//ОПТ
	списокКаналовСбыта.Добавить(Справочники.КД_КаналыСбыта.НайтиПоКоду("000000002"));//Сеть Файно
	списокКаналовСбыта.Добавить(Справочники.КД_КаналыСбыта.НайтиПоКоду("000000001"));//Сети локальные
	Возврат списокКаналовСбыта;  	
КонецФункции

// Функция - Выполнить проверку основания на сервере
// 		Выполняет проверку наличия "Основания" (ДокОсн) для списка "каналов сбыта" в новых документах
// Возвращаемое значение:
//   -  Булево
//
&НаСервере
Функция ВыполненаПроверкаОснованияНаСервере()
	
	списокКаналовСбыта = ПолучитьСписокКаналовСбыта();
	Если Объект.ДокОсн = Неопределено И Объект.Ссылка.Пустая() И Не (списокКаналовСбыта.НайтиПоЗначению(Объект.Контрагент.КД_КаналСбыта) = Неопределено) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПередЗакрытием(отказ, завершениеРаботы, текстПредупреждения, стандартнаяОбработка)
	
	Если ЕстьПредупреждения Тогда
		
		стандартнаяОбработка = Ложь;
		отказ = Истина;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), "Есть предупрежедения! Закрыть документ?", РежимДиалогаВопрос.ДаНет);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(результатВопроса, дополнительныеПараметры) Экспорт
	
	Если результатВопроса = КодВозвратаДиалога.Да Тогда
		ЕстьПредупреждения = Ложь;
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(текущийОбъект, параметрыЗаписи)
	
	ЕстьПредупреждения = Ложь;
	
	Если параметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		параметрыУчетаПоПодразделению = РегистрыСведений.ПараметрыУчетаПоПодразделениям.ПолучитьПараметрыУчетаПоПодразделению(текущийОбъект.дата, 
					текущийОбъект.подразделение, Новый Структура("ВыполнятьПроверкуОстатковПриОгрузке, ВыполнятьПроверкуПустогоКоличестваПриОтгрузке"));
					
		// проверка наличия остатка
		Если параметрыУчетаПоПодразделению.ВыполнятьПроверкуОстатковПриОгрузке Тогда
			
			результатПроверки = Документы.РасходнаяНакладная.ВыполнитьПроверкуОстатков(текущийОбъект.Ссылка);
			
			Если Не результатПроверки.Пустой() Тогда
				
				шаблонСообщения = "Номенклатура: %1,
				|остаток: %2";
				
				выборка = результатПроверки.Выбрать();
				Пока выборка.Следующий() Цикл
					
					сообщение = Новый СообщениеПользователю;
					сообщение.Текст = СтрШаблон(шаблонСообщения, выборка.Номенклатура, выборка.Остаток);
					сообщение.Поле = СтрШаблон("Объект.Запасы[%1].КоличествоОтгружено", выборка.НомерСтроки-1);
					
					сообщение.Сообщить();
					
				КонецЦикла;
				
				ЕстьПредупреждения = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// проверка заполнения количества
		Если параметрыУчетаПоПодразделению.ВыполнятьПроверкуПустогоКоличестваПриОтгрузке Тогда
			
			результатПроверки = Документы.РасходнаяНакладная.ВыполнитьПроверкуКоличествоОтгружено(текущийОбъект.Ссылка);
			
			Если Не результатПроверки.Пустой() Тогда
				
				шаблонСообщения = "Заполните количество: %1";
				
				выборка = результатПроверки.Выбрать();
				Пока выборка.Следующий() Цикл
					
					сообщение = Новый СообщениеПользователю;
					сообщение.Текст = СтрШаблон(шаблонСообщения, выборка.Номенклатура);
					сообщение.Поле = СтрШаблон("Объект.Запасы[%1].КоличествоОтгружено", выборка.НомерСтроки-1);
					
					сообщение.Сообщить();
					
				КонецЦикла;
				
				ЕстьПредупреждения = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеВыбораСтруктурнойЕдиницы(мИдентификаторСтрокиДанных)
	
	результат = Новый СписокЗначений;
		
	данныеСтроки = Объект.Запасы.НайтиПоИдентификатору(мИдентификаторСтрокиДанных);
	
	Если Не данныеСтроки.Номенклатура.Пустая() Тогда
		результат.Добавить(данныеСтроки.Номенклатура.Родитель.Склад);
	КонецЕсли;
	
	// добавим склад возвратов
	результат.Добавить(Константы.СкладВозвратов.Получить());

	
	Возврат (результат);
	
КонецФункции

#КонецОбласти 




