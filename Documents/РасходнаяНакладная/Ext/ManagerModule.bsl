
// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблица_ВзаиморасчетыСПокупателями(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаРасходнаяНакладная);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	
	// Формирование временной таблицы по расчетам с покупателями.
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Период КАК Период,
		|	ТаблицаДокумента.Подразделение,
		|	ТаблицаДокумента.Контрагент,
		|	ТаблицаДокумента.ВестиРасчетыПоДокументам,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
		|			ТОГДА ТаблицаДокумента.Документ
		|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.РасходнаяНакладная.ПустаяСсылка)
		|	КОНЕЦ КАК КредитныйДокумент,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
		|			ТОГДА ТаблицаДокумента.Менеджер
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Менеджеры.БезМенеджера)
		|	КОНЕЦ КАК Менеджер,
		|	СУММА(ТаблицаДокумента.ПродСтоимость) КАК Сумма,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения
		|ПОМЕСТИТЬ ВременнаяТаблицаВзаиморасчетыСПокупателями
		|ИЗ
		|	ВременнаяТаблицаЗапасы КАК ТаблицаДокумента
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокумента.Период,
		|	ТаблицаДокумента.Подразделение,
		|	ТаблицаДокумента.Контрагент,
		|	ТаблицаДокумента.ВестиРасчетыПоДокументам,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
		|			ТОГДА ТаблицаДокумента.Документ
		|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.РасходнаяНакладная.ПустаяСсылка)
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
		|			ТОГДА ТаблицаДокумента.Менеджер
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Менеджеры.БезМенеджера)
		|	КОНЕЦ";

   	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВременнаяТаблицаВзаиморасчетыСПокупателями";
	
	// Установка исключительной блокировки контролируемых остатков расчетов с контрагентами.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаВзаиморасчетыСПокупателями.Подразделение КАК Подразделение,
	|	ВременнаяТаблицаВзаиморасчетыСПокупателями.Контрагент КАК Контрагент,
	|	ВременнаяТаблицаВзаиморасчетыСПокупателями.Менеджер КАК Менеджер,
	|	ВременнаяТаблицаВзаиморасчетыСПокупателями.КредитныйДокумент КАК КредитныйДокумент
	|ИЗ
	|	ВременнаяТаблицаВзаиморасчетыСПокупателями";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ВзаиморасчетыСПокупателями");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();

    НомерЗапроса = 0;
	Запрос.Текст = УправлениеНебольшойФирмойСервер.ПолучитьТекстЗапросаКурсовыеРазницыРасчетыСПокупателями(Запрос.МенеджерВременныхТаблиц, Истина, НомерЗапроса);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("Таблица_ВзаиморасчетыСПокупателями", МассивРезультатов[НомерЗапроса].Выгрузить());

	
КонецПроцедуры

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументСсылкаРасходнаяНакладная, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Если временные таблицы "ДвиженияЗапасыИзменение", "ДвиженияЗапасыНаСкладахИзменение", 
	// "ДвиженияЗапасыКРасходуСоСкладовИзменение", "ДвиженияЗапасыПереданныеИзменение",
	// "ДвиженияЗапасыПринятыеИзменение", "ДвиженияРазмещениеЗаказовИзменение",
	// "ДвиженияПотребностьВЗапасахИзменение содержат записи, необходимо выполнить 
	// контроль реализации товаров.
	
	Если СтруктураВременныеТаблицы.ДвиженияПартииТоваровНаСкладахИзменение
	 //ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыНаСкладахИзменение
	 //ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыКРасходуСоСкладовИзменение 
	 //ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыПереданныеИзменение 
	 //ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыПринятыеИзменение 
	 //ИЛИ СтруктураВременныеТаблицы.ДвиженияЗаказыПокупателейИзменение 
	 //ИЛИ СтруктураВременныеТаблицы.ДвиженияЗаказыПоставщикамИзменение
	 //ИЛИ СтруктураВременныеТаблицы.ДвиженияПотребностьВЗапасахИзменение
	 //ИЛИ СтруктураВременныеТаблицы.ДвиженияРасчетыСПокупателямиИзменение 
	 Тогда
	 
	 	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДвиженияПартииТоваровНаСкладахИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияПартииТоваровНаСкладахИзменение.Подразделение) КАК ПодразделениеПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияПартииТоваровНаСкладахИзменение.Склад) КАК СкладПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияПартииТоваровНаСкладахИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияПартииТоваровНаСкладахИзменение.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	-1*(ЕСТЬNULL(ПартииТоваровНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ДвиженияПартииТоваровНаСкладахИзменение.КоличествоПриЗаписи, 0)) КАК ОстатокПартииТоваровНаСкладах,
		|	-1*ЕСТЬNULL(ПартииТоваровНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокПартииТоваровНаСкладах
		|ИЗ
		|	ДвиженияПартииТоваровНаСкладахИзменение КАК ДвиженияПартииТоваровНаСкладахИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах.Остатки(
		|				&МоментКонтроля,
		|				(Подразделение, Склад, Номенклатура) В
		|					(ВЫБРАТЬ
		|						ДвиженияПартииТоваровНаСкладахИзменение.Подразделение КАК Подразделение,
		|						ДвиженияПартииТоваровНаСкладахИзменение.Склад КАК Склад,
		|						ДвиженияПартииТоваровНаСкладахИзменение.Номенклатура КАК Номенклатура
		|					ИЗ
		|						ДвиженияПартииТоваровНаСкладахИзменение КАК ДвиженияПартииТоваровНаСкладахИзменение)) КАК ПартииТоваровНаСкладахОстатки
		|		ПО ДвиженияПартииТоваровНаСкладахИзменение.Подразделение = ПартииТоваровНаСкладахОстатки.Подразделение
		|			И ДвиженияПартииТоваровНаСкладахИзменение.Склад = ПартииТоваровНаСкладахОстатки.Склад
		|			И ДвиженияПартииТоваровНаСкладахИзменение.Номенклатура = ПартииТоваровНаСкладахОстатки.Номенклатура
		|ГДЕ
		|	ЕСТЬNULL(ПартииТоваровНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ДвиженияПартииТоваровНаСкладахИзменение.КоличествоПриЗаписи, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");

		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("МоментКонтроля", ДополнительныеСвойства.ДляПроведения.МоментВремени);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		Если НЕ МассивРезультатов[0].Пустой()
			//ИЛИ НЕ МассивРезультатов[1].Пустой()
			//ИЛИ НЕ МассивРезультатов[2].Пустой()
			//ИЛИ НЕ МассивРезультатов[3].Пустой()
			//ИЛИ НЕ МассивРезультатов[4].Пустой()
			//ИЛИ НЕ МассивРезультатов[5].Пустой()
			//ИЛИ НЕ МассивРезультатов[6].Пустой()
			//ИЛИ НЕ МассивРезультатов[7].Пустой() 
			Тогда
			ДокументОбъектРасходнаяНакладная = ДокументСсылкаРасходнаяНакладная.ПолучитьОбъект()
		КонецЕсли;
		
		// Отрицательный остаток запасов на складе.
		Если НЕ МассивРезультатов[0].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[0].Выбрать();
			//УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструПартииТоваровНаСкладах(ДокументОбъектРасходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструПартииТоваровНаСкладах(ДокументОбъектРасходнаяНакладная, ВыборкаИзРезультатаЗапроса, );
		КонецЕсли;

	 
	КонецЕсли;
	 
КонецПроцедуры

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства"..
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходнаяНакладнаяЗапасы.НомерСтроки КАК НомерСтроки,
	|	РасходнаяНакладнаяЗапасы.Ссылка КАК Документ,
	|	РасходнаяНакладнаяЗапасы.Ссылка.Ответственный КАК Ответственный,
	|	РасходнаяНакладнаяЗапасы.Ссылка.ДокОсн КАК ЗаказПокупателя,
	|	РасходнаяНакладнаяЗапасы.Ссылка.Подразделение КАК Подразделение,
	|	РасходнаяНакладнаяЗапасы.Ссылка.Контрагент КАК Контрагент,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяЗапасы.Ссылка.Контрагент.ТипВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыВеденияВзаиморасчетов.ПоДоговору)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВестиРасчетыПоДокументам,
	|	РасходнаяНакладнаяЗапасы.Ссылка.Менеджер КАК Менеджер,
	|	РасходнаяНакладнаяЗапасы.Ссылка.Дата КАК Период,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяЗапасы.КоличествоОтгружено = 0
	|			ТОГДА 0
	|		ИНАЧЕ РасходнаяНакладнаяЗапасы.КоличествоОтгружено - РасходнаяНакладнаяЗапасы.Количество
	|	КОНЕЦ КАК СкидкаНаВесКоличество,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяЗапасы.КоличествоОтгружено = 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * (РасходнаяНакладнаяЗапасы.КоличествоОтгружено - РасходнаяНакладнаяЗапасы.Количество)
	|	КОНЕЦ КАК СкидкаНаВес,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяЗапасы.Ссылка.СписатьСоСкладаВозвратов
	|			ТОГДА &СкладВозвратов
	|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Номенклатура.Родитель.Склад
	|	КОНЕЦ КАК Склад,
	|	РасходнаяНакладнаяЗапасы.Количество,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * РасходнаяНакладнаяЗапасы.Количество КАК Стоимость,
	|	РасходнаяНакладнаяЗапасы.Сумма КАК ПродСтоимость,
	|	РасходнаяНакладнаяЗапасы.ПроцентСкидки,
	|	РасходнаяНакладнаяЗапасы.Скидка КАК СуммаСкидки
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&МоментВремени, ) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО РасходнаяНакладнаяЗапасы.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И (ЦеныНоменклатурыСрезПоследних.ТипЦен = &ЦенаСклада)
	|			И (ЦеныНоменклатурыСрезПоследних.Подразделение = &Подразделение)
	|ГДЕ
	|	РасходнаяНакладнаяЗапасы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаРасходнаяНакладная);
	Запрос.УстановитьПараметр("СкладВозвратов", СтруктураДополнительныеСвойства.ДляПроведения.СкладВозвратов);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ЦенаСклада", СтруктураДополнительныеСвойства.УчетнаяПолитика.ЦенаСклада);
	Запрос.УстановитьПараметр("Подразделение", СтруктураДополнительныеСвойства.ДляПроведения.Подразделение);
	//Запрос.УстановитьПараметр("УчетПоЯчейкам", СтруктураДополнительныеСвойства.УчетнаяПолитика.УчетПоЯчейкам);
	
	Запрос.ВыполнитьПакет();
	
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВременнаяТаблицаЗапасы";
	
	// Формирование проводок документа.
	//УправлениеНебольшойФирмойСервер.СформироватьТаблицуПроводок(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	
	СформироватьТаблица_ВзаиморасчетыСПокупателями(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблица_ПартииТоваровНаСкладах(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблица_Продажи(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблица_ДоходыИРасходы(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблица_ЗаказыПокупателей(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()


Функция ВыполнитьПроверкуОстатков(документСсылка) Экспорт
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	
	запрос.Текст =
	"ВЫБРАТЬ
	|	РасходнаяНакладнаяЗапасы.НомерСтроки,
	|	РасходнаяНакладнаяЗапасы.Номенклатура,
	|	ЕСТЬNULL(ПартииТоваровНаСкладахОстатки.КоличествоОстаток, 0) КАК Остаток
	|ИЗ
	|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах.Остатки(
	|				,
	|				НЕ Склад В
	|						(ВЫБРАТЬ
	|							СкладВозвратов.Значение
	|						ИЗ
	|							Константа.СкладВозвратов КАК СкладВозвратов)) КАК ПартииТоваровНаСкладахОстатки
	|		ПО РасходнаяНакладнаяЗапасы.Ссылка.Подразделение = ПартииТоваровНаСкладахОстатки.Подразделение
	|			И РасходнаяНакладнаяЗапасы.Номенклатура = ПартииТоваровНаСкладахОстатки.Номенклатура
	|ГДЕ
	|	РасходнаяНакладнаяЗапасы.Ссылка = &Ссылка
	|	И РасходнаяНакладнаяЗапасы.КоличествоОтгружено <> 0
	|	И ЕСТЬNULL(ПартииТоваровНаСкладахОстатки.КоличествоОстаток, 0) <= 0";
	
	#КонецОбласти
	
	запрос.УстановитьПараметр("Ссылка", документСсылка);
	
	результатЗапроса = запрос.Выполнить();
	
	Возврат результатЗапроса;
	
Конецфункции

Функция ВыполнитьПроверкуКоличествоОтгружено(документСсылка) Экспорт
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	
	запрос.Текст =
	"ВЫБРАТЬ
	|	РасходнаяНакладнаяЗапасы.НомерСтроки,
	|	РасходнаяНакладнаяЗапасы.Номенклатура
	|ИЗ
	|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
	|ГДЕ
	|	РасходнаяНакладнаяЗапасы.Ссылка = &Ссылка
	|	И РасходнаяНакладнаяЗапасы.КоличествоОтгружено = 0";
	
	#КонецОбласти
	
	запрос.УстановитьПараметр("Ссылка", документСсылка);
	
	результатЗапроса = запрос.Выполнить();
	
	Возврат результатЗапроса;
	
Конецфункции

#Область ПроцедурыИФункцииПечатиФормы

Процедура ПечатьСчетаНаОплату(ТабличныйДокумент, Шапка, ВыборкаСтрокЗапасы)
	
	КОНТРАГЕНТ_АШАН_КОД = "F00021386";
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходнаяНакладная_Счет";
	
	ЭтоФинДокумент = Шапка.Организация.ФинУчет;
	
	Макет = УправлениеПечатью.ПолучитьМакет("Документ.РасходнаяНакладная.СчетНаОплату");
		
	НомерДокумента = Шапка.Номер;
	
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм();	
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	// вынести получить данные организации и т.п.
	Если ЭтоФинДокумент Тогда
		ОбластьМакета.Параметры.ТекстЗаголовка = НСтр("ru='Рахунок на оплату № ';uk='Рахунок на оплату № '", КодЯзыкаПечать)
				+ НомерДокумента
				+ НСтр("ru=' от ';uk=' від '", КодЯзыкаПечать)
				+ Формат(Шапка.ДатаДокумента, "Л="+КодЯзыкаПечать+"; ДФ='dd MMMM yyyy'");
		
		ОбластьМакета.Параметры.ЮрАдрес = Шапка.Организация.ЮрАдрес;
		ОбластьМакета.Параметры.ФирмаПолнНаименование = Шапка.Организация.ПолнНаименование;
		ОбластьМакета.Параметры.КлиентПолнНаим = Шапка.Контрагент.ПолнНаим;
		//ОбластьМакета.Параметры.КлиентАдресДоставки = Шапка.Контрагент.АдресДоставки;
	Иначе
		ОбластьМакета.Параметры.НомерДокумента = НомерДокумента;
		ОбластьМакета.Параметры.ДатаДок = Формат(Шапка.ДатаДокумента, "ДФ='dd MMMM yyyy'");
		ОбластьМакета.Параметры.ФирмаПолнНаименование = Шапка.Организация.Наименование;
		ОбластьМакета.Параметры.КлиентПолнНаим = Шапка.Контрагент.Наименование;

		
	КонецЕсли;
	

	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ЕстьСкидки = Шапка.Запасы.Выгрузить().Итог("Скидка") <> 0;
	
	Если ЕстьСкидки Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой");
		ТабличныйДокумент.Вывести(ОбластьМакета);			
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой");		
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабличныйДокумент.Вывести(ОбластьМакета);			
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы");		
	КонецЕсли;
	
	ИтКоличество	= 0;
	ИтСуммаБезНДС	= 0;
	ИтСуммаНДС		= 0;
	ИтВсего			= 0;
	ИтСуммаБезСкидки = 0;
	ИтСуммаСкидки = 0;
	ОбщийВес		= 0;
	
	ВыборкаСтрокЗапасы.Сбросить();

	Пока ВыборкаСтрокЗапасы.Следующий() Цикл
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокЗапасы);
		ОбластьМакета.Параметры.ТоварКод = Прав(ВыборкаСтрокЗапасы.ТоварКод, 5);
		
		Если шапка.Контрагент.Код = КОНТРАГЕНТ_АШАН_КОД Тогда
			областьМакета.Параметры.ТоварКод = СокрЛП(выборкаСтрокЗапасы.Номенклатура.Артикул);
		КонецЕсли;
		
		Если ЕстьСкидки Тогда
			//Если ВыборкаСтрокЗапасы.ПроцентСкидкиНаценки = 100 Тогда
			//	Скидка = ВыборкаСтрокЗапасы.Цена * ВыборкаСтрокЗапасы.Количество;
			//	ОбластьМакета.Параметры.Скидка         = Скидка;
			//	ОбластьМакета.Параметры.СуммаБезСкидки = Скидка;
			//ИначеЕсли ВыборкаСтрокЗапасы.ПроцентСкидкиНаценки = 0 Тогда
			//	ОбластьМакета.Параметры.Скидка         = 0;
			//	ОбластьМакета.Параметры.СуммаБезСкидки = ВыборкаСтрокЗапасы.Сумма;
			//Иначе
			//	Скидка = ВыборкаСтрокЗапасы.Сумма * ВыборкаСтрокЗапасы.ПроцентСкидкиНаценки / (100 - ВыборкаСтрокЗапасы.ПроцентСкидкиНаценки);
			//	ОбластьМакета.Параметры.Скидка         = Скидка;
			//	ОбластьМакета.Параметры.СуммаБезСкидки = ВыборкаСтрокЗапасы.Сумма + Скидка;
			//КонецЕсли;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ИтКоличество	= ИтКоличество + ВыборкаСтрокЗапасы.Количество;
		ИтСуммаБезНДС	= ИтСуммаБезНДС + ВыборкаСтрокЗапасы.СуммаБезНДС;
		ИтСуммаНДС		= ИтСуммаНДС + ВыборкаСтрокЗапасы.СуммаНДС;
		ИтВсего			= ИтВсего + ВыборкаСтрокЗапасы.Сумма;
		ИтСуммаБезСкидки			= ИтСуммаБезСкидки + ВыборкаСтрокЗапасы.СуммаБезСкидки;
		ОбщийВес		= ОбщийВес + ВыборкаСтрокЗапасы.Количество * ВыборкаСтрокЗапасы.НоменклатураВес;
		ИтСуммаСкидки = ИтСуммаСкидки + ВыборкаСтрокЗапасы.Скидка;

		
	КонецЦикла;
	
	Если ЕстьСкидки Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой");
		
    Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицы");
	КонецЕсли;
	
	Если ЭтоФинДокумент Тогда
		ОбластьМакета.Параметры.ИтСуммаБезНДС 	= ИтСуммаБезНДС;
		ОбластьМакета.Параметры.ИтСуммаНДС 		= ИтСуммаНДС;
		ОбластьМакета.Параметры.ИтВсего 		= ИтВсего;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
	
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		
		ОбластьМакета.Параметры.ИтВсегоПрописью		= ОбщегоНазначенияСервер.СформироватьСуммуПрописью(ИтВсего);
		ОбластьМакета.Параметры.ИтСуммаНДСПрописью  = ОбщегоНазначенияСервер.СформироватьСуммуПрописью(ИтСуммаНДС);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	Иначе
		ОбластьМакета.Параметры.ИтСуммаБезСкидки 		= ИтСуммаБезСкидки;
		ОбластьМакета.Параметры.ИтКоличество	= ИтКоличество;
		
		Если ЕстьСкидки Тогда
        	ОбластьМакета.Параметры.ИтСуммаСкидки		= ИтСуммаСкидки;
        	ОбластьМакета.Параметры.ИтСуммаВсего		= ИтСуммаБезСкидки - ИтСуммаСкидки;
		КонецЕсли;
		
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		
        ОбластьМакета.Параметры.ОбщийВес		= ОбщийВес;
		
		//ОбластьМакета.Параметры.Наборщик
		//ОбластьМакета.Параметры.Кладовщик
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЕсли;
	

КонецПроцедуры

Процедура ПечатьРасходнойНакладной(табличныйДокумент, шапка, выборкаСтрокЗапасы)
	
	КОНТРАГЕНТ_АШАН_КОД = "F00021386";
	
	табличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходнаяНакладная_Накладная";
	
	ЭтоФинДокумент = Шапка.Организация.ФинУчет;
	
	Если ЭтоФинДокумент Тогда
		Макет = УправлениеПечатью.ПолучитьМакет("Документ.РасходнаяНакладная.НакладнаяФин");
	Иначе
		Макет = УправлениеПечатью.ПолучитьМакет("Документ.РасходнаяНакладная.Накладная");
	КонецЕсли;
	
	НомерДокумента = Шапка.Номер;
	
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм();	
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	// вынести получить данные организации и т.п.
	Если ЭтоФинДокумент Тогда
		
		ОбластьМакета.Параметры.ТекстЗаголовка = НСтр("ru='Расходная накладная № ';uk='Видаткова накладна № '", КодЯзыкаПечать)
				+ НомерДокумента
				+ НСтр("ru=' от ';uk=' від '", КодЯзыкаПечать)
				+ Формат(Шапка.ДатаДокумента, "Л="+КодЯзыкаПечать+"; ДФ='dd MMMM yyyy'");
				
		ОбластьМакета.Параметры.РасчетныйСчетСтр		= Шапка.РасчетныйСчетСтр;
		ОбластьМакета.Параметры.ЮрАдрес 				= Шапка.Организация.ЮрАдрес;
		ОбластьМакета.Параметры.ФирмаПолнНаименование 	= Шапка.Организация.ПолнНаименование;
		ОбластьМакета.Параметры.КлиентПолнНаим 			= Шапка.Контрагент.ПолнНаим;
		ОбластьМакета.Параметры.КлиентАдресДоставки 	= Шапка.Контрагент.АдресДоставки;
		ОбластьМакета.Параметры.КлиентКомментарий	 	= Шапка.Контрагент.Комментарий;
		
		ОбластьМакета.Параметры.ОрганизацияИНН 			= Шапка.ОрганизацияИНН;
		ОбластьМакета.Параметры.ОрганизацияОКПО 		= Шапка.ОрганизацияОКПО;
		
		ОбластьМакета.Параметры.МестоСоставления		= Шапка.МестоСоставления;
		
	Иначе
		ОбластьМакета.Параметры.НомерДокумента 			= НомерДокумента;
		ОбластьМакета.Параметры.ДатаДок 				= Формат(Шапка.ДатаДокумента, "ДФ='dd MMMM yyyy'");
		//ОбластьМакета.Параметры.ФирмаПолнНаименование 	= Шапка.НаименованиеПодразделенияДляПечати;
		ОбластьМакета.Параметры.ФирмаПолнНаименование = Шапка.Организация.ПолнНаименование;
		ОбластьМакета.Параметры.ТелефонОрганизации 		= Шапка.ТелефонОрганизации;
		ОбластьМакета.Параметры.НомерСклада 			= "Склад № " + Прав(Шапка.Подразделение.Код, 2);
		ОбластьМакета.Параметры.КлиентПолнНаим 			= ?(СокрЛП(Шапка.Контрагент.ПолнНаим) = "", Шапка.Контрагент.Наименование, Шапка.Контрагент.ПолнНаим);
		ОбластьМакета.Параметры.ТелефонКонтрагента 		= Шапка.ТелефонКонтрагента;

		
	КонецЕсли;
	

	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	естьСкидки = шапка.СуммаСкидки <> 0 Или ЗначениеЗаполнено(шапка.РекомендованныйТипЦен);
	этоФирменнаяРозница = (шапка.Контрагент.КД_КаналСбыта = ПрограммныеПеречисления.КД_КаналСбыта().ФирменнаяРозница);
	
	Если ЭтоФинДокумент Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы");		
	Иначе		
		Если ЕстьСкидки Тогда
			
			Если этоФирменнаяРозница Или ЗначениеЗаполнено(Шапка.ДокОсн) Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкойФайно");
			Иначе
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой");
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Если этоФирменнаяРозница Или ЗначениеЗаполнено(Шапка.ДокОсн) Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкойФайно");
			Иначе
				ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой");					
			КонецЕсли;
			
		Иначе
			
			Если этоФирменнаяРозница Или ЗначениеЗаполнено(Шапка.ДокОсн) Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыФайно");
			Иначе
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Если этоФирменнаяРозница Или ЗначениеЗаполнено(Шапка.ДокОсн) Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицыФайно");		
			Иначе
				ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы");		
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИтКоличество	= 0;
	ИтСуммаБезНДС	= 0;
	ИтСуммаНДС		= 0;
	ИтВсего			= 0;
	ИтСуммаБезСкидки = 0;
	ИтСуммаСкидки = 0;
	ОбщийВес		= 0;
	НомСтр = 0;
	
	Пока ВыборкаСтрокЗапасы.Следующий() Цикл
		
		НомСтр = НомСтр + 1;
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокЗапасы);
		ОбластьМакета.Параметры.ТоварКод = Прав(ВыборкаСтрокЗапасы.ТоварКод, 5);
		
		Если шапка.Контрагент.Код = КОНТРАГЕНТ_АШАН_КОД Тогда
			областьМакета.Параметры.ТоварКод = СокрЛП(выборкаСтрокЗапасы.Номенклатура.Артикул);
		КонецЕсли;
		
		ОбластьМакета.Параметры.НомСтр = НомСтр;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ИтКоличество	= ИтКоличество + ВыборкаСтрокЗапасы.Количество;
		ИтСуммаБезНДС	= ИтСуммаБезНДС + ВыборкаСтрокЗапасы.СуммаБезНДС;
		ИтСуммаНДС		= ИтСуммаНДС + ВыборкаСтрокЗапасы.СуммаНДС;
		ИтВсего			= ИтВсего + ВыборкаСтрокЗапасы.Сумма;
		ИтСуммаБезСкидки			= ИтСуммаБезСкидки + ВыборкаСтрокЗапасы.СуммаБезСкидки;
		ОбщийВес		= ОбщийВес + ВыборкаСтрокЗапасы.Количество * ВыборкаСтрокЗапасы.НоменклатураВес;
		ИтСуммаСкидки = ИтСуммаСкидки + ВыборкаСтрокЗапасы.Скидка;

		
	КонецЦикла;
	
	Если ЭтоФинДокумент Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицы");
	Иначе
		Если ЕстьСкидки Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой");
			
	    Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицы");
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	кладовщикСтруктура = РегистрыСведений.ОтветственныеЛица.ПолучитьПоследнее(Шапка.ДатаДокумента, Новый Структура("Организация, ТипОтветственногоЛица", Шапка.Организация, Перечисления.ТипыОтветственныхЛиц.Кладовщик));
	руководительСтруктура = РегистрыСведений.ОтветственныеЛица.ПолучитьПоследнее(Шапка.ДатаДокумента, Новый Структура("Организация, ТипОтветственногоЛица", Шапка.Организация, Перечисления.ТипыОтветственныхЛиц.Руководитель));
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЭтоФинДокумент Тогда
		
		ОбластьМакета.Параметры.ИтСуммаБезНДС 	= ИтСуммаБезНДС;
		ОбластьМакета.Параметры.ИтСуммаНДС 		= ИтСуммаНДС;
		ОбластьМакета.Параметры.ИтВсего 		= ИтВсего;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
	
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		
		ОбластьМакета.Параметры.ИтВсегоПрописью		= ОбщегоНазначенияСервер.СформироватьСуммуПрописью(ИтВсего);
		ОбластьМакета.Параметры.ИтСуммаНДСПрописью  = ОбщегоНазначенияСервер.СформироватьСуммуПрописью(ИтСуммаНДС);
		
		УстановитьПривилегированныйРежим(Истина);
		ОбластьМакета.Параметры.КтоВыписываетНакладные = ?(ЗначениеЗаполнено(кладовщикСтруктура.Сотрудник), "" + ОбщегоНазначения.ФамилияИнициалыФизЛица(кладовщикСтруктура.Сотрудник.ФизЛицо) + ", " + СокрЛП(кладовщикСтруктура.Должность), "" + ОбщегоНазначения.ФамилияИнициалыФизЛица(руководительСтруктура.Сотрудник.ФизЛицо) + ", " + СокрЛП(руководительСтруктура.Должность));
		УстановитьПривилегированныйРежим(Ложь);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	Иначе
		
		Если Не шапка.РекомендованныйТипЦен.Пустая() Тогда
			итСуммаСкидки = 0;
		КонецЕсли;
		
		ОбластьМакета.Параметры.ИтСуммаБезСкидки 		= ИтСуммаБезСкидки;
		ОбластьМакета.Параметры.ИтКоличество	= ИтКоличество;
		
		Если ЕстьСкидки Тогда
        	ОбластьМакета.Параметры.ИтСуммаСкидки		= ИтСуммаСкидки;
        	ОбластьМакета.Параметры.ИтСуммаВсего		= ИтСуммаБезСкидки - ИтСуммаСкидки;
		КонецЕсли;
		
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, шапка);
		
		Если этоФирменнаяРозница Тогда
			областьМакета.Параметры.СуммаДолга = "";
		КонецЕсли;
		
        ОбластьМакета.Параметры.ОбщийВес		= ОбщийВес;
		
		ОбластьМакета.Параметры.Наборщик		= Шапка.Наборщик;
		ОбластьМакета.Параметры.Кладовщик       = Шапка.Кладовщик;
		
		УстановитьПривилегированныйРежим(Истина);
		ОбластьМакета.Параметры.Сдал = ?(ЗначениеЗаполнено(кладовщикСтруктура.Сотрудник), "" + ОбщегоНазначения.ФамилияИнициалыФизЛица(кладовщикСтруктура.Сотрудник.ФизЛицо) + ", " + СокрЛП(кладовщикСтруктура.Должность), "" + ОбщегоНазначения.ФамилияИнициалыФизЛица(руководительСтруктура.Сотрудник.ФизЛицо) + ", " + СокрЛП(руководительСтруктура.Должность));
		УстановитьПривилегированныйРежим(Ложь);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЕсли;
	

КонецПроцедуры

Процедура ПечатьНалоговойНакладной(ТабличныйДокумент, Шапка, ВыборкаСтрокЗапасы)
	
	Если НЕ Шапка.Организация.ФинУчет Тогда
		Возврат;
	КонецЕсли;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходнаяНакладная_Налоговая";
	

	Макет = УправлениеПечатью.ПолучитьМакет("Документ.РасходнаяНакладная.НалоговаяНакладная_2011_2");
	
	НомерНалоговой = Прав("       "+СокрЛП(Число(Прав(Шапка.Номер, 5))), 7);
	
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм();	
	//Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Оригинал");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	_ДатаОтгрузки = Формат(Шапка.ДатаОтгрузки, "ДФ=ddMMyyyy");
	Для Инд = 1 По 8 Цикл
		ОбластьМакета.Параметры["_ДатаОтгрузки"+Инд]    = Сред(_ДатаОтгрузки, Инд, 1);
	КонецЦикла;
	
	НомерНалоговой = Прав("       "+СокрЛП(Число(Прав(Шапка.Номер, 5))), 7);
	Для Инд = 1 По 7 Цикл
		ОбластьМакета.Параметры["НомерНалоговой"+Инд]    = Сред(НомерНалоговой, Инд, 1);
	КонецЦикла;
	
	
	// вынести получить данные организации и т.п.
	
	
	
	//ОбластьМакета.Параметры.ТекстЗаголовка = НСтр("ru='Расходная накладная № ';uk='Видаткова накладна № '", КодЯзыкаПечать)
	//			+ НомерДокумента
	//			+ НСтр("ru=' от ';uk=' від '", КодЯзыкаПечать)
	//			+ Формат(Шапка.ДатаДокумента, "Л="+КодЯзыкаПечать+"; ДФ='dd MMMM yyyy'");
		
	ОбластьМакета.Параметры.ФирмаПолнНаименование 	= СокрЛП(Шапка.Организация.ПолнНаименование);
	ОбластьМакета.Параметры.КлиентПолнНаим 			= СокрЛП(Шапка.Контрагент.ПолнНаим);
	ОбластьМакета.Параметры.ЮрАдрес 				= СокрЛП(Шапка.Организация.ЮрАдрес);
	ОбластьМакета.Параметры.КлиентЮрАдрес 			= СокрЛП(Шапка.Контрагент.ЮрАдрес);
	
	ФирмаНалогНомер = Прав("            " + СокрЛП(Шапка.Организация.ИНН), 12);
	ФирмаНомСвид	= Прав("          " + СокрЛП(Шапка.Организация.СвидетельствоСерияНомер), 10);
	ФирмаТелефоны	= СокрЛП(СтрЗаменить(Шапка.Организация.Телефоны,"-",""));
	
	Для Инд = 1 По 12 Цикл
		ОбластьМакета.Параметры["ФирмаНалогНомер_"+Инд]    = Сред(ФирмаНалогНомер, Инд, 1);
	КонецЦикла;
	
	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["ФирмаНомСвид_"+Инд]    = Сред(ФирмаНомСвид, Инд, 1);
	КонецЦикла;
	
	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["ФирмаТелефоны_"+Инд]    = Сред(ФирмаТелефоны, Инд, 1);
	КонецЦикла;
	
	КонтрагентНалогНомер	= Прав("            " + СокрЛП(Шапка.Контрагент.НомерПлательщикаНДС), 12);
	КонтрагентНомСвид		= Прав("          " + СокрЛП(Шапка.Контрагент.НомерСвидетельства), 10);
	КлиентТелефоны			= СокрЛП(СтрЗаменить(Шапка.Контрагент.Телефоны,"-",""));
	
	Для Инд = 1 По 12 Цикл
		ОбластьМакета.Параметры["КонтрагентНалогНомер_"+Инд]    = Сред(КонтрагентНалогНомер, Инд, 1);
	КонецЦикла;
	
	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["КонтрагентНомСвид_"+Инд]    = Сред(КонтрагентНомСвид, Инд, 1);
	КонецЦикла;
	
	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["КлиентТелефоны_"+Инд]    = Сред(КлиентТелефоны, Инд, 1);
	КонецЦикла;
	
	ОбластьМакета.Параметры.УсловиеПродажи1 = СокрЛП(Шапка.Контрагент.ВидДоговора);
	
	УсловиеПродажи2 = Формат(Шапка.Контрагент.ДатаДоговора, "ДФ=ddMMyyyy");
	Для Инд = 1 По 8 Цикл
		ОбластьМакета.Параметры["УсловиеПродажи2_"+Инд]    = Сред(УсловиеПродажи2, Инд, 1);
	КонецЦикла;
	
	ОбластьМакета.Параметры.НомДог_1	= СокрЛП(Шапка.Контрагент.НомерДоговора);
    ОбластьМакета.Параметры.ФормаРасчетов = "оплата з поточного рахунку";


	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	
	ИтСуммаБезНДС	= 0;
	ИтСуммаНДС		= 0;
	ИтСумма			= 0;
	
	
	ОбластьМакета = Макет.ПолучитьОбласть("РазделI1");
	
	ВыборкаСтрокЗапасы.Сбросить();
	Пока ВыборкаСтрокЗапасы.Следующий() Цикл
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокЗапасы);
		
		ОбластьМакета.Параметры.ДатаОтгр = Шапка.ДатаОтгрузки;
		ОбластьМакета.Параметры.КВЕД = ВыборкаСтрокЗапасы.Номенклатура.КВЕД;
		
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		
		ИтСуммаБезНДС	= ИтСуммаБезНДС + ВыборкаСтрокЗапасы.СуммаБезНДС;
		ИтСуммаНДС		= ИтСуммаНДС + ВыборкаСтрокЗапасы.СуммаНДС;
		ИтСумма			= ИтСумма + ВыборкаСтрокЗапасы.Сумма;
		
	КонецЦикла;
	
	ОбластьМакета = Макет.ПолучитьОбласть("РазделIВсего");
	
	ОбластьМакета.Параметры.ИтСуммаБезНДС = ИтСуммаБезНДС;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ВозврТара");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("НДС");
	
	ОбластьМакета.Параметры.ОбщНДС = ИтСуммаНДС;
	ОбластьМакета.Параметры.ВсегоНДС = ИтСуммаНДС;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ОбщаяСумма");
	
	ОбластьМакета.Параметры.ОбщСуммаСНДС = ИтСумма;
	ОбластьМакета.Параметры.ОбщСуммаСНДС = ИтСумма;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	ОбластьМакета.Параметры.Ответственный = Шапка.Организация.ГлБухгалтер;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);

КонецПроцедуры

Процедура ПечатьДекларацииПроизводителя(табличныйДокумент, шапка, выборкаСтрокЗапасы)
	
	табличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Декларация_производителя";
	
	макет = УправлениеПечатью.ПолучитьМакет("Документ.РасходнаяНакладная.ДекларацияПроизводителя.");
		
	кодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм();	
	//макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	выборкаСтрокЗапасы.Сбросить();
	
	массивПоставщиков = Новый Массив;
	Пока выборкаСтрокЗапасы.Следующий() Цикл
		
		Если массивПоставщиков.Найти(выборкаСтрокЗапасы.НоменклатураПоставщик) = Неопределено Тогда
			массивПоставщиков.Добавить(выборкаСтрокЗапасы.НоменклатураПоставщик);
		КонецЕсли;
		
	КонецЦикла;
	
	
	областьМакета = макет.ПолучитьОбласть("Шапка");
	
	областьМакета.Параметры.НомерДокумента = Прав(шапка.Номер, 7);
	областьМакета.Параметры.ДатаДокумента = Формат(шапка.ДатаДокумента, "ДФ=dd.MM.yy");
	областьМакета.Параметры.НаименованиеПроизводителя = СтрСоединить(массивПоставщиков, ", ");
	областьМакета.Параметры.КонтрагентПолнНаим = шапка.Контрагент.Наименование;
	областьМакета.Параметры.ДатаОтгрузки = Формат(шапка.ДатаДокумента, "ДФ=dd.MM.yy");
	областьМакета.Параметры.ВидИНомерТранспортногоСредства = "";
	
	табличныйДокумент.Вывести(ОбластьМакета);      
	
	областьМакета = макет.ПолучитьОбласть("Заголовок");
	табличныйДокумент.Вывести(областьМакета);
	
	областьМакета = макет.ПолучитьОбласть("Строка");
	
	выборкаСтрокЗапасы.Сбросить();

	Пока выборкаСтрокЗапасы.Следующий() Цикл
		
		областьМакета.Параметры.Заполнить(ВыборкаСтрокЗапасы);
		областьМакета.Параметры.ДатаПроизводства = Формат(шапка.ДатаДокумента, "Л="+КодЯзыкаПечать+"; ДФ='dd MMMM yyyy'");
		
		табличныйДокумент.Вывести(областьМакета);
		
	КонецЦикла;
	
	областьМакета = макет.ПолучитьОбласть("Подвал");
		
	табличныйДокумент.Вывести(областьМакета);
	
КонецПроцедуры

Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, ИмяМакета, КоллекцияПечатныхФорм)
	
	УстановитьПривилегированныйРежим(Истина) ;
	
	табличныйДокумент = Новый ТабличныйДокумент;
	табличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_РасходнаяНакладная";
	
	табличныйДокументДекларация = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	перваяДекларация = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если ИмяМакета = "Накладная" Тогда
			
			запрос = Новый Запрос();
			
			#Область ТекстЗапроса
			
			запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РасходнаяНакладная.Ссылка,
			|	РасходнаяНакладная.Подразделение,
			|	РасходнаяНакладная.Контрагент,
			|	РасходнаяНакладная.Дата КАК ДатаДокумента,
			|	РасходнаяНакладная.Номер,
			|	РасходнаяНакладная.Организация,
			|	РасходнаяНакладная.ДатаОтгрузки,
			|	РасходнаяНакладная.Кладовщик,
			|	РасходнаяНакладная.Наборщик,
			|	ЕСТЬNULL(ПараметрыУчетаПоПодразделениямСрезПоследних.Контрагент.Телефоны, """") КАК ТелефонОрганизации,
			|	ЕСТЬNULL(ПараметрыУчетаПоПодразделениямСрезПоследних.МестоСоставления, """") КАК МестоСоставления,
			|	ЕСТЬNULL(ПараметрыУчетаПоПодразделениямСрезПоследних.КтоВыписываетНакладные, """") КАК КтоВыписываетНакладные,
			|	ВЫБОР
			|		КОГДА ОсновныеЗначенияПодчинённыхДанных.ОсновноеЗначение ЕСТЬ NULL 
			|			ТОГДА ПараметрыУчетаПоПодразделениямСрезПоследних.ОсновнойБанковскийСчет.НаименованиеПолное
			|		ИНАЧЕ ОсновныеЗначенияПодчинённыхДанных.ОсновноеЗначение.НаименованиеПолное
			|	КОНЕЦ КАК РасчетныйСчетСтр,
			|	РасходнаяНакладная.Контрагент.Телефоны КАК ТелефонКонтрагента,
			|	РасходнаяНакладная.Организация.ОКПО,
			|	РасходнаяНакладная.Организация.ИНН,
			|	РасходнаяНакладная.ДокОсн,
			|	ПараметрыУчетаПоПодразделениямСрезПоследних.НаименованиеПодразделенияДляПечати,
			|	РасходнаяНакладная.СуммаСкидки,
			|	ВзаиморасчетыСПокупателямиОстатки.СуммаОстаток КАК СуммаДолга,
			|	ЕСТЬNULL(УсловияОбслуживания.РекомендованныйТипЦен, ЗНАЧЕНИЕ(Справочник.ТипыЦен.ПустаяСсылка)) КАК РекомендованныйТипЦен
			|ПОМЕСТИТЬ ВТ_ДанныеДокумента
			|ИЗ
			|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыУчетаПоПодразделениям.СрезПоследних(&ДатаСреза, ) КАК ПараметрыУчетаПоПодразделениямСрезПоследних
			|		ПО РасходнаяНакладная.Подразделение = ПараметрыУчетаПоПодразделениямСрезПоследних.СтруктурнаяЕдиница
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаСреза, ) КАК КурсыВалютСрезПоследних
			|		ПО РасходнаяНакладная.Контрагент.ВалютаРасчетов = КурсыВалютСрезПоследних.Валюта
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСПокупателями.Остатки(
			|				&ДатаСреза,
			|				ВЫБОР
			|					КОГДА Контрагент.ТипВеденияВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыВеденияВзаиморасчетов.ПоНакладным)
			|						ТОГДА Менеджер = &Менеджер
			|					ИНАЧЕ Менеджер = ЗНАЧЕНИЕ(Справочник.Менеджеры.БезМенеджера)
			|				КОНЕЦ) КАК ВзаиморасчетыСПокупателямиОстатки
			|		ПО (ВзаиморасчетыСПокупателямиОстатки.Контрагент = РасходнаяНакладная.Контрагент)
			|			И РасходнаяНакладная.Подразделение = ВзаиморасчетыСПокупателямиОстатки.Подразделение
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеЗначенияПодчинённыхДанных КАК ОсновныеЗначенияПодчинённыхДанных
			|		ПО РасходнаяНакладная.Организация = ОсновныеЗначенияПодчинённыхДанных.Объект
			|			И РасходнаяНакладная.Подразделение = ОсновныеЗначенияПодчинённыхДанных.Подразделение
			|			И (ОсновныеЗначенияПодчинённыхДанных.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыОсновныхЗначенийПодчинённыхДанных.БанковскийСчётОрганизации))
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УсловияОбслуживанияПокупателей.СрезПоследних(&ДатаЗаказа, ) КАК УсловияОбслуживания
			|		ПО РасходнаяНакладная.Контрагент = УсловияОбслуживания.Контрагент
			|ГДЕ
			|	РасходнаяНакладная.Ссылка = &ТекущийДокумент
			|	И РасходнаяНакладная.Запасы.КоличествоОтгружено <> 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ДанныеДокумента.ДатаДокумента,
			|	ВТ_ДанныеДокумента.Номер,
			|	ВТ_ДанныеДокумента.Организация,
			|	ВТ_ДанныеДокумента.Подразделение,
			|	ВТ_ДанныеДокумента.Контрагент,
			|	ВТ_ДанныеДокумента.ДатаОтгрузки,
			|	ВТ_ДанныеДокумента.Кладовщик,
			|	ВТ_ДанныеДокумента.Наборщик,
			|	ВТ_ДанныеДокумента.ТелефонОрганизации,
			|	ВТ_ДанныеДокумента.МестоСоставления,
			|	ВТ_ДанныеДокумента.КтоВыписываетНакладные,
			|	ВТ_ДанныеДокумента.НаименованиеПодразделенияДляПечати,
			|	ВТ_ДанныеДокумента.РасчетныйСчетСтр,
			|	ВТ_ДанныеДокумента.ТелефонКонтрагента,
			|	ВТ_ДанныеДокумента.ОрганизацияОКПО,
			|	ВТ_ДанныеДокумента.ОрганизацияИНН,
			|	ВТ_ДанныеДокумента.ДокОсн,
			|	ВТ_ДанныеДокумента.РекомендованныйТипЦен,
			|	ВТ_ДанныеДокумента.СуммаДолга,
			|	ВТ_ДанныеДокумента.СуммаСкидки
			|ИЗ
			|	ВТ_ДанныеДокумента КАК ВТ_ДанныеДокумента
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СтрокиДокумента.НомерСтроки,
			|	СтрокиДокумента.Номенклатура,
			|	СтрокиДокумента.ЕдСокрНаим,
			|	СтрокиДокумента.Количество,
			|	ВЫБОР
			|		КОГДА СтрокиДокумента.РекомендованныйТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ПустаяСсылка)
			|			ТОГДА СтрокиДокумента.Цена
			|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
			|	КОНЕЦ КАК Цена,
			|	СтрокиДокумента.Сумма,
			|	СтрокиДокумента.СтавкаНДС,
			|	СтрокиДокумента.СуммаНДС,
			|	СтрокиДокумента.Всего,
			|	СтрокиДокумента.КоличествоЗаказано,
			|	ВЫБОР
			|		КОГДА СтрокиДокумента.РекомендованныйТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ПустаяСсылка)
			|			ТОГДА СтрокиДокумента.ПроцентСкидки
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ПроцентСкидки,
			|	ВЫБОР
			|		КОГДА СтрокиДокумента.РекомендованныйТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ПустаяСсылка)
			|			ТОГДА СтрокиДокумента.Скидка
			|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * СтрокиДокумента.Количество - СтрокиДокумента.Сумма
			|	КОНЕЦ КАК Скидка,
			|	ВЫБОР
			|		КОГДА СтрокиДокумента.РекомендованныйТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.ПустаяСсылка)
			|			ТОГДА СтрокиДокумента.СуммаБезСкидки
			|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * СтрокиДокумента.Количество
			|	КОНЕЦ КАК СуммаБезСкидки,
			|	СтрокиДокумента.СтруктурнаяЕдиница,
			|	СтрокиДокумента.ТоварПолнНаим,
			|	СтрокиДокумента.ТоварНаим,
			|	СтрокиДокумента.ТоварКод,
			|	СтрокиДокумента.ЦенаБезНДС,
			|	СтрокиДокумента.СуммаБезНДС,
			|	СтрокиДокумента.НоменклатураВес,
			|	СтрокиДокумента.НоменклатураУсловияХранения,
			|	СтрокиДокумента.НоменклатураСрокХранения,
			|	СтрокиДокумента.НоменклатураВидУпаковки,
			|	СтрокиДокумента.НоменклатураТУУ,
			|	СтрокиДокумента.НоменклатураПоставщик
			|ИЗ
			|	(ВЫБРАТЬ
			|		ВТ_ДанныеДокумента.Подразделение КАК Подразделение,
			|		ВТ_ДанныеДокумента.РекомендованныйТипЦен КАК РекомендованныйТипЦен,
			|		РасходнаяНакладнаяЗапасы.НомерСтроки КАК НомерСтроки,
			|		РасходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
			|		РасходнаяНакладнаяЗапасы.Номенклатура.ЕдиницаИзмерения КАК ЕдСокрНаим,
			|		РасходнаяНакладнаяЗапасы.Количество КАК Количество,
			|		РасходнаяНакладнаяЗапасы.Цена КАК Цена,
			|		РасходнаяНакладнаяЗапасы.Сумма КАК Сумма,
			|		РасходнаяНакладнаяЗапасы.СтавкаНДС КАК СтавкаНДС,
			|		РасходнаяНакладнаяЗапасы.СуммаНДС КАК СуммаНДС,
			|		РасходнаяНакладнаяЗапасы.Всего КАК Всего,
			|		РасходнаяНакладнаяЗапасы.КоличествоЗаказано КАК КоличествоЗаказано,
			|		РасходнаяНакладнаяЗапасы.ПроцентСкидки КАК ПроцентСкидки,
			|		РасходнаяНакладнаяЗапасы.Скидка КАК Скидка,
			|		РасходнаяНакладнаяЗапасы.СуммаБезСкидки КАК СуммаБезСкидки,
			|		РасходнаяНакладнаяЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
			|		РасходнаяНакладнаяЗапасы.Номенклатура.ПолнНаим КАК ТоварПолнНаим,
			|		РасходнаяНакладнаяЗапасы.Номенклатура.Наименование КАК ТоварНаим,
			|		РасходнаяНакладнаяЗапасы.Номенклатура.Код КАК ТоварКод,
			|		ВЫБОР
			|			КОГДА РасходнаяНакладнаяЗапасы.Количество = 0
			|				ТОГДА 0
			|			ИНАЧЕ (РасходнаяНакладнаяЗапасы.Сумма - РасходнаяНакладнаяЗапасы.СуммаНДС) / РасходнаяНакладнаяЗапасы.Количество
			|		КОНЕЦ КАК ЦенаБезНДС,
			|		РасходнаяНакладнаяЗапасы.Сумма - РасходнаяНакладнаяЗапасы.СуммаНДС КАК СуммаБезНДС,
			|		РасходнаяНакладнаяЗапасы.Номенклатура.Вес КАК НоменклатураВес,
			|		РасходнаяНакладнаяЗапасы.Номенклатура.УсловияХранения КАК НоменклатураУсловияХранения,
			|		РасходнаяНакладнаяЗапасы.Номенклатура.СрокХранения КАК НоменклатураСрокХранения,
			|		РасходнаяНакладнаяЗапасы.Номенклатура.ВидУпаковки КАК НоменклатураВидУпаковки,
			|		РасходнаяНакладнаяЗапасы.Номенклатура.ТУУ КАК НоменклатураТУУ,
			|		РасходнаяНакладнаяЗапасы.Номенклатура.Поставщик КАК НоменклатураПоставщик
			|	ИЗ
			|		ВТ_ДанныеДокумента КАК ВТ_ДанныеДокумента
			|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
			|			ПО ВТ_ДанныеДокумента.Ссылка = РасходнаяНакладнаяЗапасы.Ссылка
			|	ГДЕ
			|		РасходнаяНакладнаяЗапасы.КоличествоОтгружено <> 0) КАК СтрокиДокумента
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|				ДОБАВИТЬКДАТЕ(&ДатаЗаказа, ДЕНЬ, 1),
			|				Подразделение В
			|					(ВЫБРАТЬ ПЕРВЫЕ 1
			|						ОтделыВМагазинах.Подразделение
			|					ИЗ
			|						Справочник.ОтделыВМагазинах КАК ОтделыВМагазинах
			|					ГДЕ
			|						ОтделыВМагазинах.Магазин = &Магазин)) КАК ЦеныНоменклатурыСрезПоследних
			|		ПО СтрокиДокумента.РекомендованныйТипЦен = ЦеныНоменклатурыСрезПоследних.ТипЦен
			|			И СтрокиДокумента.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура";
			
			#КонецОбласти
			
			запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
			запрос.УстановитьПараметр("Менеджер", ТекущийДокумент.Менеджер);
			запрос.УстановитьПараметр("ДатаСреза", КонецДня(ТекущийДокумент.Дата));
			
			Если Не ЗначениеЗаполнено(текущийДокумент.ДокОсн) Тогда
				датаЗаказа = НачалоДня(текущийДокумент.Дата);
			Иначе
				датаЗаказа = НачалоДня(текущийДокумент.ДокОсн.Дата);
			КонецЕсли;
			
			запрос.УстановитьПараметр("ДатаЗаказа", датаЗаказа);
			запрос.УстановитьПараметр("Магазин", текущийДокумент.Контрагент);
			
			результатЗапроса = запрос.ВыполнитьПакет();
			
			шапка = результатЗапроса[1].Выгрузить()[0];
			
			номерДокумента = шапка.Номер;
			
			выборкаСтрокЗапасы = результатЗапроса[2].Выбрать();
			
			ПечатьРасходнойНакладной(табличныйДокумент, шапка, выборкаСтрокЗапасы);
			
			// Определимся с набором дополнительных печатных форм....
			Если ТекущийДокумент.Контрагент.НужноКачественное Тогда
				
				Если Не перваяДекларация Тогда
					табличныйДокументДекларация.ВывестиГоризонтальныйРазделительСтраниц();
				Иначе
					новыйЭлементКоллекции = КоллекцияПечатныхФорм.Вставить(0);
					
					новыйЭлементКоллекции.ИмяМакета = "ДекларацияПроизводителя";
					новыйЭлементКоллекции.ИмяВРЕГ = "ДЕКЛАРАЦИЯПРОИЗВОДИТЕЛЯ";
					новыйЭлементКоллекции.СинонимМакета = "Декларация производителя";
					новыйЭлементКоллекции.Экземпляров = 1;
					
				КонецЕсли;
				
				перваяДекларация = Ложь;
				
				ПечатьДекларацииПроизводителя(табличныйДокументДекларация, шапка, выборкаСтрокЗапасы);
				
			КонецЕсли;
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(табличныйДокумент, номерСтрокиНачало, объектыПечати, текущийДокумент);
		
	КонецЦикла;
	
	// установим параметры печати
	табличныйДокумент.АвтоМасштаб = Истина;
	табличныйДокумент.ОриентацияСтраницы=ОриентацияСтраницы.Ландшафт;
	
	табличныйДокументДекларация.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	табличныйДокументДекларация.АвтоМасштаб = Истина;
	
	Если Не перваяДекларация Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ДекларацияПроизводителя", "Декларация производителя", табличныйДокументДекларация);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов,
				 ПараметрыПечати,
				 КоллекцияПечатныхФорм,
				 ОбъектыПечати,
				 ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Накладная", "Расходная накладная", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "Накладная", КоллекцияПечатныхФорм));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТТН") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТТН", "Товарно-транспортная накладная", Обработки.ПечатьТТН.Создать().ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	КонецЕсли;
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблица_ПартииТоваровНаСкладах(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблица_Продажи(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблица_ДоходыИРасходы(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблица_ЗаказыПокупателей(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
КонецПроцедуры

#КонецОбласти

