
#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(данныеЗаполнения, стандартнаяОбработка)
	
	заполненНаОснованииДокумента = Ложь;
	
	ЗаполнениеОбъектовСервер.ЗаполнитьДанныеНовогоДокумента(ЭтотОбъект, данныеЗаполнения);
	
	// Заполнение по умолчанию.
	Если Организация.Пустая() Тогда
		Организация = Константы.ОсновнаяОрганизация.Получить();
	КонецЕсли;

	// Ввод на основании.
	типДанныхЗаполнения = ТипЗнч(данныеЗаполнения);
	
	Если типДанныхЗаполнения = Тип("Структура") Тогда
		
		ЗаполнитьДокументПоОтбору(данныеЗаполнения);
		
	ИначеЕсли типДанныхЗаполнения = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		
		ЗаполнитьДокументНаОснованииПриходнойНакладной(данныеЗаполнения);
		заполненНаОснованииДокумента = Истина;
		
	ИначеЕсли типДанныхЗаполнения = Тип("ДокументСсылка.ВозвратОтПокупателя") Тогда
		
		ЗаполнитьДокументНаОснованииВозвратаОтПокупателя(данныеЗаполнения);
		заполненНаОснованииДокумента = Истина;
		
	ИначеЕсли типДанныхЗаполнения = Тип("ДокументСсылка.КпкЗаявка") Или типДанныхЗаполнения = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		ЗаполнитьДокументНаОснованииЗаявки(данныеЗаполнения);
		заполненНаОснованииДокумента = Истина;

	КонецЕсли;
	
	ДатаОтгрузки = Дата;
	
	свойствоСозданАвтоматически = Неопределено;
	Если ДополнительныеСвойства.Свойство("СозданАвтоматически", свойствоСозданАвтоматически) И свойствоСозданАвтоматически Тогда
		СозданАвтоматически = Истина;
		Комментарий = данныеЗаполнения.Комментарий;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(отказ, режимПроведения)
	
	
	// Инициализация дополнительных свойств для проведения документа.
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.РасходнаяНакладная.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета
	УправлениеНебольшойФирмойСервер.ОтразитьВзаиморасчетыСПокупателями(ДополнительныеСвойства, Движения, Отказ);
	
	// ТОВАРЫ
	запрос = Новый Запрос;
	#Область ТекстЗапроса
	
	запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходнаяНакладнаяЗапасы.НомерСтроки,
	|	РасходнаяНакладнаяЗапасы.Номенклатура,
	|	РасходнаяНакладнаяЗапасы.Количество,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * РасходнаяНакладнаяЗапасы.Количество КАК Стоимость,
	|	РасходнаяНакладнаяЗапасы.Сумма КАК ПродСтоимость,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяЗапасы.Ссылка.СписатьСоСкладаВозвратов = ИСТИНА
	|			ТОГДА СкладВозвратов.Значение
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РасходнаяНакладнаяЗапасы.СтруктурнаяЕдиница = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|					ТОГДА РасходнаяНакладнаяЗапасы.Номенклатура.Родитель.Склад
	|				ИНАЧЕ РасходнаяНакладнаяЗапасы.СтруктурнаяЕдиница
	|			КОНЕЦ
	|	КОНЕЦ КАК СтруктурнаяЕдиница,
	|	РасходнаяНакладнаяЗапасы.ПроцентСкидки,
	|	РасходнаяНакладнаяЗапасы.Скидка КАК СуммаСкидки,
	|	РасходнаяНакладнаяЗапасы.Ссылка.Менеджер,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяЗапасы.КоличествоОтгружено = 0
	|			ТОГДА 0
	|		ИНАЧЕ РасходнаяНакладнаяЗапасы.КоличествоОтгружено - РасходнаяНакладнаяЗапасы.Количество
	|	КОНЕЦ КАК СкидкаНаВесКоличество,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяЗапасы.КоличествоОтгружено = 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * (РасходнаяНакладнаяЗапасы.КоличествоОтгружено - РасходнаяНакладнаяЗапасы.Количество)
	|	КОНЕЦ КАК СкидкаНаВес
	|ИЗ
	|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаСреза, ) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО РасходнаяНакладнаяЗапасы.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И (ЦеныНоменклатурыСрезПоследних.ТипЦен = &ЦенаСклада)
	|			И (ЦеныНоменклатурыСрезПоследних.Подразделение = &Подразделение),
	|	Константа.СкладВозвратов КАК СкладВозвратов
	|ГДЕ
	|	РасходнаяНакладнаяЗапасы.Ссылка = &Ссылка";
	
	#КонецОбласти			   
	
	
	запрос.УстановитьПараметр("Ссылка", Ссылка);
	запрос.УстановитьПараметр("Подразделение", Подразделение);
	запрос.УстановитьПараметр("ДатаСреза", Ссылка.Дата);
	
	СтурктураПараметровПоПодразделению = Новый Структура("Подразделение, ДатаСреза", Подразделение, Дата);
	СтурктураПараметровПоПодразделению = ЦенообразованиеСервер.ПолучитьПараметрыУчетаПоПодразделению(СтурктураПараметровПоПодразделению);
	
	Запрос.УстановитьПараметр("ЦенаСклада", СтурктураПараметровПоПодразделению.ЦенаСклада);
	
	ПартииТоваров 				= Движения.ПартииТоваровНаСкладах;
	Продажи 					= Движения.Продажи;
	ФинансовыйРезультат 		= Движения.ФинансовыйРезультат;
	ЗаказыПокупателей 			= Движения.ЗаказыПокупателей;
	ВзаиморасчетыСПоставщиками 	= Движения.ВзаиморасчетыСПоставщиками;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// Запасы
		Движение = ПартииТоваров.Добавить();
		
		Движение.Период 		= ЭтотОбъект.Дата;
		Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
		Движение.Номенклатура 	= Выборка.Номенклатура;
		
		Движение.Склад 			= выборка.СтруктурнаяЕдиница;
		
		Движение.Подразделение	= Подразделение;
		Движение.Количество 	= Выборка.Количество;
		Движение.Стоимость 		= Выборка.Стоимость;
		
		движение.СтоимостьВал	= выборка.Стоимость;
		движение.Валюта			= Константы.ВалютаУчета.Получить();
		движение.СчетУчета		= выборка.Номенклатура.СчетУчета;
		движение.ВидХранения	= Перечисления.ВидыХраненияЗапасов.НаСкладе;
		движение.КорСчет		= ПланыСчетов.Внутренний.ВзаиморасчетыСПокупателямиЗаТовар;
		
		//Движение.Категория 		= ЭтотОбъект.Контрагент.КатегоияКонтрагента;
		
		// Заказы покупателей, только если на основании заявок.
		//Если НЕ Организация.ЕстьНДС И ЗначениеЗаполнено(ДокОсн) Тогда
		Если ЗначениеЗаполнено(ДокОсн) Тогда
			
			// выполнение заказа отражается датой заявки.
			Если ТипЗнч(ДокОсн) = Тип("ДокументСсылка.КпкЗаявка") Тогда
				Движение = ЗаказыПокупателей.Добавить();
				Движение.Период 		= ДокОсн.Дата;
				Движение.Подразделение 	= Подразделение;
				Движение.Склад 			= Выборка.Номенклатура.Родитель.Склад;
				Движение.Менеджер 		= Менеджер;
				Движение.Контрагент 	= Контрагент;
				Движение.Номенклатура 	= Выборка.Номенклатура;
				Движение.ЗаказПокупателя = ЭтотОбъект.ДокОсн;
				Движение.Отгружено 		= Выборка.Количество;
			КонецЕсли;
			
		КонецЕсли;
		
		
		// Доход от реализации
		движение = Продажи.Добавить();
		
		движение.Период 			= Дата;
		движение.Подразделение 		= Подразделение;
		движение.Номенклатура 		= выборка.Номенклатура;
		движение.Менеджер			= Менеджер;
		движение.Контрагент			= Контрагент;
		движение.МаршрутРазвоза		= ?(ДокОсн = Неопределено, Справочники.МаршрутыРазвоза.ПустойМаршрут, ДокОсн.МаршрутРазвоза);
		движение.Количество 		= выборка.Количество;
		движение.ПродСтоимость		= выборка.ПродСтоимость;
		движение.Доход	 			= выборка.ПродСтоимость - выборка.Стоимость;
		движение.ТипЦены			= ТипЦен;
		движение.ПроцентСкидки		= выборка.ПроцентСкидки;
		движение.КредитныйДокумент	= Ссылка;
		движение.СуммаСкидки		= Выборка.СуммаСкидки;
		движение.Поставщик			= выборка.Номенклатура.Родитель.Поставщик;
		движение.КаналСбыта			= Контрагент.КД_КаналСбыта;
		движение.ГруппаПродукта		= выборка.Номенклатура.КД_Группа;
		
		
		// Результат от реализации товаров
		Движение = ФинансовыйРезультат.Добавить();
		Движение.Период 		= ЭтотОбъект.Дата;
		Движение.Подразделение	= ЭтотОбъект.Подразделение;
		Движение.СтатьяДоходов 	= Справочники.СтатьиДоходов.МаржинальныйДоход;
		Движение.СуммаДоходов	= Выборка.ПродСтоимость - Выборка.Стоимость;
		
		// спишем на расходы - Скидку на вес.
		Если НЕ(Выборка.СкидкаНаВесКоличество = 0) Тогда
			
			// Запасы
			Движение = ПартииТоваров.Добавить();
			
			Движение.Период 		= ЭтотОбъект.Дата;
			Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
			Движение.Номенклатура 	= Выборка.Номенклатура;
			Движение.Склад 			= ?(ЭтотОбъект.СписатьСоСкладаВозвратов, Константы.СкладВозвратов.Получить(), Выборка.СтруктурнаяЕдиница);
			Движение.Подразделение	= Подразделение;
			Движение.Количество 	= Выборка.СкидкаНаВесКоличество;
			Движение.Стоимость 		= Выборка.СкидкаНаВес;
			
			движение.СтоимостьВал	= выборка.СкидкаНаВес;
			движение.Валюта			= Константы.ВалютаУчета.Получить();
			движение.СчетУчета		= выборка.Номенклатура.СчетУчета;
			движение.ВидХранения	= Перечисления.ВидыХраненияЗапасов.НаСкладе;
			движение.КорСчет		= ПланыСчетов.Внутренний.ВзаиморасчетыСПокупателямиЗаТовар;

			//Движение.Категория 		= ЭтотОбъект.Контрагент.КатегоияКонтрагента;
			
			// Расходы
			Движение = ФинансовыйРезультат.Добавить();
			Движение.Период 		= ЭтотОбъект.Дата;
			Движение.Подразделение	= ЭтотОбъект.Подразделение;
			Движение.СтатьяЗатрат 	= Справочники.СтатьиЗатрат.СкидкаНаВес;
			Движение.СуммаРасходов	= Выборка.СкидкаНаВес;


		КонецЕсли;
		
	КонецЦикла;
	
	// ИМУЩЕСТВО
	Если Имущество.Количество() > 0 Тогда
		
		ИмуществоВЭксплуатации = Движения.Имущество;
		
		Для Каждого СтрокаСостава Из Имущество Цикл
			
			Движение = ИмуществоВЭксплуатации.Добавить();
			
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.Период 		= Дата;
			Движение.Подразделение	= Подразделение;
			Движение.Номенклатура 	= СтрокаСостава.Номенклатура;
			Движение.МОЛ			= СтрокаСостава.МОЛ;
			Движение.ЦФО			= ЦФО;
			Движение.Количество 	= СтрокаСостава.Количество;
			Движение.Стоимость 		= СтрокаСостава.Сумма;
			Движение.СчетУчета		= СтрокаСостава.Номенклатура.СчетУчета;
			
		КонецЦикла;
		
		ИмуществоВЭксплуатации.Записать();
		
		ВзаиморасчетыСПокупателями = Движения.ВзаиморасчетыСПокупателями;
		
		Движение = ВзаиморасчетыСПокупателями.Добавить();
		Движение.ВидДвижения 	= ВидДвиженияНакопления.Приход;
		Движение.Период 		= Дата;
		Движение.Подразделение 	= Подразделение;
		Движение.Контрагент 	= Контрагент;
		Движение.Сумма 			= Имущество.Итог("Сумма");
		
		ВзаиморасчетыСПокупателями.Записать();
		
	КонецЕсли;
	
	ПартииТоваров.Записывать 				= Истина;
	Продажи.Записывать 						= Истина;
	ФинансовыйРезультат.Записывать 			= Истина;
	ЗаказыПокупателей.Записывать 			= Истина;
	ВзаиморасчетыСПоставщиками.Записывать 	= Истина;
	Движения.ТоварыВРознице.Записывать		= Истина;
	
	ГРУППА_ПРОДУКТА_КАНЦТОВАРЫ = Справочники.КД_ГруппыНоменклатуры.НайтиПоКоду("000000026");
	ГРУППА_ПРОДУКТА_ХОЗТОВАРЫ = Справочники.КД_ГруппыНоменклатуры.НайтиПоКоду("000000024");
	
	исключаяГруппыПродукта = Новый Массив;
	исключаяГруппыПродукта.Добавить(ГРУППА_ПРОДУКТА_КАНЦТОВАРЫ);
	исключаяГруппыПродукта.Добавить(ГРУППА_ПРОДУКТА_ХОЗТОВАРЫ);
	
	суммаТовара = 0;
	Для Каждого строкаЗапасы Из Запасы Цикл
		Если Не строкаЗапасы.Номенклатура.КД_Группа = ГРУППА_ПРОДУКТА_КАНЦТОВАРЫ И
			Не строкаЗапасы.Номенклатура.КД_Группа = ГРУППА_ПРОДУКТА_ХОЗТОВАРЫ Тогда
			суммаТовара = суммаТовара + строкаЗапасы.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	// допроведем розницу .... ОБЯЗАТЕЛЬНО !!! после выполнения проверки документа
	Если ДополнительныеСвойства.УчетнаяПолитика.АвтоУчетРозницы Тогда
		
		СтруктураПараметровОтдела = Новый Структура("Организация, Контрагент", Организация, Контрагент);
		РозницаСервер.ПолучитьПараметрыОтдела(СтруктураПараметровОтдела);
		
		
		Если Не СтруктураПараметровОтдела.Подразделение = Неопределено Тогда
			
			// Взаиморасчеты с "Поставщиками"
			Движение = ВзаиморасчетыСПоставщиками.Добавить();
			
			Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
			Движение.Период 		= Дата;
			Движение.Подразделение	= СтруктураПараметровОтдела.Подразделение;
			Движение.Контрагент 	= ДополнительныеСвойства.УчетнаяПолитика.Контрагент;
			Движение.ЦФО 			= СтруктураПараметровОтдела.ОтделМагазина;
			Движение.Сумма 			= Запасы.Итог("Сумма");
			
			Если ЗначениеЗаполнено(Ссылка.ДокОсн) Тогда
				датаОтгрузки = 	КонецДня(Ссылка.ДокОсн.Дата) + 1;
			Иначе
				датаОтгрузки = 	КонецДня(Ссылка.Дата) + 1;
			КонецЕсли;
			
			запрос = Новый Запрос;
			запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
			
			#Область ТекстЗапроса
			
			запрос.Текст =
			"ВЫБРАТЬ
			|	ДанныеДокумента.Подразделение,
			|	ДанныеДокумента.Контрагент,
			|	ДанныеДокумента.ОтделМагазинаПодразделение,
			|	ДанныеДокумента.ОтделМагазинаСклад,
			|	ДанныеДокумента.ОтделМагазина,
			|	ДанныеДокумента.Номенклатура,
			|	ДанныеДокумента.Количество,
			|	ВЫБОР
			|		КОГДА ДанныеДокумента.РекомендованныйТипЦен = ЗНАЧЕНИЕ(справочник.ТипыЦен.ПустаяСсылка)
			|			ТОГДА ДанныеДокумента.СуммаБезСкидки
			|		ИНАЧЕ ДанныеДокумента.Количество * ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
			|	КОНЕЦ КАК СуммаБезСкидки,
			|	ВЫБОР
			|		КОГДА ДанныеДокумента.РекомендованныйТипЦен = ЗНАЧЕНИЕ(справочник.ТипыЦен.ПустаяСсылка)
			|			ТОГДА ДанныеДокумента.Скидка
			|		ИНАЧЕ ДанныеДокумента.Количество * ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) - ДанныеДокумента.Сумма
			|	КОНЕЦ КАК Скидка,
			|	ДанныеДокумента.Сумма,
			|	ДанныеДокумента.РекомендованныйТипЦен,
			|	&датаОтгрузки КАК ДатаОтгрузки,
			|	ДанныеДокумента.Период,
			|	ВалютаУчета.Значение КАК ВалютаУчета
			|ПОМЕСТИТЬ ВТ_ДанныеДокумента
			|ИЗ
			|	(ВЫБРАТЬ
			|		РасходнаяНакладнаяЗапасы.Ссылка.Дата КАК Период,
			|		РасходнаяНакладнаяЗапасы.Ссылка.Подразделение КАК Подразделение,
			|		РасходнаяНакладнаяЗапасы.Ссылка.Контрагент КАК Контрагент,
			|		ОтделыВМагазинах.Подразделение КАК ОтделМагазинаПодразделение,
			|		ОтделыВМагазинах.Склад КАК ОтделМагазинаСклад,
			|		ОтделыВМагазинах.Ссылка КАК ОтделМагазина,
			|		РасходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
			|		РасходнаяНакладнаяЗапасы.Количество КАК Количество,
			|		РасходнаяНакладнаяЗапасы.СуммаБезСкидки КАК СуммаБезСкидки,
			|		РасходнаяНакладнаяЗапасы.Скидка КАК Скидка,
			|		ЕСТЬNULL(УсловияОбслуживания.РекомендованныйТипЦен, ЗНАЧЕНИЕ(справочник.ТипыЦен.ПустаяСсылка)) КАК РекомендованныйТипЦен,
			|		РасходнаяНакладнаяЗапасы.Сумма КАК Сумма
			|	ИЗ
			|		Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОтделыВМагазинах КАК ОтделыВМагазинах
			|			ПО РасходнаяНакладнаяЗапасы.Ссылка.Контрагент = ОтделыВМагазинах.Магазин
			|				И (ОтделыВМагазинах.Организация = РасходнаяНакладнаяЗапасы.Ссылка.Организация
			|					ИЛИ ОтделыВМагазинах.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УсловияОбслуживанияПокупателей.СрезПоследних(&МоментВремени, ) КАК УсловияОбслуживания
			|			ПО РасходнаяНакладнаяЗапасы.Ссылка.Контрагент = УсловияОбслуживания.Контрагент
			|	ГДЕ
			|		РасходнаяНакладнаяЗапасы.Ссылка = &Документ
			|		И РасходнаяНакладнаяЗапасы.Количество > 0) КАК ДанныеДокумента
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&МоментВремени, ) КАК ЦеныНоменклатурыСрезПоследних
			|		ПО ДанныеДокумента.РекомендованныйТипЦен = ЦеныНоменклатурыСрезПоследних.ТипЦен
			|			И ДанныеДокумента.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
			|			И ДанныеДокумента.ОтделМагазинаПодразделение = ЦеныНоменклатурыСрезПоследних.Подразделение,
			|	Константа.ВалютаУчета КАК ВалютаУчета
			|ГДЕ
			|	НЕ ДанныеДокумента.Номенклатура.КД_Группа В (&ИсключаяГруппыПродукта)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
			|	ВТ_ДанныеДокумента.ДатаОтгрузки КАК Период,
			|	ВТ_ДанныеДокумента.ОтделМагазинаПодразделение КАК Подразделение,
			|	ВТ_ДанныеДокумента.ОтделМагазина,
			|	ВТ_ДанныеДокумента.Номенклатура,
			|	ВТ_ДанныеДокумента.Количество,
			|	ВТ_ДанныеДокумента.СуммаБезСкидки КАК Сумма,
			|	ВТ_ДанныеДокумента.Скидка КАК Наценка
			|ИЗ
			|	ВТ_ДанныеДокумента КАК ВТ_ДанныеДокумента
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
			|	ВТ_ДанныеДокумента.Период,
			|	ВТ_ДанныеДокумента.ОтделМагазинаПодразделение КАК Подразделение,
			|	ВТ_ДанныеДокумента.ОтделМагазинаСклад КАК Склад,
			|	ВТ_ДанныеДокумента.ОтделМагазина КАК ЦФО,
			|	ВТ_ДанныеДокумента.СуммаБезСкидки - ВТ_ДанныеДокумента.Скидка КАК Стоимость,
			|	ВТ_ДанныеДокумента.СуммаБезСкидки КАК Продстоимость,
			|	ВТ_ДанныеДокумента.СуммаБезСкидки - ВТ_ДанныеДокумента.Скидка КАК СтоимостьВал,
			|	ВТ_ДанныеДокумента.ВалютаУчета КАК Валюта,
			|	ЗНАЧЕНИЕ(Перечисление.ВидыХраненияЗапасов.НаСкладе) КАК ВидХранения
			|ИЗ
			|	ВТ_ДанныеДокумента КАК ВТ_ДанныеДокумента";
			
			#КонецОбласти
			
			запрос.УстановитьПараметр("МоментВремени", МоментВремени());
			запрос.УстановитьПараметр("Документ", Ссылка);
			запрос.УстановитьПараметр("ДатаОтгрузки", ДатаОтгрузки);
			запрос.УстановитьПараметр("ИсключаяГруппыПродукта", исключаяГруппыПродукта);
			
			результатЗапроса = запрос.ВыполнитьПакет();
			
			#Область ЧтениеВиртуальныхТаблиц
			
			запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_ДанныеДокумента";
			
			#КонецОбласти
			
			Движения.ТоварыВРознице.Загрузить(результатЗапроса[1].Выгрузить());
			
			// "ПартииТоваровНаСкладах"
			Если результатЗапроса[2].Выгрузить().Количество() > 0 Тогда
				движение = Движения.ПартииТоваровНаСкладах.Добавить();
				ЗаполнитьЗначенияСвойств(движение, результатЗапроса[2].Выгрузить()[0]);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Запись наборов записей.
	//УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	//Документы.РасходнаяНакладная.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
	#Область ПоследовательностьЗапасы
	
	Если Не отказ Тогда
		
		запрос = Новый Запрос;
		
		#Область ТекстЗапроса
		
		запрос.Текст =
		"ВЫБРАТЬ
		|	СоставДокумента.Ссылка.Подразделение,
		|	СоставДокумента.Номенклатура.Родитель.Склад КАК МестоХранения,
		|	СоставДокумента.Номенклатура.Родитель.СчетУчета КАК СчетУчета
		|ИЗ
		|	Документ.РасходнаяНакладная.Запасы КАК СоставДокумента
		|ГДЕ
		|	СоставДокумента.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	СоставДокумента.Номенклатура.Родитель.СчетУчета,
		|	СоставДокумента.Ссылка.Подразделение,
		|	СоставДокумента.Номенклатура.Родитель.Склад";
			
		#КонецОбласти 
		
		запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		результатЗапроса = запрос.Выполнить();
		
		ПринадлежностьПоследовательностям.Запасы.Загрузить(результатЗапроса.Выгрузить());
		
		отбор = Новый Структура ("Подразделение, МестоХранения, СчетУчета");
		
		выборка = результатЗапроса.Выбрать();
		Пока выборка.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(отбор, выборка);
			
			Последовательности.Запасы.УстановитьГраницу(МоментВремени(), отбор);
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти 
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(отказ, проверяемыеРеквизиты)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	проверяемыеРеквизиты.Добавить("Подразделение");
	проверяемыеРеквизиты.Добавить("Контрагент");
	проверяемыеРеквизиты.Добавить("Менеджер");
	проверяемыеРеквизиты.Добавить("ТипЦен");
	проверяемыеРеквизиты.Добавить("ВалютаДокумента");
	проверяемыеРеквизиты.Добавить("Организация");
	проверяемыеРеквизиты.Добавить("Запасы.Номенклатура");
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		
		// кроме "собственных филиалов"
		Если Организация.ЕстьНДС И Не Контрагент.КД_КаналСбыта = Справочники.КД_КаналыСбыта.НайтиПоКоду("000000010") Тогда
			Если Не Контрагент.ОсновнаяОрганизация = Организация Тогда
				
				текстСообщения = СтрШаблон(НСтр("ru = 'Контрагент: %1,|отгрузка по  %2 - не разрешена !'"), Контрагент, Организация);
				ПроверкаДанныхКлиентСервер.СообщитьОбОшибке(Отказ, текстСообщения, ЭтотОбъект, "Контрагент");
				
			КонецЕсли;
		КонецЕсли;
		
		//0000401: запрет отгрузки на контрагента "сотрудника" - ПРИНЯТЬ
		Если Контрагент.КД_КаналСбыта = Справочники.КД_КаналыСбыта.НайтиПоНаименованию("Сотрудники",Истина) И Контрагент.КД_Состояние <> Справочники.КД_СостоянияТТ.НайтиПоНаименованию("Активна",Истина) Тогда
			
			текстСообщения = СтрШаблон(НСтр("ru = 'Контрагент: %1, отгрузка на неактивного сотрудника запрещена !'"), Контрагент);
			ПроверкаДанныхКлиентСервер.СообщитьОбОшибке(Отказ, текстСообщения, ЭтотОбъект, "Контрагент");
			
		КонецЕсли;
		
		// проверка допуска по отклонению
		ДокументРасходнаяНакладнаяСервер.ПроверитьОтклонениеПриОтгрузке(отказ, ЭтотОбъект, "Запасы");
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	//УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	//УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	//УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ПринадлежностьПоследовательностям.Запасы.Очистить();
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СуммаСкидки =    Запасы.Итог("Скидка");

	СуммаДокумента = Имущество.Итог("Сумма") + Запасы.Итог("Сумма");
	
	//расчет веса документа
	расчитанныйВесДокумента = 0;
	Для каждого строкаДокумента из Запасы Цикл
		расчитанныйВесДокумента = расчитанныйВесДокумента + строкаДокумента.Количество*строкаДокумента.Номенклатура.Вес;
	КонецЦикла;
	
	ВесДокумента = расчитанныйВесДокумента;
	
	ОбщегоНазначенияСервер.УстановитьНомерДокумента(ЭтотОбъект);
	
	Если (Организация.ФинУчет) Тогда
		
		ПогрешностиОкругления = Новый Соответствие();
		
		ОбработкаТабличныхЧастейСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Запасы, ЭтотОбъект, ПогрешностиОкругления, "Запасы");
		
	КонецЕсли;
	
	ИтогНеОтгружено = 0;
	Для Каждого строкаЗапасы Из Запасы Цикл
		
		Если строкаЗапасы.КоличествоОтгружено = 0 Тогда
			ИтогНеОтгружено = ИтогНеОтгружено + строкаЗапасы.КоличествоЗаказано;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриЗаписи(отказ)
	
	// Обновление статуса заявки
	Если ЗначениеЗаполнено(ДокОсн) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если Не ДокОсн.Статус Тогда
			ДокОснОбъект = ДокОсн.ПолучитьОбъект();
			ДокОснОбъект.Статус = Истина;
			ДокОснОбъект.Записать();
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(объектКопирования)
	
	ЗаполнениеОбъектовСервер.ЗаполнитьДанныеСкопированногоДокумента(ЭтотОбъект, объектКопирования);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеПоОснованию

Процедура ЗаполнитьДокументПоОтбору(Знач данныеЗаполнения)
	
	Если данныеЗаполнения.Свойство("Контрагент") Тогда
		ТипЦен 	= данныеЗаполнения.Контрагент.ТипЦен;
	КонецЕсли;
	
КонецПроцедуры	

Процедура ЗаполнитьДокументНаОснованииПриходнойНакладной(Знач данныеЗаполнения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Заполнение реквизитов документа.
	ЗаполнениеОбъектовСервер.ЗаполнитьРеквизитыДокументаПриВводеНаОсновании(ЭтотОбъект, данныеЗаполнения);
	
	Если Менеджер.Пустая() Тогда
		Менеджер = Справочники.Менеджеры.БезМенеджера;
	КонецЕсли;
	
	// бухгалтерия заказала: чтобы фин? организация не копировалась
	Если Организация.ФинУчет Тогда
		Организация = Неопределено;
	КонецЕсли;
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	
	запрос.Текст =
	"ВЫБРАТЬ
	|	ПриходнаяНакладная.Ссылка КАК ДокументОснование,
	|	СД_СоответствияСрезПоследних.КлючСоответствия,
	|	ЕСТЬNULL(СД_СоответствияСрезПоследних.ПодразделениеЗначение, ПриходнаяНакладная.Подразделение) КАК Подразделение,
	|	ЕСТЬNULL(СД_СоответствияСрезПоследних.КонтрагентЗначение, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Контрагент,
	|	ПриходнаяНакладная.ЦФООтправитель КАК ЦФО
	|ИЗ
	|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СД_Соответствия.СрезПоследних(&МоментВремени, КлючСоответствия.ВидДокумента = &ВидДокумента) КАК СД_СоответствияСрезПоследних
	|		ПО (СД_СоответствияСрезПоследних.Активно = ИСТИНА)
	|			И ПриходнаяНакладная.Подразделение = СД_СоответствияСрезПоследних.КлючСоответствия.Подразделение
	|			И ПриходнаяНакладная.Контрагент = СД_СоответствияСрезПоследних.КлючСоответствия.Контрагент
	|ГДЕ
	|	ПриходнаяНакладная.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходнаяНакладнаяЗапасы.Номенклатура,
	|	ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения,
	|	ПриходнаяНакладнаяЗапасы.Количество,
	|	ПриходнаяНакладнаяЗапасы.Цена,
	|	ПриходнаяНакладнаяЗапасы.Сумма,
	|	ПриходнаяНакладнаяЗапасы.СтавкаНДС,
	|	ПриходнаяНакладнаяЗапасы.СуммаНДС,
	|	ПриходнаяНакладнаяЗапасы.Всего,
	|	ПриходнаяНакладнаяЗапасы.Номенклатура.Родитель.Склад КАК СтруктурнаяЕдиница,
	|	ПриходнаяНакладнаяЗапасы.Количество КАК КоличествоЗаказано,
	|	ПриходнаяНакладнаяЗапасы.Количество КАК КоличествоОтгружено
	|ИЗ
	|	Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
	|ГДЕ
	|	ПриходнаяНакладнаяЗапасы.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходнаяНакладнаяИмущество.Номенклатура,
	|	ПриходнаяНакладнаяИмущество.Количество,
	|	ПриходнаяНакладнаяИмущество.Цена,
	|	ПриходнаяНакладнаяИмущество.Сумма,
	|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК МОЛ
	|ИЗ
	|	Документ.ПриходнаяНакладная.Имущество КАК ПриходнаяНакладнаяИмущество
	|ГДЕ
	|	ПриходнаяНакладнаяИмущество.Ссылка = &ДокументОснование";
	
	#КонецОбласти
	
	запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	запрос.УстановитьПараметр("ДокументОснование", данныеЗаполнения);
	запрос.УстановитьПараметр("ВидДокумента", Перечисления.СД_ВидыСвязанныхДокументов.ПриходнаяНакладная);
	
	результатЗапроса = запрос.ВыполнитьПакет();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, результатЗапроса[0].Выгрузить()[0]);
	
	Запасы.Загрузить(результатЗапроса[1].Выгрузить());
	Имущество.Загрузить(результатЗапроса[2].Выгрузить());

	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииЗаявки(Знач данныеЗаполнения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Заполнение реквизитов документа.
	ЗаполнениеОбъектовСервер.ЗаполнитьРеквизитыДокументаПриВводеНаОсновании(ЭтотОбъект, данныеЗаполнения);

	ДокОсн	= данныеЗаполнения;
	Дата = данныеЗаполнения.ДатаДоставки;
	
	строкаУсловийПоставки = данныеЗаполнения.Контрагент.Менеджеры.Найти(Менеджер, "Менеджер");
	Если Не СтрокаУсловийПоставки = Неопределено Тогда
		ТипЦен = СтрокаУсловийПоставки.ТипЦен;
	КонецЕсли;
	
	//Кладовщик = ПараметрыСеанса.Кладовщик;
	//Наборщик = ПараметрыСеанса.Наборщик;
	Комментарий = данныеЗаполнения.Комментарий;
	
	свойствоКладовщик = Неопределено;
	Если ДополнительныеСвойства.Свойство("Кладовщик", свойствоКладовщик) Тогда
		Кладовщик = свойствоКладовщик;
	КонецЕсли;
	
	свойствоНаборщик = Неопределено;
	Если ДополнительныеСвойства.Свойство("Наборщик", свойствоНаборщик) Тогда
		Наборщик = свойствоНаборщик;
	КонецЕсли;
	
	cоответствиеСкидок = ЦенообразованиеСервер.ВернутьАвтоматическиеСкидки(Новый Структура("Контрагент, Подразделение, ДатаСреза", Контрагент, Подразделение, Дата));
	
	
	структураДанныеПроверкиЗапретаСкидки = Новый Структура("Контрагент, Подразделение, Номенклатура, ДатаСреза", Контрагент, Подразделение, Неопределено, Дата);
	
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	
	запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
	|	ВложенныйЗапрос.НоменклатураРодитель,
	|	ВложенныйЗапрос.НоменклатураКД_Группа
	|ИЗ
	|	(ВЫБРАТЬ
	|		КпкЗаявкаЗапасы.Номенклатура КАК Номенклатура,
	|		КпкЗаявкаЗапасы.Количество КАК Количество,
	|		КпкЗаявкаЗапасы.Номенклатура.Родитель КАК НоменклатураРодитель,
	|		КпкЗаявкаЗапасы.Номенклатура.КД_Группа КАК НоменклатураКД_Группа
	|	ИЗ
	|		Документ.КпкЗаявка.Запасы КАК КпкЗаявкаЗапасы
	|	ГДЕ
	|		КпкЗаявкаЗапасы.Ссылка = &Ссылка
	|		И КпкЗаявкаЗапасы.Количество <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказПокупателяЗапасы.Номенклатура,
	|		ЗаказПокупателяЗапасы.Количество,
	|		ЗаказПокупателяЗапасы.Номенклатура.Родитель,
	|		ЗаказПокупателяЗапасы.Номенклатура.КД_Группа
	|	ИЗ
	|		Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|	ГДЕ
	|		ЗаказПокупателяЗапасы.Ссылка = &Ссылка
	|		И ЗаказПокупателяЗапасы.Количество <> 0) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.НоменклатураРодитель,
	|	ВложенныйЗапрос.НоменклатураКД_Группа
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.НоменклатураКД_Группа.Наименование,
	|	ВложенныйЗапрос.НоменклатураРодитель.Наименование,
	|	ВложенныйЗапрос.Номенклатура.Наименование";
	
	#КонецОбласти 
	 
	запрос.УстановитьПараметр("Ссылка", ДокОсн);
	
	выборка = запрос.Выполнить().Выбрать();
	Пока выборка.Следующий() Цикл
		
		Если выборка.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;
		
		новаяСтрока = Запасы.Добавить();
		
		новаяСтрока.Номенклатура 		=  выборка.Номенклатура;
		новаяСтрока.ЕдиницаИзмерения 	= новаяСтрока.Номенклатура.ЕдиницаИзмерения;
		новаяСтрока.СтруктурнаяЕдиница 	= новаяСтрока.Номенклатура.Родитель.Склад;
		
		новаяСтрока.КоличествоЗаказано 	= выборка.Количество;
		
		
		
		структураПараметров = Новый Структура("Номенклатура, ТипЦен, Подразделение, ДатаСреза, Контрагент", новаяСтрока.Номенклатура, ТипЦен, Подразделение, Дата, Контрагент);
		
		новаяСтрока.ПроцентСкидкиНаВес 	= ЦенообразованиеСервер.ВернутьСкидкуНаВес(структураПараметров);
		новаяСтрока.Цена 				= ЦенообразованиеСервер.ВернутьЦенуНоменклатуры(структураПараметров);
		
		структураДанныеПроверкиЗапретаСкидки.Номенклатура = новаяСтрока.Номенклатура;
		
		// проверим запрет скидки))
		Если ЦенообразованиеСервер.ПроверитьЗапретСкидкиПоНоменклатуре(структураДанныеПроверкиЗапретаСкидки) Тогда
			новаяСтрока.ПроцентСкидки = 0;
		Иначе
			Если ЦенообразованиеСервер.ИспользоватьЦеновыеГруппы(Подразделение) Тогда
				новаяСтрока.ПроцентСкидки = cоответствиеСкидок.Получить(СокрЛП(новаяСтрока.Номенклатура.Родитель.Код) +" / "+СокрЛП(новаяСтрока.Номенклатура.ЦеноваяГруппа.Код))
			Иначе
				новаяСтрока.ПроцентСкидки = cоответствиеСкидок.Получить(СокрЛП(новаяСтрока.Номенклатура.Родитель.Код) +" / "+СокрЛП(новаяСтрока.ЦеновыеГруппы.ПустаяСсылка().Код));
			КонецЕсли;
			
		КонецЕсли;

		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииВозвратаОтПокупателя(Знач данныеЗаполнения)
	
	// Заполнение реквизитов документа.
	ЗаполнениеОбъектовСервер.ЗаполнитьРеквизитыДокументаПриВводеНаОсновании(ЭтотОбъект, данныеЗаполнения, "Контрагент, ТипЦен");
	
	строкаУсловийПоставки = данныеЗаполнения.Контрагент.Менеджеры.Найти(Менеджер, "Менеджер");
	Если Не СтрокаУсловийПоставки = Неопределено Тогда
		ТипЦен = СтрокаУсловийПоставки.ТипЦен;
	КонецЕсли;
	
	cоответствиеСкидок = ЦенообразованиеСервер.ВернутьАвтоматическиеСкидки(Новый Структура("Контрагент, Подразделение, ДатаСреза", Контрагент, Подразделение, Дата));
	
	
	Для Каждого строкаСостава Из документОснование.Запасы Цикл
		
		Если строкаСостава.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;
		
		новаяСтрока = Запасы.Добавить();
		
		новаяСтрока.Номенклатура 		=  СтрокаСостава.Номенклатура;
		новаяСтрока.ЕдиницаИзмерения 	= НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
		новаяСтрока.СтруктурнаяЕдиница 	= НоваяСтрока.Номенклатура.Родитель.Склад;
		
		новаяСтрока.КоличествоЗаказано 	= строкаСостава.Количество;
		новаяСтрока.Количество 			= строкаСостава.Количество;
		новаяСтрока.КоличествоОтгружено	= строкаСостава.Количество;
		
		структураПараметров = Новый Структура("Номенклатура, ТипЦен, Подразделение, ДатаСреза, Контрагент", новаяСтрока.Номенклатура, ТипЦен, Подразделение, Дата, Контрагент);
		
		новаяСтрока.ПроцентСкидкиНаВес 	= ЦенообразованиеСервер.ВернутьСкидкуНаВес(структураПараметров);
		новаяСтрока.Цена 				= ЦенообразованиеСервер.ВернутьЦенуНоменклатуры(структураПараметров);
		
		новаяСтрока.ПроцентСкидки 		= cоответствиеСкидок.Получить(СокрЛП(строкаСостава.Номенклатура.Родитель.Код) +" / "+СокрЛП(Справочники.ЦеновыеГруппы.ПустаяСсылка().Код));
		
		новаяСтрока.СуммаБезСкидки = новаяСтрока.Количество * новаяСтрока.Цена;
		новаяСтрока.Скидка 		= новаяСтрока.СуммаБезСкидки * новаяСтрока.ПроцентСкидки/ 100;
		новаяСтрока.Сумма 			= новаяСтрока.СуммаБезСкидки - новаяСтрока.Скидка;
		
		
		суммаБезНДС = 100 * новаяСтрока.СуммаБезСкидки / (100 + 20);
		
		новаяСтрока.СуммаНДС = новаяСтрока.СуммаБезСкидки - суммаБезНДС;
			
		
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти