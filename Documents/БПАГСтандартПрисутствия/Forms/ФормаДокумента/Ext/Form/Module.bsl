
#Область ДополнительныеПроцедурыИФункции

// Процедура - Выполнить заполнение рейтинга
//
// Параметры:
//  структураПараметров	 - 	 -
//		тзИсходнаяТаблица
//		инкрементныйСчетчик
//		расчетПоВидуПродукта
//		полеИтогов
//		полеРейтинга
//		полеРасчетногоРейтинга
//		полеНакопления
//
&НаСервере
Процедура ВыполнитьЗаполнениеРейтинга(структураПараметров)
	
	значениеПорогаДля_А = 55;
	значениеПорогаДля_С = 80;
	
	тзИсходнаяТаблица 		= структураПараметров.тзИсходнаяТаблица;
	инкрементныйСчетчик 	= структураПараметров.инкрементныйСчетчик;
	расчетПоВидуПродукта 	= структураПараметров.расчетПоВидуПродукта;
	полеИтогов				= структураПараметров.полеИтогов;
	полеРейтинга 			= структураПараметров.полеРейтинга;
	полеРасчетногоРейтинга 	= структураПараметров.полеРасчетногоРейтинга;
	полеНакопления			= структураПараметров.полеНакопления;
	
	тзИсходнаяТаблица.Сортировать(?(расчетПоВидуПродукта,"ВидПродукта,","") + полеНакопления+" Убыв");
	
	текущийВидПродукта = "";
	СуммаСНакоплением = 0;
	этоПервыйВГруппе = Истина;
	
	Для Каждого СтрокаТаблицы Из тзИсходнаяТаблица Цикл
		
		Если расчетПоВидуПродукта И Не (текущийВидПродукта = СтрокаТаблицы.ВидПродукта) И Не (текущийВидПродукта = "") Тогда 
			СуммаСНакоплением = 0;
			этоПервыйВГруппе = Истина;
		КонецЕсли;
		
		Если инкрементныйСчетчик Тогда
			СуммаСНакоплением = СуммаСНакоплением + 1;
		Иначе
			СуммаСНакоплением = СуммаСНакоплением + СтрокаТаблицы[полеНакопления];
		КонецЕсли;
		
		Если СтрокаТаблицы[полеИтогов] = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если этоПервыйВГруппе Или СуммаСНакоплением / СтрокаТаблицы[полеИтогов] * 100 <= значениеПорогаДля_А Тогда
			значениеРейтинга = "A";
		ИначеЕсли СуммаСНакоплением / СтрокаТаблицы[полеИтогов] * 100 > значениеПорогаДля_С Тогда
			значениеРейтинга = "C";
		Иначе
			значениеРейтинга = "B";
		КонецЕсли;
		
		Если Не полеРейтинга = "" Тогда
			СтрокаТаблицы[полеРейтинга] = значениеРейтинга;
		КонецЕсли;
		
		Если Не полеРасчетногоРейтинга = "" Тогда
			СтрокаТаблицы[полеРасчетногоРейтинга] = СокрЛП(СтрокаТаблицы[полеРасчетногоРейтинга]) + значениеРейтинга;
		КонецЕсли;
		
		текущийВидПродукта = СтрокаТаблицы.ВидПродукта;
		этоПервыйВГруппе = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры	// ВыполнитьЗаполнениеРейтинга()

&НаСервере
Процедура ВыполнитьЗаполнениеИсходнойТаблицыНаСервере(структураПараметров)
	
	запрос = Новый Запрос;
	запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	#Область ТекстЗапроса
	//	4 - "Исходная таблица"
	//  5 - "Приоритеты"
	//	6 - "ПриоритетыПоКатегориям"
	//	7 - "ИтогиПоВидамПродукта"
	запрос.Текст = 
	"ВЫБРАТЬ
	|	ПродажиОбороты.Номенклатура,
	|	СУММА(ПродажиОбороты.ПродСтоимостьОборот) КАК СуммаРеализации,
	|	СУММА(ПродажиОбороты.КоличествоОборот * ПродажиОбороты.Номенклатура.Вес) КАК Вес,
	|	СУММА(ПродажиОбороты.ПродСтоимостьОборот - ПродажиОбороты.ДоходОборот) КАК Себестоимость,
	|	СУММА(ПродажиОбороты.ДоходОборот) КАК Доход,
	|	СРЕДНЕЕ(0) КАК Рентабельность,
	|	ПродажиОбороты.Номенклатура.КД_Вид КАК ВидПродукта,
	|	ПродажиОбороты.Номенклатура.КД_Группа КАК ГруппаПродукта,
	|	ВЫБОР
	|		КОГДА ПродажиОбороты.Контрагент.КД_ГоловнойКонтрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ПродажиОбороты.Контрагент
	|		ИНАЧЕ ПродажиОбороты.Контрагент.КД_ГоловнойКонтрагент
	|	КОНЕЦ КАК ГлавнаяТТ
	|ПОМЕСТИТЬ ОбщаяВыборка
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(
	|			&Дата1,
	|			&Дата2,
	|			,
	|			Номенклатура.КД_Группа = &ГруппаПродукта
	|				И ВЫБОР
	|					КОГДА &ЕстьОтборПоПодразделению
	|						ТОГДА Подразделение В (&СписокПодразделений)
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|				И ВЫБОР
	|					КОГДА &ЕстьОтборПоКатегорийнойГруппе
	|						ТОГДА Контрагент.КД_Категория.Родитель = &КатегорийнаяГруппа
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|				И ВЫБОР
	|					КОГДА &ЕстьОтборПоНоменклатуре
	|						ТОГДА Номенклатура В ИЕРАРХИИ (&СписокНоменклатуры)
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) КАК ПродажиОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ПродажиОбороты.Номенклатура,
	|	ПродажиОбороты.Номенклатура.КД_Вид,
	|	ВЫБОР
	|		КОГДА ПродажиОбороты.Контрагент.КД_ГоловнойКонтрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ПродажиОбороты.Контрагент
	|		ИНАЧЕ ПродажиОбороты.Контрагент.КД_ГоловнойКонтрагент
	|	КОНЕЦ,
	|	ПродажиОбороты.Номенклатура.КД_Группа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбщаяВыборка.Номенклатура,
	|	СУММА(ОбщаяВыборка.СуммаРеализации) КАК СуммаРеализации,
	|	СУММА(ОбщаяВыборка.Вес) КАК Вес,
	|	СУММА(ОбщаяВыборка.Себестоимость) КАК Себестоимость,
	|	СУММА(ОбщаяВыборка.Доход) КАК Доход,
	|	СУММА(ОбщаяВыборка.Рентабельность) КАК Рентабельность,
	|	ОбщаяВыборка.ВидПродукта,
	|	ОбщаяВыборка.ГруппаПродукта,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОбщаяВыборка.ГлавнаяТТ) КАК КолвоАктивныхТТПоПродукту
	|ПОМЕСТИТЬ ИтогиПоНоменклатуре
	|ИЗ
	|	ОбщаяВыборка КАК ОбщаяВыборка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбщаяВыборка.Номенклатура,
	|	ОбщаяВыборка.ВидПродукта,
	|	ОбщаяВыборка.ГруппаПродукта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ОбщаяВыборка.СуммаРеализации) КАК СуммаРеализацииПоГруппе,
	|	СУММА(ОбщаяВыборка.Вес) КАК ВесПоГруппе,
	|	СУММА(ОбщаяВыборка.Себестоимость) КАК СебестоимостьПоГруппе,
	|	СУММА(ОбщаяВыборка.Доход) КАК ДоходПоГруппе,
	|	СУММА(ОбщаяВыборка.Рентабельность) КАК РентабельностьПоГруппе,
	|	ОбщаяВыборка.ГруппаПродукта,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОбщаяВыборка.ГлавнаяТТ) КАК КолвоАктивныхТТПоГруппеПродукта,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОбщаяВыборка.Номенклатура) КАК КолвоSKUПоГруппеПродукта
	|ПОМЕСТИТЬ ИтогиПоГруппеПродукта
	|ИЗ
	|	ОбщаяВыборка КАК ОбщаяВыборка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбщаяВыборка.ГруппаПродукта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ОбщаяВыборка.СуммаРеализации) КАК СуммаРеализацииПоВиду,
	|	СУММА(ОбщаяВыборка.Вес) КАК ВесПоВиду,
	|	СУММА(ОбщаяВыборка.Себестоимость) КАК СебестоимостьПоВиду,
	|	СУММА(ОбщаяВыборка.Доход) КАК ДоходПоВиду,
	|	СУММА(ОбщаяВыборка.Рентабельность) КАК РентабельностьПоВиду,
	|	ОбщаяВыборка.ВидПродукта,
	|	ОбщаяВыборка.ГруппаПродукта,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОбщаяВыборка.ГлавнаяТТ) КАК КолвоАктивныхТТПоВидуПродукта,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОбщаяВыборка.Номенклатура) КАК КолвоSKUПоВидуПродукта
	|ПОМЕСТИТЬ ИтогиПоВидуПродукта
	|ИЗ
	|	ОбщаяВыборка КАК ОбщаяВыборка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбщаяВыборка.ВидПродукта,
	|	ОбщаяВыборка.ГруппаПродукта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//	4 - "Исходная таблица"
	|ВЫБРАТЬ
	|	ИтогиПоНоменклатуре.Номенклатура,
	|	ИтогиПоНоменклатуре.СуммаРеализации,
	|	ИтогиПоНоменклатуре.Вес,
	|	ИтогиПоНоменклатуре.Себестоимость,
	|	ИтогиПоНоменклатуре.Доход,
	|	ВЫБОР
	|		КОГДА ИтогиПоНоменклатуре.СуммаРеализации = 0
	|			ТОГДА 0
	|		ИНАЧЕ ИтогиПоНоменклатуре.Доход / ИтогиПоНоменклатуре.СуммаРеализации * 100
	|	КОНЕЦ КАК Рентабельность,
	|	ИтогиПоНоменклатуре.ВидПродукта,
	|	ИтогиПоНоменклатуре.ГруппаПродукта,
	|	ИтогиПоНоменклатуре.КолвоАктивныхТТПоПродукту,
	|	ИтогиПоГруппеПродукта.КолвоАктивныхТТПоГруппеПродукта КАК КолвоАктивныхТТВсего,
	|	ИтогиПоВидуПродукта.СуммаРеализацииПоВиду,
	|	ИтогиПоВидуПродукта.ВесПоВиду,
	|	ИтогиПоВидуПродукта.ДоходПоВиду,
	|	ИтогиПоВидуПродукта.КолвоSKUПоВидуПродукта КАК КолвоSKUПоВиду,
	|	ВЫБОР
	|		КОГДА ИтогиПоНоменклатуре.КолвоАктивныхТТПоПродукту = 0
	|			ТОГДА 0
	|		ИНАЧЕ ИтогиПоНоменклатуре.СуммаРеализации / ИтогиПоНоменклатуре.КолвоАктивныхТТПоПродукту
	|	КОНЕЦ КАК СредняяСуммаРеализацииНаТТ,
	|	ВЫБОР
	|		КОГДА ИтогиПоГруппеПродукта.КолвоАктивныхТТПоГруппеПродукта = 0
	|			ТОГДА 0
	|		ИНАЧЕ ИтогиПоНоменклатуре.КолвоАктивныхТТПоПродукту / ИтогиПоГруппеПродукта.КолвоАктивныхТТПоГруппеПродукта * 100
	|	КОНЕЦ КАК ОхватТТ_SKU,
	|	""B"" КАК РейтингПродажНаОднуТТ,
	|	""B"" КАК РейтингДоходности,
	|	""B"" КАК РейтингРеализации,
	|	""B"" КАК РейтингВесовой,
	|	""    "" КАК РейтингРасчетный,
	|	""    "" КАК РейтингОбщий,
	|	ИтогиПоГруппеПродукта.СуммаРеализацииПоГруппе,
	|	ИтогиПоГруппеПродукта.ДоходПоГруппе,
	|	ИтогиПоГруппеПродукта.КолвоSKUПоГруппеПродукта,
	|	ВЫБОР
	|		КОГДА ИтогиПоНоменклатуре.КолвоАктивныхТТПоПродукту = 0
	|			ТОГДА 0
	|		ИНАЧЕ ИтогиПоНоменклатуре.Доход / ИтогиПоНоменклатуре.КолвоАктивныхТТПоПродукту
	|	КОНЕЦ КАК СредняяСуммаДоходаНаТТ
	|ИЗ
	|	ИтогиПоНоменклатуре КАК ИтогиПоНоменклатуре
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИтогиПоГруппеПродукта КАК ИтогиПоГруппеПродукта
	|		ПО ИтогиПоНоменклатуре.ГруппаПродукта = ИтогиПоГруппеПродукта.ГруппаПродукта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИтогиПоВидуПродукта КАК ИтогиПоВидуПродукта
	|		ПО ИтогиПоНоменклатуре.ВидПродукта = ИтогиПоВидуПродукта.ВидПродукта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//  5 - "Приоритеты"
	|ВЫБРАТЬ
	|	КД_КатегорииТТПриоритеты.Приоритет,
	|	ЕСТЬNULL(КД_КатегоризацияТорговыхТочекСрезПоследних.КоличествоSKU, 0) КАК МаксSKU,
	|	ЕСТЬNULL(КД_ПланыДолиВитриныСрезПоследних.КоличествоSKU, 0) КАК ПланSKU
	|ИЗ
	|	Справочник.КД_КатегорииТТ.Приоритеты КАК КД_КатегорииТТПриоритеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КД_КатегоризацияТорговыхТочек.СрезПоследних(
	|				&ДатаСреза,
	|				Подразделение = &ПодразделениеСтандарта
	|					И ГруппаПродукции = &ГруппаПродукта) КАК КД_КатегоризацияТорговыхТочекСрезПоследних
	|		ПО КД_КатегорииТТПриоритеты.SKUмакс = КД_КатегоризацияТорговыхТочекСрезПоследних.КатегорияТТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КД_ПланыДолиВитрины.СрезПоследних(
	|				&ДатаСреза,
	|				Подразделение = &ПодразделениеСтандарта
	|					И ГруппаПродукции = &ГруппаПродукта) КАК КД_ПланыДолиВитриныСрезПоследних
	|		ПО КД_КатегорииТТПриоритеты.SKUмакс = КД_ПланыДолиВитриныСрезПоследних.КатегорияТТ
	|ГДЕ
	|	КД_КатегорииТТПриоритеты.Ссылка = &КатегорийнаяГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	КД_КатегорииТТПриоритеты.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//	6 - "ПриоритетыПоКатегориям"
	|ВЫБРАТЬ
	|	КД_КатегорииТТПриоритетыПоКатегориям.КатегорияТТ,
	|	КД_КатегорииТТПриоритетыПоКатегориям.Приоритет,
	|	КД_КатегорииТТПриоритетыПоКатегориям.ТипПриоритета,
	|	КД_ПланыДолиВитриныСрезПоследних.КоличествоSKU КАК ПланДолиВитрины,
	|	ЕСТЬNULL(КД_КатегоризацияТорговыхТочекСрезПоследних.КоличествоSKU, 0) КАК МаксSKU
	|ИЗ
	|	Справочник.КД_КатегорииТТ.ПриоритетыПоКатегориям КАК КД_КатегорииТТПриоритетыПоКатегориям
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КД_ПланыДолиВитрины.СрезПоследних(
	|				&ДатаСреза,
	|				Подразделение = &ПодразделениеСтандарта
	|					И ГруппаПродукции = &ГруппаПродукта) КАК КД_ПланыДолиВитриныСрезПоследних
	|		ПО КД_КатегорииТТПриоритетыПоКатегориям.КатегорияТТ = КД_ПланыДолиВитриныСрезПоследних.КатегорияТТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КД_КатегоризацияТорговыхТочек.СрезПоследних(
	|				&ДатаСреза,
	|				Подразделение = &ПодразделениеСтандарта
	|					И ГруппаПродукции = &ГруппаПродукта) КАК КД_КатегоризацияТорговыхТочекСрезПоследних
	|		ПО КД_КатегорииТТПриоритетыПоКатегориям.КатегорияТТ = КД_КатегоризацияТорговыхТочекСрезПоследних.КатегорияТТ
	|ГДЕ
	|	КД_КатегорииТТПриоритетыПоКатегориям.Ссылка = &КатегорийнаяГруппаСтандарта
	|	И КД_КатегорииТТПриоритетыПоКатегориям.ТипПриоритета <> ЗНАЧЕНИЕ(Перечисление.КД_ТипыПриоритетовПродукта.НеРекомендуемый)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//	7 - "ИтогиПоВидамПродукта"
	|ВЫБРАТЬ
	|	ИтогиПоВидуПродукта.ВидПродукта,
	|	СУММА(0) КАК КолвоSKU
	|ИЗ
	|	ИтогиПоВидуПродукта КАК ИтогиПоВидуПродукта
	|
	|СГРУППИРОВАТЬ ПО
	|	ИтогиПоВидуПродукта.ВидПродукта";
		
	#КонецОбласти 

	запрос.УстановитьПараметр("Дата1", структураПараметров.ПериодЗаполнения.ДатаНачала);
	запрос.УстановитьПараметр("Дата2", структураПараметров.ПериодЗаполнения.ДатаОкончания);
	запрос.УстановитьПараметр("ГруппаПродукта", Объект.ГруппаПродукта);
	запрос.УстановитьПараметр("ПодразделениеСтандарта", Объект.Подразделение);
	запрос.УстановитьПараметр("КатегорийнаяГруппаСтандарта", Объект.КатегорийнаяГруппа);
	запрос.УстановитьПараметр("ДатаСреза", Объект.Дата);
	
	запрос.УстановитьПараметр("ЕстьОтборПоПодразделению", ?(структураПараметров.СписокПодразделений.Выгрузить().Количество()=0, Ложь, Истина));
	запрос.УстановитьПараметр("СписокПодразделений", структураПараметров.СписокПодразделений.Выгрузить().ВыгрузитьКолонку("Подразделение"));
	
	запрос.УстановитьПараметр("ЕстьОтборПоНоменклатуре", ?(структураПараметров.СписокНоменклатуры.Выгрузить().Количество()=0, Ложь, Истина));
	запрос.УстановитьПараметр("СписокНоменклатуры", структураПараметров.СписокНоменклатуры.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	
	запрос.УстановитьПараметр("ЕстьОтборПоКатегорийнойГруппе", Не структураПараметров.КатегорийнаяГруппа.Пустая());
	запрос.УстановитьПараметр("КатегорийнаяГруппа", структураПараметров.КатегорийнаяГруппа);
	
	результатЗапроса = запрос.ВыполнитьПакет();
	
	#Область ПолучениеВременныхТаблиц
	запрос.Текст = "ВЫБРАТЬ * ИЗ ОбщаяВыборка";
	запрос.Текст = "ВЫБРАТЬ * ИЗ ИтогиПоНоменклатуре";	
	запрос.Текст = "ВЫБРАТЬ * ИЗ ИтогиПоВидуПродукта";
	запрос.Текст = "ВЫБРАТЬ * ИЗ ИтогиПоГруппеПродукта";
	#КонецОбласти 
	
	тзИсходнаяТаблица = результатЗапроса[4].Выгрузить();
	
	#Область ЗаполнениеРейтинговПродукта
	
	тзИсходнаяТаблица.Индексы.Добавить("СредняяСуммаРеализацииНаТТ,Доход,СредняяСуммаДоходаНаТТ,СуммаРеализации,Вес,РейтингРасчетный,РейтингОбщий");
	
	// заполним "рейтинг продаж на одну ТТ"
	структураПараметров = Новый Структура("тзИсходнаяТаблица, инкрементныйСчетчик, расчетПоВидуПродукта, полеНакопления, полеИтогов, полеРейтинга, полеРасчетногоРейтинга",
		тзИсходнаяТаблица,
		Истина,
		Истина,
		"СредняяСуммаРеализацииНаТТ",
		"КолвоSKUПоВиду",
		"РейтингПродажНаОднуТТ",
		"РейтингРасчетный");
	
	ВыполнитьЗаполнениеРейтинга(структураПараметров);
	
	структураПараметров = Новый Структура("тзИсходнаяТаблица, инкрементныйСчетчик, расчетПоВидуПродукта, полеНакопления, полеИтогов, полеРейтинга, полеРасчетногоРейтинга",
		тзИсходнаяТаблица,
		Истина,
		Ложь,
		"СредняяСуммаРеализацииНаТТ",
		"КолвоSKUПоГруппеПродукта",
		"",
		"РейтингОбщий");
	
	ВыполнитьЗаполнениеРейтинга(структураПараметров);
	
	// заполним "рейтинг доходности"
	структураПараметров = Новый Структура("тзИсходнаяТаблица, инкрементныйСчетчик, расчетПоВидуПродукта, полеНакопления, полеИтогов, полеРейтинга, полеРасчетногоРейтинга",
		тзИсходнаяТаблица,
		Ложь,
		Истина,
		"Доход",
		"ДоходПоВиду",
		"РейтингДоходности",
		"РейтингРасчетный");
	
	ВыполнитьЗаполнениеРейтинга(структураПараметров);
	
	структураПараметров = Новый Структура("тзИсходнаяТаблица, инкрементныйСчетчик, расчетПоВидуПродукта, полеНакопления, полеИтогов, полеРейтинга, полеРасчетногоРейтинга",
		тзИсходнаяТаблица,
		Ложь,
		Ложь,
		"Доход",
		"ДоходПоГруппе",
		"",
		"РейтингОбщий");
	
	ВыполнитьЗаполнениеРейтинга(структураПараметров);
	
	// заполним "рейтинг реализации"
	структураПараметров = Новый Структура("тзИсходнаяТаблица, инкрементныйСчетчик, расчетПоВидуПродукта, полеНакопления, полеИтогов, полеРейтинга, полеРасчетногоРейтинга",
		тзИсходнаяТаблица,
		Ложь,
		Истина,
		"СуммаРеализации",
		"СуммаРеализацииПоВиду",
		"РейтингРеализации",
		"РейтингРасчетный");
	
	ВыполнитьЗаполнениеРейтинга(структураПараметров);
	
	структураПараметров = Новый Структура("тзИсходнаяТаблица, инкрементныйСчетчик, расчетПоВидуПродукта, полеНакопления, полеИтогов, полеРейтинга, полеРасчетногоРейтинга",
		тзИсходнаяТаблица,
		Ложь,
		Ложь,
		"СуммаРеализации",
		"СуммаРеализацииПоГруппе",
		"",
		"РейтингОбщий");
		
	ВыполнитьЗаполнениеРейтинга(структураПараметров);
	
	// заполним "рейтинг по весу"
	структураПараметров = Новый Структура("тзИсходнаяТаблица, инкрементныйСчетчик, расчетПоВидуПродукта, полеНакопления, полеИтогов, полеРейтинга, полеРасчетногоРейтинга",
		тзИсходнаяТаблица,
		Ложь,
		Истина,
		"Вес",
		"ВесПоВиду",
		"РейтингВесовой",
		"");
	
	ВыполнитьЗаполнениеРейтинга(структураПараметров);
	
	тзИсходнаяТаблица.Сортировать("РейтингОбщий");
	
	#КонецОбласти 
	
	Объект.ИсходнаяТаблица.Загрузить(тзИсходнаяТаблица);
	
	Объект.Приоритеты.Очистить();
	
	СуммаСНакоплением_КолвоSKU = 0;
	
	//выборкаПриоритеты = результатЗапроса[5].Выбрать();
	//Пока выборкаПриоритеты.Следующий() Цикл
	//	
	//	новаяСтрока = Объект.Приоритеты.Добавить();
	//	новаяСтрока.Приоритет = выборкаПриоритеты.Приоритет;
	//	
	//	Если Не новаяСтрока.Приоритет = Справочники.КД_ПриоритетыПродукта.Доп Тогда
	//		новаяСтрока.КолвоSKU = (выборкаПриоритеты.МаксSKU * выборкаПриоритеты.ПланSKU/100) - СуммаСНакоплением_КолвоSKU;
	//	Иначе
	//		новаяСтрока.КолвоSKU = (выборкаПриоритеты.МаксSKU * 1.2) - СуммаСНакоплением_КолвоSKU;
	//	КонецЕсли;
	//	
	//	СуммаСНакоплением_КолвоSKU = СуммаСНакоплением_КолвоSKU + новаяСтрока.КолвоSKU;
	//	
	//КонецЦикла;
	//
	//
	//Объект.ПриоритетыПоКатегориям.Загрузить(результатЗапроса[6].Выгрузить());
	Объект.ИтогиПоВидамПродукта.Загрузить(результатЗапроса[7].Выгрузить());
	
	ЗаполнитьСписокПриоритетовНаСервере();
	
КонецПроцедуры	// ВыполнитьЗаполнениеИсходнойТаблицыНаСервере()  выгрузить

&НаСервере
Процедура ЗаполнитьСписокПриоритетовНаСервере()
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	
	запрос.Текст = 
	"ВЫБРАТЬ
	|	КД_КатегорииТТПриоритеты.Приоритет
	|ИЗ
	|	Справочник.КД_КатегорииТТ.Приоритеты КАК КД_КатегорииТТПриоритеты
	|ГДЕ
	|	КД_КатегорииТТПриоритеты.Ссылка = &КатегорийнаяГруппаСтандарта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.КД_ПриоритетыПродукта.Вывод)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КД_КатегорииТТПриоритеты.Приоритет,
	|	ЕСТЬNULL(КД_КатегоризацияТорговыхТочекСрезПоследних.КоличествоSKU, 0) КАК МаксSKU,
	|	ЕСТЬNULL(КД_ПланыДолиВитриныСрезПоследних.КоличествоSKU, 0) КАК ПланSKU
	|ИЗ
	|	Справочник.КД_КатегорииТТ.Приоритеты КАК КД_КатегорииТТПриоритеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КД_КатегоризацияТорговыхТочек.СрезПоследних(
	|				&ДатаСреза,
	|				Подразделение = &ПодразделениеСтандарта
	|					И ГруппаПродукции = &ГруппаПродукта) КАК КД_КатегоризацияТорговыхТочекСрезПоследних
	|		ПО КД_КатегорииТТПриоритеты.SKUмакс = КД_КатегоризацияТорговыхТочекСрезПоследних.КатегорияТТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КД_ПланыДолиВитрины.СрезПоследних(
	|				&ДатаСреза,
	|				Подразделение = &ПодразделениеСтандарта
	|					И ГруппаПродукции = &ГруппаПродукта) КАК КД_ПланыДолиВитриныСрезПоследних
	|		ПО КД_КатегорииТТПриоритеты.SKUмакс = КД_ПланыДолиВитриныСрезПоследних.КатегорияТТ
	|ГДЕ
	|	КД_КатегорииТТПриоритеты.Ссылка = &КатегорийнаяГруппаСтандарта
	|
	|УПОРЯДОЧИТЬ ПО
	|	КД_КатегорииТТПриоритеты.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КД_КатегорииТТПриоритетыПоКатегориям.КатегорияТТ,
	|	КД_КатегорииТТПриоритетыПоКатегориям.Приоритет,
	|	КД_КатегорииТТПриоритетыПоКатегориям.ТипПриоритета,
	|	КД_ПланыДолиВитриныСрезПоследних.КоличествоSKU КАК ПланДолиВитрины,
	|	ЕСТЬNULL(КД_КатегоризацияТорговыхТочекСрезПоследних.КоличествоSKU, 0) КАК МаксSKU
	|ИЗ
	|	Справочник.КД_КатегорииТТ.ПриоритетыПоКатегориям КАК КД_КатегорииТТПриоритетыПоКатегориям
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КД_ПланыДолиВитрины.СрезПоследних(
	|				&ДатаСреза,
	|				Подразделение = &ПодразделениеСтандарта
	|					И ГруппаПродукции = &ГруппаПродукта) КАК КД_ПланыДолиВитриныСрезПоследних
	|		ПО КД_КатегорииТТПриоритетыПоКатегориям.КатегорияТТ = КД_ПланыДолиВитриныСрезПоследних.КатегорияТТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КД_КатегоризацияТорговыхТочек.СрезПоследних(
	|				&ДатаСреза,
	|				Подразделение = &ПодразделениеСтандарта
	|					И ГруппаПродукции = &ГруппаПродукта) КАК КД_КатегоризацияТорговыхТочекСрезПоследних
	|		ПО КД_КатегорииТТПриоритетыПоКатегориям.КатегорияТТ = КД_КатегоризацияТорговыхТочекСрезПоследних.КатегорияТТ
	|ГДЕ
	|	КД_КатегорииТТПриоритетыПоКатегориям.Ссылка = &КатегорийнаяГруппаСтандарта
	|	И КД_КатегорииТТПриоритетыПоКатегориям.ТипПриоритета <> ЗНАЧЕНИЕ(Перечисление.КД_ТипыПриоритетовПродукта.НеРекомендуемый)";
	
	#КонецОбласти
	
	запрос.УстановитьПараметр("КатегорийнаяГруппаСтандарта", Объект.КатегорийнаяГруппа);
	
	запрос.УстановитьПараметр("ДатаСреза", Объект.Дата);
	запрос.УстановитьПараметр("ПодразделениеСтандарта", Объект.Подразделение);
	запрос.УстановитьПараметр("ГруппаПродукта", Объект.КатегорийнаяГруппа.ГруппаПродукта);
	
	//результатЗапроса = запрос.Выполнить();
	результатЗапроса = запрос.ВыполнитьПакет();
	//Элементы.ИсходнаяТаблица1Приоритет.СписокВыбора.ЗагрузитьЗначения(результатЗапроса.Выгрузить().ВыгрузитьКолонку(0));
	Элементы.ИсходнаяТаблица1Приоритет.СписокВыбора.ЗагрузитьЗначения(результатЗапроса[0].Выгрузить().ВыгрузитьКолонку(0));
	
	Элементы.ИсходнаяТаблица.ФиксацияСлева = 4;
	
	Объект.Приоритеты.Очистить();
	
	СуммаСНакоплением_КолвоSKU = 0;
	
	выборкаПриоритеты = результатЗапроса[1].Выбрать();
	Пока выборкаПриоритеты.Следующий() Цикл
		
		новаяСтрока = Объект.Приоритеты.Добавить();
		новаяСтрока.Приоритет = выборкаПриоритеты.Приоритет;
		
		Если Не новаяСтрока.Приоритет = Справочники.КД_ПриоритетыПродукта.Доп Тогда
			новаяСтрока.КолвоSKU = (выборкаПриоритеты.МаксSKU * выборкаПриоритеты.ПланSKU/100) - СуммаСНакоплением_КолвоSKU;
		Иначе
			новаяСтрока.КолвоSKU = (выборкаПриоритеты.МаксSKU * 1.2) - СуммаСНакоплением_КолвоSKU;
		КонецЕсли;
		
		СуммаСНакоплением_КолвоSKU = СуммаСНакоплением_КолвоSKU + новаяСтрока.КолвоSKU;
		
	КонецЦикла;
	
	Объект.ПриоритетыПоКатегориям.Загрузить(результатЗапроса[2].Выгрузить());
	
КонецПроцедуры	// ЗаполнитьСписокПриоритетовНаСервере()

&НаСервере
Процедура ОбновитьИтогиПоВидамПродукта()
	
	запрос = Новый Запрос;
	запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	#Область ТекстЗапроса
	
	запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ИсходнаяТаблица.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ИсходнаяТаблица.ВидПродукта КАК Справочник.КД_ВидыНоменклатуры) КАК ВидПродукта,
	|	ВЫРАЗИТЬ(ИсходнаяТаблица.Приоритет КАК Справочник.КД_ПриоритетыПродукта) КАК Приоритет
	|ПОМЕСТИТЬ ВТ_ИсходнаяТаблица
	|ИЗ
	|	&ИсходнаяТаблица КАК ИсходнаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Приоритеты.Приоритет,
	|	Приоритеты.КолвоSKU
	|ПОМЕСТИТЬ ВТ_Приоритеты
	|ИЗ
	|	&Приоритеты КАК Приоритеты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриоритетыПоКатегориям.КатегорияТТ,
	|	ПриоритетыПоКатегориям.Приоритет
	|ПОМЕСТИТЬ ВТ_ПриоритетыПоКатегориям
	|ИЗ
	|	&ПриоритетыПоКатегориям КАК ПриоритетыПоКатегориям
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Приоритеты.Приоритет,
	|	ВТ_Приоритеты.КолвоSKU,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ИсходнаяТаблица.Номенклатура) КАК КолвоSKUУстановлено
	|ИЗ
	|	ВТ_Приоритеты КАК ВТ_Приоритеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсходнаяТаблица КАК ВТ_ИсходнаяТаблица
	|		ПО ВТ_Приоритеты.Приоритет = ВТ_ИсходнаяТаблица.Приоритет
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Приоритеты.Приоритет,
	|	ВТ_Приоритеты.КолвоSKU
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтогиПоВидамПродукта.ВидПродукта,
	|	СУММА(ИтогиПоВидамПродукта.КолвоSKU) КАК КолвоSKU
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_ИсходнаяТаблица.ВидПродукта КАК ВидПродукта,
	|		ВЫБОР
	|			КОГДА ВТ_ИсходнаяТаблица.Приоритет = ЗНАЧЕНИЕ(Справочник.КД_ПриоритетыПродукта.Вывод)
	|					ИЛИ ВТ_ИсходнаяТаблица.Приоритет = ЗНАЧЕНИЕ(Справочник.КД_ПриоритетыПродукта.ПустаяСсылка)
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК КолвоSKU
	|	ИЗ
	|		ВТ_ИсходнаяТаблица КАК ВТ_ИсходнаяТаблица) КАК ИтогиПоВидамПродукта
	|
	|СГРУППИРОВАТЬ ПО
	|	ИтогиПоВидамПродукта.ВидПродукта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.КатегорияТТ КАК КатегорияТТ,
	|	СУММА(ВложенныйЗапрос.УстановленоSKU) КАК УстановленоSKU,
	|	СРЕДНЕЕ(ВложенныйЗапрос1.МаксSKU) КАК МаксSKU,
	|	КД_КатегорииТТ.Наименование,
	|	ВложенныйЗапрос.ВидПродукта
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_ПриоритетыПоКатегориям.КатегорияТТ КАК КатегорияТТ,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ИсходнаяТаблица.Номенклатура) КАК УстановленоSKU,
	|		ВТ_ИсходнаяТаблица.ВидПродукта КАК ВидПродукта
	|	ИЗ
	|		ВТ_ИсходнаяТаблица КАК ВТ_ИсходнаяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ВТ_ПриоритетыПоКатегориям КАК ВТ_ПриоритетыПоКатегориям
	|		ПО
	|			ВТ_ПриоритетыПоКатегориям.Приоритет = ВТ_ИсходнаяТаблица.Приоритет
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТ_ПриоритетыПоКатегориям.КатегорияТТ,
	|		ВТ_ИсходнаяТаблица.ВидПродукта) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВТ_ПриоритетыПоКатегориям.КатегорияТТ КАК КатегорияТТ,
	|			СУММА(ВТ_Приоритеты.КолвоSKU) КАК МаксSKU
	|		ИЗ
	|			ВТ_ПриоритетыПоКатегориям КАК ВТ_ПриоритетыПоКатегориям
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приоритеты КАК ВТ_Приоритеты
	|				ПО ВТ_ПриоритетыПоКатегориям.Приоритет = ВТ_Приоритеты.Приоритет
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВТ_ПриоритетыПоКатегориям.КатегорияТТ) КАК ВложенныйЗапрос1
	|		ПО ВложенныйЗапрос.КатегорияТТ = ВложенныйЗапрос1.КатегорияТТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КД_КатегорииТТ КАК КД_КатегорииТТ
	|		ПО ВложенныйЗапрос.КатегорияТТ = КД_КатегорииТТ.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.КатегорияТТ,
	|	КД_КатегорииТТ.Наименование,
	|	ВложенныйЗапрос.ВидПродукта
	|
	|УПОРЯДОЧИТЬ ПО
	|	КД_КатегорииТТ.Наименование
	|ИТОГИ
	|	СУММА(УстановленоSKU),
	|	СРЕДНЕЕ(МаксSKU)
	|ПО
	|	КатегорияТТ";
		
	#КонецОбласти
	
	запрос.УстановитьПараметр("ИсходнаяТаблица", Объект.ИсходнаяТаблица.Выгрузить(,"Номенклатура, Приоритет, ВидПродукта"));
	запрос.УстановитьПараметр("Приоритеты", Объект.Приоритеты.Выгрузить());
	запрос.УстановитьПараметр("ПриоритетыПоКатегориям", Объект.ПриоритетыПоКатегориям.Выгрузить());
	запрос.УстановитьПараметр("ГруппаПродукта", Объект.ГруппаПродукта);
	
	результатЗапроса = запрос.ВыполнитьПакет();
	
	#Область ПолучениеВременныхТаблиц
	
	запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_ИсходнаяТаблица";
	
	#КонецОбласти
	
	ЗначениеВРеквизитФормы(результатЗапроса[5].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам), "ДеревоПриоритетыПоКатегориям");
	
	Объект.Приоритеты.Загрузить(результатЗапроса[3].Выгрузить());
	
	Объект.ИтогиПоВидамПродукта.Загрузить(результатЗапроса[4].Выгрузить());
	//выборкаПоВидамПродукта = результатЗапроса[4].Выбрать();
	//Пока выборкаПоВидамПродукта.Следующий() Цикл
	//	
	//	найденныеСтроки = Объект.ИтогиПоВидамПродукта.НайтиСтроки(Новый Структура("ВидПродукта", выборкаПоВидамПродукта.ВидПродукта));
	//	Если найденныеСтроки.Количество() > 0 Тогда
	//		найденныеСтроки[0].КолвоSKU = выборкаПоВидамПродукта.КолвоSKU;
	//	Иначе
	//		новаяСтрока = Объект.ИтогиПоВидамПродукта.Добавить();
	//		ЗаполнитьЗначенияСвойств(новаяСтрока, выборкаПоВидамПродукта); 
	//	КонецЕсли;
	//	
	//	
	//КонецЦикла;
	
	// обновим итоги в таблице "ИтогиПоГруппам"
	Если ЗначениеЗаполнено(ОтборВидПродукции) И Ложь Тогда
		
		найденныеСтроки = Объект.ИсходнаяТаблица.НайтиСтроки(Новый Структура("ВидПродукта", ОтборВидПродукции));
		
		колвоПоВидуПродукта = 0;
		Для Индекс = 1 По найденныеСтроки.Количество() Цикл
			найденнаяСтрока = найденныеСтроки[Индекс-1];
			Если (найденнаяСтрока.Приоритет.Пустая() Или найденнаяСтрока.Приоритет = Справочники.КД_ПриоритетыПродукта.Вывод) Тогда
				
				Продолжить;
			КонецЕсли;
			
			колвоПоВидуПродукта = колвоПоВидуПродукта + 1;
			
		КонецЦикла;
		
		найденныеСтроки = Объект.ИтогиПоВидамПродукта.НайтиСтроки(Новый Структура("ВидПродукта", ОтборВидПродукции));
		Если найденныеСтроки.Количество() > 0 Тогда
			найденныеСтроки[0].КолвоSKU = колвоПоВидуПродукта;
		КонецЕсли;

	КонецЕсли;
	
	// обновим итоги в таблица "Приоритеты"
	
	
	
КонецПроцедуры	// ОбновитьИтогиПоВидамПродукта()

&НаСервере
Процедура ЗаполнитьСтандартНаСервере()
	
	запрос = Новый Запрос;
	запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	#Область ТекстЗапроса
	
	запрос.Текст =
	"ВЫБРАТЬ
	|	БПАГСтандартПрисутствияИсходнаяТаблица.Ссылка.ГруппаПродукта КАК ГруппаПродукции,
	|	КД_КатегорииТТПриоритетыПоКатегориям.КатегорияТТ,
	|	БПАГСтандартПрисутствияИсходнаяТаблица.Номенклатура,
	|	БПАГСтандартПрисутствияИсходнаяТаблица.Приоритет КАК ПриоритетПродукта,
	|	КД_КатегорииТТПриоритетыПоКатегориям.ТипПриоритета,
	|	&ТорговаяТочка
	|ПОМЕСТИТЬ ВТ_СтандартПрисутствия
	|ИЗ
	|	Документ.БПАГСтандартПрисутствия.ИсходнаяТаблица КАК БПАГСтандартПрисутствияИсходнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КД_КатегорииТТ.ПриоритетыПоКатегориям КАК КД_КатегорииТТПриоритетыПоКатегориям
	|		ПО БПАГСтандартПрисутствияИсходнаяТаблица.Приоритет = КД_КатегорииТТПриоритетыПоКатегориям.Приоритет
	|			И (КД_КатегорииТТПриоритетыПоКатегориям.КатегорияТТ.Родитель В (&КатегорийныеГруппы))
	|			И БПАГСтандартПрисутствияИсходнаяТаблица.Номенклатура.КД_Группа = КД_КатегорииТТПриоритетыПоКатегориям.КатегорияТТ.Родитель.ГруппаПродукта
	|ГДЕ
	|	БПАГСтандартПрисутствияИсходнаяТаблица.Ссылка = &Ссылка
	|	И БПАГСтандартПрисутствияИсходнаяТаблица.Приоритет <> ЗНАЧЕНИЕ(Справочник.КД_ПриоритетыПродукта.ПустаяСсылка)
	|	И БПАГСтандартПрисутствияИсходнаяТаблица.Приоритет <> ЗНАЧЕНИЕ(Справочник.КД_ПриоритетыПродукта.Вывод)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КД_КатегорииТТ.Ссылка КАК КатегорияТТ
	|ИЗ
	|	Справочник.КД_КатегорииТТ КАК КД_КатегорииТТ
	|ГДЕ
	|	КД_КатегорииТТ.Родитель В(&КатегорийныеГруппы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СтандартПрисутствия.Номенклатура,
	|	ВТ_СтандартПрисутствия.КатегорияТТ,
	|	ВТ_СтандартПрисутствия.ПриоритетПродукта,
	|	ВТ_СтандартПрисутствия.ГруппаПродукции,
	|	ВТ_СтандартПрисутствия.ТипПриоритета,
	|	ЕСТЬNULL(КД_СтандартПрисутствия.МинимальнаяДлинаПолкиДляФэйсинга, 0) КАК МинимальнаяДлинаПолкиДляФэйсинга,
	|	ЕСТЬNULL(КД_СтандартПрисутствия.МинимальныйОстаток, 0) КАК МинимальныйОстаток,
	|	ЕСТЬNULL(КД_СтандартПрисутствия.Фэйсинг, 0) КАК Фэйсинг
	|ИЗ
	|	ВТ_СтандартПрисутствия КАК ВТ_СтандартПрисутствия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КД_СтандартПрисутствия КАК КД_СтандартПрисутствия
	|		ПО ВТ_СтандартПрисутствия.Номенклатура = КД_СтандартПрисутствия.Номенклатура
	|			И ВТ_СтандартПрисутствия.КатегорияТТ = КД_СтандартПрисутствия.КатегорияТТ
	|			И (КД_СтандартПрисутствия.Подразделение = &Подразделение)
	|			И (КД_СтандартПрисутствия.Период = ДОБАВИТЬКДАТЕ(&ДатаСтандарта, МЕСЯЦ, -1))
	|			И ВТ_СтандартПрисутствия.ТорговаяТочка = КД_СтандартПрисутствия.ТорговаяТочка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_СтандартПрисутствия.Номенклатура.Наименование,
	|	ВТ_СтандартПрисутствия.КатегорияТТ.Наименование";
		
	#КонецОбласти
	
	запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	запрос.УстановитьПараметр("ДатаСреза", НачалоМесяца(Объект.Дата-1));
	запрос.УстановитьПараметр("ДатаСтандарта", НачалоМесяца(Объект.Дата));
	запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	
	//запрос.УстановитьПараметр("КатегорийнаяГруппа", Объект.КатегорийнаяГруппа);
	запрос.УстановитьПараметр("КатегорийныеГруппы", ОбработкаТабличныхЧастейКлиентСервер.ВыгрузитьКолонку(Объект.КатегорийныеГруппы, "КатегорийнаяГруппа"));
	
	запрос.УстановитьПараметр("ТорговаяТочка", Объект.ТорговаяТочка);
	запрос.УстановитьПараметр("ГруппаПродукта", Объект.ГруппаПродукта);
	
	
	
	результатЗапроса = запрос.ВыполнитьПакет();
	
	#Область ПолучениеВиртуальныхТаблиц
	запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_СтандартПрисутствия";
	#КонецОбласти 
	
	Объект.КатегорииТТ.Загрузить(результатЗапроса[1].Выгрузить());
	Объект.СтандартПрисутствия.Загрузить(результатЗапроса[2].Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ИсходнаяТаблицаЗаполнить()
	
	схемаКомпоновкиДанных = Документы.БПАГСтандартПрисутствия.ПолучитьМакет("МакетЗаполнитьИсходнуюТаблицуСхема");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,ПолучитьИзВременногоХранилища(АдресНастроекСКД),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,,Истина);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	тзИсходнаяТаблица = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(тзИсходнаяТаблица);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	#Область ЗаполнениеРейтинговПродукта
	
	тзИсходнаяТаблица.Индексы.Добавить("СредняяСуммаРеализацииНаТТ,Доход,СредняяСуммаДоходаНаТТ,СуммаРеализации,Вес,РейтингРасчетный,РейтингОбщий");
	
	// заполним "рейтинг продаж на одну ТТ"
	структураПараметров = Новый Структура("тзИсходнаяТаблица, инкрементныйСчетчик, расчетПоВидуПродукта, полеНакопления, полеИтогов, полеРейтинга, полеРасчетногоРейтинга",
		тзИсходнаяТаблица,
		Истина,
		Истина,
		"СредняяСуммаРеализацииНаТТ",
		"КолвоSKUПоВиду",
		"РейтингПродажНаОднуТТ",
		"РейтингРасчетный");
	
	ВыполнитьЗаполнениеРейтинга(структураПараметров);
	
	структураПараметров = Новый Структура("тзИсходнаяТаблица, инкрементныйСчетчик, расчетПоВидуПродукта, полеНакопления, полеИтогов, полеРейтинга, полеРасчетногоРейтинга",
		тзИсходнаяТаблица,
		Истина,
		Ложь,
		"СредняяСуммаРеализацииНаТТ",
		"КолвоSKUПоГруппеПродукта",
		"",
		"РейтингОбщий");
	
	ВыполнитьЗаполнениеРейтинга(структураПараметров);
	
	// заполним "рейтинг доходности"
	структураПараметров = Новый Структура("тзИсходнаяТаблица, инкрементныйСчетчик, расчетПоВидуПродукта, полеНакопления, полеИтогов, полеРейтинга, полеРасчетногоРейтинга",
		тзИсходнаяТаблица,
		Ложь,
		Истина,
		"Доход",
		"ДоходПоВиду",
		"РейтингДоходности",
		"РейтингРасчетный");
	
	ВыполнитьЗаполнениеРейтинга(структураПараметров);
	
	структураПараметров = Новый Структура("тзИсходнаяТаблица, инкрементныйСчетчик, расчетПоВидуПродукта, полеНакопления, полеИтогов, полеРейтинга, полеРасчетногоРейтинга",
		тзИсходнаяТаблица,
		Ложь,
		Ложь,
		"Доход",
		"ДоходПоГруппе",
		"",
		"РейтингОбщий");
	
	ВыполнитьЗаполнениеРейтинга(структураПараметров);
	
	// заполним "рейтинг реализации"
	структураПараметров = Новый Структура("тзИсходнаяТаблица, инкрементныйСчетчик, расчетПоВидуПродукта, полеНакопления, полеИтогов, полеРейтинга, полеРасчетногоРейтинга",
		тзИсходнаяТаблица,
		Ложь,
		Истина,
		"СуммаРеализации",
		"СуммаРеализацииПоВиду",
		"РейтингРеализации",
		"РейтингРасчетный");
	
	ВыполнитьЗаполнениеРейтинга(структураПараметров);
	
	структураПараметров = Новый Структура("тзИсходнаяТаблица, инкрементныйСчетчик, расчетПоВидуПродукта, полеНакопления, полеИтогов, полеРейтинга, полеРасчетногоРейтинга",
		тзИсходнаяТаблица,
		Ложь,
		Ложь,
		"СуммаРеализации",
		"СуммаРеализацииПоГруппе",
		"",
		"РейтингОбщий");
		
	ВыполнитьЗаполнениеРейтинга(структураПараметров);
	
	// заполним "рейтинг по весу"
	структураПараметров = Новый Структура("тзИсходнаяТаблица, инкрементныйСчетчик, расчетПоВидуПродукта, полеНакопления, полеИтогов, полеРейтинга, полеРасчетногоРейтинга",
		тзИсходнаяТаблица,
		Ложь,
		Истина,
		"Вес",
		"ВесПоВиду",
		"РейтингВесовой",
		"");
	
	ВыполнитьЗаполнениеРейтинга(структураПараметров);
	
	тзИсходнаяТаблица.Сортировать("РейтингОбщий");
	
	#КонецОбласти 
	
	Объект.ИсходнаяТаблица.Загрузить(тзИсходнаяТаблица);
	
КонецПроцедуры

&НаСервере
Процедура РасчитатьМинимальныйОстатокНаСервере()
	ДокументБПАГСтандартПрисутствияСервер.РасчитатьМинимальныйОстаток(объект);
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(отказ, стандартнаяОбработка)
	
	// при создании нового документа не задействована процедура "ПриЧтенииНаСервере(ТекущийОбъект)"
	Если АдресНастроекСКД = "" Тогда
		АдресНастроекСКД = ПоместитьВоВременноеХранилище(Неопределено,ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
	ЗаполнитьСписокПриоритетовНаСервере();
	
	ОбновитьИтогиПоВидамПродукта();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ЭтаФорма.АдресНастроекСКД = ПоместитьВоВременноеХранилище(ТекущийОбъект.ХранилищеНастроекКомпоновкиДанных.Получить(),ЭтаФорма.УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(имяСобытия, параметр, источник)
	
	Если имяСобытия = "ВыполнитьЗаполнениеИсходнойТаблицыСтандартаПрисутствия" Тогда
		
		ВыполнитьЗаполнениеИсходнойТаблицыНаСервере(параметр);
		
	ИначеЕсли имяСобытия = "ОбновитьИтогиПоВидамПродукта" Тогда
		
		ОбновитьИтогиПоВидамПродукта();
		
	ИначеЕсли имяСобытия = "ЗаполнитьИсходнуюТаблицуНастройки" Тогда
		
		АдресНастроекСКД = ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(параметр.АдресНастроекСКД),ЭтаФорма.УникальныйИдентификатор);
		
		ИсходнаяТаблицаЗаполнить();
		
		ОбновитьИтогиПоВидамПродукта();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(отказ, текущийОбъект, параметрыЗаписи)
	ТекущийОбъект.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(ЭтаФорма.АдресНастроекСКД));
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

&НаКлиенте
Процедура КатегорийнаяГруппаПриИзменении(элемент)
	
	ЗаполнитьСписокПриоритетовНаСервере();
	
	Оповестить("ОбновитьИтогиПоВидамПродукта");
	
КонецПроцедуры

&НаКлиенте
Процедура ИтогиПоВидамПродуктаВыбор(элемент, выбраннаяСтрока, поле, стандартнаяОбработка)
	
	Если Не элемент.ТекущиеДанные = Неопределено Тогда
		
		Если Не ОтборВидПродукции = элемент.ТекущиеДанные.ВидПродукта Тогда
			
			ОтборВидПродукции = Элемент.ТекущиеДанные.ВидПродукта;
			
			Элементы.ПриоритетыSKU.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидПродукта", отборВидПродукции);
			Элементы.ГруппаПриоритетыПраво.Заголовок = СтрШаблон("Приоритеты по виду продукта (%1)", отборВидПродукции);
			
		Иначе
			ОтборВидПродукции = Неопределено;
			Элементы.ПриоритетыSKU.ОтборСтрок = Неопределено;
			Элементы.ГруппаПриоритетыПраво.Заголовок = СтрШаблон("Приоритеты по виду продукта (%1)", "<отбор отключен>");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорииТТВыбор(элемент, выбраннаяСтрока, поле, стандартнаяОбработка)
	
	Если Не Элемент.ТекущиеДанные = Неопределено Тогда
		
		Если Не ОтборКатегорияТТ = элемент.ТекущиеДанные.КатегорияТТ Тогда
			ОтборКатегорияТТ = Элемент.ТекущиеДанные.КатегорияТТ;
			Элементы.СтандартПрисутствия.ОтборСтрок = Новый ФиксированнаяСтруктура("КатегорияТТ", ОтборКатегорияТТ);
			
			Элементы.ГруппаСтандартыПраво.Заголовок = СтрШаблон("Стандарт по (%1)", ОтборКатегорияТТ);
		Иначе
			ОтборКатегорияТТ = Неопределено;
			Элементы.СтандартПрисутствия.ОтборСтрок = Неопределено;
			Элементы.ГруппаСтандартыПраво.Заголовок = СтрШаблон("Стандарт по (%1)", "<отбор отключен>");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходнаяТаблицаНоменклатураПриИзменении(элемент)
	
	ОбработатьДанныеСтрокПриИзмененииНоменклатуры(Элементы.ИсходнаяТаблица.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходнаяТаблица1ПриоритетПриИзменении(элемент)
	Оповестить("ОбновитьИтогиПоВидамПродукта");
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(элемент)
	ЗаполнитьСписокПриоритетовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ГруппаПродуктаПриИзменении(элемент)
	ЗаполнитьСписокПриоритетовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИсходнаяТаблицаПриИзменении(элемент)
	Оповестить("ОбновитьИтогиПоВидамПродукта");
КонецПроцедуры

#КонецОбласти

#Область ДействияКоманд

&НаКлиенте
Процедура КомандаОбновитьДеревоПриоритетов(команда)
	Оповестить("ОбновитьДеревоПриоритетов");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсходнуюТаблицу(команда)
	
	периодЗаполнения = Новый СтандартныйПериод;
	периодЗаполнения.Вариант = ВариантСтандартногоПериода.ПрошлыйМесяц;
	
	формаЗаполнитьИсходнуюТаблицуНастройкиПараметры = Новый Структура;
	формаЗаполнитьИсходнуюТаблицуНастройкиПараметры.Вставить("АдресНастроекСКД", АдресНастроекСКД);
	формаЗаполнитьИсходнуюТаблицуНастройкиПараметры.Вставить("ПериодЗаполнения", периодЗаполнения);
	формаЗаполнитьИсходнуюТаблицуНастройкиПараметры.Вставить("ГруппаПродукта", Объект.ГруппаПродукта);
	//формаЗаполнитьИсходнуюТаблицуНастройкиПараметры.Вставить("КатегорийнаяГруппа",Объект.КатегорийнаяГруппа);
	формаЗаполнитьИсходнуюТаблицуНастройкиПараметры.Вставить("КатегорийныеГруппы", ОбработкаТабличныхЧастейКлиентСервер.ВыгрузитьКолонку(Объект.КатегорийныеГруппы, "КатегорийнаяГруппа"));
	
	ОткрытьФорму("Документ.БПАГСтандартПрисутствия.Форма.ФормаЗаполнитьИсходнуюТаблицуНастройки", формаЗаполнитьИсходнуюТаблицуНастройкиПараметры,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтандарт(команда)
	ЗаполнитьСтандартНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьМинимальныйОстаток(команда)
	
	РасчитатьМинимальныйОстатокНаСервере();
	
	Элементы.СтандартПрисутствия.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаДанныхСтрок

Функция СтруктураДанныхСтрок() Экспорт
	
	Возврат Новый Структура("ВидПродукта, Примечание,РейтингОбщий, РейтингРасчетный, Рентабельность, ОхватТТ_SKU, КолвоАктивныхТТПоПродукту, КолвоАктивныхТТВсего, РейтингПродажНаОднуТТ, РейтингДоходности, РейтингРеализации, РейтингВесовой, СредняяСуммаРеализацииНаТТ, Доход, СредняяСуммаДоходаНаТТ, СуммаРеализации, Вес, Приоритет");
	
КонецФункции // СтруктураДанныхСтрок()

&НаСервере
Функция ПолучитьДанныеСтрокиИсходнойТаблицы(период, подразделение, номенклатура)

	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	
	запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.КД_Вид КАК ВидПродукта
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Ссылка)";
	
	#КонецОбласти
	
	запрос.УстановитьПараметр("Ссылка", номенклатура);
	
	результат = запрос.Выполнить();
	
	выборка = результат.Выбрать();
	
	соДанныеСтрок = Новый Соответствие;
	
	Пока выборка.Следующий() Цикл
	
		стДанныеСтрок = СтруктураДанныхСтрок();
		
		ЗаполнитьЗначенияСвойств(стДанныеСтрок, выборка);
		соДанныеСтрок.Вставить(выборка.Номенклатура, стДанныеСтрок);
	
	КонецЦикла;	
	
	Возврат соДанныеСтрок;

КонецФункции // ПолучитьЦеныНоменклатуры()

&НаКлиенте
Процедура ОбработатьДанныеСтрокПриИзмененииНоменклатуры(данныеСтрок)
	
	ОбработатьДанныеСтрокПриИзмененииНоменклатурыНаСервере(ОбработкаТабличныхЧастейКлиентСервер.ПолучитьИдентификаторыСтрок(данныеСтрок));
	
КонецПроцедуры // ОбработатьДанныеСтрокПриИзмененииНоменклатуры()

&НаСервере
Процедура ОбработатьДанныеСтрокПриИзмененииНоменклатурыНаСервере(Знач мИдентификаторыСтрок)
	
	мДанныеСтрок = ОбработкаТабличныхЧастейКлиентСервер.ПолучитьСтрокиПоИдентификаторам(Объект.ИсходнаяТаблица, мИдентификаторыСтрок);
	мНоменклатура = ОбработкаТабличныхЧастейКлиентСервер.ВыгрузитьКолонку(мДанныеСтрок, "Номенклатура");

	соДанныеСтрок = ПолучитьДанныеСтрокиИсходнойТаблицы(Объект.Дата, Объект.Подразделение, мНоменклатура);
	
	Для каждого данныеСтроки Из мДанныеСтрок Цикл
		
		ЗаполнитьЗначенияСвойств(данныеСтроки, соДанныеСтрок[данныеСтроки.Номенклатура]);
		
	КонецЦикла; 

КонецПроцедуры // ОбработатьДанныеСтрокПриИзмененииНоменклатурыНаСервере()

#КонецОбласти