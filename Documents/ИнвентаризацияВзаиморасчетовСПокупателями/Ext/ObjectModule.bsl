
#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(отказ, режимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Инициализация данных документа.
	Документы.ИнвентаризацияВзаиморасчетовСПокупателями.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Отражение в разделах учета
	УправлениеНебольшойФирмойСервер.ОтразитьВзаиморасчетыСПокупателями(ДополнительныеСвойства, Движения, Отказ);

	ФинансовыйРезультат = Движения.ФинансовыйРезультат;
	ФинансовыйРезультат.Записывать = Истина;
	
	Если ОперацияДокумента = Справочники.ОперацииДокументов.СписаниеЗадолженностиПокупателей Тогда
		
		// Расходы
		Движение = ФинансовыйРезультат.Добавить();
		Движение.Период 		= Дата;
		Движение.Подразделение	= Подразделение;
		Движение.РазделительУчёта	= РазделительУчёта;
		
		Движение.СтатьяЗатрат 	= СтатьяЗатрат;
		Движение.СуммаДоходов	= СтрокиДокумента.Итог("Долг");
		
		Если ЗначениеЗаполнено(СтатьяЗатрат) Тогда
			Взаиморасчеты = Движения.ВзаиморасчетыСПокупателями;
			Взаиморасчеты.Очистить();
			Для Каждого СтрокаСостава Из СтрокиДокумента Цикл
				
				движение = Взаиморасчеты.Добавить();
				движение.Период 		= Дата;
				движение.ВидДвижения 	= ВидДвиженияНакопления.Приход;
				движение.Подразделение 	= Подразделение;
				движение.Контрагент		= СтрокаСостава.Контрагент;
				
				Если строкаСостава.Контрагент.ТипВеденияВзаиморасчетов = Перечисления.ТипыВеденияВзаиморасчетов.ПоНакладным Тогда
					движение.Менеджер		= Строкасостава.Менеджер;
					движение.КредитныйДокумент = СтрокаСостава.КредДокумент;
				Иначе
					движение.Менеджер		= Справочники.Менеджеры.БезМенеджера;
					движение.КредитныйДокумент = Документы.РасходнаяНакладная.ПустаяСсылка();
				КонецЕсли;
				
				движение.Сумма			= СтрокаСостава.Долг;
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ОперацияДокумента = Справочники.ОперацииДокументов.ОстаткиПоПокупателям Тогда	
		// Доходы
		Движение = ФинансовыйРезультат.Добавить();
		Движение.Период 		= Дата;
		Движение.Подразделение	= Подразделение;
		Движение.СтатьяДоходов 	= Справочники.СтатьиДоходов.СписаниеКредиторскойЗадолженности;
		Движение.СуммаДоходов	= СтрокиДокумента.Итог("Долг");
		
	КонецЕсли;
	
	// Запись наборов записей.
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	//Документы.ИнвентаризацияВзаиморасчетовСПокупателями.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();

	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(ртказ)
	
	// Инициализация дополнительных свойств для проведения документа
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПередЗаписью(отказ, режимЗаписи, режимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Подразделение.Пустая() Тогда
		
		ТекстСообщения = НСтр("ru = 'Запись невозможна без заполнения Подразделения.'");
		ПроверкаДанныхКлиентСервер.СообщитьОбОшибке(отказ, текстСообщения, ЭтотОбъект, "Подразделение");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(объектКопирования)
	
	ЗаполнениеОбъектовСервер.ЗаполнитьДанныеСкопированногоДокумента(ЭтотОбъект, ОбъектКопирования);
	
КонецПроцедуры

#КонецОбласти 