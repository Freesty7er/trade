
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Функция ИнтернетПочтовыеПрофилиПользователейПолучитьСсылку(код = Неопределено)
	
	Если код = Неопределено Тогда
		Возврат Справочники.ШаблоныИнтернетПочтовыхСообщений.ПустаяСсылка();
	Иначе
		Возврат Справочники.ШаблоныИнтернетПочтовыхСообщений.НайтиПоКоду(код,,,Пользователи.ТекущийПользователь());
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПроцедураОбработкиПрограмноСозданнойКнопки(элемент)
	ИнтернетПочтовоеСообщениеОтправить(ИнтернетПочтовыеПрофилиПользователейПолучитьСсылку(Прав(элемент.Имя,9)));
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Перем КоллекцияПечатныхФорм, ПараметрыВывода;
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ИсточникДанных") Тогда
		
		Если НЕ УправлениеПечатьюПереопределяемый.ПечатьПоВнешнемуИсточнику(
					Параметры.ИсточникДанных,
					Параметры.ПараметрыИсточника,
					КоллекцияПечатныхФорм,
					ОбъектыПечати,
					ПараметрыВывода) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		КлючНастроек = Неопределено;
	Иначе
		
		ИмяМенеджераПечати    = Параметры.ИмяМенеджераПечати;
		ИменаМакетов          = Параметры.ИменаМакетов;
		ПараметрКоманды       = Параметры.ПараметрКоманды;
		ПараметрыПечати       = Параметры.ПараметрыПечати;
	    КоличествоЭкземпляров = Параметры.КоличествоЭкземпляров;
		
		УправлениеПечатью.СформироватьПечатныеФормы(ИмяМенеджераПечати, ИменаМакетов, ПараметрКоманды, ПараметрыПечати,
			КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, КоличествоЭкземпляров);
		
		КлючНастроек = Параметры.ИмяМенеджераПечати + "-" + Параметры.ИменаМакетов;
		
	КонецЕсли;
	
	ДоступнаПечатьПоКомплектно = ПараметрыВывода.ДоступнаПечатьПоКомплектно;
	
	Если КлючНастроек = Неопределено Тогда
		КоличествоКопийДляПечати = Новый Массив;
	Иначе
		КоличествоКопийДляПечати = ХранилищеОбщихНастроек.Загрузить("КоличествоКопийДляПечати", КлючНастроек);
		Если КоличествоКопийДляПечати = Неопределено Тогда
			КоличествоКопийДляПечати = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	Колво = КоллекцияПечатныхФорм.Количество();
	
	Для Сч = 1 По 5 Цикл
		Если Сч > Колво Тогда
			ЭтаФорма["Таб" + Сч] = Неопределено;
			Элементы["Группа" + Сч].Видимость = Ложь;
			Элементы["Копии"  + Сч].Видимость = Ложь;
		Иначе
			СтрМакета = КоллекцияПечатныхФорм[Сч-1];
			
			ЭтаФорма["Таб" + Сч] = СтрМакета.ТабличныйДокумент;
			Элементы["Группа" + Сч].Видимость = Истина;
			Элементы["Группа" + Сч].Заголовок = СтрМакета.СинонимМакета;
			Элементы["Копии"  + Сч].Видимость = Истина;
			Элементы["Копии"  + Сч].Заголовок = СтрМакета.СинонимМакета;
			
			Если Сч <= КоличествоКопийДляПечати.Количество() Тогда
				ЭтаФорма["Копии" + Сч] = КоличествоКопийДляПечати[Сч-1];
			Иначе
				ЭтаФорма["Копии" + Сч] = СтрМакета.Экземпляров;
			КонецЕсли;
			
			ИменаТабДокументов.Добавить(Сч, СтрМакета.СинонимМакета);
			
			Если НЕ ПустаяСтрока(СтрМакета.ПолныйПутьКМакету) Тогда
				МакетыПечатныхФорм.Добавить(СтрМакета.ПолныйПутьКМакету);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Колво = 1 Тогда
		Элементы.ГруппаКопии.Видимость = Ложь;
		Элементы.Копии.Видимость = Истина;
		Если КоличествоКопийДляПечати.Количество() = 1 Тогда
			Копии = КоличествоКопийДляПечати[0];
		Иначе
			Копии = КоллекцияПечатныхФорм[0].Экземпляров;
		КонецЕсли;
	Иначе
		Элементы.Копии.Видимость = Ложь;
		Элементы.ГруппаКопии.Видимость = Истина;
	КонецЕсли;
	
	Если Колво <= 1 Тогда
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
	//Если Пользователи.ЭтоПолноправныйПользовательИБ()
	//ИЛИ ( РольДоступна("ВыводНаПринтерФайлБуферОбмена")
	//	И РаботаСПочтовымиСообщениями.ПолучитьДоступныеУчетныеЗаписи(Истина).Количество() > 0)Тогда
	//	// ничего не делаем
	//Иначе
	//	Элементы.ОтправитьПоПочте.Видимость = Ложь;
	//КонецЕсли;
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	запрос.Текст = 
	"ВЫБРАТЬ
	|	ШаблоныИнтернетПочтовыхСообщений.Ссылка
	|ИЗ
	|	Справочник.ШаблоныИнтернетПочтовыхСообщений КАК ШаблоныИнтернетПочтовыхСообщений
	|ГДЕ
	|	ШаблоныИнтернетПочтовыхСообщений.Владелец = &Владелец";
	#КонецОбласти
	
	запрос.УстановитьПараметр("Владелец", Пользователи.ТекущийПользователь());
	
	результат = запрос.Выполнить().Выгрузить();
	
	ПодменюОтправитьПоПочте = Элементы.Найти("Группа7");
	нппШаблона = 0;
	
	Для Каждого строкаШаблон Из результат Цикл
		
		нппШаблона = нппШаблона + 1;
		
		имяКнопки = "Шаблон" + нппШаблона;
		имяКоманды = "Команда" + строкаШаблон.Ссылка.Код;
		
		команда = Команды.Добавить(имяКоманды);
		команда.Действие = "ПроцедураОбработкиПрограмноСозданнойКнопки";
		
		кнопкаФормы = Элементы.Добавить(имяКнопки, Тип("КнопкаФормы"), ПодменюОтправитьПоПочте);
		кнопкаФормы.Заголовок = строкаШаблон.Ссылка.Наименование;
		кнопкаФормы.ИмяКоманды = имяКоманды;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если НужноСохранитьНастройкиКопий Тогда
		КоличествоКопийДляПечати = Новый Массив;
		
		Если Элементы.ГруппаКопии.Видимость Тогда
			Для Сч = 1 По 5 Цикл
				Если Элементы["Копии" + Сч].Видимость Тогда
					КоличествоКопийДляПечати.Добавить(ЭтаФорма["Копии"+Сч]);
				Иначе
					Прервать; // дальше не имеет смысла просматривать
				КонецЕсли;
			КонецЦикла;
		Иначе
			КоличествоКопийДляПечати.Добавить(Копии);
		КонецЕсли;
		
		СохранитьНастройкиКоличестваКопий(КлючНастроек, КоличествоКопийДляПечати);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ПечатьВыполнить()
	
	ТабличныеДокументы = Новый СписокЗначений;
	
	Для Каждого ТабДокумент Из ИменаТабДокументов Цикл
		ТабличныеДокументы.Добавить(ЭтаФорма["Таб" + ТабДокумент.Значение], ТабДокумент.Представление);
	КонецЦикла;
	
	УправлениеПечатьюКлиент.РаспечататьТабличныеДокументы(ТабличныеДокументы, ОбъектыПечати,
								ДоступнаПечатьПоКомплектно);
	
КонецПроцедуры

&НаКлиенте
Процедура КопииПриИзменении(Элемент)
	
	Копий = ЭтаФорма[Элемент.Имя];
	ИмяТабДока = "Таб" + ?(Элемент.Имя = "Копии", "1", Сред(Элемент.Имя, 6));
	ТабДок = ЭтаФорма[ИмяТабДока];
	ТабДок.КоличествоЭкземпляров = Копий;
	НужноСохранитьНастройкиКопий = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоПочтеВыполнить()
	
	Результат = ОткрытьФормуМодально("ОбщаяФорма.НастройкаПечатныхФормПередОтправкой");
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Вложения = Новый Соответствие;
	
	СписокФайлов = Новый СписокЗначений;
	
	Если Результат.ЗапаковатьZIP Тогда
#Если ВебКлиент Тогда
		Путь = ПоместитьТабличныеДокументыВZIPНаСервере();
#Иначе
		Путь = ПоместитьТабличныеДокументыВZIPНаКлиенте(Результат);
#КонецЕсли
		
		Если Путь = "" Тогда
			Возврат;
		КонецЕсли;
		
		ИменаМакетов = "";
		Для Каждого ИмяТабДокумента Из ИменаТабДокументов Цикл
			ИменаМакетов = ИменаМакетов + ИмяТабДокумента.Представление + ", ";;
		КонецЦикла;
		ИменаМакетов = Лев(ИменаМакетов, СтрДлина(ИменаМакетов) - 2);
		ДатаПредставление = Формат(ТекущаяДата(), "ДФ='yyyyMMdd HH:mm'");
		
		Если ОбъектыПечати.Количество() > 1 Тогда
			ИмяФайла = "[ИменаМакетов] ([ДатаПредставление]).zip";
		Иначе
			ИмяФайла = "[Документ] ([ИменаМакетов] [ДатаПредставление]).zip";
		КонецЕсли;
		
		ИмяФайла = СтрЗаменить(ИмяФайла, "[Документ]",			Строка(ОбъектыПечати[0].Значение));
		ИмяФайла = СтрЗаменить(ИмяФайла, "[ИменаМакетов]",		ИменаМакетов);
		ИмяФайла = СтрЗаменить(ИмяФайла, "[ДатаПредставление]",	ДатаПредставление);
		
		СписокФайлов.Добавить(Путь, ИмяФайла);
	Иначе
		#Если ВебКлиент Тогда
			ПоместитьТабличныеДокументыВоВременноеХранилище(СписокФайлов);
		#Иначе
			ПоместитьТабличныеДокументыВФайлы(СписокФайлов, Результат);
		#КонецЕсли
	КонецЕсли;
	
	НормализоватьИменаФайлов(СписокФайлов);
	
	//РаботаСПочтовымиСообщениямиКлиент.ОткрытьФормуОтправкиПочтовогоСообщения(, , , , СписокФайлов, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВыполнить()

	спсВыбора = Новый СписокЗначений;
	Для Каждого Элемент Из ОбъектыПечати Цикл
		спсВыбора.Добавить(Элемент.Значение);
	КонецЦикла;
	
	Элемент = спсВыбора.ВыбратьЭлемент(НСтр("ru = 'Перейти к печатной форме'"));
	Если Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элемент = ОбъектыПечати.НайтиПоЗначению(Элемент.Значение);
	Если Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяОбласти = Элемент.Представление;
	Для Каждого ТабДокумент Из ИменаТабДокументов Цикл
		
		ИмяЭлемента = "Таб" + ТабДокумент.Значение;
		Таб = ЭтаФорма[ИмяЭлемента];
		Область = Таб.Области.Найти(ИмяОбласти);
		Если Область = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяОбласть = Таб.Область(Область.Верх, , Область.Верх);
		Элементы[ИмяЭлемента].ТекущаяОбласть = ТекущаяОбласть;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервереБезКонтекста
Процедура СохранитьНастройкиКоличестваКопий(КлючНастроек, КоличествоКопийДляПечати)
	
	ХранилищеОбщихНастроек.Сохранить("КоличествоКопийДляПечати", КлючНастроек, КоличествоКопийДляПечати);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКУправлениюМакетами(Команда)
	
	ПараметрыОткрытия = ?(МакетыПечатныхФорм.Количество() > 0, Новый Структура("Фильтр", ОбъектыПечати[0].Значение), Неопределено);
	
	ОткрытьФорму("РегистрСведений.ПользовательскиеМакетыПечати.Форма.МакетыПечатныхФорм", ПараметрыОткрытия);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ И ПРОЦЕДУРЫ ПОДГОТАВЛИВАЮЩИЕ ТАБЛИЧНЫЕ ДОКУМЕНТЫ К ОТПРАВКЕ

&НаСервере
Функция ПоместитьТабличныеДокументыВZIPНаСервере()

	ИмяКаталога = ПолучитьИмяВременногоФайла();
	ИмяАрхива   = ПолучитьИмяВременногоФайла();
	БылаОшибка  = Ложь;

	СоздатьКаталог(ИмяКаталога);
	Попытка
		Архив = Новый ЗаписьZipФайла(ИмяАрхива);
		
		Для Каждого ТабДокумент Из ИменаТабДокументов Цикл
			ИмяТабДока = ИмяКаталога + "/" + ТабДокумент.Представление + ".mxl";
			ТабДок = ЭтаФорма["Таб" + ТабДокумент.Значение];
			ТабДок.Записать(ИмяТабДока, ТипФайлаТабличногоДокумента.MXL);
			Архив.Добавить(ИмяТабДока, РежимСохраненияПутейZIP.НеСохранятьПути);
		КонецЦикла;

		Архив.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		БылаОшибка = Истина;
	КонецПопытки;

	УдалитьФайлы(ИмяКаталога);

	Если БылаОшибка Тогда
		Возврат "";
	КонецЕсли;

	Данные = Новый ДвоичныеДанные(ИмяАрхива);
	УдалитьФайлы(ИмяАрхива);
	
	Возврат ПоместитьВоВременноеХранилище(Данные, "");

КонецФункции

&НаКлиенте
Функция ПолучитьСписокТиповФайловТабличныхДокументов(Результат)
	
	СписокТипов = Новый СписокЗначений;
	
	Если Результат.ФорматMXL Тогда
		СписокТипов.Добавить(ТипФайлаТабличногоДокумента.MXL, "mxl");
	КонецЕсли;
	
	Если Результат.ФорматHTML Тогда
		СписокТипов.Добавить(ТипФайлаТабличногоДокумента.HTML, "html");
	КонецЕсли;
	
	Если Результат.ФорматXLS Тогда
		СписокТипов.Добавить(ТипФайлаТабличногоДокумента.XLS, "xls");
	КонецЕсли;
	
	Возврат СписокТипов;	
	
КонецФункции

&НаСервере
Процедура ПоместитьТабличныеДокументыВоВременноеХранилище(СписокФайлов)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ДатаПредставление = Формат(ТекущаяДата(), "ДФ='yyyyMMdd HH:mm'");
	
	Для Каждого ТабДокумент Из ИменаТабДокументов Цикл
		ТабДок = ЭтаФорма["Таб" + ТабДокумент.Значение];
		ТабДок.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.MXL);
		Данные = Новый ДвоичныеДанные(ИмяВременногоФайла);
		Путь = ПоместитьВоВременноеХранилище(Данные, "");
		
		Если ОбъектыПечати.Количество() > 1 Тогда
			ИмяФайла = "[ИмяМакета] ([ДатаПредставление]).mxl";
		Иначе
			ИмяФайла = "[Документ] ([ИмяМакета] [ДатаПредставление]).mxl";
		КонецЕсли;
		
		ИмяФайла = СтрЗаменить(ИмяФайла, "[Документ]",			Строка(ОбъектыПечати[0].Значение));
		ИмяФайла = СтрЗаменить(ИмяФайла, "[ИмяМакета]",			ТабДокумент.Представление);
		ИмяФайла = СтрЗаменить(ИмяФайла, "[ДатаПредставление]",	ДатаПредставление);
		
		СписокФайлов.Добавить(Путь, ИмяФайла);
	КонецЦикла;
	
	УдалитьФайлы(ИмяВременногоФайла);
	
КонецПроцедуры

#Если НЕ ВебКлиент Тогда
&НаКлиенте
Процедура ПоместитьТабличныеДокументыВФайлы(СписокФайлов, Результат)
	
	СписокТипов = ПолучитьСписокТиповФайловТабличныхДокументов(Результат);
	ДатаПредставление = Формат(ТекущаяДата(), "ДФ='yyyyMMdd HH:mm'");
	
	Для Каждого ТабДокумент Из ИменаТабДокументов Цикл
		ТабДок = ЭтаФорма["Таб" + ТабДокумент.Значение];
		
		Для Каждого ТипФайла Из СписокТипов Цикл
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла(ТипФайла.Представление);
			ТабДок.Записать(ИмяВременногоФайла, ТипФайла.Значение);
			
			Если ОбъектыПечати.Количество() > 1 Тогда
				ИмяФайла = "[ИмяМакета] ([ДатаПредставление]).[Расширение]";
			Иначе
				ИмяФайла = "[Документ] ([ИмяМакета] [ДатаПредставление]).[Расширение]";
			КонецЕсли;
			
			ИмяФайла = СтрЗаменить(ИмяФайла, "[Документ]",			Строка(ОбъектыПечати[0].Значение));
			ИмяФайла = СтрЗаменить(ИмяФайла, "[ИмяМакета]",			ТабДокумент.Представление);
			ИмяФайла = СтрЗаменить(ИмяФайла, "[ДатаПредставление]",	ДатаПредставление);
			ИмяФайла = СтрЗаменить(ИмяФайла, "[Расширение]",		ТипФайла.Представление);
			
			СписокФайлов.Добавить(ИмяВременногоФайла, ИмяФайла);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПоместитьТабличныеДокументыВZIPНаКлиенте(Результат)
	
	ИмяКаталога = ПолучитьИмяВременногоФайла();
	ИмяАрхива   = ПолучитьИмяВременногоФайла("zip");
	БылаОшибка  = Ложь;
	
	СписокТипов = ПолучитьСписокТиповФайловТабличныхДокументов(Результат);
	
	СоздатьКаталог(ИмяКаталога);
	
	Попытка
		Архив = Новый ЗаписьZipФайла(ИмяАрхива);
		
		Для Каждого ТабДокумент Из ИменаТабДокументов Цикл
			ТабДок = ЭтаФорма["Таб" + ТабДокумент.Значение];
			
			Для Каждого ТипФайла Из СписокТипов Цикл
				ИмяТабДока = ИмяКаталога + "/" + ТабДокумент.Представление + "." + ТипФайла.Представление;
				ТабДок.Записать(ИмяТабДока, ТипФайла.Значение);
				Архив.Добавить(ИмяТабДока, РежимСохраненияПутейZIP.НеСохранятьПути);
			КонецЦикла;
		КонецЦикла;
		
		Архив.Записать();
	Исключение
		БылаОшибка = Истина;
	КонецПопытки;
	
	УдалитьФайлы(ИмяКаталога);
	
	Если БылаОшибка Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ИмяАрхива;
	
КонецФункции
#КонецЕсли

&НаКлиенте
Процедура НормализоватьИменаФайлов(СписокФайлов)
	
	СтрИсключения = """ / \ [ ] : ; | = , ? * < >";
	СтрИсключения = СтрЗаменить(СтрИсключения, " ", "");
	
	Для Каждого ЭлементФайл Из СписокФайлов Цикл
		Для Индекс = 1 По СтрДлина(СтрИсключения) Цикл
			
			Символ = Сред(СтрИсключения, Индекс, 1);
			
			Если Найти(ЭлементФайл.Представление, Символ) > 0 Тогда
				ЭлементФайл.Представление = СтрЗаменить(ЭлементФайл.Представление, Символ, " ");
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОповещениеЗакрытия()
	
КонецФункции

&НаСервере
Функция имяФайлаСервер(полноеИмяФайлаНаСервере, имяКаталога, былаОшибка)
	
	имяКаталога			 = ПолучитьИмяВременногоФайла();
	имяАрхива			 = ПолучитьИмяВременногоФайла("zip");
	былаОшибка			 = Ложь;
	именаФайловСервер	 = Новый Массив;
	списокФайловСервер	 = Новый СписокЗначений;

	СоздатьКаталог(имяКаталога);
	//количесво вкладок табличных значений находим
	колвоВкладок = ИменаТабДокументов.Количество();
	
	Если колвоВкладок=1 Тогда
		Попытка
			//одна табличная часть отправляем как есть
			имяФайлаТаблицыДокумента = имяКаталога + "/" + ИменаТабДокументов.Получить(0).Представление + "_" + СокрЛП(Формат(ТекущаяДата(),"ДФ=yyyyMMddHHmmss")) + ".xls";
			таблицаДокумента = ЭтаФорма["Таб" + ИменаТабДокументов.Получить(0).Значение];
			имяФайлаСервер = РаботаСФайламиКлиентСервер.СформироватьЭксельТабличныйДокумент(таблицаДокумента,имяФайлаТаблицыДокумента);
			именаФайловСервер.Добавить(имяФайлаСервер);
			списокФайловСервер.Добавить(имяФайлаСервер);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			былаОшибка = Истина;
		КонецПопытки;
	Иначе
		
		//несколько, делаем выбор и упаковываем в ZIP
		//делаем выбор
		
		Попытка
			ЗаписьZIP = Новый ЗаписьZipФайла(имяАрхива);
			Для Каждого табДокумент Из ИменаТабДокументов Цикл
				имяФайлаТаблицыДокумента = имяКаталога + "/" + табДокумент.Представление + "_" + СокрЛП(Формат(ТекущаяДата(),"ДФ=yyyyMMddHHmmss")) + "_" + табДокумент.Значение + ".xls";
				таблицаДокумента = ЭтаФорма["Таб" + табДокумент.Значение];
				имяФайлаСервер = РаботаСФайламиКлиентСервер.СформироватьЭксельТабличныйДокумент(таблицаДокумента,имяФайлаТаблицыДокумента);
				именаФайловСервер.Добавить(имяФайлаСервер);
				списокФайловСервер.Добавить(имяФайлаСервер);
				ЗаписьZIP.Добавить(имяФайлаСервер, РежимСохраненияПутейZIP.НеСохранятьПути);
			КонецЦикла;
			ЗаписьZIP.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			былаОшибка = Истина;
		КонецПопытки;
	КонецЕсли;
	
	Если колвоВкладок = 1 Тогда
		полноеИмяФайлаНаСервере = имяФайлаСервер;
	Иначе
		полноеИмяФайлаНаСервере = имяАрхива;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЭкспортЭксельНаСервере()
	
	полноеИмяФайлаНаСервере		 = Неопределено;
	имяКаталогаУдалить			 = Неопределено;
	отказ						 = Ложь;
	
	имяФайлаСервер(полноеИмяФайлаНаСервере, имяКаталогаУдалить, отказ);
	
	#Область изменения_20170904_Карпачев_А_Ю
	// перенесено в имяФайлаСервер(полноеИмяФайлаНаСервере, имяКаталога, былаОшибка)
	
	//имяКаталога = ПолучитьИмяВременногоФайла();
	//имяАрхива   = ПолучитьИмяВременногоФайла("zip");
	//былаОшибка  = Ложь;
	//именаФайловСервер = Новый Массив;
	//списокФайловСервер = Новый СписокЗначений;

	//
	//СоздатьКаталог(имяКаталога);
	////количесво вкладок табличных значений находим
	//колвоВкладок = ИменаТабДокументов.Количество();
	//
	//Если колвоВкладок=1 Тогда
	//	Попытка
	//		//одна табличная часть отправляем как есть
	//		имяФайлаТаблицыДокумента = имяКаталога + "/" + ИменаТабДокументов.Получить(0).Представление + ".xls";
	//		таблицаДокумента = ЭтаФорма["Таб" + ИменаТабДокументов.Получить(0).Значение];
	//		имяФайлаСервер = РаботаСФайламиКлиентСервер.СформироватьЭксельТабличныйДокумент(таблицаДокумента,имяФайлаТаблицыДокумента);
	//		именаФайловСервер.Добавить(имяФайлаСервер);
	//		списокФайловСервер.Добавить(имяФайлаСервер);
	//	Исключение
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	//		былаОшибка = Истина;
	//	КонецПопытки;
	//Иначе
	//	
	//	//несколько, делаем выбор и упаковываем в ZIP
	//	//делаем выбор
	//	
	//	Попытка
	//		ЗаписьZIP = Новый ЗаписьZipФайла(имяАрхива);
	//		Для Каждого табДокумент Из ИменаТабДокументов Цикл
	//			имяФайлаТаблицыДокумента = имяКаталога + "/" + табДокумент.Представление + ".xls";
	//			таблицаДокумента = ЭтаФорма["Таб" + табДокумент.Значение];
	//			имяФайлаСервер = РаботаСФайламиКлиентСервер.СформироватьЭксельТабличныйДокумент(таблицаДокумента,имяФайлаТаблицыДокумента);
	//			именаФайловСервер.Добавить(имяФайлаСервер);
	//			списокФайловСервер.Добавить(имяФайлаСервер);
	//			ЗаписьZIP.Добавить(имяФайлаСервер, РежимСохраненияПутейZIP.НеСохранятьПути);
	//		КонецЦикла;
	//		ЗаписьZIP.Записать();
	//	Исключение
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	//		былаОшибка = Истина;
	//	КонецПопытки;
	//КонецЕсли;
	
	#КонецОбласти

	Если отказ Тогда
		Возврат(0);
	КонецЕсли;
	
	#Область изменения_20170904_Карпачев_А_Ю
	// перенесено в имяФайлаСервер(полноеИмяФайлаНаСервере, имяКаталога, былаОшибка)
	
	//Если колвоВкладок = 1 Тогда
	//	данные = Новый ДвоичныеДанные(имяФайлаСервер);
	//Иначе
	//	данные = Новый ДвоичныеДанные(имяАрхива);
	//КонецЕсли;
	
	#КонецОбласти
	
	данные = Новый ДвоичныеДанные(полноеИмяФайлаНаСервере);
	
	УдалитьФайлы(имяКаталогаУдалить);
	
	Возврат ПоместитьВоВременноеХранилище(данные, новый уникальныйидентификатор);
	
КонецФункции

&НаКлиенте
Процедура ЭкспортЭксель(Команда)
	
	режим = РежимДиалогаВыбораФайла.Сохранение;
	диалогОткрытия = Новый ДиалогВыбораФайла(Режим);
	диалогОткрытия.ПолноеИмяФайла = "";
	фильтр = "Excell, *.xls|*.xls";
	диалогОткрытия.Фильтр = Фильтр;
	диалогОткрытия.МножественныйВыбор = Истина;
	диалогОткрытия.Заголовок = "Выберите имя сохраняемого файла";
	Если диалогОткрытия.Выбрать() Тогда
		МассивВыбранныхФайлов = ДиалогОткрытия.ВыбранныеФайлы;
		Для Каждого ИмяВыбранногоФайла Из МассивВыбранныхФайлов Цикл
			имяФайлаКлиент = Новый Файл(ИмяВыбранногоФайла);
		КонецЦикла;
	Иначе
		Сообщить("Укажите имя файла!");//Предупреждение("Нет выбранных файлов!");
		Возврат;
	КонецЕсли;
	файлСервер = ПолучитьИзВременногоХранилища(ЭкспортЭксельНаСервере());
	файлСервер.Записать(имяФайлаКлиент.ПолноеИмя);
	
КонецПроцедуры

&НаСервере
Процедура ИнтернетПочтовоеСообщениеОтправитьНаСервере(имяКаталогаУдалить)
	УдалитьФайлы(имяКаталогаУдалить);
КонецПроцедуры

&НаКлиенте
Процедура ИнтернетПочтовоеСообщениеОтправить(шаблонСсылка = Неопределено)
	
	полноеИмяФайлаНаСервере		 = Неопределено;
	имяКаталогаУдалить			 = Неопределено;
	отказ						 = Ложь;
	
	имяФайлаСервер(полноеИмяФайлаНаСервере, имяКаталогаУдалить, отказ);
	
	Если отказ Тогда
		ИнтернетПочтовоеСообщениеОтправитьНаСервере(имяКаталогаУдалить);
		Возврат;
	КонецЕсли;
	
	формаИнтернетПочтовоеСообщениеПараметры = ПолучитьПараметрыФормыИнтернетСообщенияНаСервере(шаблонСсылка, полноеИмяФайлаНаСервере, имяКаталогаУдалить);
	
	
	
	
	ОткрытьФорму("ОбщаяФорма.ФормаИнтернетПочтовоеСообщение",формаИнтернетПочтовоеСообщениеПараметры,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыФормыИнтернетСообщенияНаСервере(шаблонСсылка, полноеИмяФайлаНаСервере, имяКаталогаУдалить)
	
	формаИнтернетПочтовоеСообщениеПараметры = Новый Структура;
	
	Если шаблонСсылка <> Неопределено Тогда
		
		формаИнтернетПочтовоеСообщениеПараметры.Вставить("Отправитель", шаблонСсылка.Отправитель);
		интернетПочтовоеСообщениеПолучатели = Новый СписокЗначений;
		Для Каждого получатель Из шаблонСсылка.Получатели Цикл
			интернетПочтовоеСообщениеПолучатели.Добавить(получатель.АдресИнтернетПочтовогоЯщика);
		КонецЦикла;
		формаИнтернетПочтовоеСообщениеПараметры.Вставить("Получатели", интернетПочтовоеСообщениеПолучатели);
		формаИнтернетПочтовоеСообщениеПараметры.Вставить("Тема", шаблонСсылка.Тема);
		ФормаИнтернетПочтовоеСообщениеПараметры.Вставить("Сообщение", шаблонСсылка.Сообщение);
		интернетПочтовоеСообщениеВложения = Новый СписокЗначений;
		интернетПочтовоеСообщениеВложения.Добавить(полноеИмяФайлаНаСервере);
		формаИнтернетПочтовоеСообщениеПараметры.Вставить("Вложения", интернетПочтовоеСообщениеВложения);
		формаИнтернетПочтовоеСообщениеПараметры.Вставить("имяКаталогаУдалить", имяКаталогаУдалить);
		
		#Область изменения_20180601_Карпачев_А_Ю
		формаИнтернетПочтовоеСообщениеПараметры.Вставить("АдаптироватьПодМашинныйРазбор", шаблонСсылка.АдаптироватьПодМашинныйРазбор);
		#КонецОбласти
		
	Иначе
		
		формаИнтернетПочтовоеСообщениеПараметры.Вставить("Отправитель", ИнтернетПочтовыеПрофилиПользователейПолучитьСсылку());
		ФормаИнтернетПочтовоеСообщениеПараметры.Вставить("Получатели", Новый СписокЗначений);
		формаИнтернетПочтовоеСообщениеПараметры.Вставить("Тема", "");
		ФормаИнтернетПочтовоеСообщениеПараметры.Вставить("Сообщение", "");
		интернетПочтовоеСообщениеВложения = Новый СписокЗначений;
		интернетПочтовоеСообщениеВложения.Добавить(полноеИмяФайлаНаСервере);
		формаИнтернетПочтовоеСообщениеПараметры.Вставить("Вложения", интернетПочтовоеСообщениеВложения);
		формаИнтернетПочтовоеСообщениеПараметры.Вставить("имяКаталогаУдалить", имяКаталогаУдалить);
		
		#Область изменения_20180601_Карпачев_А_Ю
		формаИнтернетПочтовоеСообщениеПараметры.Вставить("АдаптироватьПодМашинныйРазбор", Ложь);
		#КонецОбласти
		
	КонецЕсли;
	
	Возврат формаИнтернетПочтовоеСообщениеПараметры;
	
КонецФункции

&НаКлиенте
Процедура КомандаИнтернетПочтовоеСообщениеОтправить(Команда)
	ИнтернетПочтовоеСообщениеОтправить();
КонецПроцедуры
