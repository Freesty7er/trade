&НаКлиенте
Перем тмпПредопределенныеИдентификаторы;
&НаКлиенте
Перем HTMLВыведен;

&НаКлиенте
Процедура ОкрытьОтчетТТН(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетПоПосещениям(Команда)
	Форма = ПолучитьФорму("Обработка.БПАГПанАгентЦентрУправленияТест.Форма.УПОтчетПоПосещениям");
	//Форма = ПолучитьФорму("Обработка.БПАГПанАгентЦентрУправления.Форма.УПФормаОтчетПоПосещениям");
	Форма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСинхронизацииОрганизаций(Команда)
	Форма = ПолучитьФорму("Обработка.БПАГПанАгентЦентрУправленияТест.Форма.УПФормаСинхронизацииОрганизаций");
	Форма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСинхронизацииСкладов(Команда)
	Форма = ПолучитьФорму("Обработка.БПАГПанАгентЦентрУправленияТест.Форма.УПФормаСинхронизацииСкладов");
	Форма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСинхронизацииНоменклатуры(Команда)
	Форма = ПолучитьФорму("Обработка.БПАГПанАгентЦентрУправленияТест.Форма.УПФормаСинхронизацииНоменклатуры");
	Форма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСинхронизацииАссортиментов(Команда)
	Форма = ПолучитьФорму("Обработка.БПАГПанАгентЦентрУправленияТест.Форма.УПФормаСинхронизацииАссортиментов");
	Форма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСинхронизацииПрайсов(Команда)
	Форма = ПолучитьФорму("Обработка.БПАГПанАгентЦентрУправленияТест.Форма.УПФормаСинхронизацииПрайсов");
	Форма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСинхронизацииКонтрагентов(Команда)
	ТекущаяФорма = ОпределитьФормуКонтрагентов();
	Форма = ПолучитьФорму(ТекущаяФорма);
	Форма.Открыть();	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПрофилейАгентов(Команда)
	// Вставить содержимое обработчика.
	Форма = ПолучитьФорму("Обработка.БПАГПанАгентЦентрУправленияТест.Форма.УПФормаПрофилейАгентов");
	Форма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСинхронизацииКлиентуры(Команда)
	Форма = ПолучитьФорму("Обработка.БПАГПанАгентЦентрУправленияТест.Форма.УПФормаСинхронизацииКлиентуры");
	Форма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСинхронизацииМаршрутов(Команда)
	Форма = ПолучитьФорму("Обработка.БПАГПанАгентЦентрУправленияТест.Форма.УПФормаМаршрутов");
	Форма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПланов(Команда)
	//Форма = ПолучитьФорму("РегистрСведений.БПАГПланы.ФормаСписка");
	Форма = ПолучитьФорму("Обработка.БПАГПанАгентЦентрУправленияТест.Форма.УПФормаПланов");
	Форма.Открыть();	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Объект.КаталогОбмена = БПАГ.БПАГПолучитьНастройку("1СКаталогОбмена");
	СпрИдентификаторы = Справочники.БПАГПредопределенныеРеквизитыКонтрагентов.Выбрать();
	Пока СпрИдентификаторы.Следующий() Цикл
		НоваяСтрока = ПредопределенныеИдентификаторы.Добавить();
		НоваяСтрока.Идентификатор = СпрИдентификаторы.Ссылка;
		НоваяСтрока.Порядок = СпрИдентификаторы.Порядок;
	КонецЦикла;	
	ПредопределенныеИдентификаторы.Сортировать("Порядок Возр");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСинхронизацииАгентов(Команда)
	// Вставить содержимое обработчика.
	Форма = ПолучитьФорму("Обработка.БПАГПанАгентЦентрУправленияТест.Форма.УПФормаСинхронизацииАгентов");
	Форма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	Форма = ПолучитьФорму("Обработка.БПАГПанАгентЦентрУправления.Форма.УПФормаНастроек");
	Форма.Открыть();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокАгентовСообщениеДня()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БПАГАгенты.Ссылка,
	|	БПАГАгенты.Наименование КАК Наименование,
	|	БПАГАгенты.Код
	|ИЗ
	|	Справочник.БПАГАгенты КАК БПАГАгенты
	|ГДЕ
	|	НЕ БПАГАгенты.ЭтоГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокБПАГАгентов.Добавить(Выборка.Ссылка, СокрЛП(Выборка.Код) + " | " + СокрЛП(Выборка.Наименование), Ложь);
	КонецЦикла;	
	Если СписокБПАГАгентов.Количество() > 0 Тогда
		СписокБПАГАгентов[0].Пометка = Истина;
	КонецЕсли;	
	
КонецПроцедуры

Процедура УстановитьВидимостьНастроекДокументов()
	
	НастройкиДокументов.Отбор.Элементы.Очистить();
	
	ЭлементыОтбора = НастройкиДокументов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементыОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Агент");
	ЭлементыОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементыОтбора.ПравоеЗначение = Справочники.БПАГАгенты.ПустаяСсылка();
	ЭлементыОтбора.Использование = Истина;
	
	ЭлементыОтбора = НастройкиДокументов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементыОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Профиль");
	ЭлементыОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементыОтбора.ПравоеЗначение = Справочники.БПАГПрофилиАгентов.ПустаяСсылка();
	ЭлементыОтбора.Использование = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Вставить содержимое обработчика.
				
	ЭтаФорма.Заголовок = СформироватьЗаголовокФормы();
	
	ЗаполнитьДеревоОбъектовВыгрузки();
	
	ЗаполнитьДеревоОбъектовЗагрузки();

	ОбновитьСписокАгентов();
	
	ОбновитьНадписиАвтообмена();
	
	ЗаполнитьСписокАгентовСообщениеДня();
	
	УстановитьВидимостьЗакладкиСтартовыйПомощник();
	
	ПризнакМодифицированности = Ложь;
	
	РасширенныйРежимФормыОбменаДанными = БПАГ.БПАГПолучитьНастройку("1СВидЗакладкиОбменДаннымиРасширенная");
	
	УстановитьВидимостьНастроекДокументов();
	
	ОбновитьТаблицуВидыФильтров();
	
	СоздатьАнкетыПриПервомЗапускеНаСервере();
	
	ОбновитьИнформациюПоЛицензиям();
КонецПроцедуры

Функция СформироватьЗаголовокФормы()
	ОбъектОбработка = ЭтаФорма.РеквизитФормыВЗначение("Объект");	
	Заголовок = "Пан Агент. Центр управления v."+ОбъектОбработка.ПолучитьВерсиюОбработки();
    Возврат Заголовок;
КонецФункции

Процедура ОбновитьСписокАгентов() Экспорт
	
	СпецификаПользователя = БПАГ.ПолучитьСпецификуПользователя();
	ТЗСтарые = Объект.ОбменАгенты.Выгрузить();
	
	Запрос = Новый Запрос;
	Если СпецификаПользователя = "SD" Тогда
		
		запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БПАГАгенты.Ссылка КАК Агент,
		|	БПАГАгенты.*
		|ИЗ
		|	Справочник.БПАГАгенты КАК БПАГАгенты
		|ГДЕ
		|	НЕ БПАГАгенты.ПометкаУдаления
		|	И НЕ БПАГАгенты.ЭтоГруппа
		|	И БПАГАгенты.ВерсияОбработкиОбмена = 1
		|
		|УПОРЯДОЧИТЬ ПО
		|	БПАГАгенты.Наименование";
		
	КонецЕсли;

	Выборка = Запрос.Выполнить().Выбрать();
	Объект.ОбменАгенты.Очистить();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.ОбменАгенты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если СпецификаПользователя = "SD" Тогда
			НоваяСтрока.Флаг = Истина;
	    Иначе
			СтараяСтрока = ТЗСтарые.Найти(НоваяСтрока.Агент, "Агент");
			Если СтараяСтрока <> Неопределено Тогда
				НоваяСтрока.Флаг = СтараяСтрока.Флаг;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДеревоОбъектовВыгрузки() 
	
	СпецификаПользователя = БПАГ.ПолучитьСпецификуПользователя();
	
	КолекцияДанных = ОбъектыВыгрузки.ПолучитьЭлементы();
	КолекцияДанных.Очистить();
	
	НоваяСтрока = КолекцияДанных.Добавить();
	НоваяСтрока.Представление = "Настройки";
	
	НоваяСтрока = КолекцияДанных.Добавить();
	НоваяСтрока.Представление = "Статусы документов";
	Если СпецификаПользователя = "SD" Тогда
		НоваяСтрока.Флаг = Истина;
	КонецЕсли;
	
	НоваяСтрока = КолекцияДанных.Добавить();
	НоваяСтрока.Представление = "Вопросы анкет";
	
	НоваяСтрока = КолекцияДанных.Добавить();
	НоваяСтрока.Представление = "Файлы картинок";
	
	НоваяСтрока = КолекцияДанных.Добавить();
	НоваяСтрока.Представление = "Товары";
	
	ПодчиненнаяКоллекцияДанных = НоваяСтрока.ПолучитьЭлементы();
	
	ПодчиненнаяСтрока = ПодчиненнаяКоллекцияДанных.Добавить();
	ПодчиненнаяСтрока.Представление = "Цены";
	Если СпецификаПользователя = "SD" Тогда
		ПодчиненнаяСтрока.Флаг = Истина;
	КонецЕсли;
	
	ПодчиненнаяСтрока = ПодчиненнаяКоллекцияДанных.Добавить();
	ПодчиненнаяСтрока.Представление = "Остатки";
	Если СпецификаПользователя = "SD" Тогда
		ПодчиненнаяСтрока.Флаг = Истина;
	КонецЕсли;
	
	ПодчиненнаяСтрока = ПодчиненнаяКоллекцияДанных.Добавить();
	ПодчиненнаяСтрока.Представление = "Картинки товаров";
	
	НоваяСтрока = КолекцияДанных.Добавить();
	НоваяСтрока.Представление = "Клиенты";
	Если СпецификаПользователя = "SD" Тогда
		НоваяСтрока.Флаг = Истина;
	КонецЕсли;

	
	ПодчиненнаяКоллекцияДанных = НоваяСтрока.ПолучитьЭлементы();
	ПодчиненнаяСтрока = ПодчиненнаяКоллекцияДанных.Добавить();
	ПодчиненнаяСтрока.Представление = "Долги";
	Если СпецификаПользователя = "SD" Тогда
		ПодчиненнаяСтрока.Флаг = Истина;
	КонецЕсли;
	
	подчиненнаяСтрока = ПодчиненнаяКоллекцияДанных.Добавить();
	подчиненнаяСтрока.Представление = "Маршруты";
	Если спецификаПользователя = "SD" Тогда
		подчиненнаяСтрока.Флаг = Истина;
	КонецЕсли;
	
	ПодчиненнаяСтрока = ПодчиненнаяКоллекцияДанных.Добавить();
	ПодчиненнаяСтрока.Представление = "Картинки клиентов";
	
	НоваяСтрока = КолекцияДанных.Добавить();
	НоваяСтрока.Представление = "Склады";
	
	НоваяСтрока = КолекцияДанных.Добавить();
	НоваяСтрока.Представление = "Организации";
	
	НоваяСтрока = КолекцияДанных.Добавить();
	НоваяСтрока.Представление = "Планы";
	
	НоваяСтрока = КолекцияДанных.Добавить();
	НоваяСтрока.Представление = "Фактические продажи";
	
	НоваяСтрока = КолекцияДанных.Добавить();
	НоваяСтрока.Представление = "Фактическая история продаж";
	
	НоваяСтрока = КолекцияДанных.Добавить();
	НоваяСтрока.Представление = "Прогноз продаж";
	
	НоваяСтрока = КолекцияДанных.Добавить();
	НоваяСтрока.Представление = "Обратная выгрузка документов";
	
	ПодчиненнаяКоллекцияДанных = НоваяСтрока.ПолучитьЭлементы();
	
	//ПодчиненнаяСтрока = ПодчиненнаяКоллекцияДанных.Добавить();
	//ПодчиненнаяСтрока.Представление = "Заявки";
	
	ПодчиненнаяСтрока = ПодчиненнаяКоллекцияДанных.Добавить();
	ПодчиненнаяСтрока.Представление = "Поступления";
	
	ПодчиненнаяСтрока = ПодчиненнаяКоллекцияДанных.Добавить();
	ПодчиненнаяСтрока.Представление = "Перемещения";
	
	ПодчиненнаяСтрока = ПодчиненнаяКоллекцияДанных.Добавить();
	ПодчиненнаяСтрока.Представление = "Реализации";
	Если СпецификаПользователя = "SD" Тогда
		ПодчиненнаяСтрока.Флаг = Истина;
	КонецЕсли;

	
	ПодчиненнаяСтрока = ПодчиненнаяКоллекцияДанных.Добавить();
	ПодчиненнаяСтрока.Представление = "Анкеты";
	Если СпецификаПользователя = "SD" Тогда
		ПодчиненнаяСтрока.Флаг = Ложь;
	КонецЕсли;

	
	//ПодчиненнаяСтрока = ПодчиненнаяКоллекцияДанных.Добавить();
	//ПодчиненнаяСтрока.Представление = "Мерчандайзинг";

КонецПроцедуры

Процедура ЗаполнитьДеревоОбъектовЗагрузки() 
	СпецификаПользователя = БПАГ.ПолучитьСпецификуПользователя();
	
	КолекцияДанных = ОбъектыЗагрузки.ПолучитьЭлементы();
	КолекцияДанных.Очистить();
	
	НоваяСтрока = КолекцияДанных.Добавить();
	НоваяСтрока.Представление = "Заявка";
	Если СпецификаПользователя = "SD" Тогда
		НоваяСтрока.Флаг = Истина;
	КонецЕсли;
	
	Если СпецификаПользователя <> "SD" Тогда
		НоваяСтрока = КолекцияДанных.Добавить();
		НоваяСтрока.Представление = "Реализация";
	КонецЕсли;
	
	НоваяСтрока = КолекцияДанных.Добавить();
	НоваяСтрока.Представление = "ПКО";
	Если СпецификаПользователя = "SD" Тогда
		НоваяСтрока.Флаг = Истина;
	КонецЕсли;
	
	Если СпецификаПользователя <> "SD" Тогда
		НоваяСтрока = КолекцияДанных.Добавить();
		НоваяСтрока.Представление = "Заказ на склад";
	КонецЕсли;
	
	НоваяСтрока = КолекцияДанных.Добавить();
	НоваяСтрока.Представление = "Возврат от покупателя";
	Если СпецификаПользователя = "SD" Тогда
		НоваяСтрока.Флаг = Истина;
	КонецЕсли;
	
	НоваяСтрока = КолекцияДанных.Добавить();
	НоваяСтрока.Представление = "Анкета";
	Если СпецификаПользователя = "SD" Тогда
		НоваяСтрока.Флаг = Истина;
	КонецЕсли;
	
	Если СпецификаПользователя <> "SD" Тогда
		НоваяСтрока = КолекцияДанных.Добавить();
		НоваяСтрока.Представление = "Поступление";
	КонецЕсли;
	
	НоваяСтрока = КолекцияДанных.Добавить();
	НоваяСтрока.Представление = "Мерчандайзинг";
	Если СпецификаПользователя = "SD" Тогда
		НоваяСтрока.Флаг = Истина;
	КонецЕсли;

	
	НоваяСтрока = КолекцияДанных.Добавить();
	НоваяСтрока.Представление = "Координаты клиентов";
	Если СпецификаПользователя = "SD" Тогда
		//НоваяСтрока.Флаг = Истина;
	КонецЕсли;
	
	НоваяСтрока = КолекцияДанных.Добавить();
	НоваяСтрока.Представление = "Фото организаций";
	
	НоваяСтрока = КолекцияДанных.Добавить();
	НоваяСтрока.Представление = "Фото торговых точек";
	
	Если СпецификаПользователя <> "SD" Тогда
		НоваяСтрока = КолекцияДанных.Добавить();
		НоваяСтрока.Представление = "Фото товаров";
		
		НоваяСтрока = КолекцияДанных.Добавить();
		НоваяСтрока.Представление = "Фото анкет";
	КонецЕсли;
	
	НоваяСтрока = КолекцияДанных.Добавить();
	НоваяСтрока.Представление = "Журнал работы агента";
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	ВыгрузитьДанные();
КонецПроцедуры

Процедура ВыгрузитьДанные()
	НашОбъект = РеквизитФормыВЗначение("Объект");
   	НашОбъект.ОбновитьКэшНастроекАгентов();
	
	СтрокаВыгрузки = "";
	Для Каждого тмпСтрока Из ОбъектыВыгрузки.ПолучитьЭлементы() Цикл
		Если тмпСтрока.Флаг Тогда
			СтрокаВыгрузки = СтрокаВыгрузки + тмпСтрока.Представление + ",";
		КонецЕсли;
		Для Каждого тмпПодСтрока Из тмпСтрока.ПолучитьЭлементы() Цикл
			Если тмпПодСтрока.Флаг Тогда
				СтрокаВыгрузки = СтрокаВыгрузки + тмпПодСтрока.Представление + ",";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	СтрокаВыгрузки = Лев(СтрокаВыгрузки, СтрДлина(СтрокаВыгрузки) - 1);
	Если СтрокаВыгрузки = "" Тогда
		НашОбъект.ОтладочноеСообщение("Не выбрано ни одного объекта для выгрузки!");
		Возврат;
	КонецЕсли;
	
	СписокАгентов = Объект.ОбменАгенты.Выгрузить();
	СписокАгентов.Очистить();
	Для Каждого тмпСтрока Из Объект.ОбменАгенты Цикл
		Если Не тмпСтрока.Агент.ЭтоГруппа Тогда
			Если тмпСтрока.Флаг Тогда
				НоваяСтрока = СписокАгентов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, тмпСтрока);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если СписокАгентов.Количество() = 0 Тогда
		НашОбъект.ОтладочноеСообщение("Не выбрано ни одного агента для выгрузки!");
		Возврат;
	КонецЕсли;
	
	//Произведем обмен
	Попытка
		Если НЕ НашОбъект.МодульОбъектаОбменДанными("Выгрузка", СтрокаВыгрузки, СписокАгентов) Тогда
			НашОбъект.ОтладочноеСообщение("Объекты не выгружены!");
		КонецЕсли;
	Исключение
		НашОбъект.ОтладочноеСообщение("Объекты не выгружены!");
		сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	ЗагрузитьДанные();
КонецПроцедуры

Процедура ЗагрузитьДанные()
	НашОбъект = РеквизитФормыВЗначение("Объект");
   	НашОбъект.ОбновитьКэшНастроекАгентов();
	
	СтрокаЗагрузки = "";
	Для Каждого тмпСтрока Из ОбъектыЗагрузки.ПолучитьЭлементы() Цикл
		Если тмпСтрока.Флаг Тогда
			СтрокаЗагрузки = СтрокаЗагрузки + тмпСтрока.Представление + ",";
		КонецЕсли;
		Для Каждого тмпПодСтрока Из тмпСтрока.ПолучитьЭлементы() Цикл
			Если тмпПодСтрока.Флаг Тогда
				СтрокаЗагрузки = СтрокаЗагрузки + тмпПодСтрока.Представление + ",";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	СтрокаЗагрузки = Лев(СтрокаЗагрузки, СтрДлина(СтрокаЗагрузки) - 1);
	Если СтрокаЗагрузки = "" Тогда
		НашОбъект.ОтладочноеСообщение("Не выбрано ни одного объекта для загрузки!");
		Возврат;
	КонецЕсли;
	
	СписокАгентов = Объект.ОбменАгенты.Выгрузить();
	СписокАгентов.Очистить();
	Для Каждого тмпСтрока Из Объект.ОбменАгенты Цикл
		Если Не тмпСтрока.Агент.ЭтоГруппа Тогда
			Если тмпСтрока.Флаг Тогда
				НоваяСтрока = СписокАгентов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, тмпСтрока);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если СписокАгентов.Количество() = 0 Тогда
		НашОбъект.ОтладочноеСообщение("Не выбрано ни одного агента для загрузки!");
		Возврат;
	КонецЕсли;
	
	//Проверим пути
	Путь = НашОбъект.КаталогОбмена;
	Файл = Новый Файл(Путь);
	Если НЕ Файл.Существует() Тогда
		НашОбъект.ОтладочноеСообщение("ВНИМАНИЕ! Каталог " + Путь + " не существует! Загрузка невозможна. Измените в настройках обмена путь к каталогу обмена на правильный!");
		Возврат;
	КонецЕсли;
	
	Для Каждого тмпСтрока Из СписокАгентов Цикл
		Путь = НашОбъект.КаталогОбмена + СокрЛП(тмпСтрока.Код) + "\";
		Файл = Новый Файл(Путь);
		Если НЕ Файл.Существует() Тогда
			НашОбъект.ОтладочноеСообщение("ВНИМАНИЕ! Каталог " + Путь + " не существует! Загрузка невозможна. Измените в настройках обмена путь к каталогу обмена на правильный или активизируйте нового агента!");
		КонецЕсли;
	КонецЦикла;
	
	//Произведем обмен
	Попытка
		Если НЕ НашОбъект.МодульОбъектаОбменДанными("Загрузка", СтрокаЗагрузки, СписокАгентов) Тогда
			НашОбъект.ОтладочноеСообщение("Объекты не загружены! /529");
		КонецЕсли;	
	Исключение
		НашОбъект.ОтладочноеСообщение("Объекты не загружены! /532");
	КонецПопытки;
	
	
КонецПроцедуры

Функция ОпределитьФормуКонтрагентов()
	
	ВидПрикладногоРешения = БПАГ.ПолучитьВидПрикладногоРешения();
	
	Если ВидПрикладногоРешения = "УТ11" Тогда
		ТекФорма = "Обработка.БПАГПанАгентЦентрУправленияТест.Форма.УПФормаСинхронизацииКонтрагентов";
		Возврат ТекФорма;
	Иначе
		ТекФорма = "Обработка.БПАГПанАгентЦентрУправленияТест.Форма.УПФормаСинхронизацииКонтрагентов";
		Возврат ТекФорма;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура СписокВыгрузкиОтметитьВсе(Команда)
	Для Каждого тмпСтрока Из ОбъектыВыгрузки.ПолучитьЭлементы() Цикл
		тмпСтрока.Флаг = Истина;
		Для Каждого тмпПодСтрока Из тмпСтрока.ПолучитьЭлементы() Цикл
			тмпПодСтрока.Флаг = Истина;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СписокВыгрузкиСнятьВсе(Команда)
	Для Каждого тмпСтрока Из ОбъектыВыгрузки.ПолучитьЭлементы() Цикл
		тмпСтрока.Флаг = Ложь;
		Для Каждого тмпПодСтрока Из тмпСтрока.ПолучитьЭлементы() Цикл
			тмпПодСтрока.Флаг = Ложь;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СписокЗагрузкиОтметитьВсе(Команда)
	Для Каждого тмпСтрока Из ОбъектыЗагрузки.ПолучитьЭлементы() Цикл
		тмпСтрока.Флаг = Истина;
		Для Каждого тмпПодСтрока Из тмпСтрока.ПолучитьЭлементы() Цикл
			тмпПодСтрока.Флаг = Истина;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СписокЗагрузкиСнятьВсе(Команда)
	Для Каждого тмпСтрока Из ОбъектыЗагрузки.ПолучитьЭлементы() Цикл
		тмпСтрока.Флаг = Ложь;
		Для Каждого тмпПодСтрока Из тмпСтрока.ПолучитьЭлементы() Цикл
			тмпПодСтрока.Флаг = Ложь;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СписокАгентовОтметитьВсех(Команда)
	Для Каждого тмпСтрока Из Объект.ОбменАгенты Цикл
		тмпСтрока.Флаг = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СписокАгентовСнятьВсе(Команда)
	Для Каждого тмпСтрока Из Объект.ОбменАгенты Цикл
		тмпСтрока.Флаг = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура НадписьРасписаниеВыгрузкиНажатие(Элемент)
	//Задание = ПолучитьРегламентноеЗадание("БПАГВыгрузкаДанных");
	//
	//Диалог = Новый ДиалогРасписанияРегламентногоЗадания(Задание);
	//Если Диалог.ОткрытьМодально() Тогда
	//	ТекРасписание = Диалог.Расписание;
	//	ЗаписатьРасписание("БПАГВыгрузкаДанных",ТекРасписание);
	//КонецЕсли;
	//
	//ОбновитьНадписиАвтообмена();
КонецПроцедуры

Функция ПолучитьРегламентноеЗадание(ТекЗадание)
	Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания[ТекЗадание]);
	Возврат Задание.Расписание;
КонецФункции

Процедура ЗаписатьРасписание(ТекЗадание,ТекРасписание)
	Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания[ТекЗадание]);
	Задание.Расписание = ТекРасписание;
	Задание.Записать();
КонецПроцедуры

&НаКлиенте
Процедура НадписьРасписаниеЗагрузкиНажатие(Элемент)
	Задание = ПолучитьРегламентноеЗадание("БПАГЗагрузкаДанных");
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(Задание);
	Если Диалог.ОткрытьМодально() Тогда
		ТекРасписание = Диалог.Расписание;
		ЗаписатьРасписание("БПАГЗагрузкаДанных",ТекРасписание);
	КонецЕсли;
	
	ОбновитьНадписиАвтообмена();
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписиАвтообмена()
	
	ВидПрикладногоРешения = БПАГ.ПолучитьВидПрикладногоРешения();
	
	Элементы.НадписьНеЗапущен.Заголовок = "Не запущен пользователь для регламентных заданий!";
	
	ЭтоКлиентСервернаяБаза = Не Найти(СтрокаСоединенияИнформационнойБазы(), "File=");
	Если ЭтоКлиентСервернаяБаза Тогда
		РегламентныеЗаданияДоступны = Истина;
	Иначе
		Если (ВидПрикладногоРешения = "УТ11") ИЛИ (ВидПрикладногоРешения = "УНФ") Тогда
			РегламентныеЗаданияДоступны = Истина;
		Иначе	
			Попытка //NYI Для УТ - Код, а не "ИдентификаторПользователяИБ"
				ИдентификаторПользователяДляРеглЗаданий = Константы.ПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте.Получить().ИдентификаторПользователяИБ;
				СоединенияИнформационнойБазы = ПолучитьСоединенияИнформационнойБазы();
				РегламентныеЗаданияДоступны = Ложь;
				Для Каждого Соединение Из СоединенияИнформационнойБазы Цикл                   
					Если (Соединение.Пользователь.УникальныйИдентификатор = ИдентификаторПользователяДляРеглЗаданий) И (СокрЛП(Соединение.ИмяПриложения <> "Designer")) Тогда
						РегламентныеЗаданияДоступны = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Исключение
				РегламентныеЗаданияДоступны = Ложь;	
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПравоДоступа("Администрирование", Метаданные) Тогда
		РегламентныеЗаданияДоступны = Ложь;
		Элементы.НадписьНеЗапущен.Заголовок = "Нет прав для регламентных заданий!";
	КонецЕсли;
	
	Если РегламентныеЗаданияДоступны И 1=2 Тогда
		Элементы.НадписьНеЗапущен.Видимость = Ложь;
		
		Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.БПАГВыгрузкаДанных);
		Объект.Автовыгрузка = Задание.Использование;
		Элементы.НадписьРасписаниеВыгрузки.Заголовок = Задание.Расписание;
		Попытка
			Фон = Задание.ПоследнееЗадание;
			Если Фон <> Неопределено Тогда
				Элементы.НадписьСтатусВыгрузки.Заголовок = "[" + Фон.Начало + " - " + Фон.Конец + "] " + Фон.Состояние + ?(Фон.ИнформацияОбОшибке = Неопределено, "", ": " + Фон.ИнформацияОбОшибке.Описание + " (" + Фон.ИнформацияОбОшибке.ИмяМодуля + ": " + Фон.ИнформацияОбОшибке.НомерСтроки + ")");
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.БПАГЗагрузкаДанных);
		Объект.Автозагрузка = Задание.Использование;
		Элементы.НадписьРасписаниеЗагрузки.Заголовок = Задание.Расписание;
		Попытка
			Фон = Задание.ПоследнееЗадание;
			Если Фон <> Неопределено Тогда
				Элементы.НадписьСтатусЗагрузки.Заголовок = "[" + Фон.Начало + " - " + Фон.Конец + "] " + Фон.Состояние + ?(Фон.ИнформацияОбОшибке = Неопределено, "", ": " + Фон.ИнформацияОбОшибке.Описание + " (" + Фон.ИнформацияОбОшибке.ИмяМодуля + ": " + Фон.ИнформацияОбОшибке.НомерСтроки + ")");
			КонецЕсли;
		Исключение
		КонецПопытки;
	Иначе	
		Элементы.Автовыгрузка.Доступность = Ложь;
		Элементы.Автозагрузка.Доступность = Ложь;
		Элементы.НадписьРасписаниеВыгрузки.Доступность = Ложь;
		Элементы.НадписьРасписаниеЗагрузки.Доступность = Ложь;
		
		Элементы.НадписьНеЗапущен.Видимость = Истина;
		
	КонецЕсли;	
	//Протестировать 
	//Включение автообмена и редактирование расписания возможно только пользователями, у которых доступна роль "Пан Агент - Администратор" (БПАГАдминистратор).
	//Если Не РольДоступна("БПАГАдминистратор") Тогда
	//	
	//	ЭлементыФормы.Автовыгрузка.Доступность = Ложь;
	//	ЭлементыФормы.Автозагрузка.Доступность = Ложь;
	//	ЭлементыФормы.РасписаниеВыгрузки.Доступность = Ложь;
	//	ЭлементыФормы.РасписаниеЗагрузки.Доступность = Ложь;
	//	
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АвтовыгрузкаПриИзменении(Элемент)
	УстановитьАвтовыгрузку();
КонецПроцедуры

Процедура УстановитьАвтовыгрузку()
	//Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.БПАГВыгрузкаДанных);
	//
	//Задание.Использование = Объект.Автовыгрузка;
	//Задание.Записать();
КонецПроцедуры

&НаКлиенте
Процедура АвтозагрузкаПриИзменении(Элемент)
	УстановитьАвтозагрузку();
КонецПроцедуры

Процедура УстановитьАвтозагрузку()
	Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.БПАГЗагрузкаДанных);
	
	Задание.Использование = Объект.Автозагрузка;
	Задание.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАвтообмен(Команда)
	ОбновитьНадписиАвтообмена();
КонецПроцедуры

Процедура ОбновитьЦветаТаблиц()
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьформуАнкет(Команда)
	Форма = ПолучитьФорму("Обработка.БПАГПанАгентЦентрУправленияТест.Форма.УПФормаАнкет");
	Форма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтправитьПочтуВТехподдержкуНажатие(Элемент)
	ЗапуститьПриложение("mailto:support@panagent.ru");
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПерейтиНаСайтНажатие(Элемент)
	ЗапуститьПриложение("www.panagent.ru");
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокАгентов1(Команда)
	ОбновитьСписокАгентов();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормаОтображенияЛога(Команда)
	Форма = ПолучитьФорму("Обработка.БПАГПанАгентЦентрУправленияТест.Форма.УПФормаЖурналаРаботыАгентов");
	Форма.Открыть();
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСообщениеАгентамНаСервере()
	
	//Поиск Общей настройки для всех агентов
	ОбщееСообщениеДня = БПАГ.БПАГПолучитьНастройку("messageOfTheDay");
	
	//Удаляем все записи "Сообщение дня"
	НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
	НастройкаСообщениеДня = Справочники.БПАГВидыНастроекАгентов.НайтиПоКоду("messageOfTheDay");
	НаборЗаписей.Отбор.ВидНастройки.Установить(НастройкаСообщениеДня);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
	//Создаем одну общую запись
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Агент = Справочники.БПАГАгенты.ПустаяСсылка();
	НоваяЗапись.Профиль = Справочники.БПАГПрофилиАгентов.ПустаяСсылка();
	НоваяЗапись.ВидНастройки = НастройкаСообщениеДня;
	НоваяЗапись.Значение = СообщениеДня;
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьСообщениеАгентам(Команда)
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = "Внимание! Сообщение будет отправлено всем агентам!";
	Ответ = Вопрос(Текст, Режим, 0, , "Пан Агент");
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	ЗаписатьСообщениеАгентамНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСообщениеАгентуНаСервере()
	
	//Поиск Общей настройки для всех агентов
	ОбщееСообщениеДня = БПАГ.БПАГПолучитьНастройку("messageOfTheDay");
	
	Для Каждого ТмпСтрока из СписокБПАГАгентов Цикл
		Если ТмпСтрока.Пометка Тогда
			ТекущийАгент = ТмпСтрока.Значение;
			Если СокрЛП(ОбщееСообщениеДня) = СокрЛП(СообщениеДня) Тогда
				//Найти запись Агента и удалить
				НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
				НастройкаСообщениеДня = Справочники.БПАГВидыНастроекАгентов.НайтиПоКоду("messageOfTheDay");
				Если НЕ НастройкаСообщениеДня.Пустая() Тогда
					НаборЗаписей.Отбор.Агент.Установить(ТекущийАгент);
					НаборЗаписей.Отбор.Профиль.Установить(Справочники.БПАГПрофилиАгентов.ПустаяСсылка());
					НаборЗаписей.Отбор.ВидНастройки.Установить(НастройкаСообщениеДня);
					НаборЗаписей.Прочитать();
					НаборЗаписей.Очистить();
					НаборЗаписей.Записать();
				КонецЕсли;
				
			Иначе
				//Создать новую запись для Агента
				НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
				НастройкаСообщениеДня = Справочники.БПАГВидыНастроекАгентов.НайтиПоКоду("messageOfTheDay");
				Если НЕ НастройкаСообщениеДня.Пустая() Тогда
					НаборЗаписей.Отбор.Агент.Установить(ТекущийАгент);
					НаборЗаписей.Отбор.Профиль.Установить(Справочники.БПАГПрофилиАгентов.ПустаяСсылка());
					НаборЗаписей.Отбор.ВидНастройки.Установить(НастройкаСообщениеДня);
					НаборЗаписей.Прочитать();
					НаборЗаписей.Очистить();
					НоваяЗапись = НаборЗаписей.Добавить();
					НоваяЗапись.Агент = ТекущийАгент;
					НоваяЗапись.Профиль = Справочники.БПАГПрофилиАгентов.ПустаяСсылка();
					НоваяЗапись.ВидНастройки = НастройкаСообщениеДня;
					НоваяЗапись.Значение = СообщениеДня;
					НаборЗаписей.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьСообщениеАгенту(Команда)
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = "Внимание! Сообщение будет отправлено следующим агентам: " + Символы.ПС + Символы.ПС;
	Для Каждого ТмпСтрока из СписокБПАГАгентов Цикл
		Если ТмпСтрока.Пометка Тогда
			Текст = Текст + ТмпСтрока.Значение + Символы.ПС;
        КонецЕсли;
	КонецЦикла;
	Ответ = Вопрос(Текст, Режим, 0, , "Пан Агент");
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	ЗаписатьСообщениеАгентуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СписокБПАГАгентовПриАктивизацииСтроки(Элемент)
	//Флаг = 1 - Флаг;
	//Убрали инверсию при активизации строки
	Если СписокБПАГАгентов.Количество() > 0 Тогда
	//	СписокБПАГАгентов.НайтиПоИдентификатору(Элементы.СписокБПАГАгентов.ТекущаяСтрока).Пометка = Не Элемент.ТекущиеДанные.Пометка;
		СообщениеДня = БПАГ.БПАГПолучитьНастройку("messageOfTheDay", Элемент.ТекущиеДанные.Значение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЖурналаАнкет(Команда)
	Форма =  ПолучитьФорму("Документ.БПАГАнкета.ФормаСписка");
	Форма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокАгентовГлавная(Команда)
	СписокБПАГАгентов.Очистить();
	ЗаполнитьСписокАгентовСообщениеДня();	
КонецПроцедуры

&НаКлиенте
Процедура ИнвертироватьСписокАгентовГлавная(Команда)
	Для Каждого ТмпСтрока из СписокБПАГАгентов Цикл
		ТмпСтрока.Пометка = НЕ ТмпСтрока.Пометка;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СписокБПАГАгентовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	//Флаг = 1 - Флаг;
	СписокБПАГАгентов.НайтиПоИдентификатору(Элементы.СписокБПАГАгентов.ТекущаяСтрока).Пометка = Не Элемент.ТекущиеДанные.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	Если Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг1 Тогда
		Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг2;
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг2 Тогда
		Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг3;
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг3 Тогда
		Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг4;
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг4 Тогда
		Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг5;
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг5 Тогда
		Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг6;
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг6 Тогда
		Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг7;
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг7 Тогда
		Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг8;
	КонецЕсли;	
	УстановитьТекущуюСтраницуПанелиНавигации();
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Если Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг2 Тогда
		Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг1;
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг3 Тогда
		Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг2;
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг4 Тогда
		Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг3;
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг5 Тогда
		Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг4;
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг6 Тогда
		Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг5;
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг7 Тогда
		Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг6;
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг8 Тогда
		Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг7;
	КонецЕсли;
	
	УстановитьТекущуюСтраницуПанелиНавигации();

КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	//Установить значения констант по умолчанию
	НастройкиСистемыПоУмолчанию();
	//Выполнить выгрузку данных агенту
	//ОткрытьСтраницуВыгрузки
	//Из помощника всегда открываем краткий вариант страницы "Обмена данными"
	Элементы.Навигация.ТекущаяСтраница = Элементы.ОбменДанными;
	Элементы.ВариантыОбменаДанными.ТекущаяСтраница = Элементы.СтраницаКраткая;
	ПереходНаСтраницуОбменДанными();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтраницуПанелиНавигации()
	
	Если Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг1 Тогда
		Элементы.НавигацияПереходы.ТекущаяСтраница = Элементы.НавигацияНачало;
		Элементы.НачалоДалее.КнопкаПоУмолчанию = Истина;
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг8 Тогда //Переход на последнюю страницу
		Элементы.НавигацияПереходы.ТекущаяСтраница = Элементы.НавигацияОкончание;
		Элементы.ОкончаниеГотово.КнопкаПоУмолчанию = Истина;
	Иначе
		Элементы.НавигацияПереходы.ТекущаяСтраница = Элементы.НавигацияПродолжение;
		Элементы.ПродолжениеДалее.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
	//Добавим проверку на доступность элементов, учитывая заполнение предыдущих данных,
	//которые необходимы для выгрузки на устройство
	//Запись в буферные справочники
	Если Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг3 Тогда
		//Переход с закладки Организации на закладку Склады
		Если ПризнакМодифицированности Тогда
			ЗаписатьОрганизацииПомощник();
			ПризнакМодифицированности = Ложь;
			Элементы.СписокСклады.Доступность = Истина;
			//Если после записи справочник пустой (пользователь просто поставил и убрал галку)
			СправочникЗаполнен = ПроверитьЗаполнениеБуферногоСтравочника("БПАГОрганизации");
			Если НЕ СправочникЗаполнен Тогда
				СообщениеОбОшибкеПомощник("Организации");
				Элементы.СписокСклады.Доступность = Ложь;
			КонецЕсли;	
			Если ОсновнаяОрганизацияПомощник.Пустая() Тогда
				Сообщить("Необходимо заполнить поле 'Основная организации'");
				Элементы.СписокСклады.Доступность = Ложь;
			КонецЕсли;	
		Иначе
			//Если на странице изменений не вносили, проверим пустой ли буферный справочник
			Элементы.СписокСклады.Доступность = Истина;
			СправочникЗаполнен = ПроверитьЗаполнениеБуферногоСтравочника("БПАГОрганизации");
			Если НЕ СправочникЗаполнен Тогда
				СообщениеОбОшибкеПомощник("Организации");
				Элементы.СписокСклады.Доступность = Ложь;
			КонецЕсли;	
		КонецЕсли;	
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг4 Тогда
		//Переход с закладки Склады на закладку Номенклатура
		Если ПризнакМодифицированности Тогда
			ЗаписатьСкладыПомощник();
			ПризнакМодифицированности = Ложь;
			Элементы.СписокНоменклатура.Доступность = Истина;
			//Если после записи справочник пустой (пользователь просто поставил и убрал галку)
			СправочникЗаполнен = ПроверитьЗаполнениеБуферногоСтравочника("БПАГСклады");
			Если НЕ СправочникЗаполнен Тогда
				СообщениеОбОшибкеПомощник("Склады");
				Элементы.СписокНоменклатура.Доступность = Ложь;
			КонецЕсли;
			Если ОсновнойЦентральныйСкладПомощник.Пустая() Тогда
				Сообщить("Необходимо заполнить поле 'Основной центральный склад'");
				Элементы.СписокНоменклатура.Доступность = Ложь;
			КонецЕсли;	
			Если ОсновнойСкладТранспортПомощник.Пустая() Тогда
				Сообщить("Необходимо заполнить поле 'Основной склад-транспорт'");
				Элементы.СписокНоменклатура.Доступность = Ложь;
			КонецЕсли;	
			Если ОсновнойСкладВозвратаПомощник.Пустая() Тогда
				Сообщить("Необходимо заполнить поле 'Основной склад возврата'");
				Элементы.СписокНоменклатура.Доступность = Ложь;
			КонецЕсли;	
		Иначе
			//Если на странице изменений не вносили, проверим пустой ли буферный справочник
			Элементы.СписокНоменклатура.Доступность = Истина;
			СправочникЗаполнен = ПроверитьЗаполнениеБуферногоСтравочника("БПАГСклады");
			Если НЕ СправочникЗаполнен Тогда
				СообщениеОбОшибкеПомощник("Склады");
				Элементы.СписокНоменклатура.Доступность = Ложь;
			КонецЕсли;	
		КонецЕсли;	
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг5 Тогда
		//Переход с закладки Номенклатура на закладку Контрагенты
		Если ПризнакМодифицированности Тогда
			ЗаписатьНоменклатураПомощник();
			ПризнакМодифицированности = Ложь;
			Элементы.СписокКонтрагенты.Доступность = Истина;
			//Если после записи справочник пустой (пользователь просто поставил и убрал галку)
			СправочникЗаполнен = ПроверитьЗаполнениеБуферногоСтравочника("БПАГНоменклатура");
			Если НЕ СправочникЗаполнен Тогда
				СообщениеОбОшибкеПомощник("Номенклатура");
				Элементы.СписокКонтрагенты.Доступность = Ложь;
			КонецЕсли;	
		Иначе
			//Если на странице изменений не вносили, проверим пустой ли буферный справочник
			Элементы.СписокКонтрагенты.Доступность = Истина;
			СправочникЗаполнен = ПроверитьЗаполнениеБуферногоСтравочника("БПАГНоменклатура");
			Если НЕ СправочникЗаполнен Тогда
				СообщениеОбОшибкеПомощник("Номенклатура");
				Элементы.СписокКонтрагенты.Доступность = Ложь;
			КонецЕсли;	
		КонецЕсли;	
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг6 Тогда
		//Переход с закладки Контрагенты на закладку Прайсы
		Если ПризнакМодифицированности Тогда
			ЗаписатьКонтрагентыПомощник();
			ПризнакМодифицированности = Ложь;
			Элементы.СписокПрайсы.Доступность = Истина;
			//Если после записи справочник пустой (пользователь просто поставил и убрал галку)
			СправочникЗаполнен = ПроверитьЗаполнениеБуферногоСтравочника("БПАГКонтрагенты");
			Если НЕ СправочникЗаполнен Тогда
				СообщениеОбОшибкеПомощник("Контрагенты");
				Элементы.СписокПрайсы.Доступность = Ложь;
			КонецЕсли;	
		Иначе
			//Если на странице изменений не вносили, проверим пустой ли буферный справочник
			Элементы.СписокПрайсы.Доступность = Истина;
			СправочникЗаполнен = ПроверитьЗаполнениеБуферногоСтравочника("БПАГКонтрагенты");
			Если НЕ СправочникЗаполнен Тогда
				СообщениеОбОшибкеПомощник("Контрагенты");
				Элементы.СписокПрайсы.Доступность = Ложь;
			КонецЕсли;	
		КонецЕсли;	
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг7 Тогда
		//Переход с закладки Прайсы на закладку Агенты
		Если ПризнакМодифицированности Тогда
			ЗаписатьПрайсыПомощник();
			ПризнакМодифицированности = Ложь;
			Элементы.СписокФизЛица.Доступность = Истина;
			//Если после записи справочник пустой (пользователь просто поставил и убрал галку)
			СправочникЗаполнен = ПроверитьЗаполнениеБуферногоСтравочника("БПАГПрайсы");
			Если НЕ СправочникЗаполнен Тогда
				СообщениеОбОшибкеПомощник("Прайсы");
				Элементы.СписокФизЛица.Доступность = Ложь;
			КонецЕсли;
			Если ОсновнойТипЦенПомощник.Пустая() Тогда
				Сообщить("Необходимо заполнить поле 'Основной тип цен'");
				Элементы.СписокФизЛица.Доступность = Ложь;
			КонецЕсли;	
		Иначе
			//Если на странице изменений не вносили, проверим пустой ли буферный справочник
			Элементы.СписокФизЛица.Доступность = Истина;
			СправочникЗаполнен = ПроверитьЗаполнениеБуферногоСтравочника("БПАГПрайсы");
			Если НЕ СправочникЗаполнен Тогда
				СообщениеОбОшибкеПомощник("Прайсы");
				Элементы.СписокФизЛица.Доступность = Ложь;
			КонецЕсли;	
		КонецЕсли;	
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг8 Тогда
		//Переход с закладки Агенты на закладку Маршруты
		Если ПризнакМодифицированности Тогда
			СправочникЗаполнен = ПроверитьЗаполнениеБуферногоСтравочника("БПАГАгенты");
			Если НЕ СправочникЗаполнен Тогда
				//Первое заполнение справочника
				ПервоначальноеЗаполнениеАгентов = Истина;
				ПрефиксКода = ПроверитьПрефикс();
				Если ПрефиксКода = "0" Тогда
					Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг7;
					Сообщить("Каталог с префиксом: '" + ПрефиксКодаАгентов + "' уже существует на тестовом сервере! Необходимо выбрать другой префикс!");
					ПризнакМодифицированности = Ложь;
					УстановитьТекущуюСтраницуПанелиНавигации();
					ПризнакМодифицированности = Истина;
				ИначеЕсли ПрефиксКода = "1" Тогда
					Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг7;
					Сообщить("Префикс должен состоять из заглавных букв английского алфавита!");
					ПризнакМодифицированности = Ложь;
					УстановитьТекущуюСтраницуПанелиНавигации();
					ПризнакМодифицированности = Истина;
				Иначе
					ЗаписатьДатуЗапретаНаТестовыйФТП();
					ЗаписатьАгентыПомощник();
					ПризнакМодифицированности = Ложь;
					//Если после записи справочник пустой (пользователь просто поставил и убрал галку)
					СправочникЗаполнен = ПроверитьЗаполнениеБуферногоСтравочника("БПАГАгенты");
					Если НЕ СправочникЗаполнен Тогда
						СообщениеОбОшибкеПомощник("Агенты");
						Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг7;
						ПризнакМодифицированности = Ложь;
						УстановитьТекущуюСтраницуПанелиНавигации();
					КонецЕсли;	
				КонецЕсли;	
			Иначе
				//В справочнике уже есть агенты, проверять префикс не надо
				ЗаписатьАгентыПомощник();
				ПризнакМодифицированности = Ложь;
			КонецЕсли;	
		Иначе
			//Если на странице изменений не вносили, проверим пустой ли буферный справочник
			СправочникЗаполнен = ПроверитьЗаполнениеБуферногоСтравочника("БПАГАгенты");
			Если НЕ СправочникЗаполнен Тогда
				СообщениеОбОшибкеПомощник("Агенты");
				Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг7;
				УстановитьТекущуюСтраницуПанелиНавигации();
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКШагу(Команда)
	НомерКнопки = Прав(СокрЛП(ЭтаФорма.ТекущийЭлемент.Имя), 1);
	Элементы.Шаги.ТекущаяСтраница = Элементы["Шаг" + НомерКнопки];
	УстановитьТекущуюСтраницуПанелиНавигации();
КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицуОрганизацииПомощник()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Выборка = Запрос.Выполнить().Выгрузить();
	Для Каждого ЭлементСправочника из Выборка Цикл
		СписокОрганизаций.Добавить(ЭлементСправочника.Ссылка);
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура СформироватьТаблицуСкладыПомощник()
	
	СпецификаПользователя = БПАГ.ПолучитьСпецификуПользователя();
	Если СпецификаПользователя <> "SD" Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Склады.Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	НЕ Склады.ЭтоГруппа
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Выборка = Запрос.Выполнить().Выгрузить();
		Для Каждого ЭлементСправочника из Выборка Цикл
			СписокСклады.Добавить(ЭлементСправочника.Ссылка);
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры	

&НаСервере
Процедура СформироватьТаблицуНоменклатураПомощник()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура.Ссылка,
	|	Номенклатура.Родитель
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа
	|АВТОУПОРЯДОЧИВАНИЕ";	
		
	Выборка = Запрос.Выполнить().Выгрузить();
	Для Каждого ЭлементСправочника из Выборка Цикл
		Если ЭлементСправочника.Родитель.Пустая() Тогда
			СписокНоменклатура.Добавить(ЭлементСправочника.Ссылка);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура СформироватьТаблицуКонтрагентыПомощник()
	
	ВидПрикладногоРешения = БПАГ.ПолучитьВидПрикладногоРешения();	
	
	СпецификаПользователя = БПАГ.ПолучитьСпецификуПользователя();
	Если СпецификаПользователя <> "SD" Тогда
		Запрос = Новый Запрос;
		Если ВидПрикладногоРешения = "УТ11" Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Партнеры.Ссылка,
			|	Партнеры.Родитель
			|ИЗ
			|	Справочник.Партнеры КАК Партнеры
			|АВТОУПОРЯДОЧИВАНИЕ";
		Иначе
			//для УТ10, УНФ
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|АВТОУПОРЯДОЧИВАНИЕ";
		КонецЕсли;
		Выборка = Запрос.Выполнить().Выгрузить();
		Для Каждого ЭлементСправочника из Выборка Цикл
			Если ЭлементСправочника.Родитель.Пустая() Тогда
				СписокКонтрагенты.Добавить(ЭлементСправочника.Ссылка);
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли; 
КонецПроцедуры	

&НаСервере
Процедура СформироватьТаблицуПрайсыПомощник()
	
	СпецификаПользователя = БПАГ.ПолучитьСпецификуПользователя();
	Если СпецификаПользователя <> "SD" Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыЦен.Ссылка
		|ИЗ
		|	Справочник.ВидыЦен КАК ВидыЦен
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Выборка = Запрос.Выполнить().Выгрузить();
		Для Каждого ЭлементСправочника из Выборка Цикл
			СписокПрайсы.Добавить(ЭлементСправочника.Ссылка);
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры	

&НаСервере
Процедура СформироватьТаблицуФизЛицаПомощник()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛица.Ссылка
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	НЕ ФизическиеЛица.ЭтоГруппа
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Выборка = Запрос.Выполнить().Выгрузить();
	Для Каждого ЭлементСправочника из Выборка Цикл
		СписокФизЛица.Добавить(ЭлементСправочника.Ссылка);
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьВидимостьЗакладкиСтартовыйПомощник()	
	
	//Найти запись 1СНеПоказыватьСтартовыйПомощник
	НеПоказыватьСтартовыйПомомщник = БПАГ.БПАГПолучитьНастройку("1СНеПоказыватьСтартовыйПомощник");
	Если НЕ НеПоказыватьСтартовыйПомомщник Тогда
		Элементы.Помощник.Видимость = Истина;
		НеВыводитьПомощник = Ложь;
		СформироватьТаблицуОрганизацииПомощник();	
		СформироватьТаблицуСкладыПомощник();
		СформироватьТаблицуНоменклатураПомощник();
		СформироватьТаблицуКонтрагентыПомощник();
		СформироватьТаблицуПрайсыПомощник();
		СформироватьТаблицуФизЛицаПомощник();
		ПризнакМодифицированности = Ложь;
		НастройкиСистемыПоУмолчаниюПриоткрытии();
	Иначе
		Элементы.Помощник.Видимость = Ложь;
		ВыводитьПомощник = Ложь;
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкуРазрешатьИзменятьОрганизациюВДокументахНаСервере()
	
	//Удаляем записи РазрешатьИзменятьОрганизациюВДокументах
	НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
	НастройкаКонстанты = Справочники.БПАГВидыНастроекАгентов.НайтиПоКоду("allowCompanyChange");
	НаборЗаписей.Отбор.ВидНастройки.Установить(НастройкаКонстанты);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	//Создаем новую запись
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Агент = Справочники.БПАГАгенты.ПустаяСсылка();
	НоваяЗапись.Профиль = Справочники.БПАГПрофилиАгентов.ПустаяСсылка();
	НоваяЗапись.ВидНастройки = НастройкаКонстанты;
	НоваяЗапись.Значение = РазрешатьИзменятьОрганизациюВДокументах;
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДатуЗапретаНаТестовыйФТП()
	ДатаЗакрытияДоступаКТестовомуФТП = БПАГ.БПАГПолучитьНастройку("1СДатаЗакрытияДоступаКТестовомуФТП");
	
	//Удаляем записи 1СДатаЗакрытияДоступаКТестовомуФТП
	НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
	НастройкаКонстанты = Справочники.БПАГВидыНастроекАгентов.НайтиПоКоду("1СДатаЗакрытияДоступаКТестовомуФТП");
	НаборЗаписей.Отбор.ВидНастройки.Установить(НастройкаКонстанты);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	//Создаем новую запись
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Агент = Справочники.БПАГАгенты.ПустаяСсылка();
	НоваяЗапись.Профиль = Справочники.БПАГПрофилиАгентов.ПустаяСсылка();
	НоваяЗапись.ВидНастройки = НастройкаКонстанты;
	НоваяЗапись.Значение = ТекущаяДата() + 14 * 24 * 60 * 60; //Две недели от текущей даты
	НаборЗаписей.Записать();
	
КонецПроцедуры	

&НаКлиенте
Процедура РазрешатьИзменятьОрганизациюВДокументахПриИзменении(Элемент)
	ЗаписатьНастройкуРазрешатьИзменятьОрганизациюВДокументахНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НеВыводитьПомощникПриИзменении(Элемент)
	НеВыводитьПомощникПриИзмененииНаСервере(НеВыводитьПомощник);
	УстановитьВидимостьЗакладкиСтартовыйПомощник();	
КонецПроцедуры

&НаСервере
Процедура НеВыводитьПомощникПриИзмененииНаСервере(НеПоказыватьСтартовыйПомомщник)
	//Создать новую запись для константы
	НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
	Константа_НеВыводитьПомощник = Справочники.БПАГВидыНастроекАгентов.НайтиПоКоду("1СНеПоказыватьСтартовыйПомощник");
	Если НЕ Константа_НеВыводитьПомощник.Пустая() Тогда
		НаборЗаписей.Отбор.Агент.Установить(Справочники.БПАГАгенты.ПустаяСсылка());
		НаборЗаписей.Отбор.Профиль.Установить(Справочники.БПАГПрофилиАгентов.ПустаяСсылка());
		НаборЗаписей.Отбор.ВидНастройки.Установить(Константа_НеВыводитьПомощник);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Агент = Справочники.БПАГАгенты.ПустаяСсылка();
		НоваяЗапись.Профиль = Справочники.БПАГПрофилиАгентов.ПустаяСсылка();
		НоваяЗапись.ВидНастройки = Константа_НеВыводитьПомощник;
		НоваяЗапись.Значение = НеПоказыватьСтартовыйПомомщник;
		НаборЗаписей.Записать();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПомощникПриИзменении(Элемент)
	НеВыводитьПомощникПриИзмененииНаСервере(Не ВыводитьПомощник);
	УстановитьВидимостьЗакладкиСтартовыйПомощник();	
КонецПроцедуры

//Автообмен номенклатура Начало
&НаКлиенте
Процедура НадписьРасписаниеВыгрузкиНоменклатураНажатие(Элемент)
	Задание = ПолучитьРегламентноеЗадание("БПАГСинхронизацияНоменклатуры");
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(Задание);
	Если Диалог.ОткрытьМодально() Тогда
		ТекРасписание = Диалог.Расписание;
		ЗаписатьРасписание("БПАГСинхронизацияНоменклатуры", ТекРасписание);
	КонецЕсли;
	ОбновитьНадписиАвтообменаНоменклатура();
КонецПроцедуры

&НаКлиенте
Процедура АвтовыгрузкаНоменклатураПриИзменении(Элемент)
	УстановитьАвтовыгрузкуНоменклатура();
КонецПроцедуры

Процедура УстановитьАвтовыгрузкуНоменклатура()
	Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.БПАГСинхронизацияНоменклатуры);
	Задание.Использование = Объект.АвтовыгрузкаНоменклатура;
	Задание.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАвтообменНоменклатура(Команда)
	ОбновитьНадписиАвтообменаНоменклатура();
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписиАвтообменаНоменклатура()
	
	ВидПрикладногоРешения = БПАГ.ПолучитьВидПрикладногоРешения();
	
	Элементы.НадписьНеЗапущенНоменклатура.Заголовок = "Не запущен пользователь для регламентных заданий!";
	ЭтоКлиентСервернаяБаза = Не Найти(СтрокаСоединенияИнформационнойБазы(), "File=");
	Если ЭтоКлиентСервернаяБаза Тогда
		РегламентныеЗаданияДоступны = Истина;
	Иначе
		Если (ВидПрикладногоРешения = "УТ11") ИЛИ (ВидПрикладногоРешения = "УНФ") Тогда
			РегламентныеЗаданияДоступны = Истина;
		Иначе	
			Попытка //NYI Для УТ - Код, а не "ИдентификаторПользователяИБ"
				ИдентификаторПользователяДляРеглЗаданий = Константы.ПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте.Получить().ИдентификаторПользователяИБ;
				СоединенияИнформационнойБазы = ПолучитьСоединенияИнформационнойБазы();
				РегламентныеЗаданияДоступны = Ложь;
				Для Каждого Соединение Из СоединенияИнформационнойБазы Цикл                   
					Если (Соединение.Пользователь.УникальныйИдентификатор = ИдентификаторПользователяДляРеглЗаданий) И (СокрЛП(Соединение.ИмяПриложения <> "Designer")) Тогда
						РегламентныеЗаданияДоступны = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Исключение
				РегламентныеЗаданияДоступны = Ложь;	
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПравоДоступа("Администрирование", Метаданные) Тогда
		РегламентныеЗаданияДоступны = Ложь;
		Элементы.НадписьНеЗапущенНоменклатура.Заголовок = "Нет прав для регламентных заданий!";
	КонецЕсли;
	
	Если РегламентныеЗаданияДоступны Тогда
		Элементы.НадписьНеЗапущенНоменклатура.Видимость = Ложь;
		
		Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.БПАГСинхронизацияНоменклатуры);
		Объект.АвтовыгрузкаНоменклатура = Задание.Использование;
		Элементы.НадписьРасписаниеВыгрузкиНоменклатура.Заголовок = Задание.Расписание;
		Попытка
			Фон = Задание.ПоследнееЗадание;
			Если Фон <> Неопределено Тогда
				Элементы.НадписьСтатусВыгрузкиНоменклатура.Заголовок = "[" + Фон.Начало + " - " + Фон.Конец + "] " + Фон.Состояние + ?(Фон.ИнформацияОбОшибке = Неопределено, "", ": " + Фон.ИнформацияОбОшибке.Описание + " (" + Фон.ИнформацияОбОшибке.ИмяМодуля + ": " + Фон.ИнформацияОбОшибке.НомерСтроки + ")");
			КонецЕсли;
		Исключение
		КонецПопытки;
	Иначе	
		Элементы.АвтовыгрузкаНоменклатура.Доступность = Ложь;
		Элементы.НадписьРасписаниеВыгрузкиНоменклатура.Доступность = Ложь;
		
		Элементы.НадписьНеЗапущенНоменклатура.Видимость = Истина;
	КонецЕсли;	
	
КонецПроцедуры
//Автообмен номенклатура Конец

//Автообмен контрагенты Начало
&НаКлиенте
Процедура ОбновитьАвтообменКонтрагенты(Команда)
	ОбновитьНадписиАвтообменаКонтрагенты();
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписиАвтообменаКонтрагенты()
	
	ВидПрикладногоРешения = БПАГ.ПолучитьВидПрикладногоРешения();
	
	Элементы.НадписьНеЗапущенКонтрагенты.Заголовок = "Не запущен пользователь для регламентных заданий!";
	
	ЭтоКлиентСервернаяБаза = Не Найти(СтрокаСоединенияИнформационнойБазы(), "File=");
	Если ЭтоКлиентСервернаяБаза Тогда
		РегламентныеЗаданияДоступны = Истина;
	Иначе
		Если (ВидПрикладногоРешения = "УТ11") ИЛИ (ВидПрикладногоРешения = "УНФ") Тогда
			РегламентныеЗаданияДоступны = Истина;
		Иначе	
			Попытка //NYI Для УТ - Код, а не "ИдентификаторПользователяИБ"
				ИдентификаторПользователяДляРеглЗаданий = Константы.ПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте.Получить().ИдентификаторПользователяИБ;
				СоединенияИнформационнойБазы = ПолучитьСоединенияИнформационнойБазы();
				РегламентныеЗаданияДоступны = Ложь;
				Для Каждого Соединение Из СоединенияИнформационнойБазы Цикл                   
					Если (Соединение.Пользователь.УникальныйИдентификатор = ИдентификаторПользователяДляРеглЗаданий) И (СокрЛП(Соединение.ИмяПриложения <> "Designer")) Тогда
						РегламентныеЗаданияДоступны = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Исключение
				РегламентныеЗаданияДоступны = Ложь;	
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПравоДоступа("Администрирование", Метаданные) Тогда
		РегламентныеЗаданияДоступны = Ложь;
		Элементы.НадписьНеЗапущенКонтрагенты.Заголовок = "Нет прав для регламентных заданий!";
	КонецЕсли;
	
	Если РегламентныеЗаданияДоступны Тогда
		Элементы.НадписьНеЗапущенКонтрагенты.Видимость = Ложь;
		
		Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.БПАГСинхронизацияКонтрагентов);
		Объект.АвтовыгрузкаКонтрагенты = Задание.Использование;
		Элементы.НадписьРасписаниеВыгрузкиКонтрагенты.Заголовок = Задание.Расписание;
		Попытка
			Фон = Задание.ПоследнееЗадание;
			Если Фон <> Неопределено Тогда
				Элементы.НадписьСтатусВыгрузкиКонтрагенты.Заголовок = "[" + Фон.Начало + " - " + Фон.Конец + "] " + Фон.Состояние + ?(Фон.ИнформацияОбОшибке = Неопределено, "", ": " + Фон.ИнформацияОбОшибке.Описание + " (" + Фон.ИнформацияОбОшибке.ИмяМодуля + ": " + Фон.ИнформацияОбОшибке.НомерСтроки + ")");
			КонецЕсли;
		Исключение
		КонецПопытки;
		
	Иначе	
		Элементы.АвтовыгрузкаКонтрагенты.Доступность = Ложь;
		Элементы.НадписьРасписаниеВыгрузкиКонтрагенты.Доступность = Ложь;
		
		Элементы.НадписьНеЗапущенКонтрагенты.Видимость = Истина;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьРасписаниеВыгрузкиКонтрагентыНажатие(Элемент)
	Задание = ПолучитьРегламентноеЗадание("БПАГСинхронизацияКонтрагентов");
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(Задание);
	Если Диалог.ОткрытьМодально() Тогда
		ТекРасписание = Диалог.Расписание;
		ЗаписатьРасписание("БПАГСинхронизацияКонтрагентов", ТекРасписание);
	КонецЕсли;
	ОбновитьНадписиАвтообменаКонтрагенты();
КонецПроцедуры

&НаКлиенте
Процедура АвтовыгрузкаКонтрагентыПриИзменении(Элемент)
	УстановитьАвтовыгрузкуКонтрагенты();
КонецПроцедуры

Процедура УстановитьАвтовыгрузкуКонтрагенты()
	Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.БПАГСинхронизацияКонтрагентов);
	Задание.Использование = Объект.АвтовыгрузкаКонтрагенты;
	Задание.Записать();
КонецПроцедуры
//Автообмен контрагенты Конец

&НаКлиенте
Процедура ОткрытьФормуСправочникАгенты(Команда)
	ЗаписатьАгентыПомощник();
	Форма = ПолучитьФорму("Справочник.БПАГАгенты.ФормаСписка");
	Форма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяОрганизацияПомощникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗаписатьОрганизацииПомощник();
	ПризнакМодифицированности = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойЦентральныйСкладПомощникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗаписатьСкладыПомощник();
	ПризнакМодифицированности = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойТипЦенНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗаписатьПрайсыПомощник();
	ПризнакМодифицированности = Ложь;
КонецПроцедуры

//Запись в буферные справочники
Процедура ЗаписатьОрганизацииПомощник()
	Для Каждого ЭлементСправочника Из СписокОрганизаций Цикл
		Если ЭлементСправочника.Пометка Тогда
			ТекущаяОрганизация = ЭлементСправочника.Значение;
			Если ТекущаяОрганизация.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			
			СуществующийЭлемент = Справочники.БПАГОрганизации.НайтиПоРеквизиту("Организация", ТекущаяОрганизация);
			Если СуществующийЭлемент = Справочники.БПАГОрганизации.ПустаяСсылка() Тогда
				СправочникОбъект = Справочники.БПАГОрганизации.СоздатьЭлемент();
			Иначе
				СправочникОбъект = СуществующийЭлемент.ПолучитьОбъект();
			КонецЕсли;
			СправочникОбъект.Организация = ТекущаяОрганизация;
			СправочникОбъект.Наименование = ТекущаяОрганизация.Наименование;
			СправочникОбъект.Записать();
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры	

Процедура ЗаписатьСкладыПомощник()
	Для Каждого ЭлементСправочника Из СписокСклады Цикл
		Если ЭлементСправочника.Пометка Тогда
			ТекущийСклад = ЭлементСправочника.Значение;
			Если ТекущийСклад.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			
			СуществующийЭлемент = Справочники.БПАГСклады.НайтиПоРеквизиту("Склад", ТекущийСклад);
			Если СуществующийЭлемент = Справочники.БПАГСклады.ПустаяСсылка() Тогда
				СправочникОбъект = Справочники.БПАГСклады.СоздатьЭлемент();
			Иначе
				СправочникОбъект = СуществующийЭлемент.ПолучитьОбъект();
			КонецЕсли;
			СправочникОбъект.Склад = ТекущийСклад;
			СправочникОбъект.Наименование = ТекущийСклад.Наименование;
			СправочникОбъект.Записать();
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры	

Процедура ЗаписатьПрайсыПомощник()
	Для Каждого ЭлементСправочника Из СписокПрайсы Цикл
		Если ЭлементСправочника.Пометка Тогда
			ТекущийПрайс = ЭлементСправочника.Значение;
			Если ТекущийПрайс.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			
			СуществующийЭлемент = Справочники.БПАГПрайсы.НайтиПоРеквизиту("ТипЦен", ТекущийПрайс);
			Если СуществующийЭлемент = Справочники.БПАГПрайсы.ПустаяСсылка() Тогда
				СправочникОбъект = Справочники.БПАГПрайсы.СоздатьЭлемент();
			Иначе
				СправочникОбъект = СуществующийЭлемент.ПолучитьОбъект();
			КонецЕсли;
			СправочникОбъект.ТипЦен = ТекущийПрайс;
			СправочникОбъект.Наименование = ТекущийПрайс.Наименование;
			СправочникОбъект.Записать();
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры	

&НаКлиенте
Процедура ЗаписатьНоменклатураПомощник()
	
	КоличествоГрупп = 0;
	Для Каждого ЭлементСправочника Из СписокНоменклатура Цикл
		Если ЭлементСправочника.Пометка Тогда
	        КоличествоГрупп = КоличествоГрупп + 1;
	    КонецЕсли;
	КонецЦикла;
	
	Индекс = 0;
	Для Каждого ЭлементСправочника Из СписокНоменклатура Цикл
		Если ЭлементСправочника.Пометка Тогда
			Индекс = Индекс + 1;
			Прогресс = Индекс * 100 / КоличествоГрупп;
			Если КоличествоГрупп <> 1 Тогда
				Состояние(НСтр("ru = 'Идет обработка справочника Номенклатура'"), Прогресс);
			КонецЕсли;
			ЗаписатьНоменклатураПомощникНаСервере(ЭлементСправочника.Значение);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ЗаписатьНоменклатураПомощникНаСервере(Группа)
	
	ТекущаяНоменклатура = Группа.Ссылка;
	Если НЕ ТекущаяНоменклатура.ПометкаУдаления Тогда
		ПараметрыПеретаскивания = Новый Массив();
		ПараметрыПеретаскивания.Добавить(ТекущаяНоменклатура);
		РекурсияНоменклатура(ПараметрыПеретаскивания, ТекущаяНоменклатура.Родитель, 0);
	КонецЕсли;
			
КонецПроцедуры	

Процедура РекурсияНоменклатура(ПараметрыПеретаскивания, Строка, Папа = 0)
	
	СпецификаПользователя = БПАГ.ПолучитьСпецификуПользователя();
	КаталогКартинок = БПАГ.БПАГПолучитьНастройку("1СКаталогОбмена") + "images/";
	КаталогКартинокПроверен = Ложь;
	КаталогКартинокСуществует = Истина;
	
	ПеретаскиваемыеЗначения = ПараметрыПеретаскивания;
	
	Если ТипЗнч(ПеретаскиваемыеЗначения) = Тип("СправочникСсылка.Номенклатура") Тогда
		Перетаскиваемое = ПеретаскиваемыеЗначения;
		Если Перетаскиваемое.ПометкаУдаления Тогда
			Возврат;
		КонецЕсли;
		
		Если Перетаскиваемое.ЭтоГруппа Тогда
			Если Строка <> Неопределено Тогда
				Если Строка.ЭтоГруппа Тогда
					Если Перетаскиваемое = Строка.Номенклатура Тогда
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			СуществующийЭлемент = Справочники.БПАГНоменклатура.НайтиПоРеквизиту("Номенклатура", Перетаскиваемое);
			Если СуществующийЭлемент <> Справочники.БПАГНоменклатура.ПустаяСсылка() Тогда
				Объ = СуществующийЭлемент.ПолучитьОбъект();
			Иначе
				Объ = Справочники.БПАГНоменклатура.СоздатьГруппу();
			КонецЕсли;
			
			Если Папа = 0 Тогда
				Если Строка <> Неопределено Тогда
					Если Строка.ЭтоГруппа Тогда
						Объ.Родитель = Строка
					КонецЕсли;
				КонецЕсли;
			Иначе
				Объ.Родитель = Папа;
			КонецЕсли;
				
			Объ.Номенклатура = Перетаскиваемое;
			Объ.Наименование = Перетаскиваемое.Наименование;
			
			Объ.Записать();
			
			Запрос = Новый Запрос();
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Номенклатура.Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Родитель = &Родитель
			|	И (НЕ Номенклатура.ПометкаУдаления)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Номенклатура.Наименование";
			
			Запрос.УстановитьПараметр("Родитель", Перетаскиваемое);
			ТЗ = Запрос.Выполнить().Выгрузить();
			
			Для Каждого Потомок Из ТЗ Цикл
				ПараметрыПеретаскивания = Потомок.Ссылка;
				РекурсияНоменклатура(ПараметрыПеретаскивания, Строка, Объ.Ссылка);
			КонецЦикла;
			
		Иначе
			СуществующийЭлемент = Справочники.БПАГНоменклатура.НайтиПоРеквизиту("Номенклатура", Перетаскиваемое);
			Если СуществующийЭлемент <> Справочники.БПАГНоменклатура.ПустаяСсылка() Тогда
				Объ = СуществующийЭлемент.ПолучитьОбъект();
			Иначе
				Объ = Справочники.БПАГНоменклатура.СоздатьЭлемент();
			КонецЕсли;
			
			Если Папа = 0 Тогда
				Если Строка <> Неопределено Тогда
					Если Строка.ЭтоГруппа Тогда
						Объ.Родитель = Строка
					КонецЕсли;
				КонецЕсли;
			Иначе
				Объ.Родитель = Папа;
			КонецЕсли;

			Объ.Номенклатура = Перетаскиваемое;
			Объ.Наименование = Перетаскиваемое.Наименование;
	
			//Добавим картинки из типовых
			Если КаталогКартинокСуществует Тогда
				ЗапросФайлы = Новый Запрос;
				ЗапросФайлы.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	НоменклатураПрисоединенныеФайлы.Ссылка,
				|	""0"" КАК ВидХранения,
				|	НоменклатураПрисоединенныеФайлы.ВладелецФайла.Код КАК КодВладельца,
				|	НоменклатураПрисоединенныеФайлы.Размер,
				|	НоменклатураПрисоединенныеФайлы.Наименование КАК ИмяФайла,
				|	NULL КАК РасширениеФайла,
				|	NULL КАК ХранимыйФайл
				|ИЗ
				|	Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
				|ГДЕ
				|	НЕ НоменклатураПрисоединенныеФайлы.ПометкаУдаления
				|	И НоменклатураПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	Файлы.Ссылка,
				|	""1"",
				|	Файлы.ВладелецФайла.Код,
				|	Файлы.ТекущаяВерсияРазмер,
				|	Файлы.ПолноеНаименование,
				|	Файлы.ТекущаяВерсияРасширение,
				|	ХранимыеФайлыВерсий.ХранимыйФайл
				|ИЗ
				|	Справочник.Файлы КАК Файлы
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ХранимыеФайлыВерсий КАК ХранимыеФайлыВерсий
				|		ПО Файлы.ТекущаяВерсия = ХранимыеФайлыВерсий.ВерсияФайла
				|ГДЕ
				|	НЕ Файлы.ПометкаУдаления
				|	И Файлы.ВладелецФайла = &ВладелецФайла";
				
				ЗапросФайлы.УстановитьПараметр("ВладелецФайла", Перетаскиваемое);
				
				Выборка = ЗапросФайлы.Выполнить().Выбрать();
				
				Счет = 0;
				Пока Выборка.Следующий() Цикл
					Счет = Счет + 1;
					//Создадим каталог картинок, если он еще не создан
					Если Не КаталогКартинокПроверен Тогда
						//Проверить и создать или выдать сообщение
						Если БПАГ.БПАГПолучитьНастройку("1СКаталогОбмена") = "" Тогда
							КаталогКартинокСуществует = Ложь;
						Иначе	
							Файл = Новый Файл(КаталогКартинок);
							Если Не Файл.Существует() Тогда
								Попытка
									СоздатьКаталог(КаталогКартинок);
									КаталогКартинокСуществует = Истина;
								Исключение
									Сообщить(ОписаниеОшибки());
									КаталогКартинокСуществует = Ложь;
								КонецПопытки;
							КонецЕсли;
						КонецЕсли;
						КаталогКартинокПроверен = Истина;
					КонецЕсли;
					
					Если КаталогКартинокСуществует Тогда
						
						ФайлВКаталогеОбмена = Ложь;
						Если Выборка.ВидХранения = "0" Тогда //присоединенный
							ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(Выборка.Ссылка);
							ИмяФайлаТиповойКартинки = ДанныеФайла.ИмяФайла;
						ИначеЕсли Выборка.ВидХранения = "1" Тогда //справочник "Файлы"
							ИмяФайлаТиповойКартинки = Выборка.ИмяФайла + "." + Выборка.РасширениеФайла;
						КонецЕсли;
						
						Если СпецификаПользователя <> "FT" Тогда
							ИмяФайлаТиповойКартинки = СокрЛП(Выборка.КодВладельца) + "_" + ИмяФайлаТиповойКартинки;
						КонецЕсли;
						
						ИмяФайлаТиповойКартинки = СокрЛП(БПАГ.ПревратитьСтрокуВТранслит(ИмяФайлаТиповойКартинки));
						
						ФайлНаДиске = Новый Файл(КаталогКартинок + ИмяФайлаТиповойКартинки);
						Если ФайлНаДиске.Существует() Тогда
							Если ФайлНаДиске.Размер() = Выборка.Размер Тогда
								ФайлВКаталогеОбмена = Истина;
							КонецЕсли;
						КонецЕсли;
						
						Если Не ФайлВКаталогеОбмена Тогда	
							Если Выборка.ВидХранения = "0" Тогда //присоединенный
								ДвоичныеДанные = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Выборка.Ссылка);
							ИначеЕсли Выборка.ВидХранения = "1" Тогда //справочник "Файлы"
								ДвоичныеДанные = Выборка.ХранимыйФайл.Получить();
							КонецЕсли;
							ДвоичныеДанные.Записать(КаталогКартинок + ИмяФайлаТиповойКартинки);		
						КонецЕсли;
						
						НайденнаяСтрокаТиповойКартинки = Объ.Картинки.Найти(ИмяФайлаТиповойКартинки, "Имя");
						Если НайденнаяСтрокаТиповойКартинки = Неопределено Тогда
							НоваяКартинка = Объ.Картинки.Добавить();
							НоваяКартинка.Имя = ИмяФайлаТиповойКартинки;
						КонецЕсли;
						
					КонецЕсли;					
				КонецЦикла;
			КонецЕсли;

			Объ.Записать();
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ПеретаскиваемыеЗначения) = Тип("Массив") Тогда
		Для Каждого Перетаскиваемое Из ПеретаскиваемыеЗначения Цикл
			ПараметрыПеретаскивания = Перетаскиваемое;
			РекурсияНоменклатура(ПараметрыПеретаскивания, Строка, 0);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьКонтрагентыПомощник()
	
	КоличествоГрупп = 0;
	Для Каждого ЭлементСправочника Из СписокКонтрагенты Цикл
		Если ЭлементСправочника.Пометка Тогда
	        КоличествоГрупп = КоличествоГрупп + 1;
	    КонецЕсли;
	КонецЦикла;
	
	Индекс = 0;
	Для Каждого ЭлементСправочника Из СписокКонтрагенты Цикл
		Если ЭлементСправочника.Пометка Тогда
			Индекс = Индекс + 1;
			Прогресс = Индекс * 100 / КоличествоГрупп;
			Если КоличествоГрупп <> 1 Тогда
				Состояние(НСтр("ru = 'Идет обработка справочника Контрагенты'"), Прогресс);
			КонецЕсли;
			ЗаписатьКонтрагентыПомощникНаСервере(ЭлементСправочника.Значение);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ЗаписатьКонтрагентыПомощникНаСервере(Группа)
	//1СВидАдресаДоставки
	//Если не заполнена, то установить значение по умолчанию
	//иначе не будут созданы ТТ контрагентов
	ВидАдресаДоставки = БПАГ.БПАГПолучитьНастройку("1СВидАдресаДоставки");
	Если ВидАдресаДоставки.Пустая() Тогда
		НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
		НастройкаПоУмолчанию = Справочники.БПАГВидыНастроекАгентов.НайтиПоКоду("1СВидАдресаДоставки");
		Если НЕ НастройкаПоУмолчанию.Пустая() Тогда
			НаборЗаписей.Отбор.Агент.Установить(Справочники.БПАГАгенты.ПустаяСсылка());
			НаборЗаписей.Отбор.Профиль.Установить(Справочники.БПАГПрофилиАгентов.ПустаяСсылка());
			НаборЗаписей.Отбор.ВидНастройки.Установить(НастройкаПоУмолчанию);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Агент = Справочники.БПАГАгенты.ПустаяСсылка();
			НоваяЗапись.Профиль = Справочники.БПАГПрофилиАгентов.ПустаяСсылка();
			НоваяЗапись.ВидНастройки = НастройкаПоУмолчанию;
			
			ВидПрикладногоРешения = БПАГ.ПолучитьВидПрикладногоРешения();
			Если ВидПрикладногоРешения = "УТ11" Тогда
				НоваяЗапись.Значение = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
			Иначе
				НоваяЗапись.Значение = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
			КонецЕсли;
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	ТекущийКонтрагент = Группа.Ссылка;
	Если НЕ ТекущийКонтрагент.ПометкаУдаления Тогда
		ПараметрыПеретаскивания = Новый Массив();
		ПараметрыПеретаскивания.Добавить(ТекущийКонтрагент);
		РекурсияКонтрагенты(ПараметрыПеретаскивания, ТекущийКонтрагент.Родитель, 0);
	КонецЕсли;
			
КонецПроцедуры	

Процедура РекурсияКонтрагенты(ПараметрыПеретаскивания, Строка, Папа = 0)
	
	НаличиеСетевыхТорговыхТочек = БПАГ.БПАГПолучитьНастройку("1СНаличиеСетевыхТорговыхТочек");
	ВидАдресаДоставки = БПАГ.БПАГПолучитьНастройку("1СВидАдресаДоставки");
	ВидТелефонаДоставки = БПАГ.БПАГПолучитьНастройку("1СВидТелефонаДоставки");
	
	ВидПрикладногоРешения = БПАГ.ПолучитьВидПрикладногоРешения();
	СпецификаПользователя = БПАГ.ПолучитьСпецификуПользователя();
	ПеретаскиваемыеЗначения = ПараметрыПеретаскивания;
	
	ТипСправочникаКлиентов = ?(ВидПрикладногоРешения = "УТ11", Тип("СправочникСсылка.Партнеры"), Тип("СправочникСсылка.Контрагенты"));
	
	Если ТипЗнч(ПеретаскиваемыеЗначения) = ТипСправочникаКлиентов Тогда
		Перетаскиваемое = ПеретаскиваемыеЗначения;
		Если Перетаскиваемое.ПометкаУдаления Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Партнеры.Ссылка
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|ГДЕ
		|	Партнеры.Родитель = &Родитель";
		
		Если ВидПрикладногоРешения <> "УТ11" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Партнер", "Контрагент");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Родитель", Перетаскиваемое);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда //Это группа или элемент, содержащий другие элементы
			
			Если Строка <> Неопределено Тогда
				Если Строка.ЭтоГруппа Тогда
					Если ВидПрикладногоРешения = "УТ11" Тогда
						Если Перетаскиваемое = Строка.Партнер Тогда
							Возврат;
						КонецЕсли;
					Иначе
						Если Перетаскиваемое = Строка.Контрагент Тогда
							Возврат;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			СуществующийЭлемент = Справочники.БПАГКонтрагенты.НайтиПоРеквизиту(?(ВидПрикладногоРешения = "УТ11", "Партнер", "Контрагент"), Перетаскиваемое);
			Если СуществующийЭлемент <> Справочники.БПАГКонтрагенты.ПустаяСсылка() Тогда
				Объ = СуществующийЭлемент.ПолучитьОбъект();
			Иначе
				Объ = Справочники.БПАГКонтрагенты.СоздатьГруппу();
			КонецЕсли;
			
			Если Папа = 0 Тогда
				Если Строка <> Неопределено Тогда
					Если Строка.ЭтоГруппа Тогда
						Объ.Родитель = Строка
					КонецЕсли;
				КонецЕсли;
			Иначе
				Объ.Родитель = Папа;
			КонецЕсли;
				
			Если ВидПрикладногоРешения = "УТ11" Тогда
				Объ.Партнер = Перетаскиваемое; 
			Иначе
				Объ.Контрагент = Перетаскиваемое;
			КонецЕсли;
			
			Объ.Наименование = Перетаскиваемое.Наименование;
			Объ.Записать();
			
			Запрос = Новый Запрос();
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Контрагент.Ссылка
			|ИЗ
			|	Справочник." + ?(ВидПрикладногоРешения = "УТ11", "Партнеры", "Контрагенты") + " КАК Контрагент
			|ГДЕ
			|	Контрагент.Родитель = &Родитель
			|	И (НЕ Контрагент.ПометкаУдаления)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Контрагент.Наименование";
			
			Запрос.УстановитьПараметр("Родитель", Перетаскиваемое);
			ТЗ = Запрос.Выполнить().Выгрузить();
			
			Для Каждого Потомок Из ТЗ Цикл
				ПараметрыПеретаскивания = Потомок.Ссылка;
				РекурсияКонтрагенты(ПараметрыПеретаскивания, Строка, Объ.Ссылка);
			КонецЦикла;
			
		Иначе
			СуществующийЭлемент = Справочники.БПАГКонтрагенты.НайтиПоРеквизиту(?(ВидПрикладногоРешения = "УТ11", "Партнер", "Контрагент"), Перетаскиваемое);
			Если СуществующийЭлемент <> Справочники.БПАГКонтрагенты.ПустаяСсылка() Тогда
				Объ = СуществующийЭлемент.ПолучитьОбъект();
			Иначе
				Объ = Справочники.БПАГКонтрагенты.СоздатьЭлемент();
			КонецЕсли;
			
			Если Папа = 0 Тогда
				Если Строка <> Неопределено Тогда
					Если Строка.ЭтоГруппа Тогда
						Объ.Родитель = Строка
					КонецЕсли;
				КонецЕсли;
			Иначе
				Объ.Родитель = Папа;
			КонецЕсли;

			Если ВидПрикладногоРешения = "УТ11" Тогда
				Объ.Партнер = Перетаскиваемое; 
			Иначе
				Объ.Контрагент = Перетаскиваемое;
			КонецЕсли;
			
			Объ.Наименование = Перетаскиваемое.Наименование;
			
			Попытка
				Объ.Записать();
			Исключение
				БПАГ.ИнформационноеСообщение("Обнаружена проблема с элементом " + Объ.Наименование);
				Возврат;
			КонецПопытки;
			
			Если НаличиеСетевыхТорговыхТочек Тогда
				Если СпецификаПользователя = "FT" Тогда
					//Телефон
					Запрос = Новый Запрос;
					Запрос.Текст =
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ПартнерыКонтактнаяИнформация.Представление КАК Наименование
					|ИЗ
					|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
					|ГДЕ
					|	ПартнерыКонтактнаяИнформация.Ссылка = &Ссылка
					|	И ПартнерыКонтактнаяИнформация.Вид = &Вид";
					
					Запрос.УстановитьПараметр("Ссылка", Перетаскиваемое);
					Запрос.УстановитьПараметр("Вид", ВидТелефонаДоставки);
					
					Телефон = "";
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						Телефон = Выборка.Наименование;
					КонецЕсли;
	
					Запрос = Новый Запрос;
					Запрос.Текст =
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ФорсайТрейд_АдресаДоставок.Ссылка КАК ТТ,
					|	ФорсайТрейд_АдресаДоставок.Наименование КАК Наименование
					|ИЗ
					|	Справочник.ФорсайТрейд_АдресаДоставок КАК ФорсайТрейд_АдресаДоставок
					|ГДЕ
					|	НЕ ФорсайТрейд_АдресаДоставок.ПометкаУдаления
					|	И ФорсайТрейд_АдресаДоставок.Владелец = &Владелец";
					
					Запрос.УстановитьПараметр("Владелец", Перетаскиваемое);
					
					ТЗАдресаДоставок = Запрос.Выполнить().Выгрузить();
					Выборка = Запрос.Выполнить().Выбрать();
					ТТНайдена = Ложь;
					Пока Выборка.Следующий() Цикл
						
						НайденнаяТТ = Справочники.БПАГТорговыеТочки.НайтиПоНаименованию(Выборка.Наименование, Истина, , Объ.Ссылка);
						Если НайденнаяТТ.Пустая() Тогда
							НоваяТТ = Справочники.БПАГТорговыеТочки.СоздатьЭлемент();
							НоваяТТ.Владелец = Объ.Ссылка;
							НоваяТТ.Наименование = Выборка.Наименование;
							НоваяТТ.Адрес = НоваяТТ.Наименование;
							НоваяТТ.Телефон = Телефон;
							НоваяТТ.Записать();
						Иначе
							Если (НайденнаяТТ.Адрес <> НайденнаяТТ.Наименование) ИЛИ (НайденнаяТТ.Телефон <> Телефон) Тогда
								ТТОбъ = НайденнаяТТ.ПолучитьОбъект();
								ТТОбъ.Адрес = ТТОбъ.Наименование;
								ТТОбъ.Телефон = Телефон;
								ТТОбъ.Записать();
							КонецЕсли;
						КонецЕсли;
						
						ТТНайдена = Истина;
					КонецЦикла;
					
					Если Не ТТНайдена Тогда
						//Поищем по типовому адресу
						Запрос = Новый Запрос;
						Запрос.Текст =
						"ВЫБРАТЬ РАЗРЕШЕННЫЕ
						|	ПартнерыКонтактнаяИнформация.Представление КАК Наименование
						|ИЗ
						|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
						|ГДЕ
						|	ПартнерыКонтактнаяИнформация.Ссылка = &Ссылка
						|	И ПартнерыКонтактнаяИнформация.Вид = &Вид";
						
						Запрос.УстановитьПараметр("Ссылка", Перетаскиваемое);
						Запрос.УстановитьПараметр("Вид", ВидАдресаДоставки);
						
						Выборка = Запрос.Выполнить().Выбрать();
						Если Выборка.Следующий() Тогда
							НовыйАдрес = ТЗАдресаДоставок.Добавить();
							НовыйАдрес.Наименование = Выборка.Наименование;

							НайденнаяТТ = Справочники.БПАГТорговыеТочки.НайтиПоНаименованию(Выборка.Наименование, Истина, , Объ.Ссылка);
							Если НайденнаяТТ.Пустая() Тогда
								НоваяТТ = Справочники.БПАГТорговыеТочки.СоздатьЭлемент();
								НоваяТТ.Владелец = Объ.Ссылка;
								НоваяТТ.Наименование = Выборка.Наименование;
								НоваяТТ.Адрес = НоваяТТ.Наименование;
								НоваяТТ.Телефон = Телефон;
								НоваяТТ.Записать();
							КонецЕсли;
							
							ТТНайдена = Истина;	
						КонецЕсли;
						
						Если Не ТТНайдена Тогда
							БПАГ.ИнформационноеСообщение("Для партнера " + Перетаскиваемое + " не найдено ни одного адреса доставки!");
							Возврат;
						КонецЕсли;
					КонецЕсли;
					
					Запрос = Новый Запрос;
					Запрос.Текст =
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	БПАГТорговыеТочки.Ссылка КАК ТТ,
					|	БПАГТорговыеТочки.Наименование КАК Наименование
					|ИЗ
					|	Справочник.БПАГТорговыеТочки КАК БПАГТорговыеТочки
					|ГДЕ
					|	БПАГТорговыеТочки.Владелец = &Владелец";
					
					Запрос.УстановитьПараметр("Владелец", Объ.Ссылка);
					
					Выборка = Запрос.Выполнить().Выбрать();
					
					Пока Выборка.Следующий() Цикл
						НайденнаяСтрокаАдреса = ТЗАдресаДоставок.Найти(Выборка.Наименование, "Наименование");
						Если НайденнаяСтрокаАдреса = Неопределено Тогда
							БПАГ.ИнформационноеСообщение("Для партнера " + Перетаскиваемое + " удален неиспользуемый адрес доставки: " + Выборка.Наименование);
							ОбъектТТ = Выборка.ТТ.ПолучитьОбъект();
							ОбъектТТ.Удалить();
						КонецЕсли;
				 	КонецЦикла;
					
				Иначе
					
					//Телефон
					Запрос = Новый Запрос;
					Запрос.Текст =
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ПартнерыКонтактнаяИнформация.Представление КАК Наименование
					|ИЗ
					|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
					|ГДЕ
					|	ПартнерыКонтактнаяИнформация.Ссылка = &Ссылка
					|	И ПартнерыКонтактнаяИнформация.Вид = &Вид";
					
					Запрос.УстановитьПараметр("Ссылка", Перетаскиваемое);
					Запрос.УстановитьПараметр("Вид", ВидТелефонаДоставки);
					
					Телефон = "";
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						Телефон = Выборка.Наименование;
					КонецЕсли;
	
					//Адрес
					Запрос = Новый Запрос;
					Запрос.Текст =
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ПартнерыКонтактнаяИнформация.Представление КАК Наименование
					|ИЗ
					|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
					|ГДЕ
					|	ПартнерыКонтактнаяИнформация.Ссылка = &Ссылка
					|	И ПартнерыКонтактнаяИнформация.Вид = &Вид";
					
					Запрос.УстановитьПараметр("Ссылка", Перетаскиваемое);
					Запрос.УстановитьПараметр("Вид", ВидАдресаДоставки);
					
					Выборка = Запрос.Выполнить().Выбрать();
					ТТНайдена = Ложь;
					Пока Выборка.Следующий() Цикл
						
						НайденнаяТТ = Справочники.БПАГТорговыеТочки.НайтиПоНаименованию(Выборка.Наименование, Истина, , Объ.Ссылка);
						Если НайденнаяТТ.Пустая() Тогда
							НоваяТТ = Справочники.БПАГТорговыеТочки.СоздатьЭлемент();
							НоваяТТ.Владелец = Объ.Ссылка;
							НоваяТТ.Наименование = Выборка.Наименование;
							НоваяТТ.Адрес = НоваяТТ.Наименование;
							НоваяТТ.Телефон = Телефон;
							НоваяТТ.Записать();
						Иначе
							Если (НайденнаяТТ.Адрес <> НайденнаяТТ.Наименование) ИЛИ (НайденнаяТТ.Телефон <> Телефон) Тогда
								ТТОбъ = НайденнаяТТ.ПолучитьОбъект();
								ТТОбъ.Адрес = ТТОбъ.Наименование;
								ТТОбъ.Телефон = Телефон;
								ТТОбъ.Записать();
							КонецЕсли;
						КонецЕсли;
						
						ТТНайдена = Истина;
					КонецЦикла;
					
					Если Не ТТНайдена Тогда
						БПАГ.ИнформационноеСообщение("Для клиента " + Перетаскиваемое + " не найден адрес!");
					КонецЕсли;
					
				КонецЕсли;				
				
			Иначе
				Если ВидПрикладногоРешения = "УНФ" Тогда
					//Сначала пытаемся работать с основным договором
					ОсновнойДоговор = Перетаскиваемое.ДоговорПоУмолчанию;
					Если ОсновнойДоговор.ВидДоговора = Перечисления.ВидыДоговоров.СПокупателем Тогда
						ОбновитьТорговыеТочки(Объ, ОсновнойДоговор);
					Иначе //Если основной договор не подходит, берем первый подходящий
						Запрос = Новый Запрос;
						Запрос.Текст =
						"ВЫБРАТЬ ПЕРВЫЕ 1
						|	ДоговорыКонтрагентов.Ссылка КАК Договор
						|ИЗ
						|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
						|ГДЕ
						|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)
						|	И ДоговорыКонтрагентов.Владелец = &Владелец
						|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора";
						
						Запрос.УстановитьПараметр("Владелец", Перетаскиваемое);
						Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоров.СПокупателем);
						
						Выборка = Запрос.Выполнить().Выбрать();
						Если Выборка.Следующий() Тогда
							ОбновитьТорговыеТочки(Объ, Выборка.Договор);
						Иначе
							БПАГ.ИнформационноеСообщение("Для клиента " + Перетаскиваемое + " не найден подходящий договор! Должен присутствовать договор с видом ""С покупателем"", не помеченный на удаление!");
							Возврат;
						КонецЕсли;
						
					КонецЕсли;
				ИначеЕсли ВидПрикладногоРешения = "УТ11" Тогда
					//NIY
					БПАГ.ИнформационноеСообщение("Для УТ11 необходимо установить настройку 'НаличиеСетевыхТорговыхТочек'.  NIY.");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ПеретаскиваемыеЗначения) = Тип("Массив") Тогда
		Для Каждого Перетаскиваемое Из ПеретаскиваемыеЗначения Цикл
			ПараметрыПеретаскивания = Перетаскиваемое;
			РекурсияКонтрагенты(ПараметрыПеретаскивания, Строка, 0);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьТорговуюТочку(ТТОбъект, Договор)
	
	СпецификаПользователя = БПАГ.ПолучитьСпецификуПользователя();
	ВидПрикладногоРешения = БПАГ.ПолучитьВидПрикладногоРешения();
	
	ПриоритетКонтактнойИнформацииПриСинхронизации = БПАГ.БПАГПолучитьНастройку("1СПриоритетКонтактнойИнформацииПриСинхронизации");	
	ВидАдресаДоставки = БПАГ.БПАГПолучитьНастройку("1СВидАдресаДоставки");
	ВидТелефонаДоставки = БПАГ.БПАГПолучитьНастройку("1СВидТелефонаДоставки");
	
	Если СокрЛП(ТТОбъект.Наименование) = "" Тогда
		ТТОбъект.Наименование = Договор;
	КонецЕсли;
	
	//Адрес
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтрагентыКонтактнаяИнформация.Представление КАК Наименование
	|ИЗ
	|	Справочник." + ?(ВидПрикладногоРешения = "УТ11", "Партнеры", "Контрагенты") + ".КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка
	|	И КонтрагентыКонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("Ссылка", ТТОбъект.Владелец.Контрагент);
	Запрос.УстановитьПараметр("Вид", ВидАдресаДоставки);
	
	Адрес = "";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Адрес = Выборка.Наименование;
	КонецЕсли;
	
	//Телефон
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтрагентыКонтактнаяИнформация.Представление КАК Наименование
	|ИЗ
	|	Справочник." + ?(ВидПрикладногоРешения = "УТ11", "Партнеры", "Контрагенты") + ".КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка
	|	И КонтрагентыКонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("Ссылка", ТТОбъект.Владелец.Контрагент);
	Запрос.УстановитьПараметр("Вид", ВидТелефонаДоставки);
	
	Телефон = "";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Телефон = Выборка.Наименование;
	КонецЕсли;
	
	Если ПриоритетКонтактнойИнформацииПриСинхронизации = Перечисления.БПАГУчетныеСистемы.ПанАгент Тогда
		Если ТТОбъект.Адрес = "" Тогда
			Если СпецификаПользователя = "NV" Тогда
				ТТОбъект.Адрес = Договор.БПАдресДоставки;
			Иначе
				ТТОбъект.Адрес = Адрес;
			КонецЕсли;
		КонецЕсли;
		
		Если СокрЛП(ТТОбъект.Телефон) = "" Тогда
			ТТОбъект.Телефон = Телефон;
		КонецЕсли;
	Иначе
		Если СпецификаПользователя = "NV" Тогда
			Если СокрЛП(Договор.БПАдресДоставки) <> "" Тогда
				ТТОбъект.Адрес = Договор.БПАдресДоставки;
			КонецЕсли;
		Иначе
			Если СокрЛП(Адрес) <> "" Тогда
				ТТОбъект.Адрес = Адрес;
			КонецЕсли;
		КонецЕсли;
		
		Если СокрЛП(Телефон) <> "" Тогда
			ТТОбъект.Телефон = Телефон;
		КонецЕсли;
	КонецЕсли;
	
	Если ПриоритетКонтактнойИнформацииПриСинхронизации = Перечисления.БПАГУчетныеСистемы.ПанАгент Тогда
		Если СокрЛП(ТТОбъект.КонтактноеЛицо) = "" Тогда
			ТТОбъект.КонтактноеЛицо = Договор.Владелец.КонтактноеЛицо;
		КонецЕсли;
		
	Иначе
		Если СокрЛП(Договор.Владелец.КонтактноеЛицо) <> "" Тогда
			ТТОбъект.КонтактноеЛицо = Договор.Владелец.КонтактноеЛицо;
		КонецЕсли;
	КонецЕсли;
	
	Если ТТОбъект.Модифицированность() Тогда
		ТТОбъект.Записать();
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьТорговыеТочки(Объ, ТекДоговор)
	
	НаличиеСетевыхТорговыхТочек = БПАГ.БПАГПолучитьНастройку("1СНаличиеСетевыхТорговыхТочек");
	
	ВыборкаТТ = Справочники.БПАГТорговыеТочки.Выбрать(, Объ.Ссылка);
	ДоговорНайден = Ложь;
	Пока ВыборкаТТ.Следующий() Цикл
		Если (НаличиеСетевыхТорговыхТочек И (ВыборкаТТ.Договор = ТекДоговор)) ИЛИ ((НЕ НаличиеСетевыхТорговыхТочек) И (ВыборкаТТ.Договор.Пустая())) Тогда
			Если НЕ ВыборкаТТ.ПометкаУдаления Тогда
				ТТОбъект = ВыборкаТТ.ПолучитьОбъект();
				ОбновитьТорговуюТочку(ТТОбъект, ТекДоговор);
				ДоговорНайден = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Если Не ДоговорНайден Тогда
		ТТОбъект = Справочники.БПАГТорговыеТочки.СоздатьЭлемент();
		Объ.Записать();
		ТТОбъект.Владелец = Объ.Ссылка;
		Если НаличиеСетевыхТорговыхТочек Тогда
			ТТОбъект.Договор = ТекДоговор;
		КонецЕсли;
		ОбновитьТорговуюТочку(ТТОбъект, ТекДоговор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьАгентыПомощник()
	
	КоличествоГрупп = 0;
	Для Каждого ЭлементСправочника Из СписокФизЛица Цикл
		Если ЭлементСправочника.Пометка Тогда
	        КоличествоГрупп = КоличествоГрупп + 1;
	    КонецЕсли;
	КонецЦикла;
	
	Индекс = 0;
	Для Каждого ЭлементСправочника Из СписокФизЛица Цикл
		Если ЭлементСправочника.Пометка Тогда
			Индекс = Индекс + 1;
			Прогресс = Индекс * 100 / КоличествоГрупп;
			Если КоличествоГрупп <> 1 Тогда
				Состояние(НСтр("ru = 'Идет обработка справочника Агенты'"), Прогресс);
			КонецЕсли;
			ЗаписатьАгентыПомощникНаСервере(ЭлементСправочника.Значение);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ЗаписатьАгентыПомощникНаСервере(Группа)
	
	ТекущийАгент = Группа.Ссылка;
	Если НЕ ТекущийАгент.ПометкаУдаления Тогда
		ПараметрыПеретаскивания = Новый Массив();
		ПараметрыПеретаскивания.Добавить(ТекущийАгент);
		РекурсияАгенты(ПараметрыПеретаскивания, ТекущийАгент.Родитель, 0);
	КонецЕсли;
			
КонецПроцедуры	

Процедура РекурсияАгенты(ПараметрыПеретаскивания, Строка, Папа = 0)
	ПеретаскиваемыеЗначения = ПараметрыПеретаскивания;
	
	Если ТипЗнч(ПеретаскиваемыеЗначения) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Перетаскиваемое = ПеретаскиваемыеЗначения;
		Если Перетаскиваемое.ПометкаУдаления Тогда
			Возврат;
		КонецЕсли;
		
		Если Перетаскиваемое.ЭтоГруппа Тогда
			//Создадим группу и отправим потомков по рекурсии
			//Но сначала проверим, нет ли зацикливания уровней
			
			Если Строка <> Неопределено Тогда
				Если Строка.ЭтоГруппа Тогда
					Если Перетаскиваемое = Строка.ФизЛицо Тогда
						//Предупреждение("Нельзя поместить группу в саму себя! Зацикливание уровней!");
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			СуществующийЭлемент = Справочники.БПАГАгенты.НайтиПоРеквизиту("ФизЛицо", Перетаскиваемое);
			Если СуществующийЭлемент <> Справочники.БПАГАгенты.ПустаяСсылка() Тогда
				Объ = СуществующийЭлемент.ПолучитьОбъект();
			Иначе
				Объ = Справочники.БПАГАгенты.СоздатьГруппу();
			КонецЕсли;
			
			Если Папа = 0 Тогда
				Если Строка <> Неопределено Тогда
					Если Строка.ЭтоГруппа Тогда
						Объ.Родитель = Строка
					КонецЕсли;
				КонецЕсли;
			Иначе
				Объ.Родитель = Папа;
			КонецЕсли;
			
			Объ.ФизЛицо = Перетаскиваемое;
			Объ.Наименование = Перетаскиваемое.Наименование;
			Объ.Записать();
			//Проверка на первоначальное заполнение, исправление кода, изменение флага
			Если ПервоначальноеЗаполнениеАгентов Тогда 
				Объ.Код = СокрЛП(ПрефиксКодаАгентов) + Прав(Объ.Код, СтрДлина(Объ.Код)-4);
				Объ.Записать();
				ПервоначальноеЗаполнениеАгентов = Ложь;
			КонецЕсли;
			Запрос = Новый Запрос();
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ФизическиеЛица.Ссылка
			|ИЗ
			|	Справочник.ФизическиеЛица КАК ФизическиеЛица
			|ГДЕ
			|	ФизическиеЛица.Родитель = &Родитель
			|	И (НЕ ФизическиеЛица.ПометкаУдаления)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ФизическиеЛица.Наименование";
			
			Запрос.УстановитьПараметр("Родитель", Перетаскиваемое);
			ТЗ = Запрос.Выполнить().Выгрузить();
			
			Для Каждого Потомок Из ТЗ Цикл
				РекурсивныеПараметрыПеретаскивания = Потомок.Ссылка;
				РекурсияАгенты(РекурсивныеПараметрыПеретаскивания, Строка, Объ.Ссылка);
			КонецЦикла;
			
		Иначе
			СуществующийЭлемент = Справочники.БПАГАгенты.НайтиПоРеквизиту("ФизЛицо", Перетаскиваемое);
			Если СуществующийЭлемент <> Справочники.БПАГАгенты.ПустаяСсылка() Тогда
				Объ = СуществующийЭлемент.ПолучитьОбъект();
			Иначе
				Объ = Справочники.БПАГАгенты.СоздатьЭлемент();
			КонецЕсли;
			
			Если Папа = 0 Тогда
				Если Строка <> Неопределено Тогда
					Если Строка.ЭтоГруппа Тогда
						Объ.Родитель = Строка;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Объ.Родитель = Папа;
			КонецЕсли;
			
			Объ.ФизЛицо = Перетаскиваемое;
			Объ.Наименование = Перетаскиваемое.Наименование;
			Объ.Записать();
			//Проверка на первоначальное заполнение, исправление кода, изменение флага
			Если ПервоначальноеЗаполнениеАгентов Тогда 
				Объ.Код = СокрЛП(ПрефиксКодаАгентов) + Прав(Объ.Код, СтрДлина(Объ.Код)-4);
				Объ.Записать();
				ПервоначальноеЗаполнениеАгентов = Ложь;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ПеретаскиваемыеЗначения) = Тип("Массив") Тогда
		Для Каждого Перетаскиваемое Из ПеретаскиваемыеЗначения Цикл
			РекурсивныеПараметрыПеретаскивания = Перетаскиваемое;
			РекурсияАгенты(РекурсивныеПараметрыПеретаскивания, Строка, 0);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

//FTP-сервер начало
Функция ПревратитьСтрокуВАнглийкиеБольшиеБуквы(тмпСтрока) 
	НоваяСтрока = тмпСтрока;
	
	Строка1 = "ЙЦУКЕНГШЩЗФЫВАПРОЛДЯЧСМИТЬйцукенгшщзфывапролдячсмитьqwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM"; //Внимание, на 1 символ больше за счет двойных кавычек
	Строка2 = "QWERTYUIOPASDFGHJKLZXCVBNMQWERTYUIOPASDFGHJKLZXCVBNMQWERTYUIOPASDFGHJKLZXCVBNMQWERTYUIOPASDFGHJKLZXCVBNM";
	СтрокаЭталон = "QWERTYUIOPASDFGHJKLZXCVBNM";
	
	Для i = 1 По СтрДлина(НоваяСтрока) Цикл
		Буква = Сред(НоваяСтрока, i, 1);
		Поз = Найти(Строка1, Буква);
		Если Поз > 0 Тогда
			НоваяСтрока = СтрЗаменить(НоваяСтрока, Буква, Сред(Строка2, Поз, 1));
		ИначеЕсли Найти(СтрокаЭталон, Буква) = 0 Тогда 
			НоваяСтрока = "";
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НоваяСтрока;
КонецФункции

Функция ПроверитьПрефикс()
	ТекущийПрефикс = ПревратитьСтрокуВАнглийкиеБольшиеБуквы(ПрефиксКодаАгентов);
	Если ТекущийПрефикс <> "" Тогда
		ПрефиксКодаАгентов = ТекущийПрефикс;
		//Проверим, нет ли на тестовом ftp такой папки, такой префикс может быть занят другим клиентом.
		АдресВнешнегоFTP = БПАГ.БПАГПолучитьНастройку("1САдресВнешнегоFTP");
		ЛогинВнешнегоFTP = БПАГ.БПАГПолучитьНастройку("1СЛогинВнешнегоFTP");
		ПарольВнешнегоFTP = БПАГ.БПАГПолучитьНастройку("1СПарольВнешнегоFTP");
		Таймаут = БПАГ.БПАГПолучитьНастройку("1СТаймаутFTP");
		ПроксиСервер = БПАГ.ПолучитьПрокси();
		Попытка 
			ФТП = Новый FTPСоединение(АдресВнешнегоFTP, , ЛогинВнешнегоFTP, ПарольВнешнегоFTP, ПроксиСервер, , Таймаут);
		Исключение
		    Сообщить("Не удалось подключиться к FTP-серверу!");
		КонецПопытки;
		ИмяКаталогаСервера = ТекущийПрефикс + "*";
	    Попытка
        	МассивНайденныхКаталогов = ФТП.НайтиФайлы(ИмяКаталогаСервера, "");
		    Для Каждого НайденныйКаталог Из МассивНайденныхКаталогов Цикл
				Если Лев(НайденныйКаталог.Имя,4) = ТекущийПрефикс Тогда
					Возврат "0";
				КонецЕсли;	
			КонецЦикла;		
    	Исключение
	    КонецПопытки;		
	Иначе
		ПрефиксКодаАгентов = "";
		Возврат "1";
	КонецЕсли;
	Возврат "2";
КонецФункции
//FTP-сервер конец

&НаКлиенте
Процедура СписокОрганизацииПомощникОтметитьВсех(Команда)
	Для Каждого тмпСтрока из СписокОрганизаций Цикл
		тмпСтрока.Пометка = Истина;
	КонецЦикла;		
	ПризнакМодифицированности = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокОрганизацийПомощникСнятьВсе(Команда)
	Для Каждого тмпСтрока из СписокОрганизаций Цикл
		тмпСтрока.Пометка = Ложь;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура СписокСкладыПомощникОтметитьВсех(Команда)
	Для Каждого тмпСтрока из СписокСклады Цикл
		тмпСтрока.Пометка = Истина;
	КонецЦикла;	
	ПризнакМодифицированности = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокСкладыПомощникСнятьВсе(Команда)
	Для Каждого тмпСтрока из СписокСклады Цикл
		тмпСтрока.Пометка = Ложь;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатураПомощникОтметитьВсех(Команда)
	Для Каждого тмпСтрока из СписокНоменклатура Цикл
		тмпСтрока.Пометка = Истина;
	КонецЦикла;	
	ПризнакМодифицированности = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатураПомощникСнятьВсе(Команда)
	Для Каждого тмпСтрока из СписокНоменклатура Цикл
		тмпСтрока.Пометка = Ложь;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура СписокКонтрагентыПомощникОтметитьВсех(Команда)
	Для Каждого тмпСтрока из СписокКонтрагенты Цикл
		тмпСтрока.Пометка = Истина;
	КонецЦикла;	
	ПризнакМодифицированности = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокКонтрагентыПомощникСнятьВсе(Команда)
	Для Каждого тмпСтрока из СписокКонтрагенты Цикл
		тмпСтрока.Пометка = Ложь;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура СписокПрайсыПомощникОтметитьВсех(Команда)
	Для Каждого тмпСтрока из СписокПрайсы Цикл
		тмпСтрока.Пометка = Истина;
	КонецЦикла;	
	ПризнакМодифицированности = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокПрайсыПомощникСнятьВсе(Команда)
	Для Каждого тмпСтрока из СписокПрайсы Цикл
		тмпСтрока.Пометка = Ложь;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура СписокАгентыПомощникОтметитьВсех(Команда)
	Для Каждого тмпСтрока из СписокФизЛица Цикл
		тмпСтрока.Пометка = Истина;
	КонецЦикла;	
	ПризнакМодифицированности = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокАгентыПомощникСнятьВсе(Команда)
	Для Каждого тмпСтрока из СписокФизЛица Цикл
		тмпСтрока.Пометка = Ложь;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПризнакМодифицированности(Элемент)
	ПризнакМодифицированности = Истина;
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеБуферногоСтравочника(БуферныйСправочник)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БПАГОрганизации.Ссылка
	|ИЗ
	|	Справочник.БПАГОрганизации КАК БПАГОрганизации
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Если БуферныйСправочник = "БПАГСклады" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "БПАГОрганизации", "БПАГСклады");
	ИначеЕсли БуферныйСправочник = "БПАГНоменклатура" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "БПАГОрганизации", "БПАГНоменклатура");
	ИначеЕсли БуферныйСправочник = "БПАГКонтрагенты" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "БПАГОрганизации", "БПАГКонтрагенты");
	ИначеЕсли БуферныйСправочник = "БПАГПрайсы" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "БПАГОрганизации", "БПАГПрайсы");
	ИначеЕсли БуферныйСправочник = "БПАГАгенты" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "БПАГОрганизации", "БПАГАгенты");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выгрузить();
	Если Выборка.Количество() > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции	

Процедура СообщениеОбОшибкеПомощник(БуферныйСправочник)
	
	Сообщить("Не заполнен справочник " + БуферныйСправочник + "! " + "Для продолжения работы необходимо заполнить указанный справочник!");
	
КонецПроцедуры	

&НаКлиенте
Процедура НавигацияПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница.Имя = "ОбменДанными" Тогда
		 //В зависимости от константы открываем вариант страницы обмена
		 Константа_РасширеннаяФормаОбменаДанными = БПАГ.БПАГПолучитьНастройку("1СВидЗакладкиОбменДаннымиРасширенная");
		 Если Константа_РасширеннаяФормаОбменаДанными <> "Ошибка" Тогда
			 Если Константа_РасширеннаяФормаОбменаДанными Тогда
				 Элементы.ВариантыОбменаДанными.ТекущаяСтраница = Элементы.СтраницаРасширенная;
				 РасширенныйРежимФормыОбменаДанными = Константа_РасширеннаяФормаОбменаДанными;
			 Иначе
				 Элементы.ВариантыОбменаДанными.ТекущаяСтраница = Элементы.СтраницаКраткая;
				 ПереходНаСтраницуОбменДанными();
			 КонецЕсли;	
		 КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//При смене страниц, если переход на страницу "Обмен данными", необходимо
//настроить внешний вид страницы краткий
Процедура ПереходНаСтраницуОбменДанными()
	//Из помощника открываем краткую страницу обмена данными
	//автоматически отмечаем всех агентов и все галки для выгрузки/загрузки
	РасширенныйРежимФормыОбменаДанными = Ложь;
	ЗаписатьКонстантуРасширеннаяФормаОбменаДаннымиНаСервере();
	Элементы.ВариантыОбменаДанными.ТекущаяСтраница = Элементы.СтраницаКраткая;
	ОбновитьСписокАгентов();
	Для Каждого тмпСтрока Из Объект.ОбменАгенты Цикл
		тмпСтрока.Флаг = Истина;
	КонецЦикла;
	Для Каждого тмпСтрока Из ОбъектыВыгрузки.ПолучитьЭлементы() Цикл
		тмпСтрока.Флаг = Истина;
		Для Каждого тмпПодСтрока Из тмпСтрока.ПолучитьЭлементы() Цикл
			тмпПодСтрока.Флаг = Истина;
		КонецЦикла;
	КонецЦикла;
	Для Каждого тмпСтрока Из ОбъектыЗагрузки.ПолучитьЭлементы() Цикл
		тмпСтрока.Флаг = Истина;
		Для Каждого тмпПодСтрока Из тмпСтрока.ПолучитьЭлементы() Цикл
			тмпПодСтрока.Флаг = Истина;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры	

&НаКлиенте
Процедура РасширеннаяФормаОбменаДаннымиПриИзменении(Элемент)
	ЗаписатьКонстантуРасширеннаяФормаОбменаДаннымиНаСервере();
	//настроить страницу Обмена в соответствии с константой
	Если РасширенныйРежимФормыОбменаДанными Тогда
		Элементы.ВариантыОбменаДанными.ТекущаяСтраница = Элементы.СтраницаРасширенная;
	Иначе
		Элементы.ВариантыОбменаДанными.ТекущаяСтраница = Элементы.СтраницаКраткая;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьКонстантуРасширеннаяФормаОбменаДаннымиНаСервере()
	//Создать новую запись для константы
	НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
	Константа_РасширеннаяФормаОбменаДанными = Справочники.БПАГВидыНастроекАгентов.НайтиПоКоду("1СВидЗакладкиОбменДаннымиРасширенная");
	Если НЕ Константа_РасширеннаяФормаОбменаДанными.Пустая() Тогда
		НаборЗаписей.Отбор.Агент.Установить(Справочники.БПАГАгенты.ПустаяСсылка());
		НаборЗаписей.Отбор.Профиль.Установить(Справочники.БПАГПрофилиАгентов.ПустаяСсылка());
		НаборЗаписей.Отбор.ВидНастройки.Установить(Константа_РасширеннаяФормаОбменаДанными);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Агент = Справочники.БПАГАгенты.ПустаяСсылка();
		НоваяЗапись.Профиль = Справочники.БПАГПрофилиАгентов.ПустаяСсылка();
		НоваяЗапись.ВидНастройки = Константа_РасширеннаяФормаОбменаДанными;
		НоваяЗапись.Значение = РасширенныйРежимФормыОбменаДанными;
		НаборЗаписей.Записать();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НастройкиСистемыПоУмолчанию()
	//Настройки системы по умолчанию
	//Раздел Настройки обмена
	//Настройки тестового FTP
	ИспользоватьВнешнийFTP = БПАГ.БПАГПолучитьНастройку("1СИспользоватьВнешнийFTP");
	Если НЕ ИспользоватьВнешнийFTP Тогда
		//1СИспользоватьВнешнийFTP
		НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
		НастройкаПоУмолчанию = Справочники.БПАГВидыНастроекАгентов.НайтиПоКоду("1СИспользоватьВнешнийFTP");
		Если НЕ НастройкаПоУмолчанию.Пустая() Тогда
			НаборЗаписей.Отбор.Агент.Установить(Справочники.БПАГАгенты.ПустаяСсылка());
			НаборЗаписей.Отбор.Профиль.Установить(Справочники.БПАГПрофилиАгентов.ПустаяСсылка());
			НаборЗаписей.Отбор.ВидНастройки.Установить(НастройкаПоУмолчанию);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Агент = Справочники.БПАГАгенты.ПустаяСсылка();
			НоваяЗапись.Профиль = Справочники.БПАГПрофилиАгентов.ПустаяСсылка();
			НоваяЗапись.ВидНастройки = НастройкаПоУмолчанию;
			НоваяЗапись.Значение = Истина;
			НаборЗаписей.Записать();
		КонецЕсли;
		//1САдресВнешнегоFTP
		НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
		НастройкаПоУмолчанию = Справочники.БПАГВидыНастроекАгентов.НайтиПоКоду("1САдресВнешнегоFTP");
		Если НЕ НастройкаПоУмолчанию.Пустая() Тогда
			НаборЗаписей.Отбор.Агент.Установить(Справочники.БПАГАгенты.ПустаяСсылка());
			НаборЗаписей.Отбор.Профиль.Установить(Справочники.БПАГПрофилиАгентов.ПустаяСсылка());
			НаборЗаписей.Отбор.ВидНастройки.Установить(НастройкаПоУмолчанию);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Агент = Справочники.БПАГАгенты.ПустаяСсылка();
			НоваяЗапись.Профиль = Справочники.БПАГПрофилиАгентов.ПустаяСсылка();
			НоваяЗапись.ВидНастройки = НастройкаПоУмолчанию;
			НоваяЗапись.Значение = "ftp.panagent.ru";
			НаборЗаписей.Записать();
		КонецЕсли;
		//1СЛогинВнешнегоFTP
		НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
		НастройкаПоУмолчанию = Справочники.БПАГВидыНастроекАгентов.НайтиПоКоду("1СЛогинВнешнегоFTP");
		Если НЕ НастройкаПоУмолчанию.Пустая() Тогда
			НаборЗаписей.Отбор.Агент.Установить(Справочники.БПАГАгенты.ПустаяСсылка());
			НаборЗаписей.Отбор.Профиль.Установить(Справочники.БПАГПрофилиАгентов.ПустаяСсылка());
			НаборЗаписей.Отбор.ВидНастройки.Установить(НастройкаПоУмолчанию);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Агент = Справочники.БПАГАгенты.ПустаяСсылка();
			НоваяЗапись.Профиль = Справочники.БПАГПрофилиАгентов.ПустаяСсылка();
			НоваяЗапись.ВидНастройки = НастройкаПоУмолчанию;
			НоваяЗапись.Значение = "test";
			НаборЗаписей.Записать();
		КонецЕсли;
		//1СПарольВнешнегоFTP
		НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
		НастройкаПоУмолчанию = Справочники.БПАГВидыНастроекАгентов.НайтиПоКоду("1СПарольВнешнегоFTP");
		Если НЕ НастройкаПоУмолчанию.Пустая() Тогда
			НаборЗаписей.Отбор.Агент.Установить(Справочники.БПАГАгенты.ПустаяСсылка());
			НаборЗаписей.Отбор.Профиль.Установить(Справочники.БПАГПрофилиАгентов.ПустаяСсылка());
			НаборЗаписей.Отбор.ВидНастройки.Установить(НастройкаПоУмолчанию);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Агент = Справочники.БПАГАгенты.ПустаяСсылка();
			НоваяЗапись.Профиль = Справочники.БПАГПрофилиАгентов.ПустаяСсылка();
			НоваяЗапись.ВидНастройки = НастройкаПоУмолчанию;
			НоваяЗапись.Значение = "pan13042012";
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;	
	//Раздел Настройки 1С
	//1СТекущийВариантМаршрутов
	ТекущийосновнойМаршрут = БПАГ.БПАГПолучитьНастройку("1СТекущийВариантМаршрутов");
	Если ТекущийосновнойМаршрут.Пустая() Тогда 
		НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
		НастройкаПоУмолчанию = Справочники.БПАГВидыНастроекАгентов.НайтиПоКоду("1СТекущийВариантМаршрутов");
		Если НЕ НастройкаПоУмолчанию.Пустая() Тогда
			//Создадим Основной вариант маршрутов
			//на 7 дней с понедельника
			Объ = Справочники.БПАГВариантыМаршрутов.СоздатьЭлемент();
			Объ.Наименование = "Основной";
			Объ.ДатаНачала = НачалоНедели(ТекущаяДата());;
			Объ.ИнтервалПланирования = 7;
			Объ.Записать();
			
			НаборЗаписей.Отбор.Агент.Установить(Справочники.БПАГАгенты.ПустаяСсылка());
			НаборЗаписей.Отбор.Профиль.Установить(Справочники.БПАГПрофилиАгентов.ПустаяСсылка());
			НаборЗаписей.Отбор.ВидНастройки.Установить(НастройкаПоУмолчанию);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Агент = Справочники.БПАГАгенты.ПустаяСсылка();
			НоваяЗапись.Профиль = Справочники.БПАГПрофилиАгентов.ПустаяСсылка();
			НоваяЗапись.ВидНастройки = НастройкаПоУмолчанию;
			НоваяЗапись.Значение = Объ.Ссылка;
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	//1СВидАдресаДоставки
	НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
	НастройкаПоУмолчанию = Справочники.БПАГВидыНастроекАгентов.НайтиПоКоду("1СВидАдресаДоставки");
	Если НЕ НастройкаПоУмолчанию.Пустая() Тогда
		НаборЗаписей.Отбор.Агент.Установить(Справочники.БПАГАгенты.ПустаяСсылка());
		НаборЗаписей.Отбор.Профиль.Установить(Справочники.БПАГПрофилиАгентов.ПустаяСсылка());
		НаборЗаписей.Отбор.ВидНастройки.Установить(НастройкаПоУмолчанию);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Агент = Справочники.БПАГАгенты.ПустаяСсылка();
		НоваяЗапись.Профиль = Справочники.БПАГПрофилиАгентов.ПустаяСсылка();
		НоваяЗапись.ВидНастройки = НастройкаПоУмолчанию;
		
		ВидПрикладногоРешения = БПАГ.ПолучитьВидПрикладногоРешения();
		Если ВидПрикладногоРешения = "УТ11" Тогда
			НоваяЗапись.Значение = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
		Иначе
			НоваяЗапись.Значение = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
		КонецЕсли;
		НаборЗаписей.Записать();
	КонецЕсли;
	//1СВидТелефонаДоставки
	НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
	НастройкаПоУмолчанию = Справочники.БПАГВидыНастроекАгентов.НайтиПоКоду("1СВидТелефонаДоставки");
	Если НЕ НастройкаПоУмолчанию.Пустая() Тогда
		НаборЗаписей.Отбор.Агент.Установить(Справочники.БПАГАгенты.ПустаяСсылка());
		НаборЗаписей.Отбор.Профиль.Установить(Справочники.БПАГПрофилиАгентов.ПустаяСсылка());
		НаборЗаписей.Отбор.ВидНастройки.Установить(НастройкаПоУмолчанию);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Агент = Справочники.БПАГАгенты.ПустаяСсылка();
		НоваяЗапись.Профиль = Справочники.БПАГПрофилиАгентов.ПустаяСсылка();
		НоваяЗапись.ВидНастройки = НастройкаПоУмолчанию;
		
		ВидПрикладногоРешения = БПАГ.ПолучитьВидПрикладногоРешения();
		Если ВидПрикладногоРешения = "УТ11" Тогда
			НоваяЗапись.Значение = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
		Иначе
			НоваяЗапись.Значение = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		КонецЕсли;
		НаборЗаписей.Записать();
	КонецЕсли;
	//1СВидEMailДоставки
	НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
	НастройкаПоУмолчанию = Справочники.БПАГВидыНастроекАгентов.НайтиПоКоду("1СВидEMailДоставки");
	Если НЕ НастройкаПоУмолчанию.Пустая() Тогда
		НаборЗаписей.Отбор.Агент.Установить(Справочники.БПАГАгенты.ПустаяСсылка());
		НаборЗаписей.Отбор.Профиль.Установить(Справочники.БПАГПрофилиАгентов.ПустаяСсылка());
		НаборЗаписей.Отбор.ВидНастройки.Установить(НастройкаПоУмолчанию);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Агент = Справочники.БПАГАгенты.ПустаяСсылка();
		НоваяЗапись.Профиль = Справочники.БПАГПрофилиАгентов.ПустаяСсылка();
		НоваяЗапись.ВидНастройки = НастройкаПоУмолчанию;
		
		ВидПрикладногоРешения = БПАГ.ПолучитьВидПрикладногоРешения();
		Если ВидПрикладногоРешения = "УТ11" Тогда
			НоваяЗапись.Значение = Справочники.ВидыКонтактнойИнформации.EmailПартнера;
		Иначе
			НоваяЗапись.Значение = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
		КонецЕсли;
		НаборЗаписей.Записать();
	КонецЕсли;
	//1СВариантЗагрузкиЗаявок
	НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
	НастройкаПоУмолчанию = Справочники.БПАГВидыНастроекАгентов.НайтиПоКоду("1СВариантЗагрузкиЗаявок");
	Если НЕ НастройкаПоУмолчанию.Пустая() Тогда
		НаборЗаписей.Отбор.Агент.Установить(Справочники.БПАГАгенты.ПустаяСсылка());
		НаборЗаписей.Отбор.Профиль.Установить(Справочники.БПАГПрофилиАгентов.ПустаяСсылка());
		НаборЗаписей.Отбор.ВидНастройки.Установить(НастройкаПоУмолчанию);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Агент = Справочники.БПАГАгенты.ПустаяСсылка();
		НоваяЗапись.Профиль = Справочники.БПАГПрофилиАгентов.ПустаяСсылка();
		НоваяЗапись.ВидНастройки = НастройкаПоУмолчанию;
		НоваяЗапись.Значение = Перечисления.БПАГВариантыЗагрузкиЗаявок.Заказ;
		НаборЗаписей.Записать();
	КонецЕсли;
	//defaultCompanyID
	Если НЕ ОсновнаяОрганизацияПомощник.Пустая() Тогда
		НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
		НастройкаПоУмолчанию = Справочники.БПАГВидыНастроекАгентов.НайтиПоКоду("defaultCompanyID");
		Если НЕ НастройкаПоУмолчанию.Пустая() Тогда
			НаборЗаписей.Отбор.Агент.Установить(Справочники.БПАГАгенты.ПустаяСсылка());
			НаборЗаписей.Отбор.Профиль.Установить(Справочники.БПАГПрофилиАгентов.ПустаяСсылка());
			НаборЗаписей.Отбор.ВидНастройки.Установить(НастройкаПоУмолчанию);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Агент = Справочники.БПАГАгенты.ПустаяСсылка();
			НоваяЗапись.Профиль = Справочники.БПАГПрофилиАгентов.ПустаяСсылка();
			НоваяЗапись.ВидНастройки = НастройкаПоУмолчанию;
			НоваяЗапись.Значение = ОсновнаяОрганизацияПомощник;
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	//1СОсновнаяКасса
	Настройка_ОсновнаяОрганизация = БПАГ.БПАГПолучитьНастройку("defaultCompanyID");
	Если НЕ Настройка_ОсновнаяОрганизация.Пустая() Тогда
		НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
		НастройкаПоУмолчанию = Справочники.БПАГВидыНастроекАгентов.НайтиПоКоду("1СОсновнаяКасса");
		Если НЕ НастройкаПоУмолчанию.Пустая() Тогда
			НаборЗаписей.Отбор.Агент.Установить(Справочники.БПАГАгенты.ПустаяСсылка());
			НаборЗаписей.Отбор.Профиль.Установить(Справочники.БПАГПрофилиАгентов.ПустаяСсылка());
			НаборЗаписей.Отбор.ВидНастройки.Установить(НастройкаПоУмолчанию);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Агент = Справочники.БПАГАгенты.ПустаяСсылка();
			НоваяЗапись.Профиль = Справочники.БПАГПрофилиАгентов.ПустаяСсылка();
			НоваяЗапись.ВидНастройки = НастройкаПоУмолчанию;
			//Установим кассу
			ТекущаяКасса = Справочники.Кассы.ПустаяСсылка();
			ВыборкаКассы = Справочники.Кассы.Выбрать(, Настройка_ОсновнаяОрганизация.Организация);
			Пока ВыборкаКассы.Следующий() Цикл
				Если НЕ ВыборкаКассы.ЭтоГруппа Тогда
					Если ВыборкаКассы.ВалютаДенежныхСредств = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
						ТекущаяКасса = ВыборкаКассы.Ссылка;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			НоваяЗапись.Значение = ТекущаяКасса;
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;	
	//defaultMobileDepotID
	Если НЕ ОсновнойСкладТранспортПомощник.Пустая() Тогда
		НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
		НастройкаПоУмолчанию = Справочники.БПАГВидыНастроекАгентов.НайтиПоКоду("defaultMobileDepotID");
		Если НЕ НастройкаПоУмолчанию.Пустая() Тогда
			НаборЗаписей.Отбор.Агент.Установить(Справочники.БПАГАгенты.ПустаяСсылка());
			НаборЗаписей.Отбор.Профиль.Установить(Справочники.БПАГПрофилиАгентов.ПустаяСсылка());
			НаборЗаписей.Отбор.ВидНастройки.Установить(НастройкаПоУмолчанию);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Агент = Справочники.БПАГАгенты.ПустаяСсылка();
			НоваяЗапись.Профиль = Справочники.БПАГПрофилиАгентов.ПустаяСсылка();
			НоваяЗапись.ВидНастройки = НастройкаПоУмолчанию;
			НоваяЗапись.Значение = ОсновнойСкладТранспортПомощник;
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	//defaultCentralDepotID	
	Если НЕ ОсновнойЦентральныйСкладПомощник.Пустая() Тогда
		НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
		НастройкаПоУмолчанию = Справочники.БПАГВидыНастроекАгентов.НайтиПоКоду("defaultCentralDepotID");
		Если НЕ НастройкаПоУмолчанию.Пустая() Тогда
			НаборЗаписей.Отбор.Агент.Установить(Справочники.БПАГАгенты.ПустаяСсылка());
			НаборЗаписей.Отбор.Профиль.Установить(Справочники.БПАГПрофилиАгентов.ПустаяСсылка());
			НаборЗаписей.Отбор.ВидНастройки.Установить(НастройкаПоУмолчанию);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Агент = Справочники.БПАГАгенты.ПустаяСсылка();
			НоваяЗапись.Профиль = Справочники.БПАГПрофилиАгентов.ПустаяСсылка();
			НоваяЗапись.ВидНастройки = НастройкаПоУмолчанию;
			НоваяЗапись.Значение = ОсновнойЦентральныйСкладПомощник;
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	//defaultReturnInDepotID
	Если НЕ ОсновнойСкладВозвратаПомощник.Пустая() Тогда
		НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
		НастройкаПоУмолчанию = Справочники.БПАГВидыНастроекАгентов.НайтиПоКоду("defaultReturnInDepotID");
		Если НЕ НастройкаПоУмолчанию.Пустая() Тогда
			НаборЗаписей.Отбор.Агент.Установить(Справочники.БПАГАгенты.ПустаяСсылка());
			НаборЗаписей.Отбор.Профиль.Установить(Справочники.БПАГПрофилиАгентов.ПустаяСсылка());
			НаборЗаписей.Отбор.ВидНастройки.Установить(НастройкаПоУмолчанию);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Агент = Справочники.БПАГАгенты.ПустаяСсылка();
			НоваяЗапись.Профиль = Справочники.БПАГПрофилиАгентов.ПустаяСсылка();
			НоваяЗапись.ВидНастройки = НастройкаПоУмолчанию;
			НоваяЗапись.Значение = ОсновнойСкладВозвратаПомощник;
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	//defaultPriceTypeID
	Если НЕ ОсновнойТипЦенПомощник.Пустая() Тогда
		НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
		НастройкаПоУмолчанию = Справочники.БПАГВидыНастроекАгентов.НайтиПоКоду("defaultPriceTypeID");
		Если НЕ НастройкаПоУмолчанию.Пустая() Тогда
			НаборЗаписей.Отбор.Агент.Установить(Справочники.БПАГАгенты.ПустаяСсылка());
			НаборЗаписей.Отбор.Профиль.Установить(Справочники.БПАГПрофилиАгентов.ПустаяСсылка());
			НаборЗаписей.Отбор.ВидНастройки.Установить(НастройкаПоУмолчанию);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Агент = Справочники.БПАГАгенты.ПустаяСсылка();
			НоваяЗапись.Профиль = Справочники.БПАГПрофилиАгентов.ПустаяСсылка();
			НоваяЗапись.ВидНастройки = НастройкаПоУмолчанию;
			НоваяЗапись.Значение = ОсновнойТипЦенПомощник;
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастройкиСистемыПоУмолчаниюПриоткрытии()
	//Восстановим настройки системы по умолчанию при открытии стартового помощника
	ОсновнаяОрганизацияПомощник = БПАГ.БПАГПолучитьНастройку("defaultCompanyID");
	ОсновнойСкладТранспортПомощник = БПАГ.БПАГПолучитьНастройку("defaultMobileDepotID");
	ОсновнойЦентральныйСкладПомощник = БПАГ.БПАГПолучитьНастройку("defaultCentralDepotID");
	ОсновнойСкладВозвратаПомощник = БПАГ.БПАГПолучитьНастройку("defaultReturnInDepotID");
	ОсновнойТипЦенПомощник = БПАГ.БПАГПолучитьНастройку("defaultPriceTypeID");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОтчетаПоАнкетам(Команда)
	Форма = ПолучитьФорму("Обработка.БПАГПанАгентЦентрУправленияТест.Форма.УПФормаОтчетПоАнкетам");
	Форма.Открыть();
КонецПроцедуры


&НаКлиенте
Процедура СохранитьНастройкуСообщениеДня(Команда)
	НаименованиеНастройки = "";
	Ошибка = Ложь;
	Подсказка = "Введите название настройки";
	Если ВвестиСтроку(НаименованиеНастройки, Подсказка, 0, Истина) Тогда
		Если НаименованиеНастройки <> "" Тогда
			ЗаписатьНастройкуВСправочникНастроекНаСервере(НаименованиеНастройки, Ошибка);
			Если Ошибка Тогда
				Предупреждение("Настройка с таким названием уже существует! Введите другое название.");
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаписатьНастройкуВСправочникНастроекНаСервере(НаименованиеНастройки, Ошибка)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БПАГНастройкиОтправкиСообщений.Ссылка,
	|	БПАГНастройкиОтправкиСообщений.Наименование
	|ИЗ
	|	Справочник.БПАГНастройкиОтправкиСообщений КАК БПАГНастройкиОтправкиСообщений
	|ГДЕ
	|	НЕ БПАГНастройкиОтправкиСообщений.ПометкаУдаления
	|	И БПАГНастройкиОтправкиСообщений.Наименование = &Настройка";
	
	Запрос.УстановитьПараметр("Настройка", НаименованиеНастройки);
	Выборка = Запрос.Выполнить().Выбрать();
	Список = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		ТекущаяНастройка = Выборка.Ссылка;
		Ошибка = Истина;
		Возврат;
	КонецЦикла;
	НастройкаОбъект = Справочники.БПАГНастройкиОтправкиСообщений.СоздатьЭлемент();
	НастройкаОбъект.Наименование = НаименованиеНастройки;
	НастройкаОбъект.Записать();
	Для Каждого СтрокаАгенты из СписокБПАГАгентов Цикл
		Если СтрокаАгенты.Пометка Тогда
			НоваяСтрока = НастройкаОбъект.Агенты.Добавить();
			НоваяСтрока.Агент = СтрокаАгенты.Значение;
		КонецЕсли;
	КонецЦикла;	
	НастройкаОбъект.Записать();
КонецПроцедуры	

Процедура ЗаполнитьЗначенияНастроекСообщениеДняНаСервере(Список)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БПАГНастройкиОтправкиСообщений.Ссылка
	|ИЗ
	|	Справочник.БПАГНастройкиОтправкиСообщений КАК БПАГНастройкиОтправкиСообщений
	|ГДЕ
	|	НЕ БПАГНастройкиОтправкиСообщений.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Список = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		ТмпНастройка = Выборка.Ссылка;
		Список.Добавить(ТмпНастройка.Наименование);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
//Удалить
Процедура СписокНастроекСообщениеДняНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//	СтандартнаяОбработка = Ложь;
//	Список = Новый СписокЗначений;
//	ЗаполнитьЗначенияНастроекСообщениеДняНаСервере(Список);
//	СписокНастроекСообщениеДня = ВыбратьИзСписка(Список, Элементы.СписокНастроекСообщениеДня);
//	//ЗаполнитьСписокАгентовПоНастройкеСообщениеДняНаСервере(Элемент.ТекстРедактирования);
КонецПроцедуры

Процедура ЗаполнитьСписокАгентовПоНастройкеСообщениеДняНаСервере(ВыбранноеЗначение)
	
	Настройка = ПолучитьИзВременногоХранилища(ВыбранноеЗначение);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БПАГНастройкиОтправкиСообщений.Ссылка,
	|	БПАГНастройкиОтправкиСообщений.Наименование
	|ИЗ
	|	Справочник.БПАГНастройкиОтправкиСообщений КАК БПАГНастройкиОтправкиСообщений
	|ГДЕ
	|	НЕ БПАГНастройкиОтправкиСообщений.ПометкаУдаления
	|	И БПАГНастройкиОтправкиСообщений.Ссылка = &Настройка";
	
	Запрос.УстановитьПараметр("Настройка", Настройка);
	Выборка = Запрос.Выполнить().Выбрать();
	Список = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		ТмпНастройка = Выборка.Ссылка;
		//Убрать все пометки
		Для Каждого ТмпСтрока из СписокБПАГАгентов Цикл
			ТмпСтрока.Пометка = Ложь;
		КонецЦикла;
		//По агентам настройки выставим галки
		Для Каждого ТмпАгент из ТмпНастройка.Агенты Цикл
			Для Каждого ТмпСтрока из СписокБПАГАгентов Цикл
				Если ТмпСтрока.Значение = ТмпАгент.Агент Тогда
					ТмпСтрока.Пометка = Истина;
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

//Процедура УдалитьСписокАгентовПоНастройкеСообщениеДняНаСервере(ВыбранноеЗначение)
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	БПАГНастройкиОтправкиСообщений.Ссылка,
//	|	БПАГНастройкиОтправкиСообщений.Наименование
//	|ИЗ
//	|	Справочник.БПАГНастройкиОтправкиСообщений КАК БПАГНастройкиОтправкиСообщений
//	|ГДЕ
//	|	НЕ БПАГНастройкиОтправкиСообщений.ПометкаУдаления
//	|	И БПАГНастройкиОтправкиСообщений.Наименование = &Настройка";
//	
//	Запрос.УстановитьПараметр("Настройка", ВыбранноеЗначение);
//	Выборка = Запрос.Выполнить().Выбрать();
//	Список = Новый СписокЗначений;
//	Пока Выборка.Следующий() Цикл
//		ТмпНастройка = Выборка.Ссылка;
//		Объ = ТмпНастройка.ПолучитьОбъект();
//		Объ.УстановитьПометкуУдаления(Истина);
//		Объ.Записать();
//	КонецЦикла;
//	
//КонецПроцедуры


&НаКлиенте
Процедура ВосстановитьНастройкуСообщениеДня(Команда)
	//ПАКЛ->
	ПараметрыВыбора = Новый Структура;
 	Форма = ПолучитьФорму("Обработка.БПАГПанАгентЦентрУправленияТест.Форма.УПФормаНастройкиСообщенияДня", ПараметрыВыбора);
  	Результат = Форма.ОткрытьМодально();

  	Если Результат <> Неопределено Тогда
    	ЗаполнитьСписокАгентовПоНастройкеСообщениеДняНаСервере(Результат);
  	КонецЕсли;          	
	//Форма = ПолучитьФорму("Обработка.БПАГПанАгентЦентрУправления.Форма.УПФормаНастройкиСообщенияДня");
	//Форма.Открыть();
	//ПАКЛ<-
	//ЗаполнитьСписокАгентовПоНастройкеСообщениеДняНаСервере(СписокНастроекСообщениеДня);
КонецПроцедуры

////Удалить->

//&НаКлиенте
//Процедура УдалитьНастройкуСообщениеДня(Команда)
//	УдалитьСписокАгентовПоНастройкеСообщениеДняНаСервере(СписокНастроекСообщениеДня);
//КонецПроцедуры

//*************************************************************************************************

&НаКлиенте
Процедура ТаблицаФильтрыПриАктивизацииЯчейки(Элемент)
	
	
	//Если ТаблицаВидыФильтров.Количество() > 0 Тогда
	//	Если Элемент.ТекущийЭлемент.Имя = "ТаблицаФильтрыТипФильтра" Тогда
	//		Если Элемент <> "Свойство" Тогда		
	//		//	Элементы.ТаблицаФильтрыТипСвойстваФильтра.Доступность = Ложь;
	//		//	Элементы.ТаблицаФильтрыСвойство.Доступность = Ложь;
	//		//Иначе 
	//		//	Элементы.ТаблицаФильтрыТипСвойстваФильтра.Доступность = Истина;
	//		//	Элементы.ТаблицаФильтрыСвойство.Доступность = Истина;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	
	
	
	//
	//Попытка
	//	Если ТаблицаВидыФильтров.Количество() > 0 Тогда
	//		Если Элемент.ТекущийЭлемент.Имя = "ТаблицаФильтрыТипФильтра" Тогда
	//			Список = Новый СписокЗначений;
	//			Список.Добавить("в наличии на складе");
	//			Список.Добавить("в истории продаж клиента");
	//			Список.Добавить("в спецификации клиента");
	//			Список.Добавить("Свойство");
	//			Элемент.ТекущиеДанные.ТипФильтра = ВыбратьИзСписка(Список);
	//		КонецЕсли;
	//		Если Элемент.ТекущийЭлемент.Имя = "ТаблицаФильтрыТипСравнения" Тогда
	//			ТипСвойства = УстановитьСпискиЗначенийНаСервере(Элемент.ТекущиеДанные.ТипСвойстваФильтра, Элемент.ТекущиеДанные.ТипФильтра);
	//			Если ТипСвойства = "Булево" Тогда
	//				Список = Новый СписокЗначений;
	//				Список.Добавить(ВидСравненияКомпоновкиДанных.Равно);
	//				Список.Добавить(ВидСравненияКомпоновкиДанных.НеРавно);
	//				Элемент.ТекущиеДанные.ТипСравнения = ВыбратьИзСписка(Список);
	//			ИначеЕсли ТипСвойства = "Строка" Тогда	
	//				Список = Новый СписокЗначений;
	//				Список.Добавить(ВидСравненияКомпоновкиДанных.Содержит);
	//				Элемент.ТекущиеДанные.ТипСравнения = ВыбратьИзСписка(Список);
	//			ИначеЕсли ТипСвойства = "ДатаЧисло" Тогда	
	//				Список = Новый СписокЗначений;
	//				Список.Добавить(ВидСравненияКомпоновкиДанных.Равно);
	//				Список.Добавить(ВидСравненияКомпоновкиДанных.НеРавно);
	//				Список.Добавить(ВидСравненияКомпоновкиДанных.Меньше);
	//				Список.Добавить(ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
	//				Список.Добавить(ВидСравненияКомпоновкиДанных.Больше);
	//				Список.Добавить(ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
	//				//Элемент.ТекущиеДанные[Элемент.ТекущийЭлемент.Имя]
	//				Элемент.ТекущиеДанные.ТипСравнения = ВыбратьИзСписка(Список);
	//			Иначе
	//				Список = Новый СписокЗначений;
	//				Список.Добавить(ВидСравненияКомпоновкиДанных.Равно);
	//				Элемент.ТекущиеДанные.ТипСравнения = ВыбратьИзСписка(Список);
	//			КонецЕсли;
	//	КонецЕсли;
	//	Если Элемент.ТекущийЭлемент.Имя = "ТаблицаФильтрыОтборРаскраска" Тогда
	//		Список = Новый СписокЗначений;
	//		Список.Добавить("Отбор");
	//		Список.Добавить("Раскраска");
	//		Элемент.ТекущиеДанные.ОтборРаскраска = ВыбратьИзСписка(Список);
	//	КонецЕсли;
	//	
	//	КонецЕсли;
	//Исключение
	//КонецПопытки;
	
	
КонецПроцедуры

Функция УстановитьСпискиЗначенийНаСервере(ТипСвойстваФильтра, ТипФильтра)
	Попытка 
		Если ТипФильтра = Перечисления.БПАГТипыФильтров.Свойство Тогда
			Если ТипСвойстваФильтра = Перечисления.БПАГТипыСвойствФильтров.Булево Тогда
				Возврат("Булево");
			ИначеЕсли ТипСвойстваФильтра = Перечисления.БПАГТипыСвойствФильтров.Строка Тогда	
				Возврат("Строка");
			Иначе	
				Возврат("ДатаЧисло");
			КонецЕсли;
		Иначе
			Возврат("Другое");
		КонецЕсли;
	Исключение
		Возврат("Другое");
	КонецПопытки;
	
КонецФункции	

Процедура ОбновитьУсловияФильтров(Фильтр)
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БПАГВидыФильтровУсловияФильтров.НомерСтроки,
		|	БПАГВидыФильтровУсловияФильтров.ТипФильтра,
		|	БПАГВидыФильтровУсловияФильтров.ТипСвойстваФильтра,
		|	БПАГВидыФильтровУсловияФильтров.ТипСравнения,
		|	БПАГВидыФильтровУсловияФильтров.Значение,
		|	БПАГВидыФильтровУсловияФильтров.ОтборРаскраска,
		|	БПАГВидыФильтровУсловияФильтров.Цвет,
		|	БПАГВидыФильтровУсловияФильтров.ПорядокУсловия,
		|	БПАГВидыФильтровУсловияФильтров.Свойство
		|ИЗ
		|	Справочник.БПАГВидыФильтров.УсловияФильтров КАК БПАГВидыФильтровУсловияФильтров
		|ГДЕ
		|	БПАГВидыФильтровУсловияФильтров.Ссылка = &Фильтр";
		
		Запрос.УстановитьПараметр("Фильтр", Фильтр);
		
		ТмпТаблица = Запрос.Выполнить().Выгрузить();
		ТаблицаФильтры.Очистить();
		Для Каждого ТмпСтрока из ТмпТаблица Цикл
			НоваяСтрока = ТаблицаФильтры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, тмпСтрока);
		КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьТаблицуВидыФильтров()
	
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БПАГВидыФильтров.Ссылка КАК Фильтр,
		|	БПАГВидыФильтров.Наименование,
		|	БПАГВидыФильтров.ПорядокФильтра,
		|	БПАГВидыФильтров.Комментарий
		|ИЗ
		|	Справочник.БПАГВидыФильтров КАК БПАГВидыФильтров
		|ГДЕ
		|	НЕ БПАГВидыФильтров.ПометкаУдаления";
		
		ТмпТаблица = Запрос.Выполнить().Выгрузить();
		ТаблицаВидыФильтров.Очистить();
		Для Каждого ТмпСтрока из ТмпТаблица Цикл
			НоваяСтрока = ТаблицаВидыФильтров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, тмпСтрока);
		КонецЦикла;
	Исключение
	КонецПопытки;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВидыФильтровПриАктивизацииСтроки(Элемент)
	Попытка 
	ОбновитьУсловияФильтров(Элемент.ТекущиеДанные.Фильтр);
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВидыФильтровПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НоваяСтрока и (НЕ ОтменаРедактирования) Тогда
		ТаблицаВидыФильтровПриОкончанииРедактированияНаСервере(Истина, Элемент.ТекущиеДанные.Фильтр, Элемент.ТекущиеДанные.Наименование, Элемент.ТекущиеДанные.ПорядокФильтра, Элемент.ТекущиеДанные.Комментарий);
	ИначеЕсли (НЕ НоваяСтрока) и (НЕ ОтменаРедактирования) Тогда	
		ТаблицаВидыФильтровПриОкончанииРедактированияНаСервере(Ложь, Элемент.ТекущиеДанные.Фильтр, Элемент.ТекущиеДанные.Наименование, Элемент.ТекущиеДанные.ПорядокФильтра, Элемент.ТекущиеДанные.Комментарий);
	КонецЕсли;
КонецПроцедуры

Процедура ТаблицаВидыФильтровПриОкончанииРедактированияНаСервере(НовыйЭлемент, Фильтр, Наименование, ПорядокФильтра, Комментарий)
	Если НовыйЭлемент Тогда
		Объ = Справочники.БПАГВидыФильтров.СоздатьЭлемент();
		Объ.Наименование = Наименование;
		Объ.ПорядокФильтра = ПорядокФильтра;
		Объ.Комментарий = Комментарий;
		Объ.Записать();
	Иначе
		Попытка
			Объ = Фильтр.ПолучитьОбъект();
			Объ.Наименование = Наименование;
			Объ.ПорядокФильтра = ПорядокФильтра;
			Объ.Комментарий = Комментарий;
			Объ.Записать();
		Исключение
		КонецПопытки;
	КонецЕсли;
	ОбновитьТаблицуВидыФильтров();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВидыФильтровПередУдалением(Элемент, Отказ)
	Если НЕ Отказ Тогда
		УдалитьВидФильтраНаСервере(Элемент.ТекущиеДанные.Фильтр);
	КонецЕсли;	
КонецПроцедуры

Процедура УдалитьВидФильтраНаСервере(Фильтр)
	Попытка
		Объ = Фильтр.ПолучитьОбъект();
		Объ.УстановитьПометкуУдаления(Истина);
		Объ.Записать();
	Исключение
	КонецПопытки;
	ОбновитьТаблицуВидыФильтров();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФильтрыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	//Если НоваяСтрока и (НЕ ОтменаРедактирования) Тогда
		ТаблицаФильтрыПриОкончанииРедактированияНаСервере(Элементы.ТаблицаВидыФильтров.ТекущиеДанные.Фильтр);
	//КонецЕсли;
КонецПроцедуры

Процедура ТаблицаФильтрыПриОкончанииРедактированияНаСервере(Фильтр)
	Попытка
		Объ = Фильтр.ПолучитьОбъект();
		Объ.УсловияФильтров.Очистить();
		ТаблицаУсловий = РеквизитФормыВЗначение("ТаблицаФильтры");
		Для Каждого ТмпСтрока из ТаблицаУсловий Цикл 
			НоваяСтрока = Объ.УсловияФильтров.Добавить();
			НоваяСтрока.ТипФильтра = ТмпСтрока.ТипФильтра;
			НоваяСтрока.ТипСвойстваФильтра = ТмпСтрока.ТипСвойстваФильтра;
			НоваяСтрока.ТипСравнения = ТмпСтрока.ТипСравнения;
			НоваяСтрока.Значение = СокрЛП(ТмпСтрока.Значение);
			НоваяСтрока.ОтборРаскраска = ТмпСтрока.ОтборРаскраска;
			НоваяСтрока.Цвет = ТмпСтрока.Цвет;
			НоваяСтрока.ПорядокУсловия = ТмпСтрока.ПорядокУсловия;
			НоваяСтрока.Свойство = ТмпСтрока.Свойство;
		КонецЦикла;
		Объ.Записать();
	Исключение
	КонецПопытки;
	//ОбновитьТаблицуВидыФильтров();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФильтрыПослеУдаления(Элемент)
	ТаблицаФильтрыПриОкончанииРедактированияНаСервере(Элементы.ТаблицаВидыФильтров.ТекущиеДанные.Фильтр);
КонецПроцедуры

//доп. процедуры фильтры


&НаКлиенте
Процедура ТаблицаФильтрыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	////Выбор по каждому полю не сохраняет выбранные данные
	//Попытка
	//	Если ТаблицаВидыФильтров.Количество() > 0 Тогда
	//		Если Элемент.ТекущийЭлемент.Имя = "ТаблицаФильтрыТипФильтра" Тогда
	//			Список = Новый СписокЗначений;
	//			Список.Добавить("в наличии на складе");
	//			Список.Добавить("в истории продаж клиента");
	//			Список.Добавить("в спецификации клиента");
	//			Список.Добавить("Свойство");
	//			Элемент.ТекущиеДанные.ТипФильтра = ВыбратьИзСписка(Список);
	//		КонецЕсли;
	//		Если Элемент.ТекущийЭлемент.Имя = "ТаблицаФильтрыТипСравнения" Тогда
	//			ТипСвойства = УстановитьСпискиЗначенийНаСервере(Элемент.ТекущиеДанные.ТипСвойстваФильтра, Элемент.ТекущиеДанные.ТипФильтра);
	//			Если ТипСвойства = "Булево" Тогда
	//				Список = Новый СписокЗначений;
	//				Список.Добавить(ВидСравненияКомпоновкиДанных.Равно);
	//				Список.Добавить(ВидСравненияКомпоновкиДанных.НеРавно);
	//				Элемент.ТекущиеДанные.ТипСравнения = ВыбратьИзСписка(Список);
	//			ИначеЕсли ТипСвойства = "Строка" Тогда	
	//				Список = Новый СписокЗначений;
	//				Список.Добавить(ВидСравненияКомпоновкиДанных.Содержит);
	//				Элемент.ТекущиеДанные.ТипСравнения = ВыбратьИзСписка(Список);
	//			ИначеЕсли ТипСвойства = "ДатаЧисло" Тогда	
	//				Список = Новый СписокЗначений;
	//				Список.Добавить(ВидСравненияКомпоновкиДанных.Равно);
	//				Список.Добавить(ВидСравненияКомпоновкиДанных.НеРавно);
	//				Список.Добавить(ВидСравненияКомпоновкиДанных.Меньше);
	//				Список.Добавить(ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
	//				Список.Добавить(ВидСравненияКомпоновкиДанных.Больше);
	//				Список.Добавить(ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
	//				//Элемент.ТекущиеДанные[Элемент.ТекущийЭлемент.Имя]
	//				Элемент.ТекущиеДанные.ТипСравнения = ВыбратьИзСписка(Список);
	//			Иначе
	//				Список = Новый СписокЗначений;
	//				Список.Добавить(ВидСравненияКомпоновкиДанных.Равно);
	//				Элемент.ТекущиеДанные.ТипСравнения = ВыбратьИзСписка(Список);
	//			КонецЕсли;
	//	КонецЕсли;
	//	Если Элемент.ТекущийЭлемент.Имя = "ТаблицаФильтрыОтборРаскраска" Тогда
	//		Список = Новый СписокЗначений;
	//		Список.Добавить("Отбор");
	//		Список.Добавить("Раскраска");
	//		Элемент.ТекущиеДанные.ОтборРаскраска = ВыбратьИзСписка(Список);
	//	КонецЕсли;
	//	
	//	КонецЕсли;
	//Исключение
	//КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФильтрыТипФильтраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Если Элемент.Имя = "ТаблицаФильтрыТипФильтра" Тогда
		Список = Новый СписокЗначений;
		Список.Добавить("В наличии на складе");
		Список.Добавить("В истории продаж клиента");
		Список.Добавить("В спецификации клиента");
		Список.Добавить("Свойство");
		//Элементы.ТаблицаФильтры.ТекущиеДанные.ТипФильтра = ВыбратьИзСписка(Список);
		ЭлементСписка = ЭтаФорма.ВыбратьИзСписка(Список,Элементы.ТаблицаФильтры.ТекущиеДанные.ТипФильтра);
		Элементы.ТаблицаФильтры.ТекущиеДанные.ТипФильтра = ЭлементСписка;
		//Элемент.Заголовок = ?(Элемент.Заголовок = "Тип фильтра", "Tип фильтра", "Тип фильтра");//англ -2
		
	Если ТаблицаВидыФильтров.Количество() > 0 Тогда
			Если Элементы.ТаблицаФильтры.ТекущиеДанные.ТипФильтра <> "Свойство" Тогда		
				//Очистить ячейки
				Элементы.ТаблицаФильтры.ТекущиеДанные.ТипСвойстваФильтра = "";
				Элементы.ТаблицаФильтры.ТекущиеДанные.Свойство = "";
				//Только просмотр
				Элементы.ТаблицаФильтрыТипСвойстваФильтра.ТолькоПросмотр = Истина;
				Элементы.ТаблицаФильтрыСвойство.ТолькоПросмотр = Истина;
			Иначе 
				Элементы.ТаблицаФильтрыТипСвойстваФильтра.ТолькоПросмотр = Ложь;
				Элементы.ТаблицаФильтрыСвойство.ТолькоПросмотр = Ложь;
			КонецЕсли;
	КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаФильтрыТипСвойстваФильтраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элемент.Имя = "ТаблицаФильтрыТипСвойстваФильтра" Тогда
		Если Элементы.ТаблицаФильтры.ТекущиеДанные.ТипФильтра = "Свойство" Тогда
			Список = Новый СписокЗначений;
			Список.Добавить("Булево");
			Список.Добавить("Число");
			Список.Добавить("Дата");
			Список.Добавить("Строка");
			ЭлементСписка = ЭтаФорма.ВыбратьИзСписка(Список,Элементы.ТаблицаФильтры.ТекущиеДанные.ТипСвойстваФильтра);
			Элементы.ТаблицаФильтры.ТекущиеДанные.ТипСвойстваФильтра = ЭлементСписка;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ТаблицаФильтрыТипСравненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элемент.Имя = "ТаблицаФильтрыТипСравнения" Тогда
		Если Элементы.ТаблицаФильтры.ТекущиеДанные.ТипФильтра <> "Свойство" Тогда
			Список = Новый СписокЗначений;
			Список.Добавить("Равно");
			ЭлементСписка = ЭтаФорма.ВыбратьИзСписка(Список,Элементы.ТаблицаФильтры.ТекущиеДанные.ТипСравнения);
			Элементы.ТаблицаФильтры.ТекущиеДанные.ТипСравнения = ЭлементСписка;
		КонецЕсли;
		Если Элементы.ТаблицаФильтры.ТекущиеДанные.ТипФильтра = "Свойство" Тогда
			//Для свойства несколько вариантов сравнения
			//в зависимости от типа свойства
			Если Элементы.ТаблицаФильтры.ТекущиеДанные.ТипСвойстваФильтра = "Булево" Тогда
				Список = Новый СписокЗначений;
				Список.Добавить("Равно");
				Список.Добавить("Не равно");
				ЭлементСписка = ЭтаФорма.ВыбратьИзСписка(Список,Элементы.ТаблицаФильтры.ТекущиеДанные.ТипСравнения);
				Элементы.ТаблицаФильтры.ТекущиеДанные.ТипСравнения = ЭлементСписка;
			ИначеЕсли (Элементы.ТаблицаФильтры.ТекущиеДанные.ТипСвойстваФильтра = "Число") или Элементы.ТаблицаФильтры.ТекущиеДанные.ТипСвойстваФильтра = "Дата" Тогда	
				Список = Новый СписокЗначений;
				Список.Добавить("Равно");
				Список.Добавить("Не равно");
				Список.Добавить("Меньше");
				Список.Добавить("Меньше или равно");
				Список.Добавить("Больше");
				Список.Добавить("Больше или равно");
				ЭлементСписка = ЭтаФорма.ВыбратьИзСписка(Список,Элементы.ТаблицаФильтры.ТекущиеДанные.ТипСравнения);
				Элементы.ТаблицаФильтры.ТекущиеДанные.ТипСравнения = ЭлементСписка;
			ИначеЕсли Элементы.ТаблицаФильтры.ТекущиеДанные.ТипСвойстваФильтра = "Строка" Тогда	
				Список = Новый СписокЗначений;
				Список.Добавить("Содержит");
				ЭлементСписка = ЭтаФорма.ВыбратьИзСписка(Список,Элементы.ТаблицаФильтры.ТекущиеДанные.ТипСравнения);
				Элементы.ТаблицаФильтры.ТекущиеДанные.ТипСравнения = ЭлементСписка;
			КонецЕсли;
			
		КонецЕсли;
		
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаФильтрыЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Элемент.Имя = "ТаблицаФильтрыЗначение" Тогда
		Если Элементы.ТаблицаФильтры.ТекущиеДанные.ТипФильтра <> "Свойство" Тогда
			Список = Новый СписокЗначений;
			Список.Добавить("Да");
			Список.Добавить("Нет");
			ЭлементСписка = ЭтаФорма.ВыбратьИзСписка(Список,Элементы.ТаблицаФильтры.ТекущиеДанные.Значение);
			Элементы.ТаблицаФильтры.ТекущиеДанные.Значение = ЭлементСписка;
		Иначе
			//Разные типы
			Если Элементы.ТаблицаФильтры.ТекущиеДанные.ТипСвойстваФильтра = "Булево" Тогда
				Список = Новый СписокЗначений;
				Список.Добавить("Да");
				Список.Добавить("Нет");
				ЭлементСписка = ЭтаФорма.ВыбратьИзСписка(Список,Элементы.ТаблицаФильтры.ТекущиеДанные.Значение);
				Элементы.ТаблицаФильтры.ТекущиеДанные.Значение = ЭлементСписка;
				Элементы.ТаблицаФильтрыЗначение.ВыбиратьТип = Ложь;
			ИначеЕсли Элементы.ТаблицаФильтры.ТекущиеДанные.ТипСвойстваФильтра = "Дата" Тогда	
				Элементы.ТаблицаФильтрыЗначение.ВыбиратьТип = Истина;
				//НачальнаяДата = ТекущаяДата();
				//Список = Новый СписокЗначений;
				//Список.Добавить(НачальнаяДата);
				//ЭлементСписка = ЭтаФорма.ВыбратьИзСписка(Список,Элементы.ТаблицаФильтры.ТекущиеДанные.Значение);
				//Элементы.ТаблицаФильтры.ТекущиеДанные.Значение = ЭлементСписка;
			ИначеЕсли Элементы.ТаблицаФильтры.ТекущиеДанные.ТипСвойстваФильтра = "Число" Тогда	
				Элементы.ТаблицаФильтрыЗначение.ВыбиратьТип = Истина;
			ИначеЕсли Элементы.ТаблицаФильтры.ТекущиеДанные.ТипСвойстваФильтра = "Строка" Тогда	
				Элементы.ТаблицаФильтрыЗначение.ВыбиратьТип = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФильтрыОтборРаскраскаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Элемент.Имя = "ТаблицаФильтрыОтборРаскраска" Тогда
			Список = Новый СписокЗначений;
			Список.Добавить("Отбор");
			Список.Добавить("Раскраска");
			ЭлементСписка = ЭтаФорма.ВыбратьИзСписка(Список,Элементы.ТаблицаФильтры.ТекущиеДанные.ОтборРаскраска);
			Элементы.ТаблицаФильтры.ТекущиеДанные.ОтборРаскраска = ЭлементСписка;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФильтрыПриАктивизацииСтроки(Элемент)
	Попытка
		Если Элементы.ТаблицаФильтры.ТекущиеДанные.ТипФильтра <> "Свойство" Тогда		
			Элементы.ТаблицаФильтрыТипСвойстваФильтра.ТолькоПросмотр = Истина;
			Элементы.ТаблицаФильтрыСвойство.ТолькоПросмотр = Истина;
		Иначе 
			Элементы.ТаблицаФильтрыТипСвойстваФильтра.ТолькоПросмотр = Ложь;
			Элементы.ТаблицаФильтрыСвойство.ТолькоПросмотр = Ложь;
		КонецЕсли;
	Исключение
	КонецПопытки;
КонецПроцедуры


//****************************************************************************************************

Процедура СоздатьАнкетыПриПервомЗапускеНаСервере()
	
	Настройка1ССоздатьАнкетыПриПервомЗапуске = БПАГ.БПАГПолучитьНастройку("1СЭтоПервыйЗапуск");
	Если Настройка1ССоздатьАнкетыПриПервомЗапуске Тогда
		
		ОбъектОбработка = ЭтаФорма.РеквизитФормыВЗначение("Объект");	
		ОбъектОбработка.СоздатьАнкетыПриПервомЗапуске();
		
		НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
		Константа_СоздаватьАнкеты = Справочники.БПАГВидыНастроекАгентов.НайтиПоКоду("1СЭтоПервыйЗапуск");
		Если НЕ Константа_СоздаватьАнкеты.Пустая() Тогда
			НаборЗаписей.Отбор.Агент.Установить(Справочники.БПАГАгенты.ПустаяСсылка());
			НаборЗаписей.Отбор.Профиль.Установить(Справочники.БПАГПрофилиАгентов.ПустаяСсылка());
			НаборЗаписей.Отбор.ВидНастройки.Установить(Константа_СоздаватьАнкеты);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Агент = Справочники.БПАГАгенты.ПустаяСсылка();
			НоваяЗапись.Профиль = Справочники.БПАГПрофилиАгентов.ПустаяСсылка();
			НоваяЗапись.ВидНастройки = Константа_СоздаватьАнкеты;
			НоваяЗапись.Значение = Ложь;
			НаборЗаписей.Записать();
		КонецЕсли;
		
	КонецЕсли;	
	

КонецПроцедуры

Процедура ОбновитьИнформациюПоЛицензиям()
	
	Элементы.СостояниеЛицензий.Видимость = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(МАКСИМУМ(БПАГАгенты.ЛицензияДо), ДАТАВРЕМЯ(2000, 1, 1)) КАК ЛицензияДо
	|ИЗ
	|	Справочник.БПАГАгенты КАК БПАГАгенты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МаксимальнаяДатаОкончанияЛицензий = Дата(2000, 1, 1);
	Если Выборка.Следующий() Тогда
		МаксимальнаяДатаОкончанияЛицензий = Выборка.ЛицензияДо;
	КонецЕсли;
	
	Если МаксимальнаяДатаОкончанияЛицензий = Дата(2000, 1, 1) Тогда
	Иначе
		тмпТекущаяДата = ТекущаяДата();
		Если МаксимальнаяДатаОкончанияЛицензий < НачалоМесяца(тмпТекущаяДата) Тогда
			Если (МаксимальнаяДатаОкончанияЛицензий + 30 * 24 * 60 * 60) < тмпТекущаяДата Тогда
				//Лицензия закончилась. Обмен работать не будет.
				Элементы.СостояниеЛицензий.ЦветФона = WebЦвета.Красный;
				Элементы.СостояниеЛицензий.ЦветТекста = WebЦвета.Белоснежный;
				Элементы.СостояниеЛицензий.Заголовок = " Внимание! Срок действия лицензий закончился! Обмен не работает! Оплатите лицензии, пожалуйста! ";
				Элементы.СостояниеЛицензий.Видимость = Истина;
			Иначе
				//Лицензия не оплачена, но обмен еще работает.
				Элементы.СостояниеЛицензий.ЦветФона = WebЦвета.СветлоГрифельноСерый;
				Элементы.СостояниеЛицензий.ЦветТекста = WebЦвета.Белоснежный;
				Элементы.СостояниеЛицензий.Заголовок = " Внимание! Срок действия лицензий закончился! Оплатите лицензии, пожалуйста! ";
				Элементы.СостояниеЛицензий.Видимость = Истина;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//ПАКЛ
&НаСервере
Процедура УстановитьЦветКатегорийДокументов(Цвет)
	
	КлючЗаписи = Элементы.КатегорииДокументов.ТекущаяСтрока;
	
	Запись = РегистрыСведений.БПАГКатегорииДокументов.СоздатьМенеджерЗаписи();
	Запись.ВидДокумента = КлючЗаписи.ВидДокумента;
	Запись.Категория = КлючЗаписи.Категория;
	Запись.Прочитать();
	Запись.Цвет = Цвет;
	Запись.Записать(Истина);
	//Обновить таблицу регистра сведений
	Элементы.КатегорииДокументов.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорииДокументовПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент.Имя = "КатегорииДокументовЦвет" Тогда
		ФормаВыбораЦвета = ПолучитьФорму("Обработка.БПАГПанАгентЦентрУправленияТест.Форма.УПФормаВыбораЦвета");
		Цвет = ФормаВыбораЦвета.ОткрытьМодально();
		Если СтрДлина(Цвет) = 9 Тогда
			УстановитьЦветКатегорийДокументов(Цвет);
			//Раскрашивание с помощью условного оформления в форме
		КонецЕсли;
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветКатегорийТоваров(Цвет)
	
	КлючЗаписи = Элементы.КатегорииТоваров.ТекущаяСтрока;
	
	Запись = РегистрыСведений.БПАГКатегорииТоваров.СоздатьМенеджерЗаписи();
	Запись.Категория = КлючЗаписи.Категория;
	Запись.Прочитать();
	Запись.Цвет = Цвет;
	Запись.Записать(Истина);
	//Обновить таблицу регистра сведений
	Элементы.КатегорииТоваров.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорииТоваровПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент.Имя = "КатегорииТоваровЦвет" Тогда
		ФормаВыбораЦвета = ПолучитьФорму("Обработка.БПАГПанАгентЦентрУправленияТест.Форма.УПФормаВыбораЦвета");
		Цвет = ФормаВыбораЦвета.ОткрытьМодально();
		Если СтрДлина(Цвет) = 9 Тогда
			УстановитьЦветКатегорийТоваров(Цвет);
			//Раскрашивание с помощью условного оформления в форме
		КонецЕсли;
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКодКатегорииДокументов(Ключик)
	
	МенеджерЗаписи = РегистрыСведений["БПАГКатегорииДокументов"].СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Ключик); 
	МенеджерЗаписи.Прочитать();
	
	//КлючЗаписи = Элементы.КатегорииДокументов.ТекущаяСтрока;
	
	Запись = РегистрыСведений.БПАГКатегорииДокументов.СоздатьМенеджерЗаписи();
	Запись.ВидДокумента = МенеджерЗаписи.ВидДокумента;
	Запись.Категория = МенеджерЗаписи.Категория;
	Запись.Код = МенеджерЗаписи.Код;
	Запись.Прочитать();
	//Определим максимальный код
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(БПАГКатегорииДокументов.Код) КАК Код
	|ИЗ
	|	РегистрСведений.БПАГКатегорииДокументов КАК БПАГКатегорииДокументов";
	
	
	ТЗСвойств =  Запрос.Выполнить().Выгрузить();
	Для Каждого тмпСвойство из ТЗСвойств Цикл
		НовыйКод = тмпСвойство.Код + 1;
	КонецЦикла;
	Запись.Код = НовыйКод;
	Запись.Записать(Истина);
	//Обновить таблицу регистра сведений
//	Элементы.КатегорииДокументов.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорииДокументовОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	УстановитьКодКатегорииДокументов(НовыйОбъект);
КонецПроцедуры


&НаКлиенте
Процедура ПредопределенныеИдентификаторыПриИзменении(Элемент)
	ТекущийПорядок = Число(ПредопределенныеИдентификаторы.Индекс(Элементы.ПредопределенныеИдентификаторы.ТекущиеДанные)) +1;
	Если ТекущийПорядок <> Элемент.ТекущиеДанные.Порядок Тогда
		УстановитьПорядокИдентификатора(ТекущийПорядок, Элемент.ТекущиеДанные.Идентификатор);
	КонецЕсли;	
	//Элементы.ПредопределенныеИдентификаторы.ТекущаяСтрока = ПредопределенныеИдентификаторы.НайтиПоИдентификатору(ТекущийПорядок);
	
	//ПАКЛ 20.08.2015
	//При активации строки показываем предопределенные идентификаторы
	//Если тмп123 = Элементы.БПАГКонтрагентыПредопределенныеИдентификаторы.ТекущаяСтрока Тогда
	//	Возврат;
	//КонецЕсли;	
	//Если (тмп123 = Элементы.БПАГКонтрагентыПредопределенныеИдентификаторы.ТекущаяСтрока) и (HTMLВыведен = Истина) Тогда
	//	HTMLВыведен = Ложь;
	//	Возврат;
	//КонецЕсли;	
	
	тмпПредопределенныеИдентификаторы = Элементы.БПАГКонтрагентыПредопределенныеИдентификаторы.ТекущаяСтрока;
	
	Если тмпПредопределенныеИдентификаторы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	HTMLВыведен = Истина;
	ПоказатьЗначенияИдентификаторов = СерверПолучитьДополнительныеРеквизиты(тмпПредопределенныеИдентификаторы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПорядокИдентификатора(ТекущийПорядок, Идентификатор) 
	
	ТекущийИдентификатор = Идентификатор.Ссылка;
	ПорядокИзСправочника = ТекущийИдентификатор.Порядок;
	Если НЕ ТекущийИдентификатор.Пустая() Тогда
		//Изменим порядок в элементе
		Объ = ТекущийИдентификатор.ПолучитьОбъект();
		Объ.Порядок = ТекущийПорядок;
		Объ.Записать();
		//Изменим порядок в элементе, который был с текущим порядком на порядок изменяемого элемента
		СпрИдентификаторы = Справочники.БПАГПредопределенныеРеквизитыКонтрагентов.Выбрать();
		Пока СпрИдентификаторы.Следующий() Цикл
			Если (СпрИдентификаторы.Порядок = ТекущийПорядок) и (СпрИдентификаторы.Ссылка <> ТекущийИдентификатор) Тогда
				тмпОбъ = СпрИдентификаторы.ПолучитьОбъект();
				тмпОбъ.Порядок = ПорядокИзСправочника;
				тмпОбъ.Записать();
			КонецЕсли;
		КонецЦикла;	
		
		//ОбновитьТаблицуПредопределенныхИдентификаторов();
	КонецЕсли;	
КонецПроцедуры

//Процедура ОбновитьТаблицуПредопределенныхИдентификаторов()
//	ПредопределенныеИдентификаторы.Очистить();
//	СпрИдентификаторы = Справочники.БПАГПредопределенныеИдентификаторыКонтрагентов.Выбрать();
//	Пока СпрИдентификаторы.Следующий() Цикл
//		НоваяСтрока = ПредопределенныеИдентификаторы.Добавить();
//		НоваяСтрока.Идентификатор = СпрИдентификаторы.Ссылка;
//		НоваяСтрока.Порядок = СпрИдентификаторы.Порядок;
//	КонецЦикла;	
//	ПредопределенныеИдентификаторы.Сортировать("Порядок Возр");
//КонецПроцедуры

&НаКлиенте
Процедура ПредопределенныеИдентификаторыПередНачаломИзменения(Элемент, Отказ)
	//Запрещаем изменять элементы таблицы.
	Отказ = Истина;
КонецПроцедуры

&НаСервере
Функция СерверПолучитьДополнительныеРеквизиты(Контрагент)
	
	тмпТекст = "";
	//тмпТекст = "<html><head></head><body>sdfs<br>adkfjsdalkjlskdjf</body></html>";
	//СтрокаWYSIWIG = тмпТекст;
	
	//Получим сведения ТТ по Контрагента
	//считаем, что у контрагента на УТ11 только одна торговая точка
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БПАГТорговыеТочки.Владелец.Партнер КАК Партнер,
	|	БПАГТорговыеТочки.Код КАК uniqueID,
	|	БПАГТорговыеТочки.Владелец.Код КАК clientID,
	|	БПАГТорговыеТочки.Наименование КАК name,
	|	БПАГТорговыеТочки.Адрес КАК fullAddress,
	|	БПАГТорговыеТочки.Адрес КАК address,
	|	БПАГТорговыеТочки.КонтактноеЛицо КАК contactPerson,
	|	БПАГТорговыеТочки.Телефон КАК phone,
	|	БПАГТорговыеТочки.EMail КАК email,
	|	БПАГТорговыеТочки.Широта КАК latitude,
	|	БПАГТорговыеТочки.Долгота КАК longitude,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП
	|ИЗ
	|	Справочник.БПАГТорговыеТочки КАК БПАГТорговыеТочки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО БПАГТорговыеТочки.Владелец.Партнер = Контрагенты.Партнер
	|ГДЕ
	|	НЕ БПАГТорговыеТочки.ПометкаУдаления
	|	И НЕ БПАГТорговыеТочки.НеИспользовать
	|	И БПАГТорговыеТочки.Владелец = &ТекущийКлиент";
	
	Запрос.УстановитьПараметр("ТекущийКлиент", Контрагент.Ссылка);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	СпрИдентификаторы = Справочники.БПАГПредопределенныеРеквизитыКонтрагентов.Выбрать();
	ПорядокИдентификаторов = Новый ТаблицаЗначений;
	ПорядокИдентификаторов.Колонки.Добавить("Идентификатор");
	ПорядокИдентификаторов.Колонки.Добавить("Порядок");
	Пока СпрИдентификаторы.Следующий() Цикл
		НоваяСтрока = ПорядокИдентификаторов.Добавить();
		НоваяСтрока.Идентификатор = СпрИдентификаторы.Ссылка;
		НоваяСтрока.Порядок = СпрИдентификаторы.Порядок;
	КонецЦикла;	
	ПорядокИдентификаторов.Сортировать("Порядок Возр");
	ТЗСвойства = Новый ТаблицаЗначений;
	ТЗСвойства.Колонки.Добавить("Наименование");
	ТЗСвойства.Колонки.Добавить("Идентификатор");
	
	Для Каждого Стр из ПорядокИдентификаторов Цикл
		Для Каждого тмпСтр из ТЗ Цикл
			Если Стр.Идентификатор.Идентификатор = "address"  Тогда
				НоваяСтрока = ТЗСвойства.Добавить();
				НоваяСтрока.Наименование = "Сокращенный адрес торговой точки";
				НоваяСтрока.Идентификатор = СокрЛП(тмпСтр.address);
				Прервать;
			КонецЕсли;	
			Если Стр.Идентификатор.Идентификатор = "phone"  Тогда
				НоваяСтрока = ТЗСвойства.Добавить();
				НоваяСтрока.Наименование = "Телефон торговой точки: ";
				НоваяСтрока.Идентификатор = СокрЛП(тмпСтр.phone);
				Прервать;
			КонецЕсли;	
			Если Стр.Идентификатор.Идентификатор = "fullAddress"  Тогда
				НоваяСтрока = ТЗСвойства.Добавить();
				НоваяСтрока.Наименование = "Адрес торговой точки: ";
				НоваяСтрока.Идентификатор = СокрЛП(тмпСтр.address);
				Прервать;
			КонецЕсли;	
			Если Стр.Идентификатор.Идентификатор = "fullName"  Тогда
				НоваяСтрока = ТЗСвойства.Добавить();
				НоваяСтрока.Наименование = "Полное наименование торговой точки: "; 
				НоваяСтрока.Идентификатор = СокрЛП(тмпСтр.name);
				Прервать;
			КонецЕсли;	
			Если Стр.Идентификатор.Идентификатор = "INN/KPP"  Тогда
				НоваяСтрока = ТЗСвойства.Добавить();
				НоваяСтрока.Наименование = "ИНН/КПП контрагента торговой точки: ";
				НоваяСтрока.Идентификатор = СокрЛП(тмпСтр.ИНН) + "/" + СокрЛП(тмпСтр.КПП);
				Прервать;
			КонецЕсли;	
			Если Стр.Идентификатор.Идентификатор = "legalAddress"  Тогда
				НоваяСтрока = ТЗСвойства.Добавить();
				НоваяСтрока.Наименование = "Юридический адрес контрагента торговой точки: ";
				НоваяСтрока.Идентификатор = СокрЛП(тмпСтр.address);
				Прервать;
			КонецЕсли;	
			Если Стр.Идентификатор.Идентификатор = "contactPerson"  Тогда
				НоваяСтрока = ТЗСвойства.Добавить();
				НоваяСтрока.Наименование = "Контактное лицо торговой точки: ";
				НоваяСтрока.Идентификатор = СокрЛП(тмпСтр.contactPerson);
				Прервать;
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;	
	
	СлучайнаяСтрока = "";
	
	тмпТекст = "<!DOCTYPE html>
	|<!--" + СлучайнаяСтрока + "-->
	|<html>
	|<head>
	|<meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8"" />
	|    <title>Предопределенные идентификаторы</title>
	|    <style type=""text/css"">
	|        body {
	|            padding: 13px;
	|            margin: 0;
	|            font: 12px Helvetica, 'Helvetica Neue', 'Lucida Grande', 'Lucida Sans Unicode', Arial, sans-serif;
	|        }
	|        h2 {
	|            font-size: 1.0em;
	|   
	|        }
	|        table, th, td {
	|            border: 1px solid black;
	|        }
	|        th, tr.bold {
	|            font-weight: bold;
	|        }
	|        td.right {
	|            text-align: right;
	|        }
	|td {
	|font-size: 1.0em 
	|}
	|    </style>
	|</head>
	|<body>
	|<h2>Отображение предопределенных идентификаторов на устройстве</h2>";
	//|<table cellspacing=""0"" cellpadding=""3px"" width=""100%"">
	//|    <tr>
	//|        <th width=""80%"">Тара</th>
	//|        <th width=""20%"">Остаток</th>
	//|    </tr>";
	
	Для Каждого Стр из ТЗСвойства Цикл
		
		тмпТекст = тмпТекст + 
		"<br><tr>
		|    <td>" + "<font size=""2"" color=""#385487"" face=""Helvetica Neue"">" + Стр.Наименование + " " + "</font>" + Стр.Идентификатор + "</td>
		|</tr></br>";
	КонецЦикла;
	
	//Для Каждого Стр из ТЗСвойства Цикл
	//	
	//	тмпТекст = тмпТекст + 
	//	"<br><tr>
	//	|    <td>" + Стр.Наименование + Стр.Идентификатор + "</td>
	//	|</tr></br>";
	//КонецЦикла;
	тмпТекст = тмпТекст + "
	|</table>
	|</body>
	|</html>";
	
	СтрокаWYSIWIG = "";
	СтрокаWYSIWIG = тмпТекст;
	
КонецФункции


&НаКлиенте
Процедура БПАГКонтрагентыПредопределенныеИдентификаторыПриАктивизацииСтроки(Элемент)
	
	//При активации строки показываем предопределенные идентификаторы
	Если тмпПредопределенныеИдентификаторы = Элементы.БПАГКонтрагентыПредопределенныеИдентификаторы.ТекущаяСтрока Тогда
		Возврат;
	КонецЕсли;	
	Если (тмпПредопределенныеИдентификаторы = Элементы.БПАГКонтрагентыПредопределенныеИдентификаторы.ТекущаяСтрока) и (HTMLВыведен = Истина) Тогда
		HTMLВыведен = Ложь;
		Возврат;
	КонецЕсли;	
	
	тмпПредопределенныеИдентификаторы = Элементы.БПАГКонтрагентыПредопределенныеИдентификаторы.ТекущаяСтрока;
	
	Если тмпПредопределенныеИдентификаторы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	HTMLВыведен = Истина;
	ПоказатьЗначенияИдентификаторов = СерверПолучитьДополнительныеРеквизиты(Элемент.ТекущаяСтрока);
КонецПроцедуры


&НаКлиенте
Процедура ОбъектыВыгрузкиПриИзменении(Элемент)
	//Если Элемент.ТекущиеДанные.Флаг Тогда
		//Для Каждого тмпПодСтрока Из Элемент.ТекущиеДанные.ПолучитьЭлементы() Цикл
		//	тмпПодСтрока.Флаг = НЕ тмпПодСтрока.Флаг;
		//КонецЦикла;
	//КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьФормуЖурналаМерчандайзинга(Команда)
	Форма =  ПолучитьФорму("Документ.БПАГМерчандайзинг.ФормаСписка");
	Форма.Открыть();
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьОтчетПоМерчандайзингу(Команда)
	Форма = ПолучитьФорму("Обработка.БПАГПанАгентЦентрУправленияТест.Форма.УПФормаОтчетПоМерчандайзингу");
	Форма.Открыть();
КонецПроцедуры

&НаКлиенте 
Функция ПолучитьПолноеИмяФормы(ИмяФормы)

    СимволТочка = ".";
    ПозицияТочки = СтрДлина(ЭтаФорма.ИмяФормы);
    Пока Сред(ЭтаФорма.ИмяФормы, ПозицияТочки, 1) <> СимволТочка Цикл ПозицияТочки = ПозицияТочки - 1; КонецЦикла; //
    Возврат Лев(ЭтаФорма.ИмяФормы, ПозицияТочки) + ИмяФормы;

КонецФункции


&НаКлиенте
Процедура ОткрытьОтчетПоОтклонениямОтРекомендованногоКоличества(Команда)
	
	форма = ПолучитьФорму("Обработка.БПАГПанАгентЦентрУправления.Форма.УПФормаОтчетОтклоненияОтРекомендованногоКоличества");
	форма.Открыть();
	
	//ПараметрыФормы = Новый Структура(); 
	//ОткрытьФорму(ПолучитьПолноеИмяФормы("УПФормаОтчетОтклоненияОтРекомендованногоКоличества"), ПараметрыФормы, ЭтаФорма);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуТипыПриоритетов(Команда)
	Форма = ПолучитьФорму("Справочник.БПАГТипыПриоритетов.ФормаСписка");
	Форма.Открыть();
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьФормуСтандартыПрисутствия(Команда)
	Форма = ПолучитьФорму("Справочник.БПАГСтандартыПрисутствия.ФормаСписка");
	Форма.Открыть();
КонецПроцедуры

