&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ВидПлана.Пустая() Тогда
		ВидПлана = БПАГ.БПАГПолучитьНастройку("mainPlanType");
	КонецЕсли;
	
	ОбновитьОтображение();
	//ПриОткрытииНаСервере();
КонецПроцедуры


&НаСервере
Процедура ПриОткрытииНаСервере()
	
	//********************************************************************
	//МенеджерРегистра      = РегистрыСведений["БПАГПланы"];
	//МетаданныеРегистра    = Метаданные.РегистрыСведений["БПАГПланы"];
	//
	//МассивКолонок = Новый Массив;
	//МассивКолонок.Добавить("ВидПлана");
	//МассивКолонок.Добавить("Агент");
	//МассивКолонок.Добавить("План");

	//СтраницаДляРегистра = СоздатьСтраницу(ПолучитьИмяСтраницыРегистра(СтрокаТЧ.Имя),
	//			МетаданныеРегистра.Синоним,
	//			СтраницаРегистра);

	//ТаблицаФормы = СоздатьТаблицуФормыРегистра(СтрокаТЧ.Имя, МассивКолонок, СтраницаДляРегистра);
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БПАГПланы.ВидПлана,
		|	БПАГПланы.Вариант,
		|	БПАГПланы.Агент,
		|	БПАГПланы.Дата,
		|	БПАГПланы.План
		|ИЗ
		|	РегистрСведений.БПАГПланы КАК БПАГПланы
		|ГДЕ
		|	БПАГПланы.Агент = &Агент
		|	И БПАГПланы.ВидПлана = &ВидПлана";
//		|	И БПАГПланы.Вариант = &ВариантМаршрута";
		
		Запрос.УстановитьПараметр("Агент", АгентПланирования);
		Запрос.УстановитьПараметр("ВидПлана", ВидПлана);
		//Запрос.УстановитьПараметр("ВариантМаршрута", ВариантМаршрута);
		
		ТмпТаблица = Запрос.Выполнить().Выгрузить();
		ТаблицаЗначенийПланы.Очистить();
		Для Каждого ТмпСтрока из ТмпТаблица Цикл
			НоваяСтрока = ТаблицаЗначенийПланы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, тмпСтрока);
		КонецЦикла;
		
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьГрафикНаСервере()
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	Макет = ОбъектОбработка.ПолучитьМакет("МакетДиаграммаПоЗаполнениюПланов");
	ТабДокумент = Новый ТабличныйДокумент;
	
	Траб=Новый ТаблицаЗначений;
	Траб.Очистить();
	Траб.Колонки.Добавить("Период");
	Траб.Колонки.Добавить("План");
	
	//Запрос Планы агента
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	БПАГПланы.ВидПлана,
	               |	БПАГПланы.Вариант,
	               |	БПАГПланы.Агент,
	               |	БПАГПланы.Дата,
	               |	БПАГПланы.План
	               |ИЗ
	               |	РегистрСведений.БПАГПланы КАК БПАГПланы
	               |ГДЕ
	               |	БПАГПланы.Агент = &Агент
	               |	И БПАГПланы.ВидПлана = &План";
	                                   
	//Запрос.УстановитьПараметр("ДатаНачала", Период.ДатаНачала);
	//Запрос.УстановитьПараметр("ДатаКонца", КонецДня(Период.ДатаОкончания));
	Запрос.УстановитьПараметр("Агент", АгентПланирования);
	Запрос.УстановитьПараметр("План", ВидПлана);
	
	ТЗПлан =  Запрос.Выполнить().Выгрузить();
	ТЗПлан.Свернуть("Дата","План");
	
	Для Каждого тмпСтрока из ТЗПлан Цикл
		НоваяСтрока = Траб.Добавить();
		НоваяСтрока.Период = Формат(тмпСтрока.Дата, "ДФ=dd.MM.yyyy");
		НоваяСтрока.План = тмпСтрока.План;
	КонецЦикла;
	
	ОбластьДиаграмма = Макет.ПолучитьОбласть("Диаграмма");
	Диаграмма = ОбластьДиаграмма.Рисунки.D1.Объект;
	Диаграмма.Очистить();

	Диаграмма.СерииВСтроках = Ложь;
	Диаграмма.Обновление=Ложь;

	Для Каждого Колонка из Траб.Колонки Цикл
		Если Траб.Колонки.Индекс(Колонка) <> 0 Тогда
			Диаграмма.Серии.Добавить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;

	Для Каждого СтрТраб из Траб Цикл
		Точка=Диаграмма.Точки.Добавить(СтрТраб.Получить(0));
		Индекс=0;
		Для Каждого Серия из Диаграмма.Серии Цикл
			Индекс=Индекс+1;
			Диаграмма.УстановитьЗначение(Точка,Серия,СтрТраб.Получить(Индекс));
		КонецЦикла;
	КонецЦикла;

	ТабДокумент.Вывести(ОбластьДиаграмма);

	
	ПолеТабличногоДокумента.Очистить();
	ПолеТабличногоДокумента.Вывести(ТабДокумент);

	
	
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьГрафик(Команда)
	ЗаполнитьГрафикНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура АгентПланированияПриИзменении(Элемент)
	ОбновитьОтображение();
КонецПроцедуры

&НаКлиенте
Процедура ВариантМаршрутаПриИзменении(Элемент)
	//ОбновитьОтображение();
КонецПроцедуры


&НаКлиенте
Процедура ВидПланаПриИзменении(Элемент)
	ОбновитьОтображение();
КонецПроцедуры

Процедура ОбновитьОтображение()
	
	Если ВидПлана.Пустая() Тогда
		Элементы.НадписьИнформацияВариантаПланирования.Заголовок = "Для начала планирования выберите вид плана!";
		Элементы.НадписьИнформацияВариантаПланирования.Видимость = Истина;
		
		Элементы.ТаблицаЗначенийПланы.Доступность = Ложь;
	ИначеЕсли АгентПланирования.Пустая() Тогда
		//Сообщить("Планы с " + Формат(ВидПлана.ДатаНачала, "ДЛФ=DD") + " " + ?(ВидПлана.ИнтервалПланирования = 7, "понедельно", "по " + ВидПлана.ИнтервалПланирования + " дней") + " общие для всех агентов");
		Элементы.НадписьИнформацияВариантаПланирования.Заголовок = "Планы с " + Формат(ВидПлана.ДатаНачала, "ДЛФ=DD") + " " + ?(ВидПлана.ИнтервалПланирования = 7, "понедельно", "по " + ВидПлана.ИнтервалПланирования + " дней") + " общие для всех агентов";
		Элементы.НадписьИнформацияВариантаПланирования.Видимость = Истина;
		
		Элементы.ТаблицаЗначенийПланы.Доступность = Истина;
	Иначе
		//Сообщить("Планы с " + Формат(ВидПлана.ДатаНачала, "ДЛФ=DD") + " " + ?(ВидПлана.ИнтервалПланирования = 7, "понедельно", "по " + ВидПлана.ИнтервалПланирования + " дней") + " для агента " + АгентПланирования);
		Элементы.НадписьИнформацияВариантаПланирования.Заголовок = "Планы с " + Формат(ВидПлана.ДатаНачала, "ДЛФ=DD") + " " + ?(ВидПлана.ИнтервалПланирования = 7, "понедельно", "по " + ВидПлана.ИнтервалПланирования + " дней") + " для агента " + АгентПланирования;
		Элементы.НадписьИнформацияВариантаПланирования.Видимость = Истина;
		
		Элементы.ТаблицаЗначенийПланы.Доступность = Истина;
	КонецЕсли;
	Если Элементы.ТаблицаЗначенийПланы.Доступность = Истина Тогда
		ПриОткрытииНаСервере();
	КонецЕсли;	
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаЗначенийПланыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Попытка
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ТаблицаЗначенийПланыПриОкончанииРедактированияНаСервере(Элемент.ТекущиеДанные.Дата, Элемент.ТекущиеДанные.План);
	КонецЕсли;
	Исключение
	КонецПопытки;
КонецПроцедуры


Процедура ТаблицаЗначенийПланыПриОкончанииРедактированияНаСервере(ДатаПланирования, План)
	
	Попытка
		НаборЗаписей = РегистрыСведений.БПАГПланы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидПлана.Установить(ВидПлана);
		//НаборЗаписей.Отбор.Вариант.Установить(ВариантМаршрута);
		НаборЗаписей.Отбор.Агент.Установить(АгентПланирования);
		НаборЗаписей.Отбор.Дата.Установить(ДатаПланирования);
		
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ВидПлана = ВидПлана;
		//НоваяЗапись.Вариант = ВариантМаршрута;
		НоваяЗапись.Агент = АгентПланирования;
		НоваяЗапись.Дата = ДатаПланирования;
		НоваяЗапись.План = План;
		Попытка
			НаборЗаписей.Записать();
			ПриОткрытииНаСервере();
		Исключение
			Сообщить("Запись с такими полями не может быть сохранена!");
		КонецПопытки;
	Исключение
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗначенийПланыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Попытка
		Элемент.ТекущиеДанные.ВидПлана = ВидПлана;
		//Элемент.ТекущиеДанные.Вариант = ВариантМаршрута;
		Элемент.ТекущиеДанные.Агент = АгентПланирования;
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗначенийПланыПередУдалением(Элемент, Отказ)
	Попытка
		Если Элемент.ТекущиеДанные <> Неопределено Тогда
			ТаблицаЗначенийПланыПередУдалениемНаСервере(Элемент.ТекущиеДанные.Дата, Элемент.ТекущиеДанные.План);
		КонецЕсли;
	Исключение	
	КонецПопытки;
КонецПроцедуры

Процедура ТаблицаЗначенийПланыПередУдалениемНаСервере(ДатаПланирования, План)
	
	Попытка
		НаборЗаписей = РегистрыСведений.БПАГПланы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидПлана.Установить(ВидПлана);
		//НаборЗаписей.Отбор.Вариант.Установить(ВариантМаршрута);
		НаборЗаписей.Отбор.Агент.Установить(АгентПланирования);
		НаборЗаписей.Отбор.Дата.Установить(ДатаПланирования);
		
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	Исключение
	КонецПопытки;
КонецПроцедуры




