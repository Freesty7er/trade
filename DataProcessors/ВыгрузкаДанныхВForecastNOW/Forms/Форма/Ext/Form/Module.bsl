
#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.ИсключаемыеСклады.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы");
	
	УстановитьСвойстваЭлементовПоВыгрузкеИсторииПродаж(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	УстановитьСвойстваЭлементовПоВыгрузкеИсторииПродаж(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ИмяПапкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.ПолноеИмяФайла = Объект.ИмяПапки;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатДиалогаВыбораФайла", ЭтотОбъект);
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьИсториюПродажПриИзменении(Элемент)
	УстановитьСвойстваЭлементовПоВыгрузкеИсторииПродаж(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ДействияКоманд

&НаКлиенте
Процедура ВыгрузитьДанные(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли; 
	
	Файл = Новый Файл(Объект.ИмяПапки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатПроверкиСуществованияПутиФайла", ЭтотОбъект);
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеПроцедурыИФункции

// Процедура обратного вызова для обработки результата выбора файла.
//
// Параметры:
//  ВыбранныеФайлы  - Массив, Неопределено - Набор выбранных имён файлов. Если выбор не осуществлён,
//                 будет возвращено значение Неопределено.
//  ДополнительныеПараметры  - Произвольный - Не используется.
//
&НаКлиенте
Процедура ОбработатьРезультатДиалогаВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		Объект.ИмяПапки = ВыбранныеФайлы[0];
	КонецЕсли; 
	
КонецПроцедуры // ОбработатьРезультатДиалогаВыбораФайла()

// Процедура обратного вызова для обработки результата проверки существования пути, по которому
// должен быть сохранён файл выгрузки.
//
// Параметры:
//  Существует  - Булево - Истина - файл существует; Ложь - в противном случае.
//  ДополнительныеПараметры  - Произвольный - Не используется.
//
&НаКлиенте
Процедура ОбработатьРезультатПроверкиСуществованияПутиФайла(Существует, ДополнительныеПараметры) Экспорт
	
	Если Не Существует Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не найден выбранная папка. Сохранение файлов невозможно.'"));
		Возврат;
		
	КонецЕсли; 
	
	Состояние(НСтр("ru = 'Выполняется выгрузка данных...'"));
	
	ЕстьОшибки = Ложь;
	ИмяПапки = Объект.ИмяПапки + ?(Прав(Объект.ИмяПапки, 1) = "\", "", "\");
	
	стДанныеФайлов = ВыгрузитьДанныеНаСервере();
	
	// Обработка файла классификации.
	Если Объект.ВыгружатьКлассификацию Тогда
	
		ДанныеФайла = стДанныеФайлов.Классификация;
		Если ДанныеФайла = Неопределено Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'При формировании файла классификации возникли ошибки. Выгрузка не выполнена.'");
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();
			
			ЕстьОшибки = Истина;
			Возврат;
			
		Иначе
			ДанныеФайла.Записать(ИмяПапки + "Классификация.csv");
		КонецЕсли; 
	
	КонецЕсли; 
	
	// Обработка файла параметров.
	Если Объект.ВыгружатьПараметры Тогда
	
		ДанныеФайла = стДанныеФайлов.Параметры;
		Если ДанныеФайла = Неопределено Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'При формировании файла параметров возникли ошибки. Выгрузка не выполнена.'");
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();
			
			ЕстьОшибки = Истина;
			Возврат;
			
		Иначе
			ДанныеФайла.Записать(ИмяПапки + "Параметры.csv");
		КонецЕсли; 
	
	КонецЕсли; 
	
	// Обработка файла истории продаж.
	Если Объект.ВыгружатьИсториюПродаж Тогда
		
		ДанныеФайла = стДанныеФайлов.ИсторияПродаж;
		Если ДанныеФайла = Неопределено Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'При формировании файла истории продаж возникли ошибки. Выгрузка не выполнена.'");
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();
			
			ЕстьОшибки = Истина;
			Возврат;
			
		Иначе
			ДанныеФайла.Записать(ИмяПапки + "История продаж.csv");
		КонецЕсли; 
	
	КонецЕсли; 
	
	Если ЕстьОшибки Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'В процессе выгрузки данных возникли ошибки.'"));
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Выгрузка данных завершена.'"));
	КонецЕсли; 
	
КонецПроцедуры // ОбработатьРезультатПроверкиСуществованияПутиФайла()

// Выполняет формирование всех файлов с выгруженными данными.
//
// Возвращаемое значение:
//   Структура   - Данные выгруженных файлов. Каждой свойство структуры содержит данные
//                 типа ДвоичныеДанные. Если какой-либо файл не был сформирован, свойство
//                 структуры будет содержать значение Неопределено. Структура содержит
//                 следующие свойства:
//                 		Классификация  - ДвоичныеДанные - Файл с данными классификации.
//                 		Параметры  - ДвоичныеДанные - Файл с данными параметров.
//                 		ИсторияПродаж  - ДвоичныеДанные - Файл с данными истории продаж.
//
&НаСервере
Функция ВыгрузитьДанныеНаСервере()

	стДанныеФайлов = Новый Структура("Классификация,Параметры,ИсторияПродаж,");
	
	Если Объект.ВыгружатьКлассификацию Тогда
		стДанныеФайлов.Классификация = ВыгрузитьКлассификациюНаСервере();
	КонецЕсли; 
	
	Если Объект.ВыгружатьПараметры Тогда
		стДанныеФайлов.Параметры = ВыгрузитьПараметрыНаСервере();
	КонецЕсли; 
	
	Если Объект.ВыгружатьИсториюПродаж Тогда
		стДанныеФайлов.ИсторияПродаж = ВыгрузитьИсториюПродажНаСервере();
	КонецЕсли; 
	
	Возврат стДанныеФайлов;

КонецФункции // ВыгрузитьДанныеНаСервере()

// Формирует и возвращает файл с данными классификации.
//
// Возвращаемое значение:
//   ДвоичныеДанные   - Файл с данными классификации.
//
&НаСервере
Функция ВыгрузитьКлассификациюНаСервере()
	
	Запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ПОМЕСТИТЬ СписокНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ПометкаУдаления
	|	И Номенклатура.Родитель.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Внутренний.Товары)
	|	И НЕ Номенклатура.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Наименование,
	|	ЕСТЬNULL(Номенклатура.Родитель.Наименование, ""Все товары"") КАК Группа,
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.Родитель
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокНоменклатуры.Ссылка.Родитель КАК Группа
	|ИЗ
	|	СписокНоменклатуры КАК СписокНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокНоменклатуры.Ссылка КАК Номенклатура,
	|	СписокНоменклатуры.Ссылка.Родитель.Наименование КАК является,
	|	СписокНоменклатуры.Ссылка.Наименование КАК Название,
	|	СписокНоменклатуры.Ссылка.Вес КАК Вес
	|ИЗ
	|	СписокНоменклатуры КАК СписокНоменклатуры";
	#КонецОбласти
	
	мРезультаты = Запрос.ВыполнитьПакет();
	
	тзСвойстваГрупп = мРезультаты[1].Выгрузить();
	тзСвойстваГрупп.Индексы.Добавить("Ссылка");
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаТекста.UTF8);
	
	// Первая строка всегда предопределённая.
	мДанные = Новый Массив;
	мДанные.Добавить("Все товары");
	мДанные.Добавить("это");
	мДанные.Добавить("группа");
	ДобавитьСтрокуВФайл(ЗаписьТекста, мДанные);
	
	// Формируем иерархию товаров.
	Выборка = мРезультаты[2].Выбрать();	
	Пока Выборка.Следующий() Цикл
		ДобавитьГруппуВФайл(ЗаписьТекста, Выборка.Группа, тзСвойстваГрупп);
	КонецЦикла;	
	
	// Набор выгружаемых свойств.
	мСвойства = Новый Массив;
	мСвойства.Добавить("является");
	мСвойства.Добавить("Название");
	мСвойства.Добавить("Вес");
	
	Выборка = мРезультаты[3].Выбрать();	
	Пока Выборка.Следующий() Цикл
		
		ИдентификаторТовара = ПолучитьИдентификаторТовара(Выборка.Номенклатура);
		
		Для каждого Свойство Из мСвойства Цикл
			
			ЗначениеСвойства = Выборка[Свойство];
			ФорматироватьЗначение(ЗначениеСвойства);
			
			мДанные = Новый Массив;
			мДанные.Добавить(ИдентификаторТовара);
			мДанные.Добавить(Свойство);
			мДанные.Добавить(ЗначениеСвойства);
			ДобавитьСтрокуВФайл(ЗаписьТекста, мДанные);
			
		КонецЦикла; 
		
	КонецЦикла;	
	
	ЗаписьТекста.Закрыть();
	
	Возврат Новый ДвоичныеДанные(ИмяВременногоФайла);
	
КонецФункции // ВыгрузитьКлассификациюНаСервере()

// Формирует и возвращает файл с данными параметров.
//
// Возвращаемое значение:
//   ДвоичныеДанные   - Файл с данными параметров.
//
&НаСервере
Функция ВыгрузитьПараметрыНаСервере()
	
	Запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПоставщикам.Номенклатура КАК Номенклатура,
	|	ЗаказыПоставщикам.Склад.Наименование КАК Склад,
	|	ЗаказыПоставщикам.ДатаПоследнегоРазмещенияЗаказа КАК ДатаПоследнегоРазмещенияЗаказа,
	|	Форкаст_ПараметрыForecastNOW.АктуальныйПериод,
	|	Форкаст_ПараметрыForecastNOW.НовыйТовар,
	|	Форкаст_ПараметрыForecastNOW.УчитыватьПродажиДочернихСкладов,
	|	Форкаст_ПараметрыForecastNOW.МинимальноеЧислоДнейПродаж,
	|	Форкаст_ПараметрыForecastNOW.СрокГодности,
	|	Форкаст_ПараметрыForecastNOW.ИерархияСкладов,
	|	Форкаст_ПараметрыForecastNOW.УчитыватьКалендарь,
	|	Форкаст_ПараметрыForecastNOW.МаксимальныйЗаказ,
	|	Форкаст_ПараметрыForecastNOW.ДобавлятьКЗаказу,
	|	Форкаст_ПараметрыForecastNOW.МинимальнаяПартия,
	|	Форкаст_ПараметрыForecastNOW.МаксимальныйЗапас,
	|	Форкаст_ПараметрыForecastNOW.Кратность,
	|	Форкаст_ПараметрыForecastNOW.МинимальныйЗапас,
	|	Форкаст_ПараметрыForecastNOW.ГоризонтПланирования,
	|	Форкаст_ПараметрыForecastNOW.ТочкаЗаказа,
	|	Форкаст_ПараметрыForecastNOW.ПериодичностьВДнях,
	|	Форкаст_ПараметрыForecastNOW.СрокДоставкиВДнях,
	|	Форкаст_ПараметрыForecastNOW.СрокИзготовленияВДнях,
	|	Форкаст_ПараметрыForecastNOW.РасписаниеЗаказов,
	|	Форкаст_ПараметрыForecastNOW.УчитыватьУпущенныйСпрос,
	|	Форкаст_ПараметрыForecastNOW.ВременнаяКорзина,
	|	Форкаст_ПараметрыForecastNOW.ВосстанавливатьСпросПоОстаткам,
	|	Форкаст_ПараметрыForecastNOW.ФильтрацияВыбросов,
	|	Форкаст_ПараметрыForecastNOW.НормироватьСезонность,
	|	Форкаст_ПараметрыForecastNOW.УчитыватьСезонность,
	|	Форкаст_ПараметрыForecastNOW.Май,
	|	Форкаст_ПараметрыForecastNOW.Фев,
	|	Форкаст_ПараметрыForecastNOW.Июл,
	|	Форкаст_ПараметрыForecastNOW.Мар,
	|	Форкаст_ПараметрыForecastNOW.Апр,
	|	Форкаст_ПараметрыForecastNOW.Авг,
	|	Форкаст_ПараметрыForecastNOW.Сен,
	|	Форкаст_ПараметрыForecastNOW.Июн,
	|	Форкаст_ПараметрыForecastNOW.Окт,
	|	Форкаст_ПараметрыForecastNOW.Янв,
	|	Форкаст_ПараметрыForecastNOW.Ноя,
	|	Форкаст_ПараметрыForecastNOW.Дек
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыПоставщикамОбороты.Номенклатура КАК Номенклатура,
	|		ЗаказыПоставщикамОбороты.Склад КАК Склад,
	|		МАКСИМУМ(ЗаказыПоставщикамОбороты.ЗаказПоставщику.Дата) КАК ДатаПоследнегоРазмещенияЗаказа
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам.Обороты(
	|				,
	|				,
	|				,
	|				НЕ Номенклатура.ПометкаУдаления
	|					И Номенклатура.Родитель.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Внутренний.Товары)) КАК ЗаказыПоставщикамОбороты
	|	ГДЕ
	|		ЗаказыПоставщикамОбороты.Склад <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказыПоставщикамОбороты.Номенклатура,
	|		ЗаказыПоставщикамОбороты.Склад) КАК ЗаказыПоставщикам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Форкаст_ПараметрыForecastNOW КАК Форкаст_ПараметрыForecastNOW
	|		ПО ЗаказыПоставщикам.Номенклатура = Форкаст_ПараметрыForecastNOW.Номенклатура";
	#КонецОбласти
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Набор выгружаемых параметров.
	соПараметры = Новый Соответствие;
	соПараметры.Вставить("ДатаПоследнегоРазмещенияЗаказа", "Дата последнего размещения заказа");
	
	Для каждого Ресурс Из Метаданные.РегистрыСведений.Форкаст_ПараметрыForecastNOW.Ресурсы Цикл
		соПараметры.Вставить(Ресурс.Имя, Ресурс.Синоним);
	КонецЦикла; 
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаТекста.UTF8);
	
	Пока Выборка.Следующий() Цикл
		
		ИдентификаторТовара = ПолучитьИдентификаторТовара(Выборка.Номенклатура);
		
		Для каждого КлючИЗначение Из соПараметры Цикл
			
			Склад = Выборка.Склад;
			НормализоватьТекст(Склад);
			
			ЗначениеПараметра = Выборка[КлючИЗначение.Ключ];
			ФорматироватьЗначение(ЗначениеПараметра);
		
			мДанные = Новый Массив;
			мДанные.Добавить(Склад);
			мДанные.Добавить(ИдентификаторТовара);
			мДанные.Добавить(КлючИЗначение.Значение);
			мДанные.Добавить(ЗначениеПараметра);
			ДобавитьСтрокуВФайл(ЗаписьТекста, мДанные);
		
		КонецЦикла; 
	
	КонецЦикла; 
	
	ЗаписьТекста.Закрыть();
	
	Возврат Новый ДвоичныеДанные(ИмяВременногоФайла);

КонецФункции // ВыгрузитьПараметрыНаСервере()

// Формирует и возвращает файл с данными истории продаж.
//
// Возвращаемое значение:
//   ДвоичныеДанные   - Файл с данными истории продаж.
//
&НаСервере
Функция ВыгрузитьИсториюПродажНаСервере()
	
	Запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Данные.Период КАК Период,
	|	Данные.Номенклатура КАК Номенклатура,
	|	СУММА(Данные.КоличествоПродажа) КАК КоличествоПродажа,
	|	СУММА(Данные.КоличествоПрочийРасход) КАК КоличествоПрочийРасход,
	|	СУММА(Данные.КоличествоПоступление) КАК КоличествоПоступление,
	|	СУММА(Данные.КоличествоЗаказыПокупателей) КАК КоличествоЗаказыПокупателей,
	|	СУММА(Данные.КоличествоКонечныйОстаток) КАК КоличествоКонечныйОстаток
	|ПОМЕСТИТЬ СгруппированныеДанные
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ПартииТоваровНаСкладахОбороты.Период, ДЕНЬ) КАК Период,
	|		ПартииТоваровНаСкладахОбороты.Номенклатура КАК Номенклатура,
	|		ПартииТоваровНаСкладахОбороты.КоличествоРасход КАК КоличествоПродажа,
	|		0 КАК КоличествоПрочийРасход,
	|		0 КАК КоличествоПоступление,
	|		0 КАК КоличествоЗаказыПокупателей,
	|		0 КАК КоличествоКонечныйОстаток
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровНаСкладах.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Регистратор,
	|				Подразделение = &Подразделение
	|					И НЕ Номенклатура.ПометкаУдаления
	|					И Номенклатура.Родитель.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Внутренний.Товары)
	|					И НЕ Склад В (&ИсключаемыеСклады)) КАК ПартииТоваровНаСкладахОбороты
	|	ГДЕ
	|		ПартииТоваровНаСкладахОбороты.Регистратор ССЫЛКА Документ.РасходнаяНакладная
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ПартииТоваровНаСкладахОбороты.Период, ДЕНЬ),
	|		ПартииТоваровНаСкладахОбороты.Номенклатура,
	|		0,
	|		ВЫБОР
	|			КОГДА ПартииТоваровНаСкладахОбороты.КоличествоРасход > 0
	|				ТОГДА ПартииТоваровНаСкладахОбороты.КоличествоРасход
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПартииТоваровНаСкладахОбороты.КоличествоРасход < 0
	|				ТОГДА -ПартииТоваровНаСкладахОбороты.КоличествоРасход
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		0,
	|		0
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровНаСкладах.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Регистратор,
	|				Подразделение = &Подразделение
	|					И НЕ Номенклатура.ПометкаУдаления
	|					И Номенклатура.Родитель.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Внутренний.Товары)
	|					И НЕ Склад В (&ИсключаемыеСклады)) КАК ПартииТоваровНаСкладахОбороты
	|	ГДЕ
	|		НЕ ПартииТоваровНаСкладахОбороты.Регистратор ССЫЛКА Документ.РасходнаяНакладная
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ПартииТоваровНаСкладахОбороты.Период, ДЕНЬ),
	|		ПартииТоваровНаСкладахОбороты.Номенклатура,
	|		0,
	|		ВЫБОР
	|			КОГДА ПартииТоваровНаСкладахОбороты.КоличествоПриход < 0
	|				ТОГДА -ПартииТоваровНаСкладахОбороты.КоличествоПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПартииТоваровНаСкладахОбороты.КоличествоПриход > 0
	|				ТОГДА ПартииТоваровНаСкладахОбороты.КоличествоПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		0,
	|		0
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровНаСкладах.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Регистратор,
	|				Подразделение = &Подразделение
	|					И НЕ Номенклатура.ПометкаУдаления
	|					И Номенклатура.Родитель.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Внутренний.Товары)
	|					И НЕ Склад В (&ИсключаемыеСклады)) КАК ПартииТоваровНаСкладахОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказыПокупателейОбороты.Период,
	|		ЗаказыПокупателейОбороты.Номенклатура,
	|		0,
	|		0,
	|		0,
	|		ЗаказыПокупателейОбороты.ЗаказаноОборот,
	|		0
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				День,
	|				Подразделение = &Подразделение
	|					И НЕ Номенклатура.ПометкаУдаления
	|					И Номенклатура.Родитель.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Внутренний.Товары)
	|					И НЕ Склад В (&ИсключаемыеСклады)) КАК ЗаказыПокупателейОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПартииТоваровНаСкладахОстаткиИОбороты.Период,
	|		ПартииТоваровНаСкладахОстаткиИОбороты.Номенклатура,
	|		0,
	|		0,
	|		0,
	|		0,
	|		ВЫБОР
	|			КОГДА ПартииТоваровНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток > 0
	|				ТОГДА ПартииТоваровНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровНаСкладах.ОстаткиИОбороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				День,
	|				,
	|				Подразделение = &Подразделение
	|					И НЕ Номенклатура.ПометкаУдаления
	|					И Номенклатура.Родитель.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Внутренний.Товары)
	|					И НЕ Склад В (&ИсключаемыеСклады)) КАК ПартииТоваровНаСкладахОстаткиИОбороты) КАК Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	Данные.Период,
	|	Данные.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СгруппированныеДанные.Период,
	|	СгруппированныеДанные.Номенклатура,
	|	СгруппированныеДанные.Номенклатура.Код КАК Артикул,
	|	СгруппированныеДанные.Номенклатура.Наименование КАК Наименование,
	|	СгруппированныеДанные.КоличествоПродажа,
	|	СгруппированныеДанные.КоличествоПрочийРасход,
	|	СгруппированныеДанные.КоличествоПоступление,
	|	СгруппированныеДанные.КоличествоЗаказыПокупателей,
	|	СгруппированныеДанные.КоличествоКонечныйОстаток,
	|	ЦеныНоменклатурыПродажа.Цена КАК ЦенаПродажа,
	|	ЦеныНоменклатурыЗакупка.Цена КАК ЦенаЗакупка,
	|	СгруппированныеДанные.КоличествоПродажа * ЦеныНоменклатурыПродажа.Цена КАК СуммаПродажа,
	|	СгруппированныеДанные.КоличествоПродажа * ЦеныНоменклатурыЗакупка.Цена КАК СуммаЗакупка
	|ИЗ
	|	СгруппированныеДанные КАК СгруппированныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ДатыЦенНоменклатуры.Номенклатура КАК Номенклатура,
	|			ДатыЦенНоменклатуры.ПериодДанных КАК ПериодДанных,
	|			МАКСИМУМ(ЦеныНоменклатуры.Цена) КАК Цена
	|		ИЗ
	|			(ВЫБРАТЬ
	|				СгруппированныеДанные.Номенклатура КАК Номенклатура,
	|				СгруппированныеДанные.Период КАК ПериодДанных,
	|				МАКСИМУМ(ЦеныНоменклатуры.Период) КАК Период
	|			ИЗ
	|				СгруппированныеДанные КАК СгруппированныеДанные
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|					ПО СгруппированныеДанные.Период > ЦеныНоменклатуры.Период
	|						И СгруппированныеДанные.Номенклатура = ЦеныНоменклатуры.Номенклатура
	|						И (ЦеныНоменклатуры.ТипЦен = &ТипЦенПродажи)
	|						И (ЦеныНоменклатуры.Подразделение = &Подразделение)
	|						И (ЦеныНоменклатуры.ВалютаЦены = ЗНАЧЕНИЕ(Справочник.Валюты.НациональнаяВалюта))
	|			
	|			СГРУППИРОВАТЬ ПО
	|				СгруппированныеДанные.Номенклатура,
	|				СгруппированныеДанные.Период) КАК ДатыЦенНоменклатуры
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|				ПО ДатыЦенНоменклатуры.Период = ЦеныНоменклатуры.Период
	|					И ДатыЦенНоменклатуры.Номенклатура = ЦеныНоменклатуры.Номенклатура
	|					И (ЦеныНоменклатуры.ТипЦен = &ТипЦенПродажи)
	|					И (ЦеныНоменклатуры.Подразделение = &Подразделение)
	|					И (ЦеныНоменклатуры.ВалютаЦены = ЗНАЧЕНИЕ(Справочник.Валюты.НациональнаяВалюта))
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ДатыЦенНоменклатуры.Номенклатура,
	|			ДатыЦенНоменклатуры.ПериодДанных) КАК ЦеныНоменклатурыПродажа
	|		ПО СгруппированныеДанные.Номенклатура = ЦеныНоменклатурыПродажа.Номенклатура
	|			И СгруппированныеДанные.Период = ЦеныНоменклатурыПродажа.ПериодДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ДатыЦенНоменклатуры.Номенклатура КАК Номенклатура,
	|			ДатыЦенНоменклатуры.ПериодДанных КАК ПериодДанных,
	|			МАКСИМУМ(ЦеныНоменклатуры.Цена) КАК Цена
	|		ИЗ
	|			(ВЫБРАТЬ
	|				СгруппированныеДанные.Номенклатура КАК Номенклатура,
	|				СгруппированныеДанные.Период КАК ПериодДанных,
	|				МАКСИМУМ(ЦеныНоменклатуры.Период) КАК Период
	|			ИЗ
	|				СгруппированныеДанные КАК СгруппированныеДанные
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|					ПО СгруппированныеДанные.Период > ЦеныНоменклатуры.Период
	|						И СгруппированныеДанные.Номенклатура = ЦеныНоменклатуры.Номенклатура
	|						И (ЦеныНоменклатуры.ТипЦен = &ТипЦенЗакупки)
	|						И (ЦеныНоменклатуры.Подразделение = &Подразделение)
	|						И (ЦеныНоменклатуры.ВалютаЦены = ЗНАЧЕНИЕ(Справочник.Валюты.НациональнаяВалюта))
	|			
	|			СГРУППИРОВАТЬ ПО
	|				СгруппированныеДанные.Номенклатура,
	|				СгруппированныеДанные.Период) КАК ДатыЦенНоменклатуры
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|				ПО ДатыЦенНоменклатуры.Период = ЦеныНоменклатуры.Период
	|					И ДатыЦенНоменклатуры.Номенклатура = ЦеныНоменклатуры.Номенклатура
	|					И (ЦеныНоменклатуры.ТипЦен = &ТипЦенЗакупки)
	|					И (ЦеныНоменклатуры.Подразделение = &Подразделение)
	|					И (ЦеныНоменклатуры.ВалютаЦены = ЗНАЧЕНИЕ(Справочник.Валюты.НациональнаяВалюта))
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ДатыЦенНоменклатуры.Номенклатура,
	|			ДатыЦенНоменклатуры.ПериодДанных) КАК ЦеныНоменклатурыЗакупка
	|		ПО СгруппированныеДанные.Номенклатура = ЦеныНоменклатурыЗакупка.Номенклатура
	|			И СгруппированныеДанные.Период = ЦеныНоменклатурыЗакупка.ПериодДанных";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("НачалоПериода", Объект.Период.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", Объект.Период.ДатаОкончания);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("ТипЦенПродажи", Объект.ТипЦенПродажи);
	Запрос.УстановитьПараметр("ТипЦенЗакупки", Объект.ТипЦенЗакупки);
	Запрос.УстановитьПараметр("ИсключаемыеСклады", Объект.ИсключаемыеСклады);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаТекста.UTF8);
	
	// Добавим заголовок в файл.
	стДанныеСтроки = ПолучитьСтруктуруСтрокиИсторииПродаж();
	стДанныеСтроки.ИдентификаторТовара = НСтр("ru = 'Идентификатор товара'");
	стДанныеСтроки.Артикул = НСтр("ru = 'Артикул'");
	стДанныеСтроки.Наименование = НСтр("ru = 'Наименование'");
	стДанныеСтроки.Период = НСтр("ru = 'Период'");
	стДанныеСтроки.КоличествоПродажа = НСтр("ru = 'Количество продажи'");
	стДанныеСтроки.КоличествоПрочийРасход = НСтр("ru = 'Количество прочего расхода'");
	стДанныеСтроки.КоличествоПоступление = НСтр("ru = 'Количество поступления'");
	стДанныеСтроки.КоличествоЗаказыПокупателей = НСтр("ru = 'Количество по заказам покупателей'");
	стДанныеСтроки.ЦенаПродажа = НСтр("ru = 'Цена продажи'");
	стДанныеСтроки.СуммаПродажа = НСтр("ru = 'Сумма продажи'");
	стДанныеСтроки.ЦенаЗакупка = НСтр("ru = 'Цена закупки'");
	стДанныеСтроки.СуммаЗакупка = НСтр("ru = 'Сумма закупки'");
	стДанныеСтроки.КоличествоКонечныйОстаток = НСтр("ru = 'Конечный остаток'");
	
	ДобавитьСтруктуруДанныхВФайл(ЗаписьТекста, стДанныеСтроки);
	
	// Данные по товарам.
	Пока Выборка.Следующий() Цикл
	
		стДанныеСтроки = ПолучитьСтруктуруСтрокиИсторииПродаж();
		ЗаполнитьЗначенияСвойств(стДанныеСтроки, Выборка);
		стДанныеСтроки.ИдентификаторТовара = ПолучитьИдентификаторТовара(Выборка.Номенклатура);
		
		ФорматироватьДанныеИсторииПродаж(стДанныеСтроки);		
		ДобавитьСтруктуруДанныхВФайл(ЗаписьТекста, стДанныеСтроки);
	
	КонецЦикла;
	
	ЗаписьТекста.Закрыть();
	
	Возврат Новый ДвоичныеДанные(ИмяВременногоФайла);

КонецФункции // ВыгрузитьИсториюПродажНаСервере()

// Возвращает структуру, описывающую данные каждой строки файла истории продаж.
//
// Возвращаемое значение:
//   Структура   - Описание строки файла выгрузки. Содержит следующие свойства:
//                 ИдентификаторТовара
//                 Артикул
//                 Наименование
//                 Период
//                 КоличествоПродажа
//                 КоличествоПрочийРасход
//                 КоличествоПоступление
//                 КоличествоЗаказыПокупателей
//                 ЦенаПродажа
//                 СуммаПродажа
//                 ЦенаЗакупка
//                 СуммаЗакупка
//                 КоличествоКонечныйОстаток
//
&НаСервереБезКонтекста
Функция ПолучитьСтруктуруСтрокиИсторииПродаж()

	Возврат Новый Структура("ИдентификаторТовара,Артикул,Наименование,Период,КоличествоПродажа,КоличествоПрочийРасход,КоличествоПоступление,КоличествоЗаказыПокупателей,ЦенаПродажа,СуммаПродажа,ЦенаЗакупка,СуммаЗакупка,КоличествоКонечныйОстаток");

КонецФункции // ПолучитьСтруктуруСтрокиИсторииПродаж()

// Возвращает идентификатор товара для выгрузки данных.
//
// Параметры:
//  Номенклатура  - СправочникСсылка.Номенклатура - Номенклатура, для которой будет
//                 возвращён идентификатор.
//
// Возвращаемое значение:
//   Строка   - Идентификатор товара.
//
&НаСервереБезКонтекста
Функция ПолучитьИдентификаторТовара(Номенклатура)

	Возврат Строка(Номенклатура.УникальныйИдентификатор());

КонецФункции // ПолучитьИдентификаторТовара()

// Добавляет новую строку в файл выгрузки согласно переданному набору данных.
//
// Параметры:
//  ЗаписьТекста  - ЗаписьТекста - Объект, выполняющий физическую запись в файл.
//  мЗначения  - Массив - Данные новой строки.
//
&НаСервереБезКонтекста
Процедура ДобавитьСтрокуВФайл(ЗаписьТекста, мЗначения)

	ЗаписьТекста.ЗаписатьСтроку(СтрСоединить(мЗначения, ";"));

КонецПроцедуры // ДобавитьСтрокуВФайл()

// Добавляет новую строку в файл выгрузки согласно переданным структурированным данным.
//
// Параметры:
//  ЗаписьТекста  - ЗаписьТекста - Объект, выполняющий физическую запись в файл.
//  стДанные  - Структура - Данные новой строки.
//
&НаСервереБезКонтекста
Процедура ДобавитьСтруктуруДанныхВФайл(ЗаписьТекста, стДанные)

	мЗначения = Новый Массив;
	Для каждого КлючИЗначение Из стДанные Цикл
		мЗначения.Добавить(КлючИЗначение.Значение);
	КонецЦикла; 
	
	ДобавитьСтрокуВФайл(ЗаписьТекста, мЗначения);

КонецПроцедуры // ДобавитьСтруктуруДанныхВФайл()

// Добавляет данные о группе справочника в выгрузку данных классификации.
//
// Параметры:
//  ЗаписьТекста  - ЗаписьТекста - Объект, выполняющий физическую запись в файл.
//  Группа  - СправочникСсылка.Номенклатура - Добавляемая группа справочника.
//  тзСвойстваГрупп  - ТаблицаЗначений - Данные обо всех группах справочника "Номенклатура".
//                 Таблица должна содержать следующие колонки:
//                 		Ссылка  - СправочникСсылка.Номенклатура - Группы справочника, для 
//                 			которых таблица содержит данные.
//                 		Родитель  - СправочникСсылка.Номенклатура - Родительская группа для
//                 			текущей группы справочника.
//                 		Наименование  - Строка - Название текущей группы.
//                 		Группа  - Строка - Название родительской группы для текущей группы.
//
&НаСервереБезКонтекста
Процедура ДобавитьГруппуВФайл(ЗаписьТекста, Группа, тзСвойстваГрупп)

	СтрокаСвойстваГрупп = тзСвойстваГрупп.Найти(Группа, "Ссылка");
	Если СтрокаСвойстваГрупп <> Неопределено Тогда
		
		Родитель = СтрокаСвойстваГрупп.Родитель;
		Если Родитель <> Справочники.Номенклатура.ПустаяСсылка() Тогда
			ДобавитьГруппуВФайл(ЗаписьТекста, Родитель, тзСвойстваГрупп);
		КонецЕсли; 
		
		НаименованиеГруппы = СтрокаСвойстваГрупп.Наименование;
		НаименованиеРодителя = СтрокаСвойстваГрупп.Группа;
		НормализоватьТекст(НаименованиеГруппы);
		НормализоватьТекст(НаименованиеРодителя);
		
		// Информация о самой групе.
		мДанные = Новый Массив;
		мДанные.Добавить(НаименованиеГруппы);
		мДанные.Добавить("это");
		мДанные.Добавить("группа");
		ДобавитьСтрокуВФайл(ЗаписьТекста, мДанные);
		
		// Информация о подчинённости родительской группе.
		мДанные = Новый Массив;
		мДанные.Добавить(НаименованиеРодителя);
		мДанные.Добавить("имеетПодгруппу");
		мДанные.Добавить(НаименованиеГруппы);
		ДобавитьСтрокуВФайл(ЗаписьТекста, мДанные);
		
		// Удаляем группу, так как её больше нет необходимости выгружать.
		тзСвойстваГрупп.Удалить(СтрокаСвойстваГрупп);
	
	КонецЕсли; 

КонецПроцедуры // ДобавитьГруппуВФайл()

// Форматирует данные строки файла истории продаж, приводя их при необходимости к текстовому
// виду и требуемому формату.
//
// Параметры:
//  стДанныеСтроки  - Стркутура - Данные новой строки. Набор свойств структуры перечислен
//                 в описании функции ПолучитьСтруктуруСтрокиИсторииПродаж().
//
&НаСервереБезКонтекста
Процедура ФорматироватьДанныеИсторииПродаж(стДанныеСтроки)

	НормализоватьТекст(стДанныеСтроки.Артикул);
	НормализоватьТекст(стДанныеСтроки.Наименование);
	
	ФорматироватьДату(стДанныеСтроки.Период);
	
	ФорматироватьКоличество(стДанныеСтроки.КоличествоПродажа);
	ФорматироватьКоличество(стДанныеСтроки.КоличествоПрочийРасход);
	ФорматироватьКоличество(стДанныеСтроки.КоличествоПоступление);
	ФорматироватьКоличество(стДанныеСтроки.КоличествоЗаказыПокупателей);
	ФорматироватьКоличество(стДанныеСтроки.КоличествоКонечныйОстаток);
	
	ФорматироватьСумму(стДанныеСтроки.ЦенаПродажа);
	ФорматироватьСумму(стДанныеСтроки.ЦенаЗакупка);
	ФорматироватьСумму(стДанныеСтроки.СуммаПродажа);
	ФорматироватьСумму(стДанныеСтроки.СуммаЗакупка);

КонецПроцедуры // ФорматироватьДанныеИсторииПродаж()

// Приводит текстовые данные к допустимому виду, удаляя из текста недопустимые символы.
// Символы ";" буду заменены пробелами.
//
// Параметры:
//  Текст  - Строка - Обрабатываемый текст.
//
&НаСервереБезКонтекста
Процедура НормализоватьТекст(Текст)

	Текст = СтрЗаменить(Текст, ";", " ");

КонецПроцедуры // НормализоватьТекст()

// Преобразовывает переданную дату в строковое представление подходящего формата.
// Если значение не заполнено, будет возвращена пустая строка.
//
// Параметры:
//  Значение  - Дата, Неопределено, Null - Форматируемое значение.
//
&НаСервереБезКонтекста
Процедура ФорматироватьДату(Значение)

	Если ЗначениеЗаполнено(Значение) Тогда
		Значение = Формат(Значение, "ДФ=гггг-ММ-дд");
	Иначе
		Значение = "";
	КонецЕсли; 

КонецПроцедуры // ФорматироватьДату()

// Преобразовывает переданное число в строковое представление подходящего формата.
// Если значение не заполнено, будет возвращено значение "0".
//
// Параметры:
//  Значение  - Число, Неопределено, Null - Форматируемое значение.
//
&НаСервереБезКонтекста
Процедура ФорматироватьЧисло(Значение)

	Если ЗначениеЗаполнено(Значение) Тогда
		Значение = Формат(Значение, "ЧРД=.; ЧГ=0");
	Иначе
		Значение = "0";
	КонецЕсли; 

КонецПроцедуры // ФорматироватьЧисло()

// Преобразовывает переданное количество в строковое представление подходящего формата.
// Если значение не заполнено, будет возвращено значение "0".
//
// Параметры:
//  Значение  - Число, Неопределено, Null - Форматируемое значение.
//
&НаСервереБезКонтекста
Процедура ФорматироватьКоличество(Значение)

	Если ЗначениеЗаполнено(Значение) Тогда
		Значение = Формат(Значение, "ЧДЦ=3; ЧРД=.; ЧГ=0");
	Иначе
		Значение = "0";
	КонецЕсли; 

КонецПроцедуры // ФорматироватьКоличество()

// Преобразовывает переданное логическое значение в строковое представление подходящего
// формата. Если значение не заполнено, будет возвращено значение "Нет".
//
// Параметры:
//  Значение  - Число, Неопределено, Null - Форматируемое значение.
//
&НаСервереБезКонтекста
Процедура ФорматироватьБулево(Значение)

	Если ЗначениеЗаполнено(Значение) Тогда
		Значение = Формат(Значение, "БЛ=Нет; БИ=Да");
	Иначе
		Значение = "Нет";
	КонецЕсли; 

КонецПроцедуры // ФорматироватьБулево()

// Преобразовывает переданную сумму в строковое представление подходящего формата.
// Если значение не заполнено, будет возвращено значение "0".
//
// Параметры:
//  Значение  - Число, Неопределено, Null - Форматируемое значение.
//
&НаСервереБезКонтекста
Процедура ФорматироватьСумму(Значение)

	Если ЗначениеЗаполнено(Значение) Тогда
		Значение = Формат(Значение, "ЧДЦ=2; ЧРД=.; ЧГ=0");
	Иначе
		Значение = "0";
	КонецЕсли; 

КонецПроцедуры // ФорматироватьСумму()

// Преобразовывает переданное значение в строковое представление подходящего формата.
// Для каждого типа будет вызвана соответствующая вспомогательная функция.
//
// Параметры:
//  Значение  - Строка, Дата, Число, Булево, Неопределено, Null - Форматируемое значение.
//
&НаСервереБезКонтекста
Процедура ФорматироватьЗначение(Значение)

	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		
		НормализоватьТекст(Значение);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		
		ФорматироватьЧисло(Значение);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		
		ФорматироватьДату(Значение);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
		
		ФорматироватьБулево(Значение);
		
	Иначе
		
		Значение = Строка(Значение);
		
	КонецЕсли; 

КонецПроцедуры // ФорматироватьЗначение()

// Устанавливает свойства элементов формы в зависимости от необходимости выгрузки истории продаж.
//
// Параметры
//  Форма  - УправляемаяФорма - Эта форма.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваЭлементовПоВыгрузкеИсторииПродаж(Форма)
	Форма.Элементы.ГруппаИсторияПродаж.ТолькоПросмотр = Не Форма.Объект.ВыгружатьИсториюПродаж;
КонецПроцедуры // УстановитьСвойстваЭлементовПоВыгрузкеИсторииПродаж()

#КонецОбласти