Перем КаталогОбмена;

Функция ПолучитьXML(Настройки) Экспорт

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Настройки, "settingsComposition", "http://v8.1c.ru/8.1/data-composition-system/settings");

	Возврат ЗаписьXML.Закрыть();

КонецФункции

Функция ПолучитьНастройкиИзXML(ТекстXML) Экспорт

	Если ТекстXML = "" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	 ЧтениеXML.УстановитьСтроку(ТекстXML);
	
	Возврат СериализаторXDTO.ПрочитатьXML(ЧтениеXML, Тип("ПользовательскиеНастройкиКомпоновкиДанных"));

КонецФункции

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	СтрокаСохраненныхНастроек = ПолучитьXML(Компоновщик.ПользовательскиеНастройки);
	Настройки["СтрокаСохраненныхНастроек"] = СтрокаСохраненныхНастроек;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	СтрокаСохраненныхНастроек = Настройки["СтрокаСохраненныхНастроек"];
	Попытка
		Компоновщик.ЗагрузитьПользовательскиеНастройки(ПолучитьНастройкиИзXML(СтрокаСохраненныхНастроек));
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СхемаКомпоновкиДанных = РеквизитФормыВЗначение("Объект").ПолучитьМакет("СКДОтборОтчетаПоОтклонениямОтРекомендованного");
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Элементы.ПользовательскиеНастройки.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтбор(Команда)
	УправлениеВидимостью();
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостью()
	Элементы.ПользовательскиеНастройки.Видимость = НЕ Элементы.ПользовательскиеНастройки.Видимость;
	Элементы.ПоказатьОтбор.Заголовок = ?(Элементы.ПользовательскиеНастройки.Видимость, "Скрыть отбор", "Показать отбор");
	//Сформировать(Неопределено); //Раскомментировать
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	
	Период = ПолучитьПериодИзНастроек();
	
	Если (Период.ДатаНачала < Дата(2000, 1, 1)) ИЛИ (Период.ДатаОкончания < Дата(2000, 1, 1)) Тогда
		Предупреждение("Неверно указан период!");
		Возврат;
	КонецЕсли;	
	
	Если Период.ДатаНачала > Период.ДатаОкончания Тогда
		Предупреждение("Неверно указан период!");
		Возврат;
	КонецЕсли;
	
	ЗагрузитьТаблицуЛога();
КонецПроцедуры

Функция ПолучитьПериодИзНастроек()
	
	Компоновщик.ЗагрузитьНастройки(Компоновщик.ПолучитьНастройки());
	
	Период = Неопределено;
	тмпЭлемент = Компоновщик.Настройки.ПараметрыДанных.Элементы.Найти("Период");
	Если тмпЭлемент <> Неопределено Тогда
		Период = тмпЭлемент.Значение;
	КонецЕсли;
	
	Если Период = Неопределено Тогда
		Период = Новый СтандартныйПериод(НачалоДня(ТекущаяДата()), КонецДня(ТекущаяДата()));
	КонецЕсли;
	
	Возврат	Период;
КонецФункции

Процедура ЗагрузитьТаблицуЛога()
	
	Для Каждого тмпЭлемент Из Компоновщик.Настройки.Отбор.Элементы Цикл
		Если СокрЛП(тмпЭлемент.ЛевоеЗначение) = "Агент" Тогда
			ОтборПоАгентам = тмпЭлемент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ТЗАгенты = ПолучитьАгентовСОтбором(ОтборПоАгентам);
	
	Агенты = ТЗАгенты.ВыгрузитьКолонку("Агент");
	
	СписокКодовАгентов = Новый СписокЗначений;
	Для Каждого текАгент Из Агенты Цикл
		СписокКодовАгентов.Добавить(текАгент.Код);
	КонецЦикла;
	
	Для Каждого текАгент Из Агенты Цикл
		ОбъектОбработка = РеквизитФормыВЗначение("Объект");
		ТЗ = Новый ТаблицаЗначений();
		ТЗ.Колонки.Добавить("КодАгента");
		ТЗ.Колонки.Добавить("DocumentID");
		ТЗ.Колонки.Добавить("goodID");
		ТЗ.Колонки.Добавить("actualQty");
		ТЗ.Колонки.Добавить("recommendedQty");
		
		ТЗРезультат = Новый ТаблицаЗначений();
		
		//Получить список файлов из логов
		СписокФайловЛога = Новый СписокЗначений;
		СписокФайловЛога = ОбъектОбработка.ПолучитьМассивФайловЛогаОтклоненийОтРекомендованного(Период.ДатаНачала, КонецДня(Период.ДатаОкончания), текАгент.Код);
		
		Для Каждого ФайлЛога Из СписокФайловЛога Цикл
			ФайлыЛоговОтклонений = НайтиФайлы(КаталогОбмена + СокрЛП(текАгент.Код) + "\OrdersDiff\", ФайлЛога.Представление + "*.txt");
			Если ФайлыЛоговОтклонений.Количество() > 0 Тогда
				Для Каждого тмпФайл из ФайлыЛоговОтклонений Цикл 
					ТекущийФайл = тмпФайл.ПолноеИмя;
					ТекущаяТЗ = ЗначениеИзФайла(ТекущийФайл);
					Если ТекущаяТЗ <> Неопределено Тогда
						Для Каждого тмпДокумент Из ТекущаяТЗ Цикл
							ТЗDiff = тмпДокумент.TabDiff;
							Если ТЗDiff.Количество() > 0 Тогда
								Для Каждого СтрокаТЗ Из ТЗDiff Цикл
									НоваяСтрока = ТЗ.Добавить();
									ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
									НоваяСтрока.КодАгента = текАгент.Код;
								КонецЦикла;
							КонецЕсли;	
						КонецЦикла;
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;   
		КонецЦикла;
		
		Если ТЗ.Количество() = 0 Тогда
			Продолжить; 
		КонецЕсли;
		//Могут быть логи с повторяющейся информацией при повторной загрузке одних и тех же файлов.
		ТЗ.Свернуть("КодАгента, DocumentID, goodID, actualQty, recommendedQty");
		
		// Переименование колонок
		ТекКолонка = ТЗ.Колонки.Найти("DocumentID");
		ТекКолонка.Имя = "ИД";
		ТекКолонка = ТЗ.Колонки.Найти("goodID");
		ТекКолонка.Имя = "КодНоменклатуры";
		ТекКолонка = ТЗ.Колонки.Найти("actualQty");
		ТекКолонка.Имя = "Количество";
		ТекКолонка = ТЗ.Колонки.Найти("recommendedQty");
		ТекКолонка.Имя = "РекомендованноеКоличество";
		
		ТЗСТипами = Новый ТаблицаЗначений;
		ТЗСТипами.Колонки.Добавить("ИД", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
		ТЗСТипами.Колонки.Добавить("КодАгента", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));
		ТЗСТипами.Колонки.Добавить("КодНоменклатуры", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));
		ТЗСТипами.Колонки.Добавить("Количество", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));
		ТЗСТипами.Колонки.Добавить("РекомендованноеКоличество", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));
		
		Для Каждого СтрокаТЗ Из ТЗ Цикл
			НоваяСтрока = ТЗСТипами.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Табл", ТЗСТипами);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		МВТ = Новый МенеджерВременныхТаблиц;
		Запрос.МенеджерВременныхТаблиц = МВТ;
		
		Запрос.Текст = "ВЫБРАТЬ
		|	Табл.ИД,
		|	Табл.КодАгента,
		|	Табл.КодНоменклатуры,
		|	Табл.Количество,
		|	Табл.РекомендованноеКоличество
		|ПОМЕСТИТЬ Табл
		|ИЗ
		|	&Табл КАК Табл";
		
		Запрос.Выполнить();
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Табл.ИД КАК ИД,
		|	Табл.КодАгента,
		|	Табл.КодНоменклатуры,
		|	Табл.Количество,
		|	Табл.РекомендованноеКоличество,
		|	БПАГДокументыАгентовСрезПоследних.Документ,
		|	БПАГАгенты.Ссылка КАК Агент,
		|	БПАГДокументыАгентовСрезПоследних.Документ.Контрагент КАК Контрагент,
		|	БПАГНоменклатура.Номенклатура КАК Номенклатура,
		|	БПАГДокументыАгентовСрезПоследних.Документ.Подразделение КАК Подразделение
		|ИЗ
		|	Табл КАК Табл
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БПАГАгенты КАК БПАГАгенты
		|		ПО Табл.КодАгента = БПАГАгенты.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БПАГДокументыАгентов.СрезПоследних(&ТекущаяДата, ) КАК БПАГДокументыАгентовСрезПоследних
		|		ПО Табл.ИД = БПАГДокументыАгентовСрезПоследних.ИД
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БПАГНоменклатура КАК БПАГНоменклатура
		|		ПО Табл.КодНоменклатуры = БПАГНоменклатура.Код";
		
		ТЗ =  Запрос.Выполнить().Выгрузить();
		
		// Прогоняем через СКД
		СКД = ОбъектОбработка.ПолучитьМакет("СКДОтборОтчетаПоОтклонениямОтРекомендованного");
		ТЗРезультатПоЛогам = РезультатКомпоновкиВТЗ(СКД, ТЗ);
		СписокДокументов = ТЗРезультатПоЛогам.ВыгрузитьКолонку("Документ");
		
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаНачала", Период.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаКонца", КонецДня(Период.ДатаОкончания));
		Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	БПАГДокументыАгентов.Документ КАК Документ,
		               |	БПАГДокументыАгентов.Документ.Контрагент КАК Контрагент,
		               |	БПАГДокументыАгентов.Документ.Подразделение КАК Подразделение,
		               |	КпкЗаявкаЗапасы.Номенклатура КАК Номенклатура,
		               |	КпкЗаявкаЗапасы.Количество КАК Количество,
		               |	БПАГДокументыАгентов.Агент КАК Агент
		               |ИЗ
		               |	РегистрСведений.БПАГДокументыАгентов КАК БПАГДокументыАгентов
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КпкЗаявка.Запасы КАК КпкЗаявкаЗапасы
		               |		ПО БПАГДокументыАгентов.Документ = КпкЗаявкаЗапасы.Ссылка
		               |ГДЕ
		               |	БПАГДокументыАгентов.Период МЕЖДУ &ДатаНачала И &ДатаКонца
		               |	И НЕ БПАГДокументыАгентов.Документ В ИЕРАРХИИ (&СписокДокументов)
		               |	И ТИПЗНАЧЕНИЯ(БПАГДокументыАгентов.Документ) = ТИП(Документ.кпкЗаявка)";
		
		ТЗДокументыБезРекомендованного =  Запрос.Выполнить().Выгрузить();
		ТЗДокументыБезРекомендованного.Свернуть("Документ, Контрагент, Подразделение, Номенклатура, Количество, Агент");
		Для Каждого СтрокаТЗ Из ТЗДокументыБезРекомендованного Цикл
			НоваяСтрока = ТЗРезультатПоЛогам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		КонецЦикла;
		
		СКД = ОбъектОбработка.ПолучитьМакет("СКДОтборОтчетаПоОтклонениямОтРекомендованного");
		ТЗРезультат = РезультатКомпоновкиВТЗ(СКД, ТЗРезультатПоЛогам);
		
		
	КонецЦикла;	
	
	//Вывести таблицу по всем агентам из отбора
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	Макет = ОбъектОбработка.ПолучитьМакет("МакетОтчетаПоОтклонениямОтРекомендованногоКоличества");
	ТабДокумент = Новый ТабличныйДокумент;
	//Заголовок
	ОбластьЗаголовок    = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.ТекстЗаголовка = "Отчет по отклонениям в заявках от рекомендованного количества.";
	ТабДокумент.Вывести(ОбластьЗаголовок);
	//Шапка
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.ТекДата = "Период с " + Формат(Период.ДатаНачала, "ДФ=dd.MM.yyyy") + " по " + Формат(КонецДня(Период.ДатаОкончания), "ДФ=dd.MM.yyyy");
	ОбластьШапка.Параметры.Агент = ПолучитьАгентаИзНастроек();
	ТабДокумент.Вывести(ОбластьШапка);
	//Шапка таблицы
	ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьШапка);
	//Строки по товарам
	Номер = 0;
	Для Каждого тмпСтрока из ТЗРезультат Цикл
		Номер = Номер + 1;
		ОбластьДанных = Макет.ПолучитьОбласть("Строка");
		ОбластьДанных.Параметры.Номер = Номер;
		ОбластьДанных.Параметры.Документ = тмпСтрока.Документ;
		ОбластьДанных.Параметры.Подразделение = тмпСтрока.Подразделение;
		ОбластьДанных.Параметры.Контрагент = тмпСтрока.Контрагент;
		ОбластьДанных.Параметры.Номенклатура = тмпСтрока.Номенклатура;
		ОбластьДанных.Параметры.РекомендованноеКоличество = ?(тмпСтрока.РекомендованноеКоличество <> Неопределено, тмпСтрока.РекомендованноеКоличество, "Не заполнялось");
		ОбластьДанных.Параметры.Количество = ?(тмпСтрока.Количество <> Неопределено, тмпСтрока.Количество, ""); 
		ОбластьДанных.Параметры.Отклонение = ?(((тмпСтрока.РекомендованноеКоличество <> Неопределено) и (тмпСтрока.РекомендованноеКоличество >= 0)), тмпСтрока.РекомендованноеКоличество - тмпСтрока.Количество, "");
		ТабДокумент.Вывести(ОбластьДанных);
	КонецЦикла;
	
	ПолеТабличногоДокумента.Очистить();
	ПолеТабличногоДокумента.Вывести(ТабДокумент);
	
КонецПроцедуры

Функция ПолучитьАгентовСОтбором(ОтборПоАгентам)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	СхемаКомпоновкиДанных = ОбъектОбработка.ПолучитьМакет("СКДАгенты");
	
	НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	Для Каждого ЭлементОтбора Из НастройкиКомпоновкиДанных.Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Агент") Тогда
			НастройкиКомпоновкиДанных.Отбор.Элементы.Удалить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	ЭлементОтбора = НастройкиКомпоновкиДанных.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Агент"); 
	ЭлементОтбора.ВидСравнения = ОтборПоАгентам.ВидСравнения; 
	ЭлементОтбора.ПравоеЗначение = ОтборПоАгентам.ПравоеЗначение; 
	ЭлементОтбора.Использование = ОтборПоАгентам.Использование;	
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);

	ТаблицаРезультат = Новый ТаблицаЗначений;
		
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

	Возврат ТаблицаРезультат;
КонецФункции

Функция ПолучитьАгентаИзНастроек()
	
	Компоновщик.ЗагрузитьНастройки(Компоновщик.ПолучитьНастройки());
	
	Агент = Неопределено;
	Если Компоновщик.Настройки.Отбор.Элементы.Получить(0).ПравоеЗначение <> Неопределено Тогда
		Если (Компоновщик.Настройки.Отбор.Элементы.Получить(0).Использование) и (НЕ Компоновщик.Настройки.Отбор.Элементы.Получить(0).ПравоеЗначение.Пустая()) Тогда
			Агент = Компоновщик.Настройки.Отбор.Элементы.Получить(0).ПравоеЗначение;
		Иначе
			Агент = "Все";
		КонецЕсли;
	Иначе
		Агент = "Все";
	КонецЕсли;
	
	Возврат	Агент;
КонецФункции

Функция РезультатКомпоновкиВТЗ(СКД, ТЗ) Экспорт
	
	НастройкиКомпоновщика = Компоновщик.Настройки;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ИсточникДанных1", ТЗ );
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	Для Каждого тмпЭлемент Из НастройкиКомпоновщика.ПараметрыДанных.Элементы Цикл
		Если СокрЛП(тмпЭлемент.Параметр) = "НачалоПериода" Тогда
			тмпЭлемент.Значение = Период.ДатаНачала;
		ИначеЕсли СокрЛП(тмпЭлемент.Параметр) = "ОкончаниеПериода" Тогда
			тмпЭлемент.Значение = Период.ДатаОкончания;
		КонецЕсли;
	КонецЦикла;
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СКД, НастройкиКомпоновщика,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, ВнешниеНаборыДанных);

	ТаблицаРезультат = Новый ТаблицаЗначений;
		
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

    Возврат ТаблицаРезультат;
КонецФункции


КаталогОбмена = БПАГ.БПАГПолучитьНастройку("1СКаталогОбмена");
