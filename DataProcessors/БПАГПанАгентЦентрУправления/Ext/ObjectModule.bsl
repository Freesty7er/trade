Перем мВалютаРегламентированногоУчета;
Перем СпецификаПользователя;
Перем ТЗКартинки;
Перем Цвета Экспорт;
Перем Лог;
Перем АдресВнешнегоFTP;
Перем ЛогинВнешнегоFTP;
Перем ПарольВнешнегоFTP;
Перем ПроксиСервер;
Перем ВидПрикладногоРешения;

Перем НаличиеСетевыхТорговыхТочек, ВидТелефонаДоставки, ВидАдресаДоставки;
Перем КаталогКартинок, КаталогКартинокПроверен, КаталогКартинокСуществует;

Перем КэшФайловВыгрузки;
Перем ТЗЗаголовок;

Функция ПолучитьСоглашение(НаименованиеСоглашения, Партнер)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоглашенияСКлиентами.Ссылка КАК Соглашение,
	|	1 КАК Релевантность
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|ГДЕ
	|	НЕ СоглашенияСКлиентами.ПометкаУдаления
	|	И СоглашенияСКлиентами.Наименование = &Наименование
	|	И СоглашенияСКлиентами.Партнер = &Партнер
	|	И СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	|	И СоглашенияСКлиентами.Согласован
	|	И СоглашенияСКлиентами.Партнер <> &ПустойПартнер
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияСКлиентами.Ссылка,
	|	2
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|ГДЕ
	|	НЕ СоглашенияСКлиентами.ПометкаУдаления
	|	И СоглашенияСКлиентами.Наименование = &Наименование
	|	И СоглашенияСКлиентами.Партнер = &РодительПартнера
	|	И СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	|	И СоглашенияСКлиентами.Согласован
	|	И СоглашенияСКлиентами.Партнер <> &ПустойПартнер
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияСКлиентами.Ссылка,
	|	3
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|ГДЕ
	|	НЕ СоглашенияСКлиентами.ПометкаУдаления
	|	И СоглашенияСКлиентами.Наименование = &Наименование
	|	И СоглашенияСКлиентами.Партнер = &РодительРодителяПартнера
	|	И СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	|	И СоглашенияСКлиентами.Согласован
	|	И СоглашенияСКлиентами.Партнер <> &ПустойПартнер
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияСКлиентами.Ссылка,
	|	4
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|ГДЕ
	|	НЕ СоглашенияСКлиентами.ПометкаУдаления
	|	И СоглашенияСКлиентами.Наименование = &Наименование
	|	И СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	|	И СоглашенияСКлиентами.Согласован
	|	И СоглашенияСКлиентами.Партнер <> &ПустойПартнер
	|	И СоглашенияСКлиентами.СегментПартнеров В
	|			(ВЫБРАТЬ
	|				ПартнерыСегмента.Сегмент
	|			ИЗ
	|				РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	|			ГДЕ
	|				ПартнерыСегмента.Партнер = &Партнер)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияСКлиентами.Ссылка,
	|	5
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|ГДЕ
	|	НЕ СоглашенияСКлиентами.ПометкаУдаления
	|	И СоглашенияСКлиентами.Наименование = &Наименование
	|	И СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	|	И СоглашенияСКлиентами.Согласован
	|	И СоглашенияСКлиентами.Партнер <> &ПустойПартнер
	|	И СоглашенияСКлиентами.СегментПартнеров В
	|			(ВЫБРАТЬ
	|				ПартнерыСегмента.Сегмент
	|			ИЗ
	|				РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	|			ГДЕ
	|				ПартнерыСегмента.Партнер = &РодительПартнера)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияСКлиентами.Ссылка,
	|	6
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|ГДЕ
	|	НЕ СоглашенияСКлиентами.ПометкаУдаления
	|	И СоглашенияСКлиентами.Наименование = &Наименование
	|	И СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	|	И СоглашенияСКлиентами.Согласован
	|	И СоглашенияСКлиентами.Партнер <> &ПустойПартнер
	|	И СоглашенияСКлиентами.СегментПартнеров В
	|			(ВЫБРАТЬ
	|				ПартнерыСегмента.Сегмент
	|			ИЗ
	|				РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	|			ГДЕ
	|				ПартнерыСегмента.Партнер = &РодительРодителяПартнера)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияСКлиентами.Ссылка,
	|	7
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|ГДЕ
	|	НЕ СоглашенияСКлиентами.ПометкаУдаления
	|	И СоглашенияСКлиентами.Наименование = &Наименование
	|	И СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	|	И СоглашенияСКлиентами.Согласован
	|	И СоглашенияСКлиентами.Партнер = &ПустойПартнер
	|	И СоглашенияСКлиентами.СегментПартнеров В
	|			(ВЫБРАТЬ
	|				ПартнерыСегмента.Сегмент
	|			ИЗ
	|				РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	|			ГДЕ
	|				ПартнерыСегмента.Партнер = &Партнер)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияСКлиентами.Ссылка,
	|	8
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|ГДЕ
	|	НЕ СоглашенияСКлиентами.ПометкаУдаления
	|	И СоглашенияСКлиентами.Наименование = &Наименование
	|	И СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	|	И СоглашенияСКлиентами.Согласован
	|	И СоглашенияСКлиентами.Партнер = &ПустойПартнер
	|	И СоглашенияСКлиентами.СегментПартнеров В
	|			(ВЫБРАТЬ
	|				ПартнерыСегмента.Сегмент
	|			ИЗ
	|				РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	|			ГДЕ
	|				ПартнерыСегмента.Партнер = &РодительПартнера)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияСКлиентами.Ссылка,
	|	9
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|ГДЕ
	|	НЕ СоглашенияСКлиентами.ПометкаУдаления
	|	И СоглашенияСКлиентами.Наименование = &Наименование
	|	И СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	|	И СоглашенияСКлиентами.Согласован
	|	И СоглашенияСКлиентами.Партнер = &ПустойПартнер
	|	И СоглашенияСКлиентами.СегментПартнеров В
	|			(ВЫБРАТЬ
	|				ПартнерыСегмента.Сегмент
	|			ИЗ
	|				РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	|			ГДЕ
	|				ПартнерыСегмента.Партнер = &РодительРодителяПартнера)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияСКлиентами.Ссылка,
	|	10
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|ГДЕ
	|	НЕ СоглашенияСКлиентами.ПометкаУдаления
	|	И СоглашенияСКлиентами.Наименование = &Наименование
	|	И СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	|	И СоглашенияСКлиентами.Согласован
	|	И СоглашенияСКлиентами.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
	|			И СоглашенияСКлиентами.Партнер = &ПустойПартнер
	|
	|УПОРЯДОЧИТЬ ПО
	|	Релевантность";
	
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыСоглашенийСКлиентами.Действует);
	Запрос.УстановитьПараметр("Наименование", НаименованиеСоглашения);
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("РодительПартнера", Партнер.Родитель);
	Запрос.УстановитьПараметр("РодительРодителяПартнера", Партнер.Родитель.Родитель);
	Запрос.УстановитьПараметр("ПустойПартнер", Справочники.Партнеры.ПустаяСсылка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Соглашение;
	Иначе
		Возврат Справочники.СоглашенияСКлиентами.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСоглашениеСПоставщиком(НаименованиеСоглашения, Партнер)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоглашенияСПоставщиками.Ссылка КАК Соглашение,
	|	1 КАК Релевантность
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
	|ГДЕ
	|	НЕ СоглашенияСПоставщиками.ПометкаУдаления
	|	И СоглашенияСПоставщиками.Наименование = &Наименование
	|	И СоглашенияСПоставщиками.Партнер = &Партнер
	|	И СоглашенияСПоставщиками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.Действует)
	|	И СоглашенияСПоставщиками.Согласован
	|	И СоглашенияСПоставщиками.Партнер <> &ПустойПартнер
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияСПоставщиками.Ссылка,
	|	2
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
	|ГДЕ
	|	НЕ СоглашенияСПоставщиками.ПометкаУдаления
	|	И СоглашенияСПоставщиками.Наименование = &Наименование
	|	И СоглашенияСПоставщиками.Партнер = &РодительПартнера
	|	И СоглашенияСПоставщиками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.Действует)
	|	И СоглашенияСПоставщиками.Согласован
	|	И СоглашенияСПоставщиками.Партнер <> &ПустойПартнер
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияСПоставщиками.Ссылка,
	|	3
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
	|ГДЕ
	|	НЕ СоглашенияСПоставщиками.ПометкаУдаления
	|	И СоглашенияСПоставщиками.Наименование = &Наименование
	|	И СоглашенияСПоставщиками.Партнер = &РодительРодителяПартнера
	|	И СоглашенияСПоставщиками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.Действует)
	|	И СоглашенияСПоставщиками.Согласован
	|	И СоглашенияСПоставщиками.Партнер <> &ПустойПартнер
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияСПоставщиками.Ссылка,
	|	4
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
	|ГДЕ
	|	НЕ СоглашенияСПоставщиками.ПометкаУдаления
	|	И СоглашенияСПоставщиками.Наименование = &Наименование
	|	И СоглашенияСПоставщиками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.Действует)
	|	И СоглашенияСПоставщиками.Согласован
	|	И СоглашенияСПоставщиками.Партнер <> &ПустойПартнер
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияСПоставщиками.Ссылка,
	|	5
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
	|ГДЕ
	|	НЕ СоглашенияСПоставщиками.ПометкаУдаления
	|	И СоглашенияСПоставщиками.Наименование = &Наименование
	|	И СоглашенияСПоставщиками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.Действует)
	|	И СоглашенияСПоставщиками.Согласован
	|	И СоглашенияСПоставщиками.Партнер <> &ПустойПартнер
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияСПоставщиками.Ссылка,
	|	6
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
	|ГДЕ
	|	НЕ СоглашенияСПоставщиками.ПометкаУдаления
	|	И СоглашенияСПоставщиками.Наименование = &Наименование
	|	И СоглашенияСПоставщиками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.Действует)
	|	И СоглашенияСПоставщиками.Согласован
	|	И СоглашенияСПоставщиками.Партнер <> &ПустойПартнер
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияСПоставщиками.Ссылка,
	|	7
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
	|ГДЕ
	|	НЕ СоглашенияСПоставщиками.ПометкаУдаления
	|	И СоглашенияСПоставщиками.Наименование = &Наименование
	|	И СоглашенияСПоставщиками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.Действует)
	|	И СоглашенияСПоставщиками.Согласован
	|	И СоглашенияСПоставщиками.Партнер = &ПустойПартнер
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияСПоставщиками.Ссылка,
	|	8
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
	|ГДЕ
	|	НЕ СоглашенияСПоставщиками.ПометкаУдаления
	|	И СоглашенияСПоставщиками.Наименование = &Наименование
	|	И СоглашенияСПоставщиками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.Действует)
	|	И СоглашенияСПоставщиками.Согласован
	|	И СоглашенияСПоставщиками.Партнер = &ПустойПартнер
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияСПоставщиками.Ссылка,
	|	9
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
	|ГДЕ
	|	НЕ СоглашенияСПоставщиками.ПометкаУдаления
	|	И СоглашенияСПоставщиками.Наименование = &Наименование
	|	И СоглашенияСПоставщиками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.Действует)
	|	И СоглашенияСПоставщиками.Согласован
	|	И СоглашенияСПоставщиками.Партнер = &ПустойПартнер
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияСПоставщиками.Ссылка,
	|	10
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
	|ГДЕ
	|	НЕ СоглашенияСПоставщиками.ПометкаУдаления
	|	И СоглашенияСПоставщиками.Наименование = &Наименование
	|	И СоглашенияСПоставщиками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.Действует)
	|	И СоглашенияСПоставщиками.Согласован
	|	И СоглашенияСПоставщиками.Партнер = &ПустойПартнер
	|
	|УПОРЯДОЧИТЬ ПО
	|	Релевантность";
	
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыСоглашенийСПоставщиками.Действует);
	Запрос.УстановитьПараметр("Наименование", НаименованиеСоглашения);
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("РодительПартнера", Партнер.Родитель);
	Запрос.УстановитьПараметр("РодительРодителяПартнера", Партнер.Родитель.Родитель);
	Запрос.УстановитьПараметр("ПустойПартнер", Справочники.Партнеры.ПустаяСсылка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Соглашение;
	Иначе
		Возврат Справочники.СоглашенияСПоставщиками.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОстатокПоКассе(Агент)
	
	Касса = ПолучитьКассу(Агент);
	
	Запрос = Новый Запрос();
	Остаток = 0;
	Организация = НастройкаИзКэша("defaultCompanyID", Агент).Организация;
	
	Если ВидПрикладногоРешения = "УТ11" Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДенежныеСредстваНаличныеОстатки.СуммаОстаток
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваНаличные.Остатки(
		|			,
		|			Организация = &Организация
		|				И Касса = &Касса) КАК ДенежныеСредстваНаличныеОстатки";
		
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДенежныеСредстваОстатки.СуммаОстаток
		|ИЗ
		|	РегистрНакопления.ДенежныеСредства.Остатки(
		|			,
		|			Организация = &Организация
		|				И БанковскийСчетКасса = &Касса) КАК ДенежныеСредстваОстатки";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Касса", Касса);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Остаток = Выборка.СуммаОстаток;	
	КонецЕсли;
	
	Возврат Остаток;
КонецФункции

Функция ПолучитьКассу(Агент, БПАГОрганизация = Неопределено, СтрокаОшибок = Неопределено, ЕстьОшибки = Неопределено)
	
	Если БПАГОрганизация = Неопределено Тогда
		БПАГОрганизация = НастройкаИзКэша("defaultCompanyID", Агент);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БПАГАгентыКассы.Касса
	|ИЗ
	|	Справочник.БПАГАгенты.Кассы КАК БПАГАгентыКассы
	|ГДЕ
	|	(НЕ БПАГАгентыКассы.Ссылка.ПометкаУдаления)
	|	И БПАГАгентыКассы.Организация = &Организация
	|	И БПАГАгентыКассы.Ссылка = &Агент";
	Запрос.УстановитьПараметр("Агент", Агент);
	Запрос.УстановитьПараметр("Организация", БПАГОрганизация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Касса = Выборка.Касса;
	Иначе
		Касса = НастройкаИзКэша("1СОсновнаяКасса", Агент);
		Если Касса.Пустая() Тогда
			ЕстьОшибки = Истина;
			Если СтрокаОшибок <> Неопределено Тогда
				СтрокаОшибок = СтрокаОшибок + "Касса для организации " + БПАГОрганизация + " у агента " + Агент + " не установлена! " + Символы.ПС;
			КонецЕсли;
			Касса = Справочники.Кассы.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Касса;
	
КонецФункции

Функция ПолучитьХарактеристику(Номенклатура, НаименованиеХарактеристики)
	
	//Ищем характеристику номенклатуры
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Владелец = &Владелец
		|	И ХарактеристикиНоменклатуры.Наименование = &Наименование";
		
	Запрос.УстановитьПараметр("Владелец", Номенклатура);
	Запрос.УстановитьПараметр("Наименование", НаименованиеХарактеристики);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	//Ищем характеристику вида номенклатуры
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Владелец = &Владелец
		|	И ХарактеристикиНоменклатуры.Наименование = &Наименование";
		
	Запрос.УстановитьПараметр("Владелец", Номенклатура.ВидНоменклатуры);
	Запрос.УстановитьПараметр("Наименование", НаименованиеХарактеристики);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
		
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьЕдиницуИзмерения(тмпСтрока, Номенклатура, ЕстьОшибки, СтрокаОшибок)
	
	ЕдиницаИзмерения = Неопределено;
	
	тмпНаименование = тмпСтрока.unit;
	тмпКоэффициент = Число(тмпСтрока.coeff);
	
	Если ВидПрикладногоРешения = "УТ11" Тогда
		
		Если Номенклатура.ИспользоватьУпаковки Тогда
			
			Если Номенклатура.НаборУпаковок.Пустая() Тогда
				ВыборкаПоЕдиницам = Справочники.УпаковкиНоменклатуры.Выбрать(, Номенклатура);
			Иначе
				Если Номенклатура.НаборУпаковок.Предопределенный Тогда
					ВыборкаПоЕдиницам = Справочники.УпаковкиНоменклатуры.Выбрать(, Номенклатура);
				Иначе
					ВыборкаПоЕдиницам = Справочники.УпаковкиНоменклатуры.Выбрать(, Номенклатура.НаборУпаковок);
				КонецЕсли;
			КонецЕсли;
			
			НайденаНеудаленная = Ложь;
			Пока ВыборкаПоЕдиницам.Следующий() Цикл
				Если (ВыборкаПоЕдиницам.ЕдиницаИзмерения.Наименование = тмпНаименование) И (НЕ ВыборкаПоЕдиницам.ПометкаУдаления) И (ВыборкаПоЕдиницам.Коэффициент = тмпКоэффициент) Тогда
					ЕдиницаИзмерения = ВыборкаПоЕдиницам.Ссылка;
					НайденаНеудаленная = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Попытка
				Если Не НайденаНеудаленная Тогда
					Если Не Номенклатура.НаборУпаковок.Пустая() Тогда
						Если Номенклатура.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры Тогда
							
							Если (Номенклатура.ЕдиницаИзмерения.Наименование = тмпНаименование) И (тмпКоэффициент = 1) Тогда
								ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;
								НайденаНеудаленная = Истина;
							КонецЕсли;
							
						Иначе
						
							Если (Номенклатура.НаборУпаковок.ЕдиницаИзмерения.Наименование = тмпНаименование) И (тмпКоэффициент = 1) Тогда
								ЕдиницаИзмерения = Номенклатура.НаборУпаковок.ЕдиницаИзмерения;
								НайденаНеудаленная = Истина;
							КонецЕсли;
							
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			Если Не НайденаНеудаленная Тогда
				ЕстьОшибки = Истина;
				СтрокаОшибок = СтрокаОшибок + "Единица измерения " + тмпНаименование + " у товара " + Номенклатура + " не найдена! " + Символы.ПС;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
		
		ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(тмпНаименование, Истина, , Номенклатура);
		Если ЕдиницаИзмерения.Пустая() Тогда
			ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;
			тмпКоэффициент = 1;
		ИначеЕсли ЕдиницаИзмерения.ПометкаУдаления Тогда
			ВыборкаПоЕдиницам = Справочники.ЕдиницыИзмерения.Выбрать(, Номенклатура);
			НайденаНеудаленная = Ложь;
			Пока ВыборкаПоЕдиницам.Следующий() Цикл
				Если (ВыборкаПоЕдиницам.Наименование = тмпНаименование) И (НЕ ВыборкаПоЕдиницам.ПометкаУдаления) И (ВыборкаПоЕдиницам.Коэффициент = тмпКоэффициент) Тогда
					ЕдиницаИзмерения = ВыборкаПоЕдиницам.Ссылка;
					НайденаНеудаленная = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ НайденаНеудаленная Тогда
				ЕстьОшибки = Истина;
				СтрокаОшибок = СтрокаОшибок + "Единица измерения " + тмпНаименование + " у товара " + Номенклатура + " не найдена! " + Символы.ПС;
			Иначе	
				Если ЕдиницаИзмерения.Коэффициент <> тмпКоэффициент Тогда
					ЕстьОшибки = Истина;
					СтрокаОшибок = СтрокаОшибок + "Единица измерения " + тмпНаименование + " у товара " + Номенклатура + " имеет неверный коэффициент, отличающийся от коэффициента на устройстве! " + Символы.ПС;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(тмпНаименование, Истина, , Номенклатура);
		Если ЕдиницаИзмерения.Пустая() Тогда
			ЕстьОшибки = Истина;
			СтрокаОшибок = СтрокаОшибок + "Единица измерения " + тмпНаименование + " у товара " + Номенклатура + " не найдена! " + Символы.ПС;
		ИначеЕсли ЕдиницаИзмерения.ПометкаУдаления Тогда
			ВыборкаПоЕдиницам = Справочники.ЕдиницыИзмерения.Выбрать(, Номенклатура);
			НайденаНеудаленная = Ложь;
			Пока ВыборкаПоЕдиницам.Следующий() Цикл
				Если (ВыборкаПоЕдиницам.Наименование = тмпНаименование) И (НЕ ВыборкаПоЕдиницам.ПометкаУдаления) И (ВыборкаПоЕдиницам.Коэффициент = тмпКоэффициент) Тогда
					ЕдиницаИзмерения = ВыборкаПоЕдиницам.Ссылка;
					НайденаНеудаленная = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ НайденаНеудаленная Тогда
				ЕстьОшибки = Истина;
				СтрокаОшибок = СтрокаОшибок + "Единица измерения " + тмпНаименование + " у товара " + Номенклатура + " не найдена! " + Символы.ПС;
			КонецЕсли;
		КонецЕсли;
		
		Если ЕдиницаИзмерения.Коэффициент <> тмпКоэффициент Тогда
			ЕстьОшибки = Истина;
			СтрокаОшибок = СтрокаОшибок + "Единица измерения " + тмпНаименование + " у товара " + Номенклатура + " имеет неверный коэффициент, отличающийся от коэффициента на устройстве! " + Символы.ПС;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕдиницаИзмерения;
	
КонецФункции

Функция ПолучитьКомментарийКИ(Контрагент, АдресДоставки)
	Результат = "";
	КомментарийАдреса = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	КонтактнаяИнформация.Комментарий
	               |ИЗ
	               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Объект = &Объект
	               |	И КонтактнаяИнформация.Вид = &Вид
	               |	И КонтактнаяИнформация.Представление ПОДОБНО &Представление";
	
	Запрос.УстановитьПараметр("Объект", Контрагент);
	Запрос.УстановитьПараметр("Вид", ВидАдресаДоставки);
	Запрос.УстановитьПараметр("Представление", АдресДоставки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Комментарий;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Процедура ОбновитьСтруктуруДанныхСистемы()
	
	БылиОшибки = Ложь;
	РучноеУправлениеСоставомТорговыхТочек = Ложь;
	ВнутреннийИдентификаторВерсии = БПАГ.БПАГПолучитьНастройку("internalVersionID"); //если нет кэша, то использовать БПАГ.получитьНастройку
	
	Попытка
		Если ВнутреннийИдентификаторВерсии < 0303020 Тогда
			//Настройка showGetCashDialog
			НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
			текНастройка = Справочники.БПАГВидыНастроекАгентов.НайтиПоКоду("showGetCashDialog");
			НаборЗаписей.Отбор.ВидНастройки.Установить(текНастройка);
			НаборЗаписей.Прочитать();
			БылиИзменения = Ложь;
			Для Каждого тмпЗапись Из НаборЗаписей Цикл
				Если ТипЗнч(тмпЗапись.Значение) = Тип("Булево") Тогда
					тмпЗапись.Значение = ?(тмпЗапись.Значение, 1, 0);
					БылиИзменения = Истина;
				КонецЕсли;		
			КонецЦикла;
			
			Если БылиИзменения Тогда
				НаборЗаписей.Записать();
			КонецЕсли;
			
			//Настройка highlightDebtors
			НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
			текНастройка = Справочники.БПАГВидыНастроекАгентов.НайтиПоКоду("highlightDebtors");
			НаборЗаписей.Отбор.ВидНастройки.Установить(текНастройка);
			НаборЗаписей.Прочитать();
			БылиИзменения = Ложь;
			Для Каждого тмпЗапись Из НаборЗаписей Цикл
				Если ТипЗнч(тмпЗапись.Значение) = Тип("Булево") Тогда
					тмпЗапись.Значение = ?(тмпЗапись.Значение, 1, 0);
					БылиИзменения = Истина;
				КонецЕсли;		
			КонецЦикла;
			
			Если БылиИзменения Тогда
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли;
		
		Если ВнутреннийИдентификаторВерсии < 0303020 Тогда
			//Проверить наличие более одной ТТ и в зависимости от этого поставить или сбросить настройку "Ручное управление составом ТТ".
			//Если у нас у контрагента (любого) больше 1 ТТ, то значит вводили ТТ руками и нужно установить настройку в значение Истина.
			//В УТ11, только 1 адрес у контрагента и может быть только 1 ТТ.
			//1СРучноеУправлениеСоставомТТ
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	БПАГТорговыеТочки.Ссылка КАК ТорговаяТочка,
			|	БПАГТорговыеТочки.Владелец КАК Владелец,
			|	БПАГТорговыеТочки.Наименование КАК Наименование,
			|	1 КАК КоличествоТТ
			|ИЗ
			|	Справочник.БПАГТорговыеТочки КАК БПАГТорговыеТочки
			|ГДЕ
			|	НЕ БПАГТорговыеТочки.ПометкаУдаления";
			
			Попытка 
				ТЗ = Запрос.Выполнить().Выгрузить();
				ТЗ.Свернуть("Владелец", "КоличествоТТ");
				Для Каждого СтрТТ из ТЗ Цикл
					Если СтрТТ.КоличествоТТ > 1 Тогда
						РучноеУправлениеСоставомТорговыхТочек = Истина;
						Прервать;
					КонецЕсли;	
				КонецЦикла;
			Исключение
				БылиОшибки = Истина;
			КонецПопытки;
		КонецЕсли;
		
		Если ВнутреннийИдентификаторВерсии < 0303020 Тогда
			Если Не БылиОшибки Тогда
				//Установить internalVersionID равной ВнутреннийИдентификаторВерсии
				//Записать настройку значением 0303020
				НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
				Настройка_internalVersionID = Справочники.БПАГВидыНастроекАгентов.НайтиПоКоду("internalVersionID");
				Если НЕ Настройка_internalVersionID.Пустая() Тогда
					НаборЗаписей.Отбор.Агент.Установить(Справочники.БПАГАгенты.ПустаяСсылка());
					НаборЗаписей.Отбор.Профиль.Установить(Справочники.БПАГПрофилиАгентов.ПустаяСсылка());
					НаборЗаписей.Отбор.ВидНастройки.Установить(Настройка_internalVersionID);
					НаборЗаписей.Прочитать();
					НаборЗаписей.Очистить();
					НоваяЗапись = НаборЗаписей.Добавить();
					НоваяЗапись.Агент = Справочники.БПАГАгенты.ПустаяСсылка();
					НоваяЗапись.Профиль = Справочники.БПАГПрофилиАгентов.ПустаяСсылка();
					НоваяЗапись.ВидНастройки = Настройка_internalVersionID;
					НоваяЗапись.Значение = 0303020;
					НаборЗаписей.Записать();
				КонецЕсли;
				
				Если РучноеУправлениеСоставомТорговыхТочек Тогда
					//Установить настройку 1СРучноеУправлениеСоставомТТ
					НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
					Настройка_1СРучноеУправлениеСоставомТТ = Справочники.БПАГВидыНастроекАгентов.НайтиПоКоду("1СРучноеУправлениеСоставомТТ");
					Если НЕ Настройка_1СРучноеУправлениеСоставомТТ.Пустая() Тогда
						НаборЗаписей.Отбор.Агент.Установить(Справочники.БПАГАгенты.ПустаяСсылка());
						НаборЗаписей.Отбор.Профиль.Установить(Справочники.БПАГПрофилиАгентов.ПустаяСсылка());
						НаборЗаписей.Отбор.ВидНастройки.Установить(Настройка_1СРучноеУправлениеСоставомТТ);
						НаборЗаписей.Прочитать();
						НаборЗаписей.Очистить();
						НоваяЗапись = НаборЗаписей.Добавить();
						НоваяЗапись.Агент = Справочники.БПАГАгенты.ПустаяСсылка();
						НоваяЗапись.Профиль = Справочники.БПАГПрофилиАгентов.ПустаяСсылка();
						НоваяЗапись.ВидНастройки = Настройка_1СРучноеУправлениеСоставомТТ;
						НоваяЗапись.Значение = Истина;
						НаборЗаписей.Записать();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ВнутреннийИдентификаторВерсии < 0303020 Тогда
			//Перенумерация свойств документов для УТ11
			Если ВидПрикладногоРешения = "УТ11" Тогда
				НаборЗаписей = РегистрыСведений.БПАГКатегорииДокументов.СоздатьНаборЗаписей();
				НаборЗаписей.Прочитать();
				Нумератор = 1;
				Для Каждого тмпЗапись Из НаборЗаписей Цикл
					тмпЗапись.Код = Нумератор;     
					Нумератор = Нумератор +1;
				КонецЦикла;
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли;
		Если ВнутреннийИдентификаторВерсии < 0303020 Тогда
			//Заполнить предопределенные идентификаторы
			Объ = Справочники.БПАГПредопределенныеРеквизитыКонтрагентов.СоздатьЭлемент();
			Объ.Наименование = "Сокращенный адрес торговой точки";
			Объ.Реквизит = "address";
			Объ.Порядок = 1;
			Объ.Записать();
			Объ = Справочники.БПАГПредопределенныеРеквизитыКонтрагентов.СоздатьЭлемент();
			Объ.Наименование = "Контактное лицо торговой точки";
			Объ.Реквизит = "contactPerson";
			Объ.Порядок = 2;
			Объ.Записать();
			Объ = Справочники.БПАГПредопределенныеРеквизитыКонтрагентов.СоздатьЭлемент();
			Объ.Наименование = "Телефон торговой точки";
			Объ.Реквизит = "phone";
			Объ.Порядок = 3;
			Объ.Записать();
			Объ = Справочники.БПАГПредопределенныеРеквизитыКонтрагентов.СоздатьЭлемент();
			Объ.Наименование = "Адрес торговой точки";
			Объ.Реквизит = "fullAddress";
			Объ.Порядок = 4;
			Объ.Записать();
			Объ = Справочники.БПАГПредопределенныеРеквизитыКонтрагентов.СоздатьЭлемент();
			Объ.Наименование = "Полное наименование торговой точки";
			Объ.Реквизит = "fullName";
			Объ.Порядок = 5;
			Объ.Записать();
			Объ = Справочники.БПАГПредопределенныеРеквизитыКонтрагентов.СоздатьЭлемент();
			Объ.Наименование = "Юридический адрес контрагента торговой точки";
			Объ.Реквизит = "legalAddress";
			Объ.Порядок = 6;
			Объ.Записать();
			Объ = Справочники.БПАГПредопределенныеРеквизитыКонтрагентов.СоздатьЭлемент();
			Объ.Наименование = "ИНН/КПП контрагента торговой точки";
			Объ.Реквизит = "INN/KPP";
			Объ.Порядок = 7;
			Объ.Записать();
			
			Если СпецификаПользователя = "SD" Тогда
				Объ = Справочники.БПАГПредопределенныеРеквизитыКонтрагентов.СоздатьЭлемент();
				Объ.Наименование = "SKU";
				Объ.Реквизит = "sku";
				Объ.Порядок = 8;
				Объ.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
	КонецПопытки;
КонецПроцедуры

Процедура ИнициализироватьКэшФайловВыгрузки()
	КэшФайловВыгрузки = Новый ТаблицаЗначений;
	КэшФайловВыгрузки.Колонки.Добавить("ХэшПоиска");
	КэшФайловВыгрузки.Колонки.Добавить("ИмяТаблицы");
	КэшФайловВыгрузки.Колонки.Добавить("ИмяФайла");
КонецПроцедуры

Функция ПолучитьГотовыеФайлыВыгрузкиИзКэша(ВыбАгент, КлючПоиска, СписокТаблицВыгрузки)
	
	Возврат Ложь;
	
	Для i = 1 По СписокТаблицВыгрузки.Количество() Цикл
		ТекущаяТаблицаВыгрузки = СокрЛП(СписокТаблицВыгрузки[i - 1]);
		Отбор = Новый Структура;
		Отбор.Вставить("ХэшПоиска", КлючПоиска);
		Отбор.Вставить("ИмяТаблицы", ТекущаяТаблицаВыгрузки);
		НайденныеСуществующиеНастройки = КэшФайловВыгрузки.НайтиСтроки(Отбор);
		Если НайденныеСуществующиеНастройки.Количество() = 0 Тогда
			Возврат Ложь;
		Иначе
			ИмяИсходногоФайла = НайденныеСуществующиеНастройки[0].ИмяФайла;
			ИмяФайлаПриемника = КаталогОбмена + СокрЛП(ВыбАгент.Код) + "\" + ТекущаяТаблицаВыгрузки + ".plist";
			КопироватьФайл(ИмяИсходногоФайла, ИмяФайлаПриемника);
			ОтладочноеСообщение("Агент " + ВыбАгент.Код + ": таблица " + ТекущаяТаблицаВыгрузки + " выгружена из кэша.");
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	СтруктураДанные.Вставить("ЭтоЗапас", СтруктураДанные.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас);
	
	Если СтруктураДанные.Свойство("НалогообложениеНДС") 
		И НЕ СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Если СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			Выполнить("СтруктураДанные.Вставить(""СтавкаНДС"", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());");
		Иначе
			Выполнить("СтруктураДанные.Вставить(""СтавкаНДС"", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());");
		КонецЕсли;	
																
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.СтавкаНДС) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", СтруктураДанные.Номенклатура.СтавкаНДС);
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", СтруктураДанные.Организация.СтавкаНДСПоУмолчанию);
	КонецЕсли;	
		
	Если СтруктураДанные.Свойство("ВидЦен") Тогда
		Цена = 0;
		Выполнить("Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);");
		СтруктураДанные.Вставить("Цена", Цена);
	Иначе
		СтруктураДанные.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ВидСкидкиНаценки") 
		И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки) Тогда
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки.Процент);
	Иначе	
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", 0);
	КонецЕсли;
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

Функция БлижайшийРабочийДень(тмпДата, Организация = Неопределено) Экспорт
	Перем РабочиеДаты;
	
	Если НастройкаИзКэша("1СПереноситьДатуДоставкиНаРабочийДень") Тогда
		
		ВидПрикладногоРешения = БПАГ.ПолучитьВидПрикладногоРешения();	
		
		Если ВидПрикладногоРешения = "УТ11" Тогда
			
			ВыбранныйКалендарь = НастройкаИзКэша("1СКалендарьДляОпределенияДатыДоставки");
			Если ВыбранныйКалендарь.Пустая() Тогда
				ВыбранныйКалендарь = Константы.ОсновнойКалендарьПредприятия.Получить();
			КонецЕсли;
			
			НачальныеДаты = Новый Массив;
			НачальныеДаты.Добавить(НачалоДня(тмпДата));
			ПолучатьПредшествующие = Ложь;
			ВызыватьИсключение = Ложь;
			
			Выполнить("РабочиеДаты = КалендарныеГрафики.ПолучитьДатыРабочихДней(ВыбранныйКалендарь, НачальныеДаты, ПолучатьПредшествующие, ВызыватьИсключение);");
			
			Попытка
				СледующаяРабочаяДата = РабочиеДаты.Получить(НачалоДня(тмпДата));
				
				Если СледующаяРабочаяДата = Неопределено Тогда
					Возврат тмпДата;
				Иначе
					Возврат СледующаяРабочаяДата;
				КонецЕсли;
			Исключение
				Возврат тмпДата;
			КонецПопытки;
			
		ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
			
			ВыбранныйКалендарь = НастройкаИзКэша("1СКалендарьДляОпределенияДатыДоставки");
			Если ВыбранныйКалендарь.Пустая() Тогда
				Если Организация <> Неопределено Тогда
					ВыбранныйКалендарь = Организация.ПроизводственныйКалендарь;
				КонецЕсли;
			КонецЕсли;
			
			НачальныеДаты = Новый Массив;
			НачальныеДаты.Добавить(НачалоДня(тмпДата));
			ПолучатьПредшествующие = Ложь;
			ВызыватьИсключение = Ложь;
			
			Выполнить("РабочиеДаты = КалендарныеГрафики.ПолучитьДатыРабочихДней(ВыбранныйКалендарь, НачальныеДаты, ПолучатьПредшествующие, ВызыватьИсключение);");
			
			Попытка
				СледующаяРабочаяДата = РабочиеДаты.Получить(НачалоДня(тмпДата));
				
				Если СледующаяРабочаяДата = Неопределено Тогда
					Возврат тмпДата;
				Иначе
					Возврат СледующаяРабочаяДата;
				КонецЕсли;
			Исключение
				Возврат тмпДата;
			КонецПопытки;
			
		Иначе
			//NIY Доработать для УТ10
			Возврат тмпДата;
		КонецЕсли;
		
	Иначе
		Возврат тмпДата;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьНастройкиДокументов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БПАГВидыДокументов.Ссылка
	|ИЗ
	|	Перечисление.БПАГВидыДокументов КАК БПАГВидыДокументов";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Отбор = Новый Структура("ВидДокумента", Выборка.Ссылка);
		Если РегистрыСведений.БПАГНастройкиДокументов.СрезПоследних(, Отбор).Количество() = 0 Тогда
			//Произведем первоначальное заполнение
			НаборЗаписей = РегистрыСведений.БПАГНастройкиДокументов.СоздатьНаборЗаписей();
			НаборЗаписей.Прочитать();
			
			Запись = НаборЗаписей.Добавить();
			Запись.Период = Дата(2001, 1, 1);
			Запись.ВидДокумента = Выборка.Ссылка;
			Запись.ПерезаписыватьНепроведенные = Истина;
			Запись.Перепроводить = Истина;
			Запись.ОтражатьВУУ = Истина;
			
			НаборЗаписей.Записать();
			
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Функция ПолучитьТЗНастройкиДокументов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БПАГНастройкиДокументовСрезПоследних.ВидДокумента,
	|	БПАГНастройкиДокументовСрезПоследних.СрокХранения
	|ИЗ
	|	РегистрСведений.БПАГНастройкиДокументов.СрезПоследних(&МоментВремени, ) КАК БПАГНастройкиДокументовСрезПоследних
	|ГДЕ
	|	БПАГНастройкиДокументовСрезПоследних.Агент = ЗНАЧЕНИЕ(Справочник.БПАГАгенты.ПустаяСсылка)
	|	И БПАГНастройкиДокументовСрезПоследних.Профиль = ЗНАЧЕНИЕ(Справочник.БПАГПрофилиАгентов.ПустаяСсылка)
	|	И БПАГНастройкиДокументовСрезПоследних.ВидДокумента <> &ВидДокументаРеализацияПоЗаявке
	|			И БПАГНастройкиДокументовСрезПоследних.ВидДокумента <> &ВидДокументаОплатаПлатежнойКартой";
	
	Запрос.УстановитьПараметр("МоментВремени", ТекущаяДата());
	Запрос.УстановитьПараметр("ВидДокументаРеализацияПоЗаявке", Перечисления.БПАГВидыДокументов.РеализацияПоЗаявке);
	Запрос.УстановитьПараметр("ВидДокументаОплатаПлатежнойКартой", Перечисления.БПАГВидыДокументов.ОплатаПлатежнойКартой); //ПАКЛ пл. карты
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	ТЗ.Колонки.Добавить("ИдентификаторНастройки");
	
	Для Каждого тмпСтрока Из ТЗ Цикл
		Попытка
			Если тмпСтрока.ВидДокумента = Перечисления.БПАГВидыДокументов["Заявка"] Тогда
				тмпСтрока.ИдентификаторНастройки = "orderAutodeletePeriod";
			ИначеЕсли тмпСтрока.ВидДокумента = Перечисления.БПАГВидыДокументов["Реализация"] Тогда
				тмпСтрока.ИдентификаторНастройки = "saleAutodeletePeriod";
			ИначеЕсли тмпСтрока.ВидДокумента = Перечисления.БПАГВидыДокументов["ПКО"] Тогда
				тмпСтрока.ИдентификаторНастройки = "cashInAutodeletePeriod";
			ИначеЕсли тмпСтрока.ВидДокумента = Перечисления.БПАГВидыДокументов["РКО"] Тогда
				тмпСтрока.ИдентификаторНастройки = "cashOutAutodeletePeriod";
			ИначеЕсли тмпСтрока.ВидДокумента = Перечисления.БПАГВидыДокументов["ЗаказНаСклад"] Тогда
				тмпСтрока.ИдентификаторНастройки = "depotOrderAutodeletePeriod";
			ИначеЕсли тмпСтрока.ВидДокумента = Перечисления.БПАГВидыДокументов["ВозвратОтПокупателя"] Тогда
				тмпСтрока.ИдентификаторНастройки = "returnInAutodeletePeriod";
			ИначеЕсли тмпСтрока.ВидДокумента = Перечисления.БПАГВидыДокументов["ВозвратПоставщику"] Тогда
				тмпСтрока.ИдентификаторНастройки = "returnOutAutodeletePeriod";
			ИначеЕсли тмпСтрока.ВидДокумента = Перечисления.БПАГВидыДокументов["Анкета"] Тогда
				тмпСтрока.ИдентификаторНастройки = "questionnaireAutodeletePeriod";
			ИначеЕсли тмпСтрока.ВидДокумента = Перечисления.БПАГВидыДокументов["Поступление"] Тогда
				тмпСтрока.ИдентификаторНастройки = "receiptAutodeletePeriod";
			ИначеЕсли тмпСтрока.ВидДокумента = Перечисления.БПАГВидыДокументов["Перемещение"] Тогда
				тмпСтрока.ИдентификаторНастройки = "transferAutodeletePeriod";
			ИначеЕсли тмпСтрока.ВидДокумента = Перечисления.БПАГВидыДокументов["Мерчандайзинг"] Тогда
				тмпСтрока.ИдентификаторНастройки = "merchandisingAutodeletePeriod";
			КонецЕсли;
		Исключение
			тмпСтрока.ИдентификаторНастройки = "unknownDocumentTypeAutodeletePeriod";
		КонецПопытки;
	КонецЦикла;
	
	Возврат ТЗ;
КонецФункции

Функция ПолучитьТЗНастроекИзМакета() Экспорт
	
	ВидПрикладногоРешения = БПАГ.ПолучитьВидПрикладногоРешения();
	СпецификаПользователя = БПАГ.ПолучитьСпецификуПользователя();
	
	Если СпецификаПользователя = "SD" Тогда
		МакетВидовНастроек = ПолучитьМакет("ВидыНастроекАгентовSD");
	ИначеЕсли ВидПрикладногоРешения = "УТ11" Тогда
		МакетВидовНастроек = ПолучитьМакет("ВидыНастроекАгентов11");
	ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
		МакетВидовНастроек = ПолучитьМакет("ВидыНастроекАгентовУНФ");
	Иначе
		МакетВидовНастроек = ПолучитьМакет("ВидыНастроекАгентов");
	КонецЕсли;
	МакетВидовНастроек = ПолучитьМакет("ВидыНастроекАгентовSD");
	ТЗ = Новый ТаблицаЗначений();
	
	текГруппа = "";
	Для Стр = 1 По МакетВидовНастроек.ВысотаТаблицы Цикл
		Если Стр > 1 Тогда
			ТекСтр = ТЗ.Добавить();
		КонецЕсли;
		
		ПустаяСтрока = Истина;
		
		Для Кол = 1 По МакетВидовНастроек.ШиринаТаблицы Цикл
			Яч = МакетВидовНастроек.Область(Стр, Кол);
			Если Яч.СодержитЗначение Тогда
				Зн = Яч.Значение;
			Иначе
				Зн = Яч.Текст;
			КонецЕсли;
			
			Если Стр = 1 Тогда
				ТЗ.Колонки.Добавить(Зн);
			Иначе
				Если Кол = 1 Тогда
					Если СокрЛП(Зн) = "" Тогда
						Зн = текГруппа;
					Иначе
						текГруппа = Зн;
					КонецЕсли;
				КонецЕсли;
				ТекСтр[Кол - 1] = Зн;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТЗ.Колонки.Добавить("Настройка");
	Для Каждого тмпСтрока Из ТЗ Цикл
		Если СокрЛП(тмпСтрока.Идентификатор) <> "" Тогда
			текНастройка = Справочники.БПАГВидыНастроекАгентов.НайтиПоКоду(тмпСтрока.Идентификатор);
			Если (текНастройка = Неопределено) ИЛИ (текНастройка.Пустая()) Тогда
				Объ = Справочники.БПАГВидыНастроекАгентов.СоздатьЭлемент();
				Объ.Код = тмпСтрока.Идентификатор;
			Иначе
				Объ = текНастройка.ПолучитьОбъект();
			КонецЕсли;
			Объ.Наименование = тмпСтрока.Наименование;
			Объ.Тип = тмпСтрока.Тип;
			
			ОписаниеТипа = Новый ОписаниеТипов(тмпСтрока.Тип);
			
			Объ.ЗначениеПоУмолчанию = ОписаниеТипа.ПривестиЗначение(тмпСтрока.ЗначениеПоУмолчанию);
			Объ.Описание = тмпСтрока.Описание;
			Объ.Записать();
			текНастройка = Объ.Ссылка;
			
			тмпСтрока.Настройка = текНастройка;
			
			НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Агент.Установить(Справочники.БПАГАгенты.ПустаяСсылка());
			НаборЗаписей.Отбор.Профиль.Установить(Справочники.БПАГПрофилиАгентов.ПустаяСсылка());
			НаборЗаписей.Отбор.ВидНастройки.Установить(текНастройка);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.Агент = Справочники.БПАГАгенты.ПустаяСсылка();
				НоваяЗапись.Профиль = Справочники.БПАГПрофилиАгентов.ПустаяСсылка();
				НоваяЗапись.ВидНастройки = текНастройка;
				НоваяЗапись.Значение = ОписаниеТипа.ПривестиЗначение(Объ.ЗначениеПоУмолчанию);
				НаборЗаписей.Записать();
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТЗ;
КонецФункции

Процедура ОбновитьКэшНастроекАгентов() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БПАГНастройкиАгентов.Агент,
	|	БПАГНастройкиАгентов.Профиль,
	|	БПАГНастройкиАгентов.ВидНастройки КАК Настройка,
	|	БПАГНастройкиАгентов.Значение,
	|	БПАГНастройкиАгентов.ВидНастройки.Код КАК ИмяНастройки
	|ИЗ
	|	РегистрСведений.БПАГНастройкиАгентов КАК БПАГНастройкиАгентов";
	
	НастройкиАгентов = Запрос.Выполнить().Выгрузить();
	
	КаталогОбмена = НастройкаИзКэша("1СКаталогОбмена");
	АдресВнешнегоFTP = НастройкаИзКэша("1САдресВнешнегоFTP");
	ЛогинВнешнегоFTP = НастройкаИзКэша("1СЛогинВнешнегоFTP");
	ПарольВнешнегоFTP = НастройкаИзКэша("1СПарольВнешнегоFTP");
	ПроксиСервер = БПАГ.ПолучитьПрокси();
КонецПроцедуры

Функция НастройкаИзКэша(Имя, Агент = Неопределено) Экспорт
	
	Если Агент = Неопределено Тогда
		//Общие настройки
		Отбор = Новый Структура();
		Отбор.Вставить("Агент", Справочники.БПАГАгенты.ПустаяСсылка());
		Отбор.Вставить("Профиль", Справочники.БПАГПрофилиАгентов.ПустаяСсылка());
		Отбор.Вставить("ИмяНастройки", Имя);
		
		НайденныеСуществующиеНастройки = НастройкиАгентов.НайтиСтроки(Отбор);
		Если НайденныеСуществующиеНастройки.Количество() = 0 Тогда
			ОтладочноеСообщение("Не найдена общая настройка " + Имя + "!");
			Возврат "Ошибка";
		Иначе
			Возврат НайденныеСуществующиеНастройки[0].Значение;
		КонецЕсли;
	Иначе
		//Настройки агента
		Отбор = Новый Структура();
		Отбор.Вставить("Агент", Агент);
		Отбор.Вставить("Профиль", Справочники.БПАГПрофилиАгентов.ПустаяСсылка());
		Отбор.Вставить("ИмяНастройки", Имя);
		
		НайденныеСуществующиеНастройки = НастройкиАгентов.НайтиСтроки(Отбор);
		Если НайденныеСуществующиеНастройки.Количество() = 0 Тогда
			//Настройки профиля
			Отбор = Новый Структура();
			Отбор.Вставить("Агент", Справочники.БПАГАгенты.ПустаяСсылка());
			Отбор.Вставить("Профиль", Агент.Профиль);
			Отбор.Вставить("ИмяНастройки", Имя);
			
			НайденныеСуществующиеНастройки = НастройкиАгентов.НайтиСтроки(Отбор);
			Если НайденныеСуществующиеНастройки.Количество() = 0 Тогда
				//Общие настройки
				Отбор = Новый Структура();
				Отбор.Вставить("Агент", Справочники.БПАГАгенты.ПустаяСсылка());
				Отбор.Вставить("Профиль", Справочники.БПАГПрофилиАгентов.ПустаяСсылка());
				Отбор.Вставить("ИмяНастройки", Имя);
				
				НайденныеСуществующиеНастройки = НастройкиАгентов.НайтиСтроки(Отбор);
				Если НайденныеСуществующиеНастройки.Количество() = 0 Тогда
					ОтладочноеСообщение("Не найдена настройка агента " + Имя + " для " + Агент + "!");
					Возврат "Ошибка";
				Иначе
					Возврат НайденныеСуществующиеНастройки[0].Значение;
				КонецЕсли;
			Иначе
				Возврат НайденныеСуществующиеНастройки[0].Значение;
			КонецЕсли;
		Иначе
			Возврат НайденныеСуществующиеНастройки[0].Значение;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция НастройкаИзРегистра(Имя, Агент = Неопределено) Экспорт
	Если Агент = Неопределено Тогда
		//Общие настройки		
		НастройкаПоИмени = Справочники.БПАГВидыНастроекАгентов.НайтиПоКоду(Имя);
		Если НастройкаПоИмени.Пустая() Тогда
			ОтладочноеСообщение("Не найден вид настройки " + Имя + "!");
			Возврат "Ошибка";
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидНастройки.Установить(НастройкаПоИмени);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			ОтладочноеСообщение("Не найдена общая настройка " + Имя + "!");
			Возврат "Ошибка";
		Иначе
			Возврат НаборЗаписей[0].Значение;
		КонецЕсли;
	Иначе
		НастройкаПоИмени = Справочники.БПАГВидыНастроекАгентов.НайтиПоКоду(Имя);
		Если НастройкаПоИмени.Пустая() Тогда
			ОтладочноеСообщение("Не найден вид настройки " + Имя + "!");
			Возврат "Ошибка";
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидНастройки.Установить(НастройкаПоИмени);
		НаборЗаписей.Отбор.Профиль.Установить(Справочники.БПАГПрофилиАгентов.ПустаяСсылка());
		НаборЗаписей.Отбор.Агент.Установить(Агент);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			// Поиск по профилю
			НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ВидНастройки.Установить(НастройкаПоИмени);
			НаборЗаписей.Отбор.Профиль.Установить(Агент.Профиль);
			НаборЗаписей.Отбор.Агент.Установить(Справочники.БПАГАгенты.ПустаяСсылка());
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				// Поиск по общим
				НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ВидНастройки.Установить(НастройкаПоИмени);
				НаборЗаписей.Отбор.Профиль.Установить(Справочники.БПАГПрофилиАгентов.ПустаяСсылка());
				НаборЗаписей.Отбор.Агент.Установить(Справочники.БПАГАгенты.ПустаяСсылка());
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Количество() = 0 Тогда
					// Не найдена
					ОтладочноеСообщение("Не найдена настройка агента " + Имя + " для " + Агент + "!");
					Возврат "Ошибка";
				Иначе
					Возврат НаборЗаписей[0].Значение;
				КонецЕсли;
			Иначе
				Возврат НаборЗаписей[0].Значение;
			КонецЕсли;
		Иначе
			Возврат НаборЗаписей[0].Значение;
		КонецЕсли;		
	КонецЕсли;	
КонецФункции

Функция ПолучитьХэш(тмп)
	Хэш = 0;
	Для i = 1 По СтрДлина(тмп) Цикл
		Хэш = Хэш + КодСимвола(тмп, i);	
	КонецЦикла;
	Хэш = Хэш * СтрДлина(тмп);
	Возврат Формат(Хэш, "ЧН=0; ЧГ=0");
КонецФункции

Функция НормализоватьСтрокуДляPHP(Источник) Экспорт
	тмп = СокрЛП(Источник);
	тмп = СтрЗаменить(тмп, """", "'");
	тмп = СтрЗаменить(тмп, "\", "\\");
	тмп = СтрЗаменить(тмп, Символы.ПС, "\n");
	Возврат тмп;
КонецФункции

Функция НормализоватьСтрокуДляJava(Источник) Экспорт
	тмп = СокрЛП(Источник);
	тмп = СтрЗаменить(тмп, """", "'");
	тмп = СтрЗаменить(тмп, "\", "\\");
	тмп = СтрЗаменить(тмп, Символы.ПС, "\n");
	Возврат тмп;
КонецФункции


Функция ПолучитьНастройкуВестиУчетТоваровОрганизацийВРазрезеСкладов()
	ВестиУчетТоваровОрганизацийВРазрезеСкладов = Ложь;
	ПараметрыУчетнойПолитикиУпр = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(ТекущаяДата(), Ложь, Неопределено, "Упр", Истина);
	Если ЗначениеЗаполнено(ПараметрыУчетнойПолитикиУпр) Тогда
		ВестиУчетТоваровОрганизацийВРазрезеСкладов = ПараметрыУчетнойПолитикиУпр.ВестиУчетТоваровОрганизацийВРазрезеСкладов;
	КонецЕсли;
	Возврат ВестиУчетТоваровОрганизацийВРазрезеСкладов;
КонецФункции

Функция ПолучитьОтветственного(Агент)
	
	ВидПрикладногоРешения = БПАГ.ПолучитьВидПрикладногоРешения();
	
	Если НастройкаИзКэша("1СПодставлятьАгентаВКачествеОтветственного", Агент.Агент) Тогда
		Запрос = Новый Запрос;
		
		Если ВидПрикладногоРешения = "УТ11" Тогда
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Пользователи.Ссылка КАК Ответственный
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	Пользователи.ФизическоеЛицо = &ФизЛицо
			|	И НЕ Пользователи.ПометкаУдаления";
		ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Сотрудники.Ссылка КАК Ответственный
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.ФизЛицо = &ФизЛицо
			|	И НЕ Сотрудники.ПометкаУдаления";
		Иначе
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Пользователи.Ссылка КАК Ответственный
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	Пользователи.ФизЛицо = &ФизЛицо
			|	И НЕ Пользователи.ПометкаУдаления";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ФизЛицо", Агент.Агент.ФизЛицо);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ответственный;
		КонецЕсли;
		
		Возврат Неопределено;	
	Иначе
		Если ВидПрикладногоРешения = "УТ11" Тогда
			Если СпецификаПользователя = "FT" Тогда
				Возврат Справочники.Пользователи.НайтиПоНаименованию("Михайленков Андрей Александрович");
			Иначе
				ТекПользователь = Неопределено;
				Выполнить("ТекПользователь = Пользователи.ТекущийПользователь()");
				Возврат ТекПользователь;
			КонецЕсли;	
		ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
			ТекПользователь = Неопределено;
			Попытка
				Выполнить("ТекПользователь = Пользователи.ТекущийПользователь().Физлицо");
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	СотрудникиПользователя.Сотрудник
				|ИЗ
				|	РегистрСведений.СотрудникиПользователя КАК СотрудникиПользователя
				|ГДЕ
				|	СотрудникиПользователя.Пользователь = &ТекущийПользователь";
				
				Запрос.УстановитьПараметр("ТекущийПользователь", ТекПользователь);
				Результат = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = Результат.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ТекПользователь = ВыборкаДетальныеЗаписи.Сотрудник;
				КонецЦикла;			
			Исключение
			КонецПопытки;
			Возврат ТекПользователь;
		Иначе
			ТекущийОтветственный = Неопределено;
			Выполнить("ТекущийОтветственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной(""глТекущийПользователь""), ""ОсновнойОтветственный"");");
			Возврат ТекущийОтветственный;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура УстановитьСвойстваИКатегории(тмпДокумент, Док)
	
	Если (ВидПрикладногоРешения = "УНФ") Тогда
		//NIY
		Возврат;
	КонецЕсли;
	
	Если ВидПрикладногоРешения = "УТ11" Тогда
		Попытка
			Для Каждого тмпСтрока Из тмпДокумент.properties Цикл
				СтрокаШаблон = "ORDSALRETCINDEPQUETRNREC";
				Если Лев(тмпСтрока.uniqueID, 1) = "K" Тогда
					//В УТ11 категорий нет
				ИначеЕсли Лев(тмпСтрока.uniqueID, 1) = "S" Тогда
					//Это свойство
					тмпПодстрока = Сред(тмпСтрока.uniqueID, 2, 3);
					
					КодПрисутствует = 0;
					НаименованиеКатегории = "";
					КодКатегории = 0;
					Если Найти(СтрокаШаблон, тмпПодстрока) > 0 Тогда
						//Новая версия
						Код = Сред(тмпСтрока.uniqueID, 5);
						//Разбить строку на наименование и код
						КодПрисутствует = Найти(Код, "-:=");
						Если КодПрисутствует > 0 Тогда
							НаименованиеКатегории = Лев(Код, (КодПрисутствует - 1));
							КодКатегории = Число(Сред(Код, КодПрисутствует + 3)); 
						КонецЕсли;	
					Иначе
						//До обновления
						Код = Сред(тмпСтрока.uniqueID, 2);
					КонецЕсли;
					
					//Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду(Код);
					Если КодПрисутствует > 0 Тогда
						//Поиск по коду регистра сведений.
						Запрос = Новый Запрос;
						Запрос.Текст = 
						
						"ВЫБРАТЬ
						|	БПАГКатегорииДокументов.Код,
						|	БПАГКатегорииДокументов.Категория
						|ИЗ
						|	РегистрСведений.БПАГКатегорииДокументов КАК БПАГКатегорииДокументов
						|ГДЕ
						|	БПАГКатегорииДокументов.Код = &КодКатегории";
						
						
						Запрос.УстановитьПараметр("КодКатегории", Число(КодКатегории));
						ТЗСвойств =  Запрос.Выполнить().Выгрузить();
						Для Каждого тмпСвойство из ТЗСвойств Цикл
							ДопРеквизит = тмпСвойство.Категория;
						КонецЦикла;
						
					Иначе	
						//Коды дополнительных реквизитов не используются. Поиск по наименованию.
						ДопРеквизит = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(Код);
					КонецЕсли;
				
					Если ДопРеквизит.Пустая() Тогда
						ОтладочноеСообщение("Отсутствует дополнительный реквизит: " + Код + "!");
						Продолжить;
					Иначе
						
						Если тмпСтрока.type = "boolean" Тогда
							Значение = тмпСтрока.value = "1";
						ИначеЕсли тмпСтрока.type = "date" Тогда
							Если тмпСтрока.value = "" Тогда
								Значение = Дата(1, 1, 1);
							Иначе
								Значение = Дата(тмпСтрока.value + " 00:00:00");
							КонецЕсли;
						ИначеЕсли тмпСтрока.type = "number" Тогда
							Если тмпСтрока.value = "" Тогда
								Значение = 0;
							Иначе
								Значение = Число(тмпСтрока.value);
							КонецЕсли;
						ИначеЕсли тмпСтрока.type = "string" Тогда
							Значение = тмпСтрока.value;
						КонецЕсли;
						
							ДопРеквизитНайден = Ложь;
							Для Каждого тмпСтрокаРеквизитов Из Док.ДополнительныеРеквизиты Цикл
								Если тмпСтрокаРеквизитов.Свойство = ДопРеквизит Тогда
									тмпСтрокаРеквизитов.Значение = Значение;
									тмпСтрокаРеквизитов.ТекстоваяСтрока = ДопРеквизит;
									ДопРеквизитНайден = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если НЕ ДопРеквизитНайден Тогда
								тмпСтрокаРеквизитов = Док.ДополнительныеРеквизиты.Добавить();
								тмпСтрокаРеквизитов.Свойство = ДопРеквизит;
								тмпСтрокаРеквизитов.Значение = Значение;
								тмпСтрокаРеквизитов.ТекстоваяСтрока = ДопРеквизит;
								Если (СпецификаПользователя = "IK") Тогда
									Если ТипЗнч(Док.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
										Попытка
											Если Значение Тогда
												Док.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено; 
											КонецЕсли;
										Исключение
										КонецПопытки;
									КонецЕсли;	
								КонецЕсли;	
							КонецЕсли;
					КонецЕсли;
				Иначе
					//ОтладочноеСообщение("Неизвестная сущность: " + тмпСтрока.uniqueID);
					Продолжить;
				КонецЕсли;
				
			КонецЦикла;
		Исключение
			ОтладочноеСообщение("Ошибка при загрузке свойств: " + ОписаниеОшибки());
		КонецПопытки;
	Иначе
		
		Попытка
			Для Каждого тмпСтрока Из тмпДокумент.properties Цикл
				СтрокаШаблон = "ORDSALRETCINDEPQUETRNREC";
				Если Лев(тмпСтрока.uniqueID, 1) = "K" Тогда
					//Это категория
					тмпПодстрока = Сред(тмпСтрока.uniqueID, 2, 3);
					Если Найти(СтрокаШаблон, тмпПодстрока) > 0 Тогда
						//Новая версия
						Код = Сред(тмпСтрока.uniqueID, 5);
					Иначе
						//До обновления
						Код = Сред(тмпСтрока.uniqueID, 2);
					КонецЕсли;
					Категория = Справочники.КатегорииОбъектов.НайтиПоКоду(Код);
					Если Категория.Пустая() Тогда
						ОтладочноеСообщение("Категория с кодом " + Код + " не найдена!");
						Продолжить;
					Иначе	
						НаборЗаписей = РегистрыСведений.КатегорииОбъектов.СоздатьНаборЗаписей();
						
						НаборЗаписей.Отбор.Объект.Установить(Док.Ссылка);
						НаборЗаписей.Отбор.Категория.Установить(Категория);
						
						НаборЗаписей.Прочитать();
						НаборЗаписей.Очистить();
						Если тмпСтрока.value = "1" Тогда
							НоваяЗапись = НаборЗаписей.Добавить();
							НоваяЗапись.Объект = Док.Ссылка;
							НоваяЗапись.Категория = Категория;
						КонецЕсли;
						НаборЗаписей.Записать();
					КонецЕсли;
					
				ИначеЕсли Лев(тмпСтрока.uniqueID, 1) = "S" Тогда
					//Это свойство
					тмпПодстрока = Сред(тмпСтрока.uniqueID, 2, 3);
					Если Найти(СтрокаШаблон, тмпПодстрока) > 0 Тогда
						//Новая версия
						Код = Сред(тмпСтрока.uniqueID, 5);
					Иначе
						//До обновления
						Код = Сред(тмпСтрока.uniqueID, 2);
					КонецЕсли;
					Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду(Код);
					Если Свойство.Пустая() Тогда
						ОтладочноеСообщение("Свойство с кодом " + Код + " не найдено!");
						Продолжить;
					Иначе	
						НаборЗаписей = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
						
						НаборЗаписей.Отбор.Объект.Установить(Док.Ссылка);
						НаборЗаписей.Отбор.Свойство.Установить(Свойство);
						
						НаборЗаписей.Прочитать();
						НаборЗаписей.Очистить();
						
						НоваяЗапись = НаборЗаписей.Добавить();
						НоваяЗапись.Объект = Док.Ссылка;
						НоваяЗапись.Свойство = Свойство;
						
						Если тмпСтрока.type = "boolean" Тогда
							НоваяЗапись.Значение = тмпСтрока.value = "1";
						ИначеЕсли тмпСтрока.type = "date" Тогда
							Если тмпСтрока.value = "" Тогда
								НоваяЗапись.Значение = Дата(1, 1, 1);
							Иначе
								НоваяЗапись.Значение = Дата(тмпСтрока.value + " 00:00:00");
							КонецЕсли;
						ИначеЕсли тмпСтрока.type = "number" Тогда
							Если тмпСтрока.value = "" Тогда
								НоваяЗапись.Значение = 0;
							Иначе
								НоваяЗапись.Значение = Число(тмпСтрока.value);
							КонецЕсли;
						ИначеЕсли тмпСтрока.type = "string" Тогда
							НоваяЗапись.Значение = тмпСтрока.value;
						ИначеЕсли тмпСтрока.type = "list" Тогда
							Запрос = Новый Запрос;
							
							Запрос.Текст =
							 "ВЫБРАТЬ
							 |	ЗначенияСвойствОбъектов.Ссылка,
							 |	ЗначенияСвойствОбъектов.Наименование
							 |ИЗ
							 |	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
							 |ГДЕ
							 |	ЗначенияСвойствОбъектов.Владелец = &Свойство
							 |	И НЕ ЗначенияСвойствОбъектов.ПометкаУдаления
							 |	И НЕ ЗначенияСвойствОбъектов.ЭтоГруппа
							 |	И ЗначенияСвойствОбъектов.Наименование = &Значение"
							 ;
							Запрос.УстановитьПараметр("Свойство", Свойство);
							Запрос.УстановитьПараметр("Значение", СокрЛП(тмпСтрока.value));
							 
						 	ТЗЗначенийСвойства = Запрос.Выполнить().Выгрузить();
							
							Для Каждого тмпЗначениеСвойства из ТЗЗначенийСвойства Цикл
								НоваяЗапись.Значение = тмпЗначениеСвойства.Ссылка;
							КонецЦикла;
							
						КонецЕсли;
						
						НаборЗаписей.Записать();
					КонецЕсли;
				Иначе
					Если тмпСтрока.uniqueID <> "ADD_karti" Тогда
						//ОтладочноеСообщение("Неизвестная сущность: " + тмпСтрока.uniqueID);
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		Исключение
			ОтладочноеСообщение("Ошибка при загрузке свойств: " + ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьСпособыОтраженияВУчетах(тмпДокумент, Док)
	Если (ВидПрикладногоРешения = "УТ11") ИЛИ (ВидПрикладногоРешения = "УНФ") Тогда
		Возврат;
	КонецЕсли;
	// Если есть категории "PostUU", "PostBU", "DontPostUU", "DontPostBU", то соответствующим образом проставим отражения в учетах
	Попытка
		НайденнаяСтрока = тмпДокумент.properties.Найти("PostUU", "identifier");
		Если НайденнаяСтрока <> Неопределено Тогда
			Если НайденнаяСтрока.value = "1" Тогда
				Док.ОтражатьВУправленческомУчете = Истина;
			КонецЕсли;
		КонецЕсли;
		НайденнаяСтрока = тмпДокумент.properties.Найти("PostBU", "identifier");
		Если НайденнаяСтрока <> Неопределено Тогда
			Если НайденнаяСтрока.value = "1" Тогда
				Попытка
					Док.ОтражатьВБухгалтерскомУчете = Истина;
					Док.ОтражатьВНалоговомУчете = Истина;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		НайденнаяСтрока = тмпДокумент.properties.Найти("DontPostUU", "identifier");
		Если НайденнаяСтрока <> Неопределено Тогда
			Если НайденнаяСтрока.value = "1" Тогда
				Док.ОтражатьВУправленческомУчете = Ложь;
			КонецЕсли;
		КонецЕсли;
		НайденнаяСтрока = тмпДокумент.properties.Найти("DontPostBU", "identifier");
		Если НайденнаяСтрока <> Неопределено Тогда
			Если НайденнаяСтрока.value = "1" Тогда
				Попытка
					Док.ОтражатьВБухгалтерскомУчете = Ложь;
					Док.ОтражатьВНалоговомУчете = Ложь;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
КонецПроцедуры

Процедура ПриИзмененииЗначенияОрганизации(ДокументОбъект, СтруктураПараметровДляПолученияДоговора = Неопределено) Экспорт
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Если МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено Тогда
		
		Если МетаданныеДокумента.Реквизиты.Найти("НДСВключенВСтоимость") <> Неопределено Тогда
			
			//Проверка на вид прикладного решения
			Попытка
				НалоговыйУчетУСН = Ложь;
			Исключение
			КонецПопытки;
			
			Попытка				
				Если НалоговыйУчетУСН.ПрименениеУСН(ДокументОбъект.Организация, ДокументОбъект.Дата) Тогда
					ДокументОбъект.НДСВключенВСтоимость = Истина;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Если МетаданныеДокумента.Реквизиты.Найти("ПодразделениеОрганизации") <> Неопределено
			И ЗначениеЗаполнено(ДокументОбъект.Организация)
			И ЗначениеЗаполнено(ДокументОбъект.ПодразделениеОрганизации)
			И Не ДокументОбъект.ПодразделениеОрганизации.Владелец = ДокументОбъект.Организация Тогда
			
			ДокументОбъект.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			
		КонецЕсли;
		
		Если МетаданныеДокумента.Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено Тогда
			Если ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
				Если Не ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента)
					Или ДокументОбъект.ДоговорКонтрагента.Организация <> ДокументОбъект.Организация Тогда
					Выполнить("ДокументОбъект.ДоговорКонтрагента = ЗаполнениеДокументов.ПолучитьДоговорПоОрганизацииИКонтрагенту(ДокументОбъект.Организация, ДокументОбъект.Контрагент, СтруктураПараметровДляПолученияДоговора);");
				КонецЕсли;
			Иначе
				ДокументОбъект.ДоговорКонтрагента = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если МетаданныеДокумента.Реквизиты.Найти("БанковскийСчетОрганизации") <> Неопределено Тогда
			ДокументОбъект.БанковскийСчетОрганизации = ДокументОбъект.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииЗначенияОрганизации()

Процедура БППереместитьФайл(Источник, Приемник) Экспорт
	Файл = Новый Файл(Источник);
	Если Файл.Существует() Тогда
		Попытка
			ПереместитьФайл(Источник, Приемник);
		Исключение
			ОтладочноеСообщение("Ошибка перемещения файла: " + ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаписатьФайлыСтатусов(ТЗАгентов) Экспорт
	ОтладочноеСообщение("Запись файлов статусов началась " + ТекущаяДата());
	Для Каждого тмпСтрока Из ТЗАгентов Цикл
		Путь = КаталогОбмена + СокрЛП(тмпСтрока.Код) + "\";
		
		ПарольАрхива = СокрЛП(НастройкаИзКэша("1СПарольАрхивов"));
		
		Попытка
			Упаковщик = Новый ЗаписьZipФайла(Путь + "status.zip", ПарольАрхива);
			Упаковщик.Добавить(Путь + "status.plist");
			Упаковщик.Записать();
			//NIY Включить удаление
			//УдалитьФайлы(Путь, "status.plist");
		Исключение
			Сообщить(ОписаниеОшибки());
			Продолжить;				
		КонецПопытки;
		
		Если НастройкаИзКэша("1СИспользоватьВнешнийFTP") Тогда
			Попытка
				
				Таймаут = Макс(Число(НастройкаИзКэша("1СТаймаутFTP")), 10);
				ФТП = Новый FTPСоединение(АдресВнешнегоFTP, , ЛогинВнешнегоFTP, ПарольВнешнегоFTP, ПроксиСервер, , Таймаут);
				
				МассивФайлов = ФТП.НайтиФайлы(СокрЛП(тмпСтрока.Код));
				Если МассивФайлов.Количество() = 0 Тогда //Создадим каталог на FTP
					ФТП.СоздатьКаталог(СокрЛП(тмпСтрока.Код));
				КонецЕсли;
				
				ФТП.Записать(Путь + "status.zip", СокрЛП(тмпСтрока.Код) + "\" + "status.zip");
			Исключение
				ОтладочноеСообщение("Ошибка работы с FTP: Информация по статусам для " + тмпСтрока.Агент + " не отправлена:" + ОписаниеОшибки());
				Продолжить;	
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	ОтладочноеСообщение("Запись файлов статусов завершена " + ТекущаяДата());
КонецПроцедуры

Функция ПодготовитьАдресДляПоиска(Адрес) Экспорт
	//Заменим "обл" на "область" для облегчения работы Гуглу (в полном адресе)
	Результат = СтрЗаменить(Адрес, " обл ", " область ");
	Результат = СтрЗаменить(Адрес, " обл,", " область,");
	Возврат Результат;
КонецФункции

Функция ПодготовитьКраткийАдрес(Адрес, текАгент) Экспорт
	
	СтрокиИсключений = НастройкаИзКэша("defaultCompanyID", текАгент);
	
	Если СокрЛП(СтрокиИсключений) = "" Тогда
		ЧислоИсключений = 0;
	Иначе	
		СтрокиИсключений = СтрЗаменить(СтрокиИсключений, " ", "");
		СтрокиИсключений = СтрЗаменить(СтрокиИсключений, ",", Символы.ПС);
		ЧислоИсключений = СтрЧислоСтрок(СтрокиИсключений);
	КонецЕсли;
	
	Результат = Адрес;
	//Обрежем индекс, если есть, в кратком адресе
	Попытка
		Если Формат(Число(Лев(Результат, 6)), "ЧГ=0") = Лев(Результат, 6) Тогда
			Результат = СокрЛП(Сред(Результат, 7));
			Если Лев(Результат, 1) = "," Тогда
				Результат = СокрЛП(Сред(Результат, 2));
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	//Удалим "обл", "г", "ул" в кратком адресе
	Результат = СтрЗаменить(Результат, " обл,", "");
	Результат = СтрЗаменить(Результат, " г,", "");
	Результат = СтрЗаменить(Результат, " ул,", "");
	
	//Удалим "родные" город, область, если есть, в кратком адресе
	Для i = 1 По ЧислоИсключений Цикл
		Результат = СтрЗаменить(Результат, СтрПолучитьСтроку(СтрокиИсключений, i) + " ", "");
		Результат = СтрЗаменить(Результат, СтрПолучитьСтроку(СтрокиИсключений, i) + ",", "");
	КонецЦикла;
	
	Результат = СокрЛП(Результат);
	
	Возврат Результат;
КонецФункции	

Функция ПолучитьТекстИзФайла(ИмяФайла, Текст) Экспорт
	
	Файл = Новый ТекстовыйДокумент;
	Попытка
		Файл.Прочитать(ИмяФайла, КодировкаТекста.Системная);
		Текст = Файл.ПолучитьТекст();		
	Исключение
		ОтладочноеСообщение(ОписаниеОшибки());
		Возврат Ложь;		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьПоследнийНомерДокументаНаУстройстве(Вид, Агент)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	БПАГДокументыАгентовСрезПоследних.НомерДокументаНаУстройстве
	|ИЗ
	|	РегистрСведений.БПАГДокументыАгентов.СрезПоследних(
	|			,
	|			Агент = &Агент
	|				И ВидДокумента = &ВидДокумента) КАК БПАГДокументыАгентовСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	БПАГДокументыАгентовСрезПоследних.ДатаСозданияНаУстройстве УБЫВ";
	Запрос.УстановитьПараметр("Агент", Агент);
	Запрос.УстановитьПараметр("ВидДокумента", Вид);
	
	ПоследнийНомер = "0";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПоследнийНомер = Лев(Выборка.НомерДокументаНаУстройстве, СтрДлина(Выборка.НомерДокументаНаУстройстве) - 4);
	КонецЕсли;
	
	Возврат ПоследнийНомер;	
КонецФункции		

Функция ПолучитьНастройкиДокумента(ВидДокумента, Дата,  Агент = Неопределено)
	
	//Запрос = Новый Запрос;
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	БПАГНастройкиДокументовСрезПоследних.ПерезаписыватьНепроведенные,
	//|	БПАГНастройкиДокументовСрезПоследних.Проводить,
	//|	БПАГНастройкиДокументовСрезПоследних.Перепроводить,
	//|	БПАГНастройкиДокументовСрезПоследних.ОтражатьВУУ,
	//|	БПАГНастройкиДокументовСрезПоследних.ОтражатьВБУ,
	//|	БПАГНастройкиДокументовСрезПоследних.ОтражатьВНУ,
	//|	БПАГНастройкиДокументовСрезПоследних.ОбратнаяВыгрузкаИз1С,
	//|	БПАГНастройкиДокументовСрезПоследних.ПериодОбратнойВыгрузки
	//|ИЗ
	//|	РегистрСведений.БПАГНастройкиДокументов.СрезПоследних(&МоментВремени, ) КАК БПАГНастройкиДокументовСрезПоследних
	//|ГДЕ
	//|	БПАГНастройкиДокументовСрезПоследних.ВидДокумента = &ВидДокумента";
	//
	//Запрос.УстановитьПараметр("МоментВремени", Дата);
	//Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	//Если Агент = Неопределено Тогда
	//	//Общие настройки
	//	Запрос.УстановитьПараметр("Агент", Справочники.БПАГАгенты.ПустаяСсылка());
	//Иначе
	//	Запрос.УстановитьПараметр("Агент", Агент);
	//КонецЕсли;	
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Если Выборка.Следующий() Тогда
	//	Возврат Выборка;	
	//Иначе
	//	Возврат Неопределено;
	//КонецЕсли;
	//
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БПАГНастройкиДокументовСрезПоследних.*,
	|	1 КАК Релевантность
	|ИЗ
	|	РегистрСведений.БПАГНастройкиДокументов.СрезПоследних(&МоментВремени, ) КАК БПАГНастройкиДокументовСрезПоследних
	|ГДЕ
	|	БПАГНастройкиДокументовСрезПоследних.ВидДокумента = &ВидДокумента
	|	И БПАГНастройкиДокументовСрезПоследних.Агент = &Агент
	|	И БПАГНастройкиДокументовСрезПоследних.Агент <> ЗНАЧЕНИЕ(Справочник.БПАГАгенты.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БПАГНастройкиДокументовСрезПоследних.*,
	|	2
	|ИЗ
	|	РегистрСведений.БПАГНастройкиДокументов.СрезПоследних(&МоментВремени, ) КАК БПАГНастройкиДокументовСрезПоследних
	|ГДЕ
	|	БПАГНастройкиДокументовСрезПоследних.ВидДокумента = &ВидДокумента
	|	И БПАГНастройкиДокументовСрезПоследних.Профиль = &Профиль
	|	И БПАГНастройкиДокументовСрезПоследних.Профиль <> ЗНАЧЕНИЕ(Справочник.БПАГПрофилиАгентов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БПАГНастройкиДокументовСрезПоследних.*,
	|	3
	|ИЗ
	|	РегистрСведений.БПАГНастройкиДокументов.СрезПоследних(&МоментВремени, ) КАК БПАГНастройкиДокументовСрезПоследних
	|ГДЕ
	|	БПАГНастройкиДокументовСрезПоследних.ВидДокумента = &ВидДокумента
	|	И БПАГНастройкиДокументовСрезПоследних.Агент = ЗНАЧЕНИЕ(Справочник.БПАГАгенты.ПустаяСсылка)
	|	И БПАГНастройкиДокументовСрезПоследних.Профиль = ЗНАЧЕНИЕ(Справочник.БПАГПрофилиАгентов.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Релевантность";
	
	Запрос.УстановитьПараметр("МоментВремени", Дата);
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	Запрос.УстановитьПараметр("Агент", Агент);
	Запрос.УстановитьПараметр("Профиль", ?(Агент = Неопределено, Неопределено, Агент.Профиль));

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьМассивАссортимента(МассивАгентов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БПАГАссортиментыСостав.Номенклатура КАК Номенклатура
	|ИЗ
	|	Справочник.БПАГАгенты КАК БПАГАгенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГАссортименты.Состав КАК БПАГАссортиментыСостав
	|		ПО БПАГАгенты.Ассортимент = БПАГАссортиментыСостав.Ссылка
	|ГДЕ
	|	(НЕ БПАГАссортиментыСостав.Номенклатура.ПометкаУдаления)
	|	И БПАГАгенты.Ссылка В(&МассивАгентов)
	|	И БПАГАссортиментыСостав.Номенклатура <> &ПустаяНоменклатура";
	
	Запрос.УстановитьПараметр("МассивАгентов", МассивАгентов);
	Запрос.УстановитьПараметр("ПустаяНоменклатура", Справочники.БПАГНоменклатура.ПустаяСсылка());
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
КонецФункции

Функция ПолучитьМассивКлиентурыКлиентов(МассивАгентов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БПАГКлиентураСостав.Контрагент КАК Контрагент
	|ИЗ
	|	Справочник.БПАГАгенты КАК БПАГАгенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГКлиентура.Состав КАК БПАГКлиентураСостав
	|		ПО БПАГАгенты.Клиентура = БПАГКлиентураСостав.Ссылка
	|ГДЕ
	|	(НЕ БПАГКлиентураСостав.Контрагент.ПометкаУдаления)
	|	И БПАГАгенты.Ссылка В(&МассивАгентов)
	|	И БПАГКлиентураСостав.Контрагент <> &ПустойКонтрагент";
	
	Запрос.УстановитьПараметр("МассивАгентов", МассивАгентов);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.БПАГКлиентура.ПустаяСсылка());
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");
	
КонецФункции

//ПАКЛ-> 
Функция ПолучитьМассивКлиентурыКлиентовИзСКД(МассивАгентов, СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных) Экспорт
	
	//Попытка
	//	// Подготовка компоновщика макета компоновки данных, загрузка настроек
	//	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	//	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	//	
	//	Если НастройкиКомпоновкиДанных <> Неопределено Тогда
	//		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
	//		КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	//	Иначе
	//		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	//	КонецЕсли;
	//	//КомпоновщикНастроек.Настройки.Отбор.Элементы  //Тут отборы, указанные в скд
	//	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);
	//	СегментыСервер.ВключитьОтборПоСегментуПартнеровВСКД(КомпоновщикНастроек);
	//	
	//	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	//	МакетКомпоновки = КомпоновщикМакета.Выполнить(
	//	СхемаКомпоновкиДанных,
	//	КомпоновщикНастроек.ПолучитьНастройки(), , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), Ложь);
	//	
	//	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	//	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,,Истина);
	//	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	//	
	//	ДанныеОтчета = Новый ТаблицаЗначений();
	//	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	//	ДанныеОтчета = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	//	//ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	//	
	//	Возврат ДанныеОтчета;
	//Исключение
	//КонецПопытки;
	//
	//
	//
	//
	//////Получить СКД агента
	////
	//////НастройкиКомпоновщика = Компоновщик.Настройки;
	////
	//////ВнешниеНаборыДанных = Новый Структура;
	//////ВнешниеНаборыДанных.Вставить("ИсточникДанных1", МассивАгентов);
	//////
	////КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	//////
	//////Для Каждого тмпЭлемент Из НастройкиКомпоновщика.ПараметрыДанных.Элементы Цикл
	//////	Если СокрЛП(тмпЭлемент.Параметр) = "НачалоПериода" Тогда
	//////		тмпЭлемент.Значение = Период.ДатаНачала;
	//////	ИначеЕсли СокрЛП(тмпЭлемент.Параметр) = "ОкончаниеПериода" Тогда
	//////		тмпЭлемент.Значение = Период.ДатаОкончания;
	//////	КонецЕсли;
	//////КонецЦикла;
	////
	//////МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СКД, НастройкиКомпоновщика,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	////МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(ХранилищеСКД,,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	////ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	////ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);

	////ТаблицаРезультат = Новый ТаблицаЗначений;
	////	
	////ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	////ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
	////ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

	////Возврат Истина;
	//
	////Запрос = Новый Запрос;
	////Запрос.Текст = 
	////"ВЫБРАТЬ РАЗЛИЧНЫЕ
	////|	БПАГКлиентураСостав.Контрагент КАК Контрагент
	////|ИЗ
	////|	Справочник.БПАГАгенты КАК БПАГАгенты
	////|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГКлиентура.Состав КАК БПАГКлиентураСостав
	////|		ПО БПАГАгенты.Клиентура = БПАГКлиентураСостав.Ссылка
	////|ГДЕ
	////|	(НЕ БПАГКлиентураСостав.Контрагент.ПометкаУдаления)
	////|	И БПАГАгенты.Ссылка В(&МассивАгентов)
	////|	И БПАГКлиентураСостав.Контрагент <> &ПустойКонтрагент";
	////
	////Запрос.УстановитьПараметр("МассивАгентов", МассивАгентов);
	////Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.БПАГКлиентура.ПустаяСсылка());
	//
	//
	//
	//
	////Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");
    
КонецФункции

Функция ПолучитьЗапросСУчетомНастроек(СхемаКомпоновки, ПользовательскиеНастройкиКомпоновки = Неопределено, СтруктураПараметров = Неопределено, СтруктураОтбора = Неопределено, СтруктураВидовСравненияОтбора = Неопределено) Экспорт
	
	// Получим настройки по умолчанию и добавим в них пользовательские настройки
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки)); 
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
	
	НастройкиКомпоновки = Компоновщик.ПолучитьНастройки();
	
	//Если ПользовательскиеНастройкиКомпоновки <> Неопределено Тогда
	//	КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(НастройкиКомпоновки.Отбор, ПользовательскиеНастройкиКомпоновки.Отбор);
	//КонецЕсли; 
	
	//// Добавим в настройки дополнительный отбор
	//Если СтруктураОтбора <> Неопределено Тогда
	//	Для каждого ЭлементОтбора Из СтруктураОтбора Цикл
	//		Если НРег(ЭлементОтбора.Ключ) = "период" Тогда
	//			Если НастройкиКомпоновки.ДоступныеПоляОтбора.Элементы.Найти("Дата") <> Неопределено Тогда
	//				Если ЗначениеЗаполнено(ЭлементОтбора.Значение.ДатаНачала) Тогда
	//					КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(НастройкиКомпоновки.Отбор, "Дата", НачалоДня(ЭлементОтбора.Значение.ДатаНачала), ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
	//				КонецЕсли; 
	//				Если ЗначениеЗаполнено(ЭлементОтбора.Значение.ДатаОкончания) Тогда
	//					КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(НастройкиКомпоновки.Отбор, "Дата", КонецДня(ЭлементОтбора.Значение.ДатаОкончания), ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
	//				КонецЕсли; 
	//			КонецЕсли; 
	//			
	//			ПараметрПериод = НастройкиКомпоновки.ПараметрыДанных.Элементы.Найти("Период");
	//			Если ПараметрПериод <> Неопределено Тогда
	//				ПараметрПериод.Значение = ЭлементОтбора.Значение;
	//			КонецЕсли; 
	//		Иначе
	//			
	//			ВидСравненияОтбора = Неопределено;
	//			
	//			Если СтруктураВидовСравненияОтбора <> Неопределено Тогда
	//				СтруктураВидовСравненияОтбора.Свойство(ЭлементОтбора.Ключ, ВидСравненияОтбора);
	//			КонецЕсли;
	//			
	//			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(НастройкиКомпоновки.Отбор, ЭлементОтбора.Ключ, ЭлементОтбора.Значение, ВидСравненияОтбора);
	//		КонецЕсли; 
	//		
	//	КонецЦикла; 
	//КонецЕсли; 
	
	// Установим в настройке параметры
	Если СтруктураПараметров <> Неопределено Тогда
		Для Каждого ТекущийПараметр Из СтруктураПараметров Цикл
			НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра(ТекущийПараметр.Ключ,  ТекущийПараметр.Значение);
		КонецЦикла;
	КонецЕсли;	
	
			КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
			
			Если ПользовательскиеНастройкиКомпоновки <> Неопределено Тогда
				КомпоновщикНастроек.ЗагрузитьНастройки(ПользовательскиеНастройкиКомпоновки);
				КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
			//Иначе
			//	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
			КонецЕсли;
	
	
	// Получим запрос из макета компоновки
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	//МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, НастройкиКомпоновки);
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, КомпоновщикНастроек.ПолучитьНастройки());
	Запрос = Новый Запрос(МакетКомпоновки.НаборыДанных[0].Запрос);
	
	// Установим параметры запроса
	ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
	Для каждого ОписаниеПараметраЗапроса ИЗ ОписаниеПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(ОписаниеПараметраЗапроса.Имя, МакетКомпоновки.ЗначенияПараметров[ОписаниеПараметраЗапроса.Имя].Значение);
	КонецЦикла;
	
	Возврат Запрос;

КонецФункции


//ПАКЛ<-

Функция ПолучитьМассивКлиентурыТТ(МассивАгентов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БПАГКлиентураСостав.Контрагент КАК Контрагент
	|ИЗ
	|	Справочник.БПАГАгенты КАК БПАГАгенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГКлиентура.Состав КАК БПАГКлиентураСостав
	|		ПО БПАГАгенты.Клиентура = БПАГКлиентураСостав.Ссылка
	|ГДЕ
	|	НЕ БПАГКлиентураСостав.Контрагент.ПометкаУдаления
	|	И БПАГАгенты.Ссылка В(&МассивАгентов)
	|	И БПАГКлиентураСостав.Контрагент <> &ПустойКонтрагент
	|	И БПАГКлиентураСостав.ТорговаяТочка = &ПустаяТТ";
	
	Запрос.УстановитьПараметр("МассивАгентов", МассивАгентов);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.БПАГКлиентура.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяТТ", Справочники.БПАГТорговыеТочки.ПустаяСсылка());
	
	МассивПолныхКонтрагентов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БПАГКлиентураСостав.ТорговаяТочка КАК ТорговаяТочка
	|ИЗ
	|	Справочник.БПАГАгенты КАК БПАГАгенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГКлиентура.Состав КАК БПАГКлиентураСостав
	|		ПО БПАГАгенты.Клиентура = БПАГКлиентураСостав.Ссылка
	|ГДЕ
	|	НЕ БПАГКлиентураСостав.ТорговаяТочка.ПометкаУдаления
	|	И БПАГАгенты.Ссылка В(&МассивАгентов)
	|	И БПАГКлиентураСостав.ТорговаяТочка <> &ПустаяТТ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БПАГТорговыеТочки.Ссылка
	|ИЗ
	|	Справочник.БПАГТорговыеТочки КАК БПАГТорговыеТочки
	|ГДЕ
	|	БПАГТорговыеТочки.Владелец В ИЕРАРХИИ(&ПолныеКонтрагенты)
	|	И НЕ БПАГТорговыеТочки.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("МассивАгентов", МассивАгентов);
	Запрос.УстановитьПараметр("ПустаяТТ", Справочники.БПАГТорговыеТочки.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПолныеКонтрагенты", МассивПолныхКонтрагентов);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	ТЗ.Свернуть("ТорговаяТочка");
	
	Возврат ТЗ.ВыгрузитьКолонку("ТорговаяТочка");
	
КонецФункции

Функция	СоздатьТаблицуИзОдногоАгента(тмпАгент)
	
	тмпТЗ = Новый ТаблицаЗначений;
	тмпТЗ.Колонки.Добавить("Агент");
	тмпТЗ.Колонки.Добавить("Код");
	НоваяСтрока = тмпТЗ.Добавить();
	НоваяСтрока.Агент = тмпАгент.Агент;
	НоваяСтрока.Код = тмпАгент.Агент.Код;
	
	Возврат тмпТЗ;	
КонецФункции

Функция ПрочитатьУровеньИзXML(Чтение)
	ТЗ = Новый ТаблицаЗначений();
	
	ФлагКлюч = Ложь;
	ФлагЗначение = Ложь;
	ТекущийКлюч = "";
	НайденоНеПустоеЗначение = Ложь;
	
	Пока Чтение.Прочитать() Цикл
		Если (Чтение.Имя = "dict") И (Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента) Тогда
			тмпСтрока = ТЗ.Добавить();
		ИначеЕсли (Чтение.Имя = "array") И (Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента) Тогда
			тмпТЗ = ПрочитатьУровеньИзXML(Чтение);
			Колонка = ТЗ.Колонки.Найти(ТекущийКлюч);
			Если Колонка = Неопределено Тогда
				ТЗ.Колонки.Добавить(ТекущийКлюч);
			КонецЕсли;
			тмпСтрока[ТекущийКлюч] = тмпТЗ;
		ИначеЕсли (Чтение.Имя = "array") И (Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента) Тогда
			Возврат ТЗ;
		ИначеЕсли (Чтение.Имя = "key") И (Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента) Тогда
			ФлагКлюч = Истина;
		ИначеЕсли (Чтение.Имя = "key") И (Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента) Тогда
			ФлагКлюч = Ложь;
		ИначеЕсли (Чтение.Имя = "string") И (Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента) Тогда
			ФлагЗначение = Истина;
		ИначеЕсли (Чтение.Имя = "string") И (Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента) Тогда
			Если Не НайденоНеПустоеЗначение Тогда
				Колонка = ТЗ.Колонки.Найти(ТекущийКлюч);
				Если Колонка = Неопределено Тогда
					ТЗ.Колонки.Добавить(ТекущийКлюч);
				КонецЕсли;
				тмпСтрока[ТекущийКлюч] = "";
			КонецЕсли;
			НайденоНеПустоеЗначение = Ложь;
			ФлагЗначение = Ложь;
		ИначеЕсли (Чтение.Имя = "#text") И (ФлагКлюч) Тогда
			ТекущийКлюч = Чтение.Значение;
		ИначеЕсли (Чтение.Имя = "#text") И (ФлагЗначение) Тогда
			Колонка = ТЗ.Колонки.Найти(ТекущийКлюч);
			Если Колонка = Неопределено Тогда
				ТЗ.Колонки.Добавить(ТекущийКлюч);
			КонецЕсли;
			тмпСтрока[ТекущийКлюч] = Чтение.Значение;
			НайденоНеПустоеЗначение = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Процедура СформироватьPlist(ТЗ, КолонкаСортировки, Агенты, ИмяФайла, СтатусноеСообщение, КопироватьВсемАгентам, Иерархически = Ложь, Сортировка = Истина, ВторойУровеньИерархии = Неопределено, КлючПоиска = Неопределено)
	
	Если Сортировка Тогда
		Если ВторойУровеньИерархии = Неопределено Тогда
			ТЗ.Сортировать(КолонкаСортировки);
		Иначе
			ТЗ.Сортировать("" + КолонкаСортировки + "," + ВторойУровеньИерархии);
		КонецЕсли;
	КонецЕсли;
	
	НайденнаяКолонка = ТЗ.Колонки.Найти("тмпПустойМассив");
	Если НайденнаяКолонка = Неопределено Тогда
		НоваяКолонка = ТЗ.Колонки.Добавить("тмпПустойМассив");
	КонецЕсли;
	
	ИмяИсходногоФайла = КаталогОбмена + СокрЛП(Агенты[0].Код) + "\" + ИмяФайла + ".plist";
	Попытка 
		Текст = Новый ЗаписьТекста(ИмяИсходногоФайла, КодировкаТекста.UTF8);
	Исключение
		Сообщить("Невозможно произвести запись в каталог обмена: " + КаталогОбмена +" Проверьте права пользователя!");
	КонецПопытки;
	Текст.ЗаписатьСтроку("<?xml version=""1.0"" encoding=""UTF-8""?>");
	Текст.ЗаписатьСтроку("<!DOCTYPE plist PUBLIC ""-//Apple//DTD PLIST 1.0//EN"" ""http://www.apple.com/DTDs/PropertyList-1.0.dtd"">");
	Текст.ЗаписатьСтроку("<plist version=""1.0"">");
	
	Текст.ЗаписатьСтроку("<array>");
	
	Если ВторойУровеньИерархии <> Неопределено Тогда
		
		Счет = 0;
		ПрогрессорВсего = ТЗ.Количество();
		тмпГруппировка = "<NullFF>";
		тмпВтораяГруппировка = "<NullFF>";
		
		Для Каждого тмпСтрока Из ТЗ Цикл
			Счет = Счет + 1;
			БПАГ.глПрогрессор("Выгрузка " + СтатусноеСообщение, ПрогрессорВсего, Счет);
			
			ТекущаяГруппировка = Строка(тмпСтрока[КолонкаСортировки]);
			
			//Проверим, нужно ли закрыть второй уровень иерархии
			ТекущаяВтораяГруппировка = Строка(тмпСтрока[ВторойУровеньИерархии]);
			Если (тмпВтораяГруппировка <> ТекущаяВтораяГруппировка) ИЛИ (тмпГруппировка <> ТекущаяГруппировка) Тогда
				Если тмпВтораяГруппировка <> "<NullFF>" Тогда //Если это не первый блок, то закрываем предыдущий
					Если тмпВтораяГруппировка <> "<Empty_Array>" Тогда
						УровеньОтступа = 4;
						Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "</array>");
					КонецЕсли;
					УровеньОтступа = 3;
					Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "</dict>");
				КонецЕсли;
			КонецЕсли;
			
			Если тмпГруппировка <> ТекущаяГруппировка Тогда
				
				тмпВтораяГруппировка = "<NullFF>";
				
				Если тмпГруппировка <> "<NullFF>" Тогда //Если это не первый блок, то закрываем предыдущий
					Если тмпГруппировка <> "<Empty_Array>" Тогда
						УровеньОтступа = 2;
						Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "</array>");
					КонецЕсли;
					УровеньОтступа = 1;
					Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "</dict>");
				КонецЕсли;
				
				УровеньОтступа = 1;
				Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "<dict>");
				УровеньОтступа = 2;
				
				Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "<key>" + КолонкаСортировки + "</key>");
				
				СтрокаДляЗаписи = тмпСтрока[КолонкаСортировки];
				
				Если (КолонкаСортировки <> "latitude") И (КолонкаСортировки <> "longitude") Тогда
					Попытка
						Если Число(СтрокаДляЗаписи) = СтрокаДляЗаписи Тогда
							СтрокаДляЗаписи = Формат(СтрокаДляЗаписи, "ЧДЦ=3; ЧРД=.; ЧГ=0");
						КонецЕсли;
					Исключение
					КонецПопытки;
				Иначе
					СтрокаДляЗаписи = Формат(СтрокаДляЗаписи, "ЧДЦ=7; ЧРД=.; ЧГ=0");
				КонецЕсли;
				
				Попытка
					Если Дата(СтрокаДляЗаписи) = СтрокаДляЗаписи Тогда
						СтрокаДляЗаписи = Формат(СтрокаДляЗаписи, "ДФ=dd.MM.yyyy");
					КонецЕсли;
				Исключение
				КонецПопытки;
				
				Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "<string>" + ПодготовитьСтрокуДляXML(СтрокаДляЗаписи) + "</string>");
				
				Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "<key>data</key>");
				
				Если тмпСтрока["тмпПустойМассив"] = "Service_NULL" Тогда
					Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "<array/>");
					тмпГруппировка = "<Empty_Array>";
					Продолжить;
				Иначе
					Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "<array>");
				КонецЕсли;
				
				тмпГруппировка = ТекущаяГруппировка;
			КонецЕсли;
			
			//Второй уровень иерархии
			ТекущаяВтораяГруппировка = Строка(тмпСтрока[ВторойУровеньИерархии]);
			Если тмпВтораяГруппировка <> ТекущаяВтораяГруппировка Тогда
				
				УровеньОтступа = 3;
				Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "<dict>");
				УровеньОтступа = 4;
				
				Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "<key>" + ВторойУровеньИерархии + "</key>");
				
				СтрокаДляЗаписи = тмпСтрока[ВторойУровеньИерархии];
				
				Если (ВторойУровеньИерархии <> "latitude") И (ВторойУровеньИерархии <> "longitude") Тогда
					Попытка
						Если Число(СтрокаДляЗаписи) = СтрокаДляЗаписи Тогда
							СтрокаДляЗаписи = Формат(СтрокаДляЗаписи, "ЧДЦ=3; ЧРД=.; ЧГ=0");
						КонецЕсли;
					Исключение
					КонецПопытки;
				Иначе
					СтрокаДляЗаписи = Формат(СтрокаДляЗаписи, "ЧДЦ=7; ЧРД=.; ЧГ=0");
				КонецЕсли;
				
				Попытка
					Если Дата(СтрокаДляЗаписи) = СтрокаДляЗаписи Тогда
						СтрокаДляЗаписи = Формат(СтрокаДляЗаписи, "ДФ=dd.MM.yyyy");
					КонецЕсли;
				Исключение
				КонецПопытки;
				
				Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "<string>" + ПодготовитьСтрокуДляXML(СтрокаДляЗаписи) + "</string>");
				
				Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "<key>data</key>");
				
				Если тмпСтрока["тмпПустойМассив"] = "Service_NULL" Тогда
					Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "<array/>");
					тмпВтораяГруппировка = "<Empty_Array>";
					Продолжить;
				Иначе
					Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "<array>");
				КонецЕсли;
				
				тмпВтораяГруппировка = ТекущаяВтораяГруппировка;
			КонецЕсли;
			
			УровеньОтступа = 5;
			Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "<dict>");
			УровеньОтступа = 6;
			Если тмпСтрока["тмпПустойМассив"] <> "Service_NULL" Тогда
				Для Каждого тмпКолонка Из ТЗ.Колонки Цикл
					
					Если (тмпКолонка.Имя <> КолонкаСортировки) И (тмпКолонка.Имя <> ВторойУровеньИерархии) И (Лев(тмпКолонка.Имя, 3) <> "тмп") Тогда
						Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "<key>" + тмпКолонка.Имя + "</key>");
						
						СтрокаДляЗаписи = тмпСтрока[тмпКолонка.Имя];
						
						Если (тмпКолонка.Имя <> "latitude") И (тмпКолонка.Имя <> "longitude") Тогда
							Попытка
								Если Число(СтрокаДляЗаписи) = СтрокаДляЗаписи Тогда
									СтрокаДляЗаписи = Формат(СтрокаДляЗаписи, "ЧДЦ=3; ЧРД=.; ЧГ=0");
								КонецЕсли;
							Исключение
							КонецПопытки;
						Иначе
							СтрокаДляЗаписи = Формат(СтрокаДляЗаписи, "ЧДЦ=7; ЧРД=.; ЧГ=0");
						КонецЕсли;
						
						Попытка
							Если Дата(СтрокаДляЗаписи) = СтрокаДляЗаписи Тогда
								СтрокаДляЗаписи = Формат(СтрокаДляЗаписи, "ДФ=dd.MM.yyyy");
							КонецЕсли;
						Исключение
						КонецПопытки;
						
						Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "<string>" + ПодготовитьСтрокуДляXML(СтрокаДляЗаписи) + "</string>");
					КонецЕсли;
				КонецЦикла;		
			КонецЕсли;
			
			УровеньОтступа = 5;
			Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "</dict>");
			
			#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
			#КонецЕсли
			
		КонецЦикла;
		
		Если тмпВтораяГруппировка <> "<NullFF>" Тогда //Если был хотя бы один блок, то закрываем предыдущий
			Если тмпВтораяГруппировка <> "<Empty_Array>" Тогда
				УровеньОтступа = 4;
				Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "</array>");
			КонецЕсли;
			УровеньОтступа = 3;
			Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "</dict>");
		КонецЕсли;
	
		Если тмпГруппировка <> "<NullFF>" Тогда //Если был хотя бы один блок, то закрываем предыдущий
			Если тмпГруппировка <> "<Empty_Array>" Тогда
				УровеньОтступа = 2;
				Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "</array>");
			КонецЕсли;
			УровеньОтступа = 1;
			Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "</dict>");
		КонецЕсли;
	
	ИначеЕсли Иерархически Тогда
		
		Счет = 0;
		ПрогрессорВсего = ТЗ.Количество();
		тмпГруппировка = "<NullFF>";
		
		Для Каждого тмпСтрока Из ТЗ Цикл
			Счет = Счет + 1;
			БПАГ.глПрогрессор("Выгрузка " + СтатусноеСообщение, ПрогрессорВсего, Счет);
			
			ТекущаяГруппировка = Строка(тмпСтрока[КолонкаСортировки]);
			Если тмпГруппировка <> ТекущаяГруппировка Тогда
				Если тмпГруппировка <> "<NullFF>" Тогда //Если это не первый блок, то закрываем предыдущий
					Если тмпГруппировка <> "<Empty_Array>" Тогда
						УровеньОтступа = 2;
						Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "</array>");
					КонецЕсли;
					УровеньОтступа = 1;
					Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "</dict>");
				КонецЕсли;
				
				УровеньОтступа = 1;
				Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "<dict>");
				УровеньОтступа = 2;
				
				Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "<key>" + КолонкаСортировки + "</key>");
				
				СтрокаДляЗаписи = тмпСтрока[КолонкаСортировки];
				
				Если (КолонкаСортировки <> "latitude") И (КолонкаСортировки <> "longitude") Тогда
					Попытка
						Если Число(СтрокаДляЗаписи) = СтрокаДляЗаписи Тогда
							СтрокаДляЗаписи = Формат(СтрокаДляЗаписи, "ЧДЦ=3; ЧРД=.; ЧГ=0");
						КонецЕсли;
					Исключение
					КонецПопытки;
				Иначе
					СтрокаДляЗаписи = Формат(СтрокаДляЗаписи, "ЧДЦ=7; ЧРД=.; ЧГ=0");
				КонецЕсли;
				
				Попытка
					Если Дата(СтрокаДляЗаписи) = СтрокаДляЗаписи Тогда
						СтрокаДляЗаписи = Формат(СтрокаДляЗаписи, "ДФ=dd.MM.yyyy");
					КонецЕсли;
				Исключение
				КонецПопытки;
				
				Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "<string>" + ПодготовитьСтрокуДляXML(СтрокаДляЗаписи) + "</string>");
				
				Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "<key>data</key>");
				
				Если тмпСтрока["тмпПустойМассив"] = "Service_NULL" Тогда
					Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "<array/>");
					тмпГруппировка = "<Empty_Array>";
					Продолжить;
				Иначе
					Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "<array>");
				КонецЕсли;
				
				тмпГруппировка = ТекущаяГруппировка;
			КонецЕсли;
			
			УровеньОтступа = 3;
			Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "<dict>");
			УровеньОтступа = 4;
			Если тмпСтрока["тмпПустойМассив"] <> "Service_NULL" Тогда
				Для Каждого тмпКолонка Из ТЗ.Колонки Цикл
					
					Если (тмпКолонка.Имя <> КолонкаСортировки) И (Лев(тмпКолонка.Имя, 3) <> "тмп") Тогда
						Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "<key>" + тмпКолонка.Имя + "</key>");
						
						СтрокаДляЗаписи = тмпСтрока[тмпКолонка.Имя];
						
						Если (тмпКолонка.Имя <> "latitude") И (тмпКолонка.Имя <> "longitude") Тогда
							Попытка
								Если Число(СтрокаДляЗаписи) = СтрокаДляЗаписи Тогда
									СтрокаДляЗаписи = Формат(СтрокаДляЗаписи, "ЧДЦ=3; ЧРД=.; ЧГ=0");
								КонецЕсли;
							Исключение
							КонецПопытки;
						Иначе
							СтрокаДляЗаписи = Формат(СтрокаДляЗаписи, "ЧДЦ=7; ЧРД=.; ЧГ=0");
						КонецЕсли;
						
						Попытка
							Если Дата(СтрокаДляЗаписи) = СтрокаДляЗаписи Тогда
								СтрокаДляЗаписи = Формат(СтрокаДляЗаписи, "ДФ=dd.MM.yyyy");
							КонецЕсли;
						Исключение
						КонецПопытки;
						
						Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "<string>" + ПодготовитьСтрокуДляXML(СтрокаДляЗаписи) + "</string>");
					КонецЕсли;
				КонецЦикла;		
			КонецЕсли;
			
			УровеньОтступа = 3;
			Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "</dict>");
			
			#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
			#КонецЕсли
			
		КонецЦикла;
		
		Если тмпГруппировка <> "<NullFF>" Тогда //Если был хотя бы один блок, то закрываем предыдущий
			Если тмпГруппировка <> "<Empty_Array>" Тогда
				УровеньОтступа = 2;
				Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "</array>");
			КонецЕсли;
			УровеньОтступа = 1;
			Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "</dict>");
		КонецЕсли;
		
	Иначе
		Счет = 0;
		ПрогрессорВсего = ТЗ.Количество();
		Для Каждого тмпСтрока Из ТЗ Цикл
			Счет = Счет + 1;
			БПАГ.глПрогрессор("Выгрузка " + СтатусноеСообщение, ПрогрессорВсего, Счет);
			
			УровеньОтступа = 1;
			Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "<dict>");
			УровеньОтступа = 2;
			
			Если тмпСтрока["тмпПустойМассив"] <> "Service_NULL" Тогда
				Для Каждого тмпКолонка Из ТЗ.Колонки Цикл
					Если (Лев(тмпКолонка.Имя, 3) <> "тмп") Тогда
						Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "<key>" + тмпКолонка.Имя + "</key>");
						
						СтрокаДляЗаписи = тмпСтрока[тмпКолонка.Имя];
						
						Если ТипЗнч(СтрокаДляЗаписи) = Тип("ТаблицаЗначений") Тогда //Это вложенная таблица
							Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "<array>");
							Для Каждого тмпВложеннаяСтрока Из СтрокаДляЗаписи Цикл
								
								УровеньОтступа = 3;
								Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "<dict>");
								
								УровеньОтступа = 4;
								
								Для Каждого тмпВложеннаяКолонка Из СтрокаДляЗаписи.Колонки Цикл
									Если (Лев(тмпВложеннаяКолонка.Имя, 3) <> "тмп") Тогда
										Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "<key>" + тмпВложеннаяКолонка.Имя + "</key>");
										
										ВложеннаяСтрокаДляЗаписи = тмпВложеннаяСтрока[тмпВложеннаяКолонка.Имя];
										
										Если (тмпВложеннаяКолонка.Имя <> "latitude") И (тмпВложеннаяКолонка.Имя <> "longitude") Тогда
											Попытка
												Если Число(ВложеннаяСтрокаДляЗаписи) = ВложеннаяСтрокаДляЗаписи Тогда
													ВложеннаяСтрокаДляЗаписи = Формат(ВложеннаяСтрокаДляЗаписи, "ЧДЦ=3; ЧРД=.; ЧГ=0");
												КонецЕсли;
											Исключение
											КонецПопытки;
										Иначе
											ВложеннаяСтрокаДляЗаписи = Формат(ВложеннаяСтрокаДляЗаписи, "ЧДЦ=7; ЧРД=.; ЧГ=0");
										КонецЕсли;
										
										Попытка
											Если Дата(ВложеннаяСтрокаДляЗаписи) = ВложеннаяСтрокаДляЗаписи Тогда
												ВложеннаяСтрокаДляЗаписи = Формат(ВложеннаяСтрокаДляЗаписи, "ДФ=dd.MM.yyyy");
											КонецЕсли;
										Исключение
										КонецПопытки;
										
										Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "<string>" + ПодготовитьСтрокуДляXML(ВложеннаяСтрокаДляЗаписи) + "</string>");
									КонецЕсли;
								КонецЦикла;
								
								УровеньОтступа = 3;
								Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "</dict>");
							КонецЦикла;
							
							УровеньОтступа = 2;
							Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "</array>");
							
						Иначе //Это не вложенная таблица	
							
							Если (тмпКолонка.Имя <> "latitude") И (тмпКолонка.Имя <> "longitude") Тогда
								Попытка
									Если Число(СтрокаДляЗаписи) = СтрокаДляЗаписи Тогда
										СтрокаДляЗаписи = Формат(СтрокаДляЗаписи, "ЧДЦ=3; ЧРД=.; ЧГ=0");
									КонецЕсли;
								Исключение
								КонецПопытки;
							Иначе
								СтрокаДляЗаписи = Формат(СтрокаДляЗаписи, "ЧДЦ=7; ЧРД=.; ЧГ=0");
							КонецЕсли;
							
							//форматирование даты для обратной выгрузки
							Если Найти("orders-sales-returnIns-cashIns-receipts-cashOuts", ИмяФайла) > 0 Тогда
								тмпФорматнаяСтрока = "ДФ='dd.MM.yyyy HH:mm:ss'";
							Иначе
								тмпФорматнаяСтрока = "ДФ='dd.MM.yyyy'";
							КонецЕсли;
							
							Попытка
								Если Дата(СтрокаДляЗаписи) = СтрокаДляЗаписи Тогда
									СтрокаДляЗаписи = Формат(СтрокаДляЗаписи, тмпФорматнаяСтрока);
								КонецЕсли;
							Исключение
							КонецПопытки;
							
							Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "<string>" + ПодготовитьСтрокуДляXML(СтрокаДляЗаписи) + "</string>");
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			УровеньОтступа = 1;
			Текст.ЗаписатьСтроку(СимволыТабуляции(УровеньОтступа) + "</dict>");
			
			#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
			#КонецЕсли
			
		КонецЦикла;
	КонецЕсли;
	
	Текст.ЗаписатьСтроку("</array>");
	Текст.ЗаписатьСтроку("</plist>");
	
	Текст.Закрыть();
	
	ОтладочноеСообщение("" + СокрЛП(Агенты[0].Код) + " выгружено " + СтатусноеСообщение + ": " + Счет);
	
	Если КлючПоиска <> Неопределено Тогда
		НоваяСтрока = КэшФайловВыгрузки.Добавить();
		НоваяСтрока.ХэшПоиска = КлючПоиска;
		НоваяСтрока.ИмяТаблицы = ИмяФайла;
		НоваяСтрока.ИмяФайла = ИмяИсходногоФайла;
	КонецЕсли;
	
	Если КопироватьВсемАгентам Тогда
		Счет = 0;
		ПрогрессорВсего = Агенты.Количество() - 1;
		Для i = 1 По Агенты.Количество() - 1 Цикл
			Счет = Счет + 1;
			БПАГ.глПрогрессор("Копирование файлов " + СтатусноеСообщение, ПрогрессорВсего, Счет);
			ИмяФайлаПриемника = КаталогОбмена + СокрЛП(Агенты[i].Код) + "\" + ИмяФайла + ".plist";
			КопироватьФайл(ИмяИсходногоФайла, ИмяФайлаПриемника);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьТЗИзPlist(Агент, ИмяФайла, СообщениеНеНайденФайл)
	
	ИмяФайлаИсточника = КаталогОбмена + СокрЛП(Агент.Код) + "\tmpFromDeviceUnzipped\" + ИмяФайла + ".plist";
	ФайлЗагрузки = Новый Файл(ИмяФайлаИсточника);
	Если НЕ ФайлЗагрузки.Существует() Тогда
		ОтладочноеСообщение(СообщениеНеНайденФайл + Агент);
		Возврат Неопределено;
	КонецЕсли;
	
	Чтение = Новый ЧтениеXML();
	Попытка
		Чтение.ОткрытьФайл(ИмяФайлаИсточника);
	Исключение
		ОтладочноеСообщение("Ошибка чтения XML: " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Пока Чтение.Прочитать() Цикл
		Если (Чтение.Имя = "array") И (Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента) Тогда
			ТЗ = ПрочитатьУровеньИзXML(Чтение);
		КонецЕсли;
	КонецЦикла;
	
	Чтение.Закрыть();
	БППереместитьФайл(КаталогОбмена + СокрЛП(Агент.Код) + "\tmpFromDeviceUnzipped\" + ИмяФайла + ".plist", КаталогОбмена + СокрЛП(Агент.Код) + "\tmpFromDeviceUnzippedBackup\" + ИмяФайла + ".plist");
	
	Возврат ТЗ;
	
КонецФункции

Процедура ОтладочноеСообщение(Текст) Экспорт
	БПАГ.ИнформационноеСообщение(Текст, -1, Лог);
КонецПроцедуры

Функция ПодготовитьСтрокуДляXML(Стр)
	//"©®™„“«»><≥≤≈≠≡§&∞
	
	Результат = СтрЗаменить(Стр, "&", "&amp;");
	Результат = СтрЗаменить(Результат, "<", "&lt;");
	Результат = СтрЗаменить(Результат, ">", "&gt;");
	Возврат	Результат;
КонецФункции

//Возвращает заданное количество Tab'ов
Функция СимволыТабуляции(КолВо = 0)
	Результат = "";
	Для i = 1 По КолВо Цикл
		Результат = Результат + Символы.Таб;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьСвойстваКатегорииДокумента(Документ);
	
	ТЗКатегории = Новый ТаблицаЗначений;
	//Таблица значений категорий и свойств документа
	Если ВидПрикладногоРешения = "УТ11" Тогда
		
	Иначе	
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	БПАГКатегорииДокументов.Категория.Код КАК Код,
			|	БПАГКатегорииДокументов.Тип КАК Тип,
			|	БПАГКатегорииДокументов.Категория КАК Категория
			|ИЗ
			|	РегистрСведений.БПАГКатегорииДокументов КАК БПАГКатегорииДокументов
			|ГДЕ
			|	БПАГКатегорииДокументов.ВидДокумента = &ВидДокумента";
			
			Запрос.УстановитьПараметр("ВидДокумента", Перечисления.БПАГВидыДокументов.Заявка);
			
			ТЗКатегории = Запрос.Выполнить().Выгрузить();
			ТЗКатегории.Колонки.Добавить("propertyTypeID");
			ТЗКатегории.Колонки.Добавить("type");
			ТЗКатегории.Колонки.Добавить("uniqueID");
			ТЗКатегории.Колонки.Добавить("value");
			Для Каждого тмпСтрока Из ТЗКатегории Цикл
				Если ТипЗнч(тмпСтрока.Категория) = Тип("СправочникСсылка.КатегорииОбъектов") Тогда
					тмпСтрока.propertyTypeID = "KORD" + тмпСтрока.Код;
					тмпСтрока.type = "boolean";
					тмпСтрока.uniqueID = "KORD" + тмпСтрока.Код;
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	КатегорииОбъектов.Категория КАК Категория,
					|	КатегорииОбъектов.Объект
					|ИЗ
					|	РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
					|ГДЕ
					|	КатегорииОбъектов.Объект = &Документ
					|	И КатегорииОбъектов.Категория = &Категория";
					
					Запрос.УстановитьПараметр("Документ", Документ);
					Запрос.УстановитьПараметр("Категория", тмпСтрока.Категория);
					Если Запрос.Выполнить().Выгрузить().Количество() > 0 Тогда
						тмпСтрока.value = "1";
					Иначе
						тмпСтрока.value = "0";
					КонецЕсли;                                     
				Иначе
					//Свойства документа
					тмпСтрока.propertyTypeID = "SORD" + тмпСтрока.Код;
					тмпСтрока.uniqueID = "SORD" + тмпСтрока.Код;
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	ЗначенияСвойствОбъектов.Объект,
					|	ЗначенияСвойствОбъектов.Свойство,
					|	ЗначенияСвойствОбъектов.Значение
					|ИЗ
					|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
					|ГДЕ
					|	ЗначенияСвойствОбъектов.Объект = &Документ
					|	И ЗначенияСвойствОбъектов.Свойство = &Свойство";
					
					Запрос.УстановитьПараметр("Документ", Документ);
					Запрос.УстановитьПараметр("Свойство", тмпСтрока.Категория);
					ТЗСвойство = Запрос.Выполнить().Выгрузить();
					Для Каждого Свойство из ТЗСвойство  Цикл
						тмпСтрока.value = Свойство.Значение;
					КонецЦикла;	
				КонецЕсли;
			КонецЦикла;	
			ТЗКатегории.Колонки.Удалить("Код");
			ТЗКатегории.Колонки.Удалить("Тип");
			ТЗКатегории.Колонки.Удалить("Категория");
			
		ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда	
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	БПАГКатегорииДокументов.Категория.Код КАК Код,
			|	БПАГКатегорииДокументов.Тип КАК Тип,
			|	БПАГКатегорииДокументов.Категория КАК Категория
			|ИЗ
			|	РегистрСведений.БПАГКатегорииДокументов КАК БПАГКатегорииДокументов
			|ГДЕ
			|	БПАГКатегорииДокументов.ВидДокумента = &ВидДокумента";
			
			Запрос.УстановитьПараметр("ВидДокумента", Перечисления.БПАГВидыДокументов.Реализация);
			
			ТЗКатегории = Запрос.Выполнить().Выгрузить();
			ТЗКатегории.Колонки.Добавить("propertyTypeID");
			ТЗКатегории.Колонки.Добавить("type");
			ТЗКатегории.Колонки.Добавить("uniqueID");
			ТЗКатегории.Колонки.Добавить("value");
			Для Каждого тмпСтрока Из ТЗКатегории Цикл
				Если ТипЗнч(тмпСтрока.Категория) = Тип("СправочникСсылка.КатегорииОбъектов") Тогда
					тмпСтрока.propertyTypeID = "KSAL" + тмпСтрока.Код;
					тмпСтрока.type = "boolean";
					тмпСтрока.uniqueID = "KSAL" + тмпСтрока.Код;
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	КатегорииОбъектов.Категория КАК Категория,
					|	КатегорииОбъектов.Объект
					|ИЗ
					|	РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
					|ГДЕ
					|	КатегорииОбъектов.Объект = &Документ
					|	И КатегорииОбъектов.Категория = &Категория";
					
					Запрос.УстановитьПараметр("Документ", Документ);
					Запрос.УстановитьПараметр("Категория", тмпСтрока.Категория);
					Если Запрос.Выполнить().Выгрузить().Количество() > 0 Тогда
						тмпСтрока.value = "1";
					Иначе
						тмпСтрока.value = "0";
					КонецЕсли;                                     
				Иначе
					//Свойства документа
					тмпСтрока.propertyTypeID = "SSAL" + тмпСтрока.Код;
					тмпСтрока.uniqueID = "SSAL" + тмпСтрока.Код;
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	ЗначенияСвойствОбъектов.Объект,
					|	ЗначенияСвойствОбъектов.Свойство,
					|	ЗначенияСвойствОбъектов.Значение
					|ИЗ
					|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
					|ГДЕ
					|	ЗначенияСвойствОбъектов.Объект = &Документ
					|	И ЗначенияСвойствОбъектов.Свойство = &Свойство";
					
					Запрос.УстановитьПараметр("Документ", Документ);
					Запрос.УстановитьПараметр("Свойство", тмпСтрока.Категория);
					ТЗСвойство = Запрос.Выполнить().Выгрузить();
					Для Каждого Свойство из ТЗСвойство  Цикл
						тмпСтрока.value = Свойство.Значение;
					КонецЦикла;	
				КонецЕсли;
			КонецЦикла;	
			ТЗКатегории.Колонки.Удалить("Код");
			ТЗКатегории.Колонки.Удалить("Тип");
			ТЗКатегории.Колонки.Удалить("Категория");
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТЗКатегории;
КонецФункции	

Процедура ВыгрузитьЗаголовок(Агенты)
	
	ВидПрикладногоРешения = БПАГ.ПолучитьВидПрикладногоРешения();
	//ПАКЛ->
	//Настройка выгрузки договоров поставщиков
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БПАГНастройкиДокументов.ВидДокумента,
	|	БПАГНастройкиДокументов.НеПоказыватьНаУстройстве
	|ИЗ
	|	РегистрСведений.БПАГНастройкиДокументов КАК БПАГНастройкиДокументов
	|ГДЕ
	|	БПАГНастройкиДокументов.ВидДокумента = &ДокументПоступление";
	
	Запрос.УстановитьПараметр("ДокументПоступление", Перечисления.БПАГВидыДокументов.Поступление);
	
	ТЗНастройки = Запрос.Выполнить().Выгрузить();
	ВыгружатьПоставщиков = Ложь;
	Для Каждого СтрНастройка из ТЗНастройки Цикл
		Если НЕ СтрНастройка.НеПоказыватьНаУстройстве Тогда
			ВыгружатьПоставщиков = Истина;
		КонецЕсли;
	КонецЦикла;
	//ПАКЛ<-
	
	СпецификаПользователя = БПАГ.ПолучитьСпецификуПользователя();
	Для Каждого тмпАгент Из Агенты Цикл
		//Краткая расшифровка подписи для печатных форм
		Если (ВидПрикладногоРешения = "УТ11") ИЛИ (ВидПрикладногоРешения = "УНФ") или (СпецификаПользователя = "SD") Тогда
			КраткаяРасшифровка = "";	
		Иначе
			КраткаяРасшифровка = "";
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ФИОФизЛицСрезПоследних.Фамилия,
			|	ФИОФизЛицСрезПоследних.Имя,
			|	ФИОФизЛицСрезПоследних.Отчество
			|ИЗ
			|	РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ФИОФизЛицСрезПоследних
			|ГДЕ
			|	ФИОФизЛицСрезПоследних.ФизЛицо = &ФизЛицо";
			Запрос.УстановитьПараметр("ФизЛицо", тмпАгент.Агент.ФизЛицо);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
			КонецЕсли;
			
			ИнициалИмени = Лев(СокрЛП(Выборка.Имя), 1);
			ИнициалОтчества = Лев(СокрЛП(Выборка.Отчество), 1);
			
			КраткаяРасшифровка = СокрЛП(Выборка.Фамилия) + ?(ИнициалИмени = "", "", " " + ИнициалИмени + ".") + ?(ИнициалОтчества = "", "", " " + ИнициалОтчества + ".");
		КонецЕсли;
		//Последние номера документов по данным системы
		ПоследнийНомерЗаявки = ПолучитьПоследнийНомерДокументаНаУстройстве(Перечисления.БПАГВидыДокументов.Заявка, тмпАгент.Агент);
		ПоследнийНомерРеализации = ПолучитьПоследнийНомерДокументаНаУстройстве(Перечисления.БПАГВидыДокументов.Реализация, тмпАгент.Агент);
		ПоследнийНомерПКО = ПолучитьПоследнийНомерДокументаНаУстройстве(Перечисления.БПАГВидыДокументов.ПКО, тмпАгент.Агент);
		ПоследнийНомерЗаказаНаСклад = ПолучитьПоследнийНомерДокументаНаУстройстве(Перечисления.БПАГВидыДокументов.ЗаказНаСклад, тмпАгент.Агент);
		ПоследнийНомерВозвратаОтПокупателя = ПолучитьПоследнийНомерДокументаНаУстройстве(Перечисления.БПАГВидыДокументов.ВозвратОтПокупателя, тмпАгент.Агент);
		ПоследнийНомерРКО = ПолучитьПоследнийНомерДокументаНаУстройстве(Перечисления.БПАГВидыДокументов.РКО, тмпАгент.Агент);
		ПоследнийНомерПоступления = ПолучитьПоследнийНомерДокументаНаУстройстве(Перечисления.БПАГВидыДокументов.Поступление, тмпАгент.Агент);
		ПоследнийНомерВозвратаПоставщику = ПолучитьПоследнийНомерДокументаНаУстройстве(Перечисления.БПАГВидыДокументов.ВозвратПоставщику, тмпАгент.Агент);
		ПоследнийНомерМерчандайзинга = ПолучитьПоследнийНомерДокументаНаУстройстве(Перечисления.БПАГВидыДокументов.Мерчандайзинг, тмпАгент.Агент);
		
		ТЗ = Новый ТаблицаЗначений;
		
		#Область описаниеПолейТаблицыНастроек
		
		ТЗ.Колонки.Добавить("uniqueID");
		ТЗ.Колонки.Добавить("businessID");
		ТЗ.Колонки.Добавить("baseID");
		ТЗ.Колонки.Добавить("name");
		ТЗ.Колонки.Добавить("shortFIO");
		ТЗ.Колонки.Добавить("picturesOverWiFiOnly");
		ТЗ.Колонки.Добавить("debtsByAllAnalytics");
		ТЗ.Колонки.Добавить("hideMaxDebt");
		ТЗ.Колонки.Добавить("useActualSalesFromCenter");
		ТЗ.Колонки.Добавить("syncInterval");
		ТЗ.Колонки.Добавить("syncMode");
		ТЗ.Колонки.Добавить("allowBackgroundSync");
		ТЗ.Колонки.Добавить("documentsSendingDelay");
		ТЗ.Колонки.Добавить("allowBackgroundLogSync");
		ТЗ.Колонки.Добавить("syncRequiredInterval");
		
		ТЗ.Колонки.Добавить("defaultCompanyID");
		ТЗ.Колонки.Добавить("allowCompanyChange");
		ТЗ.Колонки.Добавить("defaultPriceTypeID");
		ТЗ.Колонки.Добавить("allowPriceTypeChange");
		ТЗ.Колонки.Добавить("defaultMobileDepotID");
		ТЗ.Колонки.Добавить("allowMobileDepotChange");
		ТЗ.Колонки.Добавить("defaultCentralDepotID");
		ТЗ.Колонки.Добавить("allowCentralDepotChange");
		ТЗ.Колонки.Добавить("defaultReturnInDepotID");
		ТЗ.Колонки.Добавить("allowReturnInDepotChange");
		ТЗ.Колонки.Добавить("defaultQuestionnaireTypeID");
		ТЗ.Колонки.Добавить("startQuestionnaireTypeID");
		ТЗ.Колонки.Добавить("finishQuestionnaireTypeID");
		ТЗ.Колонки.Добавить("exchangePeriod");
		ТЗ.Колонки.Добавить("restsByAllDepots");
		ТЗ.Колонки.Добавить("restsByAllCompanies");
		ТЗ.Колонки.Добавить("restsInCatalogByDepotID");
		ТЗ.Колонки.Добавить("restsInCatalogByCompanyID");		
		ТЗ.Колонки.Добавить("allowNegativeRestsVT");
		ТЗ.Колонки.Добавить("allowNegativeRestsPS");
		
		ТЗ.Колонки.Добавить("returnInDocumentPeriod");
		ТЗ.Колонки.Добавить("allowReturnInDocumentPeriodChange");
		ТЗ.Колонки.Добавить("defaultReceiptDepotID");
		ТЗ.Колонки.Добавить("allowReceiptDepotChange");
		
		ТЗ.Колонки.Добавить("defaultReturnOutDepotID");
		ТЗ.Колонки.Добавить("allowReturnOutDepotChange");
		ТЗ.Колонки.Добавить("defaultSupplierPriceTypeID");
		//ТЗ.Колонки.Добавить("allowManualPricesInReceipt");
		//ТЗ.Колонки.Добавить("allowManualPricesInReturnOut");
		ТЗ.Колонки.Добавить("returnOutDocumentPeriod");
		ТЗ.Колонки.Добавить("allowReturnOutDocumentPeriodChange");
		ТЗ.Колонки.Добавить("showBarcodes");
		ТЗ.Колонки.Добавить("allowManualPricesForDocumentTypes");
		ТЗ.Колонки.Добавить("documentTypesCorrectingRests");
		ТЗ.Колонки.Добавить("SDShowMinRest");
		ТЗ.Колонки.Добавить("SDShowFacing");
		//Взаиморасчеты
		ТЗ.Колонки.Добавить("documentTypesCorrectingDebts");
		//Ценообразование
		ТЗ.Колонки.Добавить("showAllPrices");
		ТЗ.Колонки.Добавить("pricesSortOrder");
		ТЗ.Колонки.Добавить("allowManualPrices");
		ТЗ.Колонки.Добавить("controlMinPriceType");
		ТЗ.Колонки.Добавить("minManualPriceTypeID");
		ТЗ.Колонки.Добавить("showMinPrice");
		ТЗ.Колонки.Добавить("allowNullPrices");
		ТЗ.Колонки.Добавить("maxGlobalDiscount");
		ТЗ.Колонки.Добавить("discountCalculationMode");
		ТЗ.Колонки.Добавить("globalManualDiscountMode");
		ТЗ.Колонки.Добавить("measurementPointsModeRepeat");
		ТЗ.Колонки.Добавить("showRestsInCurrentMeasurementPoint");
		ТЗ.Колонки.Добавить("showCatalogPricesInBaseUnit");
		ТЗ.Колонки.Добавить("showNegativeRestsWarning");
		ТЗ.Колонки.Добавить("showGetCashDialog");
		ТЗ.Колонки.Добавить("cashInChooseDebtModeAuto");
		ТЗ.Колонки.Добавить("allowEmptyAnalytics");
		ТЗ.Колонки.Добавить("deliveryDateShift");
		ТЗ.Колонки.Добавить("highlightDebtors");
		ТЗ.Колонки.Добавить("showArticles");
		ТЗ.Колонки.Добавить("calcOverwriteMode");
		ТЗ.Колонки.Добавить("recalculateUnitsOnSwitch");
		ТЗ.Колонки.Добавить("saveProductsFilterMode");
		
		//Оформление
		ТЗ.Колонки.Добавить("minGoodFontSizeInDocListMode");
		ТЗ.Колонки.Добавить("maxGoodFontSizeInDocListMode");
		ТЗ.Колонки.Добавить("minGoodFontSizeInCatalogListMode");
		ТЗ.Колонки.Добавить("maxGoodFontSizeInCatalogListMode");
		ТЗ.Колонки.Добавить("minGoodFontSizeInTableMode");
		ТЗ.Колонки.Добавить("maxGoodFontSizeInTableMode");
		ТЗ.Колонки.Добавить("minGoodGroupFontSizeInTree");
		ТЗ.Колонки.Добавить("maxGoodGroupFontSizeInTree");
		ТЗ.Колонки.Добавить("currencyName");
		//Розница
		ТЗ.Колонки.Добавить("retailMode");
		ТЗ.Колонки.Добавить("retailPOSID");
		ТЗ.Колонки.Добавить("autoPrintOrder");
		ТЗ.Колонки.Добавить("autoPrintSale");
		ТЗ.Колонки.Добавить("autoPrintCashIn");
		ТЗ.Колонки.Добавить("autoPrintDepotOrder");
		ТЗ.Колонки.Добавить("autoPrintReturnIn");
		ТЗ.Колонки.Добавить("autoPrintQuestionnaire");
		ТЗ.Колонки.Добавить("startFinishQuestionnairePeriod");
		//Супервайзер
		ТЗ.Колонки.Добавить("messageOfTheDay");
		ТЗ.Колонки.Добавить("allowGPSTracking");
		ТЗ.Колонки.Добавить("allowBackgroundGPSTracking");
		ТЗ.Колонки.Добавить("backgroundGPSAccuracy");
		ТЗ.Колонки.Добавить("backgroundGPSDistanceFilter");
		ТЗ.Колонки.Добавить("dynamicRouteDistanceAndTime");
		ТЗ.Колонки.Добавить("dynamicRouteDistanceMaxAccuracy");
		ТЗ.Колонки.Добавить("workTimeStart");
		ТЗ.Колонки.Добавить("workTimeEnd");
		ТЗ.Колонки.Добавить("logSyncInterval");
		ТЗ.Колонки.Добавить("allowBaseRestore");
		//История продаж
		ТЗ.Колонки.Добавить("showSalesHistory");
		ТЗ.Колонки.Добавить("salesHistoryQty");
		ТЗ.Колонки.Добавить("salesHistoryLength");
		ТЗ.Колонки.Добавить("showRecommendedQty");
		ТЗ.Колонки.Добавить("recommendedQtyIncrementPercent");
		ТЗ.Колонки.Добавить("useActualSalesHistoryFromCenter");
		ТЗ.Колонки.Добавить("seasonalAdjustment");
		ТЗ.Колонки.Добавить("planningSalesHistoryPeriod");
		ТЗ.Колонки.Добавить("recommendedCoeff");
		
		//Безопасность
		ТЗ.Колонки.Добавить("prohibitEditingAfterPrint");
		ТЗ.Колонки.Добавить("logSyncMode");
		ТЗ.Колонки.Добавить("logAutodeletePeriod");
		ТЗ.Колонки.Добавить("maxLogSize");
		ТЗ.Колонки.Добавить("basePassword");
		//Служебные
		ТЗ.Колонки.Добавить("lastOrderNumber");
		ТЗ.Колонки.Добавить("lastSaleNumber");
		ТЗ.Колонки.Добавить("lastCashInNumber");
		ТЗ.Колонки.Добавить("lastDepotOrderNumber");
		ТЗ.Колонки.Добавить("lastReturnInNumber");
		ТЗ.Колонки.Добавить("lastCashOutNumber");
		ТЗ.Колонки.Добавить("lastReceiptNumber");
		ТЗ.Колонки.Добавить("lastReturnOutNumber");
		ТЗ.Колонки.Добавить("lastMerchandisingNumber");
		
		ТЗ.Колонки.Добавить("processedLogID");
		ТЗ.Колонки.Добавить("cashRest");
		
		ТЗ.Колонки.Добавить("posPicturesChangeIndex");
		ТЗ.Колонки.Добавить("goodPicturesChangeIndex");
		ТЗ.Колонки.Добавить("companyPicturesChangeIndex");
		ТЗ.Колонки.Добавить("agentPicturesChangeIndex");
		ТЗ.Колонки.Добавить("posChangeIndex");
		
		#КонецОбласти
		
		ПорядокСортировкиЦен = НастройкаИзКэша("pricesSortOrder", тмпАгент.Агент);
		ПорядокСортировки = "2";
		Если ПорядокСортировкиЦен = Перечисления.БПАГВариантыСортировкиТиповЦен.ПоАлфавиту Тогда
			ПорядокСортировки = "0";
		ИначеЕсли ПорядокСортировкиЦен = Перечисления.БПАГВариантыСортировкиТиповЦен.ПоВозрастаниюЦены Тогда
			ПорядокСортировки = "1";
		КонецЕсли;
		
		Выборка = Справочники.БПАГОрганизации.Выбрать();
		Если Выборка.Следующий() Тогда
			ИдентификаторБазы = БПАГ.ПревратитьСтрокуВТранслит(Выборка.Наименование);
		КонецЕсли;
		
		НоваяСтрока = ТЗ.Добавить();
		
		
		НоваяСтрока.uniqueID = тмпАгент.Код;
		НоваяСтрока.businessID = СпецификаПользователя;
		НоваяСтрока.baseID = ИдентификаторБазы;
		НоваяСтрока.name = СокрЛП(тмпАгент.Агент);
		НоваяСтрока.shortFIO = КраткаяРасшифровка;
		
		НоваяСтрока.picturesOverWiFiOnly = ?(НастройкаИзКэша("picturesOverWiFiOnly", тмпАгент.Агент), "1", "0");
		
		Если ВидПрикладногоРешения = "УТ11" Тогда
			НоваяСтрока.debtsByAllAnalytics = ?(НастройкаИзКэша("debtsByAllAnalytics", тмпАгент.Агент), "1", "0");
		КонецЕсли;
		
		НоваяСтрока.hideMaxDebt = ?(НастройкаИзКэша("hideMaxDebt", тмпАгент.Агент), "1", "0");
		
		НоваяСтрока.useActualSalesFromCenter = ?(НастройкаИзКэша("useActualSalesFromCenter", тмпАгент.Агент), "1", "0");
		
		Если ВидПрикладногоРешения = "УТ10" Тогда
			НоваяСтрока.useActualSalesHistoryFromCenter = ?(НастройкаИзКэша("useActualSalesHistoryFromCenter", тмпАгент.Агент), "1", "0");
		Иначе
			//NIY
			//НоваяСтрока.useActualSalesHistoryFromCenter = 0;
			НоваяСтрока.useActualSalesHistoryFromCenter = ?(НастройкаИзКэша("useActualSalesHistoryFromCenter", тмпАгент.Агент), "1", "0");
		КонецЕсли;
		
		НоваяСтрока.syncInterval = Формат(НастройкаИзКэша("syncInterval", тмпАгент.Агент), "ЧРД=.; ЧН=; ЧГ=0");
		НоваяСтрока.syncMode = Формат(НастройкаИзКэша("syncMode", тмпАгент.Агент), "ЧРД=.; ЧН=; ЧГ=0");
		НоваяСтрока.allowBackgroundSync = ?(НастройкаИзКэша("allowBackgroundSync", тмпАгент.Агент), "1", "0");
		НоваяСтрока.documentsSendingDelay = Формат(НастройкаИзКэша("documentsSendingDelay", тмпАгент.Агент), "ЧРД=.; ЧН=; ЧГ=0");
		НоваяСтрока.allowBackgroundLogSync = ?(НастройкаИзКэша("allowBackgroundLogSync", тмпАгент.Агент), "1", "0");
		НоваяСтрока.syncRequiredInterval = Формат(НастройкаИзКэша("syncRequiredInterval", тмпАгент.Агент), "ЧРД=.; ЧН=; ЧГ=0");
		
		НоваяСтрока.defaultCompanyID = СокрЛП(НастройкаИзКэша("defaultCompanyID", тмпАгент.Агент).Код);
		НоваяСтрока.allowCompanyChange = ?(НастройкаИзКэша("allowCompanyChange", тмпАгент.Агент), "1", "0");
		НоваяСтрока.defaultMobileDepotID = СокрЛП(НастройкаИзКэша("defaultMobileDepotID", тмпАгент.Агент).Код);
		НоваяСтрока.allowMobileDepotChange = ?(НастройкаИзКэша("allowMobileDepotChange", тмпАгент.Агент), "1", "0");
		НоваяСтрока.defaultCentralDepotID = СокрЛП(НастройкаИзКэша("defaultCentralDepotID", тмпАгент.Агент).Код);
		НоваяСтрока.allowCentralDepotChange = ?(НастройкаИзКэша("allowCentralDepotChange", тмпАгент.Агент), "1", "0");
		НоваяСтрока.defaultReturnInDepotID = СокрЛП(НастройкаИзКэша("defaultReturnInDepotID", тмпАгент.Агент).Код);
		НоваяСтрока.allowReturnInDepotChange = ?(НастройкаИзКэша("allowReturnInDepotChange", тмпАгент.Агент), "1", "0");
		НоваяСтрока.defaultQuestionnaireTypeID = СокрЛП(НастройкаИзКэша("defaultQuestionnaireTypeID", тмпАгент.Агент).Код);
		НоваяСтрока.startQuestionnaireTypeID = СокрЛП(НастройкаИзКэша("startQuestionnaireTypeID", тмпАгент.Агент).Код);
		НоваяСтрока.finishQuestionnaireTypeID = СокрЛП(НастройкаИзКэша("finishQuestionnaireTypeID", тмпАгент.Агент).Код);
		
		НоваяСтрока.exchangePeriod = Формат(НастройкаИзКэша("exchangePeriod", тмпАгент.Агент), "ЧРД=.; ЧН=; ЧГ=0");
		
		НоваяСтрока.restsByAllDepots = ?(НастройкаИзКэша("restsByAllDepots", тмпАгент.Агент), "1", "0");
		НоваяСтрока.restsByAllCompanies = ?(НастройкаИзКэша("restsByAllCompanies", тмпАгент.Агент), "1", "0");
		НоваяСтрока.restsInCatalogByDepotID = СокрЛП(НастройкаИзКэша("restsInCatalogByDepotID", тмпАгент.Агент).Код);
		НоваяСтрока.restsInCatalogByCompanyID = СокрЛП(НастройкаИзКэша("restsInCatalogByCompanyID", тмпАгент.Агент).Код);
		НоваяСтрока.allowNegativeRestsVT = Формат(НастройкаИзКэша("allowNegativeRestsVT", тмпАгент.Агент), "ЧРД=.; ЧН=; ЧГ=0");
		НоваяСтрока.allowNegativeRestsPS = Формат(НастройкаИзКэша("allowNegativeRestsPS", тмпАгент.Агент), "ЧРД=.; ЧН=; ЧГ=0");
		
		НоваяСтрока.returnInDocumentPeriod = Формат(НастройкаИзКэша("returnInDocumentPeriod", тмпАгент.Агент), "ЧРД=.; ЧН=; ЧГ=0");
		НоваяСтрока.allowReturnInDocumentPeriodChange = ?(НастройкаИзКэша("allowReturnInDocumentPeriodChange", тмпАгент.Агент), "1", "0");
		
		//Если ВидПрикладногоРешения = "УТ10" Тогда
			НоваяСтрока.defaultReceiptDepotID = СокрЛП(НастройкаИзКэша("defaultReceiptDepotID", тмпАгент.Агент).Код);
			НоваяСтрока.allowReceiptDepotChange = ?(НастройкаИзКэша("allowReceiptDepotChange", тмпАгент.Агент), "1", "0");
		//КонецЕсли;
		
		НоваяСтрока.defaultReturnOutDepotID = СокрЛП(НастройкаИзКэша("defaultReturnOutDepotID", тмпАгент.Агент).Код);
		НоваяСтрока.allowReturnOutDepotChange = ?(НастройкаИзКэша("allowReturnOutDepotChange", тмпАгент.Агент), "1", "0");
		НоваяСтрока.returnOutDocumentPeriod = Формат(НастройкаИзКэша("returnOutDocumentPeriod", тмпАгент.Агент), "ЧРД=.; ЧН=; ЧГ=0");
		НоваяСтрока.allowReturnOutDocumentPeriodChange = ?(НастройкаИзКэша("allowReturnOutDocumentPeriodChange", тмпАгент.Агент), "1", "0");
		НоваяСтрока.showBarcodes = ?(НастройкаИзКэша("showBarcodes", тмпАгент.Агент), "1", "0");
		НоваяСтрока.documentTypesCorrectingRests = СокрЛП(НастройкаИзКэша("documentTypesCorrectingRests", тмпАгент.Агент));
		НоваяСтрока.SDShowMinRest = ?(НастройкаИзКэша("SDShowMinRest", тмпАгент.Агент), "1", "0");
		НоваяСтрока.SDShowFacing = ?(НастройкаИзКэша("SDShowFacing", тмпАгент.Агент), "1", "0");
		
		//Взаиморасчеты
		НоваяСтрока.documentTypesCorrectingDebts = СокрЛП(НастройкаИзКэша("documentTypesCorrectingDebts", тмпАгент.Агент));
		
		//Ценообразование
		НоваяСтрока.defaultPriceTypeID = СокрЛП(НастройкаИзКэша("defaultPriceTypeID", тмпАгент.Агент).Код);
		НоваяСтрока.allowPriceTypeChange = ?(НастройкаИзКэша("allowPriceTypeChange", тмпАгент.Агент), "1", "0");
		НоваяСтрока.showAllPrices = ?(НастройкаИзКэша("showAllPrices", тмпАгент.Агент), "1", "0");
		НоваяСтрока.pricesSortOrder = ПорядокСортировки;
		НоваяСтрока.allowManualPrices = ?(НастройкаИзКэша("allowManualPrices", тмпАгент.Агент), "1", "0");
		НоваяСтрока.controlMinPriceType = ?(НастройкаИзКэша("controlMinPriceType", тмпАгент.Агент), "1", "0");
		НоваяСтрока.minManualPriceTypeID = СокрЛП(НастройкаИзКэша("minManualPriceTypeID", тмпАгент.Агент).Код);
		НоваяСтрока.showMinPrice = ?(НастройкаИзКэша("showMinPrice", тмпАгент.Агент), "1", "0");
		НоваяСтрока.allowNullPrices = ?(НастройкаИзКэша("allowNullPrices", тмпАгент.Агент), "1", "0");
		НоваяСтрока.maxGlobalDiscount = Формат(НастройкаИзКэша("maxGlobalDiscount", тмпАгент.Агент), "ЧРД=.; ЧН=; ЧГ=0");
		
		НоваяСтрока.defaultSupplierPriceTypeID = СокрЛП(НастройкаИзКэша("defaultSupplierPriceTypeID", тмпАгент.Агент).Код);
		//НоваяСтрока.allowManualPricesInReceipt = ?(НастройкаИзКэша("allowManualPricesInReceipt", тмпАгент.Агент), "1", "0");
		//НоваяСтрока.allowManualPricesInReturnOut = ?(НастройкаИзКэша("allowManualPricesInReturnOut", тмпАгент.Агент), "1", "0");
		НоваяСтрока.allowManualPricesForDocumentTypes = СокрЛП(НастройкаИзКэша("allowManualPricesForDocumentTypes", тмпАгент.Агент));
		
		
		НоваяСтрока.discountCalculationMode = ?(СпецификаПользователя = "BY", "1", "0");
		НоваяСтрока.globalManualDiscountMode = ?(СпецификаПользователя = "KREPEZHSV", "1", "0");
		
		НоваяСтрока.measurementPointsModeRepeat = ?(НастройкаИзКэша("measurementPointsModeRepeat", тмпАгент.Агент), "1", "0");
		НоваяСтрока.showRestsInCurrentMeasurementPoint = ?(НастройкаИзКэша("showRestsInCurrentMeasurementPoint", тмпАгент.Агент), "1", "0");
		НоваяСтрока.showCatalogPricesInBaseUnit = ?(НастройкаИзКэша("showCatalogPricesInBaseUnit", тмпАгент.Агент), "1", "0");
		НоваяСтрока.showNegativeRestsWarning = ?(НастройкаИзКэша("showNegativeRestsWarning", тмпАгент.Агент), "1", "0");
		
		НоваяСтрока.showGetCashDialog = Формат(НастройкаИзКэша("showGetCashDialog", тмпАгент.Агент), "ЧРД=.; ЧН=; ЧГ=0");
		
		НоваяСтрока.cashInChooseDebtModeAuto = ?(НастройкаИзКэша("cashInChooseDebtModeAuto", тмпАгент.Агент), "1", "0");
		НоваяСтрока.allowEmptyAnalytics =  ?(СпецификаПользователя = "FT", "1", "0");
		
		НоваяСтрока.deliveryDateShift = Формат(НастройкаИзКэша("deliveryDateShift", тмпАгент.Агент), "ЧРД=.; ЧН=; ЧГ=0");
		НоваяСтрока.highlightDebtors = Формат(НастройкаИзКэша("highlightDebtors", тмпАгент.Агент), "ЧРД=.; ЧН=; ЧГ=0");
		НоваяСтрока.showArticles = ?(НастройкаИзКэша("showArticles", тмпАгент.Агент), "1", "0");
		НоваяСтрока.calcOverwriteMode = ?(НастройкаИзКэша("calcOverwriteMode", тмпАгент.Агент), "1", "0");
		НоваяСтрока.recalculateUnitsOnSwitch = ?(НастройкаИзКэша("recalculateUnitsOnSwitch", тмпАгент.Агент), "1", "0");
		НоваяСтрока.saveProductsFilterMode = ?(НастройкаИзКэша("saveProductsFilterMode", тмпАгент.Агент), "1", "0");
		
		//Оформление
		НоваяСтрока.minGoodFontSizeInDocListMode = Формат(НастройкаИзКэша("minGoodFontSizeInDocListMode", тмпАгент.Агент), "ЧРД=.; ЧН=; ЧГ=0");
		НоваяСтрока.maxGoodFontSizeInDocListMode = Формат(НастройкаИзКэша("maxGoodFontSizeInDocListMode", тмпАгент.Агент), "ЧРД=.; ЧН=; ЧГ=0");
		НоваяСтрока.minGoodFontSizeInCatalogListMode = Формат(НастройкаИзКэша("minGoodFontSizeInCatalogListMode", тмпАгент.Агент), "ЧРД=.; ЧН=; ЧГ=0");
		НоваяСтрока.maxGoodFontSizeInCatalogListMode = Формат(НастройкаИзКэша("maxGoodFontSizeInCatalogListMode", тмпАгент.Агент), "ЧРД=.; ЧН=; ЧГ=0");
		НоваяСтрока.minGoodFontSizeInTableMode = Формат(НастройкаИзКэша("minGoodFontSizeInTableMode", тмпАгент.Агент), "ЧРД=.; ЧН=; ЧГ=0");
		НоваяСтрока.maxGoodFontSizeInTableMode = Формат(НастройкаИзКэша("maxGoodFontSizeInTableMode", тмпАгент.Агент), "ЧРД=.; ЧН=; ЧГ=0");
		НоваяСтрока.minGoodGroupFontSizeInTree = Формат(НастройкаИзКэша("minGoodGroupFontSizeInTree", тмпАгент.Агент), "ЧРД=.; ЧН=; ЧГ=0");
		НоваяСтрока.maxGoodGroupFontSizeInTree = Формат(НастройкаИзКэша("maxGoodGroupFontSizeInTree", тмпАгент.Агент), "ЧРД=.; ЧН=; ЧГ=0");
		НоваяСтрока.currencyName = НастройкаИзКэша("currencyName", тмпАгент.Агент);
		
		//Розница
		НоваяСтрока.retailMode = ?(НастройкаИзКэша("retailMode", тмпАгент.Агент), "1", "0");
		НоваяСтрока.retailPOSID = СокрЛП(НастройкаИзКэша("retailPOSID", тмпАгент.Агент).Код);
		НоваяСтрока.autoPrintOrder = ?(НастройкаИзКэша("autoPrintOrder", тмпАгент.Агент), "1", "0");
		НоваяСтрока.autoPrintSale = ?(НастройкаИзКэша("autoPrintSale", тмпАгент.Агент), "1", "0");
		НоваяСтрока.autoPrintCashIn = ?(НастройкаИзКэша("autoPrintCashIn", тмпАгент.Агент), "1", "0");
		НоваяСтрока.autoPrintDepotOrder = ?(НастройкаИзКэша("autoPrintDepotOrder", тмпАгент.Агент), "1", "0");
		НоваяСтрока.autoPrintReturnIn = ?(НастройкаИзКэша("autoPrintReturnIn", тмпАгент.Агент), "1", "0");
		НоваяСтрока.autoPrintQuestionnaire = ?(НастройкаИзКэша("autoPrintQuestionnaire", тмпАгент.Агент), "1", "0");
		НоваяСтрока.startFinishQuestionnairePeriod = Формат(НастройкаИзКэша("startFinishQuestionnairePeriod", тмпАгент.Агент), "ЧРД=.; ЧН=; ЧГ=0");
		
		//Супервайзер
		НоваяСтрока.messageOfTheDay = ПодготовитьСтрокуДляXML(НастройкаИзКэша("messageOfTheDay", тмпАгент.Агент)); 
		Если ПодготовитьСтрокуДляXML(НастройкаИзКэша("messageOfTheDay", тмпАгент.Агент)) = "Ошибка" Тогда
			НоваяСтрока.messageOfTheDay = ""; 
		Конецесли;	
		
		НоваяСтрока.allowGPSTracking = ?(НастройкаИзКэша("allowGPSTracking", тмпАгент.Агент), "1", "0");
		НоваяСтрока.allowBackgroundGPSTracking = ?(НастройкаИзКэша("allowBackgroundGPSTracking", тмпАгент.Агент), "1", "0");
		НоваяСтрока.backgroundGPSAccuracy = Формат(НастройкаИзКэша("backgroundGPSAccuracy", тмпАгент.Агент), "ЧРД=.; ЧН=; ЧГ=0");
		НоваяСтрока.backgroundGPSDistanceFilter = Формат(НастройкаИзКэша("backgroundGPSDistanceFilter", тмпАгент.Агент), "ЧРД=.; ЧН=; ЧГ=0");
		НоваяСтрока.dynamicRouteDistanceAndTime = "1";
		НоваяСтрока.dynamicRouteDistanceMaxAccuracy = НоваяСтрока.backgroundGPSAccuracy;
		НоваяСтрока.workTimeStart = СокрЛП(НастройкаИзКэша("workTimeStart", тмпАгент.Агент));
		НоваяСтрока.workTimeEnd = СокрЛП(НастройкаИзКэша("workTimeEnd", тмпАгент.Агент));
		НоваяСтрока.logSyncInterval = Формат(НастройкаИзКэша("logSyncInterval", тмпАгент.Агент), "ЧРД=.; ЧН=; ЧГ=0");
		НоваяСтрока.allowBaseRestore = ?(НастройкаИзКэша("allowBaseRestore", тмпАгент.Агент), "1", "0");
		
		//История продаж
		НоваяСтрока.showSalesHistory = ?(НастройкаИзКэша("showSalesHistory", тмпАгент.Агент), "1", "0");
		НоваяСтрока.salesHistoryQty = Формат(НастройкаИзКэша("salesHistoryQty", тмпАгент.Агент), "ЧРД=.; ЧН=; ЧГ=0");
		НоваяСтрока.salesHistoryLength = Формат(НастройкаИзКэша("salesHistoryLength", тмпАгент.Агент), "ЧРД=.; ЧН=; ЧГ=0");
		НоваяСтрока.showRecommendedQty = ?(НастройкаИзКэша("showRecommendedQty", тмпАгент.Агент), "1", "0");
		НоваяСтрока.recommendedQtyIncrementPercent = Формат(НастройкаИзКэша("recommendedQtyIncrementPercent", тмпАгент.Агент), "ЧРД=.; ЧН=; ЧГ=0");
		НоваяСтрока.seasonalAdjustment = Формат(НастройкаИзКэша("seasonalAdjustment", тмпАгент.Агент), "ЧРД=.; ЧН=; ЧГ=0");
		НоваяСтрока.planningSalesHistoryPeriod = Формат(НастройкаИзКэша("planningSalesHistoryPeriod", тмпАгент.Агент), "ЧРД=.; ЧН=; ЧГ=0");
		НоваяСтрока.recommendedCoeff = Формат(НастройкаИзКэша("recommendedCoeff", тмпАгент.Агент), "ЧРД=.; ЧН=; ЧГ=0");
		
		//Безопасность
		НоваяСтрока.prohibitEditingAfterPrint = ?(НастройкаИзКэша("prohibitEditingAfterPrint", тмпАгент.Агент), "1", "0");
		НоваяСтрока.logSyncMode = ?(НастройкаИзКэша("logSyncMode", тмпАгент.Агент), "1", "0");
		НоваяСтрока.logAutodeletePeriod = Формат(НастройкаИзКэша("logAutodeletePeriod", тмпАгент.Агент), "ЧРД=.; ЧН=; ЧГ=0");
		НоваяСтрока.maxLogSize = Формат(НастройкаИзКэша("maxLogSize", тмпАгент.Агент), "ЧРД=.; ЧН=; ЧГ=0");
		НоваяСтрока.basePassword = СокрЛП(ВыполнитьРасчет(СокрЛП(НастройкаИзКэша("basePassword", тмпАгент.Агент))));;
		
		//Служебные
		НоваяСтрока.lastOrderNumber = ПоследнийНомерЗаявки;
		НоваяСтрока.lastSaleNumber = ПоследнийНомерРеализации;
		НоваяСтрока.lastCashInNumber = ПоследнийНомерПКО;
		НоваяСтрока.lastDepotOrderNumber = ПоследнийНомерЗаказаНаСклад;
		НоваяСтрока.lastReturnInNumber = ПоследнийНомерВозвратаОтПокупателя;
		НоваяСтрока.lastMerchandisingNumber = ПоследнийНомерМерчандайзинга;
		
		НоваяСтрока.lastCashOutNumber = ПоследнийНомерРКО;
		НоваяСтрока.lastReceiptNumber = ПоследнийНомерПоступления;
		НоваяСтрока.lastReturnOutNumber = ПоследнийНомерВозвратаПоставщику;
		
		НоваяСтрока.posPicturesChangeIndex = БПАГ.БПАГПолучитьНастройку("posPicturesChangeIndex");
		НоваяСтрока.goodPicturesChangeIndex = БПАГ.БПАГПолучитьНастройку("goodPicturesChangeIndex");
		НоваяСтрока.companyPicturesChangeIndex = БПАГ.БПАГПолучитьНастройку("companyPicturesChangeIndex");
		НоваяСтрока.agentPicturesChangeIndex  = БПАГ.БПАГПолучитьНастройку("agentPicturesChangeIndex ");
		НоваяСтрока.posChangeIndex  = БПАГ.БПАГПолучитьНастройку("posChangeIndex");
		
		Попытка
			НоваяСтрока.processedLogID = Формат(НастройкаИзКэша("processedLogID", тмпАгент.Агент), "ЧРД=.; ЧН=; ЧГ=0");
		Исключение
		КонецПопытки;
		
		//Остаток по кассе агента
		Если СпецификаПользователя <> "SD" Тогда
			НоваяСтрока.cashRest = Формат(ПолучитьОстатокПоКассе(тмпАгент.Агент), "ЧДЦ=2; ЧРД=.; ЧГ=0");
		КонецЕсли;
		
		ТЗНастройкиДокументов = ПолучитьТЗНастройкиДокументов();
		Для Каждого тмпСтрока Из ТЗНастройкиДокументов Цикл
			ТЗ.Колонки.Добавить(тмпСтрока.ИдентификаторНастройки);
			НоваяСтрока[тмпСтрока.ИдентификаторНастройки] = Формат(тмпСтрока.СрокХранения, "ЧРД=.; ЧН=; ЧГ=0");
		КонецЦикла;
		
		тмпТЗАгенты = СоздатьТаблицуИзОдногоАгента(тмпАгент);
		
		СформироватьPlist(ТЗ, "uniqueID", тмпТЗАгенты, "id", "настроек", Ложь);
		
	КонецЦикла;
	
	//Виды свойств документов
	//Если (СпецификаПользователя = "FT") ИЛИ (СпецификаПользователя = "KREPEZHSV") Тогда // ПАКЛ 23.08.2015
	Если (ВидПрикладногоРешения = "УТ11") ИЛИ (ВидПрикладногоРешения = "УНФ") Тогда
		
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("uniqueID");
		ТЗ.Колонки.Добавить("docType");
		ТЗ.Колонки.Добавить("name");
		ТЗ.Колонки.Добавить("identifier");
		ТЗ.Колонки.Добавить("readOnly");
		ТЗ.Колонки.Добавить("type");
		ТЗ.Колонки.Добавить("sort");
		ТЗ.Колонки.Добавить("required");
		ТЗ.Колонки.Добавить("values");
		
		Если СпецификаПользователя = "FT" Тогда
			
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.uniqueID = "FTReady";
			НоваяСтрока.docType = "Заявка";
			НоваяСтрока.name = "готов"; 
			НоваяСтрока.identifier = "FTReady";
			НоваяСтрока.readOnly = "0";
			НоваяСтрока.type = "boolean";
			НоваяСтрока.required = "1";
			НоваяСтрока.sort = 1;
			
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.uniqueID = "1";
			НоваяСтрока.docType = "Заявка";
			НоваяСтрока.name = "оплата";
			НоваяСтрока.identifier = "FTPaymentMethod";
			НоваяСтрока.readOnly = "0";
			НоваяСтрока.type = "list";
			НоваяСтрока.sort = 2;
			ТЗВложенная = Новый ТаблицаЗначений;
			ТЗВложенная.Колонки.Добавить("sort");
			ТЗВложенная.Колонки.Добавить("value");
			
			НоваяВложеннаяСтрока = ТЗВложенная.Добавить();
			НоваяВложеннаяСтрока.sort = 1;
			НоваяВложеннаяСтрока.value = "наличная";
			
			НоваяВложеннаяСтрока = ТЗВложенная.Добавить();
			НоваяВложеннаяСтрока.sort = 2;
			НоваяВложеннаяСтрока.value = "безналичная";
			
			НоваяВложеннаяСтрока = ТЗВложенная.Добавить();
			НоваяВложеннаяСтрока.sort = 3;
			НоваяВложеннаяСтрока.value = "отсрочка";
			
			НоваяСтрока.values = ТЗВложенная;
			
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.uniqueID = "2";
			НоваяСтрока.docType = "Заявка";
			НоваяСтрока.name = "забрать долг";
			НоваяСтрока.identifier = "FTGetDebt";
			НоваяСтрока.readOnly = "0";
			НоваяСтрока.type = "number";
			НоваяСтрока.sort = 3;
			
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.uniqueID = "FTDriver";
			НоваяСтрока.docType = "Заявка";
			НоваяСтрока.name = "водитель"; 
			НоваяСтрока.identifier = "FTDriver";
			НоваяСтрока.readOnly = "1";
			НоваяСтрока.type = "string";
			НоваяСтрока.sort = 4;
			
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.uniqueID = "FTDriverPhone";
			НоваяСтрока.docType = "Заявка";
			НоваяСтрока.name = "тел. водителя"; 
			НоваяСтрока.identifier = "FTDriverPhone";
			НоваяСтрока.readOnly = "1";
			НоваяСтрока.type = "string";
			НоваяСтрока.sort = 5;
			
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.uniqueID = "FTDelivered";
			НоваяСтрока.docType = "Заявка";
			НоваяСтрока.name = "доставлен"; 
			НоваяСтрока.identifier = "FTDelivered";
			НоваяСтрока.readOnly = "1";
			НоваяСтрока.type = "boolean";
			НоваяСтрока.sort = 6;
			
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.uniqueID = "FTReadyReturn";
			НоваяСтрока.docType = "Возврат от покупателя";
			НоваяСтрока.name = "готов"; 
			НоваяСтрока.identifier = "FTReadyReturn";
			НоваяСтрока.readOnly = "0";
			НоваяСтрока.type = "boolean";
			НоваяСтрока.required = "1";
			НоваяСтрока.sort = 7;
			
		ИначеЕсли СпецификаПользователя = "KREPEZHSV" Тогда
			
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.uniqueID = "ADDITIONAL_DISCOUNT";
			НоваяСтрока.docType = "Заявка";
			НоваяСтрока.name = "Доп. скидка"; 
			НоваяСтрока.identifier = "ADDITIONAL_DISCOUNT";
			НоваяСтрока.readOnly = "0";
			НоваяСтрока.type = "boolean";
			НоваяСтрока.sort = 1;
		ИначеЕсли СпецификаПользователя = "SD" Тогда
			// выгрузка "номеров пачек"
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.uniqueID = "1";
			НоваяСтрока.docType = "Заявка";
			НоваяСтрока.name = "Пачка"; 
			НоваяСтрока.identifier = "FTPackage";
			НоваяСтрока.readOnly = "0";
			НоваяСтрока.type = "list";
			НоваяСтрока.sort = 1;
			
			ЗапросПачки = Новый Запрос(
			"ВЫБРАТЬ
			|	НомераПачек.Наименование КАК value,
			|	НомераПачек.Код КАК sort
			|ИЗ
			|	Справочник.НомераПачек КАК НомераПачек
			|ГДЕ
			|	НомераПачек.ВыгружатьВКПК");
			
			НоваяСтрока.values = ЗапросПачки.Выполнить().Выгрузить();
			
			// "Откаты"
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.uniqueID = "2";
			НоваяСтрока.docType = "ПКО";
			НоваяСтрока.name = "Бонус"; 
			НоваяСтрока.identifier = "FTBonus";
			НоваяСтрока.readOnly = "0";
			НоваяСтрока.type = "number";
			НоваяСтрока.sort = 1;

		КонецЕсли;
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.uniqueID = "Merch_foto";
		НоваяСтрока.docType = Перечисления.БПАГВидыДокументов.Мерчандайзинг;
		НоваяСтрока.name = "Фото документа"; 
		НоваяСтрока.identifier = "Merch_foto";
		НоваяСтрока.readOnly = "0";
		НоваяСтрока.type = "photo";
		НоваяСтрока.sort = "";

	Иначе
		
		Запрос = Новый Запрос();
		
		УникКатегории = ?(ВидПрикладногоРешения = "УТ10" ,"Код", "Заголовок");
		УсловиеКатегории = ?(ВидПрикладногоРешения = "УТ10" ,"ССЫЛКА Справочник.КатегорииОбъектов", "= 17");
		НаименованиеКатегории = ?(ВидПрикладногоРешения = "УТ10" ,"Наименование", "Заголовок");
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА БПАГКатегорииДокументов.Категория " + УсловиеКатегории + "
		|			ТОГДА ВЫБОР
		|					КОГДА БПАГКатегорииДокументов.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.БПАГВидыДокументов.Заявка)
		|						ТОГДА ""KORD"" + БПАГКатегорииДокументов.Категория." + УникКатегории + "
		|					КОГДА БПАГКатегорииДокументов.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.БПАГВидыДокументов.Реализация)
		|						ТОГДА ""KSAL"" + БПАГКатегорииДокументов.Категория." + УникКатегории + "
		|					КОГДА БПАГКатегорииДокументов.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.БПАГВидыДокументов.ВозвратОтПокупателя)
		|						ТОГДА ""KRET"" + БПАГКатегорииДокументов.Категория." + УникКатегории + "
		|					КОГДА БПАГКатегорииДокументов.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.БПАГВидыДокументов.ПКО)
		|						ТОГДА ""KCIN"" + БПАГКатегорииДокументов.Категория." + УникКатегории + "
		|					КОГДА БПАГКатегорииДокументов.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.БПАГВидыДокументов.ЗаказНаСклад)
		|						ТОГДА ""KDEP"" + БПАГКатегорииДокументов.Категория." + УникКатегории + "
		|					КОГДА БПАГКатегорииДокументов.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.БПАГВидыДокументов.Анкета)
		|						ТОГДА ""KQUE"" + БПАГКатегорииДокументов.Категория." + УникКатегории + "
		|					КОГДА БПАГКатегорииДокументов.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.БПАГВидыДокументов.Перемещение)
		|						ТОГДА ""KTRN"" + БПАГКатегорииДокументов.Категория." + УникКатегории + "
		|					КОГДА БПАГКатегорииДокументов.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.БПАГВидыДокументов.Поступление)
		|						ТОГДА ""KREC"" + БПАГКатегорииДокументов.Категория." + УникКатегории + "
		|					ИНАЧЕ ""K"" + БПАГКатегорииДокументов.Категория." + УникКатегории + "
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА БПАГКатегорииДокументов.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.БПАГВидыДокументов.Заявка)
		|					ТОГДА ""SORD"" + БПАГКатегорииДокументов.Категория." + УникКатегории + "
		|				КОГДА БПАГКатегорииДокументов.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.БПАГВидыДокументов.Реализация)
		|					ТОГДА ""SSAL"" + БПАГКатегорииДокументов.Категория." + УникКатегории + "
		|				КОГДА БПАГКатегорииДокументов.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.БПАГВидыДокументов.ВозвратОтПокупателя)
		|					ТОГДА ""SRET"" + БПАГКатегорииДокументов.Категория." + УникКатегории + "
		|				КОГДА БПАГКатегорииДокументов.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.БПАГВидыДокументов.ПКО)
		|					ТОГДА ""SCIN"" + БПАГКатегорииДокументов.Категория." + УникКатегории + "
		|				КОГДА БПАГКатегорииДокументов.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.БПАГВидыДокументов.ЗаказНаСклад)
		|					ТОГДА ""SDEP"" + БПАГКатегорииДокументов.Категория." + УникКатегории + "
		|				КОГДА БПАГКатегорииДокументов.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.БПАГВидыДокументов.Анкета)
		|					ТОГДА ""SQUE"" + БПАГКатегорииДокументов.Категория." + УникКатегории + "
		|				КОГДА БПАГКатегорииДокументов.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.БПАГВидыДокументов.Перемещение)
		|					ТОГДА ""STRN"" + БПАГКатегорииДокументов.Категория." + УникКатегории + "
		|				КОГДА БПАГКатегорииДокументов.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.БПАГВидыДокументов.Поступление)
		|					ТОГДА ""SREC"" + БПАГКатегорииДокументов.Категория." + УникКатегории + "
		|				ИНАЧЕ ""S"" + БПАГКатегорииДокументов.Категория." + УникКатегории + "
		|			КОНЕЦ
		|	КОНЕЦ КАК uniqueID,
		|	БПАГКатегорииДокументов.ВидДокумента КАК docType,
		|	БПАГКатегорииДокументов.Категория." + НаименованиеКатегории + " КАК name,
		|	БПАГКатегорииДокументов.Код КАК КодКатегории,
		|	БПАГКатегорииДокументов.Категория КАК Категория,
		|	БПАГКатегорииДокументов.Идентификатор КАК identifier,
		|	ВЫБОР
		|		КОГДА БПАГКатегорииДокументов.Невидимый
		|			ТОГДА ""1""
		|		ИНАЧЕ ""0""
		|	КОНЕЦ КАК invisible,
		|	ВЫБОР
		|		КОГДА БПАГКатегорииДокументов.Обязательный
		|			ТОГДА ""1""
		|		ИНАЧЕ ""0""
		|	КОНЕЦ КАК required,
		|	БПАГКатегорииДокументов.Тип КАК Тип,
		|	ВЫБОР
		|		КОГДА БПАГКатегорииДокументов.ТолькоЧтение
		|			ТОГДА ""1""
		|		ИНАЧЕ ""0""
		|	КОНЕЦ КАК readOnly
		|ИЗ
		|	РегистрСведений.БПАГКатегорииДокументов КАК БПАГКатегорииДокументов
		|ГДЕ
		|	НЕ БПАГКатегорииДокументов.Категория.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	БПАГКатегорииДокументов.Категория.Наименование";
		
		Ном = 0;
		//ПАКЛ В старых версиях УТ 11 при не использовании доп. реквизитов не работает "БПАГКатегорииДокументов.Категория.Заголовок"
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("Тип");
		ТЗ.Колонки.Добавить("uniqueID");
		
		Попытка
			ТЗ = Запрос.Выполнить().Выгрузить();
		Исключение
		КонецПопытки;
		//ПАКЛ->
		Если ВидПрикладногоРешения = "УТ11" Тогда
			Для Каждого тмпСтрока Из ТЗ Цикл
				тмпСтрока.uniqueID = тмпСтрока.uniqueID + "-:=" + СокрЛП(тмпСтрока.КодКатегории);
			КонецЦикла;
		КонецЕсли;
		//ПАКЛ<-
		ТЗ.Колонки.Добавить("type");
		ТЗ.Колонки.Добавить("sort");
		ТЗ.Колонки.Добавить("defaultValue"); //ПАКЛ
		ТЗ.Колонки.Добавить("values");//ПАКЛ
		Если СпецификаПользователя <> "SD" Тогда
			Для Каждого тмпСтрока Из ТЗ Цикл
			Ном = Ном + 1;
			тмпСтрока.sort = Ном;
			Если СокрЛП(тмпСтрока.Тип) = "Булево" Тогда
				тмпСтрока.type = "boolean";
			ИначеЕсли СокрЛП(тмпСтрока.Тип) = "Дата" Тогда
				тмпСтрока.type = "date";
			ИначеЕсли СокрЛП(тмпСтрока.Тип) = "Строка" Тогда
				тмпСтрока.type = "string";
			ИначеЕсли СокрЛП(тмпСтрока.Тип) = "Число" Тогда
				тмпСтрока.type = "number";
			ИначеЕсли СокрЛП(тмпСтрока.Тип) = "Список" Тогда
				тмпСтрока.type = "list";
			Иначе
				тмпСтрока.type = "string";
			КонецЕсли;
			//ПАКЛ->
			Если СокрЛП(тмпСтрока.Тип) = "Список" Тогда
				//Заполнить значения списка значений
				
				ТЗValues = Новый ТаблицаЗначений;
				ТЗValues.Колонки.Добавить("sort");
				ТЗValues.Колонки.Добавить("value");
				
				Запрос = Новый Запрос;
				
				Запрос.УстановитьПараметр("Свойство", тмпСтрока.Категория);
				Запрос.Текст =
				 "ВЫБРАТЬ
				 |	ЗначенияСвойствОбъектов.Ссылка,
				 |	ЗначенияСвойствОбъектов.Наименование
				 |ИЗ
				 |	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
				 |ГДЕ
				 |	ЗначенияСвойствОбъектов.Владелец = &Свойство
				 |	И НЕ ЗначенияСвойствОбъектов.ПометкаУдаления
				 |	И НЕ ЗначенияСвойствОбъектов.ЭтоГруппа"
				 ;
			 	ТЗЗначенийСвойства = Запрос.Выполнить().Выгрузить();
				
				НомерПоПорядку = 1;
				Для Каждого тмпЗначениеСвойства из ТЗЗначенийСвойства Цикл
					НоваяСтрока = ТЗValues.Добавить();
					НоваяСтрока.sort = НомерПоПорядку;
					НоваяСтрока.value = тмпЗначениеСвойства.Наименование;
					НомерПоПорядку = НомерПоПорядку +1;
				КонецЦикла;
				тмпСтрока.values = ТЗValues;
			КонецЕсли;
			
			Если СокрЛП(тмпСтрока.identifier) = "NOCASHIN" Тогда
				тмпСтрока.defaultValue = "0";
			КонецЕсли;	
			//ПАКЛ<-	
		КонецЦикла;	
		ТЗ.Колонки.Удалить("Тип");
		ТЗ.Колонки.Удалить("Категория");
		ТЗ.Колонки.Удалить("КодКатегории");
		КонецЕсли;
		//ПАКЛ->
		Если (ВидПрикладногоРешения = "УТ10") и (СпецификаПользователя <> "SD") Тогда
			//Настройка принимать оплату платежными картами
			ОплатаПлатежнымиКартами = БПАГ.БПАГПолучитьНастройку("1СПриниматьОплатуПлатежнымиКартами");
			Если ОплатаПлатежнымиКартами Тогда
				НоваяСтрока = ТЗ.Добавить();
				НоваяСтрока.uniqueID = "ADD_karti";
				НоваяСтрока.docType = Перечисления.БПАГВидыДокументов.ПКО;
				НоваяСтрока.name = "Оплата платежной картой"; 
				НоваяСтрока.identifier = "ADD_karti";
				НоваяСтрока.readOnly = "0";
				НоваяСтрока.type = "boolean";
				НоваяСтрока.sort = 1;
	        КонецЕсли;
		КонецЕсли;
		//ПАКЛ<-
	КонецЕсли;
	
	СформироватьPlist(ТЗ, "uniqueID", Агенты, "documentPropertyTypes", "видов свойств документов", Истина, Ложь);
	
	//documentRowPropertyTypes.plist - виды свойств строк документов
	Если СпецификаПользователя = "Adal" Тогда
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("uniqueID");
		ТЗ.Колонки.Добавить("documentType");
		ТЗ.Колонки.Добавить("type");
		ТЗ.Колонки.Добавить("name");
		ТЗ.Колонки.Добавить("identifier");
		ТЗ.Колонки.Добавить("invisible");
		ТЗ.Колонки.Добавить("readOnly");
		ТЗ.Колонки.Добавить("defaultValue");
		ТЗ.Колонки.Добавить("required");
		ТЗ.Колонки.Добавить("placeholder");
		ТЗ.Колонки.Добавить("sort");
		ТЗ.Колонки.Добавить("values");
		
		ТЗValues = Новый ТаблицаЗначений;
		ТЗValues.Колонки.Добавить("sort");
		ТЗValues.Колонки.Добавить("value");
		НоваяСтрока = ТЗValues.Добавить();
		НоваяСтрока.sort = "1";
		НоваяСтрока.value = "Транспортная течь или бой";
		НоваяСтрока = ТЗValues.Добавить();
		НоваяСтрока.sort = "2";
		НоваяСтрока.value = "Истечение срока годности";
		НоваяСтрока = ТЗValues.Добавить();
		НоваяСтрока.sort = "3";
		НоваяСтрока.value = "Прокисание или вздутие до срока годности";
		НоваяСтрока = ТЗValues.Добавить();
		НоваяСтрока.sort = "4";
		НоваяСтрока.value = "Некачественная упаковка (течь по шву или непроклейка крышки)";
		НоваяСтрока = ТЗValues.Добавить();
		НоваяСтрока.sort = "5";
		НоваяСтрока.value = "Некачественное содержание (консистенция, цвет, запах, вкус)";
		НоваяСтрока = ТЗValues.Добавить();
		НоваяСтрока.sort = "6";
		НоваяСтрока.value = "Без даты, без маркировки или ошибочная маркировка";
		НоваяСтрока = ТЗValues.Добавить();
		НоваяСтрока.sort = "7";
		НоваяСтрока.value = "Недолив или недовес";
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.uniqueID = "A00000001"; 
		НоваяСтрока.documentType = "ReturnIn";
		НоваяСтрока.type = "list";
		НоваяСтрока.name = "Причина возврата";
		НоваяСтрока.identifier = "ПричинаВозврата";
		НоваяСтрока.invisible = "0";
		НоваяСтрока.readOnly = "0";
		НоваяСтрока.required = "0";
		НоваяСтрока.placeholder = "Укажите причину";
		НоваяСтрока.sort = "1";
		НоваяСтрока.values = ТЗValues;
		
		СформироватьPlist(ТЗ, "uniqueID", Агенты, "documentRowPropertyTypes", "видов свойств строк документов", Истина, Ложь);
	КонецЕсли;
	
	Если СпецификаПользователя = "SB" Тогда
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("uniqueID");
		ТЗ.Колонки.Добавить("documentType");
		ТЗ.Колонки.Добавить("type");
		ТЗ.Колонки.Добавить("name");
		ТЗ.Колонки.Добавить("identifier");
		ТЗ.Колонки.Добавить("invisible");
		ТЗ.Колонки.Добавить("readOnly");
		ТЗ.Колонки.Добавить("defaultValue");
		ТЗ.Колонки.Добавить("required");
		ТЗ.Колонки.Добавить("placeholder");
		ТЗ.Колонки.Добавить("sort");
		ТЗ.Колонки.Добавить("values");
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.uniqueID = "A00000001"; 
		НоваяСтрока.documentType = "Receipt";
		НоваяСтрока.type = "string";
		НоваяСтрока.name = "Затрата";
		НоваяСтрока.identifier = "Затрата";
		НоваяСтрока.invisible = "0";
		НоваяСтрока.readOnly = "0";
		НоваяСтрока.required = "0";
		НоваяСтрока.placeholder = "Укажите затрату";
		НоваяСтрока.sort = "1";
		
		СформироватьPlist(ТЗ, "uniqueID", Агенты, "documentRowPropertyTypes", "видов свойств строк документов", Истина, Ложь);
	КонецЕсли;
	Если (ВидПрикладногоРешения = "УТ11") или (СпецификаПользователя = "SD") Тогда		
		НастройкиДокумента = ПолучитьНастройкиДокумента(Перечисления.БПАГВидыДокументов.Мерчандайзинг, ТекущаяДата(), тмпАгент.Агент);
		Если НастройкиДокумента <> Неопределено Тогда
			Если НЕ НастройкиДокумента.НеПоказыватьНаУстройстве Тогда
				ТЗ = Новый ТаблицаЗначений;
				ТЗ.Колонки.Добавить("uniqueID");
				ТЗ.Колонки.Добавить("documentType");
				ТЗ.Колонки.Добавить("type");
				ТЗ.Колонки.Добавить("name");
				ТЗ.Колонки.Добавить("identifier");
				ТЗ.Колонки.Добавить("invisible");
				ТЗ.Колонки.Добавить("readOnly");
				ТЗ.Колонки.Добавить("defaultValue");
				ТЗ.Колонки.Добавить("required");
				ТЗ.Колонки.Добавить("placeholder");
				ТЗ.Колонки.Добавить("sort");
				ТЗ.Колонки.Добавить("values");
				
				НоваяСтрока = ТЗ.Добавить();
				НоваяСтрока.uniqueID = "MP0001"; 
				НоваяСтрока.documentType = "Merchandising";
				НоваяСтрока.type = "photo";
				НоваяСтрока.name = "";
				НоваяСтрока.identifier = "MerchPhoto1";
				НоваяСтрока.invisible = "0";
				НоваяСтрока.readOnly = "0";
				НоваяСтрока.required = "0";
				НоваяСтрока.placeholder = "";
				НоваяСтрока.sort = "1";
				
				СформироватьPlist(ТЗ, "uniqueID", Агенты, "documentRowPropertyTypes", "видов свойств строк документов", Истина, Ложь);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	//Права
	Попытка
		
	Для Каждого тмпАгент Из Агенты Цикл		
		
	//Запрос = Новый Запрос;
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	БПАГНастройкиДокументовСрезПоследних.*,
	//|	1 КАК Релевантность
	//|ИЗ
	//|	РегистрСведений.БПАГНастройкиДокументов.СрезПоследних(&МоментВремени, ) КАК БПАГНастройкиДокументовСрезПоследних
	//|ГДЕ
	//|	БПАГНастройкиДокументовСрезПоследних.Агент = &Агент
	//|	И БПАГНастройкиДокументовСрезПоследних.Агент <> ЗНАЧЕНИЕ(Справочник.БПАГАгенты.ПустаяСсылка)
	//|	И БПАГНастройкиДокументовСрезПоследних.ВидДокумента = &ВидДокумента
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	БПАГНастройкиДокументовСрезПоследних.*,
	//|	2
	//|ИЗ
	//|	РегистрСведений.БПАГНастройкиДокументов.СрезПоследних(&МоментВремени, ) КАК БПАГНастройкиДокументовСрезПоследних
	//|ГДЕ
	//|	БПАГНастройкиДокументовСрезПоследних.Профиль = &Профиль
	//|	И БПАГНастройкиДокументовСрезПоследних.Профиль <> ЗНАЧЕНИЕ(Справочник.БПАГПрофилиАгентов.ПустаяСсылка)
	//|	И БПАГНастройкиДокументовСрезПоследних.ВидДокумента = &ВидДокумента
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	БПАГНастройкиДокументовСрезПоследних.*,
	//|	3
	//|ИЗ
	//|	РегистрСведений.БПАГНастройкиДокументов.СрезПоследних(&МоментВремени, ) КАК БПАГНастройкиДокументовСрезПоследних
	//|ГДЕ
	//|	БПАГНастройкиДокументовСрезПоследних.Агент = ЗНАЧЕНИЕ(Справочник.БПАГАгенты.ПустаяСсылка)
	//|	И БПАГНастройкиДокументовСрезПоследних.Профиль = ЗНАЧЕНИЕ(Справочник.БПАГПрофилиАгентов.ПустаяСсылка)
	//|	И БПАГНастройкиДокументовСрезПоследних.ВидДокумента = &ВидДокумента
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Релевантность";
	//
	//Запрос.УстановитьПараметр("МоментВремени", ТекущаяДата());
	//Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	//Запрос.УстановитьПараметр("Агент", тмпАгент.Агент);
	//Запрос.УстановитьПараметр("Профиль", ?(тмпАгент.Агент = Неопределено, Неопределено, тмпАгент.Агент.Профиль));
		
		
	//ТЗ = Новый ТаблицаЗначений;
	//ТЗ.Колонки.Добавить("rightName");
	//ТЗ.Колонки.Добавить("value");
	
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
		//Если Выборка.ВидДокумента = Перечисления.БПАГВидыДокументов.ВозвратОтПокупателя Тогда
		//	НоваяСтрока = ТЗ.Добавить();
		//	НоваяСтрока.rightName = "returnInVisible";
		//	НоваяСтрока.value = ?(Выборка.НеПоказыватьНаУстройстве, "0", "1");
		//	
		//	НоваяСтрока = ТЗ.Добавить();
		//	НоваяСтрока.rightName = "allowReturnInDateChange";
		//	НоваяСтрока.value = ?(Выборка.РазрешатьИзменятьДату, "1", "0");
		//	
		//	НоваяСтрока = ТЗ.Добавить();
		//	НоваяСтрока.rightName = "allowReturnInManualDiscounts";
		//	НоваяСтрока.value = ?(Выборка.РучныеСкидкиРазрешены, "1", "0");
		//	
		//ИначеЕсли Выборка.ВидДокумента = Перечисления.БПАГВидыДокументов.ЗаказНаСклад Тогда
		//	НоваяСтрока = ТЗ.Добавить();
		//	НоваяСтрока.rightName = "depotOrderVisible";
		//	НоваяСтрока.value = ?(Выборка.НеПоказыватьНаУстройстве, "0", "1");
		//	
		//	НоваяСтрока = ТЗ.Добавить();
		//	НоваяСтрока.rightName = "allowDepotOrderDateChange";
		//	НоваяСтрока.value = ?(Выборка.РазрешатьИзменятьДату, "1", "0");
		//	
		//ИначеЕсли Выборка.ВидДокумента = Перечисления.БПАГВидыДокументов.Заявка Тогда
		//	НоваяСтрока = ТЗ.Добавить();
		//	НоваяСтрока.rightName = "orderVisible";
		//	НоваяСтрока.value = ?(Выборка.НеПоказыватьНаУстройстве, "0", "1");
		//	
		//	НоваяСтрока = ТЗ.Добавить();
		//	НоваяСтрока.rightName = "allowOrderDateChange";
		//	НоваяСтрока.value = ?(Выборка.РазрешатьИзменятьДату, "1", "0");
		//	
		//	НоваяСтрока = ТЗ.Добавить();
		//	НоваяСтрока.rightName = "allowOrderManualDiscounts";
		//	НоваяСтрока.value = ?(Выборка.РучныеСкидкиРазрешены, "1", "0");
		//	
		//ИначеЕсли Выборка.ВидДокумента = Перечисления.БПАГВидыДокументов.ПКО Тогда
		//	НоваяСтрока = ТЗ.Добавить();
		//	НоваяСтрока.rightName = "cashInVisible";
		//	НоваяСтрока.value = ?(Выборка.НеПоказыватьНаУстройстве, "0", "1");
		//	
		//	НоваяСтрока = ТЗ.Добавить();
		//	НоваяСтрока.rightName = "allowCashInDateChange";
		//	НоваяСтрока.value = ?(Выборка.РазрешатьИзменятьДату, "1", "0");
		//	
		//ИначеЕсли Выборка.ВидДокумента = Перечисления.БПАГВидыДокументов.Реализация Тогда
		//	НоваяСтрока = ТЗ.Добавить();
		//	НоваяСтрока.rightName = "saleVisible";
		//	НоваяСтрока.value = ?(Выборка.НеПоказыватьНаУстройстве, "0", "1");
		//	
		//	НоваяСтрока = ТЗ.Добавить();
		//	НоваяСтрока.rightName = "allowSaleDateChange";
		//	НоваяСтрока.value = ?(Выборка.РазрешатьИзменятьДату, "1", "0");
		//	
		//	НоваяСтрока = ТЗ.Добавить();
		//	НоваяСтрока.rightName = "allowSaleManualDiscounts";
		//	НоваяСтрока.value = ?(Выборка.РучныеСкидкиРазрешены, "1", "0");
		//	
		//ИначеЕсли Выборка.ВидДокумента = Перечисления.БПАГВидыДокументов.Анкета Тогда
		//	НоваяСтрока = ТЗ.Добавить();
		//	НоваяСтрока.rightName = "questionnaireVisible";
		//	НоваяСтрока.value = ?(Выборка.НеПоказыватьНаУстройстве, "0", "1");
		//	
		//	НоваяСтрока = ТЗ.Добавить();
		//	НоваяСтрока.rightName = "allowQuestionnaireDateChange";
		//	НоваяСтрока.value = ?(Выборка.РазрешатьИзменятьДату, "1", "0");
		//	
		//КонецЕсли;
		//КонецЦикла;
		//***************************************************************************************************************
		
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("rightName");
		ТЗ.Колонки.Добавить("value");
		
		НастройкиДокумента = ПолучитьНастройкиДокумента(Перечисления.БПАГВидыДокументов.Реализация, ТекущаяДата(), тмпАгент.Агент);
		Если НастройкиДокумента <> Неопределено Тогда
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.rightName = "saleVisible";
			НоваяСтрока.value = ?(НастройкиДокумента.НеПоказыватьНаУстройстве, "0", "1");
			
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.rightName = "allowSaleDateChange";
			НоваяСтрока.value = ?(НастройкиДокумента.РазрешатьИзменятьДату, "1", "0");
			
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.rightName = "allowSaleManualDiscounts";
			НоваяСтрока.value = ?(НастройкиДокумента.РучныеСкидкиРазрешены, "1", "0");
		КонецЕсли;
		
		НастройкиДокумента = ПолучитьНастройкиДокумента(Перечисления.БПАГВидыДокументов.ВозвратОтПокупателя, ТекущаяДата(), тмпАгент.Агент);
		Если НастройкиДокумента <> Неопределено Тогда
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.rightName = "returnInVisible";
			НоваяСтрока.value = ?(НастройкиДокумента.НеПоказыватьНаУстройстве, "0", "1");
			
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.rightName = "allowReturnInDateChange";
			НоваяСтрока.value = ?(НастройкиДокумента.РазрешатьИзменятьДату, "1", "0");
			
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.rightName = "allowReturnInManualDiscounts";
			НоваяСтрока.value = ?(НастройкиДокумента.РучныеСкидкиРазрешены, "1", "0");
		КонецЕсли;
		
		НастройкиДокумента = ПолучитьНастройкиДокумента(Перечисления.БПАГВидыДокументов.ЗаказНаСклад, ТекущаяДата(), тмпАгент.Агент);
		Если НастройкиДокумента <> Неопределено Тогда
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.rightName = "depotOrderVisible";
			НоваяСтрока.value = ?(НастройкиДокумента.НеПоказыватьНаУстройстве, "0", "1");
			
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.rightName = "allowDepotOrderDateChange";
			НоваяСтрока.value = ?(НастройкиДокумента.РазрешатьИзменятьДату, "1", "0");
		КонецЕсли;
		
		НастройкиДокумента = ПолучитьНастройкиДокумента(Перечисления.БПАГВидыДокументов.Заявка, ТекущаяДата(), тмпАгент.Агент);
		Если НастройкиДокумента <> Неопределено Тогда
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.rightName = "orderVisible";
			НоваяСтрока.value = ?(НастройкиДокумента.НеПоказыватьНаУстройстве, "0", "1");
			
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.rightName = "allowOrderDateChange";
			НоваяСтрока.value = ?(НастройкиДокумента.РазрешатьИзменятьДату, "1", "0");
			
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.rightName = "allowOrderManualDiscounts";
			НоваяСтрока.value = ?(НастройкиДокумента.РучныеСкидкиРазрешены, "1", "0");
		КонецЕсли;
		
		НастройкиДокумента = ПолучитьНастройкиДокумента(Перечисления.БПАГВидыДокументов.ПКО, ТекущаяДата(), тмпАгент.Агент);
		Если НастройкиДокумента <> Неопределено Тогда
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.rightName = "cashInVisible";
			НоваяСтрока.value = ?(НастройкиДокумента.НеПоказыватьНаУстройстве, "0", "1");
			
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.rightName = "allowCashInDateChange";
			НоваяСтрока.value = ?(НастройкиДокумента.РазрешатьИзменятьДату, "1", "0");
		КонецЕсли;
		
		НастройкиДокумента = ПолучитьНастройкиДокумента(Перечисления.БПАГВидыДокументов.Анкета, ТекущаяДата(), тмпАгент.Агент);
		Если НастройкиДокумента <> Неопределено Тогда
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.rightName = "merchandisingVisible";
			НоваяСтрока.value = ?(НастройкиДокумента.НеПоказыватьНаУстройстве, "0", "1");
			
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.rightName = "allowQuestionnaireDateChange";
			НоваяСтрока.value = ?(НастройкиДокумента.РазрешатьИзменятьДату, "1", "0");
			
		КонецЕсли;
		
		//****************************************************************************************************************
		Попытка
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	БПАГНастройкиДокументовСрезПоследних.ВидДокумента,
			|	БПАГНастройкиДокументовСрезПоследних.ЗапрещатьУдалятьНаУстройстве
			|ИЗ
			|	РегистрСведений.БПАГНастройкиДокументов.СрезПоследних(&МоментВремени, ) КАК БПАГНастройкиДокументовСрезПоследних";
			
			Запрос.УстановитьПараметр("МоментВремени", ТекущаяДата());
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Выборка.ВидДокумента = Перечисления.БПАГВидыДокументов.ВозвратОтПокупателя Тогда
					НоваяСтрока = ТЗ.Добавить();
					НоваяСтрока.rightName = "allowDeleteReturnIn";
					НоваяСтрока.value = ?(Выборка.ЗапрещатьУдалятьНаУстройстве, "0", "1");
					
				ИначеЕсли Выборка.ВидДокумента = Перечисления.БПАГВидыДокументов.ЗаказНаСклад Тогда
					НоваяСтрока = ТЗ.Добавить();
					НоваяСтрока.rightName = "allowDeleteDepotOrder";
					НоваяСтрока.value = ?(Выборка.ЗапрещатьУдалятьНаУстройстве, "0", "1");
					
				ИначеЕсли Выборка.ВидДокумента = Перечисления.БПАГВидыДокументов.Заявка Тогда
					НоваяСтрока = ТЗ.Добавить();
					НоваяСтрока.rightName = "allowDeleteOrder";
					НоваяСтрока.value = ?(Выборка.ЗапрещатьУдалятьНаУстройстве, "0", "1");
					
				ИначеЕсли Выборка.ВидДокумента = Перечисления.БПАГВидыДокументов.ПКО Тогда
					НоваяСтрока = ТЗ.Добавить();
					НоваяСтрока.rightName = "allowDeleteCashIn";
					НоваяСтрока.value = ?(Выборка.ЗапрещатьУдалятьНаУстройстве, "0", "1");
					
				ИначеЕсли Выборка.ВидДокумента = Перечисления.БПАГВидыДокументов.Реализация Тогда
					НоваяСтрока = ТЗ.Добавить();
					НоваяСтрока.rightName = "allowDeleteSale";
					НоваяСтрока.value = ?(Выборка.ЗапрещатьУдалятьНаУстройстве, "0", "1");
				
				ИначеЕсли Выборка.ВидДокумента = Перечисления.БПАГВидыДокументов.Анкета Тогда
					НоваяСтрока = ТЗ.Добавить();
					НоваяСтрока.rightName = "allowDeleteQuestionnaire";
					НоваяСтрока.value = ?(Выборка.ЗапрещатьУдалятьНаУстройстве, "0", "1");
				ИначеЕсли Выборка.ВидДокумента = Перечисления.БПАГВидыДокументов.Мерчандайзинг Тогда
					НоваяСтрока = ТЗ.Добавить();
					НоваяСтрока.rightName = "allowDeleteMerchandising";
					НоваяСтрока.value = ?(Выборка.ЗапрещатьУдалятьНаУстройстве, "0", "1");
					
				КонецЕсли;
			КонецЦикла;
				
		Исключение
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.rightName = "allowDeleteReturnIn";
			НоваяСтрока.value = "1";
			
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.rightName = "allowDeleteDepotOrder";
			НоваяСтрока.value = "1";
			
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.rightName = "allowDeleteOrder";
			НоваяСтрока.value = "1";
			
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.rightName = "allowDeleteCashIn";
			НоваяСтрока.value = "1";
			
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.rightName = "allowDeleteSale";
			НоваяСтрока.value = "1";
			
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.rightName = "allowDeleteQuestionnaire";
			НоваяСтрока.value = "1";
		КонецПопытки;
		Если СпецификаПользователя = "SB" Тогда
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.rightName = "cashOutVisible";
			НоваяСтрока.value = "1";
			
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.rightName = "receiptVisible";
			НоваяСтрока.value = "1";
			
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.rightName = "returnOutVisible";
			НоваяСтрока.value = "1";
		ИначеЕсли СпецификаПользователя = "KF" Тогда
		//	НоваяСтрока = ТЗ.Добавить();
		//	НоваяСтрока.rightName = "receiptVisible";
		//	НоваяСтрока.value = "1";
		//	
		//	НоваяСтрока = ТЗ.Добавить();
		//	НоваяСтрока.rightName = "returnOutVisible";
		//	НоваяСтрока.value = "1";
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.rightName = "cashOutVisible";
			НоваяСтрока.value = "1";
			
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.rightName = "receiptVisible";
			НоваяСтрока.value = "0";
			
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.rightName = "returnOutVisible";
			НоваяСтрока.value = "0";
		Иначе
				НоваяСтрока = ТЗ.Добавить();
				НоваяСтрока.rightName = "cashOutVisible";
				НоваяСтрока.value = "0";
				
				Если ВидПрикладногоРешения = "УТ10" Тогда	
					НоваяСтрока = ТЗ.Добавить();
					НоваяСтрока.rightName = "receiptVisible";
					НоваяСтрока.value = "0";
				КонецЕсли;
				
				НоваяСтрока = ТЗ.Добавить();
				НоваяСтрока.rightName = "returnOutVisible";
				НоваяСтрока.value = "0";
		КонецЕсли;
		
		Если ВидПрикладногоРешения = "УТ11" Тогда		
			НастройкиДокумента = ПолучитьНастройкиДокумента(Перечисления.БПАГВидыДокументов.Поступление, ТекущаяДата(), тмпАгент.Агент);
			Если НастройкиДокумента <> Неопределено Тогда
				НоваяСтрока = ТЗ.Добавить();
				НоваяСтрока.rightName = "receiptVisible";
				НоваяСтрока.value = ?(НастройкиДокумента.НеПоказыватьНаУстройстве, "0", "1");
			КонецЕсли;
			НастройкиДокумента = ПолучитьНастройкиДокумента(Перечисления.БПАГВидыДокументов.Мерчандайзинг, ТекущаяДата(), тмпАгент.Агент);
			Если НастройкиДокумента <> Неопределено Тогда
				НоваяСтрока = ТЗ.Добавить();
				НоваяСтрока.rightName = "merchandisingVisible";
				НоваяСтрока.value = ?(НастройкиДокумента.НеПоказыватьНаУстройстве, "0", "1");
				
				НоваяСтрока = ТЗ.Добавить();
				НоваяСтрока.rightName = "allowQuestionnaireDateChange";
				НоваяСтрока.value = ?(НастройкиДокумента.РазрешатьИзменятьДату, "1", "0");
			КонецЕсли;
		КонецЕсли;
		
		
		СформироватьPlist(ТЗ, "rightName", Агенты, "rights", "прав", Истина, Ложь);	
		КонецЦикла;
	Исключение
	КонецПопытки;
КонецПроцедуры

Процедура ВыгрузитьСтатусы(Агенты)
	
	Для Каждого тмпАгент Из Агенты Цикл
		ВыгружатьСвойстваДокументов = НастройкаИзКэша("1СВыгружатьСвойстваДокументов", тмпАгент.Агент);
		ВариантЗагрузкиЗаявок = НастройкаИзКэша("1СВариантЗагрузкиЗаявок", тмпАгент.Агент);
		
		тмпТЗАгенты = СоздатьТаблицуИзОдногоАгента(тмпАгент);
		
		МассивАгентов = Новый Массив();
		МассивАгентов.Добавить(тмпАгент.Агент);
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БПАГДокументыАгентовСрезПоследних.ИД КАК documentID,
		|	ВЫБОР
		|		КОГДА БПАГДокументыАгентовСрезПоследних.Документ.Проведен
		|			ТОГДА ""12""
		|		ИНАЧЕ ВЫБОР
		|				КОГДА БПАГДокументыАгентовСрезПоследних.Документ.ПометкаУдаления
		|					ТОГДА ""14""
		|				ИНАЧЕ ""13""
		|			КОНЕЦ
		|	КОНЕЦ КАК status,
		|	БПАГДокументыАгентовСрезПоследних.Документ.Номер КАК number,
		|	БПАГДокументыАгентовСрезПоследних.Документ КАК Ссылка
		|ИЗ
		|	РегистрСведений.БПАГДокументыАгентов.СрезПоследних(
		|			,
		|			ДатаИзмененияНаУстройстве МЕЖДУ &НачалоПериода И &КонецПериода
		|				И Агент = &Агент) КАК БПАГДокументыАгентовСрезПоследних";
		
		ГлубинаПериодаОбмена = НастройкаИзКэша("exchangePeriod", тмпАгент.Агент);
		Если ГлубинаПериодаОбмена = 0 Тогда
			ГлубинаПериодаОбмена = 30;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("НачалоПериода", ТекущаяДата() - ГлубинаПериодаОбмена * 24 * 60 * 60);
		Запрос.УстановитьПараметр("КонецПериода", ТекущаяДата() + 30 * 24 * 60 * 60);
		Запрос.УстановитьПараметр("Агент", тмпАгент.Агент);
		
		ТЗ = Запрос.Выполнить().Выгрузить();
		ТолькоРеализации = ВариантЗагрузкиЗаявок = Перечисления.БПАГВариантыЗагрузкиЗаявок.Реализация;
		НастройкиДокумента = ПолучитьНастройкиДокумента(Перечисления.БПАГВидыДокументов.Реализация, ТекущаяДата());
		ЕстьОбратнаяВыгрузкаРеализаций = (НастройкиДокумента.ОбратнаяВыгрузкаИз1С) И (НастройкиДокумента.ПериодОбратнойВыгрузки > 0);
		
		тмпТЗ = Новый ТаблицаЗначений;
		тмпТЗ.Колонки.Добавить("documentID");
		тмпТЗ.Колонки.Добавить("status");
		тмпТЗ.Колонки.Добавить("number");
		тмпТЗ.Колонки.Добавить("Ссылка");
		
		Для Каждого тмпСтрока Из ТЗ Цикл
			Если ТолькоРеализации Тогда
				Если Лев(тмпСтрока.documentID, 3) = "SAL" Тогда
					Если ЕстьОбратнаяВыгрузкаРеализаций Тогда
						НоваяСтрока = тмпТЗ.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, тмпСтрока); 
					КонецЕсли;	
					тмпСтрока.documentID = Сред(тмпСтрока.documentID, 4);
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
		
		Для Каждого тмпСтрока Из тмпТЗ Цикл
			НоваяСтрока = ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, тмпСтрока); 
		КонецЦикла;
		
		Если ВыгружатьСвойстваДокументов Тогда
			
			Если СпецификаПользователя = "FT" Тогда
				
				ТЗ.Колонки.Добавить("properties");
				Для Каждого тмпСтрока Из ТЗ Цикл
					тмпТЗ = Новый ТаблицаЗначений;
					тмпТЗ.Колонки.Добавить("propertyTypeID");
					тмпТЗ.Колонки.Добавить("value");
					тмпСтрока.properties = тмпТЗ;
				КонецЦикла;
				
				СписокДокументов = ТЗ.ВыгрузитьКолонку("Ссылка");
				
				Запрос = Новый Запрос();
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК Водитель,
				|	ФизическиеЛицаКонтактнаяИнформация.Представление КАК НомерТелефона
				|ПОМЕСТИТЬ ТЗТелефоныВодителей
				|ИЗ
				|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
				|ГДЕ
				|	ФизическиеЛицаКонтактнаяИнформация.НомерТелефона <> """"
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	МаршрутныйЛистМаршрутныйЛист.Водитель.Наименование КАК Водитель,
				|	МаршрутныйЛистМаршрутныйЛист.ФлДоставлено КАК Доставлено,
				|	БПАГДокументыАгентовСрезПоследних.ИД КАК documentID,
				|	ТЗТелефоныВодителей.НомерТелефона КАК НомерТелефона
				|ИЗ
				|	РегистрСведений.БПАГДокументыАгентов.СрезПоследних(, Документ В (&СписокДокументов)) КАК БПАГДокументыАгентовСрезПоследних
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист.МаршрутныйЛист КАК МаршрутныйЛистМаршрутныйЛист
				|			ЛЕВОЕ СОЕДИНЕНИЕ ТЗТелефоныВодителей КАК ТЗТелефоныВодителей
				|			ПО МаршрутныйЛистМаршрутныйЛист.Водитель = ТЗТелефоныВодителей.Водитель
				|		ПО БПАГДокументыАгентовСрезПоследних.Документ = МаршрутныйЛистМаршрутныйЛист.Накладная";
				
				Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
				
				ТЗСвойства = Запрос.Выполнить().Выгрузить();
				Для Каждого тмпСтрока Из ТЗСвойства Цикл
					Отбор = Новый Структура();
					Отбор.Вставить("documentID", тмпСтрока.documentID);
					СтрокиТЗ = ТЗ.НайтиСтроки(Отбор);	
					Для Каждого тмпСтрокаДокумент Из СтрокиТЗ Цикл
						
						НоваяСтрока = тмпСтрокаДокумент.properties.Добавить();
						НоваяСтрока.propertyTypeID = "FTDriver";
						НоваяСтрока.value = тмпСтрока.Водитель;
						
						НоваяСтрока = тмпСтрокаДокумент.properties.Добавить();
						НоваяСтрока.propertyTypeID = "FTDriverPhone";
						НоваяСтрока.value = тмпСтрока.НомерТелефона;
						
						НоваяСтрока = тмпСтрокаДокумент.properties.Добавить();
						НоваяСтрока.propertyTypeID = "FTDelivered";
						НоваяСтрока.value = ?(тмпСтрока.Доставлено, "1", "0");
						
					КонецЦикла;
				КонецЦикла;
				
			Иначе
				
				Если ВидПрикладногоРешения = "УТ11" Тогда
					//NIY
				ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
					//NIY
				ИначеЕсли ВидПрикладногоРешения = "УТ10" Тогда
				
					СписокДокументов = ТЗ.ВыгрузитьКолонку("Ссылка");
					
					//Виды свойств
					Запрос = Новый Запрос();
					Запрос.Текст =
					"ВЫБРАТЬ
					|	БПАГКатегорииДокументов.Категория КАК Ссылка
					|ИЗ
					|	РегистрСведений.БПАГКатегорииДокументов КАК БПАГКатегорииДокументов
					|ГДЕ
					|	НЕ БПАГКатегорииДокументов.Категория.ПометкаУдаления
					|
					|УПОРЯДОЧИТЬ ПО
					|	БПАГКатегорииДокументов.Категория.Наименование";
					
					МассивКатегорий = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
					
					Если МассивКатегорий.Количество() > 0 Тогда
						
						ТЗ.Колонки.Добавить("properties");
						тмпТЗ = Новый ТаблицаЗначений;
						тмпТЗ.Колонки.Добавить("propertyTypeID");
						тмпТЗ.Колонки.Добавить("value");
						ТЗ.ЗаполнитьЗначения(тмпТЗ, "properties");
					
						//Значения свойств
						Запрос = Новый Запрос();
						//Запрос.Текст = 
						//"ВЫБРАТЬ
						//|	БПАГДокументыАгентовСрезПоследних.ИД КАК documentID,
						//|	""K"" + КатегорииОбъектов.Категория.Код КАК propertyTypeID,
						//|	""1"" КАК value
						//|ИЗ
						//|	РегистрСведений.БПАГДокументыАгентов.СрезПоследних(, Документ В (&СписокДокументов)) КАК БПАГДокументыАгентовСрезПоследних
						//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
						//|		ПО БПАГДокументыАгентовСрезПоследних.Документ = КатегорииОбъектов.Объект
						//|ГДЕ
						//|	КатегорииОбъектов.Категория В(&МассивКатегорий)
						//|
						//|ОБЪЕДИНИТЬ ВСЕ
						//|
						//|ВЫБРАТЬ
						//|	БПАГДокументыАгентовСрезПоследних.ИД,
						//|	""S"" + ЗначенияСвойствОбъектов.Свойство.Код,
						//|	ЗначенияСвойствОбъектов.Значение
						//|ИЗ
						//|	РегистрСведений.БПАГДокументыАгентов.СрезПоследних(, Документ В (&СписокДокументов)) КАК БПАГДокументыАгентовСрезПоследних
						//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
						//|		ПО БПАГДокументыАгентовСрезПоследних.Документ = ЗначенияСвойствОбъектов.Объект
						//|ГДЕ
						//|	ЗначенияСвойствОбъектов.Свойство В(&МассивКатегорий)";
						
						Запрос.Текст = 
						"ВЫБРАТЬ
						|	БПАГДокументыАгентовСрезПоследних.ИД КАК documentID,
						|	""K"" + КатегорииОбъектов.Категория.Код КАК Код,
						|	""1"" КАК value,
						|	БПАГДокументыАгентовСрезПоследних.Документ
						|ИЗ
						|	РегистрСведений.БПАГДокументыАгентов.СрезПоследних(, Документ В (&СписокДокументов)) КАК БПАГДокументыАгентовСрезПоследних
						|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
						|		ПО БПАГДокументыАгентовСрезПоследних.Документ = КатегорииОбъектов.Объект
						|ГДЕ
						|	КатегорииОбъектов.Категория В(&МассивКатегорий)
						|
						|ОБЪЕДИНИТЬ ВСЕ
						|
						|ВЫБРАТЬ
						|	БПАГДокументыАгентовСрезПоследних.ИД,
						|	""S"" + ЗначенияСвойствОбъектов.Свойство.Код,
						|	ЗначенияСвойствОбъектов.Значение,
						|	БПАГДокументыАгентовСрезПоследних.Документ
						|ИЗ
						|	РегистрСведений.БПАГДокументыАгентов.СрезПоследних(, Документ В (&СписокДокументов)) КАК БПАГДокументыАгентовСрезПоследних
						|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
						|		ПО БПАГДокументыАгентовСрезПоследних.Документ = ЗначенияСвойствОбъектов.Объект
						|ГДЕ
						|	ЗначенияСвойствОбъектов.Свойство В(&МассивКатегорий)";
						
						Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
						Запрос.УстановитьПараметр("МассивКатегорий", МассивКатегорий);
						
						
						ТЗСвойства = Запрос.Выполнить().Выгрузить();
						ТЗСвойства.Колонки.Добавить("propertyTypeID");
						//Установить уникальность кодов свойств документов
						Для Каждого тмпСтрока Из ТЗСвойства Цикл
							СвойствоДокумента = тмпСтрока.propertyTypeID;
							Если ТипЗнч(тмпСтрока.Документ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
								СвойствоДокумента = Лев(тмпСтрока.Код, 1) + "ORD" + Сред(тмпСтрока.Код, 2);
							ИначеЕсли ТипЗнч(тмпСтрока.Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
								СвойствоДокумента = Лев(тмпСтрока.Код, 1) + "SAL" + Сред(тмпСтрока.Код, 2);
							ИначеЕсли ТипЗнч(тмпСтрока.Документ) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
								СвойствоДокумента = Лев(тмпСтрока.Код, 1) + "RET" + Сред(тмпСтрока.Код, 2);
							ИначеЕсли ТипЗнч(тмпСтрока.Документ) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
								СвойствоДокумента = Лев(тмпСтрока.Код, 1) + "CIN" + Сред(тмпСтрока.Код, 2);
							ИначеЕсли ТипЗнч(тмпСтрока.Документ) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
								СвойствоДокумента = Лев(тмпСтрока.Код, 1) + "DEP" + Сред(тмпСтрока.Код, 2);
							ИначеЕсли ТипЗнч(тмпСтрока.Документ) = Тип("ДокументСсылка.БПАГАнкета") Тогда
								СвойствоДокумента = Лев(тмпСтрока.Код, 1) + "QUE" + Сред(тмпСтрока.Код, 2);
							ИначеЕсли ТипЗнч(тмпСтрока.Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
								СвойствоДокумента = Лев(тмпСтрока.Код, 1) + "REC" + Сред(тмпСтрока.Код, 2);
							Иначе
								СвойствоДокумента = тмпСтрока.Код; 
							КонецЕсли;	
							тмпСтрока.propertyTypeID = СвойствоДокумента;
						КонецЦикла;	
						ТЗСвойства.Колонки.Удалить("Код");	
						ТЗСвойства.Колонки.Удалить("Документ");	
						
						Для Каждого тмпСтрока Из ТЗСвойства Цикл
							Отбор = Новый Структура();
							Отбор.Вставить("documentID", тмпСтрока.documentID);
							СтрокиТЗ = ТЗ.НайтиСтроки(Отбор);	
							Для Каждого тмпСтрокаДокумент Из СтрокиТЗ Цикл
								
								тмпТЗ = тмпСтрокаДокумент.properties.Скопировать();
								
								НоваяСтрока = тмпТЗ.Добавить();
								НоваяСтрока.propertyTypeID = тмпСтрока.propertyTypeID;
								НоваяСтрока.value = тмпСтрока.value;
								
								тмпСтрокаДокумент.properties = тмпТЗ.Скопировать();
								
							КонецЦикла;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;		
		
		ТЗ.Колонки.Удалить("Ссылка");
		СформироватьPlist(ТЗ, "documentID", тмпТЗАгенты, "status", "статусов документов", Ложь, Ложь);
	КонецЦикла;	
КонецПроцедуры

#Область ВыгрузитьВопросыАнкет

Процедура ВыгрузитьВопросыАнкет(Агенты)
	
	#Область questionnaireTypes
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БПАГВидыАнкет.Код КАК uniqueID,
	|	БПАГВидыАнкет.Наименование КАК name,
	|	БПАГВидыАнкет.Комментарий КАК comment
	|ИЗ
	|	Справочник.БПАГВидыАнкет КАК БПАГВидыАнкет
	|ГДЕ
	|	НЕ БПАГВидыАнкет.ПометкаУдаления";
	
	#КонецОбласти
	
	СформироватьPlist(Запрос.Выполнить().Выгрузить(), "uniqueID", Агенты, "questionnaireTypes", "видов анкет", Истина);
	
	#Область questionGroups
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БПАГВопросыАнкет.Код КАК uniqueID,
	|	БПАГВопросыАнкет.Идентификатор КАК identifier,
	|	БПАГВопросыАнкет.Наименование КАК name,
	|	БПАГВопросыАнкет.Описание КАК description,
	|	БПАГВопросыАнкет.Порядок КАК sort
	|ИЗ
	|	Справочник.БПАГВопросыАнкет КАК БПАГВопросыАнкет
	|ГДЕ
	|	НЕ БПАГВопросыАнкет.ПометкаУдаления
	|	И БПАГВопросыАнкет.ЭтоГруппа
	|	И БПАГВопросыАнкет.Владелец <> &ПустойВладелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	БПАГВопросыАнкет.Владелец,
	|	БПАГВопросыАнкет.Наименование";
	
	Запрос.УстановитьПараметр("ПустойВладелец", Справочники.БПАГВидыАнкет.ПустаяСсылка());
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	#КонецОбласти
	
	СформироватьPlist(ТЗ, "uniqueID", Агенты, "questionGroups", "групп вопросов", Истина);
	
	#Область questions
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БПАГВопросыАнкет.Код КАК uniqueID,
	|	БПАГВопросыАнкет.Идентификатор КАК identifier,
	|	БПАГВопросыАнкет.Наименование КАК name,
	|	БПАГВопросыАнкет.Тип КАК Тип,
	|	БПАГВопросыАнкет.Подсказка КАК placeholder,
	|	БПАГВопросыАнкет.ВыравниваниеВопроса КАК ВыравниваниеВопроса,
	|	БПАГВопросыАнкет.ЦветВопроса КАК nameColor,
	|	БПАГВопросыАнкет.РазмерШрифтаВопроса КАК nameSize,
	|	БПАГВопросыАнкет.ПроцентШириныВопроса КАК nameWidthPercent,
	|	БПАГВопросыАнкет.ВыравниваниеОтвета КАК valueAlign,
	|	БПАГВопросыАнкет.ЦветОтвета КАК valueColor,
	|	БПАГВопросыАнкет.РазмерШрифтаОтвета КАК valueSize,
	|	БПАГВопросыАнкет.ЗначениеПоУмолчанию КАК defaultValue,
	|	ВЫБОР
	|		КОГДА БПАГВопросыАнкет.Обязательный
	|			ТОГДА ""1""
	|		ИНАЧЕ ""0""
	|	КОНЕЦ КАК required,
	|	БПАГВопросыАнкет.Владелец.Код КАК questionnaireTypeID,
	|	БПАГВопросыАнкет.Родитель.Код КАК questionGroupID,
	|	БПАГВопросыАнкет.Порядок КАК sort,
	|	БПАГВопросыАнкет.Ссылка
	|ИЗ
	|	Справочник.БПАГВопросыАнкет КАК БПАГВопросыАнкет
	|ГДЕ
	|	НЕ БПАГВопросыАнкет.ПометкаУдаления
	|	И НЕ БПАГВопросыАнкет.ЭтоГруппа
	|	И БПАГВопросыАнкет.Владелец <> &ПустойВладелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	БПАГВопросыАнкет.Владелец,
	|	БПАГВопросыАнкет.Наименование";
	
	Запрос.УстановитьПараметр("ПустойВладелец", Справочники.БПАГВидыАнкет.ПустаяСсылка());
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	ТЗ.Колонки.Добавить("nameAlign");
	ТЗ.Колонки.Добавить("type");
	ТЗ.Колонки.Добавить("values");
	
	Для Каждого тмпСтрока Из ТЗ Цикл
		Если (тмпСтрока.Ссылка.ВариантыОтвета.Количество() > 0) ИЛИ (СокрЛП(тмпСтрока.Тип) = "Да/нет") Тогда
			тмпСтрока.type = "list";
		ИначеЕсли СокрЛП(тмпСтрока.Тип) = "Булево" Тогда
			тмпСтрока.type = "boolean";
		ИначеЕсли СокрЛП(тмпСтрока.Тип) = "Дата" Тогда
			тмпСтрока.type = "date";
		ИначеЕсли СокрЛП(тмпСтрока.Тип) = "Число" Тогда
			тмпСтрока.type = "number";
		ИначеЕсли СокрЛП(тмпСтрока.Тип) = "Фото" Тогда
			тмпСтрока.type = "photo";
		Иначе
			тмпСтрока.type = "string";
		КонецЕсли;
		
		Если тмпСтрока.ВыравниваниеВопроса = Перечисления.БПАГВидыВыравниванияПоГоризонтали.Центр Тогда
			тмпСтрока.nameAlign = "1";
		ИначеЕсли тмпСтрока.ВыравниваниеВопроса = Перечисления.БПАГВидыВыравниванияПоГоризонтали.Право Тогда
			тмпСтрока.nameAlign = "2";
		Иначе
			тмпСтрока.nameAlign = "0";
		КонецЕсли;
		
		Если СокрЛП(тмпСтрока.Тип) = "Да/нет" Тогда
			ТЗВарианты = Новый ТаблицаЗначений;
			ТЗВарианты.Колонки.Добавить("sort");
			ТЗВарианты.Колонки.Добавить("value");
			НоваяСтрокаВариантов = ТЗВарианты.Добавить();
			НоваяСтрокаВариантов.sort = 1;
			НоваяСтрокаВариантов.value = "Да";
			
			НоваяСтрокаВариантов = ТЗВарианты.Добавить();
			НоваяСтрокаВариантов.sort = 2;
			НоваяСтрокаВариантов.value = "Нет";
		Иначе
			ЗапросПоВариантам = Новый Запрос;
			ЗапросПоВариантам.Текст =
			"ВЫБРАТЬ
			|	БПАГВопросыАнкетВариантыОтвета.НомерСтроки КАК sort,
			|	БПАГВопросыАнкетВариантыОтвета.Вариант КАК value
			|ИЗ
			|	Справочник.БПАГВопросыАнкет.ВариантыОтвета КАК БПАГВопросыАнкетВариантыОтвета
			|ГДЕ
			|	БПАГВопросыАнкетВариантыОтвета.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки,
			|	Вариант";
			ЗапросПоВариантам.УстановитьПараметр("Ссылка", тмпСтрока.Ссылка);
			
			ТЗВарианты = ЗапросПоВариантам.Выполнить().Выгрузить();
		КонецЕсли;		
		
		тмпСтрока.values = ТЗВарианты;
		
	КонецЦикла;	
	
	ТЗ.Колонки.Удалить("Тип");
	ТЗ.Колонки.Удалить("Ссылка");
	ТЗ.Колонки.Удалить("ВыравниваниеВопроса");
	
	#КонецОбласти
	
	СформироватьPlist(ТЗ, "uniqueID", Агенты, "questions", "вопросов", Истина);
	
КонецПроцедуры

#КонецОбласти 

#Область ВыгрузитьТовары

Процедура ВыгрузитьТовары(Агенты)
	
	ВидПрикладногоРешения = БПАГ.ПолучитьВидПрикладногоРешения();
	
	ИспользоватьХарактеристики = НастройкаИзКэша("1СИспользоватьХарактеристикиТоваров");
	
	ПустаяСсылкаНаНоменклатуру = Справочники.БПАГНоменклатура.ПустаяСсылка();
	
	Если (ВидПрикладногоРешения = "УТ10") и (СпецификаПользователя <> "SD") Тогда
		ВидНоменклатурыТара = НастройкаИзКэша("1СВидНоменклатурыТара");
	КонецЕсли;
	
	Для Каждого тмпАгент Из Агенты Цикл
		
		СписокФайловВыгрузки = Новый СписокЗначений;
		СписокФайловВыгрузки.Добавить("goodGroups");
		СписокФайловВыгрузки.Добавить("goods");
		
		
		КлючПоиска = "Ассортимент%-%" + СокрЛП(тмпАгент.Агент.Ассортимент.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Ассортимент);
		Если ПолучитьГотовыеФайлыВыгрузкиИзКэша(тмпАгент.Агент, КлючПоиска, СписокФайловВыгрузки) Тогда
			//Файлы возьмем из кэша
		Иначе
			
			#Область goodGroups
				
			ИспользоватьОграниченияПоКоэффициентам = НастройкаИзКэша("1СИспользоватьОграниченияПоКоэффициентам", тмпАгент.Агент);
			
			тмпТЗАгенты = СоздатьТаблицуИзОдногоАгента(тмпАгент);
			
			МассивАгентов = Новый Массив();
			МассивАгентов.Добавить(тмпАгент.Агент);
			
			МассивАссортимента = ПолучитьМассивАссортимента(МассивАгентов);
			
			//Если ассортимента нет или он пустой, то выгружаем все товары
			ВыгрузкаВсех = МассивАссортимента.Количество() = 0;
			
			//Группы товаров
			Запрос = Новый Запрос();
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	БПАГНоменклатура.Код КАК uniqueID,
			|	БПАГНоменклатура.Родитель.Код КАК parentID,
			|	БПАГНоменклатура.Наименование КАК name,
			|	БПАГНоменклатура.Ссылка,
			|	БПАГНоменклатура.Родитель.Код КАК КодРодителя,
			|	БПАГНоменклатура.Родитель.Родитель.Код КАК КодРодителяРодителя,
			|	БПАГНоменклатура.Родитель.Наименование КАК ИмяРодителя,
			|	БПАГНоменклатура.Родитель КАК Родитель,
			|	БПАГНоменклатура.Родитель.Описание КАК ОписаниеРодителя,
			|	БПАГНоменклатура.Описание КАК description
			|ИЗ
			|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
			|ГДЕ
			|	НЕ БПАГНоменклатура.ПометкаУдаления
			|	И БПАГНоменклатура.ЭтоГруппа
			|	И (&ВыгрузкаВсех
			|			ИЛИ БПАГНоменклатура.Ссылка В ИЕРАРХИИ (&МассивАссортимента))";
			
			Запрос.УстановитьПараметр("МассивАссортимента", МассивАссортимента);
			Запрос.УстановитьПараметр("ВыгрузкаВсех", ВыгрузкаВсех);
			ТЗКопия = Запрос.Выполнить().Выгрузить();
			
			ТЗ = Новый ТаблицаЗначений;
			ТЗ.Колонки.Добавить("uniqueID");
			ТЗ.Колонки.Добавить("parentID");
			ТЗ.Колонки.Добавить("name");
			ТЗ.Колонки.Добавить("description");
			
			Для Каждого тмпСтрока Из ТЗКопия Цикл
				НоваяСтрока = ТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, тмпСтрока);
				
				Если НЕ тмпСтрока.Родитель.Пустая() Тогда
					НоваяСтрока = ТЗ.Добавить();
					НоваяСтрока.uniqueID = тмпСтрока.КодРодителя;
					НоваяСтрока.parentID = тмпСтрока.КодРодителяРодителя;
					НоваяСтрока.name = тмпСтрока.ИмяРодителя;
					НоваяСтрока.description = тмпСтрока.ОписаниеРодителя;
				КонецЕсли;
			КонецЦикла;
			
			ТЗ.Свернуть("uniqueID, parentID, name, description");
			
			#КонецОбласти
			
			КлючПоиска = "Ассортимент%-%" + СокрЛП(тмпАгент.Агент.Ассортимент.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Ассортимент);
			СформироватьPlist(ТЗ, "uniqueID", тмпТЗАгенты, "goodGroups", "групп товаров", Ложь, , , , КлючПоиска);
			
			#Область goods
			
			//Товары
			Запрос = Новый Запрос();
			
			Если СпецификаПользователя = "SD" Тогда
				
				запрос = Новый Запрос;
				
				#Область ТекстЗапроса
				
				запрос.Текст =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	КД_СтандартПрисутствия.Номенклатура,
				|	КД_СтандартПрисутствия.Номенклатура.КД_Вид КАК НоменклатураКД_Вид
				|ПОМЕСТИТЬ ВТ_АссортиментСтандартаПрисутствия
				|ИЗ
				|	РегистрСведений.КД_СтандартПрисутствия КАК КД_СтандартПрисутствия
				|ГДЕ
				|	КД_СтандартПрисутствия.КатегорияТТ.Родитель.КаналСбыта <> &СобственнаяРозница
				|	И КД_СтандартПрисутствия.Период = НАЧАЛОПЕРИОДА(&ТекущаяДата, МЕСЯЦ)
				|	И КД_СтандартПрисутствия.Подразделение = &Подразделение
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	БПАГНоменклатура.Код КАК uniqueID,
				|	БПАГНоменклатура.Родитель.Код КАК parentID,
				|	БПАГНоменклатура.Наименование КАК name,
				|	БПАГНоменклатура.Номенклатура.Артикул КАК article,
				|	ВЫБОР
				|		КОГДА БПАГНоменклатура.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
				|			ТОГДА ""1""
				|		ИНАЧЕ ""0""
				|	КОНЕЦ КАК goodType,
				|	БПАГНоменклатура.Ссылка,
				|	БПАГНоменклатура.Номенклатура.БПАГКратностьУпаковки КАК shipmentQuantum,
				|	ЕСТЬNULL(БПАГНоменклатура.Номенклатура.СтавкаНДС.Ставка, -1) КАК VATRate,
				|	БПАГКоэффициентыВыравниванияВЗаказеСрезПоследних.НоменклатурнаяГруппа.Код КАК adjustmentGroupID,
				|	ЕСТЬNULL(БПАГКоэффициентыВыравниванияВЗаказеСрезПоследних.Коэффициент, 0) КАК adjustmentCoeff,
				|	ВТ_АссортиментСтандартаПрисутствия.Номенклатура
				|ИЗ
				|	ВТ_АссортиментСтандартаПрисутствия КАК ВТ_АссортиментСтандартаПрисутствия
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БПАГНоменклатура КАК БПАГНоменклатура
				|		ПО ВТ_АссортиментСтандартаПрисутствия.Номенклатура = БПАГНоменклатура.Номенклатура
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БПАГКоэффициентыВыравниванияВЗаказе.СрезПоследних(&ТекущаяДата, ) КАК БПАГКоэффициентыВыравниванияВЗаказеСрезПоследних
				|		ПО ВТ_АссортиментСтандартаПрисутствия.НоменклатураКД_Вид = БПАГКоэффициентыВыравниванияВЗаказеСрезПоследних.НоменклатурнаяГруппа
				|ГДЕ
				|	НЕ БПАГНоменклатура.ПометкаУдаления
				|	И НЕ БПАГНоменклатура.ЭтоГруппа
				|	И (&ВыгрузкаВсех
				|			ИЛИ БПАГНоменклатура.Ссылка В ИЕРАРХИИ (&МассивАссортимента))
				|	И НЕ БПАГНоменклатура.Номенклатура.НеАктуально
				|	И НЕ БПАГНоменклатура.Номенклатура.ПометкаУдаления";
				
				#КонецОбласти
				
			ИначеЕсли ВидПрикладногоРешения = "УТ11" Тогда
				
				Если ИспользоватьХарактеристики Тогда
					Если НастройкаИзКэша("1СВыгружатьТолькоТоварыНаОстатках", тмпАгент.Агент) Тогда
						
						Запрос = Новый Запрос();
						Запрос.Текст = 
						"ВЫБРАТЬ
						|	БПАГНоменклатура.Код КАК uniqueID,
						|	БПАГНоменклатура.Родитель.Код КАК parentID,
						|	БПАГНоменклатура.Наименование КАК name,
						|	БПАГНоменклатура.Номенклатура.Артикул КАК article,
						|	ВЫБОР
						|		КОГДА БПАГНоменклатура.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
						|			ТОГДА ""1""
						|		ИНАЧЕ ""0""
						|	КОНЕЦ КАК goodType,
						|	БПАГНоменклатура.Ссылка,
						|	БПАГНоменклатура.Кратность КАК shipmentQuantum,
						|	ВЫБОР
						|		КОГДА БПАГНоменклатура.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
						|			ТОГДА 18
						|		ИНАЧЕ ВЫБОР
						|				КОГДА БПАГНоменклатура.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
						|					ТОГДА 10
						|				ИНАЧЕ ВЫБОР
						|						КОГДА БПАГНоменклатура.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
						|							ТОГДА 0
						|						ИНАЧЕ -1
						|					КОНЕЦ
						|			КОНЕЦ
						|	КОНЕЦ КАК VATRate,
						|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
						|	ВЫБОР
						|		КОГДА БПАГНоменклатура.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = &ХарактеристикиНеИспользуются
						|			ТОГДА 0
						|		ИНАЧЕ 1
						|	КОНЕЦ КАК ИспользованиеХарактеристик,
						|	БПАГНоменклатура.Номенклатура.Описание КАК description
						|ИЗ
						|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
						|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки
						|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки КАК СвободныеОстаткиОстатки
						|			ПО ТоварыНаСкладахОстатки.Номенклатура = СвободныеОстаткиОстатки.Номенклатура
						|				И ТоварыНаСкладахОстатки.Склад = СвободныеОстаткиОстатки.Склад
						|				И ТоварыНаСкладахОстатки.Характеристика = СвободныеОстаткиОстатки.Характеристика
						|		ПО БПАГНоменклатура.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
						|ГДЕ
						|	НЕ БПАГНоменклатура.ПометкаУдаления
						|	И НЕ БПАГНоменклатура.ЭтоГруппа
						|	И (&ВыгрузкаВсех
						|			ИЛИ БПАГНоменклатура.Ссылка В ИЕРАРХИИ (&МассивАссортимента))
						|	И ТоварыНаСкладахОстатки.ВНаличииОстаток > 0";
						
						Попытка
							Запрос.УстановитьПараметр("ХарактеристикиНеИспользуются", Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать);
						Исключение
							Запрос.УстановитьПараметр("ХарактеристикиНеИспользуются", Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать);
						КонецПопытки;
						
					Иначе
						ОтладочноеСообщение("Настройка ""Использовать характеристики"" на данный момент возможна только в сочетании с настройкой ""Выгружать только товары на остатках""! Обратитесь к внедренцу для решения этого вопроса.");
						Возврат;
						
						//NIY
						//Запрос = Новый Запрос();
						//Запрос.Текст = 
						//"ВЫБРАТЬ
						//|	БПАГНоменклатура.Код КАК uniqueID,
						//|	БПАГНоменклатура.Родитель.Код КАК parentID,
						//|	БПАГНоменклатура.Наименование КАК name,
						//|	БПАГНоменклатура.Номенклатура.Артикул КАК article,
						//|	ВЫБОР
						//|		КОГДА БПАГНоменклатура.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
						//|			ТОГДА ""1""
						//|		ИНАЧЕ ""0""
						//|	КОНЕЦ КАК goodType,
						//|	БПАГНоменклатура.Ссылка,
						//|	БПАГНоменклатура.Кратность КАК shipmentQuantum,
						//|	ВЫБОР
						//|		КОГДА БПАГНоменклатура.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
						//|			ТОГДА 18
						//|		ИНАЧЕ ВЫБОР
						//|				КОГДА БПАГНоменклатура.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
						//|					ТОГДА 10
						//|				ИНАЧЕ ВЫБОР
						//|						КОГДА БПАГНоменклатура.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
						//|							ТОГДА 0
						//|						ИНАЧЕ -1
						//|					КОНЕЦ
						//|			КОНЕЦ
						//|	КОНЕЦ КАК VATRate
						//|ИЗ
						//|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
						//|ГДЕ
						//|	НЕ БПАГНоменклатура.ПометкаУдаления
						//|	И НЕ БПАГНоменклатура.ЭтоГруппа
						//|	И (&ВыгрузкаВсех
						//|			ИЛИ БПАГНоменклатура.Ссылка В ИЕРАРХИИ (&МассивАссортимента))";
					КонецЕсли;					
				Иначе
					Если НастройкаИзКэша("1СВыгружатьТолькоТоварыНаОстатках", тмпАгент.Агент) Тогда
						
						Запрос = Новый Запрос();
						Запрос.Текст = 
						"ВЫБРАТЬ
						|	БПАГНоменклатура.Код КАК uniqueID,
						|	БПАГНоменклатура.Родитель.Код КАК parentID,
						|	БПАГНоменклатура.Наименование КАК name,
						|	БПАГНоменклатура.Номенклатура.Артикул КАК article,
						|	ВЫБОР
						|		КОГДА БПАГНоменклатура.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
						|			ТОГДА ""1""
						|		ИНАЧЕ ""0""
						|	КОНЕЦ КАК goodType,
						|	БПАГНоменклатура.Ссылка,
						|	БПАГНоменклатура.Кратность КАК shipmentQuantum,
						|	ВЫБОР
						|		КОГДА БПАГНоменклатура.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
						|			ТОГДА 18
						|		ИНАЧЕ ВЫБОР
						|				КОГДА БПАГНоменклатура.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
						|					ТОГДА 10
						|				ИНАЧЕ ВЫБОР
						|						КОГДА БПАГНоменклатура.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
						|							ТОГДА 0
						|						ИНАЧЕ -1
						|					КОНЕЦ
						|			КОНЕЦ
						|	КОНЕЦ КАК VATRate,
						|	БПАГНоменклатура.Номенклатура.Описание КАК description
						|ИЗ
						|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
						|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки
						|		ПО БПАГНоменклатура.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
						|ГДЕ
						|	НЕ БПАГНоменклатура.ПометкаУдаления
						|	И НЕ БПАГНоменклатура.ЭтоГруппа
						|	И (&ВыгрузкаВсех
						|			ИЛИ БПАГНоменклатура.Ссылка В ИЕРАРХИИ (&МассивАссортимента))
						|	И ТоварыНаСкладахОстатки.ВНаличииОстаток > 0";
						
					Иначе
						
						Запрос = Новый Запрос();
						Запрос.Текст = 
						"ВЫБРАТЬ
						|	БПАГНоменклатура.Код КАК uniqueID,
						|	БПАГНоменклатура.Родитель.Код КАК parentID,
						|	БПАГНоменклатура.Наименование КАК name,
						|	БПАГНоменклатура.Номенклатура.Артикул КАК article,
						|	ВЫБОР
						|		КОГДА БПАГНоменклатура.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
						|			ТОГДА ""1""
						|		ИНАЧЕ ""0""
						|	КОНЕЦ КАК goodType,
						|	БПАГНоменклатура.Ссылка,
						|	БПАГНоменклатура.Кратность КАК shipmentQuantum,
						|	ВЫБОР
						|		КОГДА БПАГНоменклатура.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
						|			ТОГДА 18
						|		ИНАЧЕ ВЫБОР
						|				КОГДА БПАГНоменклатура.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
						|					ТОГДА 10
						|				ИНАЧЕ ВЫБОР
						|						КОГДА БПАГНоменклатура.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
						|							ТОГДА 0
						|						ИНАЧЕ -1
						|					КОНЕЦ
						|			КОНЕЦ
						|	КОНЕЦ КАК VATRate
						|ИЗ
						|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
						|ГДЕ
						|	НЕ БПАГНоменклатура.ПометкаУдаления
						|	И НЕ БПАГНоменклатура.ЭтоГруппа
						|	И (&ВыгрузкаВсех
						|			ИЛИ БПАГНоменклатура.Ссылка В ИЕРАРХИИ (&МассивАссортимента))";
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
				Запрос = Новый Запрос();
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	БПАГНоменклатура.Код КАК uniqueID,
				|	БПАГНоменклатура.Родитель.Код КАК parentID,
				|	БПАГНоменклатура.Наименование КАК name,
				|	БПАГНоменклатура.Номенклатура.Артикул КАК article,
				|	ВЫБОР
				|		КОГДА БПАГНоменклатура.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
				|			ТОГДА ""1""
				|		ИНАЧЕ ""0""
				|	КОНЕЦ КАК goodType,
				|	БПАГНоменклатура.Ссылка,
				|	БПАГНоменклатура.Кратность КАК shipmentQuantum,
				|	ЕСТЬNULL(БПАГНоменклатура.Номенклатура.СтавкаНДС.Ставка, -1) КАК VATRate
				|ИЗ
				|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
				|ГДЕ
				|	НЕ БПАГНоменклатура.ПометкаУдаления
				|	И НЕ БПАГНоменклатура.ЭтоГруппа
				|	И (&ВыгрузкаВсех
				|			ИЛИ БПАГНоменклатура.Ссылка В ИЕРАРХИИ (&МассивАссортимента))";
				
			Иначе //УТ10
				
				Если ИспользоватьХарактеристики Тогда
					Если НастройкаИзКэша("1СВыгружатьТолькоТоварыНаОстатках", тмпАгент.Агент) Тогда
						
						Если СпецификаПользователя = "BY" Тогда
							Запрос = Новый Запрос();
							Запрос.Текст = 
							"ВЫБРАТЬ
							|	БПАГНоменклатура.Код КАК uniqueID,
							|	БПАГНоменклатура.Родитель.Код КАК parentID,
							|	БПАГНоменклатура.Наименование КАК name,
							|	БПАГНоменклатура.Номенклатура.Артикул КАК article,
							|	ВЫБОР
							|		КОГДА БПАГНоменклатура.Номенклатура.Услуга
							|			ТОГДА ""1""
							|		ИНАЧЕ ""0""
							|	КОНЕЦ КАК goodType,
							|	БПАГНоменклатура.Ссылка,
							|	БПАГНоменклатура.Номенклатура.Ссылка КАК СсылкаНаНоменклатуру,
							|	БПАГНоменклатура.Номенклатура.Кратность КАК shipmentQuantum,
							|	ВЫБОР
							|		КОГДА БПАГНоменклатура.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
							|			ТОГДА 18
							|		ИНАЧЕ ВЫБОР
							|				КОГДА БПАГНоменклатура.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
							|					ТОГДА 10
							|				ИНАЧЕ ВЫБОР
							|						КОГДА БПАГНоменклатура.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
							|							ТОГДА 0
							|						ИНАЧЕ -1
							|					КОНЕЦ
							|			КОНЕЦ
							|	КОНЕЦ КАК VATRate,
							|	ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры КАК Характеристика,
							|	ВЫБОР
							|		КОГДА НЕ БПАГНоменклатура.Номенклатура.ВестиУчетПоХарактеристикам
							|			ТОГДА 0
							|		ИНАЧЕ 1
							|	КОНЕЦ КАК ИспользованиеХарактеристик,
							|	БПАГНоменклатура.Номенклатура.НаименованиеПолное КАК description
							|ИЗ
							|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
							|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки
							|		ПО БПАГНоменклатура.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
							|ГДЕ
							|	НЕ БПАГНоменклатура.ПометкаУдаления
							|	И НЕ БПАГНоменклатура.ЭтоГруппа
							|	И (&ВыгрузкаВсех
							|			ИЛИ БПАГНоменклатура.Ссылка В ИЕРАРХИИ (&МассивАссортимента))";
							
						Иначе
							Запрос = Новый Запрос();
							Запрос.Текст = 
							"ВЫБРАТЬ
							|	БПАГНоменклатура.Код КАК uniqueID,
							|	БПАГНоменклатура.Родитель.Код КАК parentID,
							|	БПАГНоменклатура.Наименование КАК name,
							|	БПАГНоменклатура.Номенклатура.Артикул КАК article,
							|	ВЫБОР
							|		КОГДА БПАГНоменклатура.Номенклатура.Услуга
							|			ТОГДА ""1""
							|		ИНАЧЕ ""0""
							|	КОНЕЦ КАК goodType,
							|	БПАГНоменклатура.Ссылка,
							|	БПАГНоменклатура.Номенклатура.Ссылка КАК СсылкаНаНоменклатуру,
							|	БПАГНоменклатура.Кратность КАК shipmentQuantum,
							|	ВЫБОР
							|		КОГДА БПАГНоменклатура.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
							|			ТОГДА 18
							|		ИНАЧЕ ВЫБОР
							|				КОГДА БПАГНоменклатура.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
							|					ТОГДА 10
							|				ИНАЧЕ ВЫБОР
							|						КОГДА БПАГНоменклатура.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
							|							ТОГДА 0
							|						ИНАЧЕ -1
							|					КОНЕЦ
							|			КОНЕЦ
							|	КОНЕЦ КАК VATRate,
							|	ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры КАК Характеристика,
							|	ВЫБОР
							|		КОГДА НЕ БПАГНоменклатура.Номенклатура.ВестиУчетПоХарактеристикам
							|			ТОГДА 0
							|		ИНАЧЕ 1
							|	КОНЕЦ КАК ИспользованиеХарактеристик,
							|	БПАГНоменклатура.Описание КАК description
							|ИЗ
							|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
							|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки
							|		ПО БПАГНоменклатура.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
							|ГДЕ
							|	НЕ БПАГНоменклатура.ПометкаУдаления
							|	И НЕ БПАГНоменклатура.ЭтоГруппа
							|	И (&ВыгрузкаВсех
							|			ИЛИ БПАГНоменклатура.Ссылка В ИЕРАРХИИ (&МассивАссортимента))";
							
						КонецЕсли;
						
					Иначе
						//ОтладочноеСообщение("Настройка ""Использовать характеристики"" на данный момент возможна только в сочетании с настройкой ""Выгружать только товары на остатках""! Обратитесь к внедренцу для решения этого вопроса.");
						//Возврат;
						//УТ10 
						Запрос = Новый Запрос();
						Запрос.Текст = 
						"ВЫБРАТЬ
						|	БПАГНоменклатура.Код КАК uniqueID,
						|	БПАГНоменклатура.Родитель.Код КАК parentID,
						|	БПАГНоменклатура.Наименование КАК name,
						|	БПАГНоменклатура.Номенклатура.Артикул КАК article,
						|	ВЫБОР
						|		КОГДА БПАГНоменклатура.Номенклатура.ВидНоменклатуры = &ВидНоменклатурыТара
						|				И БПАГНоменклатура.Номенклатура.ВидНоменклатуры <> &ПустойВидНоменклатуры
						|			ТОГДА ""2""
						|		КОГДА БПАГНоменклатура.Номенклатура.Услуга
						|			ТОГДА ""1""
						|		ИНАЧЕ ""0""
						|	КОНЕЦ КАК goodType,
						|	БПАГНоменклатура.Ссылка,
						|	БПАГНоменклатура.Номенклатура.Ссылка КАК СсылкаНаНоменклатуру,
						|	БПАГНоменклатура.Кратность КАК shipmentQuantum,
						|	ВЫБОР
						|		КОГДА БПАГНоменклатура.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
						|			ТОГДА 18
						|		ИНАЧЕ ВЫБОР
						|				КОГДА БПАГНоменклатура.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
						|					ТОГДА 10
						|				ИНАЧЕ ВЫБОР
						|						КОГДА БПАГНоменклатура.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
						|							ТОГДА 0
						|						ИНАЧЕ -1
						|					КОНЕЦ
						|			КОНЕЦ
						|	КОНЕЦ КАК VATRate,
						|	ВЫБОР
						|		КОГДА НЕ БПАГНоменклатура.Номенклатура.ВестиУчетПоХарактеристикам
						|			ТОГДА 0
						|		ИНАЧЕ 1
						|	КОНЕЦ КАК ИспользованиеХарактеристик,
						|	БПАГНоменклатура.Описание КАК description,
						|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
						|ИЗ
						|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
						|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
						|		ПО БПАГНоменклатура.Номенклатура = ХарактеристикиНоменклатуры.Владелец
						|ГДЕ
						|	НЕ БПАГНоменклатура.ПометкаУдаления
						|	И НЕ БПАГНоменклатура.ЭтоГруппа
						|	И (&ВыгрузкаВсех
						|			ИЛИ БПАГНоменклатура.Ссылка В ИЕРАРХИИ (&МассивАссортимента))";
						
						
						Попытка
							Запрос.УстановитьПараметр("НДС18", Перечисления.СтавкиНДС.НДС18);
							Запрос.УстановитьПараметр("НДС10", Перечисления.СтавкиНДС.НДС10);
							Запрос.УстановитьПараметр("НДС0", Перечисления.СтавкиНДС.НДС0);
						Исключение
							Запрос.УстановитьПараметр("НДС18", Неопределено);
							Запрос.УстановитьПараметр("НДС10", Неопределено);
							Запрос.УстановитьПараметр("НДС0", Неопределено);
						КонецПопытки;
						
						Запрос.УстановитьПараметр("ВидНоменклатурыТара", ВидНоменклатурыТара);
						Запрос.УстановитьПараметр("ПустойВидНоменклатуры", Справочники.ВидыНоменклатуры.ПустаяСсылка());
						
					КонецЕсли;					
					
				Иначе
					//не спользовать характеристики номенклатуры
					Если СпецификаПользователя = "BY" Тогда
						Запрос.Текст = 
						"ВЫБРАТЬ
						|	БПАГНоменклатура.Код КАК uniqueID,
						|	БПАГНоменклатура.Родитель.Код КАК parentID,
						|	БПАГНоменклатура.Наименование КАК name,
						|	БПАГНоменклатура.Номенклатура.Артикул КАК article,
						|	ВЫБОР
						|		КОГДА БПАГНоменклатура.Номенклатура.Услуга
						|			ТОГДА ""1""
						|		ИНАЧЕ ""0""
						|	КОНЕЦ КАК goodType,
						|	БПАГНоменклатура.Ссылка,
						|	БПАГНоменклатура.Номенклатура.Ссылка КАК СсылкаНаНоменклатуру,
						|	БПАГНоменклатура.Номенклатура.Кратность КАК shipmentQuantum,
						|	ВЫБОР
						|		КОГДА БПАГНоменклатура.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
						|			ТОГДА 18
						|		ИНАЧЕ ВЫБОР
						|				КОГДА БПАГНоменклатура.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
						|					ТОГДА 10
						|				ИНАЧЕ ВЫБОР
						|						КОГДА БПАГНоменклатура.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
						|							ТОГДА 0
						|						ИНАЧЕ -1
						|					КОНЕЦ
						|			КОНЕЦ
						|	КОНЕЦ КАК VATRate
						|ИЗ
						|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
						|ГДЕ
						|	НЕ БПАГНоменклатура.ПометкаУдаления
						|	И НЕ БПАГНоменклатура.ЭтоГруппа
						|	И (&ВыгрузкаВсех
						|			ИЛИ БПАГНоменклатура.Ссылка В ИЕРАРХИИ (&МассивАссортимента))";
					Иначе
						Запрос.Текст = 
						"ВЫБРАТЬ
						|	БПАГНоменклатура.Код КАК uniqueID,
						|	БПАГНоменклатура.Родитель.Код КАК parentID,
						|	БПАГНоменклатура.Наименование КАК name,
						|	БПАГНоменклатура.Номенклатура.Артикул КАК article,
						|	ВЫБОР
						|		КОГДА БПАГНоменклатура.Номенклатура.ВидНоменклатуры = &ВидНоменклатурыТара
						|				И БПАГНоменклатура.Номенклатура.ВидНоменклатуры <> &ПустойВидНоменклатуры
						|			ТОГДА ""2""
						|		КОГДА БПАГНоменклатура.Номенклатура.Услуга
						|			ТОГДА ""1""
						|		ИНАЧЕ ""0""
						|	КОНЕЦ КАК goodType,
						|	БПАГНоменклатура.Ссылка,
						|	БПАГНоменклатура.Номенклатура.Ссылка КАК СсылкаНаНоменклатуру,
						|	БПАГНоменклатура.Кратность КАК shipmentQuantum,
						|	ВЫБОР
						|		КОГДА БПАГНоменклатура.Номенклатура.СтавкаНДС = &НДС18
						|			ТОГДА 18
						|		ИНАЧЕ ВЫБОР
						|				КОГДА БПАГНоменклатура.Номенклатура.СтавкаНДС = &НДС10
						|					ТОГДА 10
						|				ИНАЧЕ ВЫБОР
						|						КОГДА БПАГНоменклатура.Номенклатура.СтавкаНДС = &НДС0
						|							ТОГДА 0
						|						ИНАЧЕ -1
						|					КОНЕЦ
						|			КОНЕЦ
						|	КОНЕЦ КАК VATRate,
						|	БПАГНоменклатура.Описание КАК description
						|ИЗ
						|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
						|ГДЕ
						|	НЕ БПАГНоменклатура.ПометкаУдаления
						|	И НЕ БПАГНоменклатура.ЭтоГруппа
						|	И (&ВыгрузкаВсех
						|			ИЛИ БПАГНоменклатура.Ссылка В ИЕРАРХИИ (&МассивАссортимента))";
						
						Попытка
							Запрос.УстановитьПараметр("НДС18", Перечисления.СтавкиНДС.НДС18);
							Запрос.УстановитьПараметр("НДС10", Перечисления.СтавкиНДС.НДС10);
							Запрос.УстановитьПараметр("НДС0", Перечисления.СтавкиНДС.НДС0);
						Исключение
							Запрос.УстановитьПараметр("НДС18", Неопределено);
							Запрос.УстановитьПараметр("НДС10", Неопределено);
							Запрос.УстановитьПараметр("НДС0", Неопределено);
						КонецПопытки;
						
						Запрос.УстановитьПараметр("ВидНоменклатурыТара", ВидНоменклатурыТара);
						Запрос.УстановитьПараметр("ПустойВидНоменклатуры", Справочники.ВидыНоменклатуры.ПустаяСсылка());
						
					КонецЕсли;
				КонецЕсли;//Характеристики
			КонецЕсли;
			
			запрос.УстановитьПараметр("МассивАссортимента", МассивАссортимента);
			запрос.УстановитьПараметр("ВыгрузкаВсех", ВыгрузкаВсех);
			запрос.УстановитьПараметр("ТекущаяДата", КонецДня(ТекущаяДата()));
			запрос.УстановитьПараметр("Подразделение", тмпАгент.Агент.Подразделение); 
			запрос.УстановитьПараметр("СобственнаяРозница", Справочники.КД_КаналыСбыта.СобственнаяРозница());
			запрос.УстановитьПараметр("Подразделение", тмпАгент.Агент.Подразделение); 
			
			
			ТЗ = Запрос.Выполнить().Выгрузить();
			ТЗ.Колонки.Добавить("barcode");
			ТЗ.Колонки.Добавить("unit1Name");
			ТЗ.Колонки.Добавить("unit1Coeff");
			ТЗ.Колонки.Добавить("unit1Weight");
			ТЗ.Колонки.Добавить("unit2Name");
			ТЗ.Колонки.Добавить("unit2Coeff");
			ТЗ.Колонки.Добавить("unit2Weight");
			ТЗ.Колонки.Добавить("unit3Name");
			ТЗ.Колонки.Добавить("unit3Coeff");
			ТЗ.Колонки.Добавить("unit3Weight");
			ТЗ.Колонки.Добавить("baseUnitName");
			ТЗ.Колонки.Добавить("baseUnitCoeff");
			ТЗ.Колонки.Добавить("reportUnitName");
			ТЗ.Колонки.Добавить("reportUnitCoeff");
			
			//Единицы измерения
			Запрос = Новый Запрос();
			Если СпецификаПользователя = "SD" Тогда //SD
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	БПАГНоменклатура.Код КАК Код,
				|	БПАГНоменклатура.Номенклатура.ЕдиницаИзмерения.Наименование КАК Наименование,
				|	//ЕдиницыИзмерения.Коэффициент КАК Коэффициент,
				|	1 КАК Коэффициент,
				|	0 КАК Вес,
				|	0 КАК ЭтоБазоваяЕдиница,
				|	0 КАК ЭтоЕдиницаДляОтчетов
				|ИЗ
				|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
				|		//ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
				|		//ПО БПАГНоменклатура.Номенклатура = ЕдиницыИзмерения.Владелец
				|ГДЕ
				|	НЕ БПАГНоменклатура.ПометкаУдаления
				|	И НЕ БПАГНоменклатура.ЭтоГруппа
				|	//И НЕ ЕдиницыИзмерения.ПометкаУдаления
				|	И (&ВыгрузкаВсех
				|			ИЛИ БПАГНоменклатура.Ссылка В ИЕРАРХИИ (&Ассортимент))
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	БПАГНоменклатура.Код,
				|	БПАГНоменклатура.Номенклатура.ЕдиницаИзмерения.Наименование,
				|	1,
				|	0,
				|	1,
				|	1
				|ИЗ
				|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
				|ГДЕ
				|	НЕ БПАГНоменклатура.ПометкаУдаления
				|	И НЕ БПАГНоменклатура.ЭтоГруппа
				|	И (&ВыгрузкаВсех
				|			ИЛИ БПАГНоменклатура.Ссылка В ИЕРАРХИИ (&Ассортимент))
				|
				|УПОРЯДОЧИТЬ ПО
				|	ЭтоБазоваяЕдиница УБЫВ,
				|	Коэффициент";
				
			ИначеЕсли ВидПрикладногоРешения = "УТ11" Тогда
				
				РеквизитЕдиницаДляОтчетов = ?(Метаданные.Справочники.Номенклатура.Реквизиты.Найти("ЕдиницаДляОтчетов") = Неопределено, "ЕдиницаИзмерения", "ЕдиницаДляОтчетов");
				
				Запрос.Текст = 
				////"ВЫБРАТЬ
				////|	БПАГНоменклатура.Код КАК Код,
				////|	БПАГНоменклатура.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияИзНоменклатуры,
				////|	ЕСТЬNULL(УпаковкиНоменклатуры.ЕдиницаИзмерения.Наименование, ""Пусто"") КАК Наименование,
				////|	ЕСТЬNULL(УпаковкиНоменклатуры.Коэффициент, 1) КАК Коэффициент,
				////|	ВЫБОР
				////|		КОГДА УпаковкиНоменклатуры.ЕдиницаИзмерения.Ссылка = БПАГНоменклатура.Номенклатура.ЕдиницаИзмерения.Ссылка
				////|			ТОГДА 1
				////|		ИНАЧЕ 0
				////|	КОНЕЦ КАК ЭтоБазоваяЕдиница,
				////|	ВЫБОР
				////|		КОГДА УпаковкиНоменклатуры.ЕдиницаИзмерения.Ссылка = БПАГНоменклатура.Номенклатура." + РеквизитЕдиницаДляОтчетов + ".Ссылка
				////|			ТОГДА 1
				////|		ИНАЧЕ 0
				////|	КОНЕЦ КАК ЭтоЕдиницаДляОтчетов,
				////|	ЕСТЬNULL(УпаковкиНоменклатуры.Вес, БПАГНоменклатура.Номенклатура.Вес) КАК Вес
				////|ИЗ
				////|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
				////|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
				////|		ПО (БПАГНоменклатура.Номенклатура = УпаковкиНоменклатуры.Владелец
				////|				ИЛИ БПАГНоменклатура.Номенклатура.НаборУпаковок <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ПустаяСсылка)
				////|					И БПАГНоменклатура.Номенклатура.НаборУпаковок = УпаковкиНоменклатуры.Владелец)
				////|ГДЕ
				////|	НЕ БПАГНоменклатура.ПометкаУдаления
				////|	И НЕ БПАГНоменклатура.ЭтоГруппа
				////|	И (УпаковкиНоменклатуры.Ссылка ЕСТЬ NULL 
				////|			ИЛИ НЕ УпаковкиНоменклатуры.ПометкаУдаления)
				////|	И (&ВыгрузкаВсех
				////|			ИЛИ БПАГНоменклатура.Ссылка В ИЕРАРХИИ (&Ассортимент))
				////|
				////|УПОРЯДОЧИТЬ ПО
				////|	ЭтоБазоваяЕдиница УБЫВ,
				////|	Коэффициент";
				
				//ПАКЛ -> до штриходов
				//"ВЫБРАТЬ
				//|	БПАГНоменклатура.Код КАК Код,
				//|	БПАГНоменклатура.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияИзНоменклатуры,
				//|	ЕСТЬNULL(УпаковкиНоменклатуры.ЕдиницаИзмерения.Наименование, ""Пусто"") КАК Наименование,
				//|	ЕСТЬNULL(УпаковкиНоменклатуры.Коэффициент, 1) КАК Коэффициент,
				//|	ВЫБОР
				//|		КОГДА УпаковкиНоменклатуры.ЕдиницаИзмерения.Ссылка = БПАГНоменклатура.Номенклатура.ЕдиницаИзмерения.Ссылка
				//|			ТОГДА 1
				//|		ИНАЧЕ 0
				//|	КОНЕЦ КАК ЭтоБазоваяЕдиница,
				//|	ВЫБОР
				//|		КОГДА УпаковкиНоменклатуры.ЕдиницаИзмерения.Ссылка = БПАГНоменклатура.Номенклатура." + РеквизитЕдиницаДляОтчетов + ".Ссылка
				//|			ТОГДА 1
				//|		ИНАЧЕ 0
				//|	КОНЕЦ КАК ЭтоЕдиницаДляОтчетов,
				//|	БПАГНоменклатура.Номенклатура.Ссылка КАК Товар,
				//|	ЕСТЬNULL(УпаковкиНоменклатуры.Вес, БПАГНоменклатура.Номенклатура.Вес) КАК Вес
				//|ИЗ
				//|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
				//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
				//|		ПО (БПАГНоменклатура.Номенклатура = УпаковкиНоменклатуры.Владелец
				//|				ИЛИ БПАГНоменклатура.Номенклатура.НаборУпаковок <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ПустаяСсылка)
				//|					И БПАГНоменклатура.Номенклатура.НаборУпаковок = УпаковкиНоменклатуры.Владелец)
				//|ГДЕ
				//|	НЕ БПАГНоменклатура.ПометкаУдаления
				//|	И НЕ БПАГНоменклатура.ЭтоГруппа
				//|	И (УпаковкиНоменклатуры.Ссылка ЕСТЬ NULL 
				//|			ИЛИ НЕ УпаковкиНоменклатуры.ПометкаУдаления)
				//|	И (&ВыгрузкаВсех
				//|			ИЛИ БПАГНоменклатура.Ссылка В ИЕРАРХИИ (&Ассортимент))
				//|
				//|УПОРЯДОЧИТЬ ПО
				//|	ЭтоБазоваяЕдиница УБЫВ,
				//|	Коэффициент";
				
				
				
				"ВЫБРАТЬ
				|	БПАГНоменклатура.Код КАК Код,
				|	БПАГНоменклатура.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияИзНоменклатуры,
				|	ЕСТЬNULL(УпаковкиНоменклатуры.ЕдиницаИзмерения.Наименование, ""Пусто"") КАК Наименование,
				|	ЕСТЬNULL(УпаковкиНоменклатуры.Коэффициент, 1) КАК Коэффициент,
				|	ВЫБОР
				|		КОГДА УпаковкиНоменклатуры.ЕдиницаИзмерения.Ссылка = БПАГНоменклатура.Номенклатура.ЕдиницаИзмерения.Ссылка
				|			ТОГДА 1
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК ЭтоБазоваяЕдиница,
				|	ВЫБОР
				|		КОГДА УпаковкиНоменклатуры.ЕдиницаИзмерения.Ссылка = БПАГНоменклатура.Номенклатура." + РеквизитЕдиницаДляОтчетов + ".Ссылка
				|			ТОГДА 1
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК ЭтоЕдиницаДляОтчетов,
				|	БПАГНоменклатура.Номенклатура.Ссылка КАК Товар,
				|	ЕСТЬNULL(УпаковкиНоменклатуры.Вес, БПАГНоменклатура.Номенклатура.Вес) КАК Вес,
				|	ШтрихкодыНоменклатуры.Штрихкод
				|ИЗ
				|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
				|		ПО (БПАГНоменклатура.Номенклатура = УпаковкиНоменклатуры.Владелец
				|				ИЛИ БПАГНоменклатура.Номенклатура.НаборУпаковок <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ПустаяСсылка)
				|					И БПАГНоменклатура.Номенклатура.НаборУпаковок = УпаковкиНоменклатуры.Владелец)
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
				|		ПО БПАГНоменклатура.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
				|ГДЕ
				|	НЕ БПАГНоменклатура.ПометкаУдаления
				|	И НЕ БПАГНоменклатура.ЭтоГруппа
				|	И (УпаковкиНоменклатуры.Ссылка ЕСТЬ NULL 
				|			ИЛИ НЕ УпаковкиНоменклатуры.ПометкаУдаления)
				|	И (&ВыгрузкаВсех
				|			ИЛИ БПАГНоменклатура.Ссылка В ИЕРАРХИИ (&Ассортимент))
				|
				|УПОРЯДОЧИТЬ ПО
				|	ЭтоБазоваяЕдиница УБЫВ,
				|	Коэффициент";
				
				
				
				
			ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
				Если СпецификаПользователя = "SD" Тогда
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	БПАГНоменклатура.Код КАК Код,
					|	БПАГНоменклатура.Номенклатура.ЕдиницаИзмерения.Наименование КАК Наименование,
					|	//ЕдиницыИзмерения.Коэффициент КАК Коэффициент,
					|	1 КАК Коэффициент,
					|	0 КАК Вес,
					|	0 КАК ЭтоБазоваяЕдиница,
					|	0 КАК ЭтоЕдиницаДляОтчетов
					|ИЗ
					|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
					|		//ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
					|		//ПО БПАГНоменклатура.Номенклатура = ЕдиницыИзмерения.Владелец
					|ГДЕ
					|	НЕ БПАГНоменклатура.ПометкаУдаления
					|	И НЕ БПАГНоменклатура.ЭтоГруппа
					|	//И НЕ ЕдиницыИзмерения.ПометкаУдаления
					|	И (&ВыгрузкаВсех
					|			ИЛИ БПАГНоменклатура.Ссылка В ИЕРАРХИИ (&Ассортимент))
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	БПАГНоменклатура.Код,
					|	БПАГНоменклатура.Номенклатура.ЕдиницаИзмерения.Наименование,
					|	1,
					|	0,
					|	1,
					|	1
					|ИЗ
					|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
					|ГДЕ
					|	НЕ БПАГНоменклатура.ПометкаУдаления
					|	И НЕ БПАГНоменклатура.ЭтоГруппа
					|	И (&ВыгрузкаВсех
					|			ИЛИ БПАГНоменклатура.Ссылка В ИЕРАРХИИ (&Ассортимент))
					|
					|УПОРЯДОЧИТЬ ПО
					|	ЭтоБазоваяЕдиница УБЫВ,
					|	Коэффициент";
				Иначе
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	БПАГНоменклатура.Код КАК Код,
					|	ЕдиницыИзмерения.Наименование КАК Наименование,
					|	ЕдиницыИзмерения.Коэффициент КАК Коэффициент,
					|	0 КАК Вес,
					|	0 КАК ЭтоБазоваяЕдиница,
					|	0 КАК ЭтоЕдиницаДляОтчетов
					|ИЗ
					|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
					|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
					|		ПО БПАГНоменклатура.Номенклатура = ЕдиницыИзмерения.Владелец
					|ГДЕ
					|	НЕ БПАГНоменклатура.ПометкаУдаления
					|	И НЕ БПАГНоменклатура.ЭтоГруппа
					|	И НЕ ЕдиницыИзмерения.ПометкаУдаления
					|	И (&ВыгрузкаВсех
					|			ИЛИ БПАГНоменклатура.Ссылка В ИЕРАРХИИ (&Ассортимент))
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	БПАГНоменклатура.Код,
					|	БПАГНоменклатура.Номенклатура.ЕдиницаИзмерения.Наименование,
					|	1,
					|	0,
					|	1,
					|	1
					|ИЗ
					|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
					|ГДЕ
					|	НЕ БПАГНоменклатура.ПометкаУдаления
					|	И НЕ БПАГНоменклатура.ЭтоГруппа
					|	И (&ВыгрузкаВсех
					|			ИЛИ БПАГНоменклатура.Ссылка В ИЕРАРХИИ (&Ассортимент))
					|
					|УПОРЯДОЧИТЬ ПО
					|	ЭтоБазоваяЕдиница УБЫВ,
					|	Коэффициент";
				КонецЕсли;
			Иначе
				
				//УТ10
				//Запрос.Текст = 
				//"ВЫБРАТЬ
				//|	БПАГНоменклатура.Код КАК Код,
				//|	ЕдиницыИзмерения.Наименование,
				//|	ЕдиницыИзмерения.Коэффициент КАК Коэффициент,
				//|	ЕдиницыИзмерения.Вес КАК Вес,
				//|	БПАГНоменклатура.Номенклатура.Весовой КАК Весовой,
				//|	ВЫБОР
				//|		КОГДА ЕдиницыИзмерения.Ссылка = БПАГНоменклатура.Номенклатура.ЕдиницаХраненияОстатков.Ссылка
				//|			ТОГДА 1
				//|		ИНАЧЕ 0
				//|	КОНЕЦ КАК ЭтоБазоваяЕдиница,
				//|	ВЫБОР
				//|		КОГДА ЕдиницыИзмерения.Ссылка = БПАГНоменклатура.Номенклатура.ЕдиницаДляОтчетов.Ссылка
				//|			ТОГДА 1
				//|		ИНАЧЕ 0
				//|	КОНЕЦ КАК ЭтоЕдиницаДляОтчетов
				//|ИЗ
				//|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
				//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
				//|		ПО БПАГНоменклатура.Номенклатура = ЕдиницыИзмерения.Владелец
				//|ГДЕ
				//|	НЕ БПАГНоменклатура.ПометкаУдаления
				//|	И НЕ БПАГНоменклатура.ЭтоГруппа
				//|	И НЕ ЕдиницыИзмерения.ПометкаУдаления
				//|	И (&ВыгрузкаВсех
				//|			ИЛИ БПАГНоменклатура.Ссылка В ИЕРАРХИИ (&Ассортимент))
				//|
				//|УПОРЯДОЧИТЬ ПО
				//|	ЭтоБазоваяЕдиница УБЫВ,
				//|	Коэффициент";
				
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	БПАГНоменклатура.Код КАК Код,
				|	ЕдиницыИзмерения.Наименование,
				|	ЕдиницыИзмерения.Коэффициент КАК Коэффициент,
				|	ЕдиницыИзмерения.Вес КАК Вес,
				|	БПАГНоменклатура.Номенклатура.Весовой КАК Весовой,
				|	ВЫБОР
				|		КОГДА ЕдиницыИзмерения.Ссылка = БПАГНоменклатура.Номенклатура.ЕдиницаХраненияОстатков.Ссылка
				|			ТОГДА 1
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК ЭтоБазоваяЕдиница,
				|	ВЫБОР
				|		КОГДА ЕдиницыИзмерения.Ссылка = БПАГНоменклатура.Номенклатура.ЕдиницаДляОтчетов.Ссылка
				|			ТОГДА 1
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК ЭтоЕдиницаДляОтчетов,
				|	Штрихкоды.Штрихкод КАК Штрихкод
				|ИЗ
				|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
				|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
				|			ПО ЕдиницыИзмерения.Ссылка = Штрихкоды.ЕдиницаИзмерения
				|		ПО БПАГНоменклатура.Номенклатура = ЕдиницыИзмерения.Владелец
				|ГДЕ
				|	НЕ БПАГНоменклатура.ПометкаУдаления
				|	И НЕ БПАГНоменклатура.ЭтоГруппа
				|	И НЕ ЕдиницыИзмерения.ПометкаУдаления
				|	И (&ВыгрузкаВсех
				|			ИЛИ БПАГНоменклатура.Ссылка В ИЕРАРХИИ (&Ассортимент))
				|
				|УПОРЯДОЧИТЬ ПО
				|	ЭтоБазоваяЕдиница УБЫВ,
				|	Коэффициент";
				
			КонецЕсли;
			
			Запрос.УстановитьПараметр("Ассортимент", МассивАссортимента);
			Запрос.УстановитьПараметр("ВыгрузкаВсех", ВыгрузкаВсех);
			
			ТЗЕдиницы = Запрос.Выполнить().Выгрузить();
			Если ВидПрикладногоРешения = "УТ11" Тогда
				//Расширенный вариант учета базовых единиц и упаковок для УТ11	
				тмпТЗЕдиницы = ТЗЕдиницы.Скопировать();
				тмпТЗЕдиницы.Свернуть("Код, Товар");
				Для Каждого тмпСтрокаЕдиницИзмерения из тмпТЗЕдиницы Цикл
					Отбор = Новый Структура();
					Отбор.Вставить("Код", тмпСтрокаЕдиницИзмерения.Код);
					СтрокиТЗ = ТЗЕдиницы.НайтиСтроки(Отбор);	
					ДобавитьБазовуюЕдиницу = Истина;
					Для Каждого тмпСтрокаТЗ Из СтрокиТЗ Цикл
						Если (тмпСтрокаТЗ.Наименование = "Пусто") ИЛИ (тмпСтрокаТЗ.ЭтоБазоваяЕдиница = 1) Тогда
							ДобавитьБазовуюЕдиницу = Ложь;
							Прервать;
						КонецЕсли
					КонецЦикла;
					//Создать строку
					Если ДобавитьБазовуюЕдиницу Тогда
						НоваяСтрока = ТЗЕдиницы.Добавить();
						НоваяСтрока.Код = тмпСтрокаЕдиницИзмерения.Код; 
						НоваяСтрока.ЕдиницаИзмеренияИзНоменклатуры = тмпСтрокаЕдиницИзмерения.Товар.ЕдиницаИзмерения; 
						НоваяСтрока.Наименование = тмпСтрокаЕдиницИзмерения.Товар.ЕдиницаИзмерения; 
						НоваяСтрока.Вес = тмпСтрокаЕдиницИзмерения.Товар.Вес; 
						НоваяСтрока.Коэффициент = 1;
						НоваяСтрока.ЭтоБазоваяЕдиница = 1;
						НоваяСтрока.ЭтоЕдиницаДляОтчетов = 1;
					КонецЕсли;	
				КонецЦикла;
				ТЗЕдиницы.Колонки.Удалить("Товар");
				ТЗЕдиницы.Сортировать("ЭтоБазоваяЕдиница Убыв, Коэффициент Возр");
			КонецЕсли;
			
			Если СпецификаПользователя = "BY" Тогда
				КатегорияНеКонтролироватьКратность = Справочники.КатегорииОбъектов.НайтиПоНаименованию("Не контролировать кратность на устройстве");
				КатегорияГрузитьВКГ = Справочники.КатегорииОбъектов.НайтиПоНаименованию("Разрешить отгружать в кг");
			КонецЕсли;
			
			Если ИспользоватьХарактеристики Тогда
				ТЗ.Колонки.Добавить("tmp_name");
				ТЗ.Колонки.Добавить("tmp_uniqueID");
				Для Каждого тмпСтрока Из ТЗ Цикл
					Если тмпСтрока.ИспользованиеХарактеристик = 1 Тогда
						тмпСтрока.tmp_name = тмпСтрока.name + ": " + тмпСтрока.Характеристика;
						тмпСтрока.tmp_uniqueID = тмпСтрока.uniqueID + ":|" + тмпСтрока.Характеристика;
					Иначе
						тмпСтрока.tmp_name = тмпСтрока.name;
						тмпСтрока.tmp_uniqueID = тмпСтрока.uniqueID;
					КонецЕсли;
				КонецЦикла;	
				Если ВидПрикладногоРешения <> "УТ10" Тогда
					ТЗ.Колонки.Удалить("name");
					ТЗ.Колонки.Удалить("uniqueID");
					ТЗ.Колонки["tmp_name"].Имя = "name";
					ТЗ.Колонки["tmp_uniqueID"].Имя = "uniqueID";
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого тмпСтрока Из ТЗ Цикл
				
				Если СпецификаПользователя = "BY" Тогда
					//Уберем квант отгрузки у товаров, имеющих категорию "Не контролировать кратность на устройстве"
					НаборЗаписей = РегистрыСведений.КатегорииОбъектов.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Объект.Установить(тмпСтрока.СсылкаНаНоменклатуру);
					НаборЗаписей.Отбор.Категория.Установить(КатегорияНеКонтролироватьКратность);
					НаборЗаписей.Прочитать();
					Если НаборЗаписей.Количество() > 0 Тогда
						тмпСтрока.shipmentQuantum = 0;
					КонецЕсли;
				КонецЕсли;
				
				//Определим ограничения коэффициентов для выгрузки
				МинимальныйКоэффициент = 0;
				МаксимальныйКоэффициент = 0;
				Если ИспользоватьОграниченияПоКоэффициентам Тогда
					тмпТовар = тмпСтрока.Ссылка;
					Пока тмпТовар <> ПустаяСсылкаНаНоменклатуру Цикл
						Если МинимальныйКоэффициент	> 0 Тогда
							Прервать;
						КонецЕсли;
						МинимальныйКоэффициент = тмпТовар.МинимальныйКоэффициент;
						тмпТовар = тмпТовар.Родитель;
					КонецЦикла;
					
					тмпТовар = тмпСтрока.Ссылка;
					Пока тмпТовар <> ПустаяСсылкаНаНоменклатуру Цикл
						Если МаксимальныйКоэффициент > 0 Тогда
							Прервать;
						КонецЕсли;
						МаксимальныйКоэффициент = тмпТовар.МаксимальныйКоэффициент;
						тмпТовар = тмпТовар.Родитель;
					КонецЦикла;
					
					Если МинимальныйКоэффициент = 0 Тогда
						МинимальныйКоэффициент = НастройкаИзКэша("1СМинимальныйКоэффициент", тмпАгент.Агент);
					КонецЕсли;
					
					Если МаксимальныйКоэффициент = 0 Тогда
						МаксимальныйКоэффициент = НастройкаИзКэша("1СМаксимальныйКоэффициент", тмпАгент.Агент);
					КонецЕсли;
				КонецЕсли;
				тмпСтрока.article = СокрЛП(тмпСтрока.article);
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Код", тмпСтрока.uniqueID);
				СтрокиЕдиниц = ТЗЕдиницы.НайтиСтроки(ПараметрыОтбора);
				Счет = 0;
				СтрокаШтрихкодов = "";
				Если СпецификаПользователя <> "SD" Тогда //SD
					Если ВидПрикладногоРешения = "УТ10" Тогда
						Для Каждого тмпСтрокаЕдиниц Из СтрокиЕдиниц Цикл
							Если СтрокаШтрихкодов = "" Тогда
								СтрокаШтрихкодов = СтрокаШтрихкодов + СокрЛП(тмпСтрокаЕдиниц.Штрихкод); 
							Иначе
								СтрокаШтрихкодов = СтрокаШтрихкодов + ", " + СокрЛП(тмпСтрокаЕдиниц.Штрихкод); 
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Если ВидПрикладногоРешения = "УТ11" Тогда
						ТЗЕдиницыНовая = ТЗЕдиницы.скопировать();
						ТЗЕдиницыНовая.Свернуть("Код, Штрихкод");
						СтрокиЕдиницНовая = ТЗЕдиницыНовая.НайтиСтроки(ПараметрыОтбора);
						Для Каждого тмпСтрокаЕдиниц Из СтрокиЕдиницНовая Цикл
							Если СтрокаШтрихкодов = "" Тогда
								СтрокаШтрихкодов = СтрокаШтрихкодов + СокрЛП(тмпСтрокаЕдиниц.Штрихкод); 
							Иначе
								СтрокаШтрихкодов = СтрокаШтрихкодов + ", " + СокрЛП(тмпСтрокаЕдиниц.Штрихкод); 
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				Для Каждого тмпСтрокаЕдиниц Из СтрокиЕдиниц Цикл
					
					Если СпецификаПользователя = "BY" Тогда
						Если ВРег(СокрЛП(тмпСтрокаЕдиниц.Наименование)) = "Л" Тогда
							Продолжить;	
						КонецЕсли;
						
						Если ВРег(Лев(тмпСтрокаЕдиниц.Наименование, 2)) = "КГ" Тогда
							Если Не КатегорияГрузитьВКГ.Пустая() Тогда
								НаборЗаписей = РегистрыСведений.КатегорииОбъектов.СоздатьНаборЗаписей();
								
								НаборЗаписей.Отбор.Объект.Установить(тмпСтрока.Ссылка.Номенклатура);
								НаборЗаписей.Отбор.Категория.Установить(КатегорияГрузитьВКГ);
								
								НаборЗаписей.Прочитать();
								Если НаборЗаписей.Количество() = 0 Тогда
									Продолжить;	
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					//Учтем вариант, когда не используются упаковки
					Если тмпСтрокаЕдиниц.Наименование = "Пусто" Тогда
						тмпСтрокаЕдиниц.Наименование = тмпСтрокаЕдиниц.ЕдиницаИзмеренияИзНоменклатуры;
						тмпСтрокаЕдиниц.ЭтоБазоваяЕдиница = 1;
						тмпСтрокаЕдиниц.ЭтоЕдиницаДляОтчетов = 1;
					КонецЕсли;
					
					//Отфильтруем единицы с неподходящими коэффициентами
					Если ИспользоватьОграниченияПоКоэффициентам Тогда
						Если (тмпСтрокаЕдиниц.Коэффициент < МинимальныйКоэффициент) ИЛИ ((МаксимальныйКоэффициент > 0) И (тмпСтрокаЕдиниц.Коэффициент > МаксимальныйКоэффициент)) Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					тмпСтрока.barcode = СтрокаШтрихкодов;
					Счет = Счет + 1;
					Если Счет = 1 Тогда
						тмпСтрока.unit1Name = тмпСтрокаЕдиниц.Наименование;
						тмпСтрока.unit1Coeff = тмпСтрокаЕдиниц.Коэффициент;
						Если СпецификаПользователя = "Adal" Тогда
							тмпСтрока.unit1Weight = тмпСтрока.СсылкаНаНоменклатуру.Вес;
						ИначеЕсли СпецификаПользователя = "SD" Тогда
							Если тмпСтрока.Ссылка.Номенклатура.Вес > 0 Тогда
								тмпСтрока.unit1Weight = тмпСтрока.Ссылка.Номенклатура.Вес;
							КонецЕсли;	
						Иначе	                              
							тмпСтрока.unit1Weight = тмпСтрокаЕдиниц.Вес;
						КонецЕсли;
					ИначеЕсли Счет = 2 Тогда
						тмпСтрока.unit2Name = тмпСтрокаЕдиниц.Наименование;
						тмпСтрока.unit2Coeff = тмпСтрокаЕдиниц.Коэффициент;
						Если СпецификаПользователя = "Adal" Тогда
							тмпСтрока.unit2Weight = тмпСтрока.СсылкаНаНоменклатуру.Вес;
						Иначе	
							тмпСтрока.unit2Weight = тмпСтрокаЕдиниц.Вес;
						КонецЕсли;
					ИначеЕсли Счет = 3 Тогда
						тмпСтрока.unit3Name = тмпСтрокаЕдиниц.Наименование;
						тмпСтрока.unit3Coeff = тмпСтрокаЕдиниц.Коэффициент;
						Если СпецификаПользователя = "Adal" Тогда
							тмпСтрока.unit3Weight = тмпСтрока.СсылкаНаНоменклатуру.Вес;
						Иначе	
							тмпСтрока.unit3Weight = тмпСтрокаЕдиниц.Вес;
						КонецЕсли;
					Иначе
						Прервать;
					КонецЕсли;
				КонецЦикла;
				//Добавим единицы хранения остатков и для отчетов
				Для Каждого тмпСтрокаЕдиниц Из СтрокиЕдиниц Цикл
					Если тмпСтрокаЕдиниц.ЭтоБазоваяЕдиница = 1 Тогда
						тмпСтрока.baseUnitName = тмпСтрокаЕдиниц.Наименование;
						тмпСтрока.baseUnitCoeff = тмпСтрокаЕдиниц.Коэффициент;
						//Если ни одна единица не попала по фильтру коэффициентов, то в качестве Unit1 возьмем базовую (ед. хран. ост.)
						Если Счет = 0 Тогда
							тмпСтрока.unit1Name = тмпСтрокаЕдиниц.Наименование;
							тмпСтрока.unit1Coeff = тмпСтрокаЕдиниц.Коэффициент;
						КонецЕсли;
					КонецЕсли;
					Если тмпСтрокаЕдиниц.ЭтоЕдиницаДляОтчетов = 1 Тогда
						тмпСтрока.reportUnitName = тмпСтрокаЕдиниц.Наименование;
						тмпСтрока.reportUnitCoeff = тмпСтрокаЕдиниц.Коэффициент;
					КонецЕсли;
				КонецЦикла;
				//Если квант отгрузки товара задан, а выравнивающий коэффициент не задан, то устанавливаем его по умолчанию.
				Если (тмпСтрока.shipmentQuantum > 0) и (тмпСтрока.adjustmentCoeff = 0) Тогда
					тмпСтрока.adjustmentCoeff = 0.001;
				КонецЕсли;
			КонецЦикла;
			ТЗ.Колонки.Удалить("Ссылка");
			Если СпецификаПользователя <> "SD" Тогда //SD
				Если ВидПрикладногоРешения = "УТ10" Тогда
					ТЗ.Колонки.Удалить("СсылкаНаНоменклатуру");
					Если ИспользоватьХарактеристики Тогда
						ТЗ.Колонки.Удалить("name");
						ТЗ.Колонки.Удалить("uniqueID");
						ТЗ.Колонки["tmp_name"].Имя = "name";
						ТЗ.Колонки["tmp_uniqueID"].Имя = "uniqueID";
					КонецЕсли;		
				КонецЕсли;
				
				Попытка
					ТЗ.Колонки.Удалить("Характеристика");
					ТЗ.Колонки.Удалить("ИспользованиеХарактеристик");
				Исключение
				КонецПопытки;
			КонецЕсли;
			
			#КонецОбласти
			
			КлючПоиска = "Ассортимент%-%" + СокрЛП(тмпАгент.Агент.Ассортимент.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Ассортимент);
			СформироватьPlist(ТЗ, "uniqueID", тмпТЗАгенты, "goods", "товаров", Ложь, , , , КлючПоиска);
			
		КонецЕсли;
		
		Если СпецификаПользователя <> "SD" Тогда //SD
			
			//Виды свойств
			СписокФайловВыгрузки = Новый СписокЗначений;
			СписокФайловВыгрузки.Добавить("goodPropertyTypes");
			СписокФайловВыгрузки.Добавить("goodProperties");
			
			КлючПоиска = "Ассортимент%-%" + СокрЛП(тмпАгент.Агент.Ассортимент.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Ассортимент);
			Если ПолучитьГотовыеФайлыВыгрузкиИзКэша(тмпАгент.Агент, КлючПоиска, СписокФайловВыгрузки) Тогда
				//Файлы возьмем из кэша
				
			Иначе
				
				#Область goodPropertyTypes
					
				Если (ВидПрикладногоРешения = "УТ11") Тогда
					// ***** NIY (IO) виды свойств
					ТЗ = Новый ТаблицаЗначений;
					ТЗ.Колонки.Добавить("uniqueID");
					//ТЗ.Колонки.Добавить("highlightColor");
					//ТЗ.Колонки.Добавить("identifier");
					//ТЗ.Колонки.Добавить("invisible");
					//ТЗ.Колонки.Добавить("type");
					//ТЗ.Колонки.Добавить("sort");
					//ПАКЛ->
					Запрос = Новый Запрос();
					Запрос.Текст =
					
					"ВЫБРАТЬ
					|	БПАГКатегорииТоваров.Категория.Ссылка,
					|	БПАГКатегорииТоваров.Категория.Наименование КАК name,
					|	БПАГКатегорииТоваров.Цвет КАК highlightColor,
					|	БПАГКатегорииТоваров.Идентификатор КАК identifier,
					|	ВЫБОР
					|		КОГДА БПАГКатегорииТоваров.Невидимый
					|			ТОГДА ""1""
					|		ИНАЧЕ ""0""
					|	КОНЕЦ КАК invisible,
					|	БПАГКатегорииТоваров.Тип КАК Тип,
					|	БПАГКатегорииТоваров.Категория КАК Ссылка
					|ИЗ
					|	РегистрСведений.БПАГКатегорииТоваров КАК БПАГКатегорииТоваров
					|
					|УПОРЯДОЧИТЬ ПО
					|	БПАГКатегорииТоваров.Категория.Наименование";
					
					//Добавить в регистр Поле "Код"
					
					//ТЗ = Запрос.Выполнить().Выгрузить();
					
					
					//"ВЫБРАТЬ
					//|	ВЫБОР
					//|		КОГДА БПАГКатегорииТоваров.Категория ССЫЛКА Справочник.КатегорииОбъектов
					//|			ТОГДА ""S"" + БПАГКатегорииТоваров.Категория.Код
					//|		ИНАЧЕ ""S"" + БПАГКатегорииТоваров.Категория.Код
					//|	КОНЕЦ КАК uniqueID,
					
					//Ном = 0;
					//ТЗ = Запрос.Выполнить().Выгрузить();
					//ТЗ.Колонки.Добавить("type");
					//ТЗ.Колонки.Добавить("sort");
					//Для Каждого тмпСтрока Из ТЗ Цикл
					//	Ном = Ном + 1;
					//	тмпСтрока.sort = Ном;
					//	Если СокрЛП(тмпСтрока.Тип) = "Булево" Тогда
					//		тмпСтрока.type = "boolean";
					//	ИначеЕсли СокрЛП(тмпСтрока.Тип) = "Дата" Тогда
					//		тмпСтрока.type = "date";
					//	ИначеЕсли СокрЛП(тмпСтрока.Тип) = "Строка" Тогда
					//		тмпСтрока.type = "string";
					//	ИначеЕсли СокрЛП(тмпСтрока.Тип) = "Число" Тогда
					//		тмпСтрока.type = "number";
					//	Иначе
					//		тмпСтрока.type = "string";
					//	КонецЕсли;
					//КонецЦикла;	
					//
					//МассивКатегорий = ТЗ.ВыгрузитьКолонку("Ссылка");
					//ТЗ.Колонки.Удалить("Ссылка");
					//ТЗ.Колонки.Удалить("Тип");
					
					
					//Значения свойств
					//Запрос = Новый Запрос();
					//Запрос.Текст =
					//"ВЫБРАТЬ
					//|	НоменклатураДополнительныеРеквизиты.Ссылка,
					//|	НоменклатураДополнительныеРеквизиты.НомерСтроки,
					//|	НоменклатураДополнительныеРеквизиты.Свойство,
					//|	НоменклатураДополнительныеРеквизиты.Значение,
					//|	НоменклатураДополнительныеРеквизиты.ТекстоваяСтрока
					//|ИЗ
					//|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты";
					
					//ТЗ = Запрос.Выполнить().Выгрузить();
					
					//ПАКЛ<-
				ИначеЕсли (ВидПрикладногоРешения = "УНФ") Тогда
					// ***** NIY (IO) виды свойств
					// ***** NIY (IO) виды свойств
					ТЗ = Новый ТаблицаЗначений;
					ТЗ.Колонки.Добавить("uniqueID");
					//ТЗ.Колонки.Добавить("highlightColor");
					//ТЗ.Колонки.Добавить("identifier");
					//ТЗ.Колонки.Добавить("invisible");
					//ТЗ.Колонки.Добавить("type");
					//ТЗ.Колонки.Добавить("sort");
				Иначе
					Запрос = Новый Запрос();
					Запрос.Текст =
					"ВЫБРАТЬ
					|	ВЫБОР
					|		КОГДА БПАГКатегорииТоваров.Категория ССЫЛКА Справочник.КатегорииОбъектов
					|			ТОГДА ""K"" + БПАГКатегорииТоваров.Категория.Код
					|		ИНАЧЕ ""S"" + БПАГКатегорииТоваров.Категория.Код
					|	КОНЕЦ КАК uniqueID,
					|	БПАГКатегорииТоваров.Цвет КАК highlightColor,
					|	БПАГКатегорииТоваров.Категория.Наименование КАК name,
					|	БПАГКатегорииТоваров.Идентификатор КАК identifier,
					|	ВЫБОР
					|		КОГДА БПАГКатегорииТоваров.Невидимый
					|			ТОГДА ""1""
					|		ИНАЧЕ ""0""
					|	КОНЕЦ КАК invisible,
					|	БПАГКатегорииТоваров.Тип КАК Тип,
					|	БПАГКатегорииТоваров.Категория КАК Ссылка
					|ИЗ
					|	РегистрСведений.БПАГКатегорииТоваров КАК БПАГКатегорииТоваров
					|ГДЕ
					|	НЕ БПАГКатегорииТоваров.Категория.ПометкаУдаления
					|
					|УПОРЯДОЧИТЬ ПО
					|	БПАГКатегорииТоваров.Категория.Наименование";
					
					Ном = 0;
					ТЗ = Запрос.Выполнить().Выгрузить();
					ТЗ.Колонки.Добавить("type");
					ТЗ.Колонки.Добавить("sort");
					Для Каждого тмпСтрока Из ТЗ Цикл
						Ном = Ном + 1;
						тмпСтрока.sort = Ном;
						Если СокрЛП(тмпСтрока.Тип) = "Булево" Тогда
							тмпСтрока.type = "boolean";
						ИначеЕсли СокрЛП(тмпСтрока.Тип) = "Дата" Тогда
							тмпСтрока.type = "date";
						ИначеЕсли СокрЛП(тмпСтрока.Тип) = "Строка" Тогда
							тмпСтрока.type = "string";
						ИначеЕсли СокрЛП(тмпСтрока.Тип) = "Число" Тогда
							тмпСтрока.type = "number";
						Иначе
							тмпСтрока.type = "string";
						КонецЕсли;
					КонецЦикла;	
					
					МассивКатегорий = ТЗ.ВыгрузитьКолонку("Ссылка");
					ТЗ.Колонки.Удалить("Ссылка");
					ТЗ.Колонки.Удалить("Тип");
					
				КонецЕсли;
				
				#КонецОбласти
				
				КлючПоиска = "Ассортимент%-%" + СокрЛП(тмпАгент.Агент.Ассортимент.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Ассортимент);
				СформироватьPlist(ТЗ, "uniqueID", тмпТЗАгенты, "goodPropertyTypes", "видов свойств товаров", Ложь, , , , КлючПоиска);
				
				#Область goodProperties
				
				//Значения свойств
				Если (ВидПрикладногоРешения = "УТ11") ИЛИ (ВидПрикладногоРешения = "УНФ") Тогда
					// ***** NIY (IO) значения свойств номенклатуры
					ТЗ = Новый ТаблицаЗначений;
					ТЗ.Колонки.Добавить("goodID");
					
				Иначе
					Запрос = Новый Запрос();
					Запрос.Текст =
					"ВЫБРАТЬ
					|	БПАГНоменклатура.Код КАК goodID,
					|	""K"" + КатегорииОбъектов.Категория.Код КАК propertyTypeID,
					|	""1"" КАК value
					|ИЗ
					|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
					|		ПО БПАГНоменклатура.Номенклатура = КатегорииОбъектов.Объект
					|ГДЕ
					|	НЕ БПАГНоменклатура.ПометкаУдаления
					|	И (&ВыгрузкаВсех
					|			ИЛИ БПАГНоменклатура.Ссылка В ИЕРАРХИИ (&Ассортимент))
					|	И КатегорииОбъектов.Категория В(&МассивКатегорий)
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	БПАГНоменклатура.Код,
					|	""S"" + ЗначенияСвойствОбъектов.Свойство.Код,
					|	ЗначенияСвойствОбъектов.Значение
					|ИЗ
					|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
					|		ПО БПАГНоменклатура.Номенклатура = ЗначенияСвойствОбъектов.Объект
					|ГДЕ
					|	НЕ БПАГНоменклатура.ПометкаУдаления
					|	И (&ВыгрузкаВсех
					|			ИЛИ БПАГНоменклатура.Ссылка В ИЕРАРХИИ (&Ассортимент))
					|	И ЗначенияСвойствОбъектов.Свойство В(&МассивКатегорий)";
					
					Запрос.УстановитьПараметр("Ассортимент", МассивАссортимента);
					Запрос.УстановитьПараметр("ВыгрузкаВсех", ВыгрузкаВсех);
					Запрос.УстановитьПараметр("МассивКатегорий", МассивКатегорий);
					
					ТЗ = Запрос.Выполнить().Выгрузить();
					
				КонецЕсли;
				
				#КонецОбласти
				
				КлючПоиска = "Ассортимент%-%" + СокрЛП(тмпАгент.Агент.Ассортимент.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Ассортимент);
				СформироватьPlist(ТЗ, "goodID", тмпТЗАгенты, "goodProperties", "свойств товаров", Ложь, Истина, , , КлючПоиска);
				
			КонецЕсли;
			
			
			#Область filters

			//Фильтры товаров
			СписокФайловВыгрузки = Новый СписокЗначений;
			СписокФайловВыгрузки.Добавить("filters");
			Если ВидПрикладногоРешения = "УТ11" Тогда
				
				Запрос.Текст = 
				
				"ВЫБРАТЬ
				|	БПАГВидыФильтров.Код КАК uniqueID,
				|	БПАГВидыФильтров.Наименование КАК name,
				|	""good"" КАК type,
				|	БПАГВидыФильтров.ПорядокФильтра КАК sort,
				|	БПАГВидыФильтров.УсловияФильтров.(
				|		НомерСтроки КАК uniqueID,
				|		ТипСравнения КАК Temp_comparisonType,
				|		Значение КАК value1,
				|		ОтборРаскраска КАК Temp_selectionType,
				|		Цвет КАК highlightColor,
				|		ПорядокУсловия КАК sort,
				|		Свойство КАК propertyTypeID,
				|		ТипФильтра КАК Temp_type
				|	) КАК values
				|ИЗ
				|	Справочник.БПАГВидыФильтров КАК БПАГВидыФильтров
				|ГДЕ
				|	НЕ БПАГВидыФильтров.ПометкаУдаления";				
				
				
				//ТЗ = Запрос.Выполнить().Выгрузить();
				
				//Изменение type, selectionType, comparisonType в таблице значений
				ТЗКопия = Запрос.Выполнить().Выгрузить();
				
				ТЗ = Новый ТаблицаЗначений;
				ТЗ.Колонки.Добавить("uniqueID");
				ТЗ.Колонки.Добавить("name");
				ТЗ.Колонки.Добавить("type");
				ТЗ.Колонки.Добавить("sort");
				ТЗ.Колонки.Добавить("values");
				
				ТЗ_values = Новый ТаблицаЗначений;
				ТЗ_values.Колонки.Добавить("uniqueID");
				ТЗ_values.Колонки.Добавить("comparisonType");
				ТЗ_values.Колонки.Добавить("value1");
				ТЗ_values.Колонки.Добавить("selectionType");
				ТЗ_values.Колонки.Добавить("highlightColor");
				ТЗ_values.Колонки.Добавить("sort");
				ТЗ_values.Колонки.Добавить("propertyTypeID");
				ТЗ_values.Колонки.Добавить("type");
				
				Для Каждого тмпСтрока Из ТЗКопия Цикл
					НоваяСтрока = ТЗ.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, тмпСтрока);
					
					тмпТЗ_values = тмпСтрока.values.Скопировать(); 
					Для Каждого тмпСтрокаvalues из тмпТЗ_values Цикл 
						НоваяСтрока_values = ТЗ_values.Добавить();
						НоваяСтрока_values.uniqueID = тмпСтрокаvalues.uniqueID;
						НоваяСтрока_values.highlightColor = тмпСтрокаvalues.highlightColor;
						НоваяСтрока_values.sort = тмпСтрокаvalues.sort;
						НоваяСтрока_values.propertyTypeID = тмпСтрокаvalues.propertyTypeID; //Подставить Код свойства
						
						Если СокрЛП(тмпСтрокаvalues.Temp_type) = "В наличии на складе" Тогда
							НоваяСтрока_values.type = "rests";
							Если тмпСтрокаvalues.value1 = "Да" Тогда
								НоваяСтрока_values.value1 = "1";
							Иначе
								НоваяСтрока_values.value1 = "0";
							КонецЕсли;	
						ИначеЕсли СокрЛП(тмпСтрокаvalues.Temp_type) = "В истории продаж клиента" Тогда	
							НоваяСтрока_values.type = "salesHistory";
							Если тмпСтрокаvalues.value1 = "Да" Тогда
								НоваяСтрока_values.value1 = "1";
							Иначе
								НоваяСтрока_values.value1 = "0";
							КонецЕсли;	
						ИначеЕсли СокрЛП(тмпСтрокаvalues.Temp_type) = "В спецификации клиента" Тогда	
							НоваяСтрока_values.type = "specification";
							Если тмпСтрокаvalues.value1 = "Да" Тогда
								НоваяСтрока_values.value1 = "1";
							Иначе
								НоваяСтрока_values.value1 = "0";
							КонецЕсли;	
						ИначеЕсли СокрЛП(тмпСтрокаvalues.Temp_type) = "Свойство" Тогда	
							НоваяСтрока_values.type = "property";
							
							Если тмпСтрокаvalues.value1 = "Да" Тогда
								НоваяСтрока_values.value1 = "1";
							ИначеЕсли тмпСтрокаvalues.value1 = "Нет" Тогда	
								НоваяСтрока_values.value1 = "0";
							Иначе
								НоваяСтрока_values.value1 = тмпСтрокаvalues.value1;
							КонецЕсли;	
						КонецЕсли;
						
						Если СокрЛП(тмпСтрокаvalues.Temp_comparisonType) = "Равно" Тогда
							НоваяСтрока_values.comparisonType = "0";
						ИначеЕсли СокрЛП(тмпСтрокаvalues.Temp_comparisonType) = "Не равно" Тогда	
							НоваяСтрока_values.comparisonType = "1";
						ИначеЕсли СокрЛП(тмпСтрокаvalues.Temp_comparisonType) = "Меньше" Тогда	
							НоваяСтрока_values.comparisonType = "2";
						ИначеЕсли СокрЛП(тмпСтрокаvalues.Temp_comparisonType) = "Меньше или равно" Тогда	
							НоваяСтрока_values.comparisonType = "3";
						ИначеЕсли СокрЛП(тмпСтрокаvalues.Temp_comparisonType) = "Больше" Тогда	
							НоваяСтрока_values.comparisonType = "4";
						ИначеЕсли СокрЛП(тмпСтрокаvalues.Temp_comparisonType) = "Больше или равно" Тогда	
							НоваяСтрока_values.comparisonType = "5";
						ИначеЕсли СокрЛП(тмпСтрокаvalues.Temp_comparisonType) = "Содержит" Тогда	
							НоваяСтрока_values.comparisonType = "40";
						КонецЕсли;
						
						Если СокрЛП(тмпСтрокаvalues.Temp_selectionType) = "Отбор" Тогда
							НоваяСтрока_values.selectionType = "0";
						Иначе
							НоваяСтрока_values.selectionType = "1";
						КонецЕсли;
						
					КонецЦикла;
					НоваяСтрока.values = ТЗ_values;
				КонецЦикла;
				
				#КонецОбласти
				
				СформироватьPlist(ТЗ, "uniqueID", Агенты, "filters", "видов свойств строк документов", Истина, Ложь);
				
			КонецЕсли;
		КонецЕсли;
		
		#Область priorityTypes
		//Типы приоритетов
		запрос = Новый Запрос();
		
		#Область ТекстЗапроса
		
		запрос.Текст = 
		
		"ВЫБРАТЬ
		|	БПАГТипыПриоритетов.Код КАК uniqueID,
		|	ВЫБОР
		|		КОГДА БПАГТипыПриоритетов.Обязательный
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК required,
		|	ВЫБОР
		|		КОГДА БПАГТипыПриоритетов.Рекомендуемый
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК recommended,
		|	БПАГТипыПриоритетов.ЦветШрифта КАК fontColor,
		|	БПАГТипыПриоритетов.ЦветФона КАК backgroundColor
		|ИЗ
		|	Справочник.БПАГТипыПриоритетов КАК БПАГТипыПриоритетов
		|ГДЕ
		|	НЕ БПАГТипыПриоритетов.ПометкаУдаления";
		
		#КонецОбласти
		
		
		#КонецОбласти
		
		СформироватьPlist(запрос.Выполнить().Выгрузить(), "uniqueID", тмпТЗАгенты, "priorityTypes", "типы приоритетов", Ложь);
		
		#Область standards
		
		//Стандарты присутствия
		запрос = Новый Запрос();
		
		#Область ТекстЗапроса
		
		запрос.Текст = 
		
		"ВЫБРАТЬ
		|	КонтрагентыМенеджеры.Ссылка КАК ТорговаяТочка
		|ПОМЕСТИТЬ ВТ_ТорговыеТочкиТорговогоПредставителя
		|ИЗ
		|	Справочник.Контрагенты.Менеджеры КАК КонтрагентыМенеджеры
		|ГДЕ
		|	КонтрагентыМенеджеры.Менеджер = &Менеджер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПартнерыСегмента.Сегмент
		|ПОМЕСТИТЬ ВТ_СегментыПартнеровТорговогоПредставителя
		|ИЗ
		|	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
		|ГДЕ
		|	ПартнерыСегмента.Партнер В
		|			(ВЫБРАТЬ
		|				ВТ_ТорговыеТочкиТорговогоПредставителя.ТорговаяТочка
		|			ИЗ
		|				ВТ_ТорговыеТочкиТорговогоПредставителя КАК ВТ_ТорговыеТочкиТорговогоПредставителя)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КД_СтандартПрисутствия.КатегорияТТ.Код КАК standardID,
		|	БПАГНоменклатура.Код КАК goodID,
		|	КД_СтандартПрисутствия.МинимальныйОстаток КАК minRest,
		|	КД_СтандартПрисутствия.Фэйсинг КАК facing,
		|	БПАГТипыПриоритетов.Код КАК priorityTypeID
		|ИЗ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(КД_СтандартПрисутствияСрезПоследних.Период) КАК Период,
		|		КД_СтандартПрисутствияСрезПоследних.Подразделение КАК Подразделение,
		|		КД_СтандартПрисутствияСрезПоследних.КатегорияТТ КАК КатегорияТТ
		|	ИЗ
		|		РегистрСведений.КД_СтандартПрисутствия.СрезПоследних(&ДатаОкончания, Подразделение = &Подразделение) КАК КД_СтандартПрисутствияСрезПоследних
		|	
		|	СГРУППИРОВАТЬ ПО
		|		КД_СтандартПрисутствияСрезПоследних.КатегорияТТ,
		|		КД_СтандартПрисутствияСрезПоследних.Подразделение) КАК ТекущиеСтандартыПрисутствия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КД_СтандартПрисутствия КАК КД_СтандартПрисутствия
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БПАГНоменклатура КАК БПАГНоменклатура
		|			ПО КД_СтандартПрисутствия.Номенклатура = БПАГНоменклатура.Номенклатура
		|				И (ВЫБОР
		|					КОГДА КД_СтандартПрисутствия.КатегорияТТ.Родитель.ГруппаПродукта В ИЕРАРХИИ (&Группа_МИ)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ КД_СтандартПрисутствия.ТипПриоритета <> ЗНАЧЕНИЕ(Перечисление.КД_ТипыПриоритетовПродукта.НеРекомендуемый)
		|				КОНЕЦ)
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БПАГТипыПриоритетов КАК БПАГТипыПриоритетов
		|			ПО КД_СтандартПрисутствия.ТипПриоритета = БПАГТипыПриоритетов.ТипПриоритета
		|		ПО ТекущиеСтандартыПрисутствия.Подразделение = КД_СтандартПрисутствия.Подразделение
		|			И ТекущиеСтандартыПрисутствия.КатегорияТТ = КД_СтандартПрисутствия.КатегорияТТ
		|			И ТекущиеСтандартыПрисутствия.Период = КД_СтандартПрисутствия.Период
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СпецификацияСостав.Ссылка.Номер + ""_"" + СпецификацияСостав.Ссылка.СегментПартнеров.Код,
		|	БПАГНоменклатура.Код,
		|	0,
		|	0,
		|	БПАГТипыПриоритетов.Код
		|ИЗ
		|	Документ.Спецификация.Состав КАК СпецификацияСостав
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БПАГТипыПриоритетов КАК БПАГТипыПриоритетов
		|		ПО (БПАГТипыПриоритетов.ТипПриоритета = ЗНАЧЕНИЕ(Перечисление.КД_ТипыПриоритетовПродукта.Обязательный))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БПАГНоменклатура КАК БПАГНоменклатура
		|		ПО СпецификацияСостав.Номенклатура = БПАГНоменклатура.Номенклатура
		|ГДЕ
		|	СпецификацияСостав.Ссылка.Проведен = ИСТИНА
		|	И СпецификацияСостав.Ссылка.ДатаНачала <= &ДатаНачала
		|	И (СпецификацияСостав.Ссылка.ДатаОкончания >= &ДатаОкончания
		|			ИЛИ СпецификацияСостав.Ссылка.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
		|	И СпецификацияСостав.Ссылка.СегментПартнеров В
		|			(ВЫБРАТЬ
		|				ВТ_СегментыПартнеровТорговогоПредставителя.Сегмент
		|			ИЗ
		|				ВТ_СегментыПартнеровТорговогоПредставителя КАК ВТ_СегментыПартнеровТорговогоПредставителя)
		|	И СпецификацияСостав.Ссылка.Подразделение = &Подразделение";
		
		#КонецОбласти
		
		запрос.УстановитьПараметр("Подразделение", тмпАгент.Агент.Подразделение);
		запрос.УстановитьПараметр("Менеджер", тмпАгент.Агент.Менеджер);
		запрос.УстановитьПараметр("ДатаНачала", ТекущаяДатаСеанса());
		запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ТекущаяДатаСеанса()));
		
		// по "МИ" должен выгружаться доп. ассортимент
		запрос.УстановитьПараметр("Группа_МИ", Справочники.КД_ГруппыНоменклатуры.НайтиПоКоду("000000014") );
		
		
		#КонецОбласти
		
		СформироватьPlist(запрос.Выполнить().Выгрузить(), "goodID", тмпТЗАгенты, "standards", "стандарты приоритетов", Ложь, Истина, , , );
		
	КонецЦикла;
	
КонецПроцедуры	// ВыгрузитьТовары()

#КонецОбласти 

Процедура ВыгрузитьЦены(Агенты)
	
	ВидПрикладногоРешения = БПАГ.ПолучитьВидПрикладногоРешения();
	ИспользоватьХарактеристики = НастройкаИзКэша("1СИспользоватьХарактеристикиТоваров");
	Если СпецификаПользователя = "SD" Тогда//SD
		
		//Типы цен
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БПАГПрайсы.Код КАК uniqueID,
		|	БПАГПрайсы.Наименование КАК name,
		|	БПАГПрайсы.ТипЦен КАК ТипЦен,
		|	БПАГПрайсы.Ссылка
		|ИЗ
		|	Справочник.БПАГПрайсы КАК БПАГПрайсы
		|ГДЕ
		|	НЕ БПАГПрайсы.ПометкаУдаления
		|	И БПАГПрайсы.ТипЦен <> &ПустойТипЦен";
		
		Запрос.УстановитьПараметр("ПустойТипЦен", Справочники.ТипыЦен.ПустаяСсылка());
		
		ТЗ = Запрос.Выполнить().Выгрузить();
		ИспользуемыеАгентамиТипыЦен = ТЗ.ВыгрузитьКолонку("ТипЦен");
		
		Для Каждого тмпАгент Из Агенты Цикл
			
			тмпТЗАгенты = СоздатьТаблицуИзОдногоАгента(тмпАгент);
			МассивАгентов = Новый Массив();
			МассивАгентов.Добавить(тмпАгент.Агент);
			
			//Типы цен, доступные клиентам
			МассивКлиентуры = ПолучитьМассивКлиентурыКлиентов(МассивАгентов);
			//Если клиентуры нет или она пустая, то выгружаем всех контрагентов
			ВыгрузкаВсейКлиентуры = МассивКлиентуры.Количество() = 0;
			
			СписокФайловВыгрузки = Новый СписокЗначений;
			СписокФайловВыгрузки.Добавить("clientPriceTypes");
			КлючПоиска = "Клиентура%-%" + СокрЛП(тмпАгент.Агент.Клиентура.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Клиентура);
			Если ПолучитьГотовыеФайлыВыгрузкиИзКэша(тмпАгент.Агент, КлючПоиска, СписокФайловВыгрузки) Тогда
				//Файлы возьмем из кэша
				
			Иначе			
				Запрос = Новый Запрос();
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	БПАГКонтрагентыТипыЦен.Ссылка.Код КАК clientID,
				|	БПАГКонтрагентыТипыЦен.ТипЦен.Код КАК priceTypeID
				|ИЗ
				|	Справочник.БПАГКонтрагенты.ТипыЦен КАК БПАГКонтрагентыТипыЦен
				|ГДЕ
				|	БПАГКонтрагентыТипыЦен.ТипЦен <> &ПустойТипЦен
				|	И (&ВыгрузкаВсейКлиентуры
				|			ИЛИ БПАГКонтрагентыТипыЦен.Ссылка В ИЕРАРХИИ (&МассивКлиентуры))";
				
				Запрос.УстановитьПараметр("ПустойТипЦен", Справочники.БПАГПрайсы.ПустаяСсылка());
				Запрос.УстановитьПараметр("МассивКлиентуры", МассивКлиентуры);
				Запрос.УстановитьПараметр("ВыгрузкаВсейКлиентуры", ВыгрузкаВсейКлиентуры);
				
				КлючПоиска = "Клиентура%-%" + СокрЛП(тмпАгент.Агент.Клиентура.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Клиентура);
				СформироватьPlist(Запрос.Выполнить().Выгрузить(), "clientID", тмпТЗАгенты, "clientPriceTypes", "типов цен клиентов", Ложь, Истина, , , КлючПоиска);
			КонецЕсли;
			
			//Цены
			МассивАссортимента = ПолучитьМассивАссортимента(МассивАгентов);
			//Если ассортимента нет или он пустой, то выгружаем цены на все товары
			ВыгрузкаВсегоАссортимента = МассивАссортимента.Количество() = 0;
			
			ТипыЦенДоступныеДляАгента = ИспользуемыеАгентамиТипыЦен;
			
			ТЗДоступныхЦен = ТЗ.Скопировать();
			//Отфильтруем типы цен в соответствии с ограничениями доступности
			Если Метаданные.Справочники.БПАГПрайсы.ТабличныеЧасти.Найти("ОграничениеДоступности") <> Неопределено Тогда	//Для совместимости со старыми версиями
				КолВоСтрок = ТЗДоступныхЦен.Количество();
				Для i = 1 По КолВоСтрок Цикл
					ТекПрайс = ТЗДоступныхЦен[КолВоСтрок - i].Ссылка;
					Если ТекПрайс.ОграничениеДоступности.Количество() <> 0 Тогда
						ПрайсДоступен = Ложь;
						Для Каждого тмпОграничение ИЗ ТекПрайс.ОграничениеДоступности Цикл
							Если тмпОграничение.АгентПрофиль.ЭтоГруппа Тогда
								
								Попытка
									Если тмпАгент.Агент.ПринадлежитЭлементу(тмпОграничение.АгентПрофиль) Тогда
										ПрайсДоступен = Истина;
										Прервать;
									КонецЕсли;
								Исключение
								КонецПопытки;
								
								Попытка
									Если тмпАгент.Агент.Профиль.ПринадлежитЭлементу(тмпОграничение.АгентПрофиль) Тогда
										ПрайсДоступен = Истина;
										Прервать;
									КонецЕсли;
								Исключение
								КонецПопытки;
								
							ИначеЕсли (тмпАгент.Агент = тмпОграничение.АгентПрофиль) ИЛИ (тмпАгент.Агент.Профиль = тмпОграничение.АгентПрофиль) Тогда
								ПрайсДоступен = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Если Не ПрайсДоступен Тогда
							ТЗДоступныхЦен.Удалить(КолВоСтрок - i);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ТипыЦенДоступныеДляАгента = ТЗДоступныхЦен.ВыгрузитьКолонку("ТипЦен");
			
			ТЗДоступныхЦен.Колонки.Удалить("ТипЦен");
			ТЗДоступныхЦен.Колонки.Удалить("Ссылка");
			СформироватьPlist(ТЗДоступныхЦен, "uniqueID", тмпТЗАгенты, "priceTypes", "типов цен", Ложь);
			
			СписокФайловВыгрузки = Новый СписокЗначений;
			СписокФайловВыгрузки.Добавить("prices");
			КлючПоиска = "АссортиментИТипыЦен%-%" + СокрЛП(тмпАгент.Агент.Ассортимент.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Ассортимент);
			Для i = 1 По ТипыЦенДоступныеДляАгента.Количество() Цикл
				КлючПоиска = КлючПоиска + "%-%" + СокрЛП(ТипыЦенДоступныеДляАгента[i - 1]);
			КонецЦикла;
			
			Если ПолучитьГотовыеФайлыВыгрузкиИзКэша(тмпАгент.Агент, КлючПоиска, СписокФайловВыгрузки) Тогда
				//Файлы возьмем из кэша
				
			Иначе			
				
				Запрос = Новый Запрос();
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	БПАГНоменклатура.Код КАК goodID,
				|	БПАГПрайсы.Код КАК priceTypeID,
				|	ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Цена КАК ЧИСЛО(15, 2)) КАК price
				|ИЗ
				|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
				|				&МоментВремени,
				|				ТипЦен В (&ИспользуемыеАгентамиТипыЦен)
				|					И Подразделение = &Подразделение) КАК ЦеныНоменклатурыСрезПоследних
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГПрайсы КАК БПАГПрайсы
				|			ПО (БПАГПрайсы.ТипЦен = ЦеныНоменклатурыСрезПоследних.ТипЦен)
				|		ПО БПАГНоменклатура.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
				|ГДЕ
				|	НЕ БПАГНоменклатура.ПометкаУдаления
				|	И НЕ БПАГПрайсы.ПометкаУдаления
				|	И (&ВыгрузкаВсегоАссортимента
				|			ИЛИ БПАГНоменклатура.Ссылка В ИЕРАРХИИ (&МассивАссортимента))";
				
				Запрос.УстановитьПараметр("МоментВремени", ТекущаяДата());
				Запрос.УстановитьПараметр("ИспользуемыеАгентамиТипыЦен", ТипыЦенДоступныеДляАгента);
				Запрос.УстановитьПараметр("ВыгрузкаВсегоАссортимента", ВыгрузкаВсегоАссортимента);
				Запрос.УстановитьПараметр("МассивАссортимента", МассивАссортимента);
				Запрос.УстановитьПараметр("Подразделение", 					тмпАгент.Агент.Подразделение);
				
				КлючПоиска = "АссортиментИТипыЦен%-%" + СокрЛП(тмпАгент.Агент.Ассортимент.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Ассортимент);
				Для i = 1 По ТипыЦенДоступныеДляАгента.Количество() Цикл
					КлючПоиска = КлючПоиска + "%-%" + СокрЛП(ТипыЦенДоступныеДляАгента[i - 1]);
				КонецЦикла;
				СформироватьPlist(Запрос.Выполнить().Выгрузить(), "goodID", тмпТЗАгенты, "prices", "цен", Ложь, Истина, , , КлючПоиска);
			КонецЕсли;
		КонецЦикла;
		
		
	ИначеЕсли ВидПрикладногоРешения = "УТ10" Тогда
		//Типы цен
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БПАГПрайсы.Код КАК uniqueID,
		|	БПАГПрайсы.Наименование КАК name,
		|	БПАГПрайсы.ТипЦен КАК ТипЦен,
		|	БПАГПрайсы.Ссылка
		|ИЗ
		|	Справочник.БПАГПрайсы КАК БПАГПрайсы
		|ГДЕ
		|	НЕ БПАГПрайсы.ПометкаУдаления
		|	И БПАГПрайсы.ТипЦен <> &ПустойТипЦен";
		
		Запрос.УстановитьПараметр("ПустойТипЦен", Справочники.ТипыЦенНоменклатуры.ПустаяСсылка());
		
		ТЗ = Запрос.Выполнить().Выгрузить();
		ИспользуемыеАгентамиТипыЦен = ТЗ.ВыгрузитьКолонку("ТипЦен");
		
		Для Каждого тмпАгент Из Агенты Цикл
			
			тмпТЗАгенты = СоздатьТаблицуИзОдногоАгента(тмпАгент);
			МассивАгентов = Новый Массив();
			МассивАгентов.Добавить(тмпАгент.Агент);
			
			//Типы цен, доступные клиентам
			МассивКлиентуры = ПолучитьМассивКлиентурыКлиентов(МассивАгентов);
			//Если клиентуры нет или она пустая, то выгружаем всех контрагентов
			ВыгрузкаВсейКлиентуры = МассивКлиентуры.Количество() = 0;
			
			СписокФайловВыгрузки = Новый СписокЗначений;
			СписокФайловВыгрузки.Добавить("clientPriceTypes");
			КлючПоиска = "Клиентура%-%" + СокрЛП(тмпАгент.Агент.Клиентура.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Клиентура);
			Если ПолучитьГотовыеФайлыВыгрузкиИзКэша(тмпАгент.Агент, КлючПоиска, СписокФайловВыгрузки) Тогда
				//Файлы возьмем из кэша
				
			Иначе			
				Запрос = Новый Запрос();
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	БПАГКонтрагентыТипыЦен.Ссылка.Код КАК clientID,
				|	БПАГКонтрагентыТипыЦен.ТипЦен.Код КАК priceTypeID
				|ИЗ
				|	Справочник.БПАГКонтрагенты.ТипыЦен КАК БПАГКонтрагентыТипыЦен
				|ГДЕ
				|	БПАГКонтрагентыТипыЦен.ТипЦен <> &ПустойТипЦен
				|	И (&ВыгрузкаВсейКлиентуры
				|			ИЛИ БПАГКонтрагентыТипыЦен.Ссылка В ИЕРАРХИИ (&МассивКлиентуры))";
				
				Запрос.УстановитьПараметр("ПустойТипЦен", Справочники.БПАГПрайсы.ПустаяСсылка());
				Запрос.УстановитьПараметр("МассивКлиентуры", МассивКлиентуры);
				Запрос.УстановитьПараметр("ВыгрузкаВсейКлиентуры", ВыгрузкаВсейКлиентуры);
				
				КлючПоиска = "Клиентура%-%" + СокрЛП(тмпАгент.Агент.Клиентура.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Клиентура);
				СформироватьPlist(Запрос.Выполнить().Выгрузить(), "clientID", тмпТЗАгенты, "clientPriceTypes", "типов цен клиентов", Ложь, Истина, , , КлючПоиска);
			КонецЕсли;
			
			//Цены
			МассивАссортимента = ПолучитьМассивАссортимента(МассивАгентов);
			//Если ассортимента нет или он пустой, то выгружаем цены на все товары
			ВыгрузкаВсегоАссортимента = МассивАссортимента.Количество() = 0;
			
			ТипыЦенДоступныеДляАгента = ИспользуемыеАгентамиТипыЦен;
			
			ТЗДоступныхЦен = ТЗ.Скопировать();
			//Отфильтруем типы цен в соответствии с ограничениями доступности
			Если Метаданные.Справочники.БПАГПрайсы.ТабличныеЧасти.Найти("ОграничениеДоступности") <> Неопределено Тогда	//Для совместимости со старыми версиями
				КолВоСтрок = ТЗДоступныхЦен.Количество();
				Для i = 1 По КолВоСтрок Цикл
					ТекПрайс = ТЗДоступныхЦен[КолВоСтрок - i].Ссылка;
					Если ТекПрайс.ОграничениеДоступности.Количество() <> 0 Тогда
						ПрайсДоступен = Ложь;
						Для Каждого тмпОграничение ИЗ ТекПрайс.ОграничениеДоступности Цикл
							Если тмпОграничение.АгентПрофиль.ЭтоГруппа Тогда
								
								Попытка
									Если тмпАгент.Агент.ПринадлежитЭлементу(тмпОграничение.АгентПрофиль) Тогда
										ПрайсДоступен = Истина;
										Прервать;
									КонецЕсли;
								Исключение
								КонецПопытки;
								
								Попытка
									Если тмпАгент.Агент.Профиль.ПринадлежитЭлементу(тмпОграничение.АгентПрофиль) Тогда
										ПрайсДоступен = Истина;
										Прервать;
									КонецЕсли;
								Исключение
								КонецПопытки;
								
							ИначеЕсли (тмпАгент.Агент = тмпОграничение.АгентПрофиль) ИЛИ (тмпАгент.Агент.Профиль = тмпОграничение.АгентПрофиль) Тогда
								ПрайсДоступен = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Если Не ПрайсДоступен Тогда
							ТЗДоступныхЦен.Удалить(КолВоСтрок - i);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			//ПАКЛ БЯ->
			Если СпецификаПользователя = "BY" Тогда
				//Добавить невидимы базовый тип цен.
				ТЗДоступныхЦен.Колонки.Добавить("invisible");
				БазовыйТипЦен = Справочники.БПАГПрайсы.НайтиПоКоду("000000001");
				НоваяСтрока = ТЗДоступныхЦен.Добавить();
				НоваяСтрока.uniqueID = "OB0000001";
				НоваяСтрока.name = "2. Базовый скрытая";
				НоваяСтрока.ТипЦен = БазовыйТипЦен.ТипЦен; 
				НоваяСтрока.Ссылка = БазовыйТипЦен.Ссылка;
				НоваяСтрока.invisible = "1";
			КонецЕсли;	
			//ПАКЛ БЯ<-
			ТипыЦенДоступныеДляАгента = ТЗДоступныхЦен.ВыгрузитьКолонку("ТипЦен");
			ТЗДоступныхЦен.Колонки.Удалить("ТипЦен");
			ТЗДоступныхЦен.Колонки.Удалить("Ссылка");
			СформироватьPlist(ТЗДоступныхЦен, "uniqueID", тмпТЗАгенты, "priceTypes", "типов цен", Ложь);
			
			СписокФайловВыгрузки = Новый СписокЗначений;
			СписокФайловВыгрузки.Добавить("prices");
			КлючПоиска = "АссортиментИТипыЦен%-%" + СокрЛП(тмпАгент.Агент.Ассортимент.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Ассортимент);
			Для i = 1 По ТипыЦенДоступныеДляАгента.Количество() Цикл
				КлючПоиска = КлючПоиска + "%-%" + СокрЛП(ТипыЦенДоступныеДляАгента[i - 1]);
			КонецЦикла;
			Если ПолучитьГотовыеФайлыВыгрузкиИзКэша(тмпАгент.Агент, КлючПоиска, СписокФайловВыгрузки) Тогда
				//Файлы возьмем из кэша
				
			Иначе			
				Если ИспользоватьХарактеристики Тогда
					
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	БПАГНоменклатура.Код КАК goodID,
					|	ВЫРАЗИТЬ(БПАГПрайсы.Код КАК СТРОКА) КАК priceTypeID,
					|	ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Цена / ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент, 1) КАК ЧИСЛО(15, 2)) КАК price,
					|	ВЫБОР
					|		КОГДА НЕ БПАГНоменклатура.Номенклатура.ВестиУчетПоХарактеристикам
					|			ТОГДА 0
					|		ИНАЧЕ 1
					|	КОНЕЦ КАК ИспользованиеХарактеристик,
					|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
					|ИЗ
					|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&МоментВремени, ТипЦен В (&ИспользуемыеАгентамиТипыЦен)) КАК ЦеныНоменклатурыСрезПоследних
					|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГПрайсы КАК БПАГПрайсы
					|			ПО (БПАГПрайсы.ТипЦен = ЦеныНоменклатурыСрезПоследних.ТипЦен)
					|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
					|			ПО (ХарактеристикиНоменклатуры.Владелец = ЦеныНоменклатурыСрезПоследних.Номенклатура)
					|				И (ХарактеристикиНоменклатуры.Ссылка = ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры)
					|		ПО БПАГНоменклатура.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
					|ГДЕ
					|	НЕ БПАГНоменклатура.ПометкаУдаления
					|	И НЕ БПАГПрайсы.ПометкаУдаления
					|	И (&ВыгрузкаВсегоАссортимента
					|			ИЛИ БПАГНоменклатура.Ссылка В ИЕРАРХИИ (&МассивАссортимента))";
					
					
				Иначе 	
					Запрос = Новый Запрос();
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	БПАГНоменклатура.Код КАК goodID,
					|	БПАГПрайсы.Код КАК priceTypeID,
					|	ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Цена / ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент * БПАГНоменклатура.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК ЧИСЛО(15, 2)) КАК price
					|ИЗ
					|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&МоментВремени, ТипЦен В (&ИспользуемыеАгентамиТипыЦен)) КАК ЦеныНоменклатурыСрезПоследних
					|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГПрайсы КАК БПАГПрайсы
					|			ПО (БПАГПрайсы.ТипЦен = ЦеныНоменклатурыСрезПоследних.ТипЦен)
					|		ПО БПАГНоменклатура.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
					|ГДЕ
					|	НЕ БПАГНоменклатура.ПометкаУдаления
					|	И НЕ БПАГПрайсы.ПометкаУдаления
					|	И (&ВыгрузкаВсегоАссортимента
					|			ИЛИ БПАГНоменклатура.Ссылка В ИЕРАРХИИ (&МассивАссортимента))";
				
				КонецЕсли;
				
				Запрос.УстановитьПараметр("МоментВремени", ТекущаяДата());
				Запрос.УстановитьПараметр("ИспользуемыеАгентамиТипыЦен", ТипыЦенДоступныеДляАгента);
				Запрос.УстановитьПараметр("ВыгрузкаВсегоАссортимента", ВыгрузкаВсегоАссортимента);
				Запрос.УстановитьПараметр("МассивАссортимента", МассивАссортимента);
				КлючПоиска = "АссортиментИТипыЦен%-%" + СокрЛП(тмпАгент.Агент.Ассортимент.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Ассортимент);
				Для i = 1 По ТипыЦенДоступныеДляАгента.Количество() Цикл
					КлючПоиска = КлючПоиска + "%-%" + СокрЛП(ТипыЦенДоступныеДляАгента[i - 1]);
				КонецЦикла;
				
				ТЗЦеныНоменклатуры = Запрос.Выполнить().Выгрузить();
				
				//ПАКЛ БЯ->
				Если СпецификаПользователя = "BY" Тогда
					БазовыйТипЦен = Справочники.БПАГПрайсы.НайтиПоКоду("000000001");
					Запрос = Новый Запрос();
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	""OB0000001"" КАК priceTypeID,
					|	БПАГНоменклатура.Код КАК goodID,
					|	МАКСИМУМ(ЦеныНоменклатуры.Период) КАК ПредыдущаяДата,
					|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
					|	ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Цена / ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент * БПАГНоменклатура.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК ЧИСЛО(15, 2)) КАК Цена
					|ПОМЕСТИТЬ втЦеныНоменклатуры
					|ИЗ
					|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&МоментВремени, ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
					|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
					|			ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ЦеныНоменклатуры.Номенклатура
					|				И ЦеныНоменклатурыСрезПоследних.Период <> ЦеныНоменклатуры.Период
					|				И (ЦеныНоменклатуры.ТипЦен = &ТипЦен)
					|		ПО БПАГНоменклатура.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
					|ГДЕ
					|	НЕ БПАГНоменклатура.ПометкаУдаления
					|	И (&ВыгрузкаВсегоАссортимента
					|			ИЛИ БПАГНоменклатура.Ссылка В ИЕРАРХИИ (&МассивАссортимента))
					|
					|СГРУППИРОВАТЬ ПО
					|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
					|	ЦеныНоменклатурыСрезПоследних.Цена,
					|	БПАГНоменклатура.Код,
					|	ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Цена / ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент * БПАГНоменклатура.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК ЧИСЛО(15, 2))
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	втЦеныНоменклатуры.Номенклатура,
					|	втЦеныНоменклатуры.goodID,
					|	втЦеныНоменклатуры.priceTypeID,
					|	втЦеныНоменклатуры.Цена,
					|	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК price
					|ИЗ
					|	втЦеныНоменклатуры КАК втЦеныНоменклатуры
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
					|		ПО втЦеныНоменклатуры.Номенклатура = ЦеныНоменклатуры.Номенклатура
					|			И втЦеныНоменклатуры.ПредыдущаяДата = ЦеныНоменклатуры.Период
					|			И (ЦеныНоменклатуры.ТипЦен = &ТипЦен)";				
					
					Запрос.УстановитьПараметр("МоментВремени", ТекущаяДата());
					Запрос.УстановитьПараметр("ВыгрузкаВсегоАссортимента", ВыгрузкаВсегоАссортимента);
					Запрос.УстановитьПараметр("МассивАссортимента", МассивАссортимента);
					Запрос.УстановитьПараметр("ТипЦен", БазовыйТипЦен.ТипЦен);
					
					ТЗПредыдущиеЦеныНоменклатуры = Запрос.Выполнить().Выгрузить();
				КонецЕсли;
				
				Для Каждого тмпСтрока Из ТЗПредыдущиеЦеныНоменклатуры Цикл
					НоваяСтрока = ТЗЦеныНоменклатуры.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, тмпСтрока); 
				КонецЦикла;
				//ПАКЛ БЯ<-
				
				Если ИспользоватьХарактеристики Тогда
					ТЗЦеныНоменклатуры.Колонки.Добавить("tmp_goodID");
					Для Каждого тмпСтрока Из ТЗЦеныНоменклатуры Цикл
						Если тмпСтрока.ИспользованиеХарактеристик = 1 Тогда
							тмпСтрока.tmp_goodID = тмпСтрока.goodID + ":|" + тмпСтрока.Характеристика;
						Иначе
							тмпСтрока.tmp_goodID = тмпСтрока.goodID;
						КонецЕсли;
					КонецЦикла;			
					ТЗЦеныНоменклатуры.Колонки.Удалить("goodID");
					ТЗЦеныНоменклатуры.Колонки["tmp_goodID"].Имя = "goodID";
					ТЗЦеныНоменклатуры.Колонки.Удалить("Характеристика");
					ТЗЦеныНоменклатуры.Колонки.Удалить("ИспользованиеХарактеристик");
				КонецЕсли;
				
                СформироватьPlist(ТЗЦеныНоменклатуры, "goodID", тмпТЗАгенты, "prices", "цен", Ложь, Истина, , , КлючПоиска);
			КонецЕсли;			
		КонецЦикла;
		
		Если СпецификаПользователя = "IP" Тогда
			
			//Проверим товары без цен
			Запрос = Новый Запрос();
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	БПАГПрайсы.Код КАК priceTypeID,
			|	ЕСТЬNULL(ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Цена / ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2)), 0) КАК price,
			|	БПАГНоменклатура.Номенклатура КАК good
			|ИЗ
			|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&МоментВремени, ТипЦен В (&ИспользуемыеАгентамиТипыЦен)) КАК ЦеныНоменклатурыСрезПоследних
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГПрайсы КАК БПАГПрайсы
			|			ПО (БПАГПрайсы.ТипЦен = ЦеныНоменклатурыСрезПоследних.ТипЦен)
			|		ПО БПАГНоменклатура.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
			|ГДЕ
			|	НЕ БПАГНоменклатура.ПометкаУдаления
			|	И НЕ БПАГНоменклатура.ЭтоГруппа";
			
			Запрос.УстановитьПараметр("МоментВремени", ТекущаяДата());
			Запрос.УстановитьПараметр("ИспользуемыеАгентамиТипыЦен", ИспользуемыеАгентамиТипыЦен);
			
			ТЗ = Запрос.Выполнить().Выгрузить();
			ТЗ.Свернуть("good", "price");
			
			ТЗТоварыБезЦен = Новый ТаблицаЗначений;
			ТЗТоварыБезЦен.Колонки.Добавить("Товар");
			
			Для Каждого тмпСтрока Из ТЗ Цикл
				Если тмпСтрока.price = 0 Тогда
					НоваяСтрока = ТЗТоварыБезЦен.Добавить();
					НоваяСтрока.Товар = тмпСТрока.good;
				КонецЕсли;
			КонецЦикла;
			
			Если ТЗТоварыБезЦен.Количество() > 0 Тогда
				Попытка
					ТЗТоварыБезЦен.Свернуть("Товар");
					ТЗТоварыБезЦен.Сортировать("Товар");
					
					Таб = Новый ТабличныйДокумент;
					Макет = ПолучитьМакет("МакетТоварыБезЦен");
					Область = Макет.ПолучитьОбласть("Шапка");
					Таб.Вывести(Область);
					
					Для Каждого тмпСтрока Из ТЗТоварыБезЦен Цикл
						Область = Макет.ПолучитьОбласть("Строка");
						Область.Параметры.Заполнить(тмпСтрока);
						Таб.Вывести(Область);
					КонецЦикла;
					
					Таб.ТолькоПросмотр = Истина;
					Таб.Показать("Без цен");
					
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ВидПрикладногоРешения = "УT11" Тогда
		//NIY Пока индивидуальные
		
	ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
		
		//Типы цен
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БПАГПрайсы.Код КАК uniqueID,
		|	БПАГПрайсы.Наименование КАК name,
		|	БПАГПрайсы.ТипЦен КАК ТипЦен,
		|	БПАГПрайсы.Ссылка
		|ИЗ
		|	Справочник.БПАГПрайсы КАК БПАГПрайсы
		|ГДЕ
		|	НЕ БПАГПрайсы.ПометкаУдаления
		|	И БПАГПрайсы.ТипЦен <> &ПустойТипЦен";
		
		Если СпецификаПользователя = "SD" Тогда
			Запрос.УстановитьПараметр("ПустойТипЦен", Справочники.ТипыЦен.ПустаяСсылка());
		Иначе	
			Запрос.УстановитьПараметр("ПустойТипЦен", Справочники.ВидыЦен.ПустаяСсылка());
		КонецЕсли;
		ТЗ = Запрос.Выполнить().Выгрузить();
		ИспользуемыеАгентамиТипыЦен = ТЗ.ВыгрузитьКолонку("ТипЦен");
		
		Для Каждого тмпАгент Из Агенты Цикл
			
			тмпТЗАгенты = СоздатьТаблицуИзОдногоАгента(тмпАгент);
			МассивАгентов = Новый Массив();
			МассивАгентов.Добавить(тмпАгент.Агент);
			
			//Типы цен, доступные клиентам
			МассивКлиентуры = ПолучитьМассивКлиентурыКлиентов(МассивАгентов);
			//Если клиентуры нет или она пустая, то выгружаем всех контрагентов
			ВыгрузкаВсейКлиентуры = МассивКлиентуры.Количество() = 0;
			
			СписокФайловВыгрузки = Новый СписокЗначений;
			СписокФайловВыгрузки.Добавить("clientPriceTypes");
			КлючПоиска = "Клиентура%-%" + СокрЛП(тмпАгент.Агент.Клиентура.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Клиентура);
			Если ПолучитьГотовыеФайлыВыгрузкиИзКэша(тмпАгент.Агент, КлючПоиска, СписокФайловВыгрузки) Тогда
				//Файлы возьмем из кэша
				
			Иначе			
				Запрос = Новый Запрос();
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	БПАГКонтрагентыТипыЦен.Ссылка.Код КАК clientID,
				|	БПАГКонтрагентыТипыЦен.ТипЦен.Код КАК priceTypeID
				|ИЗ
				|	Справочник.БПАГКонтрагенты.ТипыЦен КАК БПАГКонтрагентыТипыЦен
				|ГДЕ
				|	БПАГКонтрагентыТипыЦен.ТипЦен <> &ПустойТипЦен
				|	И (&ВыгрузкаВсейКлиентуры
				|			ИЛИ БПАГКонтрагентыТипыЦен.Ссылка В ИЕРАРХИИ (&МассивКлиентуры))";
				
				Запрос.УстановитьПараметр("ПустойТипЦен", Справочники.БПАГПрайсы.ПустаяСсылка());
				Запрос.УстановитьПараметр("МассивКлиентуры", МассивКлиентуры);
				Запрос.УстановитьПараметр("ВыгрузкаВсейКлиентуры", ВыгрузкаВсейКлиентуры);
				
				КлючПоиска = "Клиентура%-%" + СокрЛП(тмпАгент.Агент.Клиентура.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Клиентура);
				СформироватьPlist(Запрос.Выполнить().Выгрузить(), "clientID", тмпТЗАгенты, "clientPriceTypes", "типов цен клиентов", Ложь, Истина, , , КлючПоиска);
			КонецЕсли;
			
			//Цены
			МассивАссортимента = ПолучитьМассивАссортимента(МассивАгентов);
			//Если ассортимента нет или он пустой, то выгружаем цены на все товары
			ВыгрузкаВсегоАссортимента = МассивАссортимента.Количество() = 0;
			
			ТипыЦенДоступныеДляАгента = ИспользуемыеАгентамиТипыЦен;
			
			ТЗДоступныхЦен = ТЗ.Скопировать();
			//Отфильтруем типы цен в соответствии с ограничениями доступности
			Если Метаданные.Справочники.БПАГПрайсы.ТабличныеЧасти.Найти("ОграничениеДоступности") <> Неопределено Тогда	//Для совместимости со старыми версиями
				КолВоСтрок = ТЗДоступныхЦен.Количество();
				Для i = 1 По КолВоСтрок Цикл
					ТекПрайс = ТЗДоступныхЦен[КолВоСтрок - i].Ссылка;
					Если ТекПрайс.ОграничениеДоступности.Количество() <> 0 Тогда
						ПрайсДоступен = Ложь;
						Для Каждого тмпОграничение ИЗ ТекПрайс.ОграничениеДоступности Цикл
							Если тмпОграничение.АгентПрофиль.ЭтоГруппа Тогда
								
								Попытка
									Если тмпАгент.Агент.ПринадлежитЭлементу(тмпОграничение.АгентПрофиль) Тогда
										ПрайсДоступен = Истина;
										Прервать;
									КонецЕсли;
								Исключение
								КонецПопытки;
								
								Попытка
									Если тмпАгент.Агент.Профиль.ПринадлежитЭлементу(тмпОграничение.АгентПрофиль) Тогда
										ПрайсДоступен = Истина;
										Прервать;
									КонецЕсли;
								Исключение
								КонецПопытки;
								
							ИначеЕсли (тмпАгент.Агент = тмпОграничение.АгентПрофиль) ИЛИ (тмпАгент.Агент.Профиль = тмпОграничение.АгентПрофиль) Тогда
								ПрайсДоступен = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Если Не ПрайсДоступен Тогда
							ТЗДоступныхЦен.Удалить(КолВоСтрок - i);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ТипыЦенДоступныеДляАгента = ТЗДоступныхЦен.ВыгрузитьКолонку("ТипЦен");
			ТЗДоступныхЦен.Колонки.Удалить("ТипЦен");
			ТЗДоступныхЦен.Колонки.Удалить("Ссылка");
			СформироватьPlist(ТЗДоступныхЦен, "uniqueID", тмпТЗАгенты, "priceTypes", "типов цен", Ложь);
			
			СписокФайловВыгрузки = Новый СписокЗначений;
			СписокФайловВыгрузки.Добавить("prices");
			КлючПоиска = "АссортиментИТипыЦен%-%" + СокрЛП(тмпАгент.Агент.Ассортимент.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Ассортимент);
			Для i = 1 По ТипыЦенДоступныеДляАгента.Количество() Цикл
				КлючПоиска = КлючПоиска + "%-%" + СокрЛП(ТипыЦенДоступныеДляАгента[i - 1]);
			КонецЦикла;
			Если ПолучитьГотовыеФайлыВыгрузкиИзКэша(тмпАгент.Агент, КлючПоиска, СписокФайловВыгрузки) Тогда
				//Файлы возьмем из кэша
				
			Иначе			
				Если СпецификаПользователя = "SD" Тогда
					Запрос = Новый Запрос();
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	БПАГНоменклатура.Код КАК goodID,
					|	БПАГПрайсы.Код КАК priceTypeID,
					|	ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Цена КАК ЧИСЛО(15, 2)) КАК price
					|ИЗ
					|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
					|				&МоментВремени,
					|				ТипЦен В (&ИспользуемыеАгентамиТипыЦен)
					|					И Подразделение = &Подразделение) КАК ЦеныНоменклатурыСрезПоследних
					|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГПрайсы КАК БПАГПрайсы
					|			ПО (БПАГПрайсы.ТипЦен = ЦеныНоменклатурыСрезПоследних.ТипЦен)
					|		ПО БПАГНоменклатура.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
					|ГДЕ
					|	НЕ БПАГНоменклатура.ПометкаУдаления
					|	И НЕ БПАГПрайсы.ПометкаУдаления
					|	И (&ВыгрузкаВсегоАссортимента
					|			ИЛИ БПАГНоменклатура.Ссылка В ИЕРАРХИИ (&МассивАссортимента))";
					
					Запрос.УстановитьПараметр("МоментВремени", ТекущаяДата());
					Запрос.УстановитьПараметр("ИспользуемыеАгентамиТипыЦен", ТипыЦенДоступныеДляАгента);
					Запрос.УстановитьПараметр("ВыгрузкаВсегоАссортимента", ВыгрузкаВсегоАссортимента);
					Запрос.УстановитьПараметр("МассивАссортимента", МассивАссортимента);
					Запрос.УстановитьПараметр("Подразделение", 					тмпАгент.Агент.Подразделение);
					
				Иначе
				
					Запрос = Новый Запрос();
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	БПАГНоменклатура.Код КАК goodID,
					|	БПАГПрайсы.Код КАК priceTypeID,
					|	ВЫБОР
					|		КОГДА ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
					|			ТОГДА ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Цена / ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 2))
					|		ИНАЧЕ ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Цена КАК ЧИСЛО(15, 2))
					|	КОНЕЦ КАК price
					|ИЗ
					|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&МоментВремени, ВидЦен В (&ИспользуемыеАгентамиТипыЦен)) КАК ЦеныНоменклатурыСрезПоследних
					|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГПрайсы КАК БПАГПрайсы
					|			ПО (БПАГПрайсы.ТипЦен = ЦеныНоменклатурыСрезПоследних.ВидЦен)
					|		ПО БПАГНоменклатура.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
					|ГДЕ
					|	НЕ БПАГНоменклатура.ПометкаУдаления
					|	И НЕ БПАГПрайсы.ПометкаУдаления
					|	И (&ВыгрузкаВсегоАссортимента
					|			ИЛИ БПАГНоменклатура.Ссылка В ИЕРАРХИИ (&МассивАссортимента))";
					
					Запрос.УстановитьПараметр("МоментВремени", ТекущаяДата());
					Запрос.УстановитьПараметр("ИспользуемыеАгентамиТипыЦен", ТипыЦенДоступныеДляАгента);
					Запрос.УстановитьПараметр("ВыгрузкаВсегоАссортимента", ВыгрузкаВсегоАссортимента);
					Запрос.УстановитьПараметр("МассивАссортимента", МассивАссортимента);
				КонецЕсли;
				КлючПоиска = "АссортиментИТипыЦен%-%" + СокрЛП(тмпАгент.Агент.Ассортимент.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Ассортимент);
				Для i = 1 По ТипыЦенДоступныеДляАгента.Количество() Цикл
					КлючПоиска = КлючПоиска + "%-%" + СокрЛП(ТипыЦенДоступныеДляАгента[i - 1]);
				КонецЦикла;
				СформироватьPlist(Запрос.Выполнить().Выгрузить(), "goodID", тмпТЗАгенты, "prices", "цен", Ложь, Истина, , , КлючПоиска);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	
КонецПроцедуры

Процедура ВыгрузитьОстатки(Агенты)
	
	Для Каждого тмпАгент Из Агенты Цикл
		
		СписокФайловВыгрузки = Новый СписокЗначений;
		СписокФайловВыгрузки.Добавить("rests");
		КлючПоиска = "Ассортимент%-%" + СокрЛП(тмпАгент.Агент.Ассортимент.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Ассортимент);
		Если ПолучитьГотовыеФайлыВыгрузкиИзКэша(тмпАгент.Агент, КлючПоиска, СписокФайловВыгрузки) Тогда
			//Файлы возьмем из кэша
			
		Иначе			
		
			тмпТЗАгенты = СоздатьТаблицуИзОдногоАгента(тмпАгент);
			
			МассивАгентов = Новый Массив();
			МассивАгентов.Добавить(тмпАгент.Агент);
			
			МассивАссортимента = ПолучитьМассивАссортимента(МассивАгентов);
			
			//Если ассортимента нет или он пустой, то выгружаем все товары
			ВыгрузкаВсех = МассивАссортимента.Количество() = 0;
			
			
			Запрос = Новый Запрос();
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	БПАГОстаткиТоваров.Номенклатура.Код КАК goodID,
			|	БПАГОстаткиТоваров.Склад.Код КАК depotID,
			|	"""" КАК companyID,
			|	БПАГОстаткиТоваров.Количество КАК quantity
			|ИЗ
			|	РегистрСведений.БПАГОстаткиТоваров КАК БПАГОстаткиТоваров
			|ГДЕ
			|	(&ВыгрузкаВсех
			|			ИЛИ БПАГОстаткиТоваров.Номенклатура В ИЕРАРХИИ (&МассивАссортимента))
			|	И БПАГОстаткиТоваров.Подразделение = &Подразделение";
			
			Запрос.УстановитьПараметр("ВыгрузкаВсех", ВыгрузкаВсех);
			Запрос.УстановитьПараметр("МассивАссортимента", МассивАссортимента);
			Запрос.УстановитьПараметр("Подразделение", тмпАгент.Агент.Подразделение);
			
			КлючПоиска = "Ассортимент%-%" + СокрЛП(тмпАгент.Агент.Ассортимент.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Ассортимент);
			СформироватьPlist(Запрос.Выполнить().Выгрузить(), "goodID", тмпТЗАгенты, "rests", "остатков", Ложь, Истина, , , КлючПоиска);
		КонецЕсли;
		
	КонецЦикла;	
КонецПроцедуры

Процедура ВыгрузитьКартинкиТоваров(Агенты)
	
	Путь = КаталогОбмена + "Images\";
	
	Для Каждого тмпАгент Из Агенты Цикл
		
		СписокФайловВыгрузки = Новый СписокЗначений;
		СписокФайловВыгрузки.Добавить("goodPictures");
		КлючПоиска = "Ассортимент%-%" + СокрЛП(тмпАгент.Агент.Ассортимент.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Ассортимент);
		Если ПолучитьГотовыеФайлыВыгрузкиИзКэша(тмпАгент.Агент, КлючПоиска, СписокФайловВыгрузки) Тогда
			//Файлы возьмем из кэша
			
		Иначе			
		
			тмпТЗАгенты = СоздатьТаблицуИзОдногоАгента(тмпАгент);
			
			МассивАгентов = Новый Массив();
			МассивАгентов.Добавить(тмпАгент.Агент);
			
			МассивАссортимента = ПолучитьМассивАссортимента(МассивАгентов);
			
			//Если ассортимента нет или он пустой, то выгружаем все товары
			ВыгрузкаВсех = МассивАссортимента.Количество() = 0;
			
			Запрос = Новый Запрос();
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	БПАГНоменклатура.Код КАК goodID,
			|	НоменклатураКартинки.Имя КАК fileName,
			|	НоменклатураКартинки.НомерСтроки КАК sort
			|ИЗ
			|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.Картинки КАК НоменклатураКартинки
			|		ПО БПАГНоменклатура.Номенклатура = НоменклатураКартинки.Ссылка
			|ГДЕ
			|	НЕ БПАГНоменклатура.ПометкаУдаления
			|	И (&ВыгрузкаВсех
			|			ИЛИ БПАГНоменклатура.Ссылка В ИЕРАРХИИ (&МассивАссортимента))
			|	И НЕ БПАГНоменклатура.ЭтоГруппа
			|
			|УПОРЯДОЧИТЬ ПО
			|	goodID,
			|	sort";
			
			Запрос.УстановитьПараметр("ВыгрузкаВсех", ВыгрузкаВсех);
			Запрос.УстановитьПараметр("МассивАссортимента", МассивАссортимента);
			
			ТЗ = Запрос.Выполнить().Выгрузить();
			ТЗ.Колонки.Добавить("fileSize");
			
			Для Каждого тмпСтрока Из ТЗ Цикл
				
				Если СокрЛП(тмпСтрока.fileName) = "" Тогда
					Продолжить;
				КонецЕсли;
				
				Файл = Новый Файл(Путь + тмпСтрока.fileName);
				Если Файл.Существует() Тогда
					НоваяСтрока = ТЗКартинки.Добавить();
					НоваяСтрока.Имя = тмпСтрока.fileName;
					НоваяСтрока.Размер = Файл.Размер();
					тмпСтрока.fileSize = НоваяСтрока.Размер;
				КонецЕсли;
			КонецЦикла;
			
			КлючПоиска = "Ассортимент%-%" + СокрЛП(тмпАгент.Агент.Ассортимент.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Ассортимент);
			СформироватьPlist(ТЗ, "goodID", тмпТЗАгенты, "goodPictures", "картинок товаров", Ложь, Истина, Ложь, , КлючПоиска);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

#Область ВыгрузитьКлиентов

Процедура ВыгрузитьКлиентов(Агенты)
	
	ГРУППА_МИ = Справочники.КД_ГруппыНоменклатуры.НайтиПоКоду("000000014");
	ГРУППА_МКИ = Справочники.КД_ГруппыНоменклатуры.НайтиПоКоду("000000013");
	
	КАНАЛ_СБЫТА_ЭКСКЛЮЗИВ_КИРОВОГРАД = ПрограммныеПеречисления.КД_КаналСбыта().ЭксклюзивКировоград;
	КАНАЛ_СБЫТА_СЕТИ_ЛОКАЛЬНЫЕ = ПрограммныеПеречисления.КД_КаналСбыта().СетиЛокальные;
	КАНАЛ_СБЫТА_ХОРЕКА = ПрограммныеПеречисления.КД_КаналСбыта().ХоРеКа;
	
	ВидПрикладногоРешения = БПАГ.ПолучитьВидПрикладногоРешения();
	
	Для Каждого тмпАгент Из Агенты Цикл
		РежимКонтроляВзаиморасчетовВЗаявке = НастройкаИзКэша("1СРежимКонтроляВзаиморасчетовВЗаявке", тмпАгент.Агент);
		РежимКонтроляВзаиморасчетовВРеализации = НастройкаИзКэша("1СРежимКонтроляВзаиморасчетовВРеализации", тмпАгент.Агент);
		
		Если ВидПрикладногоРешения = "УНФ" Тогда
			
			СписокФайловВыгрузки = Новый СписокЗначений;
			СписокФайловВыгрузки.Добавить("clients");
			СписокФайловВыгрузки.Добавить("clientAnalytics");
			СписокФайловВыгрузки.Добавить("POS");
			
			КлючПоиска = "Клиентура%-%" + СокрЛП(тмпАгент.Агент.Клиентура.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Клиентура);
			Если ПолучитьГотовыеФайлыВыгрузкиИзКэша(тмпАгент.Агент, КлючПоиска, СписокФайловВыгрузки) Тогда
				//Файлы возьмем из кэша
				
			Иначе			
			
				#Область clients_and_clientAnalytics
					
				тмпТЗАгенты = СоздатьТаблицуИзОдногоАгента(тмпАгент);
				
				МассивАгентов = Новый Массив();
				МассивАгентов.Добавить(тмпАгент.Агент);
				
				МассивКлиентурыКлиентов = ПолучитьМассивКлиентурыКлиентов(МассивАгентов);
				//Если клиентуры нет или она пустая, то выгружаем всех контрагентов
				ВыгрузкаВсехКлиентов = МассивКлиентурыКлиентов.Количество() = 0;
				
				МассивКлиентурыТТ = ПолучитьМассивКлиентурыТТ(МассивАгентов);
				//Если клиентуры нет или она пустая, то выгружаем все ТТ
				ВыгрузкаВсехТТ = МассивКлиентурыТТ.Количество() = 0;
				
				//Клиенты
				запрос = Новый Запрос();
				
				#Область ТекстЗапроса
				
				запрос.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	КонтрагентыМенеджеры.Ссылка.Код КАК uniqueID,
				|	КонтрагентыМенеджеры.Ссылка.Наименование КАК name,
				|	КонтрагентыМенеджеры.ТипЦен.Код КАК defaultPriceTypeID
				|ИЗ
				|	Справочник.Контрагенты.Менеджеры КАК КонтрагентыМенеджеры
				|ГДЕ
				|	ВЫБОР
				|			КОГДА &ЭтоСупервайзер = ИСТИНА
				|				ТОГДА КонтрагентыМенеджеры.Менеджер В ИЕРАРХИИ (&Менеджер)
				|			ИНАЧЕ КонтрагентыМенеджеры.Менеджер = &Менеджер
				|		КОНЕЦ
				|	И КонтрагентыМенеджеры.Ссылка.Родитель.Подразделение = &Подразделение
				|	И НЕ КонтрагентыМенеджеры.Ссылка.ПометкаУдаления
				|	И КонтрагентыМенеджеры.Ссылка.КД_Состояние = &КД_Состояние";
				
				#КонецОбласти
				
				запрос.УстановитьПараметр("МассивКлиентуры", 	МассивКлиентурыКлиентов);
				запрос.УстановитьПараметр("ВыгрузкаВсех", 		ВыгрузкаВсехКлиентов);
				запрос.УстановитьПараметр("Менеджер", 			тмпАгент.Агент.Менеджер);
				запрос.УстановитьПараметр("ЭтоСупервайзер",		тмпАгент.Агент.Менеджер.ЭтоГруппа);
				запрос.УстановитьПараметр("Подразделение",		тмпАгент.Агент.Подразделение);
				запрос.УстановитьПараметр("КД_Состояние",		Справочники.КД_СостоянияТТ.НайтиПоКоду("000000001"));
				
				ТЗКонтрагенты = запрос.Выполнить().Выгрузить();
				
				//Договоры ... если ОрганизацияПоУмолчанию.ЕстьНДС то догружаем договора по ПРЕМИУМУ
				запрос = Новый Запрос();
				
				#Область ТекстЗапроса
				
				запрос.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	""1"" + КонтрагентыМенеджеры.Ссылка.Код КАК uniqueID,
				|	КонтрагентыМенеджеры.Ссылка.Код КАК clientID,
				|	БПАГОрганизации.Код КАК companyID,
				|	""1_"" + КонтрагентыМенеджеры.Менеджер.Наименование КАК name,
				|	0 КАК discountPercent,
				|	БПАГПрайсы.Код КАК ТипЦенДоговора
				|ИЗ
				|	Справочник.Контрагенты.Менеджеры КАК КонтрагентыМенеджеры
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БПАГПрайсы КАК БПАГПрайсы
				|		ПО КонтрагентыМенеджеры.ТипЦен = БПАГПрайсы.ТипЦен
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БПАГОрганизации КАК БПАГОрганизации
				|		ПО КонтрагентыМенеджеры.ОсновнаяОрганизация = БПАГОрганизации.Организация
				|			И (НЕ КонтрагентыМенеджеры.ОсновнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
				|ГДЕ
				|	ВЫБОР
				|			КОГДА &ЭтоСупервайзер = ИСТИНА
				|				ТОГДА КонтрагентыМенеджеры.Менеджер В ИЕРАРХИИ (&Менеджер)
				|			ИНАЧЕ КонтрагентыМенеджеры.Менеджер = &Менеджер
				|		КОНЕЦ
				|	И КонтрагентыМенеджеры.Ссылка.Родитель.Подразделение = &Подразделение
				|	И НЕ КонтрагентыМенеджеры.Ссылка.ПометкаУдаления
				|	И КонтрагентыМенеджеры.Ссылка.КД_Состояние = &КД_Состояние
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	""2"" + КонтрагентыМенеджеры.Ссылка.Код,
				|	КонтрагентыМенеджеры.Ссылка.Код,
				|	БПАГОрганизации.Код,
				|	""2_"" + КонтрагентыМенеджеры.Менеджер.Наименование,
				|	0,
				|	БПАГПрайсы.Код
				|ИЗ
				|	Справочник.Контрагенты.Менеджеры КАК КонтрагентыМенеджеры
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БПАГОрганизации КАК БПАГОрганизации
				|		ПО КонтрагентыМенеджеры.Ссылка.ОсновнаяОрганизация = БПАГОрганизации.Организация
				|			И (НЕ КонтрагентыМенеджеры.Ссылка.ОсновнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БПАГПрайсы КАК БПАГПрайсы
				|		ПО КонтрагентыМенеджеры.ТипЦен = БПАГПрайсы.ТипЦен
				|ГДЕ
				|	ВЫБОР
				|			КОГДА &ЭтоСупервайзер = ИСТИНА
				|				ТОГДА КонтрагентыМенеджеры.Менеджер В ИЕРАРХИИ (&Менеджер)
				|			ИНАЧЕ КонтрагентыМенеджеры.Менеджер = &Менеджер
				|		КОНЕЦ
				|	И КонтрагентыМенеджеры.Ссылка.Родитель.Подразделение = &Подразделение
				|	И НЕ КонтрагентыМенеджеры.Ссылка.ПометкаУдаления
				|	И КонтрагентыМенеджеры.Ссылка.КД_Состояние = &КД_Состояние";
				
				#КонецОбласти
				
				массивВидовДоговоров = Новый Массив;
				массивВидовДоговоров.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
				массивВидовДоговоров.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
				
				запрос.УстановитьПараметр("ВидДоговора", массивВидовДоговоров);
				запрос.УстановитьПараметр("ПустаяНоменклатура", Справочники.Номенклатура.ПустаяСсылка());
				запрос.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1));
				
				запрос.УстановитьПараметр("МассивКлиентуры", 	МассивКлиентурыКлиентов);
				запрос.УстановитьПараметр("Менеджер", 			тмпАгент.Агент.Менеджер);
				запрос.УстановитьПараметр("ЭтоСупервайзер",		тмпАгент.Агент.Менеджер.ЭтоГруппа);
				запрос.УстановитьПараметр("Подразделение",		тмпАгент.Агент.Подразделение);
				запрос.УстановитьПараметр("КД_Состояние",		Справочники.КД_СостоянияТТ.НайтиПоКоду("000000001"));

				запрос.УстановитьПараметр("ВыгрузкаВсех", 		ВыгрузкаВсехКлиентов);
				запрос.УстановитьПараметр("МоментВремени", 		ТекущаяДата());

				
				тзДоговоры = Запрос.Выполнить().Выгрузить();
				
				//Если установлена настройка "Брать типы цен из договоров", то проставим в типы цен по умолчанию для клиентов эти цены
				Если НастройкаИзКэша("1СБратьТипЦенИзДоговора", тмпАгент.Агент) Тогда
					Для Каждого тмпСтрока Из тзДоговоры Цикл
						Если тмпСтрока.ТипЦенДоговора <> Null Тогда
							НайденнаяСтрока = ТЗКонтрагенты.Найти(тмпСтрока.clientID, "uniqueID");
							Если НайденнаяСтрока <> Неопределено Тогда
								НайденнаяСтрока.defaultPriceTypeID = тмпСтрока.ТипЦенДоговора;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				КлючПоиска = "Клиентура%-%" + СокрЛП(тмпАгент.Агент.Клиентура.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Клиентура);
				СформироватьPlist(ТЗКонтрагенты, "uniqueID", тмпТЗАгенты, "clients", "клиентов", Ложь, , , , КлючПоиска);
				
				ТЗДоговоры.Колонки.Удалить("ТипЦенДоговора");
				
				#КонецОбласти
				
				КлючПоиска = "Клиентура%-%" + СокрЛП(тмпАгент.Агент.Клиентура.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Клиентура);
				СформироватьPlist(ТЗДоговоры, "uniqueID", тмпТЗАгенты, "clientAnalytics", "договоров", Ложь, , , , КлючПоиска);
				
				#Область POS
					
				//ТТ
				запрос = Новый Запрос();
				
				#Область ТекстЗапроса
				
				запрос.Текст = 
				"ВЫБРАТЬ
				|	МАКСИМУМ(Спецификация.Номер + ""_"" + Спецификация.СегментПартнеров.Код) КАК STANDARD_ID,
				|	ПартнерыСегмента.Партнер КАК Партнер
				|ПОМЕСТИТЬ ВТ_СпецификацииПоТорговымТочкам
				|ИЗ
				|	Документ.Спецификация КАК Спецификация
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
				|		ПО Спецификация.СегментПартнеров = ПартнерыСегмента.Сегмент
				|ГДЕ
				|	Спецификация.Проведен = ИСТИНА
				|	И Спецификация.Подразделение = &Подразделение
				|	И Спецификация.ДатаНачала <= &ДатаНачала
				|	И (Спецификация.ДатаОкончания >= &ДатаОкончания
				|			ИЛИ Спецификация.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
				|
				|СГРУППИРОВАТЬ ПО
				|	ПартнерыСегмента.Партнер
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Партнер
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	КонтрагентыМенеджеры.Ссылка.Код КАК uniqueID,
				|	КонтрагентыМенеджеры.Ссылка.Код КАК clientID,
				|	""1"" + КонтрагентыМенеджеры.Ссылка.Код КАК defaultAnalyticsID,
				|	""*"" КАК name,
				|	КонтрагентыМенеджеры.Ссылка.АдресДоставки КАК fullAddress,
				|	КонтрагентыМенеджеры.Ссылка.АдресДоставки КАК address,
				|	""КонтактноеЛицо"" КАК contactPerson,
				|	КонтрагентыМенеджеры.Ссылка.Телефоны КАК phone,
				|	КонтрагентыМенеджеры.Ссылка.ГПСШирота КАК latitude,
				|	КонтрагентыМенеджеры.Ссылка.ГПСДолгота КАК longitude,
				|	КонтрагентыМенеджеры.Ссылка КАК Контрагент,
				|	-1 КАК maxDebtSum,
				|	ВЫБОР
				|		КОГДА КонтрагентыМенеджеры.СрокОплаты = 0
				|			ТОГДА ВЫБОР
				|					КОГДА КонтрагентыМенеджеры.Ссылка.СрокОплаты + 7 + 1 > 0
				|						ТОГДА КонтрагентыМенеджеры.Ссылка.СрокОплаты + 7 + 1
				|					ИНАЧЕ -1
				|				КОНЕЦ
				|		ИНАЧЕ ВЫБОР
				|				КОГДА КонтрагентыМенеджеры.СрокОплаты + 7 + 1 > 0
				|					ТОГДА КонтрагентыМенеджеры.СрокОплаты + 7 + 1
				|				ИНАЧЕ -1
				|			КОНЕЦ
				|	КОНЕЦ КАК maxDebtPeriod,
				|	&РежимКонтроляВзаиморасчетовВЗаявке КАК РежимКонтроляВзаиморасчетовВЗаявке,
				|	&РежимКонтроляВзаиморасчетовВРеализации КАК РежимКонтроляВзаиморасчетовВРеализации,
				|	&СообщениеБезусловногоЗапретаОтгрузки КАК unconditionalProhibitionMessage,
				|	КонтрагентыМенеджеры.Ссылка.БПАГМинимальныйПорогПоСумме КАК minSaleSum,
				|	КонтрагентыМенеджеры.Ссылка.БПАГМаксимальныйПорогПоСумме КАК maxSaleSum,
				|	КонтрагентыМенеджеры.Ссылка.БПАГМинимальныйПорогПоВесу КАК minSaleWeight,
				|	КонтрагентыМенеджеры.Ссылка.БПАГМаксимальныйПорогПоВесу КАК maxSaleWeight,
				|	ЕСТЬNULL(КД_КатегорииТорговыхТочекСрезПоследних.КоличествоSKU, 0) КАК SKU,
				|	ВЫБОР
				|		КОГДА КонтрагентыМенеджеры.Ссылка.БПАГВариантАлгоритмаРасчетаЗаказа
				|			ТОГДА 1
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК RECOMMENDED_ORDER_NEW_MODE,
				|	ВЫБОР
				|		КОГДА ВТ_СпецификацииПоТорговымТочкам.Партнер ЕСТЬ NULL 
				|			ТОГДА КД_КатегорииТорговыхТочекСрезПоследних.КатегорияТТ.Код
				|		ИНАЧЕ ВТ_СпецификацииПоТорговымТочкам.STANDARD_ID
				|	КОНЕЦ КАК STANDARD_ID,
				|	КонтрагентыМенеджеры.Ссылка.БПАГПорогОбязательныхSKU КАК REQUIRED_SKU_LIMIT,
				|	КонтрагентыМенеджеры.Ссылка.БПАГПорогРекомендуемыхSKU КАК RECOMMENDED_SKU_LIMIT,
				|	ВЫБОР
				|		КОГДА КонтрагентыМенеджеры.Ссылка.БПАГРазрешитьУдалениеСтрокВЗаявке
				|			ТОГДА 1
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК ALLOW_DELETE_ORDER_ROWS,
				|	ВЫБОР
				|		КОГДА КонтрагентыМенеджеры.Ссылка.БПАГРазрешитьДобавлениеСтрокВЗаявке
				|			ТОГДА 1
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК ALLOW_ADD_ORDER_ROWS,
				|	ВЫБОР
				|		КОГДА КонтрагентыМенеджеры.Ссылка.БПАГРазрешитьИзменениеКоличестваВЗаявке
				|			ТОГДА 1
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК ALLOW_EDIT_ORDER_QTY,
				|	ВЫБОР
				|		КОГДА КонтрагентыМенеджеры.Ссылка.БПАГРазрешитьЗаявкуБезМерчандайзинга
				|			ТОГДА 1
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК ALLOW_ORDER_WITHOUT_MERCHANDISING,
				|	ВЫБОР
				|		КОГДА КонтрагентыМенеджеры.Ссылка.БПАГРазрешитьПустойМерчандайзинг
				|			ТОГДА 1
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК ALLOW_EMPTY_MERCHANDISING,
				|	ВЫБОР
				|		КОГДА КонтрагентыМенеджеры.Ссылка.БПАГФильтрацияТоваровПоСтандартуПрисутствия
				|			ТОГДА 1
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК FILTER_GOODS_BY_STANDARD,
				|	КонтрагентыМенеджеры.ТипЦен,
				|	КонтрагентыМенеджеры.ГруппаПродукта,
				|	КонтрагентыМенеджеры.Ссылка.КД_КаналСбыта КАК КаналСбыта,
				|	КД_КатегорииТорговыхТочекСрезПоследних.КатегорияТТ
				|ИЗ
				|	Справочник.Контрагенты.Менеджеры КАК КонтрагентыМенеджеры
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КД_КатегорииТорговыхТочек.СрезПоследних(, Подразделение = &Подразделение) КАК КД_КатегорииТорговыхТочекСрезПоследних
				|		ПО КонтрагентыМенеджеры.Ссылка = КД_КатегорииТорговыхТочекСрезПоследних.ТорговаяТочка
				|			И КонтрагентыМенеджеры.ГруппаПродукта = КД_КатегорииТорговыхТочекСрезПоследних.ГруппаПродукции
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СпецификацииПоТорговымТочкам КАК ВТ_СпецификацииПоТорговымТочкам
				|		ПО КонтрагентыМенеджеры.Ссылка = ВТ_СпецификацииПоТорговымТочкам.Партнер
				|ГДЕ
				|	ВЫБОР
				|			КОГДА &ЭтоСупервайзер = ИСТИНА
				|				ТОГДА КонтрагентыМенеджеры.Менеджер В ИЕРАРХИИ (&Менеджер)
				|			ИНАЧЕ КонтрагентыМенеджеры.Менеджер = &Менеджер
				|		КОНЕЦ
				|	И КонтрагентыМенеджеры.Ссылка.Родитель.Подразделение = &Подразделение
				|	И НЕ КонтрагентыМенеджеры.Ссылка.ПометкаУдаления
				|	И КонтрагентыМенеджеры.Ссылка.КД_Состояние = &КД_Состояние";
				
				#КонецОбласти
				
				
				запрос.УстановитьПараметр("МассивКлиентуры", 	МассивКлиентурыТТ);
				запрос.УстановитьПараметр("ВыгрузкаВсех", 		ВыгрузкаВсехТТ);
				запрос.УстановитьПараметр("Менеджер", 			тмпАгент.Агент.Менеджер);
				запрос.УстановитьПараметр("ЭтоСупервайзер", 	тмпАгент.Агент.Менеджер.ЭтоГруппа);
				запрос.УстановитьПараметр("Подразделение",		тмпАгент.Агент.Подразделение);
				запрос.УстановитьПараметр("КД_Состояние",		Справочники.КД_СостоянияТТ.НайтиПоКоду("000000001"));
				запрос.УстановитьПараметр("ДатаНачала", 		ТекущаяДата());
				запрос.УстановитьПараметр("ДатаОкончания", 		ТекущаяДата());
				

				запрос.УстановитьПараметр("РежимКонтроляВзаиморасчетовВЗаявке", Перечисления.БПАГРежимыКонтроляВзаиморасчетов.Запрещать);
				запрос.УстановитьПараметр("РежимКонтроляВзаиморасчетовВРеализации", Перечисления.БПАГРежимыКонтроляВзаиморасчетов.Запрещать);
				запрос.УстановитьПараметр("СообщениеБезусловногоЗапретаОтгрузки", "Огрузка запрещена");
				
				ТЗ = Запрос.Выполнить().Выгрузить();
				
				ТЗ.Колонки.Добавить("fullName");
				ТЗ.Колонки.Добавить("legalAddress");
				ТЗ.Колонки.Добавить("INN");
				ТЗ.Колонки.Добавить("KPP");
				ТЗ.Колонки.Добавить("debtControlModeOrder");
				ТЗ.Колонки.Добавить("debtControlModeSale");
				
				Для Каждого тмпСтрока Из ТЗ Цикл
					
					Сведения = 0;
					Выполнить("Сведения = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(,тмпСтрока.Контрагент, ТекущаяДата());");
					
					тмпСтрока.minSaleWeight = 0;
					тмпСтрока.minSaleSum = 0;
					
					Если тмпСтрока.ГруппаПродукта.Родитель = ГРУППА_МКИ И ТекущаяДата() <= Дата("20190131235959") Тогда
						// лимиты отсутствуют
						
					ИначеЕсли тмпСтрока.КаналСбыта = КАНАЛ_СБЫТА_СЕТИ_ЛОКАЛЬНЫЕ Или тмпСтрока.КаналСбыта = КАНАЛ_СБЫТА_ХОРЕКА Тогда
						// лимиты отсутствуют

					ИначеЕсли тмпСтрока.КаналСбыта = КАНАЛ_СБЫТА_ЭКСКЛЮЗИВ_КИРОВОГРАД Тогда
						//тмпСтрока.minSaleWeight = 7;
					ИначеЕсли  Лев(тмпСтрока.КатегорияТТ, 1) = "С" Тогда
						
						// ограничения только для категории "С"
						Если Найти("Категория 12, Категория 13", СокрЛП(тмпСтрока.ТипЦен)) = 0 И 1=2 Тогда
							
							Если тмпСтрока.ГруппаПродукта.Родитель = ГРУППА_МИ Тогда
								тмпСтрока.minSaleWeight = 5;
							Иначе
								тмпСтрока.minSaleSum = 300;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
					тмпСтрока.fullName = Сведения.ПолноеНаименование;
					тмпСтрока.legalAddress = Сведения.ЮридическийАдрес;
					тмпСтрока.INN = Сведения.ИНН;
					тмпСтрока.KPP = Сведения.КПП;
					
					тмпСтрока.fullAddress = ПодготовитьАдресДляПоиска(тмпСтрока.fullAddress);
					тмпСтрока.address = ПодготовитьКраткийАдрес(тмпСтрока.address, тмпАгент.Агент);
					
					Если тмпСтрока.РежимКонтроляВзаиморасчетовВЗаявке.Пустая() Тогда
						текРежим = РежимКонтроляВзаиморасчетовВЗаявке;
					Иначе
						текРежим = тмпСтрока.РежимКонтроляВзаиморасчетовВЗаявке;
					КонецЕсли;
					
					Если текРежим = Перечисления.БПАГРежимыКонтроляВзаиморасчетов.Предупреждать Тогда
						тмпСтрока.debtControlModeOrder = "1";
					ИначеЕсли текРежим = Перечисления.БПАГРежимыКонтроляВзаиморасчетов.Запрещать Тогда
						тмпСтрока.debtControlModeOrder = "2";
					ИначеЕсли текРежим = Перечисления.БПАГРежимыКонтроляВзаиморасчетов.БезусловныйЗапрет Тогда	
						тмпСтрока.debtControlModeOrder = "3";
					Иначе
						тмпСтрока.debtControlModeOrder = "0";
					КонецЕсли;
					
					Если тмпСтрока.РежимКонтроляВзаиморасчетовВРеализации.Пустая() Тогда
						текРежим = РежимКонтроляВзаиморасчетовВРеализации;
					Иначе
						текРежим = тмпСтрока.РежимКонтроляВзаиморасчетовВРеализации;
					КонецЕсли;
					
					Если текРежим = Перечисления.БПАГРежимыКонтроляВзаиморасчетов.Предупреждать Тогда
						тмпСтрока.debtControlModeSale = "1";
					ИначеЕсли текРежим = Перечисления.БПАГРежимыКонтроляВзаиморасчетов.Запрещать Тогда
						тмпСтрока.debtControlModeSale = "2";
					ИначеЕсли текРежим = Перечисления.БПАГРежимыКонтроляВзаиморасчетов.БезусловныйЗапрет Тогда
						тмпСтрока.debtControlModeSale = "3";
					Иначе
						тмпСтрока.debtControlModeSale = "0";
					КонецЕсли;
					
				КонецЦикла;
				
				ТЗДляСвойств = ТЗ.Скопировать();//lena
				
				ТЗ.Колонки.Удалить("Контрагент");
				ТЗ.Колонки.Удалить("ТипЦен");
				ТЗ.Колонки.Удалить("РежимКонтроляВзаиморасчетовВЗаявке");
				ТЗ.Колонки.Удалить("РежимКонтроляВзаиморасчетовВРеализации");
				//lena->
				ТЗ.Колонки.Удалить("RECOMMENDED_ORDER_NEW_MODE");
				ТЗ.Колонки.Удалить("STANDARD_ID");
				ТЗ.Колонки.Удалить("REQUIRED_SKU_LIMIT");
				ТЗ.Колонки.Удалить("RECOMMENDED_SKU_LIMIT");
				ТЗ.Колонки.Удалить("ALLOW_DELETE_ORDER_ROWS");
				ТЗ.Колонки.Удалить("ALLOW_ADD_ORDER_ROWS");
				ТЗ.Колонки.Удалить("ALLOW_EDIT_ORDER_QTY");
				ТЗ.Колонки.Удалить("ALLOW_ORDER_WITHOUT_MERCHANDISING");
				ТЗ.Колонки.Удалить("ALLOW_EMPTY_MERCHANDISING");
				ТЗ.Колонки.Удалить("FILTER_GOODS_BY_STANDARD");
				//lena<-
				
				#КонецОбласти
				
				КлючПоиска = "Клиентура%-%" + СокрЛП(тмпАгент.Агент.Клиентура.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Клиентура);
				СформироватьPlist(ТЗ, "uniqueID", тмпТЗАгенты, "POS", "торговых точек", Ложь, , , , КлючПоиска);
				
				//Таблица коэффициентов рекомендуемого запаса.
				Если СпецификаПользователя = "SD" Тогда		
					
					#Область adjustmentGroups
					
					Запрос = Новый Запрос();
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	КонтрагентыМенеджеры.Ссылка.Код КАК clientID,
					|	БПАГКоэффициентыРекомендуемогоЗапасаСрезПоследних.НоменклатурнаяГруппа.Код КАК groupID,
					|	БПАГКоэффициентыРекомендуемогоЗапасаСрезПоследних.Коэффициент КАК recommendedCoeff
					|ИЗ
					|	Справочник.Контрагенты.Менеджеры КАК КонтрагентыМенеджеры
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БПАГКоэффициентыРекомендуемогоЗапаса.СрезПоследних(&ТекущаяДата, ) КАК БПАГКоэффициентыРекомендуемогоЗапасаСрезПоследних
					|		ПО КонтрагентыМенеджеры.Ссылка = БПАГКоэффициентыРекомендуемогоЗапасаСрезПоследних.Контрагент
					|ГДЕ
					|	ВЫБОР
					|			КОГДА &ЭтоСупервайзер = ИСТИНА
					|				ТОГДА КонтрагентыМенеджеры.Менеджер В ИЕРАРХИИ (&Менеджер)
					|			ИНАЧЕ КонтрагентыМенеджеры.Менеджер = &Менеджер
					|		КОНЕЦ
					|	И КонтрагентыМенеджеры.Ссылка.Родитель.Подразделение = &Подразделение
					|	И НЕ КонтрагентыМенеджеры.Ссылка.ПометкаУдаления
					|	И КонтрагентыМенеджеры.Ссылка.КД_Состояние = &КД_Состояние";
					
					Запрос.УстановитьПараметр("МассивКлиентуры", 	МассивКлиентурыТТ);
					Запрос.УстановитьПараметр("ВыгрузкаВсех", 		ВыгрузкаВсехТТ);
					Запрос.УстановитьПараметр("Менеджер", 			тмпАгент.Агент.Менеджер);
					Запрос.УстановитьПараметр("ЭтоСупервайзер", 	тмпАгент.Агент.Менеджер.ЭтоГруппа);
					Запрос.УстановитьПараметр("Подразделение",		тмпАгент.Агент.Подразделение);
					запрос.УстановитьПараметр("КД_Состояние",		Справочники.КД_СостоянияТТ.НайтиПоКоду("000000001"));
					
					Запрос.УстановитьПараметр("ТекущаяДата", КонецДня(ТекущаяДата()));
					
					ТЗКоэффициенты = Запрос.Выполнить().Выгрузить();
					
					#КонецОбласти
					
					СформироватьPlist(ТЗКоэффициенты, "clientID", тмпТЗАгенты, "adjustmentGroups", "коэффициентов рекомендуемого запаса", Ложь, Истина, , , );
				КонецЕсли;
				
				//lena
				Если СпецификаПользователя = "SD" Тогда
					
					#Область posProperties
						
					//Значения свойств ТТ
					ТЗЗначенияСвойств = Новый ТаблицаЗначений;
					ТЗЗначенияСвойств.Колонки.Добавить("posID");
					ТЗЗначенияСвойств.Колонки.Добавить("propertyTypeID");
					ТЗЗначенияСвойств.Колонки.Добавить("value");
					
					Для Каждого тмпСтрокаСвойств Из ТЗДляСвойств Цикл
					
						НоваяСтрока = ТЗЗначенияСвойств.Добавить();
						НоваяСтрока.posID = тмпСтрокаСвойств.uniqueID;
						НоваяСтрока.propertyTypeID = "SKU";
						НоваяСтрока.value = СокрЛП(тмпСтрокаСвойств.SKU);
						
						НоваяСтрока = ТЗЗначенияСвойств.Добавить();
						НоваяСтрока.posID = тмпСтрокаСвойств.uniqueID;
						НоваяСтрока.propertyTypeID = "RECOMMENDED_ORDER_NEW_MODE";
						НоваяСтрока.value = тмпСтрокаСвойств.RECOMMENDED_ORDER_NEW_MODE;
						
						НоваяСтрока = ТЗЗначенияСвойств.Добавить();
						НоваяСтрока.posID = тмпСтрокаСвойств.uniqueID;
						НоваяСтрока.propertyTypeID = "STANDARD_ID";
						НоваяСтрока.value = тмпСтрокаСвойств.STANDARD_ID;
						
						НоваяСтрока = ТЗЗначенияСвойств.Добавить();
						НоваяСтрока.posID = тмпСтрокаСвойств.uniqueID;
						НоваяСтрока.propertyTypeID = "REQUIRED_SKU_LIMIT";
						НоваяСтрока.value = тмпСтрокаСвойств.REQUIRED_SKU_LIMIT;
						
						НоваяСтрока = ТЗЗначенияСвойств.Добавить();
						НоваяСтрока.posID = тмпСтрокаСвойств.uniqueID;
						НоваяСтрока.propertyTypeID = "RECOMMENDED_SKU_LIMIT";
						НоваяСтрока.value = тмпСтрокаСвойств.RECOMMENDED_SKU_LIMIT;
						
						Если Найти("Категория 12, Категория 13", СокрЛП(тмпСтрокаСвойств.ТипЦен)) = 0 Тогда
							
							НоваяСтрока = ТЗЗначенияСвойств.Добавить();
							НоваяСтрока.posID = тмпСтрокаСвойств.uniqueID;
							НоваяСтрока.propertyTypeID = "ALLOW_DELETE_ORDER_ROWS";
							//НоваяСтрока.value = тмпСтрокаСвойств.ALLOW_DELETE_ORDER_ROWS;
							НоваяСтрока.value = 1;
							
							НоваяСтрока = ТЗЗначенияСвойств.Добавить();
							НоваяСтрока.posID = тмпСтрокаСвойств.uniqueID;
							НоваяСтрока.propertyTypeID = "ALLOW_ADD_ORDER_ROWS";
							//НоваяСтрока.value = тмпСтрокаСвойств.ALLOW_ADD_ORDER_ROWS;
							НоваяСтрока.value = 1;
							
							НоваяСтрока = ТЗЗначенияСвойств.Добавить();
							НоваяСтрока.posID = тмпСтрокаСвойств.uniqueID;
							НоваяСтрока.propertyTypeID = "ALLOW_EDIT_ORDER_QTY";
							//НоваяСтрока.value = тмпСтрокаСвойств.ALLOW_EDIT_ORDER_QTY;
							НоваяСтрока.value = 1;
							
							НоваяСтрока = ТЗЗначенияСвойств.Добавить();
							НоваяСтрока.posID = тмпСтрокаСвойств.uniqueID;
							НоваяСтрока.propertyTypeID = "ALLOW_ORDER_WITHOUT_MERCHANDISING";
							//НоваяСтрока.value = тмпСтрокаСвойств.ALLOW_ORDER_WITHOUT_MERCHANDISING;
							НоваяСтрока.value = 0;
							
							НоваяСтрока = ТЗЗначенияСвойств.Добавить();
							НоваяСтрока.posID = тмпСтрокаСвойств.uniqueID;
							НоваяСтрока.propertyTypeID = "ALLOW_EMPTY_MERCHANDISING";
							//НоваяСтрока.value = тмпСтрокаСвойств.ALLOW_EMPTY_MERCHANDISING;
							НоваяСтрока.value = 0;
							
							НоваяСтрока = ТЗЗначенияСвойств.Добавить();
							НоваяСтрока.posID = тмпСтрокаСвойств.uniqueID;
							НоваяСтрока.propertyTypeID = "FILTER_GOODS_BY_STANDARD";
							//НоваяСтрока.value = тмпСтрокаСвойств.FILTER_GOODS_BY_STANDARD;
							НоваяСтрока.value = 0;
						Иначе
							
							НоваяСтрока = ТЗЗначенияСвойств.Добавить();
							НоваяСтрока.posID = тмпСтрокаСвойств.uniqueID;
							НоваяСтрока.propertyTypeID = "ALLOW_DELETE_ORDER_ROWS";
							//НоваяСтрока.value = тмпСтрокаСвойств.ALLOW_DELETE_ORDER_ROWS;
							Если тмпСтрокаСвойств.ГруппаПродукта.Родитель = Группа_МИ Тогда
								новаяСтрока.value = 1;
							Иначе
								новаяСтрока.value = 0;
							КонецЕсли;
							
							НоваяСтрока = ТЗЗначенияСвойств.Добавить();
							НоваяСтрока.posID = тмпСтрокаСвойств.uniqueID;
							НоваяСтрока.propertyTypeID = "ALLOW_ADD_ORDER_ROWS";
							//НоваяСтрока.value = тмпСтрокаСвойств.ALLOW_ADD_ORDER_ROWS;
							НоваяСтрока.value = 1;
							
							НоваяСтрока = ТЗЗначенияСвойств.Добавить();
							НоваяСтрока.posID = тмпСтрокаСвойств.uniqueID;
							НоваяСтрока.propertyTypeID = "ALLOW_EDIT_ORDER_QTY";
							//НоваяСтрока.value = тмпСтрокаСвойств.ALLOW_EDIT_ORDER_QTY;
							Если тмпСтрокаСвойств.ГруппаПродукта.Родитель = Группа_МИ Тогда
								новаяСтрока.value = 1;
							Иначе
								новаяСтрока.value = 0;
							КонецЕсли;
							
							НоваяСтрока = ТЗЗначенияСвойств.Добавить();
							НоваяСтрока.posID = тмпСтрокаСвойств.uniqueID;
							НоваяСтрока.propertyTypeID = "ALLOW_ORDER_WITHOUT_MERCHANDISING";
							//НоваяСтрока.value = тмпСтрокаСвойств.ALLOW_ORDER_WITHOUT_MERCHANDISING;
							НоваяСтрока.value = 0;
							
							НоваяСтрока = ТЗЗначенияСвойств.Добавить();
							НоваяСтрока.posID = тмпСтрокаСвойств.uniqueID;
							НоваяСтрока.propertyTypeID = "ALLOW_EMPTY_MERCHANDISING";
							//НоваяСтрока.value = тмпСтрокаСвойств.ALLOW_EMPTY_MERCHANDISING;
							НоваяСтрока.value = 0;
							
							НоваяСтрока = ТЗЗначенияСвойств.Добавить();
							НоваяСтрока.posID = тмпСтрокаСвойств.uniqueID;
							НоваяСтрока.propertyTypeID = "FILTER_GOODS_BY_STANDARD";
							//НоваяСтрока.value = тмпСтрокаСвойств.FILTER_GOODS_BY_STANDARD;
							Если ТекущаяДата() >= Дата('20181004000000') И ТекущаяДата() <= Дата('20181010235959') Тогда
								НоваяСтрока.value = 1;
							Иначе
								НоваяСтрока.value = 0;
							КонецЕсли;
						КонецЕсли;
						
					КонецЦикла;	
					
					#КонецОбласти
					
					СформироватьPlist(ТЗЗначенияСвойств, "posID", тмпТЗАгенты, "posProperties", "свойств торговых точек", Ложь, Истина, , , );
					
				КонецЕсли;
				//lena<-
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	//Виды свойств ТТ
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("uniqueID");
	ТЗ.Колонки.Добавить("name");
	ТЗ.Колонки.Добавить("identifier");
	ТЗ.Колонки.Добавить("invisible");
	ТЗ.Колонки.Добавить("sort");
	ТЗ.Колонки.Добавить("highlightColor");
	ТЗ.Колонки.Добавить("readOnly");
	ТЗ.Колонки.Добавить("placeholder");
	ТЗ.Колонки.Добавить("type");
	
	//Если НастройкаИзКэша("1СВыгружатьСведенияОрганизаций", тмпАгент.Агент) Тогда
	//	//Предопределенные:
	//	//identifier
	//	//address
	//	//contactPerson
	//	//phone
	//	//fullAddress
	//	//fullName
	//	//legalAddress
	//	//INN/KPP
	//	//clientDebtSum- динамическое поле текущего долга клиента данной ТТ
	//	//<key>uniqueID</key>
	//	//<string>0001</string>
	//	//<key>name</key>
	//	//<string>Произвольное св-во</string>
	//	//<key>identifier</key>
	//	//<string></string>
	//	//<key>invisible</key>
	//	//<string>0</string>
	//	//<key>type</key>
	//	//<string>string</string>
	//	//<key>sort</key>
	//	//<string>1.000</string>
	//	//<key>highlightColor</key>
	//	//<string></string>
	//	//<key>nameColor</key>
	//	//<string></string>
	//	//<key>valueColor</key>
	//	//<string></string>
	//	
	//	НоваяСтрока = ТЗ.Добавить();
	//	НоваяСтрока.uniqueID = "BANK";
	//	НоваяСтрока.name = "";
	//	НоваяСтрока.identifier = "BANK";
	//	НоваяСтрока.invisible = "1";
	//	
	//	НоваяСтрока = ТЗ.Добавить();
	//	НоваяСтрока.uniqueID = "BANK_BIC";
	//	НоваяСтрока.name = "";
	//	НоваяСтрока.identifier = "BANK_BIC";
	//	НоваяСтрока.invisible = "1";
	//	
	//	НоваяСтрока = ТЗ.Добавить();
	//	НоваяСтрока.uniqueID = "BANK_ACCOUNT";
	//	НоваяСтрока.name = "";
	//	НоваяСтрока.identifier = "BANK_ACCOUNT";
	//	НоваяСтрока.invisible = "1";
	//	
	//	НоваяСтрока = ТЗ.Добавить();
	//	НоваяСтрока.uniqueID = "BANK_CORACCOUNT";
	//	НоваяСтрока.name = "";
	//	НоваяСтрока.identifier = "BANK_CORACCOUNT";
	//	НоваяСтрока.invisible = "1";
	//	
	//	НоваяСтрока = ТЗ.Добавить();
	//	НоваяСтрока.uniqueID = "REGISTRATION_CERTIFICATE";
	//	НоваяСтрока.name = "";
	//	НоваяСтрока.identifier = "REGISTRATION_CERTIFICATE";
	//	НоваяСтрока.invisible = "1";
	//	
	//КонецЕсли;
	
	Если СпецификаПользователя = "SD" Тогда
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.uniqueID = "contactPerson";
		НоваяСтрока.name = "";
		НоваяСтрока.identifier = "contactPerson";
		НоваяСтрока.invisible = "0";
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.uniqueID = "INN/KPP";
		НоваяСтрока.name = "";
		НоваяСтрока.identifier = "INN/KPP";
		НоваяСтрока.invisible = "1";
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.uniqueID = "SKU";
		НоваяСтрока.name = "SKU";
		НоваяСтрока.identifier = "SKU";
		НоваяСтрока.type = "string";
		НоваяСтрока.invisible = "0";
		НоваяСтрока.sort = "-100";
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.uniqueID = "RECOMMENDED_ORDER_NEW_MODE";
		НоваяСтрока.name = "RECOMMENDED_ORDER_NEW_MODE";
		НоваяСтрока.identifier = "RECOMMENDED_ORDER_NEW_MODE";
		НоваяСтрока.type = "boolean";
		НоваяСтрока.invisible = "1";
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.uniqueID = "STANDARD_ID";
		НоваяСтрока.name = "STANDARD_ID";
		НоваяСтрока.identifier = "STANDARD_ID";
		НоваяСтрока.type = "string";
		НоваяСтрока.invisible = "1";
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.uniqueID = "REQUIRED_SKU_LIMIT";
		НоваяСтрока.name = "REQUIRED_SKU_LIMIT";
		НоваяСтрока.identifier = "REQUIRED_SKU_LIMIT";
		НоваяСтрока.type = "number";
		НоваяСтрока.invisible = "1";
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.uniqueID = "RECOMMENDED_SKU_LIMIT";
		НоваяСтрока.name = "RECOMMENDED_SKU_LIMIT";
		НоваяСтрока.identifier = "RECOMMENDED_SKU_LIMIT";
		НоваяСтрока.type = "number";
		НоваяСтрока.invisible = "1";
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.uniqueID = "ALLOW_DELETE_ORDER_ROWS";
		НоваяСтрока.name = "ALLOW_DELETE_ORDER_ROWS";
		НоваяСтрока.identifier = "ALLOW_DELETE_ORDER_ROWS";
		НоваяСтрока.type = "boolean";
		НоваяСтрока.invisible = "1";
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.uniqueID = "ALLOW_ADD_ORDER_ROWS";
		НоваяСтрока.name = "ALLOW_ADD_ORDER_ROWS";
		НоваяСтрока.identifier = "ALLOW_ADD_ORDER_ROWS";
		НоваяСтрока.type = "boolean";
		НоваяСтрока.invisible = "1";
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.uniqueID = "ALLOW_EDIT_ORDER_QTY";
		НоваяСтрока.name = "ALLOW_EDIT_ORDER_QTY";
		НоваяСтрока.identifier = "ALLOW_EDIT_ORDER_QTY";
		НоваяСтрока.type = "boolean";
		НоваяСтрока.invisible = "1";
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.uniqueID = "ALLOW_ORDER_WITHOUT_MERCHANDISING";
		НоваяСтрока.name = "ALLOW_ORDER_WITHOUT_MERCHANDISING";
		НоваяСтрока.identifier = "ALLOW_ORDER_WITHOUT_MERCHANDISING";
		НоваяСтрока.type = "boolean";
		НоваяСтрока.invisible = "1";
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.uniqueID = "ALLOW_EMPTY_MERCHANDISING";
		НоваяСтрока.name = "ALLOW_EMPTY_MERCHANDISING";
		НоваяСтрока.identifier = "ALLOW_EMPTY_MERCHANDISING";
		НоваяСтрока.type = "boolean";
		НоваяСтрока.invisible = "1";
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.uniqueID = "FILTER_GOODS_BY_STANDARD";
		НоваяСтрока.name = "FILTER_GOODS_BY_STANDARD";
		НоваяСтрока.identifier = "FILTER_GOODS_BY_STANDARD";
		НоваяСтрока.type = "boolean";
		НоваяСтрока.invisible = "1";
		
		
	КонецЕсли;
	
	Если СпецификаПользователя = "FT" Тогда
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.uniqueID = "FTDebt";
		НоваяСтрока.name = "долги";
		НоваяСтрока.identifier = "FTDebt";
		НоваяСтрока.invisible = "0";
		НоваяСтрока.sort = "1";
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.uniqueID = "address";
		НоваяСтрока.name = "адрес";
		НоваяСтрока.identifier = "address";
		НоваяСтрока.invisible = "0";
		НоваяСтрока.sort = "2";
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.uniqueID = "phone";
		НоваяСтрока.name = "телефон";
		НоваяСтрока.identifier = "phone";
		НоваяСтрока.invisible = "0";
		НоваяСтрока.sort = "3";
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.uniqueID = "clientDebtSum";
		НоваяСтрока.name = "";
		НоваяСтрока.identifier = "clientDebtSum";
		НоваяСтрока.invisible = "1";
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.uniqueID = "contactPerson";
		НоваяСтрока.name = "";
		НоваяСтрока.identifier = "contactPerson";
		НоваяСтрока.invisible = "1";
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.uniqueID = "fullName";
		НоваяСтрока.name = "";
		НоваяСтрока.identifier = "fullName";
		НоваяСтрока.invisible = "1";
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.uniqueID = "legalAddress";
		НоваяСтрока.name = "";
		НоваяСтрока.identifier = "legalAddress";
		НоваяСтрока.invisible = "1";
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.uniqueID = "INN/KPP";
		НоваяСтрока.name = "";
		НоваяСтрока.identifier = "INN/KPP";
		НоваяСтрока.invisible = "1";
		
	КонецЕсли;
	
	Если СпецификаПользователя = "KREPEZHSV" Тогда
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.uniqueID = "FTDebt";
		НоваяСтрока.name = "долги";
		НоваяСтрока.identifier = "FTDebt";
		НоваяСтрока.invisible = "0";
		НоваяСтрока.sort = "1";
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.uniqueID = "address";
		НоваяСтрока.name = "адрес";
		НоваяСтрока.identifier = "address";
		НоваяСтрока.invisible = "0";
		НоваяСтрока.sort = "2";
		НоваяСтрока.readOnly = "0";
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.uniqueID = "phone";
		НоваяСтрока.name = "телефон";
		НоваяСтрока.identifier = "phone";
		НоваяСтрока.invisible = "0";
		НоваяСтрока.sort = "3";
		НоваяСтрока.readOnly = "0";
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.uniqueID = "clientDebtSum";
		НоваяСтрока.name = "";
		НоваяСтрока.identifier = "clientDebtSum";
		НоваяСтрока.invisible = "1";
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.uniqueID = "contactPerson";
		НоваяСтрока.name = "";
		НоваяСтрока.identifier = "contactPerson";
		НоваяСтрока.invisible = "1";
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.uniqueID = "fullName";
		НоваяСтрока.name = "";
		НоваяСтрока.identifier = "fullName";
		НоваяСтрока.invisible = "1";
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.uniqueID = "legalAddress";
		НоваяСтрока.name = "";
		НоваяСтрока.identifier = "legalAddress";
		НоваяСтрока.invisible = "1";
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.uniqueID = "INN/KPP";
		НоваяСтрока.name = "";
		НоваяСтрока.identifier = "INN/KPP";
		НоваяСтрока.invisible = "1";
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.uniqueID = "debtor1";
		НоваяСтрока.name = "";
		НоваяСтрока.identifier = "debtor1";
		НоваяСтрока.invisible = "1";
		НоваяСтрока.highlightColor = "255000255";
		
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.uniqueID = "debtor2";
		НоваяСтрока.name = "";
		НоваяСтрока.identifier = "debtor2";
		НоваяСтрока.invisible = "1";
		НоваяСтрока.highlightColor = "000255000";
		
	КонецЕсли;
	
	Если ТЗ.Количество() > 0 Тогда
		СформироватьPlist(ТЗ, "uniqueID", Агенты, "posPropertyTypes", "видов свойств торговых точек", Истина);
	КонецЕсли;
	
КонецПроцедуры	// ВыгрузитьКлиентов()

#КонецОбласти

Процедура ВыгрузитьКартинкиКлиентов(Агенты)
	
	Путь = КаталогОбмена + "Images\";
	
	Для Каждого тмпАгент Из Агенты Цикл
		
		СписокФайловВыгрузки = Новый СписокЗначений;
		СписокФайловВыгрузки.Добавить("clientPictures");
		СписокФайловВыгрузки.Добавить("posPictures");
		КлючПоиска = "Клиентура%-%" + СокрЛП(тмпАгент.Агент.Клиентура.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Клиентура);
		Если ПолучитьГотовыеФайлыВыгрузкиИзКэша(тмпАгент.Агент, КлючПоиска, СписокФайловВыгрузки) Тогда
			//Файлы возьмем из кэша
			
		Иначе			
		
			тмпТЗАгенты = СоздатьТаблицуИзОдногоАгента(тмпАгент);
			
			МассивАгентов = Новый Массив();
			МассивАгентов.Добавить(тмпАгент.Агент);
			
			МассивКлиентурыКлиентов = ПолучитьМассивКлиентурыКлиентов(МассивАгентов);
			//Если клиентуры нет или она пустая, то выгружаем картинки всех контрагентов
			ВыгрузкаВсехКлиентов = МассивКлиентурыКлиентов.Количество() = 0;
			
			МассивКлиентурыТТ = ПолучитьМассивКлиентурыТТ(МассивАгентов);
			//Если клиентуры нет или она пустая, то выгружаем картинки всех торговых точек
			ВыгрузкаВсехТТ = МассивКлиентурыТТ.Количество() = 0;
			
			Запрос = Новый Запрос();
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	БПАГКонтрагентыКартинки.Ссылка.Код КАК clientID,
			|	БПАГКонтрагентыКартинки.Имя КАК fileName,
			|	БПАГКонтрагентыКартинки.НомерСтроки КАК sort
			|ИЗ
			|	Справочник.БПАГКонтрагенты.Картинки КАК БПАГКонтрагентыКартинки
			|ГДЕ
			|	НЕ БПАГКонтрагентыКартинки.Ссылка.ПометкаУдаления
			|	И (&ВыгрузкаВсех
			|			ИЛИ БПАГКонтрагентыКартинки.Ссылка В ИЕРАРХИИ (&МассивКлиентуры))
			|
			|УПОРЯДОЧИТЬ ПО
			|	clientID,
			|	sort";
			
			Запрос.УстановитьПараметр("ВыгрузкаВсех", ВыгрузкаВсехКлиентов);
			Запрос.УстановитьПараметр("МассивКлиентуры", МассивКлиентурыКлиентов);
			
			ТЗ = Запрос.Выполнить().Выгрузить();
			ТЗ.Колонки.Добавить("fileSize");
			Для Каждого тмпСтрока Из ТЗ Цикл
				Файл = Новый Файл(Путь + тмпСтрока.fileName);
				Если Файл.Существует() Тогда
					НоваяСтрока = ТЗКартинки.Добавить();
					НоваяСтрока.Имя = тмпСтрока.fileName;
					НоваяСтрока.Размер = Файл.Размер();
					тмпСтрока.fileSize = НоваяСтрока.Размер;
				КонецЕсли;
			КонецЦикла;
			
			КлючПоиска = "Клиентура%-%" + СокрЛП(тмпАгент.Агент.Клиентура.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Клиентура);
			СформироватьPlist(ТЗ, "clientID", тмпТЗАгенты, "clientPictures", "картинок клиентов", Ложь, Истина, Ложь, , КлючПоиска);
			
			Запрос = Новый Запрос();
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	БПАГТорговыеТочкиКартинки.Ссылка.Код КАК posID,
			|	БПАГТорговыеТочкиКартинки.Имя КАК fileName,
			|	БПАГТорговыеТочкиКартинки.НомерСтроки КАК sort
			|ИЗ
			|	Справочник.БПАГТорговыеТочки.Картинки КАК БПАГТорговыеТочкиКартинки
			|ГДЕ
			|	НЕ БПАГТорговыеТочкиКартинки.Ссылка.ПометкаУдаления
			|	И НЕ БПАГТорговыеТочкиКартинки.Ссылка.Владелец.ПометкаУдаления
			|	И (&ВыгрузкаВсех
			|			ИЛИ БПАГТорговыеТочкиКартинки.Ссылка В ИЕРАРХИИ (&МассивКлиентуры))
			|
			|УПОРЯДОЧИТЬ ПО
			|	posID,
			|	sort";
			
			Запрос.УстановитьПараметр("ВыгрузкаВсех", ВыгрузкаВсехТТ);
			Запрос.УстановитьПараметр("МассивКлиентуры", МассивКлиентурыТТ);
			
			ТЗ = Запрос.Выполнить().Выгрузить();
			ТЗ.Колонки.Добавить("fileSize");
			Для Каждого тмпСтрока Из ТЗ Цикл
				Файл = Новый Файл(Путь + тмпСтрока.fileName);
				Если Файл.Существует() Тогда
					НоваяСтрока = ТЗКартинки.Добавить();
					НоваяСтрока.Имя = тмпСтрока.fileName;
					НоваяСтрока.Размер = Файл.Размер();
					тмпСтрока.fileSize = НоваяСтрока.Размер;
				КонецЕсли;
			КонецЦикла;
			
			КлючПоиска = "Клиентура%-%" + СокрЛП(тмпАгент.Агент.Клиентура.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Клиентура);
			СформироватьPlist(ТЗ, "posID", тмпТЗАгенты, "posPictures", "картинок торговых точек", Ложь, Истина, Ложь, , КлючПоиска);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

#Область ВыгрузитьДолги

Процедура ВыгрузитьДолги(Агенты)
	
	ВидПрикладногоРешения = БПАГ.ПолучитьВидПрикладногоРешения();
	
	Для Каждого тмпАгент Из Агенты Цикл
		
		СписокФайловВыгрузки = Новый СписокЗначений;
		СписокФайловВыгрузки.Добавить("debts");
		КлючПоиска = "Клиентура%-%" + СокрЛП(тмпАгент.Агент.Клиентура.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Клиентура);
		Если ПолучитьГотовыеФайлыВыгрузкиИзКэша(тмпАгент.Агент, КлючПоиска, СписокФайловВыгрузки) Тогда
			//Файлы возьмем из кэша
			
		Иначе			
		
			тмпТЗАгенты = СоздатьТаблицуИзОдногоАгента(тмпАгент);
			
			МассивАгентов = Новый Массив();
			МассивАгентов.Добавить(тмпАгент.Агент);
			
			МассивКлиентуры = ПолучитьМассивКлиентурыКлиентов(МассивАгентов);
			//Если клиентуры нет или она пустая, то выгружаем всех контрагентов
			ВыгрузкаВсех = МассивКлиентуры.Количество() = 0;
			
			//Долги
			Запрос = Новый Запрос();
			
			Если (ВидПрикладногоРешения = "УТ11") ИЛИ (ВидПрикладногоРешения = "УНФ") Тогда
				Запрос.Текст = 
				
				"ВЫБРАТЬ
				|	БПАГДолгиКлиентов.Контрагент.Код КАК clientID,
				|	БПАГДолгиКлиентов.Организация.Код КАК companyID,
				|	""1"" + БПАГДолгиКлиентов.Контрагент.Код КАК clientAnalyticsID,
				|	ВЫБОР
				|		КОГДА БПАГДолгиКлиентов.Документ = """"
				|			ТОГДА ""Без документа""
				|		ИНАЧЕ БПАГДолгиКлиентов.Документ
				|	КОНЕЦ КАК document,
				|	БПАГДолгиКлиентов.Сумма КАК sum,
				|	БПАГДолгиКлиентов.Долг КАК debt,
				|	БПАГДолгиКлиентов.Дата КАК date,
				|	БПАГДолгиКлиентов.Номер КАК number
				|ИЗ
				|	РегистрСведений.БПАГДолгиКлиентов КАК БПАГДолгиКлиентов
				|ГДЕ
				|	БПАГДолгиКлиентов.Менеджер = &Менеджер
				|//	И (БПАГДолгиКлиентов.Долг > 10
				|	И (БПАГДолгиКлиентов.Долг > 0
				|			ИЛИ БПАГДолгиКлиентов.Долг = 0)";
				
				Запрос.УстановитьПараметр("МассивКлиентуры", МассивКлиентуры);
				Запрос.УстановитьПараметр("ВыгрузкаВсех", ВыгрузкаВсех);
				Запрос.УстановитьПараметр("Менеджер", тмпАгент.Агент.Менеджер);
				
			Иначе
				
				Запрос.Текст = 
				
				"ВЫБРАТЬ
				|	БПАГДолгиКлиентов.Контрагент.Код КАК clientID,
				|	БПАГДолгиКлиентов.Организация.Код КАК companyID,
				|	БПАГДолгиКлиентов.Договор.Код КАК clientAnalyticsID,
				|	ВЫБОР
				|		КОГДА БПАГДолгиКлиентов.Документ = """"
				|			ТОГДА ""Без документа""
				|		ИНАЧЕ БПАГДолгиКлиентов.Документ
				|	КОНЕЦ КАК document,
				|	БПАГДолгиКлиентов.Сумма КАК sum,
				|	БПАГДолгиКлиентов.Долг КАК debt,
				|	БПАГДолгиКлиентов.Дата КАК date,
				|	БПАГДолгиКлиентов.Номер КАК number
				|ИЗ
				|	РегистрСведений.БПАГДолгиКлиентов КАК БПАГДолгиКлиентов
				|ГДЕ
				|	НЕ БПАГДолгиКлиентов.Организация.ПометкаУдаления
				|	И НЕ БПАГДолгиКлиентов.Контрагент.ПометкаУдаления
				|	И (&ВыгрузкаВсех
				|			ИЛИ БПАГДолгиКлиентов.Контрагент В ИЕРАРХИИ (&МассивКлиентуры))";
				
				Запрос.УстановитьПараметр("МассивКлиентуры", МассивКлиентуры);
				Запрос.УстановитьПараметр("ВыгрузкаВсех", ВыгрузкаВсех);
			КонецЕсли;
			
			Результат = Запрос.Выполнить().Выгрузить();
			Если Результат.Количество() > 0 Тогда	
				КлючПоиска = "Клиентура%-%" + СокрЛП(тмпАгент.Агент.Клиентура.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Клиентура);
				//СформироватьPlist(Запрос.Выполнить().Выгрузить(), "clientID", тмпТЗАгенты, "debts", "долгов", Ложь, Истина, , , КлючПоиска);
				СформироватьPlist(Результат, "clientID", тмпТЗАгенты, "debts", "долгов", Ложь, Истина, , , КлючПоиска);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область ВыгрузитьМаршруты

Процедура ВыгрузитьМаршруты(Агенты)
	
	//ГоризонтВыгрузки = 15;
	//
	//Попытка
	//	ЗаголовокСистемы = "";
	//	Выполнить("ЗаголовокСистемы = ПолучитьЗаголовокСистемы();");
	//	Если Найти(ЗаголовокСистемы, "Демо база") > 0 Тогда
	//		ГоризонтВыгрузки = 360;
	//	КонецЕсли;
	//Исключение
	//КонецПопытки;
	
	
	ТекДата = НачалоДня(ТекущаяДата());
	
	//Маршруты
	Для Каждого тмпАгент Из Агенты Цикл
		
		//ВариантПланирования = НастройкаИзКэша("1СТекущийВариантМаршрутов", тмпАгент.Агент);
		//Попытка
		//	Если ВариантПланирования.Пустая() Тогда
		//		ОтладочноеСообщение("Для агента " + тмпАгент.Агент + " не задан вариант маршрутов! Маршруты не выгружены.");
		//		Продолжить;
		//	КонецЕсли;
		//Исключение
		//	Продолжить;
		//КонецПопытки;
		//
		//ИнтервалПланирования = ВариантПланирования.ИнтервалПланирования;
		
		запрос = Новый Запрос;
		
		#Область ТекстЗапроса
		
		запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БПАГМаршруты.Дата КАК visitDate,
		|	БПАГМаршруты.ТорговаяТочка.Код КАК posID,
		|	БПАГМаршруты.Порядок КАК sort
		|ИЗ
		|	РегистрСведений.БПАГМаршруты КАК БПАГМаршруты
		|ГДЕ
		|	БПАГМаршруты.Агент = &Агент
		|	И БПАГМаршруты.Вариант = &Вариант
		|	И НЕ БПАГМаршруты.ТорговаяТочка.ПометкаУдаления
		|	И НЕ БПАГМаршруты.ТорговаяТочка.Владелец.ПометкаУдаления";
		
		запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	БПАГПланПосещенийДни.Контрагент.Код КАК posID,
		|	&ДатаМаршрута КАК visitDate,
		|	БПАГПланПосещенийДни.НомерСтроки КАК sort
		|ИЗ
		|	Документ.БПАГПланПосещений.Дни КАК БПАГПланПосещенийДни
		|ГДЕ
		|	БПАГПланПосещенийДни.Ссылка.Проведен = ИСТИНА
		|	И БПАГПланПосещенийДни.Ссылка.Агент = &Агент
		|	И ВЫБОР
		|			КОГДА ДЕНЬНЕДЕЛИ(&ДатаМаршрута) = 1
		|				ТОГДА БПАГПланПосещенийДни.Д1
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ДЕНЬНЕДЕЛИ(&ДатаМаршрута) = 2
		|						ТОГДА БПАГПланПосещенийДни.Д2
		|					ИНАЧЕ ВЫБОР
		|							КОГДА ДЕНЬНЕДЕЛИ(&ДатаМаршрута) = 3
		|								ТОГДА БПАГПланПосещенийДни.Д3
		|							ИНАЧЕ ВЫБОР
		|									КОГДА ДЕНЬНЕДЕЛИ(&ДатаМаршрута) = 4
		|										ТОГДА БПАГПланПосещенийДни.Д4
		|									ИНАЧЕ ВЫБОР
		|											КОГДА ДЕНЬНЕДЕЛИ(&ДатаМаршрута) = 5
		|												ТОГДА БПАГПланПосещенийДни.Д5
		|											ИНАЧЕ ВЫБОР
		|													КОГДА ДЕНЬНЕДЕЛИ(&ДатаМаршрута) = 6
		|														ТОГДА БПАГПланПосещенийДни.Д6
		|													ИНАЧЕ БПАГПланПосещенийДни.Д7
		|												КОНЕЦ
		|										КОНЕЦ
		|								КОНЕЦ
		|						КОНЕЦ
		|				КОНЕЦ
		|		КОНЕЦ = 1
		|	И БПАГПланПосещенийДни.Ссылка.Агент = &Агент
		|
		|УПОРЯДОЧИТЬ ПО
		|	sort";
		
		#КонецОбласти
		
		Запрос.УстановитьПараметр("Агент", тмпАгент.Агент);
		Запрос.УстановитьПараметр("ДатаМаршрута", ТекущаяДатаСеанса());
		//Запрос.УстановитьПараметр("Вариант", ВариантПланирования);
		
		результатЗапроса = запрос.Выполнить();
		
		#Область ДлинныйКоментарий
		//тмпТЗ = Запрос.Выполнить().Выгрузить();
		//ТЗ = тмпТЗ.Скопировать();
		//ТЗ.Очистить();
		//
		//Если (тмпТЗ.Количество() > 0) И (ИнтервалПланирования = 0) Тогда
		//	ОтладочноеСообщение("Не задан интервал маршрутов для варианта планирования маршрутов " + ВариантПланирования + "! Маршруты не выгружены.");
		//	Продолжить;
		//КонецЕсли;
		//
		//Для Каждого тмпСтрока Из тмпТЗ Цикл
		//	Для i = 0 По 15 Цикл
		//		тмпДата = НачалоДня(ТекДата + i * 60 * 60 * 24);
		//		
		//		РазностьДат = (тмпДата - тмпСтрока.visitDate) / 60 / 60 / 24;
		//		
		//		Если (РазностьДат % ИнтервалПланирования) = 0 Тогда
		//			НоваяСтрока = ТЗ.Добавить();
		//			ЗаполнитьЗначенияСвойств(НоваяСтрока, тмпСтрока);
		//			НоваяСтрока.visitDate = тмпДата;
		//		КонецЕсли;
		//	КонецЦикла;
		//КонецЦикла;
		//
		//Запрос = Новый Запрос;
		//Запрос.Текст = 
		//"ВЫБРАТЬ
		//|	БПАГДокументыАгентовСрезПоследних.ТорговаяТочка.Код КАК posID,
		//|	НАЧАЛОПЕРИОДА(БПАГДокументыАгентовСрезПоследних.Документ.Дата, ДЕНЬ) КАК visitDate,
		//|	0 КАК sort
		//|ИЗ
		//|	РегистрСведений.БПАГДокументыАгентов.СрезПоследних(
		//|			,
		//|			Агент = &Агент
		//|				И (Документ.Дата МЕЖДУ &ДатаНачала И &ДатаКонца)) КАК БПАГДокументыАгентовСрезПоследних";
		//
		//
		//Запрос.УстановитьПараметр("Агент", тмпАгент.Агент);
		//Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ТекущаяДата() - 7 * 24 * 60 * 60));
		//Запрос.УстановитьПараметр("ДатаКонца", КонецДня(ТекущаяДата()));
		//
		//ВыборкаПоДокументам = Запрос.Выполнить().Выбрать();
		//Пока ВыборкаПоДокументам.Следующий() Цикл
		//	НоваяСтрока = ТЗ.Добавить();
		//	ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоДокументам);
		//КонецЦикла;
		#КонецОбласти
		
		таблицаМаршрута = результатЗапроса.Выгрузить();
		
		номерВМаршруте = 1;
		Для Каждого строкаТаблицы Из таблицаМаршрута Цикл
			строкаТаблицы.sort = номерВМаршруте;
			номерВМаршруте = номерВМаршруте + 1;
		КонецЦикла;
		
		таблицаМаршрута.Свернуть("posID, visitDate", "sort");   
		
		тмпТЗАгенты = СоздатьТаблицуИзОдногоАгента(тмпАгент);
		СформироватьPlist(таблицаМаршрута, "posID", тмпТЗАгенты, "routes", "маршрутов", Ложь, Истина);
		
		//Статистика по маршрутам
		ТЗСтатистика = таблицаМаршрута.Скопировать();
		ТЗСтатистика.Свернуть("visitDate");
		
		//Добавим пустые даты
		//Для i = 0 По 15 Цикл
		//	тмпДата = ТекДата + i * 60 * 60 * 24;
		//	НайденнаяСтрока = ТЗСтатистика.Найти(тмпДата, "visitDate");
		//	Если НайденнаяСтрока = Неопределено Тогда
		//		НоваяСтрока = ТЗСтатистика.Добавить();
		//		НоваяСтрока.visitDate = тмпДата;
		//	КонецЕсли;
		//КонецЦикла;
		
		ТЗСтатистика.Колонки.Добавить("distance");
		ТЗСтатистика.Колонки.Добавить("time");
		
		СформироватьPlist(ТЗСтатистика, "visitDate", тмпТЗАгенты, "routeStats", "статистики маршрутов", Ложь, Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Процедура ВыгрузитьПланы(Агенты)
	
	ГоризонтВыгрузки = 90;
	Попытка
		ЗаголовокСистемы = "";
		Выполнить("ЗаголовокСистемы = ПолучитьЗаголовокСистемы();");
		Если Найти(ЗаголовокСистемы, "Демо база") > 0 Тогда
			ГоризонтВыгрузки = 360;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	ТекДата = НачалоДня(ТекущаяДата());
	
	//Планы
	Для Каждого тмпАгент Из Агенты Цикл
		
		ВидПлана = НастройкаИзКэша("mainPlanType", тмпАгент.Агент);
		Попытка
			Если ВидПлана.Пустая() Тогда
				Продолжить;
			КонецЕсли;
		Исключение
			Продолжить;
		КонецПопытки;
		
		ИнтервалПланирования = ВидПлана.ИнтервалПланирования;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БПАГПланы.ВидПлана.Код КАК planID,
		|	БПАГПланы.Дата КАК planDate,
		|	БПАГПланы.План КАК planValue
		|ИЗ
		|	РегистрСведений.БПАГПланы КАК БПАГПланы
		|ГДЕ
		|	БПАГПланы.Агент = &Агент
		|	И БПАГПланы.ВидПлана = &ВидПлана";
		
		Запрос.УстановитьПараметр("Агент", тмпАгент.Агент);
		Запрос.УстановитьПараметр("ВидПлана", ВидПлана);
		
		тмпТЗ = Запрос.Выполнить().Выгрузить();
		Если тмпТЗ.Количество() = 0 Тогда
			//Берем общие настройки для всех агентов
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	БПАГПланы.ВидПлана.Код КАК planID,
			|	БПАГПланы.Дата КАК planDate,
			|	БПАГПланы.План КАК planValue
			|ИЗ
			|	РегистрСведений.БПАГПланы КАК БПАГПланы
			|ГДЕ
			|	БПАГПланы.Агент = &Агент
			|	И БПАГПланы.ВидПлана = &ВидПлана";
			
			Запрос.УстановитьПараметр("Агент", Справочники.БПАГАгенты.ПустаяСсылка());
			Запрос.УстановитьПараметр("ВидПлана", ВидПлана);
			
			тмпТЗ = Запрос.Выполнить().Выгрузить();
		КонецЕсли;
		
		ТЗ = тмпТЗ.Скопировать();
		ТЗ.Очистить();
		
		Если (тмпТЗ.Количество() > 0) И (ИнтервалПланирования = 0) Тогда
			ОтладочноеСообщение("Не задан интервал планирования для вида плана " + ВидПлана + "! Планы не выгружены.");
			Продолжить;
		КонецЕсли;
		
		Для Каждого тмпСтрока Из тмпТЗ Цикл
			Для i = -30 По ГоризонтВыгрузки Цикл
				тмпДата = ТекДата + i * 60 * 60 * 24;
				
				РазностьДат = (тмпДата - тмпСтрока.planDate) / 60 / 60 / 24;
				
				Если (РазностьДат % ИнтервалПланирования) = 0 Тогда
					НоваяСтрока = ТЗ.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, тмпСтрока);
					НоваяСтрока.planDate = тмпДата;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если СпецификаПользователя = "Adal" Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	БПАГПланы.ВидПлана.Код КАК uniqueID,
			|	БПАГПланы.ВидПлана.Наименование КАК name,
			|	БПАГПланы.ВидПлана
			|ИЗ
			|	РегистрСведений.БПАГПланы КАК БПАГПланы
			|ГДЕ
			|	БПАГПланы.Агент = &Агент";
			
			Запрос.УстановитьПараметр("Агент", тмпАгент.Агент);
			
			тмпТЗВидыПланов = Запрос.Выполнить().Выгрузить();
			тмпТЗВидыПланов.Свернуть("uniqueID, name, ВидПлана");
			
			ТЗВидыПланов = Новый ТаблицаЗначений;
			ТЗВидыПланов.Колонки.Добавить("yAxisTitle");
			ТЗВидыПланов.Колонки.Добавить("uniqueID");
			ТЗВидыПланов.Колонки.Добавить("name");
			ТЗВидыПланов.Колонки.Добавить("description");
			ТЗВидыПланов.Колонки.Добавить("fileName");
			ТЗВидыПланов.Колонки.Добавить("sort");
			ТЗВидыПланов.Колонки.Добавить("lines");
			
			
			
			Для Каждого тмпПлан из тмпТЗВидыПланов Цикл
				Если тмпПлан.uniqueID = ВидПлана.Код Тогда
					тмпПоПлану = Новый ТаблицаЗначений;
					тмпПоПлану.Колонки.Добавить("name");
					тмпПоПлану.Колонки.Добавить("planID");
					тмпПоПлану.Колонки.Добавить("sort");
					
					СтрокаПоПлану = тмпПоПлану.Добавить();
					СтрокаПоПлану.name = "План";
					СтрокаПоПлану.planID = тмпПлан.uniqueID;
					СтрокаПоПлану.sort = "1";
					///Факт->
					СтрокаПоПлану = тмпПоПлану.Добавить();
					СтрокаПоПлану.name = "Факт";
					СтрокаПоПлану.planID = "";
					СтрокаПоПлану.sort = "2";
					СтрокаПоПлану.identifier = "SALES_WEIGHT";
					///Факт<-
					
					СтрокаГрафик = ТЗВидыПланов.Добавить();
					СтрокаГрафик.yAxisTitle = "Вес, кг.";
					СтрокаГрафик.uniqueID = тмпПлан.uniqueID;
					СтрокаГрафик.name = "Продажи по весу";
					СтрокаГрафик.description = "План/факт продаж по весу за текущий месяц";
					СтрокаГрафик.sort = "2";
					СтрокаГрафик.lines = тмпПоПлану;
				Иначе
					ВторойПлан = тмпПлан.ВидПлана;
					
					тмпПоПлану = Новый ТаблицаЗначений;
					тмпПоПлану.Колонки.Добавить("name");
					тмпПоПлану.Колонки.Добавить("planID");
					тмпПоПлану.Колонки.Добавить("sort");
					
					СтрокаПоПлану = тмпПоПлану.Добавить();
					СтрокаПоПлану.name = "План";
					СтрокаПоПлану.planID = тмпПлан.uniqueID;
					СтрокаПоПлану.sort = "1";
					///Факт->
					СтрокаПоПлану = тмпПоПлану.Добавить();
					СтрокаПоПлану.name = "Факт";
					СтрокаПоПлану.planID = "";
					СтрокаПоПлану.sort = "2";
					СтрокаПоПлану.identifier = "SALES_SUM";
					///Факт<-
					
					СтрокаГрафик = ТЗВидыПланов.Добавить();
					СтрокаГрафик.yAxisTitle = "Сумма, тенге";
					СтрокаГрафик.uniqueID = тмпПлан.uniqueID;
					СтрокаГрафик.name = "Продажи";
					СтрокаГрафик.description = "План/факт продаж за текущий месяц";
					СтрокаГрафик.sort = "1";
					СтрокаГрафик.lines = тмпПоПлану;
				КонецЕсли;	
			КонецЦикла;
			
			тмпТЗАгенты = СоздатьТаблицуИзОдногоАгента(тмпАгент);
			СформироватьPlist(ТЗВидыПланов, "uniqueID", тмпТЗАгенты, "plots", "виды графиков", Ложь, Ложь);
			
			//Добавим записи в ТЗ для второго плана
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	БПАГПланы.ВидПлана.Код КАК planID,
			|	БПАГПланы.Дата КАК planDate,
			|	БПАГПланы.План КАК planValue
			|ИЗ
			|	РегистрСведений.БПАГПланы КАК БПАГПланы
			|ГДЕ
			|	БПАГПланы.Агент = &Агент
			|	И БПАГПланы.ВидПлана = &ВидПлана";
			
			Запрос.УстановитьПараметр("Агент", тмпАгент.Агент);
			Запрос.УстановитьПараметр("ВидПлана", ВторойПлан);
			тмпТЗ = Запрос.Выполнить().Выгрузить();
			
			Для Каждого тмпСтрока Из тмпТЗ Цикл
				Для i = -30 По ГоризонтВыгрузки Цикл
					тмпДата = ТекДата + i * 60 * 60 * 24;
					
					РазностьДат = (тмпДата - тмпСтрока.planDate) / 60 / 60 / 24;
					
					Если (РазностьДат % ИнтервалПланирования) = 0 Тогда
						НоваяСтрока = ТЗ.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, тмпСтрока);
						НоваяСтрока.planDate = тмпДата;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		тмпТЗАгенты = СоздатьТаблицуИзОдногоАгента(тмпАгент);
		СформироватьPlist(ТЗ, "planDate", тмпТЗАгенты, "plans", "планов", Ложь, Ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьФактическиеПродажи(Агенты)
	
	ТекДата = НачалоДня(ТекущаяДата());
	
	Для Каждого тмпАгент Из Агенты Цикл
		
		ВыгружатьФактическиеПродажи = НастройкаИзКэша("useActualSalesFromCenter", тмпАгент.Агент);
		Если ВыгружатьФактическиеПродажи Тогда
			
			ВариантВыгрузкиПродаж = НастройкаИзКэша("1СВариантВыгрузкиФактическихПродаж", тмпАгент.Агент);
			
			МассивАгентов = Новый Массив();
			МассивАгентов.Добавить(тмпАгент.Агент);
			МассивКлиентурыКлиентов = ПолучитьМассивКлиентурыКлиентов(МассивАгентов);
			ВыгрузкаВсехКлиентов = МассивКлиентурыКлиентов.Количество() = 0;
			
			Если ВариантВыгрузкиПродаж = Перечисления.БПАГВариантыВыгрузкиФактическихПродаж.ПоОтветственному Тогда
				
				Запрос = Новый Запрос;
				
				Если ВидПрикладногоРешения = "УТ11" Тогда
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	ВыручкаИСебестоимостьПродажОбороты.Период КАК date,
					|	ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот КАК sum
					|ИЗ
					|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&ДатаНачала, &ДатаОкончания, День, ЗаказКлиента.Менеджер.ФизическоеЛицо = &ФизЛицоАгента) КАК ВыручкаИСебестоимостьПродажОбороты";
				ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	ПродажиОбороты.Период КАК date,
					|	ПродажиОбороты.СуммаОборот КАК sum
					|ИЗ
					|	РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, День, Ответственный.ФизЛицо = &ФизЛицоАгента) КАК ПродажиОбороты";
				Иначе
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	ПродажиОбороты.Период КАК date,
					|	ПродажиОбороты.СтоимостьОборот КАК sum
					|ИЗ
					|	РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, День, ДокументПродажи.Ответственный.ФизЛицо = &ФизЛицоАгента) КАК ПродажиОбороты";
				КонецЕсли;
				
				Запрос.УстановитьПараметр("ДатаНачала", ТекущаяДата() - 32 * 24 * 60 * 60);
				Запрос.УстановитьПараметр("ДатаОкончания", ТекущаяДата());
				Запрос.УстановитьПараметр("ФизЛицоАгента", тмпАгент.Агент.ФизЛицо);
			ИначеЕсли ВариантВыгрузкиПродаж = Перечисления.БПАГВариантыВыгрузкиФактическихПродаж.ПоКлиентуре Тогда	
				//По клиентуре
				Запрос = Новый Запрос;
				
				Если ВидПрикладногоРешения = "УТ11" Тогда
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	ВыручкаИСебестоимостьПродажОбороты.Период КАК date,
					|	ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот КАК sum
					|ИЗ
					|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
					|			&ДатаНачала,
					|			&ДатаОкончания,
					|			День,
					|			АналитикаУчетаПоПартнерам.Партнер В
					|				(ВЫБРАТЬ
					|					БПАГКонтрагенты.Партнер
					|				ИЗ
					|					Справочник.БПАГКонтрагенты КАК БПАГКонтрагенты
					|				ГДЕ
					|					НЕ БПАГКонтрагенты.ПометкаУдаления
					|					И (&ВыгрузкаВсехКлиентов
					|						ИЛИ БПАГКонтрагенты.Ссылка В ИЕРАРХИИ (&МассивКлиентурыКлиентов)))) КАК ВыручкаИСебестоимостьПродажОбороты
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БПАГДокументыАгентов.СрезПоследних(, ) КАК БПАГДокументыАгентовСрезПоследних
					|		ПО (ВыручкаИСебестоимостьПродажОбороты.ЗаказКлиента = БПАГДокументыАгентовСрезПоследних.Документ
					|				ИЛИ ВыручкаИСебестоимостьПродажОбороты.ЗаказКлиента = БПАГДокументыАгентовСрезПоследних.Документ.ЗаказКлиента)";
					
					
					
				ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
					//Запрос.Текст = 
					//"ВЫБРАТЬ
					//|	ПродажиОбороты.Период КАК date,
					//|	ПродажиОбороты.СуммаОборот КАК sum
					//|ИЗ
					//|	РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, День, ) КАК ПродажиОбороты
					//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БПАГДокументыАгентов.СрезПоследних(, Агент = &Агент) КАК БПАГДокументыАгентовСрезПоследних
					//|		ПО (ПродажиОбороты.Документ = БПАГДокументыАгентовСрезПоследних.Документ
					//|				ИЛИ ПродажиОбороты.ЗаказПокупателя = БПАГДокументыАгентовСрезПоследних.Документ)";
				Иначе
					//Запрос.Текст = 
					//"ВЫБРАТЬ
					//|	ПродажиОбороты.Период КАК date,
					//|	ПродажиОбороты.СтоимостьОборот КАК sum
					//|ИЗ
					//|	РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, День, ) КАК ПродажиОбороты
					//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БПАГДокументыАгентов.СрезПоследних(, Агент = &Агент) КАК БПАГДокументыАгентовСрезПоследних
					//|		ПО (ПродажиОбороты.ДокументПродажи = БПАГДокументыАгентовСрезПоследних.Документ
					//|				ИЛИ ПродажиОбороты.ДокументПродажи = БПАГДокументыАгентовСрезПоследних.Документ.Сделка)";
				КонецЕсли;
				
				Запрос.УстановитьПараметр("ДатаНачала", ТекущаяДата() - 32 * 24 * 60 * 60);
				Запрос.УстановитьПараметр("ДатаОкончания", ТекущаяДата());
				Запрос.УстановитьПараметр("МассивКлиентурыКлиентов", МассивКлиентурыКлиентов);
				Запрос.УстановитьПараметр("ВыгрузкаВсехКлиентов", ВыгрузкаВсехКлиентов);
				
			Иначе //По признаку выписки на устройстве
				
				Запрос = Новый Запрос;
				
				Если СпецификаПользователя = "SD" Тогда
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	ПродажиОбороты.Период КАК date,
					|	ПродажиОбороты.ПродСтоимостьОборот КАК sum
					|ИЗ
					|	РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, День, ) КАК ПродажиОбороты
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БПАГДокументыАгентов.СрезПоследних(, Агент = &Агент) КАК БПАГДокументыАгентовСрезПоследних
					|		ПО ПродажиОбороты.КредитныйДокумент.ДокОсн = БПАГДокументыАгентовСрезПоследних.Документ";
				ИначеЕсли ВидПрикладногоРешения = "УТ11" Тогда
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	ВыручкаИСебестоимостьПродажОбороты.Период КАК date,
					|	ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот КАК sum
					|ИЗ
					|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&ДатаНачала, &ДатаОкончания, День, ) КАК ВыручкаИСебестоимостьПродажОбороты
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БПАГДокументыАгентов.СрезПоследних(, Агент = &Агент) КАК БПАГДокументыАгентовСрезПоследних
					|		ПО (ВыручкаИСебестоимостьПродажОбороты.ЗаказКлиента = БПАГДокументыАгентовСрезПоследних.Документ
					|				ИЛИ ВыручкаИСебестоимостьПродажОбороты.ЗаказКлиента = БПАГДокументыАгентовСрезПоследних.Документ.ЗаказКлиента)";
				ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	ПродажиОбороты.Период КАК date,
					|	ПродажиОбороты.СуммаОборот КАК sum
					|ИЗ
					|	РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, День, ) КАК ПродажиОбороты
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БПАГДокументыАгентов.СрезПоследних(, Агент = &Агент) КАК БПАГДокументыАгентовСрезПоследних
					|		ПО (ПродажиОбороты.Документ = БПАГДокументыАгентовСрезПоследних.Документ
					|				ИЛИ ПродажиОбороты.ЗаказПокупателя = БПАГДокументыАгентовСрезПоследних.Документ)";
				Иначе
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	ПродажиОбороты.Период КАК date,
					|	ПродажиОбороты.СтоимостьОборот КАК sum
					|ИЗ
					|	РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, День, ) КАК ПродажиОбороты
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БПАГДокументыАгентов.СрезПоследних(, Агент = &Агент) КАК БПАГДокументыАгентовСрезПоследних
					|		ПО (ПродажиОбороты.ДокументПродажи = БПАГДокументыАгентовСрезПоследних.Документ
					|				ИЛИ ПродажиОбороты.ДокументПродажи = БПАГДокументыАгентовСрезПоследних.Документ.Сделка)";
				КонецЕсли;
				
				Запрос.УстановитьПараметр("ДатаНачала", ТекущаяДата() - 32 * 24 * 60 * 60);
				Запрос.УстановитьПараметр("ДатаОкончания", ТекущаяДата());
				Запрос.УстановитьПараметр("Агент", тмпАгент.Агент);
			КонецЕсли;
			
			ТЗ = Запрос.Выполнить().Выгрузить();
			ТЗ.Свернуть("date", "sum");
			
		Иначе
			ТЗ = Новый ТаблицаЗначений();
			ТЗ.Колонки.Добавить("date");
		КонецЕсли;
		
		тмпТЗАгенты = СоздатьТаблицуИзОдногоАгента(тмпАгент);
		СформироватьPlist(ТЗ, "date", тмпТЗАгенты, "actualSales", "фактических продаж", Ложь, Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьИсториюПродаж(Агенты)
	
	ТекДата = НачалоДня(ТекущаяДата());
	
	Для Каждого тмпАгент Из Агенты Цикл
		
		ВыгружатьИсториюПродаж = БПАГ.БПАГПолучитьНастройку("useActualSalesHistoryFromCenter");//НастройкаИзКэша("useActualSalesHistoryFromCenter", тмпАгент.Агент);
		Если ВыгружатьИсториюПродаж Тогда
			
			СписокФайловВыгрузки = Новый СписокЗначений;
			СписокФайловВыгрузки.Добавить("actualSalesHistory");
			КлючПоиска = "КлиентураИАссортимент%-%" + СокрЛП(тмпАгент.Агент.Клиентура.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Клиентура) + "%-%" + СокрЛП(тмпАгент.Агент.Ассортимент.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Ассортимент);
			Если ПолучитьГотовыеФайлыВыгрузкиИзКэша(тмпАгент.Агент, КлючПоиска, СписокФайловВыгрузки) Тогда
				//Файлы возьмем из кэша
				
			Иначе			
		
				МассивАгентов = Новый Массив();
				МассивАгентов.Добавить(тмпАгент.Агент);
				МассивАссортимента = ПолучитьМассивАссортимента(МассивАгентов);
				ВыгрузкаВсехТоваров = МассивАссортимента.Количество() = 0;
				
				ГлубинаВыгрузкиИсторииПродаж = НастройкаИзКэша("1СГлубинаВыгрузкиФактическойИсторииПродаж", тмпАгент.Агент);
				НачальнаяДатаВыгрузкиИсторииПродаж = НачалоДня(ТекущаяДата() - ГлубинаВыгрузкиИсторииПродаж * 24 * 60 * 60);
				
				Если ВидПрикладногоРешения = "УТ10" Тогда
					
					Если НастройкаИзКэша("1СВыгружатьФактическиеПродажиВРазрезеТТ", тмпАгент.Агент) Тогда
						
						МассивКлиентурыТТ = ПолучитьМассивКлиентурыТТ(МассивАгентов);
						ВыгрузкаВсехТТ = МассивКлиентурыТТ.Количество() = 0;
						
						//Запрос = Новый Запрос;
						//Запрос.Текст = 
						//"ВЫБРАТЬ
						//|	ПродажиОбороты.Период КАК date,
						//|	ПродажиОбороты.КоличествоОборот КАК quantity,
						//|	ПродажиОбороты.СтоимостьОборот КАК sum,
						//|	БПАГНоменклатура.Код КАК goodID,
						//|	БПАГДокументыАгентовСрезПоследних.ТорговаяТочка.Код КАК posID
						//|ИЗ
						//|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
						//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(
						//|				&НачалоПериода,
						//|				&КонецПериода,
						//|				День,
						//|				Номенклатура В
						//|					(ВЫБРАТЬ
						//|						БПАГНоменклатура.Номенклатура
						//|					ИЗ
						//|						Справочник.БПАГНоменклатура КАК БПАГНоменклатура
						//|					ГДЕ
						//|						НЕ БПАГНоменклатура.ПометкаУдаления
						//|						И (&ВыгрузкаВсехТоваров
						//|							ИЛИ БПАГНоменклатура.Ссылка В ИЕРАРХИИ (&МассивАссортимента)))) КАК ПродажиОбороты
						//|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БПАГДокументыАгентов.СрезПоследних(
						//|					,
						//|					&ВыгрузкаВсехТТ
						//|						ИЛИ ТорговаяТочка В ИЕРАРХИИ (&МассивКлиентурыТТ)) КАК БПАГДокументыАгентовСрезПоследних
						//|			ПО (ПродажиОбороты.ДокументПродажи = БПАГДокументыАгентовСрезПоследних.Документ
						//|					ИЛИ ПродажиОбороты.ДокументПродажи.Сделка = БПАГДокументыАгентовСрезПоследних.Документ)
						//|		ПО БПАГНоменклатура.Номенклатура = ПродажиОбороты.Номенклатура
						//|ГДЕ
						//|	НЕ БПАГНоменклатура.ПометкаУдаления";
						//
						//Запрос.УстановитьПараметр("НачалоПериода", НачальнаяДатаВыгрузкиИсторииПродаж);
						//Запрос.УстановитьПараметр("КонецПериода", ТекущаяДата());
						//Запрос.УстановитьПараметр("МассивКлиентурыТТ", МассивКлиентурыТТ);
						//Запрос.УстановитьПараметр("ВыгрузкаВсехТТ", ВыгрузкаВсехТТ);
						//Запрос.УстановитьПараметр("МассивАссортимента", МассивАссортимента);
						//Запрос.УстановитьПараметр("ВыгрузкаВсехТоваров", ВыгрузкаВсехТоваров);
						//
						//ТЗ = Запрос.Выполнить().Выгрузить();
						
						Запрос = Новый Запрос;
						Запрос.Текст = 
						"ВЫБРАТЬ
						|	ПродажиОбороты.Период КАК date,
						|	ПродажиОбороты.КоличествоОборот КАК quantity,
						|	ПродажиОбороты.СтоимостьОборот КАК sum,
						|	БПАГНоменклатура.Код КАК goodID,
						|	ПродажиОбороты.ДокументПродажи КАК ДокументПродажи,
						|	ПродажиОбороты.ДокументПродажи.Сделка КАК Сделка
						|ПОМЕСТИТЬ ТЗПродажи
						|ИЗ
						|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
						|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(
						|				&НачалоПериода,
						|				&КонецПериода,
						|				День,
						|				Номенклатура В
						|					(ВЫБРАТЬ
						|						БПАГНоменклатура.Номенклатура
						|					ИЗ
						|						Справочник.БПАГНоменклатура КАК БПАГНоменклатура
						|					ГДЕ
						|						НЕ БПАГНоменклатура.ПометкаУдаления
						|						И (&ВыгрузкаВсехТоваров
						|							ИЛИ БПАГНоменклатура.Ссылка В ИЕРАРХИИ (&МассивАссортимента)))) КАК ПродажиОбороты
						|		ПО БПАГНоменклатура.Номенклатура = ПродажиОбороты.Номенклатура
						|ГДЕ
						|	НЕ БПАГНоменклатура.ПометкаУдаления
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ
						|	ТЗПродажи.date,
						|	ТЗПродажи.quantity,
						|	ТЗПродажи.sum,
						|	ТЗПродажи.goodID,
						|	БПАГДокументыАгентовСрезПоследних.ТорговаяТочка.Код КАК posID
						|ИЗ
						|	ТЗПродажи КАК ТЗПродажи
						|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БПАГДокументыАгентов.СрезПоследних(
						|				,
						|				&ВыгрузкаВсехТТ
						|					ИЛИ ТорговаяТочка В ИЕРАРХИИ (&МассивКлиентурыТТ)) КАК БПАГДокументыАгентовСрезПоследних
						|		ПО (ТЗПродажи.ДокументПродажи = БПАГДокументыАгентовСрезПоследних.Документ
						|				ИЛИ ТЗПродажи.Сделка = БПАГДокументыАгентовСрезПоследних.Документ)";
						
						
						Запрос.УстановитьПараметр("НачалоПериода", НачальнаяДатаВыгрузкиИсторииПродаж);
						Запрос.УстановитьПараметр("КонецПериода", ТекущаяДата());
						Запрос.УстановитьПараметр("МассивКлиентурыТТ", МассивКлиентурыТТ);
						Запрос.УстановитьПараметр("ВыгрузкаВсехТТ", ВыгрузкаВсехТТ);
						Запрос.УстановитьПараметр("МассивАссортимента", МассивАссортимента);
						Запрос.УстановитьПараметр("ВыгрузкаВсехТоваров", ВыгрузкаВсехТоваров);
						
						ТЗ = Запрос.Выполнить().Выгрузить();						
						
					Иначе
						МассивКлиентурыКлиентов = ПолучитьМассивКлиентурыКлиентов(МассивАгентов);
						ВыгрузкаВсехКлиентов = МассивКлиентурыКлиентов.Количество() = 0;
						
						Запрос = Новый Запрос;
						Запрос.Текст = 
						"ВЫБРАТЬ
						|	ПродажиОбороты.Период КАК date,
						|	ПродажиОбороты.КоличествоОборот КАК quantity,
						|	ПродажиОбороты.СтоимостьОборот КАК sum,
						|	БПАГНоменклатура.Код КАК goodID,
						|	БПАГТорговыеТочки.Код КАК posID
						|ИЗ
						|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
						|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(
						|				&НачалоПериода,
						|				&КонецПериода,
						|				День,
						|				Номенклатура В
						|						(ВЫБРАТЬ
						|							БПАГНоменклатура.Номенклатура
						|						ИЗ
						|							Справочник.БПАГНоменклатура КАК БПАГНоменклатура
						|						ГДЕ
						|							НЕ БПАГНоменклатура.ПометкаУдаления
						|							И (&ВыгрузкаВсехТоваров
						|								ИЛИ БПАГНоменклатура.Ссылка В ИЕРАРХИИ (&МассивАссортимента)))
						|					И ДоговорКонтрагента.Владелец В
						|						(ВЫБРАТЬ
						|							БПАГКонтрагенты.Контрагент
						|						ИЗ
						|							Справочник.БПАГКонтрагенты КАК БПАГКонтрагенты
						|						ГДЕ
						|							НЕ БПАГКонтрагенты.ПометкаУдаления
						|							И (&ВыгрузкаВсехКлиентов
						|								ИЛИ БПАГКонтрагенты.Ссылка В ИЕРАРХИИ (&МассивКлиентурыКлиентов)))) КАК ПродажиОбороты
						|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГТорговыеТочки КАК БПАГТорговыеТочки
						|			ПО (БПАГТорговыеТочки.Владелец.Контрагент = ПродажиОбороты.ДоговорКонтрагента.Владелец)
						|				И (НЕ БПАГТорговыеТочки.НеИспользовать)
						|		ПО БПАГНоменклатура.Номенклатура = ПродажиОбороты.Номенклатура
						|ГДЕ
						|	НЕ БПАГНоменклатура.ПометкаУдаления
						|	И НЕ БПАГТорговыеТочки.ПометкаУдаления";
						
						Запрос.УстановитьПараметр("НачалоПериода", НачальнаяДатаВыгрузкиИсторииПродаж);
						Запрос.УстановитьПараметр("КонецПериода", ТекущаяДата());
						Запрос.УстановитьПараметр("МассивКлиентурыКлиентов", МассивКлиентурыКлиентов);
						Запрос.УстановитьПараметр("ВыгрузкаВсехКлиентов", ВыгрузкаВсехКлиентов);
						Запрос.УстановитьПараметр("МассивАссортимента", МассивАссортимента);
						Запрос.УстановитьПараметр("ВыгрузкаВсехТоваров", ВыгрузкаВсехТоваров);
						
						ТЗ = Запрос.Выполнить().Выгрузить();
					КонецЕсли;
						
				ИначеЕсли ВидПрикладногоРешения = "УТ11" Тогда
					
					Если НастройкаИзКэша("1СВыгружатьФактическиеПродажиВРазрезеТТ", тмпАгент.Агент) Тогда
						МассивКлиентурыТТ = ПолучитьМассивКлиентурыТТ(МассивАгентов);
						ВыгрузкаВсехТТ = МассивКлиентурыТТ.Количество() = 0;
						//NIY
						Возврат;
					Иначе
						МассивКлиентурыКлиентов = ПолучитьМассивКлиентурыКлиентов(МассивАгентов);
						ВыгрузкаВсехКлиентов = МассивКлиентурыКлиентов.Количество() = 0;
						
						Запрос = Новый Запрос;
						Запрос.Текст = 
						"ВЫБРАТЬ
						|	ВыручкаИСебестоимостьПродажОбороты.Период КАК date,
						|	ВыручкаИСебестоимостьПродажОбороты.КоличествоОборот КАК quantity,
						|	ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот КАК sum,
						|	БПАГНоменклатура.Код КАК goodID,
						|	БПАГТорговыеТочки.Код КАК posID
						|ИЗ
						|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
						|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
						|				&НачалоПериода,
						|				&КонецПериода,
						|				День,
						|				АналитикаУчетаНоменклатуры.Номенклатура В
						|						(ВЫБРАТЬ
						|							БПАГНоменклатура.Номенклатура
						|						ИЗ
						|							Справочник.БПАГНоменклатура КАК БПАГНоменклатура
						|						ГДЕ
						|							НЕ БПАГНоменклатура.ПометкаУдаления
						|							И (&ВыгрузкаВсехТоваров
						|								ИЛИ БПАГНоменклатура.Ссылка В ИЕРАРХИИ (&МассивАссортимента)))
						|					И АналитикаУчетаПоПартнерам.Партнер В
						|						(ВЫБРАТЬ
						|							БПАГКонтрагенты.Партнер
						|						ИЗ
						|							Справочник.БПАГКонтрагенты КАК БПАГКонтрагенты
						|						ГДЕ
						|							НЕ БПАГКонтрагенты.ПометкаУдаления
						|							И (&ВыгрузкаВсехКлиентов
						|								ИЛИ БПАГКонтрагенты.Ссылка В ИЕРАРХИИ (&МассивКлиентурыКлиентов)))) КАК ВыручкаИСебестоимостьПродажОбороты
						|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГТорговыеТочки КАК БПАГТорговыеТочки
						|			ПО (БПАГТорговыеТочки.Владелец.Партнер = ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаПоПартнерам.Партнер)
						|				И (НЕ БПАГТорговыеТочки.НеИспользовать)
						|		ПО БПАГНоменклатура.Номенклатура = ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.Номенклатура
						|ГДЕ
						|	НЕ БПАГНоменклатура.ПометкаУдаления
						|	И НЕ БПАГТорговыеТочки.ПометкаУдаления";
						
						Запрос.УстановитьПараметр("НачалоПериода", НачальнаяДатаВыгрузкиИсторииПродаж);
						Запрос.УстановитьПараметр("КонецПериода", ТекущаяДата());
						Запрос.УстановитьПараметр("МассивКлиентурыКлиентов", МассивКлиентурыКлиентов);
						Запрос.УстановитьПараметр("ВыгрузкаВсехКлиентов", ВыгрузкаВсехКлиентов);
						Запрос.УстановитьПараметр("МассивАссортимента", МассивАссортимента);
						Запрос.УстановитьПараметр("ВыгрузкаВсехТоваров", ВыгрузкаВсехТоваров);
						
						ТЗ = Запрос.Выполнить().Выгрузить();
						
					КонецЕсли;
					
					
				ИначеЕсли СпецификаПользователя = "SD" Тогда
					МассивКлиентурыКлиентов = ПолучитьМассивКлиентурыКлиентов(МассивАгентов);
					ВыгрузкаВсехКлиентов = МассивКлиентурыКлиентов.Количество() = 0;
						
						Запрос = Новый Запрос;
						Запрос.Текст = 
						"ВЫБРАТЬ
						|	ПродажиОбороты.Период КАК date,
						|	ПродажиОбороты.КоличествоОборот КАК quantity,
						|	ПродажиОбороты.ПродСтоимостьОборот КАК sum,
						|	БПАГНоменклатура.Код КАК goodID,
						|	Контрагенты.Код КАК posID
						|ИЗ
						|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
						|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(
						|				&НачалоПериода,
						|				&КонецПериода,
						|				День,
						|				Номенклатура В
						|						(ВЫБРАТЬ
						|							БПАГНоменклатура.Номенклатура
						|						ИЗ
						|							Справочник.БПАГНоменклатура КАК БПАГНоменклатура
						|						ГДЕ
						|							НЕ БПАГНоменклатура.ПометкаУдаления
						|							И (&ВыгрузкаВсехТоваров
						|								ИЛИ БПАГНоменклатура.Ссылка В ИЕРАРХИИ (&МассивАссортимента)))
						|					И Контрагент В
						|						(ВЫБРАТЬ
						|							Контрагенты.Ссылка КАК Контрагент
						|						ИЗ
						|							Справочник.Контрагенты КАК Контрагенты
						|						ГДЕ
						|							НЕ Контрагенты.ПометкаУдаления
						|							И (&ВыгрузкаВсехКлиентов
						|								ИЛИ Контрагенты.Ссылка В ИЕРАРХИИ (&МассивКлиентурыКлиентов)))) КАК ПродажиОбороты
						|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
						|			ПО ПродажиОбороты.Контрагент = Контрагенты.Ссылка
						|		ПО БПАГНоменклатура.Номенклатура = ПродажиОбороты.Номенклатура
						|ГДЕ
						|	НЕ БПАГНоменклатура.ПометкаУдаления
						|	И НЕ Контрагенты.ПометкаУдаления
						|	И ПродажиОбороты.Менеджер = &Менеджер";
						
						Запрос.УстановитьПараметр("НачалоПериода", НачальнаяДатаВыгрузкиИсторииПродаж);
						Запрос.УстановитьПараметр("КонецПериода", ТекущаяДата());
						Запрос.УстановитьПараметр("Менеджер", тмпАгент.Агент.Менеджер);
						Запрос.УстановитьПараметр("МассивКлиентурыКлиентов", МассивКлиентурыКлиентов);
						Запрос.УстановитьПараметр("ВыгрузкаВсехКлиентов", ВыгрузкаВсехКлиентов);
						Запрос.УстановитьПараметр("МассивАссортимента", МассивАссортимента);
						Запрос.УстановитьПараметр("ВыгрузкаВсехТоваров", ВыгрузкаВсехТоваров);
						
						ТЗ = Запрос.Выполнить().Выгрузить();
						
				ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
					//NIY
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;				
			
		Иначе
			ТЗ = Новый ТаблицаЗначений();
			ТЗ.Колонки.Добавить("goodID");
			ТЗ.Колонки.Добавить("posID");
		КонецЕсли;
		
		тмпТЗАгенты = СоздатьТаблицуИзОдногоАгента(тмпАгент);
		КлючПоиска = "КлиентураИАссортимент%-%" + СокрЛП(тмпАгент.Агент.Клиентура.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Клиентура) + "%-%" + СокрЛП(тмпАгент.Агент.Ассортимент.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Ассортимент);
		СформироватьPlist(ТЗ, "goodID", тмпТЗАгенты, "actualSalesHistory", "истории продаж", Ложь, Истина, , "posID", КлючПоиска);
		
	КонецЦикла;
	
КонецПроцедуры

#Область ВыгрузитьПрогнозПродаж

Процедура ВыгрузитьПрогнозПродаж(Агенты)
	
	ТекДата = НачалоДня(ТекущаяДата());
	
	Для Каждого тмпАгент Из Агенты Цикл
		МассивАгентов = Новый Массив();
		МассивАгентов.Добавить(тмпАгент.Агент);
		МассивАссортимента = ПолучитьМассивАссортимента(МассивАгентов);
		ВыгрузкаВсехТоваров = МассивАссортимента.Количество() = 0;
		
		тмпТЗАгенты = СоздатьТаблицуИзОдногоАгента(тмпАгент);
		
		//Выгрузка Прогноза продаж из 1С
		
		МассивКлиентурыКлиентов = ПолучитьМассивКлиентурыКлиентов(МассивАгентов);
		ВыгрузкаВсехКлиентов = МассивКлиентурыКлиентов.Количество() = 0;
		
		запрос = Новый Запрос;
		
		#Область ТекстЗапроса
		
		запрос.Текст = 
		"ВЫБРАТЬ
		|	ПродажиОбороты.КоличествоОборот КАК Количество,
		|	Контрагенты.Ссылка КАК Контрагент,
		|	БПАГНоменклатура.Ссылка КАК Товар,
		|	ПродажиОбороты.Менеджер
		|ИЗ
		|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(
		|				&НачалоПериода,
		|				&КонецПериода,
		|				Период,
		|				Номенклатура В
		|						(ВЫБРАТЬ
		|							БПАГНоменклатура.Номенклатура
		|						ИЗ
		|							Справочник.БПАГНоменклатура КАК БПАГНоменклатура
		|						ГДЕ
		|							НЕ БПАГНоменклатура.ПометкаУдаления
		|							И (&ВыгрузкаВсехТоваров
		|								ИЛИ БПАГНоменклатура.Ссылка В ИЕРАРХИИ (&МассивАссортимента)))
		|					И Контрагент В
		|						(ВЫБРАТЬ
		|							Контрагенты.Ссылка КАК Контрагент
		|						ИЗ
		|							Справочник.Контрагенты КАК Контрагенты
		|						ГДЕ
		|							НЕ Контрагенты.ПометкаУдаления
		|							И (&ВыгрузкаВсехКлиентов
		|								ИЛИ Контрагенты.Ссылка В ИЕРАРХИИ (&МассивКлиентурыКлиентов)))) КАК ПродажиОбороты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|			ПО ПродажиОбороты.Контрагент = Контрагенты.Ссылка
		|		ПО БПАГНоменклатура.Номенклатура = ПродажиОбороты.Номенклатура
		|ГДЕ
		|	НЕ БПАГНоменклатура.ПометкаУдаления
		|	И НЕ Контрагенты.ПометкаУдаления
		|	И ПродажиОбороты.Менеджер = &Менеджер";
		
		#КонецОбласти
		
		запрос.УстановитьПараметр("НачалоПериода", ТекущаяДата() - 3 * 24 * 60 * 60);
		запрос.УстановитьПараметр("КонецПериода", ТекущаяДата());
		запрос.УстановитьПараметр("Менеджер", тмпАгент.Агент.Менеджер);
		запрос.УстановитьПараметр("МассивКлиентурыКлиентов", МассивКлиентурыКлиентов);
		запрос.УстановитьПараметр("ВыгрузкаВсехКлиентов", ВыгрузкаВсехКлиентов);
		запрос.УстановитьПараметр("МассивАссортимента", МассивАссортимента);
		запрос.УстановитьПараметр("ВыгрузкаВсехТоваров", ВыгрузкаВсехТоваров);
		
		набор = РегистрыСведений.БПАГПрогнозПродаж.СоздатьНаборЗаписей();
		набор.Загрузить(запрос.Выполнить().Выгрузить());
		набор.Записать();
		
		#Область ТекстЗапроса
		
		запрос.Текст = 
		"ВЫБРАТЬ
		|	БПАГПрогнозПродаж.Товар.Код КАК goodID,
		|	БПАГПрогнозПродаж.Контрагент.Код КАК posID,
		|	БПАГПрогнозПродаж.Количество КАК quantity
		|ИЗ
		|	РегистрСведений.БПАГПрогнозПродаж КАК БПАГПрогнозПродаж
		|ГДЕ
		|	БПАГПрогнозПродаж.Менеджер = &Менеджер";
		
		#КонецОбласти
		
		
		запрос.УстановитьПараметр("Менеджер", тмпАгент.Агент.Менеджер);
		
		результат = Запрос.Выполнить().Выгрузить();
		
		//Если Результат.Количество() > 0 Тогда	
		КлючПоиска = "КлиентураИАссортимент%-%" + СокрЛП(тмпАгент.Агент.Клиентура.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Клиентура) + "%-%" + СокрЛП(тмпАгент.Агент.Ассортимент.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Ассортимент);
		СформироватьPlist(результат, "goodID", тмпТЗАгенты, "salesForecast", "прогнозов продаж", Ложь, Истина, , , КлючПоиска);
		//КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	// ВыгрузитьПрогнозПродаж()

#КонецОбласти

Процедура ВыгрузитьСклады(Агенты)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БПАГСклады.Код КАК uniqueID,
	|	БПАГСклады.Наименование КАК name
	|ИЗ
	|	Справочник.БПАГСклады КАК БПАГСклады
	|ГДЕ
	|	НЕ БПАГСклады.ПометкаУдаления";
	
	СформироватьPlist(Запрос.Выполнить().Выгрузить(), "uniqueID", Агенты, "depots", "складов", Истина);	
	
КонецПроцедуры

Процедура ВыгрузитьОрганизации(Агенты)
	
	ВидПрикладногоРешения = БПАГ.ПолучитьВидПрикладногоРешения();
	
	Путь = КаталогОбмена + "Images\";
	
	Запрос = Новый Запрос();
	
	Если ВидПрикладногоРешения = "УТ10" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БПАГОрганизации.Код КАК uniqueID,
		|	БПАГОрганизации.Наименование КАК name,
		|	БПАГОрганизации.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА БПАГОрганизации.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
		|			ТОГДА 18
		|		ИНАЧЕ ВЫБОР
		|				КОГДА БПАГОрганизации.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
		|					ТОГДА 10
		|				ИНАЧЕ ВЫБОР
		|						КОГДА БПАГОрганизации.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
		|							ТОГДА 0
		|						ИНАЧЕ -1
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК VATRate
		|ИЗ
		|	Справочник.БПАГОрганизации КАК БПАГОрганизации
		|ГДЕ
		|	НЕ БПАГОрганизации.ПометкаУдаления";
		
	ИначеЕсли ВидПрикладногоРешения = "УТ11" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БПАГОрганизации.Код КАК uniqueID,
		|	БПАГОрганизации.Наименование КАК name,
		|	"""" КАК email,
		|	БПАГОрганизации.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА БПАГОрганизации.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
		|			ТОГДА 18
		|		ИНАЧЕ ВЫБОР
		|				КОГДА БПАГОрганизации.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
		|					ТОГДА 10
		|				ИНАЧЕ ВЫБОР
		|						КОГДА БПАГОрганизации.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
		|							ТОГДА 0
		|						ИНАЧЕ -1
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК VATRate
		|ИЗ
		|	Справочник.БПАГОрганизации КАК БПАГОрганизации
		|ГДЕ
		|	НЕ БПАГОрганизации.ПометкаУдаления";
		
	ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БПАГОрганизации.Код КАК uniqueID,
		|	БПАГОрганизации.Наименование КАК name,
		|	БПАГОрганизации.Организация КАК Организация,
		|	//ЕСТЬNULL(БПАГОрганизации.СтавкаНДС.Ставка, -1) КАК VATRate
		|	-1 КАК VATRate
		|ИЗ
		|	Справочник.БПАГОрганизации КАК БПАГОрганизации
		|ГДЕ
		|	НЕ БПАГОрганизации.ПометкаУдаления";
		
	КонецЕсли;
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Если НастройкаИзКэша("1СВыгружатьСведенияОрганизаций") Тогда	
		ТЗ.Колонки.Добавить("fullName");
		ТЗ.Колонки.Добавить("legalAddress");
		ТЗ.Колонки.Добавить("factAddress");
		ТЗ.Колонки.Добавить("INN");
		ТЗ.Колонки.Добавить("KPP");
		ТЗ.Колонки.Добавить("bank");
		ТЗ.Колонки.Добавить("bankBIC");
		ТЗ.Колонки.Добавить("bankAccount");
		ТЗ.Колонки.Добавить("bankCorAccount");
		ТЗ.Колонки.Добавить("registrationCertificate");
		ТЗ.Колонки.Добавить("legalPhone");
		ТЗ.Колонки.Добавить("director");
		ТЗ.Колонки.Добавить("seniorAccountant");
		
		Для Каждого тмпСтрока Из ТЗ Цикл
			
			Сведения = Неопределено;
			Руководители = Неопределено;
			Если ВидПрикладногоРешения = "УТ10" Тогда
				
				Выполнить("Сведения = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(тмпСтрока.Организация, ТекущаяДата());");
				Попытка
					Выполнить("Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(тмпСтрока.Организация, ТекущаяДата(),);");
					тмпСтрока.director = Руководители.Руководитель;
					тмпСтрока.seniorAccountant = Руководители.ГлавныйБухгалтер;
				Исключение
				КонецПопытки;
				
			ИначеЕсли ВидПрикладногоРешения = "УТ11" Тогда
				
				ОсновнойБанковскийСчет = Неопределено;
				
				Запрос = Новый Запрос("
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	БанковскиеСчетаОрганизаций.Ссылка КАК ОсновнойБанковскийСчет
				|ИЗ
				|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
				|ГДЕ
				|	Не БанковскиеСчетаОрганизаций.ПометкаУдаления
				|	И (БанковскиеСчетаОрганизаций.Владелец = &Организация
				|		ИЛИ &Организация = Неопределено)
				|	И (БанковскиеСчетаОрганизаций.ВалютаДенежныхСредств = &Валюта
				|		ИЛИ &Валюта = Неопределено)
				|");
				
				Запрос.УстановитьПараметр("Организация", тмпСтрока.Организация);
				Запрос.УстановитьПараметр("Валюта", мВалютаРегламентированногоУчета);
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					ОсновнойБанковскийСчет = Выборка.ОсновнойБанковскийСчет;
				КонецЕсли;
				
				Выполнить("Сведения = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(тмпСтрока.Организация, ТекущаяДата(), , ОсновнойБанковскийСчет);");
				Попытка
					Выполнить("Руководители = УчетНДСПереопределяемый.ОтветственныеЛицаОрганизации(тмпСтрока.Организация, ТекущаяДата());");
					тмпСтрока.director = Руководители.Руководитель;
					тмпСтрока.seniorAccountant = Руководители.ГлавныйБухгалтер;
				Исключение
				КонецПопытки;
				
			ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
				
				Выполнить("Сведения = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(,тмпСтрока.Организация, ТекущаяДата());");
				Попытка
					Выполнить("Руководители = УправлениеНебольшойФирмойСервер.ОтветственныеЛицаОрганизационнойЕдиницы(тмпСтрока.Организация, ТекущаяДата());");
					тмпСтрока.director = Руководители.ФИОРуководителя;
					тмпСтрока.seniorAccountant = Руководители.ФИОГлавногоБухгалтера;
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
			тмпСтрока.fullName = Сведения.ПолноеНаименование;
			тмпСтрока.legalAddress = Сведения.ЮридическийАдрес;
			тмпСтрока.factAddress = Сведения.ФактическийАдрес;
			тмпСтрока.INN = Сведения.ИНН;
			тмпСтрока.KPP = Сведения.КПП;
			тмпСтрока.bank = Сведения.Банк;
			тмпСтрока.bankBIC = Сведения.БИК;
			тмпСтрока.bankAccount = Сведения.НомерСчета;
			тмпСтрока.bankCorAccount = Сведения.КоррСчет;
			тмпСтрока.legalPhone = Сведения.Телефоны;
			Попытка
				тмпСтрока.registrationCertificate = Сведения.Свидетельство;
			Исключение
			КонецПопытки;
			
		КонецЦикла;
	КонецЕсли;
	
	ТЗ.Колонки.Удалить("Организация");
	
	СформироватьPlist(ТЗ, "uniqueID", Агенты, "companies", "организаций", Истина);
	
	//Картинки организаций
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БПАГОрганизацииКартинки.Ссылка.Код КАК companyID,
	|	БПАГОрганизацииКартинки.Имя КАК fileName,
	|	БПАГОрганизацииКартинки.НомерСтроки КАК sort
	|ИЗ
	|	Справочник.БПАГОрганизации.Картинки КАК БПАГОрганизацииКартинки
	|ГДЕ
	|	НЕ БПАГОрганизацииКартинки.Ссылка.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	companyID,
	|	sort";
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	ТЗ.Колонки.Добавить("fileSize");
	Для Каждого тмпСтрока Из ТЗ Цикл
		Файл = Новый Файл(Путь + тмпСтрока.fileName);
		Если Файл.Существует() Тогда
			НоваяСтрока = ТЗКартинки.Добавить();
			НоваяСтрока.Имя = тмпСтрока.fileName;
			НоваяСтрока.Размер = Файл.Размер();
			тмпСтрока.fileSize = НоваяСтрока.Размер;
		КонецЕсли;
	КонецЦикла;
	
	СформироватьPlist(ТЗ, "companyID", Агенты, "companyPictures", "картинок организаций", Истина, Истина, Ложь);
	
КонецПроцедуры

Процедура ВыгрузитьЗаявки(Агенты)
	
	НастройкиДокумента = ПолучитьНастройкиДокумента(Перечисления.БПАГВидыДокументов.Заявка, ТекущаяДата());
	Если (НЕ НастройкиДокумента.ОбратнаяВыгрузкаИз1С) ИЛИ (НастройкиДокумента.ПериодОбратнойВыгрузки <= 0) Тогда
		Возврат;
	КонецЕсли;
	
	//Таблица значений категорий и свойств документа реализации
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БПАГКатегорииДокументов.Категория.Код КАК Код,
	|	БПАГКатегорииДокументов.Тип КАК Тип,
	|	БПАГКатегорииДокументов.Категория КАК Категория
	|ИЗ
	|	РегистрСведений.БПАГКатегорииДокументов КАК БПАГКатегорииДокументов
	|ГДЕ
	|	БПАГКатегорииДокументов.ВидДокумента = &ВидДокумента";
	
	Запрос.УстановитьПараметр("ВидДокумента", Перечисления.БПАГВидыДокументов.Заявка);
	ТЗКатегории = Запрос.Выполнить().Выгрузить();
	ТЗКатегории.Колонки.Добавить("propertyTypeID");
	ТЗКатегории.Колонки.Добавить("type");
	ТЗКатегории.Колонки.Добавить("uniqueID");
	ТЗКатегории.Колонки.Добавить("value");
	Для Каждого тмпСтрока Из ТЗКатегории Цикл
		Если ТипЗнч(тмпСтрока.Категория) = Тип("СправочникСсылка.КатегорииОбъектов") Тогда
			тмпСтрока.propertyTypeID = "К" + "ORD" + тмпСтрока.Код;
			тмпСтрока.type = "boolean";
			тмпСтрока.value = 0;
			тмпСтрока.uniqueID = "К" + "ORD" + тмпСтрока.Код;
		Иначе
			тмпСтрока.propertyTypeID = "S" + "ORD" + тмпСтрока.Код;
			тмпСтрока.uniqueID = "S" + "ORD" + тмпСтрока.Код;
		КонецЕсли;
	КонецЦикла;	
	ТЗКатегории.Колонки.Удалить("Код");
	ТЗКатегории.Колонки.Удалить("Тип");
	ТЗКатегории.Колонки.Удалить("Категория");
	
	
	Для Каждого тмпАгент Из Агенты Цикл
		
		//БПАГСклад = НастройкаИзКэша("defaultMobileDepotID", тмпАгент.Агент);
		//Если (БПАГСклад = Неопределено) ИЛИ (БПАГСклад.Пустая()) Тогда
		//	Продолжить;
		//КонецЕсли;
		//Склад = БПАГСклад.Склад;
		
		СписокФайловВыгрузки = Новый СписокЗначений;
		СписокФайловВыгрузки.Добавить("orders");
		КлючПоиска = "Заявки%-%" + СокрЛП(тмпАгент.Агент.Клиентура.Код);
		Если ПолучитьГотовыеФайлыВыгрузкиИзКэша(тмпАгент.Агент, КлючПоиска, СписокФайловВыгрузки) Тогда
			//Файлы возьмем из кэша
			
		Иначе			
	
			МассивАгентов = Новый Массив();
			МассивАгентов.Добавить(тмпАгент.Агент);
			
			
			МассивКлиентуры = ПолучитьМассивКлиентурыКлиентов(МассивАгентов);
			//Если клиентуры нет или она пустая, то выгружаем всех контрагентов
			ВыгрузкаВсейКлиентуры = МассивКлиентуры.Количество() = 0;
			
			ГлубинаВыгрузки = НастройкиДокумента.ПериодОбратнойВыгрузки;
			НачальнаяДатаВыгрузки = НачалоДня(ТекущаяДата() - ГлубинаВыгрузки * 24 * 60 * 60);
			
			Если ВидПрикладногоРешения = "УТ11" Тогда
				//NIY
				Возврат;
				
			ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
				//NIY
				Возврат;
				
			Иначе //УТ10
				
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	БПАГДокументыАгентовСрезПоследних.ИД КАК uniqueID,
				|	БПАГДокументыАгентовСрезПоследних.ТорговаяТочка.Код КАК posID,
				|	ЗаказПокупателя.Номер КАК number,
				|	ЗаказПокупателя.Дата КАК date,
				|	ЗаказПокупателя.ДоговорКонтрагента.Код КАК analyticsID,
				|	БПАГКонтрагенты.Код КАК clientID,
				|	БПАГОрганизации.Код КАК companyID,
				|	БПАГСклады.Код КАК depotID,
				|	БПАГПрайсы.Код КАК priceTypeID,
				|	ВЫБОР
				|		КОГДА ЗаказПокупателя.Проведен
				|			ТОГДА ""1""
				|		ИНАЧЕ ""1""
				|	КОНЕЦ КАК status,
				|	ЗаказПокупателя.СуммаДокумента КАК sum,
				|	ЗаказПокупателя.Ссылка КАК ДокументЗаявка,
				|	ЗаказПокупателя.Товары.(
				|		ЕдиницаИзмерения.Наименование КАК unit,
				|		Количество КАК quantity,
				|		Коэффициент КАК coeff,
				|		Номенклатура,
				|		Сумма КАК sum,
				|		Цена КАК price
				|	) КАК rows
				|ИЗ
				|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГОрганизации КАК БПАГОрганизации
				|		ПО ЗаказПокупателя.Организация = БПАГОрганизации.Организация
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГСклады КАК БПАГСклады
				|		ПО ЗаказПокупателя.СкладГруппа = БПАГСклады.Склад
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГКонтрагенты КАК БПАГКонтрагенты
				|		ПО ЗаказПокупателя.Контрагент = БПАГКонтрагенты.Контрагент
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БПАГДокументыАгентов.СрезПоследних(
				|				,
				|				Период МЕЖДУ &НачалоПериода И &КонецПериода
				|					И ВидДокумента В (&ВидДокументаЗаявка)
				|					И НЕ Документ.ПометкаУдаления) КАК БПАГДокументыАгентовСрезПоследних
				|		ПО ЗаказПокупателя.Ссылка = БПАГДокументыАгентовСрезПоследних.Документ
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БПАГПрайсы КАК БПАГПрайсы
				|		ПО ЗаказПокупателя.ТипЦен = БПАГПрайсы.ТипЦен
				|ГДЕ
				|	ЗаказПокупателя.Дата МЕЖДУ &НачалоПериода И &КонецПериода
				|	И ЗаказПокупателя.Проведен
				|	И (&ВыгрузкаВсейКлиентуры				
				|	ИЛИ БПАГКонтрагенты.Ссылка В ИЕРАРХИИ(&МассивКлиентуры))";
				
				Запрос.УстановитьПараметр("МассивКлиентуры", МассивКлиентуры);
				Запрос.УстановитьПараметр("ВыгрузкаВсейКлиентуры", ВыгрузкаВсейКлиентуры);
				
				Запрос.УстановитьПараметр("НачалоПериода", НачальнаяДатаВыгрузки);
				Запрос.УстановитьПараметр("КонецПериода", КонецДня(ТекущаяДата()));
				
				ВидДокументаЗаявка = Новый Массив;
				ВидДокументаЗаявка.Добавить(Перечисления.БПАГВидыДокументов.Заявка);
				Запрос.УстановитьПараметр("ВидДокументаЗаявка", ВидДокументаЗаявка);
				
				ТЗ = Запрос.Выполнить().Выгрузить();
				ТЗ.Колонки.Добавить("properties");
				
				Для Каждого тмпСтрока Из ТЗ Цикл
					ДокументСозданВ1С = Ложь;
					ТабЧасть = тмпСтрока.rows;
					ТабЧасть.Колонки.Добавить("goodID");
					КолВоСтрок = ТабЧасть.Количество();
					Для i = 1 По КолВоСтрок Цикл
						БПАГНоменклатура = Справочники.БПАГНоменклатура.НайтиПоРеквизиту("Номенклатура", ТабЧасть[КолВоСтрок - i].Номенклатура);
						Если БПАГНоменклатура.Пустая() Тогда
							ТабЧасть.Удалить(КолВоСтрок - i);
						Иначе
							ТабЧасть[КолВоСтрок - i].goodID = БПАГНоменклатура.Код;
						КонецЕсли;
					КонецЦикла;
					ТабЧасть.Колонки.Удалить("Номенклатура");
					//Добавить уникальный идентификатор, если документ создан не на устройстве.
					Если тмпСтрока.uniqueID = NULL Тогда
						тмпСтрока.uniqueID = тмпСтрока.ДокументЗаявка.УникальныйИдентификатор();
						ДокументСозданВ1С = Истина;
					КонецЕсли;
					//тмпСтрока.properties = ТЗКатегории;
					тмпСтрока.properties = ПолучитьСвойстваКатегорииДокумента(тмпСтрока.ДокументЗаявка);
					//Добавить ТТ для документов которые созданы не на устройстве.	
					Если тмпСтрока.posID = NULL Тогда
						//Выбрать первую ТТ из справочника БПАГТорговыеТочки
						ТекущийКонтрагент = Справочники.БПАГКонтрагенты.НайтиПоКоду(тмпСтрока.clientID);
						Выборка = Справочники.БПАГТорговыеТочки.Выбрать( , ТекущийКонтрагент); 
						Пока Выборка.Следующий() Цикл 
							Если НЕ Выборка.ПометкаУдаления Тогда
								ОчереднойПодчиненый = Выборка.Ссылка; 
								тмпСтрока.posID = ОчереднойПодчиненый.Код;
								ТекущаяТТ = ОчереднойПодчиненый.Ссылка;
								Прервать;
							КонецЕсли;
						КонецЦикла; 
					КонецЕсли;
					//Запишем данные в служебный регистр
					Если ДокументСозданВ1С Тогда
						НоваяЗаписьДокументыАгентов = РегистрыСведений.БПАГДокументыАгентов.СоздатьМенеджерЗаписи();
						НоваяЗаписьДокументыАгентов.ВидДокумента = Перечисления.БПАГВидыДокументов.Заявка;
						
						НоваяЗаписьДокументыАгентов.Период = ТекущаяДата();
						НоваяЗаписьДокументыАгентов.Агент = тмпАгент.Агент;
						НоваяЗаписьДокументыАгентов.Документ = тмпСтрока.ДокументЗаявка.Ссылка;
						НоваяЗаписьДокументыАгентов.ТорговаяТочка = ТекущаяТТ;
						НоваяЗаписьДокументыАгентов.ДатаСозданияНаУстройстве = ТекущаяДата();
						НоваяЗаписьДокументыАгентов.ДатаИзмененияНаУстройстве = ТекущаяДата();
						
						НоваяЗаписьДокументыАгентов.ИД = тмпСтрока.uniqueID;
						НоваяЗаписьДокументыАгентов.НомерДокументаНаУстройстве = тмпСтрока.number;
						//НоваяЗаписьДокументыАгентов.ШиротаСоздания = Число(тмпДокумент.createdLatitude);
						//НоваяЗаписьДокументыАгентов.ДолготаСоздания = Число(тмпДокумент.createdLongitude);
						//НоваяЗаписьДокументыАгентов.ШиротаИзменения = Число(тмпДокумент.modifiedLatitude);
						//НоваяЗаписьДокументыАгентов.ДолготаИзменения = Число(тмпДокумент.modifiedLongitude);
						//НоваяЗаписьДокументыАгентов.МоментСозданияПоGPS = ?(тмпДокумент.createdLocationDate = "", 0, Дата(тмпДокумент.createdLocationDate));
						//НоваяЗаписьДокументыАгентов.МоментИзмененияПоGPS = ?(тмпДокумент.modifiedLocationDate = "", 0, Дата(тмпДокумент.modifiedLocationDate));
						НоваяЗаписьДокументыАгентов.Записать();
					КонецЕсли;
				КонецЦикла;
				ТЗ.Колонки.Удалить("ДокументЗаявка");
				
			КонецЕсли;
			
		КонецЕсли;				
		
		тмпТЗАгенты = СоздатьТаблицуИзОдногоАгента(тмпАгент);
		КлючПоиска = "Заявки%-%" + СокрЛП(тмпАгент.Агент.Клиентура.Код);
		СформироватьPlist(ТЗ, "uniqueID", тмпТЗАгенты, "orders", "заявок", Ложь, Ложь, , , КлючПоиска);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьРеализации(Агенты)
	
	////Таблица значений категорий и свойств документа реализации
	//Запрос = Новый Запрос;
	//УникКатегории = ?(ВидПрикладногоРешения = "УТ10" ,"Код", "Наименование");
	//
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	БПАГКатегорииДокументов.Категория." + УникКатегории + " КАК Код,
	//|	БПАГКатегорииДокументов.Тип КАК Тип,
	//|	БПАГКатегорииДокументов.Категория КАК Категория
	//|ИЗ
	//|	РегистрСведений.БПАГКатегорииДокументов КАК БПАГКатегорииДокументов
	//|ГДЕ
	//|	БПАГКатегорииДокументов.ВидДокумента = &ВидДокументаРеализация";
	//
	//Запрос.УстановитьПараметр("ВидДокументаРеализация", Перечисления.БПАГВидыДокументов.Реализация);
	//ТЗКатегории = Запрос.Выполнить().Выгрузить();
	//ТЗКатегории.Колонки.Добавить("propertyTypeID");
	//ТЗКатегории.Колонки.Добавить("type");
	//ТЗКатегории.Колонки.Добавить("uniqueID");
	//ТЗКатегории.Колонки.Добавить("value");
	//Для Каждого тмпСтрока Из ТЗКатегории Цикл
	//	
	//	ЭтоКатегория = Ложь;
	//	Попытка
	//		ЭтоКатегория = ТипЗнч(тмпСтрока.Категория) = Тип("СправочникСсылка.КатегорииОбъектов");
	//	Исключение
	//	КонецПопытки;
	//	
	//	Если ЭтоКатегория Тогда
	//		тмпСтрока.propertyTypeID = "К" + "SAL" + тмпСтрока.Код;
	//		тмпСтрока.type = "boolean";
	//		тмпСтрока.value = 0;
	//		тмпСтрока.uniqueID = "К" + "SAL" + тмпСтрока.Код;
	//	Иначе
	//		тмпСтрока.propertyTypeID = "S" + "SAL" + тмпСтрока.Код;
	//		//тмпСтрока.type = "string";
	//		//тмпСтрока.value = "";
	//		тмпСтрока.uniqueID = "S" + "SAL" + тмпСтрока.Код;
	//	КонецЕсли;
	//КонецЦикла;	
	//ТЗКатегории.Колонки.Удалить("Код");
	//ТЗКатегории.Колонки.Удалить("Тип");
	//ТЗКатегории.Колонки.Удалить("Категория");
	
	Для Каждого тмпАгент Из Агенты Цикл
		
		НастройкиДокументаРеализация = ПолучитьНастройкиДокумента(Перечисления.БПАГВидыДокументов.Реализация, ТекущаяДата(), тмпАгент.Агент);
		НастройкиДокументаРеализацияПоЗаявке = ПолучитьНастройкиДокумента(Перечисления.БПАГВидыДокументов.РеализацияПоЗаявке, ТекущаяДата(), тмпАгент.Агент);
		
		ОбратнаяВыгрузкаИз1С = НастройкиДокументаРеализация.ОбратнаяВыгрузкаИз1С ИЛИ НастройкиДокументаРеализацияПоЗаявке.ОбратнаяВыгрузкаИз1С;
		ПериодОбратнойВыгрузки = Макс(НастройкиДокументаРеализация.ПериодОбратнойВыгрузки, НастройкиДокументаРеализацияПоЗаявке.ПериодОбратнойВыгрузки);
		
		Если (НЕ ОбратнаяВыгрузкаИз1С) ИЛИ (ПериодОбратнойВыгрузки <= 0) Тогда
			Возврат;
		КонецЕсли;
		
		СписокФайловВыгрузки = Новый СписокЗначений;
		СписокФайловВыгрузки.Добавить("sales");
		КлючПоиска = "Реализации%-%" + СокрЛП(тмпАгент.Агент.Клиентура.Код);
		Если ПолучитьГотовыеФайлыВыгрузкиИзКэша(тмпАгент.Агент, КлючПоиска, СписокФайловВыгрузки) Тогда
			//Файлы возьмем из кэша
			
		Иначе			
	
			МассивАгентов = Новый Массив();
			МассивАгентов.Добавить(тмпАгент.Агент);
			
			//МассивТТ = ПолучитьМассивКлиентурыТТ(МассивАгентов);
			////Если клиентуры нет или она пустая, то выгружаем всех контрагентов
			//ВыгрузкаВсехТТ = МассивТТ.Количество() = 0;
			МассивКлиентуры = ПолучитьМассивКлиентурыКлиентов(МассивАгентов);
			//Если клиентуры нет или она пустая, то выгружаем всех контрагентов
			ВыгрузкаВсейКлиентуры = МассивКлиентуры.Количество() = 0;
			
			ГлубинаВыгрузки = ПериодОбратнойВыгрузки;
			НачальнаяДатаВыгрузки = НачалоДня(ТекущаяДата() - ГлубинаВыгрузки * 24 * 60 * 60);
			
			Если ВидПрикладногоРешения = "УТ11" Тогда
				
				СтатусВыгрузки = ?(СпецификаПользователя = "KF" ,"12", "15");
				Запрос = Новый Запрос;
				Запрос.Текст = 
				//Статус "15"
				"ВЫБРАТЬ
				|	БПАГДокументыАгентовСрезПоследних.ИД КАК uniqueID,
				|	БПАГДокументыАгентовСрезПоследних.ТорговаяТочка.Код КАК posID,
				|	РеализацияТоваровУслуг.Номер КАК number,
				|	РеализацияТоваровУслуг.Дата КАК date,
				|	РеализацияТоваровУслуг.Соглашение.Наименование КАК analyticsID,
				|	БПАГКонтрагенты.Код КАК clientID,
				|	БПАГОрганизации.Код КАК companyID,
				|	БПАГСклады.Код КАК depotID,
				|	БПАГПрайсы.Код КАК priceTypeID,
				|	ВЫБОР
				|		КОГДА РеализацияТоваровУслуг.Проведен
				|			ТОГДА """ + СтатусВыгрузки + """
				|		ИНАЧЕ ""13""
				|	КОНЕЦ КАК status,
				|	РеализацияТоваровУслуг.СуммаДокумента КАК sum,
				|	РеализацияТоваровУслуг.Ссылка КАК ДокументРеализация,
				|	РеализацияТоваровУслуг.Товары.(
				|		Упаковка.Наименование КАК unit,
				|		Количество КАК quantity,
				|		Упаковка.Коэффициент КАК coeff,
				|		Номенклатура,
				|		Сумма КАК sum,
				|		Цена КАК price
				|	) КАК rows
				|ИЗ
				|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГОрганизации КАК БПАГОрганизации
				|		ПО РеализацияТоваровУслуг.Организация = БПАГОрганизации.Организация
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГСклады КАК БПАГСклады
				|		ПО РеализацияТоваровУслуг.Склад = БПАГСклады.Склад
				|		ёЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БПАГДокументыАгентов.СрезПоследних(
				|				,
				|				Период МЕЖДУ &НачалоПериода И &КонецПериода
				|					И ВидДокумента В (&ВидДокументаРеализация)
				|					И НЕ Документ.ПометкаУдаления) КАК БПАГДокументыАгентовСрезПоследних
				|		ПО РеализацияТоваровУслуг.Ссылка = БПАГДокументыАгентовСрезПоследних.Документ
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БПАГПрайсы КАК БПАГПрайсы
				|		ПО РеализацияТоваровУслуг.Соглашение.ВидЦен = БПАГПрайсы.ТипЦен
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГКонтрагенты КАК БПАГКонтрагенты
				|		ПО РеализацияТоваровУслуг.Партнер = БПАГКонтрагенты.Партнер
				|ГДЕ
				|	РеализацияТоваровУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
				|	И РеализацияТоваровУслуг.Проведен
				|	И (&ВыгрузкаВсейКлиентуры
				|			ИЛИ БПАГКонтрагенты.Ссылка В ИЕРАРХИИ (&МассивКлиентуры))";
				
				Запрос.УстановитьПараметр("МассивКлиентуры", МассивКлиентуры);
				Запрос.УстановитьПараметр("ВыгрузкаВсейКлиентуры", ВыгрузкаВсейКлиентуры);
				
				Запрос.УстановитьПараметр("НачалоПериода", НачальнаяДатаВыгрузки);
				Запрос.УстановитьПараметр("КонецПериода", КонецДня(ТекущаяДата()));
				//
				//Запрос.УстановитьПараметр("ВыгрузкаВсехТТ", ВыгрузкаВсехТТ);
				//Запрос.УстановитьПараметр("МассивТТ", МассивТТ);
				ВидДокументаРеализация = Новый Массив;
				ВидДокументаРеализация.Добавить(Перечисления.БПАГВидыДокументов.Реализация);
				ВидДокументаРеализация.Добавить(Перечисления.БПАГВидыДокументов.РеализацияПоЗаявке);
				Запрос.УстановитьПараметр("ВидДокументаРеализация", ВидДокументаРеализация);
				
				ТЗ = Запрос.Выполнить().Выгрузить();
				ТЗ.Колонки.Добавить("properties");
				Для Каждого тмпСтрока Из ТЗ Цикл
					ДокументСозданВ1С = Ложь;
					ТабЧасть = тмпСтрока.rows;
					ТабЧасть.Колонки.Добавить("goodID");
					КолВоСтрок = ТабЧасть.Количество();
					Для i = 1 По КолВоСтрок Цикл
						БПАГНоменклатура = Справочники.БПАГНоменклатура.НайтиПоРеквизиту("Номенклатура", ТабЧасть[КолВоСтрок - i].Номенклатура);
						Если БПАГНоменклатура.Пустая() Тогда
							ТабЧасть.Удалить(КолВоСтрок - i);
						Иначе
							ТабЧасть[КолВоСтрок - i].goodID = БПАГНоменклатура.Код;
						КонецЕсли;
					КонецЦикла;
					ТабЧасть.Колонки.Удалить("Номенклатура");
					//Добавить уникальный идентификатор, если документ создан не на устройстве.
					Если тмпСтрока.uniqueID = NULL Тогда
						тмпСтрока.uniqueID = тмпСтрока.ДокументРеализация.УникальныйИдентификатор();
						ДокументСозданВ1С = Истина;
					КонецЕсли;
					тмпСтрока.analyticsID = тмпСтрока.clientID + тмпСтрока.analyticsID;
					//тмпСтрока.properties = ТЗКатегории;
					тмпСтрока.properties = ПолучитьСвойстваКатегорииДокумента(тмпСтрока.ДокументРеализация);
					//Добавить ТТ для документов которые созданы не на устройстве.	
					Если тмпСтрока.posID = NULL Тогда
						//Выбрать первую ТТ из справочника БПАГТорговыеТочки
						ТекущийКонтрагент = Справочники.БПАГКонтрагенты.НайтиПоКоду(тмпСтрока.clientID);
						Выборка = Справочники.БПАГТорговыеТочки.Выбрать( , ТекущийКонтрагент); 
						Пока Выборка.Следующий() Цикл 
							Если НЕ Выборка.ПометкаУдаления Тогда
								ОчереднойПодчиненый = Выборка.Ссылка; 
								тмпСтрока.posID = ОчереднойПодчиненый.Код;
								ТекущаяТТ = ОчереднойПодчиненый.Ссылка;
								Прервать;
							КонецЕсли;
						КонецЦикла; 
					КонецЕсли;
					//Запишем данные в служебный регистр
					Если ДокументСозданВ1С Тогда
						НоваяЗаписьДокументыАгентов = РегистрыСведений.БПАГДокументыАгентов.СоздатьМенеджерЗаписи();
						НоваяЗаписьДокументыАгентов.ВидДокумента = Перечисления.БПАГВидыДокументов.Реализация;
						
						НоваяЗаписьДокументыАгентов.Период = ТекущаяДата();
						НоваяЗаписьДокументыАгентов.Агент = тмпАгент.Агент;
						НоваяЗаписьДокументыАгентов.Документ = тмпСтрока.ДокументРеализация.Ссылка;
						НоваяЗаписьДокументыАгентов.ТорговаяТочка = ТекущаяТТ;
						НоваяЗаписьДокументыАгентов.ДатаСозданияНаУстройстве = ТекущаяДата();
						НоваяЗаписьДокументыАгентов.ДатаИзмененияНаУстройстве = ТекущаяДата();
						
						НоваяЗаписьДокументыАгентов.ИД = тмпСтрока.uniqueID;
						НоваяЗаписьДокументыАгентов.НомерДокументаНаУстройстве = тмпСтрока.number;
						//НоваяЗаписьДокументыАгентов.ШиротаСоздания = Число(тмпДокумент.createdLatitude);
						//НоваяЗаписьДокументыАгентов.ДолготаСоздания = Число(тмпДокумент.createdLongitude);
						//НоваяЗаписьДокументыАгентов.ШиротаИзменения = Число(тмпДокумент.modifiedLatitude);
						//НоваяЗаписьДокументыАгентов.ДолготаИзменения = Число(тмпДокумент.modifiedLongitude);
						//НоваяЗаписьДокументыАгентов.МоментСозданияПоGPS = ?(тмпДокумент.createdLocationDate = "", 0, Дата(тмпДокумент.createdLocationDate));
						//НоваяЗаписьДокументыАгентов.МоментИзмененияПоGPS = ?(тмпДокумент.modifiedLocationDate = "", 0, Дата(тмпДокумент.modifiedLocationDate));
						НоваяЗаписьДокументыАгентов.Записать();
					КонецЕсли;
				КонецЦикла;
				ТЗ.Колонки.Удалить("ДокументРеализация");
				
			ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
				//NIY
				Возврат;
				
			Иначе //УТ10
				СтатусВыгрузки = ?(СпецификаПользователя = "KF" ,"12", "15");
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	БПАГДокументыАгентовСрезПоследних.ИД КАК uniqueID,
				|	БПАГДокументыАгентовСрезПоследних.ТорговаяТочка.Код КАК posID,
				|	РеализацияТоваровУслуг.Номер КАК number,
				|	РеализацияТоваровУслуг.Дата КАК date,
				|	РеализацияТоваровУслуг.ДоговорКонтрагента.Код КАК analyticsID,
				|	БПАГКонтрагенты.Код КАК clientID,
				|	БПАГОрганизации.Код КАК companyID,
				|	БПАГСклады.Код КАК depotID,
				|	БПАГПрайсы.Код КАК priceTypeID,
				|	ВЫБОР
				|		КОГДА РеализацияТоваровУслуг.Проведен
				|			ТОГДА """ + СтатусВыгрузки + """
				|		ИНАЧЕ ""13""
				|	КОНЕЦ КАК status,
				|	РеализацияТоваровУслуг.СуммаДокумента КАК sum,
				|	РеализацияТоваровУслуг.Ссылка КАК ДокументРеализация,
				|	РеализацияТоваровУслуг.Товары.(
				|		ЕдиницаИзмерения.Наименование КАК unit,
				|		Количество КАК quantity,
				|		Коэффициент КАК coeff,
				|		Номенклатура,
				|		Сумма КАК sum,
				|		Цена КАК price
				|	) КАК rows
				|ИЗ
				|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГОрганизации КАК БПАГОрганизации
				|		ПО РеализацияТоваровУслуг.Организация = БПАГОрганизации.Организация
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГСклады КАК БПАГСклады
				|		ПО РеализацияТоваровУслуг.Склад = БПАГСклады.Склад
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГКонтрагенты КАК БПАГКонтрагенты
				|		ПО РеализацияТоваровУслуг.Контрагент = БПАГКонтрагенты.Контрагент
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БПАГДокументыАгентов.СрезПоследних(
				|				,
				|				Период МЕЖДУ &НачалоПериода И &КонецПериода
				|					И ВидДокумента В (&ВидДокументаРеализация)
				|					И НЕ Документ.ПометкаУдаления) КАК БПАГДокументыАгентовСрезПоследних
				|		ПО РеализацияТоваровУслуг.Ссылка = БПАГДокументыАгентовСрезПоследних.Документ
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БПАГПрайсы КАК БПАГПрайсы
				|		ПО РеализацияТоваровУслуг.ТипЦен = БПАГПрайсы.ТипЦен
				|ГДЕ
				|	РеализацияТоваровУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
				|	И РеализацияТоваровУслуг.Проведен
				|	И (&ВыгрузкаВсейКлиентуры
				|			ИЛИ БПАГКонтрагенты.Ссылка В ИЕРАРХИИ (&МассивКлиентуры))";
				
				Запрос.УстановитьПараметр("МассивКлиентуры", МассивКлиентуры);
				Запрос.УстановитьПараметр("ВыгрузкаВсейКлиентуры", ВыгрузкаВсейКлиентуры);
				
				Запрос.УстановитьПараметр("НачалоПериода", НачальнаяДатаВыгрузки);
				Запрос.УстановитьПараметр("КонецПериода", КонецДня(ТекущаяДата()));
				//
				//Запрос.УстановитьПараметр("ВыгрузкаВсехТТ", ВыгрузкаВсехТТ);
				//Запрос.УстановитьПараметр("МассивТТ", МассивТТ);
				ВидДокументаРеализация = Новый Массив;
				ВидДокументаРеализация.Добавить(Перечисления.БПАГВидыДокументов.Реализация);
				ВидДокументаРеализация.Добавить(Перечисления.БПАГВидыДокументов.РеализацияПоЗаявке);
				Запрос.УстановитьПараметр("ВидДокументаРеализация", ВидДокументаРеализация);
				
				ТЗ = Запрос.Выполнить().Выгрузить();
				ТЗ.Колонки.Добавить("properties");
				Для Каждого тмпСтрока Из ТЗ Цикл
					ДокументСозданВ1С = Ложь;
					ТабЧасть = тмпСтрока.rows;
					ТабЧасть.Колонки.Добавить("goodID");
					КолВоСтрок = ТабЧасть.Количество();
					Для i = 1 По КолВоСтрок Цикл
						БПАГНоменклатура = Справочники.БПАГНоменклатура.НайтиПоРеквизиту("Номенклатура", ТабЧасть[КолВоСтрок - i].Номенклатура);
						Если БПАГНоменклатура.Пустая() Тогда
							ТабЧасть.Удалить(КолВоСтрок - i);
						Иначе
							ТабЧасть[КолВоСтрок - i].goodID = БПАГНоменклатура.Код;
						КонецЕсли;
					КонецЦикла;
					ТабЧасть.Колонки.Удалить("Номенклатура");
					//Добавить уникальный идентификатор, если документ создан не на устройстве.
					Если тмпСтрока.uniqueID = NULL Тогда
						тмпСтрока.uniqueID = тмпСтрока.ДокументРеализация.УникальныйИдентификатор();
						ДокументСозданВ1С = Истина;
					КонецЕсли;
					//тмпСтрока.properties = ТЗКатегории;
					тмпСтрока.properties = ПолучитьСвойстваКатегорииДокумента(тмпСтрока.ДокументРеализация);
					//Добавить ТТ для документов которые созданы не на устройстве.	
					Если тмпСтрока.posID = NULL Тогда
						//Выбрать первую ТТ из справочника БПАГТорговыеТочки
						ТекущийКонтрагент = Справочники.БПАГКонтрагенты.НайтиПоКоду(тмпСтрока.clientID);
						Выборка = Справочники.БПАГТорговыеТочки.Выбрать( , ТекущийКонтрагент); 
						Пока Выборка.Следующий() Цикл 
							Если НЕ Выборка.ПометкаУдаления Тогда
								ОчереднойПодчиненый = Выборка.Ссылка; 
								тмпСтрока.posID = ОчереднойПодчиненый.Код;
								ТекущаяТТ = ОчереднойПодчиненый.Ссылка;
								Прервать;
							КонецЕсли;
						КонецЦикла; 
					КонецЕсли;
					//Запишем данные в служебный регистр
					Если ДокументСозданВ1С Тогда
						НоваяЗаписьДокументыАгентов = РегистрыСведений.БПАГДокументыАгентов.СоздатьМенеджерЗаписи();
						НоваяЗаписьДокументыАгентов.ВидДокумента = Перечисления.БПАГВидыДокументов.Реализация;
						
						НоваяЗаписьДокументыАгентов.Период = ТекущаяДата();
						НоваяЗаписьДокументыАгентов.Агент = тмпАгент.Агент;
						НоваяЗаписьДокументыАгентов.Документ = тмпСтрока.ДокументРеализация.Ссылка;
						НоваяЗаписьДокументыАгентов.ТорговаяТочка = ТекущаяТТ;
						НоваяЗаписьДокументыАгентов.ДатаСозданияНаУстройстве = ТекущаяДата();
						НоваяЗаписьДокументыАгентов.ДатаИзмененияНаУстройстве = ТекущаяДата();
						
						НоваяЗаписьДокументыАгентов.ИД = тмпСтрока.uniqueID;
						НоваяЗаписьДокументыАгентов.НомерДокументаНаУстройстве = тмпСтрока.number;
						//НоваяЗаписьДокументыАгентов.ШиротаСоздания = Число(тмпДокумент.createdLatitude);
						//НоваяЗаписьДокументыАгентов.ДолготаСоздания = Число(тмпДокумент.createdLongitude);
						//НоваяЗаписьДокументыАгентов.ШиротаИзменения = Число(тмпДокумент.modifiedLatitude);
						//НоваяЗаписьДокументыАгентов.ДолготаИзменения = Число(тмпДокумент.modifiedLongitude);
						//НоваяЗаписьДокументыАгентов.МоментСозданияПоGPS = ?(тмпДокумент.createdLocationDate = "", 0, Дата(тмпДокумент.createdLocationDate));
						//НоваяЗаписьДокументыАгентов.МоментИзмененияПоGPS = ?(тмпДокумент.modifiedLocationDate = "", 0, Дата(тмпДокумент.modifiedLocationDate));
						НоваяЗаписьДокументыАгентов.Записать();
					КонецЕсли;
				КонецЦикла;
				ТЗ.Колонки.Удалить("ДокументРеализация");
				
				//Запрос = Новый Запрос;
				//Запрос.Текст = 
				//"ВЫБРАТЬ
				//|	БПАГДокументыАгентовСрезПоследних.ИД КАК uniqueID,
				//|	БПАГДокументыАгентовСрезПоследних.Документ.Дата КАК date,
				//|	БПАГДокументыАгентовСрезПоследних.ТорговаяТочка.Код КАК posID
				//|ИЗ
				//|	РегистрСведений.БПАГДокументыАгентов.СрезПоследних(
				//|			,
				//|			Период МЕЖДУ &ДатаНачала И &ДатаКонца
				//|				И (&ВыгрузкаВсехТТ
				//|					ИЛИ ТорговаяТочка В (&МассивТТ))
				//|				И ВидДокумента В (&ВидыДокументаРеализация)
				//|				И НЕ Документ.ПометкаУдаления) КАК БПАГДокументыАгентовСрезПоследних";
				//
				//Запрос.УстановитьПараметр("НачалоПериода", НачальнаяДатаВыгрузки);
				//Запрос.УстановитьПараметр("КонецПериода", КонецДня(ТекущаяДата()));
				//Запрос.УстановитьПараметр("ВыгрузкаВсехТТ", ВыгрузкаВсехТТ);
				//Запрос.УстановитьПараметр("МассивТТ", МассивТТ);
				//
				//ВидыДокументаРеализация = Новый Массив;
				//ВидыДокументаРеализация.Добавить(Перечисления.БПАГВидыДокументов.Реализация);
				//ВидыДокументаРеализация.Добавить(Перечисления.БПАГВидыДокументов.РеализацияПоЗаявке);
				//Запрос.УстановитьПараметр("ВидДокументаРеализация", ВидыДокументаРеализация);
				//
				////Запрос = Новый Запрос;
				////Запрос.Текст = 
				////"ВЫБРАТЬ
				////|	РеализацияТоваровУслуг.Номер КАК uniqueID,
				////|	РеализацияТоваровУслуг.Дата КАК date,
				////|	БПАГСклады.Код КАК depotID,
				////|	БПАГОрганизации.Код КАК companyID,
				////|	ВЫБОР
				////|		КОГДА РеализацияТоваровУслуг.Проведен
				////|			ТОГДА ""12""
				////|		ИНАЧЕ ""14""
				////|	КОНЕЦ КАК status
				////|ИЗ
				////|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
				////|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГОрганизации КАК БПАГОрганизации
				////|		ПО РеализацияТоваровУслуг.Организация = БПАГОрганизации.Организация
				////|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГСклады КАК БПАГСклады
				////|		ПО РеализацияТоваровУслуг.Склад = БПАГСклады.Склад
				////|ГДЕ
				////|	РеализацияТоваровУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
				////|//	И РеализацияТоваровУслуг.Склад = &Склад";
				//
				//Запрос.УстановитьПараметр("НачалоПериода", НачальнаяДатаВыгрузки);
				//Запрос.УстановитьПараметр("КонецПериода", КонецДня(ТекущаяДата()));
				////Запрос.УстановитьПараметр("Склад", Склад);
				//
				//ТЗ = Запрос.Выполнить().Выгрузить();
				////Для Каждого тмпСтрока Из ТЗ Цикл
				////	ТабЧасть = тмпСтрока.rows;
				////	ТабЧасть.Колонки.Добавить("goodID");
				////	КолВоСтрок = ТабЧасть.Количество();
				////	Для i = 1 По КолВоСтрок Цикл
				////		БПАГНоменклатура = Справочники.БПАГНоменклатура.НайтиПоРеквизиту("Номенклатура", ТабЧасть[КолВоСтрок - i].Номенклатура);
				////		Если БПАГНоменклатура.Пустая() Тогда
				////			ТабЧасть.Удалить(КолВоСтрок - i);
				////		Иначе
				////			ТабЧасть[КолВоСтрок - i].goodID = БПАГНоменклатура.Код;
				////		КонецЕсли;
				////	КонецЦикла;
				////	ТабЧасть.Колонки.Удалить("Номенклатура");
				////КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;				
		
		тмпТЗАгенты = СоздатьТаблицуИзОдногоАгента(тмпАгент);
		КлючПоиска = "Реализации%-%" + СокрЛП(тмпАгент.Агент.Клиентура.Код);
		СформироватьPlist(ТЗ, "uniqueID", тмпТЗАгенты, "sales", "реализаций", Ложь, Ложь, , , КлючПоиска);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьПоступления(Агенты)
	
	НастройкиДокумента = ПолучитьНастройкиДокумента(Перечисления.БПАГВидыДокументов.Поступление, ТекущаяДата());
	Если (НЕ НастройкиДокумента.ОбратнаяВыгрузкаИз1С) ИЛИ (НастройкиДокумента.ПериодОбратнойВыгрузки <= 0) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого тмпАгент Из Агенты Цикл
		
		БПАГСклад = НастройкаИзКэша("defaultMobileDepotID", тмпАгент.Агент);
		Если (БПАГСклад = Неопределено) ИЛИ (БПАГСклад.Пустая()) Тогда
			Продолжить;
		КонецЕсли;
		Склад = БПАГСклад.Склад;
		
		СписокФайловВыгрузки = Новый СписокЗначений;
		СписокФайловВыгрузки.Добавить("receipts");
		КлючПоиска = "Поступления%-%" + СокрЛП(БПАГСклад.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Ассортимент.Код);
		Если ПолучитьГотовыеФайлыВыгрузкиИзКэша(тмпАгент.Агент, КлючПоиска, СписокФайловВыгрузки) Тогда
			//Файлы возьмем из кэша
			
		Иначе			
	
			МассивАгентов = Новый Массив();
			МассивАгентов.Добавить(тмпАгент.Агент);
			МассивАссортимента = ПолучитьМассивАссортимента(МассивАгентов);
			ВыгрузкаВсехТоваров = МассивАссортимента.Количество() = 0;
			
			ГлубинаВыгрузки = НастройкиДокумента.ПериодОбратнойВыгрузки;
			НачальнаяДатаВыгрузки = НачалоДня(ТекущаяДата() - ГлубинаВыгрузки * 24 * 60 * 60);
			
			Если ВидПрикладногоРешения = "УТ11" Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ПоступлениеТоваровУслуг.Номер КАК uniqueID,
				|	ПоступлениеТоваровУслуг.Дата КАК date,
				|	ПоступлениеТоваровУслуг.Товары.(
				|		Номенклатура,
				|		Упаковка.Наименование КАК unit,
				|		Количество КАК quantity,
				|		ЕСТЬNULL(ПоступлениеТоваровУслуг.Товары.Упаковка.Коэффициент, 1) КАК coeff
				|	) КАК rows,
				|	БПАГСклады.Код КАК depotID,
				|	БПАГОрганизации.Код КАК companyID,
				|	ВЫБОР
				|		КОГДА ПоступлениеТоваровУслуг.Проведен
				|			ТОГДА ""12""
				|		ИНАЧЕ ""14""
				|	КОНЕЦ КАК status
				|ИЗ
				|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГОрганизации КАК БПАГОрганизации
				|		ПО ПоступлениеТоваровУслуг.Организация = БПАГОрганизации.Организация
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГСклады КАК БПАГСклады
				|		ПО ПоступлениеТоваровУслуг.Склад = БПАГСклады.Склад
				|ГДЕ
				|	ПоступлениеТоваровУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
				|	И ПоступлениеТоваровУслуг.Склад = &Склад";
				
				Запрос.УстановитьПараметр("НачалоПериода", НачальнаяДатаВыгрузки);
				Запрос.УстановитьПараметр("КонецПериода", КонецДня(ТекущаяДата()));
				Запрос.УстановитьПараметр("Склад", Склад);
				
				//Запрос.УстановитьПараметр("НачалоПериода", НачальнаяДатаВыгрузкиИсторииПродаж);
				//Запрос.УстановитьПараметр("КонецПериода", ТекущаяДата());
				//Запрос.УстановитьПараметр("МассивКлиентурыКлиентов", МассивКлиентурыКлиентов);
				//Запрос.УстановитьПараметр("ВыгрузкаВсехКлиентов", ВыгрузкаВсехКлиентов);
				//Запрос.УстановитьПараметр("МассивАссортимента", МассивАссортимента);
				//Запрос.УстановитьПараметр("ВыгрузкаВсехТоваров", ВыгрузкаВсехТоваров);
				
				ТЗ = Запрос.Выполнить().Выгрузить();
				Для Каждого тмпСтрока Из ТЗ Цикл
					ТабЧасть = тмпСтрока.rows;
					ТабЧасть.Колонки.Добавить("goodID");
					КолВоСтрок = ТабЧасть.Количество();
					Для i = 1 По КолВоСтрок Цикл
						БПАГНоменклатура = Справочники.БПАГНоменклатура.НайтиПоРеквизиту("Номенклатура", ТабЧасть[КолВоСтрок - i].Номенклатура);
						Если БПАГНоменклатура.Пустая() Тогда
							ТабЧасть.Удалить(КолВоСтрок - i);
						Иначе
							ТабЧасть[КолВоСтрок - i].goodID = БПАГНоменклатура.Код;
						КонецЕсли;
					КонецЦикла;
					ТабЧасть.Колонки.Удалить("Номенклатура");
				КонецЦикла;
				
			ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
				//NIY
				Возврат;
				
			Иначе //УТ10
				//NIY
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;				
		
		тмпТЗАгенты = СоздатьТаблицуИзОдногоАгента(тмпАгент);
		КлючПоиска = "Поступления%-%" + СокрЛП(БПАГСклад.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Ассортимент.Код);
		СформироватьPlist(ТЗ, "uniqueID", тмпТЗАгенты, "receipts", "поступлений", Ложь, Ложь, , , КлючПоиска);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьПеремещения(Агенты)
	
	НастройкиДокумента = ПолучитьНастройкиДокумента(Перечисления.БПАГВидыДокументов.Перемещение, ТекущаяДата());
	Если (НЕ НастройкиДокумента.ОбратнаяВыгрузкаИз1С) ИЛИ (НастройкиДокумента.ПериодОбратнойВыгрузки <= 0) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого тмпАгент Из Агенты Цикл
		
		БПАГСклад = НастройкаИзКэша("defaultMobileDepotID", тмпАгент.Агент);
		Если (БПАГСклад = Неопределено) ИЛИ (БПАГСклад.Пустая()) Тогда
			Продолжить;
		КонецЕсли;
		Склад = БПАГСклад.Склад;
		
		СписокФайловВыгрузки = Новый СписокЗначений;
		СписокФайловВыгрузки.Добавить("receipts");
		КлючПоиска = "Перемещения%-%" + СокрЛП(БПАГСклад.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Ассортимент.Код);
		Если ПолучитьГотовыеФайлыВыгрузкиИзКэша(тмпАгент.Агент, КлючПоиска, СписокФайловВыгрузки) Тогда
			//Файлы возьмем из кэша
			
		Иначе			
	
			МассивАгентов = Новый Массив();
			МассивАгентов.Добавить(тмпАгент.Агент);
			МассивАссортимента = ПолучитьМассивАссортимента(МассивАгентов);
			ВыгрузкаВсехТоваров = МассивАссортимента.Количество() = 0;
			
			ГлубинаВыгрузки = НастройкиДокумента.ПериодОбратнойВыгрузки;
			НачальнаяДатаВыгрузки = НачалоДня(ТекущаяДата() - ГлубинаВыгрузки * 24 * 60 * 60);
			
			Если ВидПрикладногоРешения = "УТ11" Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ПеремещениеТоваров.Номер КАК uniqueID,
				|	ПеремещениеТоваров.Дата КАК date,
				|	ПеремещениеТоваров.Товары.(
				|		Номенклатура,
				|		Упаковка.Наименование КАК unit,
				|		Количество КАК quantity,
				|		ЕСТЬNULL(ПеремещениеТоваров.Товары.Упаковка.Коэффициент, 1) КАК coeff
				|	) КАК rows,
				|	БПАГСклады.Код КАК destinationDepotID,
				|	БПАГОрганизации.Код КАК companyID,
				|	ВЫБОР
				|		КОГДА ПеремещениеТоваров.Проведен
				|			ТОГДА ""12""
				|		ИНАЧЕ ""14""
				|	КОНЕЦ КАК status
				|ИЗ
				|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГОрганизации КАК БПАГОрганизации
				|		ПО ПеремещениеТоваров.Организация = БПАГОрганизации.Организация
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГСклады КАК БПАГСклады
				|		ПО ПеремещениеТоваров.СкладПолучатель = БПАГСклады.Склад
				|ГДЕ
				|	ПеремещениеТоваров.Дата МЕЖДУ &НачалоПериода И &КонецПериода
				|	И ПеремещениеТоваров.СкладПолучатель = &СкладПолучатель";
				
				Запрос.УстановитьПараметр("НачалоПериода", НачальнаяДатаВыгрузки);
				Запрос.УстановитьПараметр("КонецПериода", КонецДня(ТекущаяДата()));
				Запрос.УстановитьПараметр("СкладПолучатель", Склад);
				
				//Запрос.УстановитьПараметр("НачалоПериода", НачальнаяДатаВыгрузкиИсторииПродаж);
				//Запрос.УстановитьПараметр("КонецПериода", ТекущаяДата());
				//Запрос.УстановитьПараметр("МассивКлиентурыКлиентов", МассивКлиентурыКлиентов);
				//Запрос.УстановитьПараметр("ВыгрузкаВсехКлиентов", ВыгрузкаВсехКлиентов);
				//Запрос.УстановитьПараметр("МассивАссортимента", МассивАссортимента);
				//Запрос.УстановитьПараметр("ВыгрузкаВсехТоваров", ВыгрузкаВсехТоваров);
				
				ТЗ = Запрос.Выполнить().Выгрузить();
				Для Каждого тмпСтрока Из ТЗ Цикл
					ТабЧасть = тмпСтрока.rows;
					ТабЧасть.Колонки.Добавить("goodID");
					КолВоСтрок = ТабЧасть.Количество();
					Для i = 1 По КолВоСтрок Цикл
						БПАГНоменклатура = Справочники.БПАГНоменклатура.НайтиПоРеквизиту("Номенклатура", ТабЧасть[КолВоСтрок - i].Номенклатура);
						Если БПАГНоменклатура.Пустая() Тогда
							ТабЧасть.Удалить(КолВоСтрок - i);
						Иначе
							ТабЧасть[КолВоСтрок - i].goodID = БПАГНоменклатура.Код;
						КонецЕсли;
					КонецЦикла;
					ТабЧасть.Колонки.Удалить("Номенклатура");
				КонецЦикла;
				
			ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
				//NIY
				Возврат;
				
			Иначе //УТ10
				//NIY
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;				
		
		тмпТЗАгенты = СоздатьТаблицуИзОдногоАгента(тмпАгент);
		КлючПоиска = "Перемещения%-%" + СокрЛП(БПАГСклад.Код) + "%-%" + СокрЛП(тмпАгент.Агент.Ассортимент.Код);
		СформироватьPlist(ТЗ, "uniqueID", тмпТЗАгенты, "transfers", "перемещений", Ложь, Ложь, , , КлючПоиска);
		
	КонецЦикла;
	
КонецПроцедуры

#Область ВыгрузитьАнкеты
	
Процедура ВыгрузитьАнкеты(агенты)
	
	НастройкиДокумента = ПолучитьНастройкиДокумента(Перечисления.БПАГВидыДокументов.Анкета, ТекущаяДата());
	Если (НЕ НастройкиДокумента.ОбратнаяВыгрузкаИз1С) ИЛИ (НастройкиДокумента.ПериодОбратнойВыгрузки <= 0) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого тмпАгент Из Агенты Цикл
		
		СписокФайловВыгрузки = Новый СписокЗначений;
		СписокФайловВыгрузки.Добавить("receipts");
		
		КлючПоиска = "Анкеты%-%" + "%-%" + СокрЛП(тмпАгент.Агент.Ассортимент.Код);
		Если ПолучитьГотовыеФайлыВыгрузкиИзКэша(тмпАгент.Агент, КлючПоиска, СписокФайловВыгрузки) Тогда
			//Файлы возьмем из кэша
			
		Иначе			
	
			МассивАгентов = Новый Массив();
			МассивАгентов.Добавить(тмпАгент.Агент);
			МассивАссортимента = ПолучитьМассивАссортимента(МассивАгентов);
			//ВыгрузкаВсехТоваров = МассивАссортимента.Количество() = 0;
			
			ГлубинаВыгрузки = НастройкиДокумента.ПериодОбратнойВыгрузки;
			НачальнаяДатаВыгрузки = НачалоДня(ТекущаяДата() - ГлубинаВыгрузки * 24 * 60 * 60);
			
			Если (ВидПрикладногоРешения = "УТ11") или (СпецификаПользователя = "SD") Тогда
				
				запрос = Новый Запрос;
				
				Если СпецификаПользователя = "SD" Тогда
					
					#Область ТекстЗапроса
					
					запрос.Текст = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	БПАГАнкета.Номер КАК uniqueID,
					|	БПАГАнкета.Дата КАК date,
					|	БПАГАнкета.ВидАнкеты.Код КАК questionnaireTypeID,
					|	БПАГАнкета.Агент,
					|	БПАГАнкета.Контрагент.Код КАК clientID,
					|	БПАГАнкета.Контрагент.Код КАК posID,
					|	ВЫРАЗИТЬ(БПАГАнкета.ИД КАК СТРОКА(36)) КАК ИД,
					|	БПАГАнкета.Ответы.(
					|		Ссылка,
					|		НомерСтроки,
					|		Вопрос.Код КАК questionID,
					|		Ответ КАК value
					|	) КАК rows,
					|	БПАГАнкета.Картинки.(
					|		Ссылка,
					|		НомерСтроки,
					|		Имя,
					|		Вопрос,
					|		Порядок
					|	) КАК Картинки,
					|	ВЫБОР
					|		КОГДА БПАГАнкета.Проведен
					|			ТОГДА ""15""
					|		ИНАЧЕ ""15""
					|	КОНЕЦ КАК status,
					|	БПАГАнкета.Ссылка КАК ДокументАнкета
					|ИЗ
					|	Документ.БПАГАнкета КАК БПАГАнкета
					|ГДЕ
					|	БПАГАнкета.Дата МЕЖДУ &НачалоПериода И &КонецПериода" ;
					
					запрос.Текст =
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ВЫРАЗИТЬ(БПАГДокументыАгентовСрезПоследних.ИД КАК СТРОКА(36)) КАК uniqueID,
					|	ЗаданиеТорговомуПредставителю.ДатаВизитаПлан КАК date,
					|	ЗаданиеТорговомуПредставителю.ВидАнкеты.Код КАК questionnaireTypeID,
					|	ЗаданиеТорговомуПредставителю.ТорговаяТочка.Код КАК clientID,
					|	ЗаданиеТорговомуПредставителю.ТорговаяТочка.Код КАК posID,
					|	ЗаданиеТорговомуПредставителю.Задачи.(
					|		ОписаниеЗадачи.Код КАК questionID,
					|		ОписаниеРезультата КАК value,
					|		"""" КАК goodID
					|	) КАК rows,
					|	""15"" КАК status
					|ИЗ
					|	Документ.ЗаданиеТорговомуПредставителю КАК ЗаданиеТорговомуПредставителю
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БПАГДокументыАгентов.СрезПоследних КАК БПАГДокументыАгентовСрезПоследних
					|		ПО БПАГДокументыАгентовСрезПоследних.Документ = ЗаданиеТорговомуПредставителю.Ссылка
					|ГДЕ
					|	ЗаданиеТорговомуПредставителю.Проведен = ИСТИНА
					|	И ЗаданиеТорговомуПредставителю.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийТорговымПредставителям.КОтработке)
					|	И ЗаданиеТорговомуПредставителю.Дата МЕЖДУ &НачалоПериода И &КонецПериода
					|	И ЗаданиеТорговомуПредставителю.ТорговыйПредставитель = &Агент";
					
					#КонецОбласти 
					
				Иначе	
					
					#Область ТекстЗапроса

					запрос.Текст = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	БПАГАнкета.Номер КАК uniqueID,
					|	БПАГАнкета.Дата КАК date,
					|	БПАГАнкета.ВидАнкеты.Код КАК questionnaireTypeID,
					|	БПАГАнкета.Агент,
					|	БПАГАнкета.Контрагент.Код КАК clientID,
					|	БПАГАнкета.ТорговаяТочка.Код КАК posID,
					|	БПАГАнкета.ИД,
					|	БПАГАнкета.Ответы.(
					|		Ссылка,
					|		НомерСтроки,
					|		Вопрос.Код КАК questionID,
					|		Ответ КАК value
					|	) КАК rows,
					|	БПАГАнкета.Картинки.(
					|		Ссылка,
					|		НомерСтроки,
					|		Имя,
					|		Вопрос,
					|		Порядок
					|	) КАК Картинки,
					|	ВЫБОР
					|		КОГДА БПАГАнкета.Проведен
					|			ТОГДА ""15""
					|		ИНАЧЕ ""15""
					|	КОНЕЦ КАК status,
					|	БПАГАнкета.Ссылка КАК ДокументАнкета
					|ИЗ
					|	Документ.БПАГАнкета КАК БПАГАнкета
					|ГДЕ
					|	БПАГАнкета.Дата МЕЖДУ &НачалоПериода И &КонецПериода" ;
					
					#КонецОбласти
					
				КонецЕсли;
				
				запрос.УстановитьПараметр("НачалоПериода", НачальнаяДатаВыгрузки);
				запрос.УстановитьПараметр("КонецПериода", КонецДня(ТекущаяДата()));
				запрос.УстановитьПараметр("Агент", тмпАгент.Агент);
				
				
				ТЗ = запрос.Выполнить().Выгрузить();
				
				#Область ОтключенныйКод
				
				Если 1=2 Тогда
					
					ТЗФотоАнкет = Новый ТаблицаЗначений;
					ТЗФотоАнкет.Колонки.Добавить("pictures");
					ТЗФотоАнкет.Колонки.Добавить("questionnaireID");
					
					
					Для Каждого тмпСтрока Из ТЗ Цикл
						
						ДокументСозданВ1С = Истина;
						
						//Запишем данные в служебный регистр
						//Если ДокументСозданВ1С Тогда
						//	
						//	НоваяЗаписьДокументыАгентов = РегистрыСведений.БПАГДокументыАгентов.СоздатьМенеджерЗаписи();
						//	НоваяЗаписьДокументыАгентов.ВидДокумента = Перечисления.БПАГВидыДокументов.Анкета;
						//	
						//	НоваяЗаписьДокументыАгентов.Период = ТекущаяДата();
						//	НоваяЗаписьДокументыАгентов.Агент = тмпАгент.Агент;
						//	НоваяЗаписьДокументыАгентов.Документ = тмпСтрока.ДокументАнкета.Ссылка;
						//	НоваяЗаписьДокументыАгентов.ТорговаяТочка = тмпСтрока.ДокументАнкета.ТорговаяТочка;
						//	НоваяЗаписьДокументыАгентов.ДатаСозданияНаУстройстве = ТекущаяДата();
						//	
						//	НоваяЗаписьДокументыАгентов.ДатаИзмененияНаУстройстве = ТекущаяДата();
						//	
						//	НоваяЗаписьДокументыАгентов.ИД = тмпСтрока.uniqueID;
						//	НоваяЗаписьДокументыАгентов.НомерДокументаНаУстройстве =тмпСтрока.ДокументАнкета.Номер;
						//	НоваяЗаписьДокументыАгентов.Записать();
						//	
						//КонецЕсли;
						
						ТабЧасть = тмпСтрока.rows;
						//ТабЧасть.Колонки.Добавить("goodID");
						КолВоСтрок = ТабЧасть.Количество();
						
						тмпТЗ = тмпСтрока.Картинки;
						
						ТЗМассивФото = Новый ТаблицаЗначений;
						ТЗМассивФото.Колонки.Добавить("fileName");
						ТЗМассивФото.Колонки.Добавить("questionID");
						ТЗМассивФото.Колонки.Добавить("sort");
						Для Каждого тмпФото Из тмпТЗ Цикл
							НоваяСтрока = ТЗМассивФото.Добавить();
							НоваяСтрока.fileName = тмпФото.Имя;
							НоваяСтрока.questionID = тмпФото.Вопрос.Код;
							НоваяСтрока.sort = тмпФото.Порядок;
							
						КонецЦикла;
						
						НоваяСтрока = ТЗФотоАнкет.Добавить();
						НоваяСтрока.pictures = ТЗМассивФото;
						НоваяСтрока.questionnaireID = тмпСтрока.ИД;
						
					КонецЦикла;
					
					ТЗ.Колонки.Удалить("Агент");
					ТЗ.Колонки.Удалить("ИД");
					ТЗ.Колонки.Удалить("Картинки");
					ТЗ.Колонки.Удалить("ДокументАнкета");
				КонецЕсли;
				
				#КонецОбласти
				
			ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
				//NIY
				Возврат;
				
			Иначе //УТ10
				//NIY
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;				
		
		тмпТЗАгенты = СоздатьТаблицуИзОдногоАгента(тмпАгент);
		
		КлючПоиска = "Анкеты%-%" + "%-%" + СокрЛП(тмпАгент.Агент.Ассортимент.Код);
		
		СформироватьPlist(ТЗ, "uniqueID", тмпТЗАгенты, "questionnaires", "анкет", Ложь, Ложь, , , КлючПоиска);
		
		//СформироватьPlist(ТЗФотоАнкет, "questionnaireID", тмпТЗАгенты, "questionnairePictures", "фото анкет", Ложь, Ложь, , , КлючПоиска);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

Процедура ВыгрузитьМерчандайзинг(Агенты)
	
	
КонецПроцедуры

Процедура ЗагрузитьЗаголовок(Агенты)
	
	Для Каждого тмпАгент Из Агенты Цикл
		
		ТЗ = ПолучитьТЗИзPlist(тмпАгент.Агент, "id", "Не найден заголовок для ");
		Если ТЗ = Неопределено Тогда
			Продолжить;
		Иначе
			
			тмпСтрока = ТЗ[0];
			Объ = тмпАгент.Агент.ПолучитьОбъект();
			
			БылиИзменения = Ложь;
			
			Если ТЗ.Колонки.Найти("UDID") <> Неопределено Тогда
				Если СокрЛП(Объ.UDID) <> СокрЛП(тмпСтрока.UDID) Тогда
					Объ.UDID = тмпСтрока.UDID;
					БылиИзменения = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ТЗ.Колонки.Найти("appVersion") <> Неопределено Тогда
				Если СокрЛП(Объ.Версия) <> СокрЛП(тмпСтрока.appVersion) Тогда
					Объ.Версия = тмпСтрока.appVersion;
					БылиИзменения = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ТЗ.Колонки.Найти("systemVersion") <> Неопределено Тогда
				Если СокрЛП(Объ.ВерсияОС) <> СокрЛП(тмпСтрока.systemVersion) Тогда
					Объ.ВерсияОС = тмпСтрока.systemVersion;
					БылиИзменения = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ТЗ.Колонки.Найти("deviceModel") <> Неопределено Тогда
				Если СокрЛП(Объ.МодельУстройства) <> СокрЛП(тмпСтрока.deviceModel) Тогда
					Объ.МодельУстройства = тмпСтрока.deviceModel;
					БылиИзменения = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ТЗ.Колонки.Найти("licenseExpireDate") <> Неопределено Тогда
				//ПАКЛ Дата
				Если Объ.ЛицензияДо <> НачалоДня(Дата(ПреобразоватьДатуВФормат24(тмпСтрока.licenseExpireDate))) Тогда 
					Объ.ЛицензияДо = НачалоДня(Дата(ПреобразоватьДатуВФормат24(тмпСтрока.licenseExpireDate)));
					БылиИзменения = Истина;
				КонецЕсли;
				//Если Объ.ЛицензияДо <> НачалоДня(Дата(тмпСтрока.licenseExpireDate)) Тогда 
				//	Объ.ЛицензияДо = НачалоДня(Дата(тмпСтрока.licenseExpireDate));
				//	БылиИзменения = Истина;
				//КонецЕсли;
			КонецЕсли;
			
			Если ТЗ.Колонки.Найти("posChangeIndex") <> Неопределено Тогда
				НоваяСтрока = ТЗЗаголовок.Добавить();
				НоваяСтрока.Агент = тмпАгент.Агент;
				НоваяСтрока.Имя = "posChangeIndex";
				НоваяСтрока.Значение = тмпСтрока.posChangeIndex;
			КонецЕсли;
			
			Если ТЗ.Колонки.Найти("posPicturesChangeIndex") <> Неопределено Тогда
				НоваяСтрока = ТЗЗаголовок.Добавить();
				НоваяСтрока.Агент = тмпАгент.Агент;
				НоваяСтрока.Имя = "posPicturesChangeIndex";
				НоваяСтрока.Значение = тмпСтрока.posPicturesChangeIndex;
			КонецЕсли;
			
			Если ТЗ.Колонки.Найти("goodPicturesChangeIndex") <> Неопределено Тогда
				НоваяСтрока = ТЗЗаголовок.Добавить();
				НоваяСтрока.Агент = тмпАгент.Агент;
				НоваяСтрока.Имя = "goodPicturesChangeIndex";
				НоваяСтрока.Значение = тмпСтрока.goodPicturesChangeIndex;
			КонецЕсли;

			Если ТЗ.Колонки.Найти("companyPicturesChangeIndex") <> Неопределено Тогда
				НоваяСтрока = ТЗЗаголовок.Добавить();
				НоваяСтрока.Агент = тмпАгент.Агент;
				НоваяСтрока.Имя = "companyPicturesChangeIndex";
				НоваяСтрока.Значение = тмпСтрока.companyPicturesChangeIndex;
			КонецЕсли;
			
			Если ТЗ.Колонки.Найти("agentPicturesChangeIndex ") <> Неопределено Тогда
				НоваяСтрока = ТЗЗаголовок.Добавить();
				НоваяСтрока.Агент = тмпАгент.Агент;
				НоваяСтрока.Имя = "agentPicturesChangeIndex ";
				НоваяСтрока.Значение = тмпСтрока.agentPicturesChangeIndex;
			КонецЕсли;
			
			Если БылиИзменения Тогда
				Объ.Записать();
			КонецЕсли;
		КонецЕсли;
		
		ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Загружен заголовок.");
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьЗаявки(Агенты)
	
	ВидПрикладногоРешения = БПАГ.ПолучитьВидПрикладногоРешения();
	
	Если ВидПрикладногоРешения = "УТ10" Тогда
		ВидНоменклатурыТара = НастройкаИзКэша("1СВидНоменклатурыТара");
	КонецЕсли;
	
	Для Каждого тмпАгент Из Агенты Цикл
		ВариантЗагрузкиЗаявок = НастройкаИзКэша("1СВариантЗагрузкиЗаявок", тмпАгент.Агент);
		КонтрольОстатковВРеализацииПоЗаявке = НастройкаИзКэша("1СКонтрольОстатковВРеализацииПоЗаявке", тмпАгент.Агент);
		
		НастройкиДокументаЗаявка = ПолучитьНастройкиДокумента(Перечисления.БПАГВидыДокументов.Заявка, ТекущаяДата());
		Если (НастройкиДокументаЗаявка = Неопределено) И (ВариантЗагрузкиЗаявок <> Перечисления.БПАГВариантыЗагрузкиЗаявок.Реализация) Тогда
			ОтладочноеСообщение("Не заданы настройки для документа ""Заявка""! Загрузка остановлена. Задайте настройки и повторите загрузку.");
			Возврат;
		КонецЕсли;
		
		НастройкиДокументаРеализацияПоЗаявке = ПолучитьНастройкиДокумента(Перечисления.БПАГВидыДокументов.РеализацияПоЗаявке, ТекущаяДата(), тмпАгент.Агент);
		Если (НастройкиДокументаРеализацияПоЗаявке = Неопределено) И ((ВариантЗагрузкиЗаявок = Перечисления.БПАГВариантыЗагрузкиЗаявок.Реализация) ИЛИ (ВариантЗагрузкиЗаявок = Перечисления.БПАГВариантыЗагрузкиЗаявок.ЗаказИРеализация)) Тогда
			ОтладочноеСообщение("Не заданы настройки для документа ""Реализация по заявке""! Загрузка остановлена. Задайте настройки и повторите загрузку.");
			Возврат;
		КонецЕсли;
		
		Если СпецификаПользователя = "SD" Тогда
			//Проверим, существует ли каталог
			ПутьКаталога = КаталогОбмена + СокрЛП(тмпАгент.Код) + ПолучитьРазделительПути() + СокрЛП("OrdersDiff") + ПолучитьРазделительПути();
			Файл = Новый Файл(ПутьКаталога);
			Если НЕ Файл.Существует() Тогда
				Попытка
					СоздатьКаталог(ПутьКаталога);
					ОтладочноеСообщение("Создан новый каталог для хранения данных по оличиям от рекомендованного количества в заявках: " + ПутьКаталога);
				Исключение
					ОтладочноеСообщение("Каталог для хранения данных по оличиям от рекомендованного количества в заявках не создан: " + ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;
			//Таблица по отклонениям от рекомендованного количества
			//Год_месяц_день_час_минуты_секунды.txt
			ИмяФайла = Сред(СокрЛП(ТекущаяДата()), 7, 4) + "_" + Сред(СокрЛП(ТекущаяДата()), 4, 2) + "_" + Сред(СокрЛП(ТекущаяДата()), 1, 2) + "_" + Сред(СокрЛП(ТекущаяДата()), 12, 2) + "_" + Сред(СокрЛП(ТекущаяДата()), 15, 2)  + "_" + Сред(СокрЛП(ТекущаяДата()), 18, 2);
			Путь = КаталогОбмена + СокрЛП(тмпАгент.Код) + ПолучитьРазделительПути() + СокрЛП("OrdersDiff") + ПолучитьРазделительПути() + ИмяФайла;
			ТЗОтклоненияРекомендованные = Новый ТаблицаЗначений;
			ТЗОтклоненияРекомендованные.Колонки.Добавить("DocumentID");
			ТЗОтклоненияРекомендованные.Колонки.Добавить("TabDiff");
		КонецЕсли;
		
		ТЗ = ПолучитьТЗИзPlist(тмпАгент.Агент, "orders", "Не найдены заявки для ");
		Если ТЗ = Неопределено Тогда
			Продолжить;
		Иначе
			СчетДокументов = 0;
			СчетДокументовРеализацийНаОснованииЗаявки = 0;
			СчетОшибочных = 0;
			СчетОшибочныхРеализацийНаОснованииЗаявки = 0;
			Для Каждого тмпДокумент Из ТЗ Цикл
				
				//Глобальное изменение формата - игнорируем старые документы для совместимости
				ДатаПоследнегоИзменения = Дата(ПреобразоватьДатуВФормат24(тмпДокумент.date));
				Если ДатаПоследнегоИзменения < Дата(2013, 1, 15) Тогда
					Продолжить;
				КонецЕсли;
				//End Глобальное изменение формата - игнорируем старые документы для совместимости
				
				ЕстьОшибки = Ложь;
				СтрокаОшибок = "";
				
				Если ТЗ.Колонки.Найти("rowCount") <> Неопределено Тогда
					Если Число(тмпДокумент.rowCount) = 0 Тогда
						ЕстьОшибки = Истина;
						ОтладочноеСообщение("Заявка (номер на устройстве: " + тмпДокумент.number + ") пуста (не заполнена табличная часть). Документ проигнорирован!");
						СчетОшибочных = СчетОшибочных + 1;
						Продолжить;
					КонецЕсли;
				Иначе
					ЕстьОшибки = Истина;
					ОтладочноеСообщение("Заявка (номер на устройстве: " + тмпДокумент.number + ") выгружена без табличной части. Документ проигнорирован!");
					СчетОшибочных = СчетОшибочных + 1;
					Продолжить;
				КонецЕсли;
				
				//Заявка
				Если СпецификаПользователя = "SD" Тогда
					Если ВариантЗагрузкиЗаявок = Перечисления.БПАГВариантыЗагрузкиЗаявок.кпкЗаявка Тогда
						СозданнаяЗаявка = Документы.КпкЗаявка.ПустаяСсылка();
					Иначе
						СозданнаяЗаявка = Документы.ЗаказПокупателя.ПустаяСсылка();
					КонецЕсли;
				ИначеЕсли ВидПрикладногоРешения = "УТ11" Тогда
					СозданнаяЗаявка = Документы.ЗаказКлиента.ПустаяСсылка();
				Иначе	
					СозданнаяЗаявка = Документы.ЗаказПокупателя.ПустаяСсылка();
				КонецЕсли;
				
				Если ВариантЗагрузкиЗаявок <> Перечисления.БПАГВариантыЗагрузкиЗаявок.Реализация Тогда
					Запрос = Новый Запрос;
					Запрос.Текст =
					"ВЫБРАТЬ
					|	БПАГДокументыАгентовСрезПоследних.Документ КАК Ссылка
					|ИЗ
					|	РегистрСведений.БПАГДокументыАгентов.СрезПоследних(, ИД = &ИД) КАК БПАГДокументыАгентовСрезПоследних
					|ГДЕ
					|	БПАГДокументыАгентовСрезПоследних.ВидДокумента = &ВидДокумента";
					
					Запрос.УстановитьПараметр("ИД", тмпДокумент.uniqueID);
					Запрос.УстановитьПараметр("ВидДокумента", Перечисления.БПАГВидыДокументов.Заявка);
					
					ТребуетсяСоздатьИлиИзменитьДокумент = Истина;
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						Попытка
							Если Выборка.Ссылка.Пустая() Тогда
								Продолжить;
							ИначеЕсли Выборка.Ссылка.Проведен Тогда
								Если НастройкиДокументаЗаявка.Перепроводить Тогда
									Док = Выборка.Ссылка.ПолучитьОбъект();	
								Иначе
									ТребуетсяСоздатьИлиИзменитьДокумент = Ложь;	
									ЕстьОшибки = Истина;
									ОтладочноеСообщение("Документ " + Выборка.Ссылка + " (номер на устройстве: " + тмпДокумент.number + ") уже проведен! Перепроведение отключено в настройках.");
									СчетОшибочных = СчетОшибочных + 1;
								КонецЕсли;
							ИначеЕсли Выборка.Ссылка.ПометкаУдаления Тогда
								ТребуетсяСоздатьИлиИзменитьДокумент = Ложь;	
								ЕстьОшибки = Истина;
								ОтладочноеСообщение("Документ " + Выборка.Ссылка + " (номер на устройстве: " + тмпДокумент.number + ") был помечен на удаление в центральной базе! Документ не загружен.");
								СчетОшибочных = СчетОшибочных + 1;
							Иначе
								//Документ уже загружен, но не проведен
								Если НастройкиДокументаЗаявка.ПерезаписыватьНепроведенные Тогда
									Док = Выборка.Ссылка.ПолучитьОбъект();
									ТребуетсяСоздатьИлиИзменитьДокумент = Истина;	
								Иначе
									ТребуетсяСоздатьИлиИзменитьДокумент = Ложь;	
									ЕстьОшибки = Истина;
									ОтладочноеСообщение("Документ " + Выборка.Ссылка + " (номер на устройстве: " + тмпДокумент.number + ") уже был загружен! Перезапись непроведенных документов отключена в настройках.");
									СчетОшибочных = СчетОшибочных + 1;
								КонецЕсли;	
							КонецЕсли;
						Исключение
							Продолжить;
						КонецПопытки;
					Иначе
						
						Если СпецификаПользователя = "SD" Тогда
							Если ВариантЗагрузкиЗаявок = Перечисления.БПАГВариантыЗагрузкиЗаявок.кпкЗаявка Тогда
								СозданнаяЗаявка = Документы.КпкЗаявка.ПустаяСсылка();
								Док = Документы.КпкЗаявка.СоздатьДокумент(); 
							Иначе
								СозданнаяЗаявка = Документы.ЗаказПокупателя.ПустаяСсылка();
							КонецЕсли;
							
						ИначеЕсли ВидПрикладногоРешения = "УТ11" Тогда
							Док = Документы.ЗаказКлиента.СоздатьДокумент();
						Иначе
							Док = Документы.ЗаказПокупателя.СоздатьДокумент();
						КонецЕсли;
					КонецЕсли;
					
					//Если документ изначально создавался в 1С
					ДокументБылСозданВ1С = Ложь;
					Если Не ЕстьОшибки Тогда
						Если тмпДокумент.uniqueID = СокрЛП(Док.Ссылка.УникальныйИдентификатор()) Тогда
							ДокументБылСозданВ1С = Истина;
							ТребуетсяСоздатьИлиИзменитьДокумент = Ложь;
						КонецЕсли;
					КонецЕсли;
					Если ТребуетсяСоздатьИлиИзменитьДокумент Или ДокументБылСозданВ1С Тогда
						
						Если ТребуетсяСоздатьИлиИзменитьДокумент Тогда
							//Организация
							тмпКод = тмпДокумент.companyID;
							БПАГОрганизация = Справочники.БПАГОрганизации.НайтиПоКоду(тмпКод);
							Если БПАГОрганизация.Пустая() Тогда
								ЕстьОшибки = Истина;
								СтрокаОшибок = СтрокаОшибок + "Организация с кодом " + тмпКод + " не найдена! " + Символы.ПС;
								Организация = Справочники.Организации.ПустаяСсылка();
							Иначе
								Организация = БПАГОрганизация.Организация;
							КонецЕсли;
							
							//Контрагент или партнер
							Если СпецификаПользователя = "SD" Тогда
								тмпКод = тмпДокумент.clientID;
								БПАГКонтрагент = Справочники.Контрагенты.НайтиПоКоду(тмпКод);
								Если БПАГКонтрагент.Пустая() Тогда
									ЕстьОшибки = Истина;
									СтрокаОшибок = СтрокаОшибок + "Контрагент с кодом " + тмпКод + " не найден! " + Символы.ПС;
									Контрагент = Справочники.Контрагенты.ПустаяСсылка();
								Иначе
									Контрагент = БПАГКонтрагент.Ссылка;
								КонецЕсли;
							ИначеЕсли ВидПрикладногоРешения = "УТ11" Тогда
								тмпКод = тмпДокумент.clientID;
								БПАГКонтрагент = Справочники.БПАГКонтрагенты.НайтиПоКоду(тмпКод);
								Если БПАГКонтрагент.Пустая() Тогда
									ЕстьОшибки = Истина;
									СтрокаОшибок = СтрокаОшибок + "Партнер с кодом " + тмпКод + " не найден! " + Символы.ПС;
									Партнер = Справочники.Партнеры.ПустаяСсылка();
								Иначе
									Партнер = БПАГКонтрагент.Партнер;
								КонецЕсли;
							Иначе
								тмпКод = тмпДокумент.clientID;
								БПАГКонтрагент = Справочники.БПАГКонтрагенты.НайтиПоКоду(тмпКод);
								Если БПАГКонтрагент.Пустая() Тогда
									ЕстьОшибки = Истина;
									СтрокаОшибок = СтрокаОшибок + "Контрагент с кодом " + тмпКод + " не найден! " + Символы.ПС;
									Контрагент = Справочники.Контрагенты.ПустаяСсылка();
								Иначе
									Контрагент = БПАГКонтрагент.Контрагент;
								КонецЕсли;
							КонецЕсли;
							
							//Склад
							тмпКод = тмпДокумент.depotID;
							БПАГСклад = Справочники.БПАГСклады.НайтиПоКоду(тмпКод);
							//Договор или соглашение
							Если БПАГСклад.Пустая() Тогда
								ЕстьОшибки = Истина;
								СтрокаОшибок = СтрокаОшибок + "Склад с кодом " + тмпКод + " не найден! " + Символы.ПС;
								Если СпецификаПользователя = "SD" Тогда
									Склад = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
								ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
									Склад = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
								Иначе
									Склад = Справочники.Склады.ПустаяСсылка();
								КонецЕсли;
							Иначе
								Склад = БПАГСклад.Склад;
							КонецЕсли;
							Если СпецификаПользователя = "SD" Тогда
								//нет договора
							ИначеЕсли ВидПрикладногоРешения = "УТ11" Тогда
								тмпНаименованиеСоглашения = Сред(тмпДокумент.analyticsID, СтрДлина(БПАГКонтрагент.Код) + 1);
								Соглашение = ПолучитьСоглашение(тмпНаименованиеСоглашения, Партнер);
								Если Соглашение.Пустая() Тогда
									ЕстьОшибки = Истина;
									СтрокаОшибок = СтрокаОшибок + "Соглашение с наименованием " + тмпНаименованиеСоглашения + " не найдено! " + Символы.ПС;
								КонецЕсли
							Иначе
								тмпКод = тмпДокумент.analyticsID;
								Договор = Справочники.ДоговорыКонтрагентов.НайтиПоКоду(тмпКод);
								Если Договор.Пустая() Тогда
									ЕстьОшибки = Истина;
									СтрокаОшибок = СтрокаОшибок + "Договор с кодом " + тмпКод + " не найден! " + Символы.ПС;
								КонецЕсли;	
							КонецЕсли;
							
							//Тип цен
							тмпКод = тмпДокумент.priceTypeID;
							БПАГПрайс = Справочники.БПАГПрайсы.НайтиПоКоду(тмпКод);
							Если БПАГПрайс.Пустая() Тогда
								ЕстьОшибки = Истина;
								СтрокаОшибок = СтрокаОшибок + "Прайс с кодом " + тмпКод + " не найден! " + Символы.ПС;
								Если СпецификаПользователя = "SD" Тогда
									ТипЦен = Справочники.ТипыЦен.ПустаяСсылка();
								ИначеЕсли (ВидПрикладногоРешения = "УТ11") ИЛИ (ВидПрикладногоРешения = "УНФ") Тогда
									ТипЦен = Справочники.ВидыЦен.ПустаяСсылка();
								Иначе
									ТипЦен = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
								КонецЕсли;
							Иначе
								ТипЦен = БПАГПрайс.ТипЦен;
							КонецЕсли;
							
							//Торговая точка
							Если СпецификаПользователя = "SD" Тогда
							Иначе	
								тмпКод = тмпДокумент.posID;
								ТорговаяТочка = Справочники.БПАГТорговыеТочки.НайтиПоКоду(тмпКод);
								Если ТорговаяТочка.Пустая() Тогда
									ЕстьОшибки = Истина;
									СтрокаОшибок = СтрокаОшибок + "Торговая точка с кодом " + тмпКод + " не найдена! " + Символы.ПС;
								КонецЕсли;
							КонецЕсли;
							
							//Дата доставки
							ДатаДоставки = БлижайшийРабочийДень(Дата(ПреобразоватьДатуВФормат24(тмпДокумент.deliveryDate)), Организация);
							
							Если СпецификаПользователя = "SD" Тогда
								Если ВариантЗагрузкиЗаявок = Перечисления.БПАГВариантыЗагрузкиЗаявок.Заказ Тогда
									Попытка
										Для Каждого тмпСтрока Из тмпДокумент.properties Цикл
											
											Если тмпСтрока.identifier = "FTPackage" Тогда
												
												Док.НомерЗаказа = Справочники.НомераПачек.НайтиПоНаименованию(тмпСтрока.value);
												
											КонецЕсли;
											
										КонецЦикла;
										
									Исключение
										ОтладочноеСообщение("Ошибка при загрузке свойств: " + ОписаниеОшибки());
									КонецПопытки;
									
									//Дата доставки
									ДатаДоставки = Дата(тмпДокумент.deliveryDate);	
									
									Док.Комментарий = СокрЛП(Док.НомерЗаказа) + " / " + СокрЛП(тмпДокумент.comment);
								Иначе
									//Дата доставки
									ДатаДоставки = ТекущаяДата();
									
									Док.Комментарий = ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", "Пан Агент (" + тмпАгент.Агент + ") ") + ?(СокрЛП(тмпДокумент.comment) = "", "", ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", " (") + тмпДокумент.comment + ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", ")"));
									
								КонецЕсли;
							КонецЕсли;	
							//Номер
							Номер = тмпДокумент.number;
							
							//Сумма документа
							СуммаДокумента = Число(тмпДокумент.sum);
							
							//Дата последнего изменения
							ДатаПоследнегоИзменения = Дата(ПреобразоватьДатуВФормат24(тмпДокумент.date));
							
							//Заполнение (перезаполнение) документа
							Если СпецификаПользователя = "SD" Тогда
								Если НЕ ЗначениеЗаполнено(Док.МаршрутРазвоза) Тогда
									Док.МаршрутРазвоза = Справочники.МаршрутыРазвоза.ПустойМаршрут;
								КонецЕсли;
								Док.Дата = ТекущаяДата();
								//Выполнить("Док.Автор = Пользователи.ТекущийПользователь();"); //LENA
								Док.Автор = Пользователи.ТекущийПользователь();
								Док.ТипЦен = ТипЦен;
								Док.ДатаДоставки = ДатаДоставки;
								
								Док.Контрагент = Контрагент;
								Док.Организация = Организация;
								Док.Подразделение 	= Склад;
								Док.Менеджер 		= тмпАгент.Агент.Менеджер;
								
								Док.ГПСШирота 	= тмпДокумент.createdLatitude;
								Док.ГПСДолгота 	= тмпДокумент.createdLongitude;
								Док.КпкДатаСоздания = тмпДокумент.createdLocationDate;
								
								
								
							ИначеЕсли ВидПрикладногоРешения = "УТ11" Тогда
								
								Попытка
									Док.ЦенаВключаетНДС = НастройкаИзКэша("1ССуммаВключаетНДС");
								Исключение
								КонецПопытки;
								
								Если СпецификаПользователя = "FT" Тогда
									Док.Дата = ТекущаяДата();
								Иначе	
									Док.Дата = ДатаПоследнегоИзменения;
								КонецЕсли;
								
								Попытка
									Док.Приоритет = Перечисления.Приоритеты.Средний;
								Исключение
								КонецПопытки;
								Попытка
									Если НЕ ЗначениеЗаполнено(Док.Приоритет) Тогда
										СправочникПриоритеты = Справочники.Приоритеты.Выбрать();
										Пока СправочникПриоритеты.Следующий() Цикл
											ТекущийПриоритет = СправочникПриоритеты.Ссылка;
										КонецЦикла;
										Док.Приоритет = ТекущийПриоритет;
									КонецЕсли;
								Исключение
								КонецПопытки;
								
								Док.Валюта = мВалютаРегламентированногоУчета;
								
								Док.Грузополучатель = ?(ТорговаяТочка.Грузополучатель.Пустая(), Контрагент, ТорговаяТочка.Грузополучатель);
								
								Док.Комментарий = ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", "Пан Агент (" + тмпАгент.Агент + ") №" + Номер) + ?(СокрЛП(тмпДокумент.comment) = "", "", ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", " (") + тмпДокумент.comment + ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", ")"));
								
								Док.Партнер = Партнер;
								Док.Контрагент = ПолучитьКонтрагентаПартнера(Док.Партнер);
								Док.Организация = Организация;
								
								Док.СуммаДокумента = СуммаДокумента;
								
								Док.Менеджер = ПолучитьОтветственного(тмпАгент);
								Док.Подразделение = Док.Менеджер.ТекущееПодразделение;
								
								Док.СкидкиРассчитаны = Истина;
								Док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
								
								тмпСтатус = НастройкаИзКэша("1ССтатусЗаявок", тмпАгент.Агент);
								Если (тмпСтатус = "Ошибка") Или (тмпСтатус.Пустая()) Тогда
									Док.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке;
								Иначе
									Док.Статус = тмпСтатус;
								КонецЕсли;
								
								Док.Сделка = СозданнаяЗаявка;
								
								Док.Соглашение = Соглашение;
								Если Не БПАГКонтрагент.Пустая() Тогда
									Док.ЗаполнитьУсловияПродажПоCоглашению();
								КонецЕсли;
								
								Док.Склад = Склад;
								
								Док.АдресДоставки = ТорговаяТочка.Адрес;
								
								Попытка
									Выполнить("Док.ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(Док)");
								Исключение
								КонецПопытки;
								
							ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
								
								Если СпецификаПользователя = "FT" Тогда
									Док.Дата = ТекущаяДата();
								Иначе	
									Док.Дата = ДатаПоследнегоИзменения;
								КонецЕсли;
								Выполнить("Док.Автор = Пользователи.ТекущийПользователь();");
								Док.Договор = Договор;
								Док.ВалютаДокумента = Док.Договор.ВалютаРасчетов;
								Док.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу;
								Док.ВидСкидкиНаценки = Док.Договор.ВидСкидкиНаценки;
								Док.ВидЦен = ТипЦен;
								Док.ДатаИзменения = ДатаПоследнегоИзменения;
								Док.ДатаОтгрузки = ДатаДоставки;
								Док.Комментарий = ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", "Пан Агент (" + тмпАгент.Агент + ") №" + Номер) + ?(СокрЛП(тмпДокумент.comment) = "", "", ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", " (") + тмпДокумент.comment + ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", ")"));
								Док.Контрагент = Контрагент;
								Док.Кратность = 1;
								Док.Курс = 1;
								Док.Организация = Организация;
								Док.Ответственный = ПолучитьОтветственного(тмпАгент);
								Док.СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.Открыт;
								Док.СтруктурнаяЕдиницаПродажи = Склад;
								
								Выполнить("Док.НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Организация,, Док.Дата);");
								Док.СуммаВключаетНДС = Док.ВидЦен.ЦенаВключаетНДС;
								Док.СуммаДокумента = СуммаДокумента;
								Док.ИспользоватьТовары = Истина;
								
							Иначе
								
								Если СпецификаПользователя = "FT" Тогда
									Док.Дата = ТекущаяДата();
								ИначеЕсли СпецификаПользователя = "Sarmat" Тогда 
									Док.Дата = ТекущаяДата();
								Иначе	
									Док.Дата = Мин(ТекущаяДата(), Макс(ДатаДоставки, ДатаПоследнегоИзменения));
								КонецЕсли;
								
								Док.АдресДоставки = ТорговаяТочка.Адрес;
								Попытка
									Док.ДополнениеКАдресуДоставки = ПолучитьКомментарийКИ(Контрагент, Док.АдресДоставки);
								Исключение
								КонецПопытки;
								
								Док.ВалютаДокумента = мВалютаРегламентированногоУчета;
								Попытка
									Док.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
								Исключение
								КонецПопытки;
								Док.ДатаОтгрузки = ДатаДоставки;
								
								Попытка
									Док.Грузоотправитель = Организация;
								Исключение
								КонецПопытки;
								
								Док.Грузополучатель = ?(ТорговаяТочка.Грузополучатель.Пустая(), Контрагент, ТорговаяТочка.Грузополучатель);
								Док.ДоговорКонтрагента = Договор;
								
								Док.Комментарий = ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", "Пан Агент (" + тмпАгент.Агент + ") №" + Номер) + ?(СокрЛП(тмпДокумент.comment) = "", "", ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", " (") + тмпДокумент.comment + ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", ")"));
								
								Док.Контрагент = Контрагент;
								Док.КратностьВзаиморасчетов = 1;
								Док.КурсВзаиморасчетов = 1;
								Док.Организация = Организация;
								Если СпецификаПользователя = "Adal" Тогда
									Если Не Контрагент.Пустая() Тогда
										Док.СкладГруппа = Контрагент.ОсновнойСклад;
									КонецЕсли;
								Иначе	
									Док.СкладГруппа = Склад;
								КонецЕсли;
								Док.СуммаДокумента = СуммаДокумента;
								Док.Подразделение = НастройкаИзКэша("1СОсновноеПодразделение", тмпАгент.Агент);
								
								Попытка
									Выполнить("УправлениеЗаказами.УстановитьДатуОплатыПоДоговору(Док);");
								Исключение
								КонецПопытки;
								
								Выполнить("ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Док, ""Продажа"");");
								ПриИзмененииЗначенияОрганизации(Док);
								
								Попытка
									Док.ОтражатьВБухгалтерскомУчете = НастройкиДокументаЗаявка.ОтражатьВБУ;
									Док.ОтражатьВНалоговомУчете = НастройкиДокументаЗаявка.ОтражатьВНУ;
								Исключение
								КонецПопытки;
								
								Док.Ответственный = ПолучитьОтветственного(тмпАгент);
								
								Док.ТипЦен = ТипЦен;
								
							КонецЕсли;
							
							//Загрузка табличной части
							Если СпецификаПользователя = "SD" Тогда
								Док.Запасы.Очистить();
							ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
								Док.Запасы.Очистить();
							Иначе
								Док.Товары.Очистить();
							КонецЕсли;
							
							Для Каждого тмп Из тмпДокумент.rows Цикл
								тмп.sort = Число(тмп.sort);
							КонецЦикла;
							тмпДокумент.rows.Сортировать("sort");
							Для Каждого тмпСтрока Из тмпДокумент.rows Цикл
								
								//Товар
								тмпКод = тмпСтрока.goodID;
								тмпНазваниеХарактеристики = "";
								
								ПозицияРазделителяХарактеристики = Найти(тмпСтрока.goodID, ":|");
								Если ПозицияРазделителяХарактеристики > 0 Тогда
									тмпКод = Лев(тмпСтрока.goodID, ПозицияРазделителяХарактеристики - 1);
									тмпНазваниеХарактеристики = Сред(тмпСтрока.goodID, ПозицияРазделителяХарактеристики + 2);
								КонецЕсли;
								
								БПАГНоменклатура = Справочники.БПАГНоменклатура.НайтиПоКоду(тмпКод);
								Если БПАГНоменклатура.Пустая() Тогда
									ЕстьОшибки = Истина;
									СтрокаОшибок = СтрокаОшибок + "Товар с кодом " + тмпКод + " не найден! " + Символы.ПС;
									Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
								Иначе
									Номенклатура = БПАГНоменклатура.Номенклатура;
								КонецЕсли;
								Если СпецификаПользователя <> "SD" Тогда
									Характеристика = ПолучитьХарактеристику(Номенклатура, тмпНазваниеХарактеристики);
								КонецЕсли;
								
								//Единица измерения
								Если СпецификаПользователя = "SD" Тогда
									тмпНаименование = тмпСтрока.unit;
								КонецЕсли;	
								тмпКоэффициент = Число(тмпСтрока.coeff);
								Если СпецификаПользователя <> "SD" Тогда
									ЕдиницаИзмерения = ПолучитьЕдиницуИзмерения(тмпСтрока, Номенклатура, ЕстьОшибки, СтрокаОшибок);
								КонецЕсли;
								//Цена
								Цена = Число(тмпСтрока.price);
								
								
								//Количество
								Количество = Число(тмпСтрока.quantity);
								
								//Сумма
								Сумма = Число(тмпСтрока.sum);
								
								//Цена без скидки
								ЦенаБезСкидки = 0;
								Попытка
									ЦенаБезСкидки = Число(тмпСтрока.originalPrice);
								Исключение
								КонецПопытки;
								
								//Процент скидки
								ПроцентСкидки = 0;
								Попытка
									ПроцентСкидки = Число(тмпСтрока.discountPercent);
								Исключение
								КонецПопытки;
								
								//Сумма скидки
								СуммаСкидки = 0;
								Попытка
									СуммаСкидки = Число(тмпСтрока.discountSum);
								Исключение
								КонецПопытки;
								
								Если СпецификаПользователя = "SD" Тогда
									Если Окр(Количество, 3) > 0 Тогда
										
										НоваяСтрока = Док.Запасы.Добавить();
										
										НоваяСтрока.Номенклатура = Номенклатура;
										НоваяСтрока.Количество = Количество * тмпКоэффициент;
										
										
									КонецЕсли;
								ИначеЕсли ВидПрикладногоРешения = "УТ11" Тогда
									Если Окр(Количество, 3) > 0 Тогда
										НоваяСтрока = Док.Товары.Добавить();
										
										Попытка
											НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
										Исключение
										КонецПопытки;
										
										НоваяСтрока.Номенклатура = Номенклатура;
										НоваяСтрока.КоличествоУпаковок = Количество;
										НоваяСтрока.Количество = НоваяСтрока.КоличествоУпаковок * тмпКоэффициент;
										НоваяСтрока.Характеристика = Характеристика;
										
										//Цена
										//Если (СпецификаПользователя <> "FT") ИЛИ (Док.Соглашение.Типовое) Тогда
										НоваяСтрока.ВидЦены = ТипЦен;
										//КонецЕсли;
										
										Если НастройкаИзКэша("1СЗагружатьДокументыВБазовыхЕдиницах", тмпАгент.Агент) Тогда
											// ***** NIY (IO)
											ОтладочноеСообщение("Загрузка заявок с учетом настройки '1СЗагружатьДокументыВБазовыхЕдиницах'. Для версии Управление торговлей 11 загрузка номенклатуры в базовых единицах не предусмотрена.  NIY.");
											//НоваяСтрока.Упаковка = НоваяСтрока.Номенклатура. .ЕдиницаХраненияОстатков;
											//НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
											//Если ЦенаБезСкидки = 0 Тогда
											//	НоваяСтрока.Цена = ?(тмпКоэффициент = 0, 0, Цена / тмпКоэффициент * НоваяСтрока.Коэффициент);
											//Иначе
											//	НоваяСтрока.Цена = ?(тмпКоэффициент = 0, 0, ЦенаБезСкидки / тмпКоэффициент * НоваяСтрока.Коэффициент);
											//	НоваяСтрока.ПроцентАвтоматическихСкидок = ПроцентСкидки;
											//	НоваяСтрока.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.БезУсловий;
											//КонецЕсли;
											//НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
										Иначе
											НоваяСтрока.Упаковка = ЕдиницаИзмерения;
											Если ЦенаБезСкидки = 0 Тогда
												НоваяСтрока.Цена = Цена;
											Иначе
												НоваяСтрока.Цена = ЦенаБезСкидки;
												НоваяСтрока.ПроцентРучнойСкидки = ПроцентСкидки;
												НоваяСтрока.СуммаРучнойСкидки = СуммаСкидки;
											КонецЕсли;
										КонецЕсли;
										
										НоваяСтрока.Сумма = Сумма;
										
										НоваяСтрока.Склад = Док.Склад;
										НоваяСтрока.ДатаОтгрузки = ДатаДоставки;
										
										СтруктураПересчетаСуммы = Неопределено;
										Выполнить("СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);");
										
										СтруктураДействий = Новый Структура;
										СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
										СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Док.НалогообложениеНДС);
										СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
										СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
										КэшированныеЗначения = Неопределено;
										Выполнить("ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);");									
									КонецЕсли;
									
								ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
									
									Если Окр(Количество, 3) > 0 Тогда
										НоваяСтрока = Док.Запасы.Добавить();
										НоваяСтрока.Номенклатура = Номенклатура;
										НоваяСтрока.ДатаОтгрузки = ДатаДоставки;
										
										НоваяСтрока.Количество = Количество;
										
										Если НастройкаИзКэша("1СЗагружатьДокументыВБазовыхЕдиницах", тмпАгент.Агент) Тогда
											// ***** NIY (IO)
											ОтладочноеСообщение("Загрузка заявок с учетом настройки '1СЗагружатьДокументыВБазовыхЕдиницах'. Для версии Управление небольшой фирмой загрузка номенклатуры в базовых единицах не предусмотрена.  NIY.");
										Иначе
											НоваяСтрока.ЕдиницаИзмерения = ЕдиницаИзмерения;
											Если ЦенаБезСкидки = 0 Тогда
												НоваяСтрока.Цена = Цена;
											Иначе
												НоваяСтрока.Цена = ЦенаБезСкидки;
												НоваяСтрока.ПроцентСкидкиНаценки = ПроцентСкидки;
											КонецЕсли;
										КонецЕсли;
										
										НоваяСтрока.Сумма = Сумма;
										НоваяСтрока.Всего = Сумма;
										
										СтруктураДанные = Новый Структура();
										СтруктураДанные.Вставить("Организация", Организация);
										СтруктураДанные.Вставить("Номенклатура", НоваяСтрока.Номенклатура);
										СтруктураДанные.Вставить("Характеристика", НоваяСтрока.Характеристика);
										СтруктураДанные.Вставить("НалогообложениеНДС", Док.НалогообложениеНДС);
										
										Если ЗначениеЗаполнено(Док.ВидЦен) Тогда
											
											СтруктураДанные.Вставить("ДатаОбработки",	 Док.Дата);
											СтруктураДанные.Вставить("ВалютаДокумента",  Док.ВалютаДокумента);
											СтруктураДанные.Вставить("СуммаВключаетНДС", Док.СуммаВключаетНДС);
											СтруктураДанные.Вставить("ВидЦен", Док.ВидЦен);
											СтруктураДанные.Вставить("Коэффициент", 1);
											СтруктураДанные.Вставить("ВидСкидкиНаценки", Док.ВидСкидкиНаценки);
											
										КонецЕсли;
										
										СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
										
										НоваяСтрока.СтавкаНДС = СтруктураДанные.СтавкаНДС;
										НоваяСтрока.ТипНоменклатурыЗапас = СтруктураДанные.ЭтоЗапас;
										
										ЧислоСтавкаНДС = 0;
										Выполнить("ЧислоСтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);");
										
										НоваяСтрока.СуммаНДС = ?(Док.СуммаВключаетНДС, 
										НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((ЧислоСтавкаНДС + 100) / 100),
										НоваяСтрока.Сумма * ЧислоСтавкаНДС / 100);
									КонецЕсли;
									
								Иначе
									Если Окр(Количество, 3) > 0 Тогда
										Если (Номенклатура.ВидНоменклатуры = ВидНоменклатурыТара) И (НЕ Номенклатура.ВидНоменклатуры.Пустая()) Тогда
											//Тара
											
											НоваяСтрока = Док.ВозвратнаяТара.Добавить();
											НоваяСтрока.Номенклатура = Номенклатура;
											НоваяСтрока.Количество = Количество;
											
											НоваяСтрока.Цена = Цена;
											НоваяСтрока.Сумма = Сумма;
											
											Выполнить("ОбработкаТабличныхЧастей.ПриИзмененииВозвратнойТарыТабЧасти(НоваяСтрока, Док);");
											
											Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(НоваяСтрока, Док);");
											
											Попытка
												Док.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "ВозвратнаяТара", Док.ОтражатьВБухгалтерскомУчете, Док.ОтражатьВНалоговомУчете);
											Исключение
											КонецПопытки;
											
										Иначе
											//Не тара, обычная номенклатура
											
											НоваяСтрока = Док.Товары.Добавить();
											НоваяСтрока.Номенклатура = Номенклатура;
											НоваяСтрока.Количество = Количество;
											НоваяСтрока.ХарактеристикаНоменклатуры = Характеристика;
											
											Если НастройкаИзКэша("1СЗагружатьДокументыВБазовыхЕдиницах", тмпАгент.Агент) Тогда
												НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
												НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
												Если ЦенаБезСкидки = 0 Тогда
													НоваяСтрока.Цена = ?(тмпКоэффициент = 0, 0, Цена / тмпКоэффициент * НоваяСтрока.Коэффициент);
												Иначе
													НоваяСтрока.Цена = ?(тмпКоэффициент = 0, 0, ЦенаБезСкидки / тмпКоэффициент * НоваяСтрока.Коэффициент);
													НоваяСтрока.ПроцентАвтоматическихСкидок = ПроцентСкидки;
													Если ПроцентСкидки <> 0 Тогда
														НоваяСтрока.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.БезУсловий;
													КонецЕсли;
												КонецЕсли;
												НоваяСтрока.Количество = НоваяСтрока.Количество * тмпКоэффициент;
											Иначе
												НоваяСтрока.ЕдиницаИзмерения = ЕдиницаИзмерения;
												НоваяСтрока.Коэффициент = ЕдиницаИзмерения.Коэффициент;
												Если ЦенаБезСкидки = 0 Тогда
													НоваяСтрока.Цена = Цена;
												Иначе
													НоваяСтрока.Цена = ЦенаБезСкидки;
													НоваяСтрока.ПроцентАвтоматическихСкидок = ПроцентСкидки;
													Если ПроцентСкидки <> 0 Тогда
														НоваяСтрока.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.БезУсловий;
													КонецЕсли;
												КонецЕсли;
											КонецЕсли;
											
											НоваяСтрока.Сумма = Сумма;
											
											Выполнить("ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НоваяСтрока, Док);");
											
											Попытка
												Док.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", Док.ОтражатьВБухгалтерскомУчете, Док.ОтражатьВНалоговомУчете);
											Исключение
											КонецПопытки;
											
											Попытка
												Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, Док, ""Реализация"");");
											Исключение
												Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, Док);");
											КонецПопытки;
											
											Попытка
												Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(НоваяСтрока, Док);");
											Исключение
											КонецПопытки;
											
											Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, Док);");
											Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, Док);");
											
											НоваяСтрока.КлючСтроки = НоваяСтрока.НомерСтроки;
											
											Выполнить("УправлениеЗапасами.ДобавитьСоставНабора(НоваяСтрока, Док);");
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;	
							КонецЦикла;
							
							Если СпецификаПользователя <> "SD" Тогда
								//Заполнение графика оплаты
								Если ВидПрикладногоРешения = "УТ11" Тогда
									Если Док.ЭтапыГрафикаОплаты.Количество() = 0 Тогда
										НоваяСтрокаОплаты = Док.ЭтапыГрафикаОплаты.Добавить();
										НоваяСтрокаОплаты.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки;
										НоваяСтрокаОплаты.ДатаПлатежа = ДатаДоставки;
										НоваяСтрокаОплаты.ПроцентПлатежа = 100;
										НоваяСтрокаОплаты.СуммаПлатежа = Док.СуммаДокумента;
									КонецЕсли;
								ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
									
								КонецЕсли;
								
								//Проверим заполнение цен комплектующих и установим в 1 рубль, если отсутствуют
								Если ВидПрикладногоРешения = "УТ10" Тогда
									Для Каждого тмпСтрока Из Док.СоставНабора Цикл
										Если тмпСтрока.Цена = 0 Тогда
											тмпСтрока.Цена = 1;
										КонецЕсли;
									КонецЦикла;
								КонецЕсли;
								
								// Если есть категории "PostUU", "PostBU", "DontPostUU", "DontPostBU", то соответствующим образом проставим отражения в учетах
								УстановитьСпособыОтраженияВУчетах(тмпДокумент, Док);
							КонецЕсли;
							
							СчетДокументов = СчетДокументов + 1;
							Если ЕстьОшибки Тогда
								
								//Док.ОбменДанными.Загрузка = Истина;
								Док.Записать(РежимЗаписиДокумента.Запись);	
								
								ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Заявка " + Номер + " (Заказ покупателя " + Док.Номер + ") - возникли ошибки при загрузке: ");
								ОтладочноеСообщение(СтрокаОшибок);
								СчетОшибочных = СчетОшибочных + 1;
							Иначе	
								//Док.ОбменДанными.Загрузка = Истина;
								
								Попытка
									Док.Записать(?(НастройкиДокументаЗаявка.Проводить, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
								Исключение
									ЕстьОшибки = Истина;
									СчетОшибочных = СчетОшибочных + 1;
									ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Заявка " + Номер + " (Заказ покупателя " + Док.Номер + ") - возникли ошибки при загрузке: ");
									ОтладочноеСообщение(ОписаниеОшибки());
									Попытка
										Док.Записать(РежимЗаписиДокумента.Запись);
									Исключение
										ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Заявка " + Номер + " (Заказ покупателя " + Док.Номер + ") - возникли ошибки при загрузке: ");
										ОтладочноеСообщение(ОписаниеОшибки());
									КонецПопытки;
								КонецПопытки;
								
							КонецЕсли;
							
						КонецЕсли;
						
						//Свойства и категории
						//Если ВидПрикладногоРешения = "УТ10" Тогда
						УстановитьСвойстваИКатегории(тмпДокумент, Док);	
						//КонецЕсли;
						Если СпецификаПользователя = "SD" Тогда
							Если тмпДокумент.properties.Количество() > 0 Тогда
								Для Каждого тмпСтрокаСвойств Из тмпДокумент.properties Цикл
									Если тмпСтрокаСвойств.uniqueID = "RECOMMENDED_DIFF" Тогда
										//Найти файл лога загрузки, если он есть
										Файл = Новый Файл(Путь);
										Если Файл.Существует() Тогда
											Попытка
												ТЗОтклоненияРекомендованные = ЗначениеИзФайла(Путь);	
											Исключение	
											КонецПопытки;
										КонецЕсли;
										//Если Файл существует, то поищем в нем текущий документ
										Если ТЗОтклоненияРекомендованные.Количество() > 0 Тогда
											ОбрабатываемыйДокумент = ТЗОтклоненияРекомендованные.Найти(тмпДокумент.uniqueID, "DocumentID");
											Если ОбрабатываемыйДокумент <> Неопределено Тогда 
												Прервать;
											КонецЕслИ;
										КонецЕсли;
										
										//Документ не записан в файл транзации. Нужно добавить в таблицу лога и записать после обработки всех заявок.
										//Таблица с отклонениями от рекомендуемого количества по текущей заявке
										ТЗДанные = Новый ТаблицаЗначений;
										ТЗДанные.Колонки.Добавить("DocumentID");
										ТЗДанные.Колонки.Добавить("goodID");
										ТЗДанные.Колонки.Добавить("actualQty");
										ТЗДанные.Колонки.Добавить("recommendedQty");
										
										Для Каждого тмпСтрокаОтклонений Из тмпСтрокаСвойств.value Цикл
											НоваяСтрока = ТЗДанные.Добавить();
											НоваяСтрока.DocumentID = тмпДокумент.uniqueID;
											НоваяСтрока.goodID = тмпСтрокаОтклонений.goodID;
											НоваяСтрока.actualQty = тмпСтрокаОтклонений.actualQty;
											НоваяСтрока.recommendedQty = тмпСтрокаОтклонений.recommendedQty;
										КонецЦикла;
										
										НоваяСтрокаЛога = ТЗОтклоненияРекомендованные.Добавить();
										НоваяСтрокаЛога.DocumentID = тмпДокумент.uniqueID;
										НоваяСтрокаЛога.TabDiff = ТЗДанные;
										
									КонецЕсли;
								КонецЦикла;	
							КонецЕсли;
						КонецЕсли;	
						//Запомним для подстановки в реализацию по заявке
						СозданнаяЗаявка = Док.Ссылка;
						Если НЕ ТребуетсяСоздатьИлиИзменитьДокумент Тогда
							//Торговая точка
							тмпКод = тмпДокумент.posID;
							ТорговаяТочка = Справочники.БПАГТорговыеТочки.НайтиПоКоду(тмпКод);
							//Номер
							Номер = тмпДокумент.number;
						КонецЕсли;
						//Запишем данные в служебный регистр
						НоваяЗаписьДокументыАгентов = РегистрыСведений.БПАГДокументыАгентов.СоздатьМенеджерЗаписи();
						НоваяЗаписьДокументыАгентов.ВидДокумента = Перечисления.БПАГВидыДокументов.Заявка;
						
						НоваяЗаписьДокументыАгентов.Период = ТекущаяДата();
						НоваяЗаписьДокументыАгентов.Агент = тмпАгент.Агент;
						НоваяЗаписьДокументыАгентов.Документ = Док.Ссылка;
						Если СпецификаПользователя <> "SD" Тогда
							НоваяЗаписьДокументыАгентов.ТорговаяТочка = ТорговаяТочка;
						КонецЕсли;
						НоваяЗаписьДокументыАгентов.ДатаСозданияНаУстройстве = Дата(ПреобразоватьДатуВФормат24(тмпДокумент.createdDate));
						НоваяЗаписьДокументыАгентов.ДатаИзмененияНаУстройстве = Дата(ПреобразоватьДатуВФормат24(тмпДокумент.modifiedDate));
						
						НоваяЗаписьДокументыАгентов.ИД = тмпДокумент.uniqueID;
						НоваяЗаписьДокументыАгентов.НомерДокументаНаУстройстве = Номер;
						НоваяЗаписьДокументыАгентов.ШиротаСоздания = Число(тмпДокумент.createdLatitude);
						НоваяЗаписьДокументыАгентов.ДолготаСоздания = Число(тмпДокумент.createdLongitude);
						НоваяЗаписьДокументыАгентов.ШиротаИзменения = Число(тмпДокумент.modifiedLatitude);
						НоваяЗаписьДокументыАгентов.ДолготаИзменения = Число(тмпДокумент.modifiedLongitude);
						НоваяЗаписьДокументыАгентов.МоментСозданияПоGPS = ?(тмпДокумент.createdLocationDate = "", 0, Дата(ПреобразоватьДатуВФормат24(тмпДокумент.createdLocationDate)));
						НоваяЗаписьДокументыАгентов.МоментИзмененияПоGPS = ?(тмпДокумент.modifiedLocationDate = "", 0, Дата(ПреобразоватьДатуВФормат24(тмпДокумент.modifiedLocationDate)));
						
						//Последняя проверка на то, что документ не пуст
						Если СокрЛП(НоваяЗаписьДокументыАгентов.Документ) = "" Тогда
							ОтладочноеСообщение("(!!!) Критическая ошибка базы данных. Обнаружена пустая ссылка на документ.");
							#Если Клиент Тогда
								Предупреждение("Критическая ошибка базы данных. Обнаружена пустая ссылка на документ. Обратитесь к системному администратору. Подробности зафиксированы в журнале (каталог logs папки обмена).", 10);
							#КонецЕсли
						Иначе	
							НоваяЗаписьДокументыАгентов.Записать();
						КонецЕсли;
						
					КонецЕсли;				
				КонецЕсли;
				
				//Реализация по заявке
				Если (ВариантЗагрузкиЗаявок = Перечисления.БПАГВариантыЗагрузкиЗаявок.ЗаказИРеализация) ИЛИ (ВариантЗагрузкиЗаявок = Перечисления.БПАГВариантыЗагрузкиЗаявок.Реализация) Тогда
					
					Запрос = Новый Запрос;
					Запрос.Текст =
					"ВЫБРАТЬ
					|	БПАГДокументыАгентовСрезПоследних.Документ КАК Ссылка
					|ИЗ
					|	РегистрСведений.БПАГДокументыАгентов.СрезПоследних(, ИД = &ИД) КАК БПАГДокументыАгентовСрезПоследних
					|ГДЕ
					|	БПАГДокументыАгентовСрезПоследних.ВидДокумента = &ВидДокумента";
					
					
					Если ВариантЗагрузкиЗаявок = Перечисления.БПАГВариантыЗагрузкиЗаявок.Реализация Тогда
						Запрос.УстановитьПараметр("ИД", тмпДокумент.uniqueID);
					Иначе	
						Запрос.УстановитьПараметр("ИД", "SAL" + тмпДокумент.uniqueID);
					КонецЕсли;
					
					Запрос.УстановитьПараметр("ВидДокумента", Перечисления.БПАГВидыДокументов.РеализацияПоЗаявке);
					
					ТребуетсяСоздатьИлиИзменитьДокумент = Истина;
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						Попытка
							Если Выборка.Ссылка.Пустая() Тогда
								Продолжить;
							ИначеЕсли Выборка.Ссылка.Проведен Тогда
								Если НастройкиДокументаРеализацияПоЗаявке.Перепроводить Тогда
									Док = Выборка.Ссылка.ПолучитьОбъект();	
								Иначе
									ТребуетсяСоздатьИлиИзменитьДокумент = Ложь;	
									ЕстьОшибки = Истина;
									ОтладочноеСообщение("Документ " + Выборка.Ссылка + " (номер на устройстве: " + тмпДокумент.number + ") уже проведен! Перепроведение отключено в настройках.");
									СчетОшибочныхРеализацийНаОснованииЗаявки = СчетОшибочныхРеализацийНаОснованииЗаявки + 1;
								КонецЕсли;
							ИначеЕсли Выборка.Ссылка.ПометкаУдаления Тогда
								ТребуетсяСоздатьИлиИзменитьДокумент = Ложь;	
								ЕстьОшибки = Истина;
								ОтладочноеСообщение("Документ " + Выборка.Ссылка + " (номер на устройстве: " + тмпДокумент.number + ") был помечен на удаление в центральной базе! Документ не загружен.");
								СчетОшибочныхРеализацийНаОснованииЗаявки = СчетОшибочныхРеализацийНаОснованииЗаявки + 1;
							Иначе
								//Документ уже загружен, но не проведен
								Если НастройкиДокументаРеализацияПоЗаявке.ПерезаписыватьНепроведенные Тогда
									Док = Выборка.Ссылка.ПолучитьОбъект();
									ТребуетсяСоздатьИлиИзменитьДокумент = Истина;	
								Иначе
									ТребуетсяСоздатьИлиИзменитьДокумент = Ложь;	
									ЕстьОшибки = Истина;
									ОтладочноеСообщение("Документ " + Выборка.Ссылка + " (номер на устройстве: " + тмпДокумент.number + ") уже был загружен! Перезапись непроведенных документов отключена в настройках.");
									СчетОшибочныхРеализацийНаОснованииЗаявки = СчетОшибочныхРеализацийНаОснованииЗаявки + 1;
								КонецЕсли;	
							КонецЕсли;
						Исключение
							Продолжить;
						КонецПопытки;
					Иначе
						Если ВидПрикладногоРешения = "УНФ" Тогда
							Док = Документы.РасходнаяНакладная.СоздатьДокумент();
						Иначе
							Док = Документы.РеализацияТоваровУслуг.СоздатьДокумент();	
						КонецЕсли;
					КонецЕсли;
					
					//Если документ изначально создавался в 1С
					ДокументБылСозданВ1С = Ложь;
					Если Не ЕстьОшибки Тогда
						Если тмпДокумент.uniqueID = СокрЛП(Док.Ссылка.УникальныйИдентификатор()) Тогда
							ДокументБылСозданВ1С = Истина;
							ТребуетсяСоздатьИлиИзменитьДокумент = Ложь;
						КонецЕсли;
					КонецЕсли;
					
					Если ТребуетсяСоздатьИлиИзменитьДокумент Или ДокументБылСозданВ1С Тогда
						
						Если ТребуетсяСоздатьИлиИзменитьДокумент Тогда
							//Организация
							тмпКод = тмпДокумент.companyID;
							БПАГОрганизация = Справочники.БПАГОрганизации.НайтиПоКоду(тмпКод);
							Если БПАГОрганизация.Пустая() Тогда
								ЕстьОшибки = Истина;
								СтрокаОшибок = СтрокаОшибок + "Организация с кодом " + тмпКод + " не найдена! " + Символы.ПС;
								Организация = Справочники.Организации.ПустаяСсылка();
							Иначе
								Организация = БПАГОрганизация.Организация;
							КонецЕсли;
							
							//Контрагент или партнер
							Если ВидПрикладногоРешения = "УТ11" Тогда
								тмпКод = тмпДокумент.clientID;
								БПАГКонтрагент = Справочники.БПАГКонтрагенты.НайтиПоКоду(тмпКод);
								Если БПАГКонтрагент.Пустая() Тогда
									ЕстьОшибки = Истина;
									СтрокаОшибок = СтрокаОшибок + "Партнер с кодом " + тмпКод + " не найден! " + Символы.ПС;
									Партнер = Справочники.Партнеры.ПустаяСсылка();
								Иначе
									Партнер = БПАГКонтрагент.Партнер;
								КонецЕсли;
							Иначе
								тмпКод = тмпДокумент.clientID;
								БПАГКонтрагент = Справочники.БПАГКонтрагенты.НайтиПоКоду(тмпКод);
								Если БПАГКонтрагент.Пустая() Тогда
									ЕстьОшибки = Истина;
									СтрокаОшибок = СтрокаОшибок + "Контрагент с кодом " + тмпКод + " не найден! " + Символы.ПС;
									Контрагент = Справочники.Контрагенты.ПустаяСсылка();
								Иначе
									Контрагент = БПАГКонтрагент.Контрагент;
								КонецЕсли;
							КонецЕсли;
							
							//Склад
							тмпКод = тмпДокумент.depotID;
							БПАГСклад = Справочники.БПАГСклады.НайтиПоКоду(тмпКод);
							Если БПАГСклад.Пустая() Тогда
								ЕстьОшибки = Истина;
								СтрокаОшибок = СтрокаОшибок + "Склад с кодом " + тмпКод + " не найден! " + Символы.ПС;
								Если ВидПрикладногоРешения = "УНФ" Тогда
									Склад = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
								Иначе
									Склад = Справочники.Склады.ПустаяСсылка();
								КонецЕсли;
							Иначе
								Склад = БПАГСклад.Склад;
							КонецЕсли;
							
							//Договор или соглашение
							Если ВидПрикладногоРешения = "УТ11" Тогда
								тмпНаименованиеСоглашения = Сред(тмпДокумент.analyticsID, СтрДлина(БПАГКонтрагент.Код) + 1);
								Соглашение = ПолучитьСоглашение(тмпНаименованиеСоглашения, Партнер);
								Если Соглашение.Пустая() Тогда
									ЕстьОшибки = Истина;
									СтрокаОшибок = СтрокаОшибок + "Соглашение с наименованием " + тмпНаименованиеСоглашения + " не найдено! " + Символы.ПС;
								КонецЕсли
							Иначе
								тмпКод = тмпДокумент.analyticsID;
								Договор = Справочники.ДоговорыКонтрагентов.НайтиПоКоду(тмпКод);
								Если Договор.Пустая() Тогда
									ЕстьОшибки = Истина;
									СтрокаОшибок = СтрокаОшибок + "Договор с кодом " + тмпКод + " не найден! " + Символы.ПС;
								КонецЕсли;	
							КонецЕсли;
							
							//Тип цен
							тмпКод = тмпДокумент.priceTypeID;
							БПАГПрайс = Справочники.БПАГПрайсы.НайтиПоКоду(тмпКод);
							Если БПАГПрайс.Пустая() Тогда
								ЕстьОшибки = Истина;
								СтрокаОшибок = СтрокаОшибок + "Прайс с кодом " + тмпКод + " не найден! " + Символы.ПС;
								Если (ВидПрикладногоРешения = "УТ11") ИЛИ (ВидПрикладногоРешения = "УНФ") Тогда
									ТипЦен = Справочники.ВидыЦен.ПустаяСсылка();
								Иначе
									ТипЦен = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
								КонецЕсли;
							Иначе
								ТипЦен = БПАГПрайс.ТипЦен;
							КонецЕсли;
							
							//Торговая точка
							тмпКод = тмпДокумент.posID;
							ТорговаяТочка = Справочники.БПАГТорговыеТочки.НайтиПоКоду(тмпКод);
							Если ТорговаяТочка.Пустая() Тогда
								ЕстьОшибки = Истина;
								СтрокаОшибок = СтрокаОшибок + "Торговая точка с кодом " + тмпКод + " не найдена! " + Символы.ПС;
							КонецЕсли;
							
							//Физлицо (агент)
							ФизЛицо = тмпАгент.Агент.ФизЛицо;
							
							//Номер
							Номер = тмпДокумент.number;
							
							//Сумма документа
							СуммаДокумента = Число(тмпДокумент.sum);
							
							//Дата последнего изменения
							ДатаПоследнегоИзменения = Дата(ПреобразоватьДатуВФормат24(тмпДокумент.date));
							
							//Дата доставки
							ДатаДоставки = БлижайшийРабочийДень(Дата(ПреобразоватьДатуВФормат24(тмпДокумент.deliveryDate)), Организация);
							
							//Заполнение (перезаполнение) документа
							Если ВидПрикладногоРешения = "УТ11" Тогда
								
								Если СпецификаПользователя = "FT" Тогда
									Док.Дата = ТекущаяДата();
								Иначе
									Док.Дата = ДатаПоследнегоИзменения;
								КонецЕсли;
								
								Док.Валюта = мВалютаРегламентированногоУчета;
								Док.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета;
								
								Док.Грузополучатель = ?(ТорговаяТочка.Грузополучатель.Пустая(), Контрагент, ТорговаяТочка.Грузополучатель);
								
								Док.Комментарий = ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", "Пан Агент (" + тмпАгент.Агент + ") №" + Номер) + ?(СокрЛП(тмпДокумент.comment) = "", "", ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", " (") + тмпДокумент.comment + ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", ")"));
								
								Док.Партнер = Партнер;
								Док.Контрагент = ПолучитьКонтрагентаПартнера(Док.Партнер);
								Док.Организация = Организация;
								
								Док.СуммаДокумента = СуммаДокумента;
								Док.СуммаВзаиморасчетов = СуммаДокумента;
								
								Док.Менеджер = ПолучитьОтветственного(тмпАгент);
								Док.Подразделение = Док.Менеджер.ТекущееПодразделение;
								
								Док.СкидкиРассчитаны = Истина;
								Док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
								
								тмпСтатус = НастройкаИзКэша("1ССтатусРеализаций", тмпАгент.Агент);
								Если (тмпСтатус = "Ошибка") Или (тмпСтатус.Пустая()) Тогда
									Док.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
								Иначе
									Док.Статус = тмпСтатус;
								КонецЕсли;
								
								Док.Сделка = СозданнаяЗаявка;
								
								Док.Соглашение = Соглашение;
								Если Не БПАГКонтрагент.Пустая() Тогда
									Док.ЗаполнитьУсловияПродажПоCоглашению();
								КонецЕсли;
								Док.Склад = Склад;
								
								Попытка
									УсловияПродаж = 0;
									Выполнить("УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(Док.Соглашение, Истина, Истина);");
									Выполнить("Док.ДатаПлатежа = ПродажиСервер.ПолучитьПоследнююДатуПоГрафику(Док.Дата, УсловияПродаж.ГрафикОплаты, УсловияПродаж.Соглашение);");
								Исключение
								КонецПопытки;
								
								Если Док.ДатаПлатежа = Дата(1, 1, 1) Тогда
									Док.ДатаПлатежа = Док.Дата;
								КонецЕсли;
								
								//Выполнить("ПродажиСервер.УстановитьДоступностьДоговора(Док, Ложь, Док.Договор);");
								
								Док.АдресДоставки = ТорговаяТочка.Адрес;
								Попытка
									Док.СрокДоставки = ДатаДоставки;
								Исключение
								КонецПопытки;
								
								Попытка
									Выполнить("Док.Основание = Документы.РеализацияТоваровУслуг.ПолучитьТекстОснованияДляПечати(Док);");
								Исключение
									СтруктураОснование = 0;
									Выполнить("СтруктураОснование = Документы.РеализацияТоваровУслуг.СтруктураОснованияДляПечати(Док);");
									Выполнить("ЗаполнитьЗначенияСвойств(Док, СтруктураОснование);");
								КонецПопытки;
								
								Попытка
									СтруктураОтветственного = Неопределено;
									Выполнить("СтруктураОтветственного = ПродажиСервер.ПолучитьОтветственногоПоСкладу(Склад, Док.Менеджер);");
									Если СтруктураОтветственного <> Неопределено Тогда
										Док.Отпустил = СтруктураОтветственного.Ответственный;
										Док.ОтпустилДолжность = СтруктураОтветственного.ОтветственныйДолжность;
									КонецЕсли;
								Исключение
								КонецПопытки;
								
							ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
								
								Если СпецификаПользователя = "FT" Тогда
									Док.Дата = ТекущаяДата();
								Иначе
									Док.Дата = ДатаПоследнегоИзменения;
								КонецЕсли;
								Док.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю;
								Док.Организация = Организация;
								Док.Контрагент = Контрагент;
								Док.Договор = Договор;
								Док.Заказ = СозданнаяЗаявка;
								Док.СтруктурнаяЕдиница = Склад;
								Док.ВидЦен = ТипЦен;
								Док.ВалютаДокумента = Договор.ВалютаРасчетов;
								Док.Курс = 1;
								Док.Кратность = 1;
								Док.Ответственный = ПолучитьОтветственного(тмпАгент);
								Док.Подразделение = НастройкаИзКэша("1СОсновноеПодразделение", тмпАгент.Агент);
								Док.Комментарий = ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", "Пан Агент (" + тмпАгент.Агент + ") №" + Номер) + ?(СокрЛП(тмпДокумент.comment) = "", "", ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", " (") + тмпДокумент.comment + ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", ")"));
								Док.СуммаДокумента = СуммаДокумента;
								Док.Грузополучатель = ?(ТорговаяТочка.Грузополучатель.Пустая(), Контрагент, ТорговаяТочка.Грузополучатель);
								
								Выполнить("Док.НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Организация,, Док.Дата);");
								Док.СуммаВключаетНДС = Док.ВидЦен.ЦенаВключаетНДС;
								
								Выполнить("Док.Автор = Пользователи.ТекущийПользователь();");
								
							Иначе
								
								Если СпецификаПользователя = "IP" Тогда
									Док.Дата = Макс(ДатаДоставки, ДатаПоследнегоИзменения);
								ИначеЕсли СпецификаПользователя = "Sarmat" Тогда
									Док.Дата = ТекущаяДата();
								Иначе
									Если БПАГ.БПАГПолучитьНастройку("1ССоздаватьРеализацииНаДатуДоставки") Тогда
										Док.Дата = ДатаДоставки;
									Иначе	
										Док.Дата = Мин(ТекущаяДата(), Макс(ДатаДоставки, ДатаПоследнегоИзменения));
									КонецЕсли;
								КонецЕсли;
								
								Док.АдресДоставки = ТорговаяТочка.Адрес;
								Попытка
									Док.ДополнениеКАдресуДоставки = ПолучитьКомментарийКИ(Контрагент, Док.АдресДоставки);
								Исключение
								КонецПопытки;
								
								Док.ВалютаДокумента = мВалютаРегламентированногоУчета;
								
								Попытка
									Док.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
								Исключение
								КонецПопытки;
								
								Док.ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;
								Док.Грузоотправитель = Организация;
								Док.Грузополучатель = ?(ТорговаяТочка.Грузополучатель.Пустая(), Контрагент, ТорговаяТочка.Грузополучатель);
								Док.ДоговорКонтрагента = Договор;
								
								Док.Комментарий = ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", "Пан Агент (" + тмпАгент.Агент + ") №" + Номер) + ?(СокрЛП(тмпДокумент.comment) = "", "", ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", " (") + тмпДокумент.comment + ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", ")"));
								
								Док.Контрагент = Контрагент;
								Док.КратностьВзаиморасчетов = 1;
								Док.КурсВзаиморасчетов = 1;
								Док.Организация = Организация;
								Если СпецификаПользователя = "Adal" Тогда
									Если НЕ Контрагент.Пустая() Тогда
										Док.Склад = Контрагент.ОсновнойСклад;
									КонецЕсли;
								Иначе	
									Док.Склад = Склад;
								КонецЕсли;
								Док.СуммаДокумента = СуммаДокумента;
								Док.ОтпускРазрешил = ФизЛицо;
								Док.ОтпускПроизвел = ФизЛицо;
								
								Док.Подразделение = НастройкаИзКэша("1СОсновноеПодразделение", тмпАгент.Агент);
								
								Выполнить("ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Док, ""Продажа"");");
								ПриИзмененииЗначенияОрганизации(Док);
								
								Док.ОтражатьВУправленческомУчете = НастройкиДокументаРеализацияПоЗаявке.ОтражатьВУУ;
								
								Если СпецификаПользователя = "Adal" Тогда
									Попытка
										Док.ОтражатьВБухгалтерскомУчете = НастройкиДокументаРеализацияПоЗаявке.ОтражатьВБУ;
										Док.ОтражатьВНалоговомУчете = НастройкиДокументаРеализацияПоЗаявке.ОтражатьВНУ;
										
										СчетаУчета = 0;
										Выполнить("СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, Договор);");
										
										Док.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
										Док.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;			
										Док.СчетУчетаРасчетовПоТаре        = СчетаУчета.СчетУчетаТарыПокупателя;
									Исключение
									КонецПопытки;
								Иначе
									Попытка
										Док.ОтражатьВБухгалтерскомУчете = НастройкиДокументаРеализацияПоЗаявке.ОтражатьВБУ;
										Док.ОтражатьВНалоговомУчете = НастройкиДокументаРеализацияПоЗаявке.ОтражатьВНУ;
										ЗаполнитьЗначенияСвойств(Док, Док.ЗаполнитьСтруктуруСчетовУчетаШапки(Док.ОтражатьВБухгалтерскомУчете, Док.ОтражатьВНалоговомУчете));
									Исключение
									КонецПопытки;
								КонецЕсли;
								Док.Ответственный = ПолучитьОтветственного(тмпАгент);
								
								СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
								
								//СтруктураРеквизитовДокумента = 0;
								//Выполнить("СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(Док)");
								
								Выполнить("ЗаполнениеДокументов.УстановитьТипСделки(Док, Истина);");
								
								Док.Сделка = СозданнаяЗаявка;
								
								Док.ТипЦен = ТипЦен;
							КонецЕсли;
							
							//Загрузка табличной части
							Если ВидПрикладногоРешения = "УНФ" Тогда
								Док.Запасы.Очистить();
							Иначе
								Док.Товары.Очистить();
							КонецЕсли;
							
							Если КонтрольОстатковВРеализацииПоЗаявке Тогда
								Если Док.Проведен Тогда
									//Док.ОбменДанными.Загрузка = Истина;
									Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
								КонецЕсли;
								
								Запрос = Новый Запрос;
								
								Если ВидПрикладногоРешения = "УТ11" Тогда
									Запрос.Текст =
									"ВЫБРАТЬ
									|	БПАГНоменклатура.Номенклатура КАК Номенклатура,
									|	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК КоличествоОстаток
									|ИЗ
									|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
									|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад = &Склад) КАК ТоварыНаСкладахОстатки
									|		ПО БПАГНоменклатура.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
									|			И (БПАГНоменклатура.Код В (&МассивКодов))";
									
									Запрос.УстановитьПараметр("Склад", Склад);
									МассивКодов = тмпДокумент.rows.ВыгрузитьКолонку("goodID");
									Запрос.УстановитьПараметр("МассивКодов", МассивКодов);
									
								ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
									
									Запрос.Текст =
									"ВЫБРАТЬ
									|	БПАГНоменклатура.Номенклатура КАК Номенклатура,
									|	ЗапасыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
									|ИЗ
									|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
									|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыНаСкладах.Остатки(, СтруктурнаяЕдиница = &Склад) КАК ЗапасыНаСкладахОстатки
									|		ПО БПАГНоменклатура.Номенклатура = ЗапасыНаСкладахОстатки.Номенклатура
									|			И (БПАГНоменклатура.Код В (&МассивКодов))";
									
									Запрос.УстановитьПараметр("Склад", Склад);
									МассивКодов = тмпДокумент.rows.ВыгрузитьКолонку("goodID");
									Запрос.УстановитьПараметр("МассивКодов", МассивКодов);
									
								Иначе
									Запрос.Текст =
									"ВЫБРАТЬ
									|	БПАГНоменклатура.Номенклатура КАК Номенклатура,
									|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
									|ИЗ
									|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
									|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
									|				,
									|					Склад = &Склад) КАК ТоварыНаСкладахОстатки
									|		ПО БПАГНоменклатура.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
									|			И (БПАГНоменклатура.Код В (&МассивКодов))";
									
									Если СпецификаПользователя = "Adal" Тогда
										Запрос.УстановитьПараметр("Склад", Контрагент.ОсновнойСклад);
									Иначе
										Запрос.УстановитьПараметр("Склад", Склад);
									КонецЕсли;
									
									МассивКодов = тмпДокумент.rows.ВыгрузитьКолонку("goodID");
									Запрос.УстановитьПараметр("МассивКодов", МассивКодов);
								КонецЕсли;
								
								ТЗОстатки = Запрос.Выполнить().Выгрузить();
							КонецЕсли;
							
							Для Каждого тмп Из тмпДокумент.rows Цикл
								тмп.sort = Число(тмп.sort);
							КонецЦикла;
							тмпДокумент.rows.Сортировать("sort");
							Для Каждого тмпСтрока Из тмпДокумент.rows Цикл
								
								//Товар
								тмпКод = тмпСтрока.goodID;
								тмпНазваниеХарактеристики = "";
								
								ПозицияРазделителяХарактеристики = Найти(тмпСтрока.goodID, ":|");
								Если ПозицияРазделителяХарактеристики > 0 Тогда
									тмпКод = Лев(тмпСтрока.goodID, ПозицияРазделителяХарактеристики - 1);
									тмпНазваниеХарактеристики = Сред(тмпСтрока.goodID, ПозицияРазделителяХарактеристики + 2);
								КонецЕсли;
								
								БПАГНоменклатура = Справочники.БПАГНоменклатура.НайтиПоКоду(тмпКод);
								Если БПАГНоменклатура.Пустая() Тогда
									ЕстьОшибки = Истина;
									СтрокаОшибок = СтрокаОшибок + "Товар с кодом " + тмпКод + " не найден! " + Символы.ПС;
									Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
								Иначе
									Номенклатура = БПАГНоменклатура.Номенклатура;
								КонецЕсли;
								
								Характеристика = ПолучитьХарактеристику(Номенклатура, тмпНазваниеХарактеристики);
								
								
								//Единица измерения
								тмпКоэффициент = Число(тмпСтрока.coeff);
								ЕдиницаИзмерения = ПолучитьЕдиницуИзмерения(тмпСтрока, Номенклатура, ЕстьОшибки, СтрокаОшибок);
								
								//Цена
								Цена = Число(тмпСтрока.price);
								
								//Количество
								Количество = Число(тмпСтрока.quantity);
								
								//Сумма
								Сумма = Число(тмпСтрока.sum);
								
								КоличествоЗаказано = Число(тмпСтрока.quantity);
								Если КонтрольОстатковВРеализацииПоЗаявке Тогда
									КоличествоОстаток = 0;
									тмпСтрокаОстатков = ТЗОстатки.Найти(Номенклатура, "Номенклатура");
									Если тмпСтрокаОстатков <> Неопределено Тогда
										КоличествоОстаток = тмпСтрокаОстатков.КоличествоОстаток / ?(тмпКоэффициент = 0, 1, тмпКоэффициент);
									КонецЕсли;
									
									Если КоличествоОстаток < Количество Тогда
										ОтладочноеСообщение("Остаток товара " + Номенклатура + " меньше заказанного. Заказано: " + Количество + ", имеется: " + КоличествоОстаток + ".");
										Количество = КоличествоОстаток;
									КонецЕсли;
								КонецЕсли;
								
								//Сумма
								Сумма = ?(КоличествоЗаказано = 0, 0, Сумма * (Количество / КоличествоЗаказано));
								
								//Цена без скидки
								ЦенаБезСкидки = 0;
								Попытка
									ЦенаБезСкидки = Число(тмпСтрока.originalPrice);
								Исключение
								КонецПопытки;
								
								//Процент скидки
								ПроцентСкидки = 0;
								Попытка
									ПроцентСкидки = Число(тмпСтрока.discountPercent);
								Исключение
								КонецПопытки;
								
								//Сумма скидки
								СуммаСкидки = 0;
								Попытка
									СуммаСкидки = Число(тмпСтрока.discountSum);
								Исключение
								КонецПопытки;
								
								Если ВидПрикладногоРешения = "УТ11" Тогда
									Если Окр(Количество, 3) > 0 Тогда
										НоваяСтрока = Док.Товары.Добавить();
										НоваяСтрока.Номенклатура = Номенклатура;
										НоваяСтрока.КоличествоУпаковок = Количество;
										НоваяСтрока.Количество = НоваяСтрока.КоличествоУпаковок * тмпКоэффициент;
										НоваяСтрока.Характеристика = Характеристика;
										
										//Цена
										//Если (СпецификаПользователя <> "FT") ИЛИ (Док.Соглашение.Типовое) Тогда
										НоваяСтрока.ВидЦены = ТипЦен;
										//КонецЕсли;
										
										Если НастройкаИзКэша("1СЗагружатьДокументыВБазовыхЕдиницах", тмпАгент.Агент) Тогда
											// ***** NIY (IO)
											ОтладочноеСообщение("Загрузка заявок с учетом настройки '1СЗагружатьДокументыВБазовыхЕдиницах'. Для версии Управление торговлей 11 загрузка номенклатуры в базовых единицах не предусмотрена.  NIY.");
											//НоваяСтрока.Упаковка = НоваяСтрока.Номенклатура. .ЕдиницаХраненияОстатков;
											//НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
											//Если ЦенаБезСкидки = 0 Тогда
											//	НоваяСтрока.Цена = ?(тмпКоэффициент = 0, 0, Цена / тмпКоэффициент * НоваяСтрока.Коэффициент);
											//Иначе
											//	НоваяСтрока.Цена = ?(тмпКоэффициент = 0, 0, ЦенаБезСкидки / тмпКоэффициент * НоваяСтрока.Коэффициент);
											//	НоваяСтрока.ПроцентАвтоматическихСкидок = ПроцентСкидки;
											//	НоваяСтрока.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.БезУсловий;
											//КонецЕсли;
											//НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
										Иначе
											НоваяСтрока.Упаковка = ЕдиницаИзмерения;
											Если ЦенаБезСкидки = 0 Тогда
												НоваяСтрока.Цена = Цена;
											Иначе
												НоваяСтрока.Цена = ЦенаБезСкидки;
												НоваяСтрока.ПроцентРучнойСкидки = ПроцентСкидки;
												НоваяСтрока.СуммаРучнойСкидки = СуммаСкидки;
											КонецЕсли;
										КонецЕсли;
										
										НоваяСтрока.Сумма = Сумма;
										
										НоваяСтрока.Склад = Док.Склад;
										
										СтруктураПересчетаСуммы = Неопределено;
										Выполнить("СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);");
										
										СтруктураДействий = Новый Структура;
										СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
										СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Док.НалогообложениеНДС);
										СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
										СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
										СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
										КэшированныеЗначения = Неопределено;
										Выполнить("ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);");									
									КонецЕсли;
									
								ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
									
									Если Окр(Количество, 3) > 0 Тогда
										НоваяСтрока = Док.Запасы.Добавить();
										НоваяСтрока.Номенклатура = Номенклатура;
										
										НоваяСтрока.Количество = Количество;
										
										Если НастройкаИзКэша("1СЗагружатьДокументыВБазовыхЕдиницах", тмпАгент.Агент) Тогда
											// ***** NIY (IO)
											ОтладочноеСообщение("Загрузка заявок с учетом настройки '1СЗагружатьДокументыВБазовыхЕдиницах'. Для версии Управление небольшой фирмой загрузка номенклатуры в базовых единицах не предусмотрена.  NIY.");
										Иначе
											НоваяСтрока.ЕдиницаИзмерения = ЕдиницаИзмерения;
											Если ЦенаБезСкидки = 0 Тогда
												НоваяСтрока.Цена = Цена;
											Иначе
												НоваяСтрока.Цена = ЦенаБезСкидки;
												НоваяСтрока.ПроцентСкидкиНаценки = ПроцентСкидки;
											КонецЕсли;
										КонецЕсли;
										
										НоваяСтрока.Сумма = Сумма;
										НоваяСтрока.Всего = Сумма;
										
										НоваяСтрока.Заказ = СозданнаяЗаявка;
										
										СтруктураДанные = Новый Структура();
										СтруктураДанные.Вставить("Организация", Организация);
										СтруктураДанные.Вставить("Номенклатура", НоваяСтрока.Номенклатура);
										СтруктураДанные.Вставить("Характеристика", НоваяСтрока.Характеристика);
										СтруктураДанные.Вставить("НалогообложениеНДС", Док.НалогообложениеНДС);
										
										Если ЗначениеЗаполнено(Док.ВидЦен) Тогда
											
											СтруктураДанные.Вставить("ДатаОбработки",	 Док.Дата);
											СтруктураДанные.Вставить("ВалютаДокумента",  Док.ВалютаДокумента);
											СтруктураДанные.Вставить("СуммаВключаетНДС", Док.СуммаВключаетНДС);
											СтруктураДанные.Вставить("ВидЦен", Док.ВидЦен);
											СтруктураДанные.Вставить("Коэффициент", 1);
											СтруктураДанные.Вставить("ВидСкидкиНаценки", Док.ВидСкидкиНаценки);
											
										КонецЕсли;
										
										СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
										
										НоваяСтрока.СтавкаНДС = СтруктураДанные.СтавкаНДС;
										НоваяСтрока.ТипНоменклатурыЗапас = СтруктураДанные.ЭтоЗапас;
										
										ЧислоСтавкаНДС = 0;
										Выполнить("ЧислоСтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);");
										
										НоваяСтрока.СуммаНДС = ?(Док.СуммаВключаетНДС, 
										НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((ЧислоСтавкаНДС + 100) / 100),
										НоваяСтрока.Сумма * ЧислоСтавкаНДС / 100);
									КонецЕсли;
									
								Иначе
									Если Окр(Количество, 3) > 0 Тогда
										НоваяСтрока = Док.Товары.Добавить();
										НоваяСтрока.Номенклатура = Номенклатура;
										НоваяСтрока.Количество = Количество;
										НоваяСтрока.ХарактеристикаНоменклатуры = Характеристика;
										
										Если НастройкаИзКэша("1СЗагружатьДокументыВБазовыхЕдиницах", тмпАгент.Агент) Тогда
											НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
											НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
											Если ЦенаБезСкидки = 0 Тогда
												НоваяСтрока.Цена = ?(тмпКоэффициент = 0, 0, Цена / тмпКоэффициент * НоваяСтрока.Коэффициент);
											Иначе
												НоваяСтрока.Цена = ?(тмпКоэффициент = 0, 0, ЦенаБезСкидки / тмпКоэффициент * НоваяСтрока.Коэффициент);
												НоваяСтрока.ПроцентАвтоматическихСкидок = ПроцентСкидки;
												Если ПроцентСкидки <> 0 Тогда
													НоваяСтрока.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.БезУсловий;
												КонецЕсли;
											КонецЕсли;
											НоваяСтрока.Количество = НоваяСтрока.Количество * тмпКоэффициент;
										Иначе
											НоваяСтрока.ЕдиницаИзмерения = ЕдиницаИзмерения;
											НоваяСтрока.Коэффициент = ЕдиницаИзмерения.Коэффициент;
											Если ЦенаБезСкидки = 0 Тогда
												НоваяСтрока.Цена = Цена;
											Иначе
												НоваяСтрока.Цена = ЦенаБезСкидки;
												НоваяСтрока.ПроцентАвтоматическихСкидок = ПроцентСкидки;
												Если ПроцентСкидки <> 0 Тогда
													НоваяСтрока.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.БезУсловий;
												КонецЕсли;
											КонецЕсли;
										КонецЕсли;
										
										НоваяСтрока.Сумма = Сумма;
										
										// Выполнить общие действия для всех документов при изменении номенклатуры.
										Выполнить("ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НоваяСтрока, Док);");
										
										Попытка
											Док.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", Док.ОтражатьВБухгалтерскомУчете, Док.ОтражатьВНалоговомУчете);
										Исключение
										КонецПопытки;
										
										// Заполняем реквизиты табличной части.
										Попытка
											Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, Док, ""Реализация"");");
										Исключение
											Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, Док);");
										КонецПопытки;
										
										Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(НоваяСтрока, Док);");
										
										// Рассчитать реквизиты табличной части.
										Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, Док);");
										Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, Док);");
										
										Если СпецификаПользователя = "Adal" Тогда
											Попытка
												СчетБУ  = НоваяСтрока.СчетДоходовБУ;
												СчетНУ  = НоваяСтрока.СчетДоходовНУ;
												
												Если НЕ ЗначениеЗаполнено(НоваяСтрока.СчетДоходовБУ) Тогда
													НоваяСтрока.СчетДоходовБУ = ПланыСчетов.Типовой.НайтиПоКоду("6010");
												КонецЕсли;	
												Если НЕ ЗначениеЗаполнено(НоваяСтрока.СубконтоДоходовБУ1) Тогда
													НоваяСтрока.СубконтоДоходовБУ1 = Справочники.Доходы.НайтиПоНаименованию("Доходы от реализации ТМЦ");
												КонецЕсли;	
												Если НЕ ЗначениеЗаполнено(НоваяСтрока.СубконтоДоходовБУ2) Тогда
													НоваяСтрока.СубконтоДоходовБУ2 = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Основная номенклатурная группа");
												КонецЕсли;	
												
												Если НЕ ЗначениеЗаполнено(НоваяСтрока.СчетДоходовНУ) Тогда
													НоваяСтрока.СчетДоходовНУ = ПланыСчетов.Налоговый.НайтиПоКоду("Н710");
												КонецЕсли;	
												Если НЕ ЗначениеЗаполнено(НоваяСтрока.СубконтоДоходовНУ2) Тогда
													НоваяСтрока.СубконтоДоходовНУ2 = НоваяСтрока.Номенклатура;
												КонецЕсли;	
												Если НЕ ЗначениеЗаполнено(НоваяСтрока.СубконтоДоходовНУ1) Тогда
													НоваяСтрока.СубконтоДоходовНУ1 = Справочники.Доходы.НайтиПоНаименованию("Доходы от реализации ТМЦ");
												КонецЕсли;	
												
												Если НЕ ЗначениеЗаполнено(НоваяСтрока.СчетСписанияСебестоимостиБУ) Тогда
													НоваяСтрока.СчетСписанияСебестоимостиБУ = ПланыСчетов.Типовой.НайтиПоКоду("7010");
												КонецЕсли;	
												Если НЕ ЗначениеЗаполнено(НоваяСтрока.СубконтоСписанияСебестоимостиБУ1) Тогда
													НоваяСтрока.СубконтоСписанияСебестоимостиБУ1 = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Реализация ТМЦ");
												КонецЕсли;	
												Если НЕ ЗначениеЗаполнено(НоваяСтрока.СубконтоСписанияСебестоимостиБУ2) Тогда
													НоваяСтрока.СубконтоСписанияСебестоимостиБУ2 = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Основная номенклатурная группа");
												КонецЕсли;	
												
												Если НЕ ЗначениеЗаполнено(НоваяСтрока.СчетСписанияСебестоимостиНУ) Тогда
													НоваяСтрока.СчетСписанияСебестоимостиНУ = ПланыСчетов.Налоговый.НайтиПоКоду("Н810");
												КонецЕсли;	
												Если НЕ ЗначениеЗаполнено(НоваяСтрока.СубконтоСписанияСебестоимостиНУ1) Тогда
													НоваяСтрока.СубконтоСписанияСебестоимостиНУ1 = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Реализация ТМЦ");
												КонецЕсли;	
												
												Если НЕ ЗначениеЗаполнено(НоваяСтрока.НДСВидОперацииРеализации) Тогда
													НоваяСтрока.НДСВидОперацииРеализации = Справочники.ВидыРеализации.РеализацияТМЗ;
												КонецЕсли;	
												Если НЕ ЗначениеЗаполнено(НоваяСтрока.СчетУчетаНДСПоРеализации) Тогда
													НоваяСтрока.СчетУчетаНДСПоРеализации = ПланыСчетов.Типовой.НайтиПоКоду("3130");
												КонецЕсли;	
												Если НЕ ЗначениеЗаполнено(НоваяСтрока.СчетУчетаНУ) Тогда
													НоваяСтрока.СчетУчетаНУ = ПланыСчетов.Налоговый.НайтиПоКоду("Н211");
												КонецЕсли;	
											Исключение
											КонецПопытки;
										КонецЕсли;
										
										НоваяСтрока.КлючСтроки = НоваяСтрока.НомерСтроки;
										// Ввод состава набора
										Выполнить("УправлениеЗапасами.ДобавитьСоставНабора(НоваяСтрока, Док);");
										
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
							
							//Отсортируем строки документа по алфавиту наименований
							Если СпецификаПользователя = "IP" Тогда
								Док.Товары.Сортировать("Номенклатура");
								Попытка
									Для Каждого тмпСтрокаДокумента Из Док.Товары Цикл
										тмпСтрокаДокумента.КлючСтроки = тмпСтрокаДокумента.НомерСтроки;
									КонецЦикла;
								Исключение
								КонецПопытки;
							КонецЕсли;
							
							//Проверим заполнение цен комплектующих и установим в 1 рубль, если отсутствуют
							Если ВидПрикладногоРешения = "УТ10" Тогда
								Для Каждого тмпСтрока Из Док.СоставНабора Цикл
									Если тмпСтрока.Цена = 0 Тогда
										тмпСтрока.Цена = 1;
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
							
							СчетДокументовРеализацийНаОснованииЗаявки = СчетДокументовРеализацийНаОснованииЗаявки + 1;						
							// Если есть категории "PostUU", "PostBU", "DontPostUU", "DontPostBU", то соответствующим образом проставим отражения в учетах
							УстановитьСпособыОтраженияВУчетах(тмпДокумент, Док);
							
							//Док.ОбменДанными.Загрузка = Истина;
							Док.Записать(РежимЗаписиДокумента.Запись);	
							
							Если (ВидПрикладногоРешения = "УТ11") ИЛИ (ВидПрикладногоРешения = "УНФ") Тогда
								Если СпецификаПользователя = "FT" Тогда
									//Торговый представитель
									ДопРеквизит = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Торговый представитель");	
									Если ДопРеквизит.Пустая() Тогда
										ОтладочноеСообщение("Отсутствует дополнительный реквизит реализации ""Торговый представитель""!");
									Иначе	
										НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
										
										НаборЗаписей.Отбор.Объект.Установить(Док.Ссылка);
										НаборЗаписей.Отбор.Свойство.Установить(ДопРеквизит);
										
										НаборЗаписей.Прочитать();
										НаборЗаписей.Очистить();
										
										НоваяЗапись = НаборЗаписей.Добавить();
										НоваяЗапись.Объект = Док.Ссылка;
										НоваяЗапись.Свойство = ДопРеквизит;
										НоваяЗапись.Значение = ФизЛицо;
										НаборЗаписей.Записать();
									КонецЕсли;
									
									Попытка
										Для Каждого тмпСтрока Из тмпДокумент.properties Цикл
											Если тмпСтрока.identifier = "FTPaymentMethod" Тогда
												Если ВРег(тмпСтрока.value) = "НАЛИЧНАЯ" Тогда
													Док.ФормаОплаты = Перечисления.ФормыОплаты.Наличная;
												ИначеЕсли ВРег(тмпСтрока.value) = "БЕЗНАЛИЧНАЯ" Тогда
													Док.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;
												КонецЕсли;
											ИначеЕсли тмпСтрока.identifier = "FTGetDebt" Тогда
												Если тмпСтрока.value <> "" Тогда
													Попытка
														СуммаЗабратьДолг = Число(СтрЗаменить(тмпСтрока.value, ",", "."));
														Если СуммаЗабратьДолг <> 0 Тогда
															
															ДопРеквизит = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Забрать долг");
															Если ДопРеквизит.Пустая() Тогда
																ОтладочноеСообщение("Отсутствует дополнительный реквизит реализации ""Забрать долг""!");
															Иначе	
																ДопРеквизитНайден = Ложь;
																Для Каждого тмпСтрокаРеквизитов Из Док.ДополнительныеРеквизиты Цикл
																	Если тмпСтрокаРеквизитов.Свойство = ДопРеквизит Тогда
																		тмпСтрокаРеквизитов.Значение = СуммаЗабратьДолг;
																		тмпСтрокаРеквизитов.ТекстоваяСтрока = СуммаЗабратьДолг;
																		ДопРеквизитНайден = Истина;
																		Прервать;
																	КонецЕсли;
																КонецЦикла;
																Если НЕ ДопРеквизитНайден Тогда
																	тмпСтрокаРеквизитов = Док.ДополнительныеРеквизиты.Добавить();
																	тмпСтрокаРеквизитов.Свойство = ДопРеквизит;
																	тмпСтрокаРеквизитов.Значение = СуммаЗабратьДолг;
																	тмпСтрокаРеквизитов.ТекстоваяСтрока = СуммаЗабратьДолг;
																КонецЕсли;
															КонецЕсли;
														КонецЕсли;
													Исключение
														ОтладочноеСообщение("Ошибка при загрузке свойств: " + ОписаниеОшибки());
													КонецПопытки;
												КонецЕсли;
											КонецЕсли;
										КонецЦикла;
									Исключение
										ОтладочноеСообщение("Ошибка при загрузке свойств: " + ОписаниеОшибки());
									КонецПопытки;								
								КонецЕсли;
								
								//Иначе							
								//	УстановитьСвойстваИКатегории(тмпДокумент, Док);	
							КонецЕсли;
							
							Если ЕстьОшибки Тогда
								//Док.ОбменДанными.Загрузка = Истина;
								Док.Записать(РежимЗаписиДокумента.Запись);	
								ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Реализация " + Номер + " (Реализация товаров и услуг " + Док.Номер + ") - возникли ошибки при загрузке: ");
								ОтладочноеСообщение(СтрокаОшибок);
								
								СчетОшибочныхРеализацийНаОснованииЗаявки = СчетОшибочныхРеализацийНаОснованииЗаявки + 1;
								
							Иначе	
								//Док.ОбменДанными.Загрузка = Истина;
								Попытка
									Док.Записать(?(НастройкиДокументаРеализацияПоЗаявке.Проводить, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
								Исключение
									ЕстьОшибки = Истина;
									СчетОшибочных = СчетОшибочных + 1;
									ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Реализация " + Номер + " (Реализация товаров и услуг " + Док.Номер + ") - возникли ошибки при загрузке: ");
									ОтладочноеСообщение(ОписаниеОшибки());
									Попытка
										Док.Записать(РежимЗаписиДокумента.Запись);
									Исключение
										ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Реализация " + Номер + " (Реализация товаров и услуг " + Док.Номер + ") - возникли ошибки при загрузке: ");
										ОтладочноеСообщение(ОписаниеОшибки());
									КонецПопытки;
								КонецПопытки;
								
							КонецЕсли;
							
						КонецЕсли;
						
						Если (ВидПрикладногоРешения = "УТ10") или (ВидПрикладногоРешения = "УТ11") Тогда
							УстановитьСвойстваИКатегории(тмпДокумент, Док);
							Если ВидПрикладногоРешения = "УТ11" Тогда
								//Док.ОбменДанными.Загрузка = Истина;
								Попытка
									Док.Записать(РежимЗаписиДокумента.Запись);
								Исключение
								КонецПопытки;
							КонецЕсли;
						КонецЕсли;
						
						Если НЕ ТребуетсяСоздатьИлиИзменитьДокумент Тогда
							//Торговая точка
							тмпКод = тмпДокумент.posID;
							ТорговаяТочка = Справочники.БПАГТорговыеТочки.НайтиПоКоду(тмпКод);
							//Номер
							Номер = тмпДокумент.number;
						КонецЕсли;
						//Запишем данные в служебный регистр
						НоваяЗаписьДокументыАгентов = РегистрыСведений.БПАГДокументыАгентов.СоздатьМенеджерЗаписи();
						НоваяЗаписьДокументыАгентов.ВидДокумента = Перечисления.БПАГВидыДокументов.РеализацияПоЗаявке;
						
						НоваяЗаписьДокументыАгентов.Период = ТекущаяДата();
						НоваяЗаписьДокументыАгентов.Агент = тмпАгент.Агент;
						НоваяЗаписьДокументыАгентов.Документ = Док.Ссылка;
						НоваяЗаписьДокументыАгентов.ТорговаяТочка = ТорговаяТочка;
						НоваяЗаписьДокументыАгентов.ДатаСозданияНаУстройстве = Дата(ПреобразоватьДатуВФормат24(тмпДокумент.createdDate));
						НоваяЗаписьДокументыАгентов.ДатаИзмененияНаУстройстве = Дата(ПреобразоватьДатуВФормат24(тмпДокумент.modifiedDate));
						Если ВариантЗагрузкиЗаявок = Перечисления.БПАГВариантыЗагрузкиЗаявок.Реализация Тогда
							НоваяЗаписьДокументыАгентов.ИД = тмпДокумент.uniqueID;
						Иначе	
							НоваяЗаписьДокументыАгентов.ИД = "SAL" + тмпДокумент.uniqueID;
						КонецЕсли;
						НоваяЗаписьДокументыАгентов.НомерДокументаНаУстройстве = Номер;
						НоваяЗаписьДокументыАгентов.ШиротаСоздания = Число(тмпДокумент.createdLatitude);
						НоваяЗаписьДокументыАгентов.ДолготаСоздания = Число(тмпДокумент.createdLongitude);
						НоваяЗаписьДокументыАгентов.ШиротаИзменения = Число(тмпДокумент.modifiedLatitude);
						НоваяЗаписьДокументыАгентов.ДолготаИзменения = Число(тмпДокумент.modifiedLongitude);
						НоваяЗаписьДокументыАгентов.МоментСозданияПоGPS = ?(тмпДокумент.createdLocationDate = "", 0, Дата(ПреобразоватьДатуВФормат24(тмпДокумент.createdLocationDate)));
						НоваяЗаписьДокументыАгентов.МоментИзмененияПоGPS = ?(тмпДокумент.modifiedLocationDate = "", 0, Дата(ПреобразоватьДатуВФормат24(тмпДокумент.modifiedLocationDate)));
						
						//Последняя проверка на то, что документ не пуст
						Если СокрЛП(НоваяЗаписьДокументыАгентов.Документ) = "" Тогда
							ОтладочноеСообщение("(!!!) Критическая ошибка базы данных. Обнаружена пустая ссылка на документ.");
							#Если Клиент Тогда
								Предупреждение("Критическая ошибка базы данных. Обнаружена пустая ссылка на документ. Обратитесь к системному администратору. Подробности зафиксированы в журнале (каталог logs папки обмена).", 10);
							#КонецЕсли
						Иначе	
							НоваяЗаписьДокументыАгентов.Записать();
						КонецЕсли;
						
					КонецЕсли;									
				КонецЕсли;
			КонецЦикла;
			Если СпецификаПользователя = "SD" Тогда
				//Запись в файл лога таблицы с отклонениями от рекомендованного текущей транзакции
				Попытка
					ЗначениеВФайл(ПутьКаталога + ИмяФайла + ".txt", ТЗОтклоненияРекомендованные);
				Исключение
					ОтладочноеСообщение("Файл лога по отклонениям от рекомендованного количества в заявках не создан: " + ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
		Если ВариантЗагрузкиЗаявок <> Перечисления.БПАГВариантыЗагрузкиЗаявок.Реализация Тогда
			ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Загружено заявок: " + СчетДокументов + "." + ?(СчетОшибочных > 0, " Из них с ошибками: " + СчетОшибочных, " Без ошибок."));	
		КонецЕсли;
		Если ВариантЗагрузкиЗаявок <> Перечисления.БПАГВариантыЗагрузкиЗаявок.Заказ Тогда
			ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Загружено реализаций: " + СчетДокументовРеализацийНаОснованииЗаявки + "." + ?(СчетОшибочныхРеализацийНаОснованииЗаявки > 0, " Из них с ошибками: " + СчетОшибочныхРеализацийНаОснованииЗаявки, " Без ошибок."));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьРеализации(Агенты)
	
	ВидПрикладногоРешения = БПАГ.ПолучитьВидПрикладногоРешения();
	ИспользоватьХарактеристики = НастройкаИзКэша("1СИспользоватьХарактеристикиТоваров");
	
	НастройкиДокумента = ПолучитьНастройкиДокумента(Перечисления.БПАГВидыДокументов.Реализация, ТекущаяДата());
	Если НастройкиДокумента = Неопределено Тогда
		ОтладочноеСообщение("Не заданы настройки для документа ""Реализация""! Загрузка остановлена. Задайте настройки и повторите загрузку.");
		Возврат;
	КонецЕсли;
	
	Если ВидПрикладногоРешения = "УТ10" Тогда
		ВидНоменклатурыТара = НастройкаИзКэша("1СВидНоменклатурыТара");
	КонецЕсли;
	
	Для Каждого тмпАгент Из Агенты Цикл
		
		ТЗ = ПолучитьТЗИзPlist(тмпАгент.Агент, "sales", "Не найдены реализации для ");
		Если ТЗ = Неопределено Тогда
			Продолжить;
		Иначе
			
			СчетДокументов = 0;
			СчетОшибочных = 0;
			Для Каждого тмпДокумент Из ТЗ Цикл
				
				//Глобальное изменение формата - игнорируем старые документы для совместимости
				ДатаПоследнегоИзменения = Дата(ПреобразоватьДатуВФормат24(тмпДокумент.date)); //ПАКЛ
				Если ДатаПоследнегоИзменения < Дата(2013, 1, 15) Тогда
					Продолжить;
				КонецЕсли;
				//End Глобальное изменение формата - игнорируем старые документы для совместимости
				
				ЕстьОшибки = Ложь;
				СтрокаОшибок = "";
				
				Если ТЗ.Колонки.Найти("rowCount") <> Неопределено Тогда
					Попытка 
						Если Число(тмпДокумент.rowCount) = 0 Тогда
							ЕстьОшибки = Истина;
							ОтладочноеСообщение("Реализация (номер на устройстве: " + тмпДокумент.number + ") пуста (не заполнена табличная часть). Документ проигнорирован!");
							СчетОшибочных = СчетОшибочных + 1;
							Продолжить;
						КонецЕсли;
					Исключение
							ЕстьОшибки = Истина;
							ОтладочноеСообщение("Реализация (номер на устройстве: " + тмпДокумент.number + ") пуста (не заполнена табличная часть). Документ проигнорирован!");
							СчетОшибочных = СчетОшибочных + 1;
							Продолжить;
					КонецПопытки;
				Иначе
					ЕстьОшибки = Истина;
					ОтладочноеСообщение("Реализация (номер на устройстве: " + тмпДокумент.number + ") выгружена без табличной части. Документ проигнорирован!");
					СчетОшибочных = СчетОшибочных + 1;
					Продолжить;
				КонецЕсли;
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	БПАГДокументыАгентовСрезПоследних.Документ КАК Ссылка
				|ИЗ
				|	РегистрСведений.БПАГДокументыАгентов.СрезПоследних(, ИД = &ИД) КАК БПАГДокументыАгентовСрезПоследних
				|ГДЕ
				|	БПАГДокументыАгентовСрезПоследних.ВидДокумента В(&ВидДокумента)";
				
				Запрос.УстановитьПараметр("ИД", тмпДокумент.uniqueID);
				//Запрос.УстановитьПараметр("ВидДокумента", Перечисления.БПАГВидыДокументов.Реализация);
				ВидыДокументаРеализация = Новый Массив;
				ВидыДокументаРеализация.Добавить(Перечисления.БПАГВидыДокументов.Реализация);
				Запрос.УстановитьПараметр("ВидДокумента", ВидыДокументаРеализация);
				//Если загружается реализация, которая была выгружена как "Реализация по заявке" в случае обратной выгрузки Реализаций
				НастройкиДокументаРеализацияПоЗаявке = ПолучитьНастройкиДокумента(Перечисления.БПАГВидыДокументов.РеализацияПоЗаявке, ТекущаяДата(), тмпАгент.Агент);
				НастройкиДокументаРеализация = ПолучитьНастройкиДокумента(Перечисления.БПАГВидыДокументов.Реализация, ТекущаяДата(), тмпАгент.Агент);
		
				ОбратнаяВыгрузкаИз1С = НастройкиДокументаРеализация.ОбратнаяВыгрузкаИз1С ИЛИ НастройкиДокументаРеализацияПоЗаявке.ОбратнаяВыгрузкаИз1С;
				ПериодОбратнойВыгрузки = Макс(НастройкиДокументаРеализация.ПериодОбратнойВыгрузки, НастройкиДокументаРеализацияПоЗаявке.ПериодОбратнойВыгрузки);
		
				//ОбратнаяВыгрузкаИз1С = НастройкиДокументаРеализацияПоЗаявке.ОбратнаяВыгрузкаИз1С;
				//ПериодОбратнойВыгрузки = НастройкиДокументаРеализацияПоЗаявке.ПериодОбратнойВыгрузки;
		
				ТребуетсяСоздатьИлиИзменитьДокумент = Истина;//Изначально считаем, что документ надо создать или изменить
				
				Если ОбратнаяВыгрузкаИз1С И (ПериодОбратнойВыгрузки > 0) Тогда
					ВидыДокументаРеализация = Новый Массив;
					ВидыДокументаРеализация.Добавить(Перечисления.БПАГВидыДокументов.Реализация);
					ВидыДокументаРеализация.Добавить(Перечисления.БПАГВидыДокументов.РеализацияПоЗаявке);
					Запрос.УстановитьПараметр("ВидДокумента", ВидыДокументаРеализация);
					ТребуетсяСоздатьИлиИзменитьДокумент = Ложь;
					//ПАКЛ->
					РеализацияЗагруженнаяРанее = Запрос.Выполнить().Выгрузить(); //ПАКЛ
					Если РеализацияЗагруженнаяРанее.Количество() = 0 Тогда
						ТребуетсяСоздатьИлиИзменитьДокумент = Истина;
					КонецЕсли;	
					//ПАКЛ<-
				КонецЕсли;
				
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Попытка
						Если Выборка.Ссылка.Пустая() Тогда
							Продолжить;
						ИначеЕсли Выборка.Ссылка.Проведен Тогда
							Если НастройкиДокумента.Перепроводить Тогда
								Док = Выборка.Ссылка.ПолучитьОбъект();	
							Иначе
								ТребуетсяСоздатьИлиИзменитьДокумент = Ложь;	
								ЕстьОшибки = Истина;
								ОтладочноеСообщение("Документ " + Выборка.Ссылка + " (номер на устройстве: " + тмпДокумент.number + ") уже проведен! Перепроведение отключено в настройках.");
								СчетОшибочных = СчетОшибочных + 1;
							КонецЕсли;
						ИначеЕсли Выборка.Ссылка.ПометкаУдаления Тогда
							ТребуетсяСоздатьИлиИзменитьДокумент = Ложь;	
							ЕстьОшибки = Истина;
							ОтладочноеСообщение("Документ " + Выборка.Ссылка + " (номер на устройстве: " + тмпДокумент.number + ") был помечен на удаление в центральной базе! Документ не загружен.");
							СчетОшибочных = СчетОшибочных + 1;
						Иначе
							//Документ уже загружен, но не проведен
							Если НастройкиДокумента.ПерезаписыватьНепроведенные Тогда
								Док = Выборка.Ссылка.ПолучитьОбъект();
								ТребуетсяСоздатьИлиИзменитьДокумент = Истина;	
							Иначе
								ТребуетсяСоздатьИлиИзменитьДокумент = Ложь;	
								ЕстьОшибки = Истина;
								ОтладочноеСообщение("Документ " + Выборка.Ссылка + " (номер на устройстве: " + тмпДокумент.number + ") уже был загружен! Перезапись непроведенных документов отключена в настройках.");
								СчетОшибочных = СчетОшибочных + 1;
							КонецЕсли;	
						КонецЕсли;
					Исключение
						Продолжить;
					КонецПопытки;
				Иначе
					Если ВидПрикладногоРешения = "УНФ" Тогда
						Док = Документы.РасходнаяНакладная.СоздатьДокумент();	
					Иначе
						Док = Документы.РеализацияТоваровУслуг.СоздатьДокумент();	
					КонецЕсли;
				КонецЕсли;
				
				//Если документ изначально создавался в 1С
				ДокументБылСозданВ1С = Ложь;
				Если Не ЕстьОшибки Тогда
					Если тмпДокумент.uniqueID = СокрЛП(Док.Ссылка.УникальныйИдентификатор()) Тогда
						ДокументБылСозданВ1С = Истина;
						ТребуетсяСоздатьИлиИзменитьДокумент = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если ТребуетсяСоздатьИлиИзменитьДокумент Или ДокументБылСозданВ1С Тогда
					
					Если ТребуетсяСоздатьИлиИзменитьДокумент Тогда
						//Организация
						тмпКод = тмпДокумент.companyID;
						БПАГОрганизация = Справочники.БПАГОрганизации.НайтиПоКоду(тмпКод);
						Если БПАГОрганизация.Пустая() Тогда
							ЕстьОшибки = Истина;
							СтрокаОшибок = СтрокаОшибок + "Организация с кодом " + тмпКод + " не найдена! " + Символы.ПС;
							Организация = Справочники.Организации.ПустаяСсылка();
						Иначе
							Организация = БПАГОрганизация.Организация;
						КонецЕсли;
						
						//Контрагент или партнер
						Если ВидПрикладногоРешения = "УТ11" Тогда
							тмпКод = тмпДокумент.clientID;
							БПАГКонтрагент = Справочники.БПАГКонтрагенты.НайтиПоКоду(тмпКод);
							Если БПАГКонтрагент.Пустая() Тогда
								ЕстьОшибки = Истина;
								СтрокаОшибок = СтрокаОшибок + "Партнер с кодом " + тмпКод + " не найден! " + Символы.ПС;
								Партнер = Справочники.Партнеры.ПустаяСсылка();
							Иначе
								Партнер = БПАГКонтрагент.Партнер;
							КонецЕсли;
						Иначе
							тмпКод = тмпДокумент.clientID;
							БПАГКонтрагент = Справочники.БПАГКонтрагенты.НайтиПоКоду(тмпКод);
							Если БПАГКонтрагент.Пустая() Тогда
								ЕстьОшибки = Истина;
								СтрокаОшибок = СтрокаОшибок + "Контрагент с кодом " + тмпКод + " не найден! " + Символы.ПС;
								Контрагент = Справочники.Контрагенты.ПустаяСсылка();
							Иначе
								Контрагент = БПАГКонтрагент.Контрагент;
							КонецЕсли;
						КонецЕсли;
						
						//Склад
						тмпКод = тмпДокумент.depotID;
						БПАГСклад = Справочники.БПАГСклады.НайтиПоКоду(тмпКод);
						Если БПАГСклад.Пустая() Тогда
							ЕстьОшибки = Истина;
							СтрокаОшибок = СтрокаОшибок + "Склад с кодом " + тмпКод + " не найден! " + Символы.ПС;
							Если ВидПрикладногоРешения = "УНФ" Тогда
								Склад = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
							Иначе
								Склад = Справочники.Склады.ПустаяСсылка();
							КонецЕсли;
						Иначе
							Склад = БПАГСклад.Склад;
						КонецЕсли;
						
						//Договор или соглашение
						Если ВидПрикладногоРешения = "УТ11" Тогда
							тмпНаименованиеСоглашения = Сред(тмпДокумент.analyticsID, СтрДлина(БПАГКонтрагент.Код) + 1);
							Соглашение = ПолучитьСоглашение(тмпНаименованиеСоглашения, Партнер);
							Если Соглашение.Пустая() Тогда
								ЕстьОшибки = Истина;
								СтрокаОшибок = СтрокаОшибок + "Соглашение с наименованием " + тмпНаименованиеСоглашения + " не найдено! " + Символы.ПС;
							КонецЕсли
						Иначе
							тмпКод = тмпДокумент.analyticsID;
							Договор = Справочники.ДоговорыКонтрагентов.НайтиПоКоду(тмпКод);
							Если Договор.Пустая() Тогда
								ЕстьОшибки = Истина;
								СтрокаОшибок = СтрокаОшибок + "Договор с кодом " + тмпКод + " не найден! " + Символы.ПС;
							КонецЕсли;	
						КонецЕсли;
						
						//Тип цен
						тмпКод = тмпДокумент.priceTypeID;
						БПАГПрайс = Справочники.БПАГПрайсы.НайтиПоКоду(тмпКод);
						Если БПАГПрайс.Пустая() Тогда
							ЕстьОшибки = Истина;
							СтрокаОшибок = СтрокаОшибок + "Прайс с кодом " + тмпКод + " не найден! " + Символы.ПС;
							Если (ВидПрикладногоРешения = "УТ11") ИЛИ (ВидПрикладногоРешения = "УНФ") Тогда
								ТипЦен = Справочники.ВидыЦен.ПустаяСсылка();
							Иначе
								ТипЦен = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
							КонецЕсли;
						Иначе
							ТипЦен = БПАГПрайс.ТипЦен;
						КонецЕсли;
						
						//Торговая точка
						тмпКод = тмпДокумент.posID;
						ТорговаяТочка = Справочники.БПАГТорговыеТочки.НайтиПоКоду(тмпКод);
						Если ТорговаяТочка.Пустая() Тогда
							ЕстьОшибки = Истина;
							СтрокаОшибок = СтрокаОшибок + "Торговая точка с кодом " + тмпКод + " не найдена! " + Символы.ПС;
						КонецЕсли;
						
						//Физлицо (агент)
						ФизЛицо = тмпАгент.Агент.ФизЛицо;
						
						//Номер
						Номер = тмпДокумент.number;
						
						//Сумма документа
						СуммаДокумента = Число(тмпДокумент.sum);
						
						//Дата последнего изменения
						ДатаПоследнегоИзменения = Дата(ПреобразоватьДатуВФормат24(тмпДокумент.date)); //ПАКЛ
						
						
						//Заполнение (перезаполнение) документа
						Если ВидПрикладногоРешения = "УТ11" Тогда
							
							Попытка
								Док.ЦенаВключаетНДС = НастройкаИзКэша("1ССуммаВключаетНДС");
							Исключение
							КонецПопытки;
							
							Если СпецификаПользователя = "FT" Тогда
								Док.Дата = ТекущаяДата();
							Иначе
								Док.Дата = ДатаПоследнегоИзменения;
							КонецЕсли;

							Док.Валюта = мВалютаРегламентированногоУчета;
							Док.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета;
							
							Док.Грузополучатель = ?(ТорговаяТочка.Грузополучатель.Пустая(), Контрагент, ТорговаяТочка.Грузополучатель);
							
							Док.Комментарий = ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", "Пан Агент (" + тмпАгент.Агент + ") №" + Номер) + ?(СокрЛП(тмпДокумент.comment) = "", "", ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", " (") + тмпДокумент.comment + ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", ")"));
							
							Док.Партнер = Партнер;
							Док.Контрагент = ПолучитьКонтрагентаПартнера(Док.Партнер);
							Док.Организация = Организация;
							
							Док.СуммаДокумента = СуммаДокумента;
							Док.СуммаВзаиморасчетов = СуммаДокумента;
							
							Док.Менеджер = ПолучитьОтветственного(тмпАгент);
							Док.Подразделение = Док.Менеджер.ТекущееПодразделение;
							
							Док.СкидкиРассчитаны = Истина;
							Док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
							
							тмпСтатус = НастройкаИзКэша("1ССтатусРеализаций", тмпАгент.Агент);
							Если (тмпСтатус = "Ошибка") Или (тмпСтатус.Пустая()) Тогда
								Док.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
							Иначе
								Док.Статус = тмпСтатус;
							КонецЕсли;
						
							Док.Соглашение = Соглашение;
							Если Не БПАГКонтрагент.Пустая() Тогда
								Док.ЗаполнитьУсловияПродажПоCоглашению();
							КонецЕсли;
							Док.Склад = Склад;
							
							Попытка
								УсловияПродаж = 0;
								Выполнить("УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(Док.Соглашение, Истина, Истина);");
								Выполнить("Док.ДатаПлатежа = ПродажиСервер.ПолучитьПоследнююДатуПоГрафику(Док.Дата, УсловияПродаж.ГрафикОплаты, УсловияПродаж.Соглашение);");
							Исключение
							КонецПопытки;
							
							Если Док.ДатаПлатежа = Дата(1, 1, 1) Тогда
								Док.ДатаПлатежа = Док.Дата;
							КонецЕсли;
							
							//Выполнить("ПродажиСервер.УстановитьДоступностьДоговора(Док, Ложь, Док.Договор);");
							
							Док.АдресДоставки = ТорговаяТочка.Адрес;
							Попытка
								Док.СрокДоставки = Док.Дата;
							Исключение
							КонецПопытки;
							
							Попытка
								Выполнить("Док.Основание = Документы.РеализацияТоваровУслуг.ПолучитьТекстОснованияДляПечати(Док);");
							Исключение
								СтруктураОснование = 0;
								Выполнить("СтруктураОснование = Документы.РеализацияТоваровУслуг.СтруктураОснованияДляПечати(Док);");
								Выполнить("ЗаполнитьЗначенияСвойств(Док, СтруктураОснование);");
							КонецПопытки;
							
							Попытка
								СтруктураОтветственного = Неопределено;
								Выполнить("СтруктураОтветственного = ПродажиСервер.ПолучитьОтветственногоПоСкладу(Склад, Док.Менеджер);");
								Если СтруктураОтветственного <> Неопределено Тогда
									Док.Отпустил = СтруктураОтветственного.Ответственный;
									Док.ОтпустилДолжность = СтруктураОтветственного.ОтветственныйДолжность;
								КонецЕсли;
							Исключение
							КонецПопытки;
							
						ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
							
							Док.Дата = ДатаПоследнегоИзменения;
							Док.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю;
							Док.Организация = Организация;
							Док.Контрагент = Контрагент;
							Док.Договор = Договор;
							
							Док.СуммаДокумента = СуммаДокумента;
							
							Док.СтруктурнаяЕдиница = Склад;
							Док.ВидЦен = ТипЦен;
							Док.ВалютаДокумента = Договор.ВалютаРасчетов;
							Док.Курс = 1;
							Док.Кратность = 1;
							Док.СуммаДокумента = СуммаДокумента;
							
				            Док.Ответственный = ПолучитьОтветственного(тмпАгент);
							Док.Подразделение = НастройкаИзКэша("1СОсновноеПодразделение", тмпАгент.Агент);
							Док.Комментарий = ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", "Пан Агент (" + тмпАгент.Агент + ") №" + Номер) + ?(СокрЛП(тмпДокумент.comment) = "", "", ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", " (") + тмпДокумент.comment + ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", ")"));
							
							Док.Грузополучатель = ?(ТорговаяТочка.Грузополучатель.Пустая(), Контрагент, ТорговаяТочка.Грузополучатель);
							
							Выполнить("Док.НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Организация,, Док.Дата);");
							Док.СуммаВключаетНДС = Док.ВидЦен.ЦенаВключаетНДС;
							
							Выполнить("Док.Автор = Пользователи.ТекущийПользователь();");
							
						Иначе
							
							Если СпецификаПользователя = "FT" Тогда
								Док.Дата = ТекущаяДата();
							ИначеЕсли СпецификаПользователя = "Sarmat" Тогда 
								Док.Дата = ТекущаяДата();
							Иначе
								Док.Дата = ДатаПоследнегоИзменения;
							КонецЕсли;
							
							Док.АдресДоставки = ТорговаяТочка.Адрес;
							Попытка
								Док.ДополнениеКАдресуДоставки = ПолучитьКомментарийКИ(Контрагент, Док.АдресДоставки);
							Исключение
							КонецПопытки;
							
							Док.ВалютаДокумента = мВалютаРегламентированногоУчета;
							
							Попытка
								Док.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
							Исключение
							КонецПопытки;
							
							Док.ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;
							Док.Грузоотправитель = Организация;
							Док.Грузополучатель = ?(ТорговаяТочка.Грузополучатель.Пустая(), Контрагент, ТорговаяТочка.Грузополучатель);
							Док.ДоговорКонтрагента = Договор;
							
							Док.Комментарий = ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", "Пан Агент (" + тмпАгент.Агент + ") №" + Номер) + ?(СокрЛП(тмпДокумент.comment) = "", "", ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", " (") + тмпДокумент.comment + ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", ")"));
							
							Док.Контрагент = Контрагент;
							Док.КратностьВзаиморасчетов = 1;
							Док.КурсВзаиморасчетов = 1;
							Док.Организация = Организация;
							Если СпецификаПользователя = "Adal" Тогда
								Если НЕ Контрагент.Пустая() Тогда
									Док.Склад = Контрагент.ОсновнойСклад;
								КонецЕсли;
							Иначе	
								Док.Склад = Склад;
							КонецЕсли;
							Док.СуммаДокумента = СуммаДокумента;
							Док.ОтпускРазрешил = ФизЛицо;
							Док.ОтпускПроизвел = ФизЛицо;
							
							Док.Подразделение = НастройкаИзКэша("1СОсновноеПодразделение", тмпАгент.Агент);
							
							Выполнить("ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Док, ""Продажа"");");
							ПриИзмененииЗначенияОрганизации(Док);
							
							Док.ОтражатьВУправленческомУчете = НастройкиДокумента.ОтражатьВУУ;
							
							Попытка
								Док.ОтражатьВБухгалтерскомУчете = НастройкиДокумента.ОтражатьВБУ;
								Док.ОтражатьВНалоговомУчете = НастройкиДокумента.ОтражатьВНУ;
								ЗаполнитьЗначенияСвойств(Док, Док.ЗаполнитьСтруктуруСчетовУчетаШапки(Док.ОтражатьВБухгалтерскомУчете, Док.ОтражатьВНалоговомУчете));
							Исключение
							КонецПопытки;
							
							Док.Ответственный = ПолучитьОтветственного(тмпАгент);
							
							СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
							
							//СтруктураРеквизитовДокумента = 0;
							//Выполнить("СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(Док)");
							
							Выполнить("ЗаполнениеДокументов.УстановитьТипСделки(Док, Истина);");
							
							Док.ТипЦен = ТипЦен;
						КонецЕсли;
						
						//Загрузка табличной части
						Если ВидПрикладногоРешения = "УНФ" Тогда
							Док.Запасы.Очистить();
						Иначе
							Док.Товары.Очистить();
						КонецЕсли;
						
						Для Каждого тмп Из тмпДокумент.rows Цикл
							тмп.sort = Число(тмп.sort);
						КонецЦикла;
						тмпДокумент.rows.Сортировать("sort");
						Для Каждого тмпСтрока Из тмпДокумент.rows Цикл
							
							//Товар
							тмпКод = тмпСтрока.goodID;
							тмпНазваниеХарактеристики = "";
							
							ПозицияРазделителяХарактеристики = Найти(тмпСтрока.goodID, ":|");
							Если ПозицияРазделителяХарактеристики > 0 Тогда
								тмпКод = Лев(тмпСтрока.goodID, ПозицияРазделителяХарактеристики - 1);
								тмпНазваниеХарактеристики = Сред(тмпСтрока.goodID, ПозицияРазделителяХарактеристики + 2);
							КонецЕсли;
							
							БПАГНоменклатура = Справочники.БПАГНоменклатура.НайтиПоКоду(тмпКод);
							Если БПАГНоменклатура.Пустая() Тогда
								ЕстьОшибки = Истина;
								СтрокаОшибок = СтрокаОшибок + "Товар с кодом " + тмпКод + " не найден! " + Символы.ПС;
								Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
							Иначе
								Номенклатура = БПАГНоменклатура.Номенклатура;
							КонецЕсли;
							
							Характеристика = ПолучитьХарактеристику(Номенклатура, тмпНазваниеХарактеристики);
							
							//Единица измерения
							тмпКоэффициент = Число(тмпСтрока.coeff);
							ЕдиницаИзмерения = ПолучитьЕдиницуИзмерения(тмпСтрока, Номенклатура, ЕстьОшибки, СтрокаОшибок);
							
							//Цена
							Цена = Число(тмпСтрока.price);
							
							//Количество
							Количество = Число(тмпСтрока.quantity);
							
							//Сумма
							Сумма = Число(тмпСтрока.sum);
							
							//Цена без скидки
							ЦенаБезСкидки = 0;
							Попытка
								ЦенаБезСкидки = Число(тмпСтрока.originalPrice);
							Исключение
							КонецПопытки;
							
							//Процент скидки
							ПроцентСкидки = 0;
							Попытка
								ПроцентСкидки = Число(тмпСтрока.discountPercent);
							Исключение
							КонецПопытки;
							
							//Сумма скидки
							СуммаСкидки = 0;
							Попытка
								СуммаСкидки = Число(тмпСтрока.discountSum);
							Исключение
							КонецПопытки;
							
							Если ВидПрикладногоРешения = "УТ11" Тогда
								Если Окр(Количество, 3) > 0 Тогда
									НоваяСтрока = Док.Товары.Добавить();
									НоваяСтрока.Номенклатура = Номенклатура;
									НоваяСтрока.КоличествоУпаковок = Количество;
									НоваяСтрока.Количество = НоваяСтрока.КоличествоУпаковок * тмпКоэффициент;
									НоваяСтрока.Характеристика = Характеристика;
									
									//Цена
									//Если (СпецификаПользователя <> "FT") ИЛИ (Док.Соглашение.Типовое) Тогда
									НоваяСтрока.ВидЦены = ТипЦен;
									//КонецЕсли;
									
									Если НастройкаИзКэша("1СЗагружатьДокументыВБазовыхЕдиницах", тмпАгент.Агент) Тогда
										// ***** NIY (IO)
										ОтладочноеСообщение("Загрузка реализаций с учетом настройки '1СЗагружатьДокументыВБазовыхЕдиницах'. Для версии Управление торговлей 11 загрузка номенклатуры в базовых единицах не предусмотрена.  NIY.");
										//НоваяСтрока.Упаковка = НоваяСтрока.Номенклатура. .ЕдиницаХраненияОстатков;
										//НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
										//Если ЦенаБезСкидки = 0 Тогда
										//	НоваяСтрока.Цена = ?(тмпКоэффициент = 0, 0, Цена / тмпКоэффициент * НоваяСтрока.Коэффициент);
										//Иначе
										//	НоваяСтрока.Цена = ?(тмпКоэффициент = 0, 0, ЦенаБезСкидки / тмпКоэффициент * НоваяСтрока.Коэффициент);
										//	НоваяСтрока.ПроцентАвтоматическихСкидок = ПроцентСкидки;
										//	НоваяСтрока.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.БезУсловий;
										//КонецЕсли;
										//НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
									Иначе
										НоваяСтрока.Упаковка = ЕдиницаИзмерения;
										Если ЦенаБезСкидки = 0 Тогда
											НоваяСтрока.Цена = Цена;
										Иначе
											НоваяСтрока.Цена = ЦенаБезСкидки;
											НоваяСтрока.ПроцентРучнойСкидки = ПроцентСкидки;
											НоваяСтрока.СуммаРучнойСкидки = СуммаСкидки;
										КонецЕсли;
									КонецЕсли;
									
									НоваяСтрока.Сумма = Сумма;
									
									НоваяСтрока.Склад = Док.Склад;
									
									СтруктураПересчетаСуммы = Неопределено;
									Выполнить("СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);");
									
									СтруктураДействий = Новый Структура;
									СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
									СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Док.НалогообложениеНДС);
									СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
									СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
									СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
									КэшированныеЗначения = Неопределено;
									Выполнить("ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);");									
								КонецЕсли;
								
							ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
								
								Если Окр(Количество, 3) > 0 Тогда
									НоваяСтрока = Док.Запасы.Добавить();
									НоваяСтрока.Номенклатура = Номенклатура;
									
									НоваяСтрока.Количество = Количество;
									
									Если НастройкаИзКэша("1СЗагружатьДокументыВБазовыхЕдиницах", тмпАгент.Агент) Тогда
										// ***** NIY (IO)
										ОтладочноеСообщение("Загрузка реализаций с учетом настройки '1СЗагружатьДокументыВБазовыхЕдиницах'. Для версии УНФ загрузка номенклатуры в базовых единицах не предусмотрена.  NIY.");
									Иначе
										НоваяСтрока.ЕдиницаИзмерения = ЕдиницаИзмерения;
										Если ЦенаБезСкидки = 0 Тогда
											НоваяСтрока.Цена = Цена;
										Иначе
											НоваяСтрока.Цена = ЦенаБезСкидки;
											НоваяСтрока.ПроцентСкидкиНаценки = ПроцентСкидки;
										КонецЕсли;
									КонецЕсли;
									
									НоваяСтрока.Сумма = Сумма;
									НоваяСтрока.Всего = Сумма;
									
									СтруктураДанные = Новый Структура();
									СтруктураДанные.Вставить("Организация", Организация);
									СтруктураДанные.Вставить("Номенклатура", НоваяСтрока.Номенклатура);
									СтруктураДанные.Вставить("Характеристика", НоваяСтрока.Характеристика);
									СтруктураДанные.Вставить("НалогообложениеНДС", Док.НалогообложениеНДС);
									
									Если ЗначениеЗаполнено(Док.ВидЦен) Тогда
										
										СтруктураДанные.Вставить("ДатаОбработки",	 Док.Дата);
										СтруктураДанные.Вставить("ВалютаДокумента",  Док.ВалютаДокумента);
										СтруктураДанные.Вставить("СуммаВключаетНДС", Док.СуммаВключаетНДС);
										СтруктураДанные.Вставить("ВидЦен", Док.ВидЦен);
										СтруктураДанные.Вставить("Коэффициент", 1);
										СтруктураДанные.Вставить("ВидСкидкиНаценки", Док.ВидСкидкиНаценки);
											
									КонецЕсли;
									
									СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
									
									НоваяСтрока.СтавкаНДС = СтруктураДанные.СтавкаНДС;
									НоваяСтрока.ТипНоменклатурыЗапас = СтруктураДанные.ЭтоЗапас;
									
									ЧислоСтавкаНДС = 0;
									Выполнить("ЧислоСтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);");
									
									НоваяСтрока.СуммаНДС = ?(Док.СуммаВключаетНДС, 
																	  НоваяСтрока.Сумма - (НоваяСтрока.Сумма / ((ЧислоСтавкаНДС + 100) / 100)),
																	  НоваяСтрока.Сумма * ЧислоСтавкаНДС / 100);
									
								КонецЕсли;
							Иначе //УТ10
								Если Окр(Количество, 3) > 0 Тогда
									
									Если (Номенклатура.ВидНоменклатуры = ВидНоменклатурыТара) И (НЕ Номенклатура.ВидНоменклатуры.Пустая()) Тогда
										//Тара
										НоваяСтрока = Док.ВозвратнаяТара.Добавить();
										НоваяСтрока.Номенклатура = Номенклатура;
										НоваяСтрока.Количество = Количество;
										
										НоваяСтрока.Цена = Цена;
										НоваяСтрока.Сумма = Сумма;
										
										// Выполнить общие действия для всех документов при изменении номенклатуры.
										Выполнить("ОбработкаТабличныхЧастей.ПриИзмененииВозвратнойТарыТабЧасти(НоваяСтрока, Док);");
										
										// Заполняем реквизиты табличной части.
										Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(НоваяСтрока, Док);");
										
										// Рассчитать реквизиты табличной части.
										Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(НоваяСтрока, Док);");
										
										Попытка
											Док.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "ВозвратнаяТара", Док.ОтражатьВБухгалтерскомУчете, Док.ОтражатьВНалоговомУчете);
										Исключение
										КонецПопытки;
										
									Иначе
										//Не тара, обычная номенклатура
										НоваяСтрока = Док.Товары.Добавить();
										НоваяСтрока.Номенклатура = Номенклатура;
										НоваяСтрока.Количество = Количество;
										НоваяСтрока.ХарактеристикаНоменклатуры = Характеристика;
										
										Если НастройкаИзКэша("1СЗагружатьДокументыВБазовыхЕдиницах", тмпАгент.Агент) Тогда
											НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
											НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
											Если ЦенаБезСкидки = 0 Тогда
												НоваяСтрока.Цена = ?(тмпКоэффициент = 0, 0, Цена / тмпКоэффициент * НоваяСтрока.Коэффициент);
											Иначе
												НоваяСтрока.Цена = ?(тмпКоэффициент = 0, 0, ЦенаБезСкидки / тмпКоэффициент * НоваяСтрока.Коэффициент);
												НоваяСтрока.ПроцентАвтоматическихСкидок = ПроцентСкидки;
												Если ПроцентСкидки <> 0 Тогда
													НоваяСтрока.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.БезУсловий;
												КонецЕсли;
											КонецЕсли;
											НоваяСтрока.Количество = НоваяСтрока.Количество * тмпКоэффициент;
										Иначе
											НоваяСтрока.ЕдиницаИзмерения = ЕдиницаИзмерения;
											НоваяСтрока.Коэффициент = ЕдиницаИзмерения.Коэффициент;
											Если ЦенаБезСкидки = 0 Тогда
												НоваяСтрока.Цена = Цена;
											Иначе
												НоваяСтрока.Цена = ЦенаБезСкидки;
												НоваяСтрока.ПроцентАвтоматическихСкидок = ПроцентСкидки;
												Если ПроцентСкидки <> 0 Тогда
													НоваяСтрока.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.БезУсловий;
												КонецЕсли;
											КонецЕсли;
										КонецЕсли;
										
										НоваяСтрока.Сумма = Сумма;
										
										// Выполнить общие действия для всех документов при изменении номенклатуры.
										Выполнить("ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НоваяСтрока, Док);");
										
										Попытка
											Док.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", Док.ОтражатьВБухгалтерскомУчете, Док.ОтражатьВНалоговомУчете);
										Исключение
										КонецПопытки;
										
										// Заполняем реквизиты табличной части.
										Попытка
											Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, Док, ""Реализация"");");
										Исключение
											Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, Док);");
										КонецПопытки;
										
										Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(НоваяСтрока, Док);");
										
										// Рассчитать реквизиты табличной части.
										Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, Док);");
										Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, Док);");
										
										НоваяСтрока.КлючСтроки = НоваяСтрока.НомерСтроки;
										// Ввод состава набора
										Выполнить("УправлениеЗапасами.ДобавитьСоставНабора(НоваяСтрока, Док);");
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
						//Проверим заполнение цен комплектующих и установим в 1 рубль, если отсутствуют
						Если ВидПрикладногоРешения = "УТ10" Тогда
							Для Каждого тмпСтрока Из Док.СоставНабора Цикл
								Если тмпСтрока.Цена = 0 Тогда
									тмпСтрока.Цена = 1;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						
						СчетДокументов = СчетДокументов + 1;						
						// Если есть категории "PostUU", "PostBU", "DontPostUU", "DontPostBU", то соответствующим образом проставим отражения в учетах
						УстановитьСпособыОтраженияВУчетах(тмпДокумент, Док);
						
						Если ЕстьОшибки Тогда
							//Док.ОбменДанными.Загрузка = Истина;
							Док.Записать(РежимЗаписиДокумента.Запись);	
							ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Реализация " + Номер + " (Реализация товаров и услуг " + Док.Номер + ") - возникли ошибки при загрузке: ");
							ОтладочноеСообщение(СтрокаОшибок);
							
							СчетОшибочных = СчетОшибочных + 1;
							
						Иначе	
							//Док.ОбменДанными.Загрузка = Истина;
							Попытка
								Док.Записать(?(НастройкиДокумента.Проводить, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
							Исключение
								ЕстьОшибки = Истина;
								СчетОшибочных = СчетОшибочных + 1;
								ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Реализация " + Номер + " (Реализация товаров и услуг " + Док.Номер + ") - возникли ошибки при загрузке: ");
								ОтладочноеСообщение(ОписаниеОшибки());
								Попытка
									Док.Записать(РежимЗаписиДокумента.Запись);
								Исключение
									ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Реализация " + Номер + " (Реализация товаров и услуг " + Док.Номер + ") - возникли ошибки при загрузке: ");
									ОтладочноеСообщение(ОписаниеОшибки());
								КонецПопытки;
							КонецПопытки;
							
						КонецЕсли;
						
						Если (ВидПрикладногоРешения = "УТ11") ИЛИ (ВидПрикладногоРешения = "УНФ") Тогда
							Если СпецификаПользователя = "FT" Тогда
								//Торговый представитель
								ДопРеквизит = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Торговый представитель");	
								Если ДопРеквизит.Пустая() Тогда
									ОтладочноеСообщение("Отсутствует дополнительный реквизит реализации ""Торговый представитель""!");
								Иначе	
									НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
									
									НаборЗаписей.Отбор.Объект.Установить(Док.Ссылка);
									НаборЗаписей.Отбор.Свойство.Установить(ДопРеквизит);
									
									НаборЗаписей.Прочитать();
									НаборЗаписей.Очистить();
									
									НоваяЗапись = НаборЗаписей.Добавить();
									НоваяЗапись.Объект = Док.Ссылка;
									НоваяЗапись.Свойство = ДопРеквизит;
									НоваяЗапись.Значение = ФизЛицо;
									НаборЗаписей.Записать();
								КонецЕсли;
								
								Попытка
									Для Каждого тмпСтрока Из тмпДокумент.properties Цикл
										Если тмпСтрока.identifier = "FTPaymentMethod" Тогда
											Если ВРег(тмпСтрока.value) = "НАЛИЧНАЯ" Тогда
												Док.ФормаОплаты = Перечисления.ФормыОплаты.Наличная;
											ИначеЕсли ВРег(тмпСтрока.value) = "БЕЗНАЛИЧНАЯ" Тогда
												Док.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;
											КонецЕсли;
										ИначеЕсли тмпСтрока.identifier = "FTGetDebt" Тогда
											Если тмпСтрока.value <> "" Тогда
												СуммаЗабратьДолг = Число(СтрЗаменить(тмпСтрока.value, ",", "."));
												Если СуммаЗабратьДолг <> 0 Тогда
													
													ДопРеквизит = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Забрать долг");
													Если ДопРеквизит.Пустая() Тогда
														ОтладочноеСообщение("Отсутствует дополнительный реквизит реализации ""Забрать долг""!");
													Иначе	
														ДопРеквизитНайден = Ложь;
														Для Каждого тмпСтрокаРеквизитов Из Док.ДополнительныеРеквизиты Цикл
															Если тмпСтрокаРеквизитов.Свойство = ДопРеквизит Тогда
																тмпСтрокаРеквизитов.Значение = СуммаЗабратьДолг;
																тмпСтрокаРеквизитов.ТекстоваяСтрока = СуммаЗабратьДолг;
																ДопРеквизитНайден = Истина;
																Прервать;
															КонецЕсли;
														КонецЦикла;
														Если НЕ ДопРеквизитНайден Тогда
															тмпСтрокаРеквизитов = Док.ДополнительныеРеквизиты.Добавить();
															тмпСтрокаРеквизитов.Свойство = ДопРеквизит;
															тмпСтрокаРеквизитов.Значение = СуммаЗабратьДолг;
															тмпСтрокаРеквизитов.ТекстоваяСтрока = СуммаЗабратьДолг;
														КонецЕсли;
													КонецЕсли;
												КонецЕсли;
											КонецЕсли;
										КонецЕсли;
									КонецЦикла;
								Исключение
									ОтладочноеСообщение("Ошибка при загрузке свойств: " + ОписаниеОшибки());
								КонецПопытки;								
							КонецЕсли;
							
						КонецЕсли;
					
					КонецЕсли;
					
					Если (ВидПрикладногоРешения = "УТ10") или (ВидПрикладногоРешения = "УТ11") Тогда
						УстановитьСвойстваИКатегории(тмпДокумент, Док);
						Если ВидПрикладногоРешения = "УТ11" Тогда
							//Док.ОбменДанными.Загрузка = Истина;
							Попытка
								Док.Записать(РежимЗаписиДокумента.Запись);
							Исключение
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
					
					
					Если НЕ ТребуетсяСоздатьИлиИзменитьДокумент Тогда
						//Торговая точка
						тмпКод = тмпДокумент.posID;
						ТорговаяТочка = Справочники.БПАГТорговыеТочки.НайтиПоКоду(тмпКод);
						//Номер
						Номер = тмпДокумент.number;
					КонецЕсли;
					
					//Запишем данные в служебный регистр
					Если ТребуетсяСоздатьИлиИзменитьДокумент Тогда

						НоваяЗаписьДокументыАгентов = РегистрыСведений.БПАГДокументыАгентов.СоздатьМенеджерЗаписи();
						НоваяЗаписьДокументыАгентов.ВидДокумента = Перечисления.БПАГВидыДокументов.Реализация;
						
						НоваяЗаписьДокументыАгентов.Период = ТекущаяДата();
						НоваяЗаписьДокументыАгентов.Агент = тмпАгент.Агент;
						НоваяЗаписьДокументыАгентов.Документ = Док.Ссылка;
						НоваяЗаписьДокументыАгентов.ТорговаяТочка = ТорговаяТочка;
						НоваяЗаписьДокументыАгентов.ДатаСозданияНаУстройстве = Дата(ПреобразоватьДатуВФормат24(тмпДокумент.createdDate));//ПАКЛ
						НоваяЗаписьДокументыАгентов.ДатаИзмененияНаУстройстве = Дата(ПреобразоватьДатуВФормат24(тмпДокумент.modifiedDate));//ПАКЛ
						
						НоваяЗаписьДокументыАгентов.ИД = тмпДокумент.uniqueID;
						НоваяЗаписьДокументыАгентов.НомерДокументаНаУстройстве = Номер;
						НоваяЗаписьДокументыАгентов.ШиротаСоздания = Число(тмпДокумент.createdLatitude);
						НоваяЗаписьДокументыАгентов.ДолготаСоздания = Число(тмпДокумент.createdLongitude);
						НоваяЗаписьДокументыАгентов.ШиротаИзменения = Число(тмпДокумент.modifiedLatitude);
						НоваяЗаписьДокументыАгентов.ДолготаИзменения = Число(тмпДокумент.modifiedLongitude);
						НоваяЗаписьДокументыАгентов.МоментСозданияПоGPS = ?(тмпДокумент.createdLocationDate = "", 0, Дата(ПреобразоватьДатуВФормат24(тмпДокумент.createdLocationDate)));
						НоваяЗаписьДокументыАгентов.МоментИзмененияПоGPS = ?(тмпДокумент.modifiedLocationDate = "", 0, Дата(ПреобразоватьДатуВФормат24(тмпДокумент.modifiedLocationDate)));
						
						//Последняя проверка на то, что документ не пуст
						Если СокрЛП(НоваяЗаписьДокументыАгентов.Документ) = "" Тогда
							ОтладочноеСообщение("(!!!) Критическая ошибка базы данных. Обнаружена пустая ссылка на документ.");
							#Если Клиент Тогда
								Предупреждение("Критическая ошибка базы данных. Обнаружена пустая ссылка на документ. Обратитесь к системному администратору. Подробности зафиксированы в журнале (каталог logs папки обмена).", 10);
							#КонецЕсли
						Иначе	
							НоваяЗаписьДокументыАгентов.Записать();
						КонецЕсли;
						
					КонецЕсли;
					
				ИначеЕсли ОбратнаяВыгрузкаИз1С И (ПериодОбратнойВыгрузки > 0) Тогда
					Если (ВидПрикладногоРешения = "УТ10") или (ВидПрикладногоРешения = "УТ11") Тогда
						УстановитьСвойстваИКатегории(тмпДокумент, Док);
						Если ВидПрикладногоРешения = "УТ11" Тогда
							//Док.ОбменДанными.Загрузка = Истина;
							Попытка
								Док.Записать(РежимЗаписиДокумента.Запись);
							Исключение
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Загружено реализаций: " + СчетДокументов + "." +?(СчетОшибочных > 0, " Из них с ошибками: " + СчетОшибочных, " Без ошибок."));
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗагрузитьПКО(Агенты)
	
	ВидПрикладногоРешения = БПАГ.ПолучитьВидПрикладногоРешения();
	
	НастройкиДокумента = ПолучитьНастройкиДокумента(Перечисления.БПАГВидыДокументов.ПКО, ТекущаяДата());
	Если НастройкиДокумента = Неопределено Тогда
		ОтладочноеСообщение("Не заданы настройки для документа ""ПКО""! Загрузка остановлена. Задайте настройки и повторите загрузку.");
		Возврат;
	КонецЕсли;
	
	Для Каждого тмпАгент Из Агенты Цикл
		
		ТЗ = ПолучитьТЗИзPlist(тмпАгент.Агент, "cashins", "Не найдены ПКО для ");
		Если ТЗ = Неопределено Тогда
			Продолжить;
		Иначе
			
			СчетДокументов = 0;
			СчетОшибочных = 0;
			Для Каждого тмпДокумент Из ТЗ Цикл
				
				//Глобальное изменение формата - игнорируем старые документы для совместимости
				ДатаПоследнегоИзменения = Дата(ПреобразоватьДатуВФормат24(тмпДокумент.date));
				Если ДатаПоследнегоИзменения < Дата(2013, 1, 15) Тогда
					Продолжить;
				КонецЕсли;
				//End Глобальное изменение формата - игнорируем старые документы для совместимости
				
				ЕстьОшибки = Ложь;
				СтрокаОшибок = "";
				
				Если ТЗ.Колонки.Найти("rowCount") <> Неопределено Тогда
					Если Число(тмпДокумент.rowCount) = 0 Тогда
						ЕстьОшибки = Истина;
						ОтладочноеСообщение("ПКО (номер на устройстве: " + тмпДокумент.number + ") пуст (не заполнена табличная часть). Документ проигнорирован!");
						СчетОшибочных = СчетОшибочных + 1;
						Продолжить;
					КонецЕсли;
				Иначе
					ЕстьОшибки = Истина;
					ОтладочноеСообщение("ПКО (номер на устройстве: " + тмпДокумент.number + ") выгружен без табличной части. Документ проигнорирован!");
					СчетОшибочных = СчетОшибочных + 1;
					Продолжить;
				КонецЕсли;
				
				//ПАКЛ карты ->
				ОплатаОтПокупателяПлатежнойКартой = Ложь;
				Если ВидПрикладногоРешения = "УТ10" Тогда
					Для Каждого тмпСтрока Из тмпДокумент.properties Цикл
						Если (тмпСтрока.identifier = "ADD_karti") и (тмпСтрока.value = "1") Тогда
							ОплатаОтПокупателяПлатежнойКартой = Истина;
						КонецЕсли;	
					КонецЦикла;	
				КонецЕсли;
				//ПАКЛ карты <-
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	БПАГДокументыАгентовСрезПоследних.Документ КАК Ссылка
				|ИЗ
				|	РегистрСведений.БПАГДокументыАгентов.СрезПоследних(, ИД = &ИД) КАК БПАГДокументыАгентовСрезПоследних
				|ГДЕ
				|	БПАГДокументыАгентовСрезПоследних.ВидДокумента В(&ВидДокумента)";
				
				Запрос.УстановитьПараметр("ИД", тмпДокумент.uniqueID);
				ВидыДокумента = Новый Массив;
				ВидыДокумента.Добавить(Перечисления.БПАГВидыДокументов.ПКО);
				ВидыДокумента.Добавить(Перечисления.БПАГВидыДокументов.ОплатаПлатежнойКартой);//ПАКЛ
				Запрос.УстановитьПараметр("ВидДокумента", ВидыДокумента);
				//Запрос.УстановитьПараметр("ВидДокумента", Перечисления.БПАГВидыДокументов.ПКО);
				
				ТребуетсяСоздатьИлиИзменитьДокумент = Истина;
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Попытка
						Если Выборка.Ссылка.Пустая() Тогда
							Продолжить;
						ИначеЕсли Выборка.Ссылка.Проведен Тогда
							Если НастройкиДокумента.Перепроводить Тогда
								Док = Выборка.Ссылка.ПолучитьОбъект();	
							Иначе
								ТребуетсяСоздатьИлиИзменитьДокумент = Ложь;	
								ЕстьОшибки = Истина;
								ОтладочноеСообщение("Документ " + Выборка.Ссылка + " (номер на устройстве: " + тмпДокумент.number + ") уже проведен! Перепроведение отключено в настройках.");
								СчетОшибочных = СчетОшибочных + 1;
							КонецЕсли;
						ИначеЕсли Выборка.Ссылка.ПометкаУдаления Тогда
							ТребуетсяСоздатьИлиИзменитьДокумент = Ложь;	
							ЕстьОшибки = Истина;
							ОтладочноеСообщение("Документ " + Выборка.Ссылка + " (номер на устройстве: " + тмпДокумент.number + ") был помечен на удаление в центральной базе! Документ не загружен.");
							СчетОшибочных = СчетОшибочных + 1;
						Иначе
							//Документ уже загружен, но не проведен
							Если НастройкиДокумента.ПерезаписыватьНепроведенные Тогда
								Док = Выборка.Ссылка.ПолучитьОбъект();
								ТребуетсяСоздатьИлиИзменитьДокумент = Истина;	
							Иначе
								ТребуетсяСоздатьИлиИзменитьДокумент = Ложь;	
								ЕстьОшибки = Истина;
								ОтладочноеСообщение("Документ " + Выборка.Ссылка + " (номер на устройстве: " + тмпДокумент.number + ") уже был загружен! Перезапись непроведенных документов отключена в настройках.");
								СчетОшибочных = СчетОшибочных + 1;
							КонецЕсли;	
						КонецЕсли;
					Исключение
						Продолжить;
					КонецПопытки;
				Иначе
					Если СпецификаПользователя = "SD" Тогда
						Док = Документы.КпкКасса.СоздатьДокумент();	
					ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
						Док = Документы.ПоступлениеВКассу.СоздатьДокумент();	
					ИначеЕсли ВидПрикладногоРешения = "УТ10" Тогда
						Если ОплатаОтПокупателяПлатежнойКартой Тогда
							Док = Документы.ОплатаОтПокупателяПлатежнойКартой.СоздатьДокумент();	
						Иначе	
							Док = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();	
						КонецЕсли;
					Иначе
						Док = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();	
					КонецЕсли;
				КонецЕсли;
				Если ТребуетсяСоздатьИлиИзменитьДокумент Тогда
					//Организация
					тмпКод = тмпДокумент.companyID;
					БПАГОрганизация = Справочники.БПАГОрганизации.НайтиПоКоду(тмпКод);
					Если БПАГОрганизация.Пустая() Тогда
						ЕстьОшибки = Истина;
						СтрокаОшибок = СтрокаОшибок + "Организация с кодом " + тмпКод + " не найдена! " + Символы.ПС;
						Организация = Справочники.Организации.ПустаяСсылка();
					Иначе
						Организация = БПАГОрганизация.Организация;
					КонецЕсли;
					
					//Контрагент или партнер
					Если СпецификаПользователя = "SD" Тогда
						тмпКод = тмпДокумент.clientID;
						БПАГКонтрагент = Справочники.Контрагенты.НайтиПоКоду(тмпКод);
						Если БПАГКонтрагент.Пустая() Тогда
							ЕстьОшибки = Истина;
							СтрокаОшибок = СтрокаОшибок + "Контрагент с кодом " + тмпКод + " не найден! " + Символы.ПС;
							Контрагент = Справочники.Контрагенты.ПустаяСсылка();
						Иначе
							Контрагент = БПАГКонтрагент.Ссылка;
						КонецЕсли;
					ИначеЕсли ВидПрикладногоРешения = "УТ11" Тогда
						тмпКод = тмпДокумент.clientID;
						БПАГКонтрагент = Справочники.БПАГКонтрагенты.НайтиПоКоду(тмпКод);
						Если БПАГКонтрагент.Пустая() Тогда
							ЕстьОшибки = Истина;
							СтрокаОшибок = СтрокаОшибок + "Партнер с кодом " + тмпКод + " не найден! " + Символы.ПС;
							Партнер = Справочники.Партнеры.ПустаяСсылка();
						Иначе
							Партнер = БПАГКонтрагент.Партнер;
						КонецЕсли;
					Иначе
						тмпКод = тмпДокумент.clientID;
						БПАГКонтрагент = Справочники.БПАГКонтрагенты.НайтиПоКоду(тмпКод);
						Если БПАГКонтрагент.Пустая() Тогда
							ЕстьОшибки = Истина;
							СтрокаОшибок = СтрокаОшибок + "Контрагент с кодом " + тмпКод + " не найден! " + Символы.ПС;
							Контрагент = Справочники.Контрагенты.ПустаяСсылка();
						Иначе
							Контрагент = БПАГКонтрагент.Контрагент;
						КонецЕсли;
					КонецЕсли;
					
					//Договор или соглашение
					Если СпецификаПользователя = "SD" Тогда
						//нет договора
					ИначеЕсли ВидПрикладногоРешения = "УТ11" Тогда
						тмпНаименованиеСоглашения = Сред(тмпДокумент.analyticsID, СтрДлина(БПАГКонтрагент.Код) + 1);
						Соглашение = ПолучитьСоглашение(тмпНаименованиеСоглашения, Партнер);
						Если Соглашение.Пустая() Тогда
							ЕстьОшибки = Истина;
							СтрокаОшибок = СтрокаОшибок + "Соглашение с наименованием " + тмпНаименованиеСоглашения + " не найдено! " + Символы.ПС;
						КонецЕсли
					Иначе
						тмпКод = тмпДокумент.analyticsID;
						Договор = Справочники.ДоговорыКонтрагентов.НайтиПоКоду(тмпКод);
						Если Договор.Пустая() Тогда
							ЕстьОшибки = Истина;
							СтрокаОшибок = СтрокаОшибок + "Договор с кодом " + тмпКод + " не найден! " + Символы.ПС;
						КонецЕсли;	
					КонецЕсли;
					
					//Торговая точка
					Если СпецификаПользователя <> "SD" Тогда
						тмпКод = тмпДокумент.posID;
						ТорговаяТочка = Справочники.БПАГТорговыеТочки.НайтиПоКоду(тмпКод);
						Если ТорговаяТочка.Пустая() Тогда
							ЕстьОшибки = Истина;
							СтрокаОшибок = СтрокаОшибок + "Торговая точка с кодом " + тмпКод + " не найдена! " + Символы.ПС;
						КонецЕсли;
						//Физлицо (агент)
						ФизЛицо = тмпАгент.Агент.ФизЛицо;
						
						//Касса
						Касса = ПолучитьКассу(тмпАгент.Агент, БПАГОрганизация, СтрокаОшибок, ЕстьОшибки);
					КонецЕсли;
					
					//Номер
					Номер = тмпДокумент.number;
					
					//Сумма документа
					СуммаДокумента = Число(тмпДокумент.sum);
					Если СуммаДокумента = 0 Тогда
						ЕстьОшибки = Истина;
						СтрокаОшибок = СтрокаОшибок + "Сумма ПКО равна нулю! " + Символы.ПС;
					КонецЕсли;
					
					//Дата последнего изменения
					ДатаПоследнегоИзменения = Дата(ПреобразоватьДатуВФормат24(тмпДокумент.date));
					
					Если СпецификаПользователя = "SD" Тогда
						СуммаСкидки = 0;
						Попытка
							Для Каждого тмпСтрока Из тмпДокумент.properties Цикл
								
								Если тмпСтрока.identifier = "FTBonus" Тогда
									
									СуммаСкидки = тмпСтрока.value;
									
								КонецЕсли;
								
							КонецЦикла;
							
						Исключение
							ОтладочноеСообщение("Ошибка при загрузке свойств: " + ОписаниеОшибки());
						КонецПопытки;
					КонецЕсли;
					
					//Заполнение (перезаполнение) документа
					Если СпецификаПользователя = "FT" Тогда
						Док.Дата = ТекущаяДата();
					ИначеЕсли СпецификаПользователя = "Sarmat" Тогда	
						Док.Дата = ТекущаяДата();
					Иначе
						Док.Дата = ДатаПоследнегоИзменения;
					КонецЕсли;
					
					Если СпецификаПользователя <> "SD" Тогда
					Док.Организация = Организация;
					Попытка 
						Док.Касса = Касса; 
					Исключение
					КонецПопытки;
					КонецЕсли;
					Если СпецификаПользователя = "SD" Тогда
						Док.ИспользуетсяРасшифровкаПлатежа 	= Истина;
						Док.Контрагент 						= Контрагент;
						Док.Подразделение 					= тмпАгент.Агент.Подразделение;
						Док.Менеджер 						= тмпАгент.Агент.Менеджер;
						Док.СуммаДокумента 					= СуммаДокумента;
						Док.Комментарий 					= ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", "Пан Агент (" + тмпАгент.Агент + ") №" + Номер) + ?(СокрЛП(тмпДокумент.comment) = "", "", ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", " (") + тмпДокумент.comment + ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", ")"));
						
						Выполнить("Док.Автор = Пользователи.ТекущийПользователь();");
					ИначеЕсли ВидПрикладногоРешения = "УТ11" Тогда
						Док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
						Док.Контрагент = ПолучитьКонтрагентаПартнера(Партнер);
						Док.Валюта = мВалютаРегламентированногоУчета;
						Док.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
						Док.Основание = "Торговая выручка";
						
					ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
						Док.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя;
						Док.Контрагент = Контрагент;
						Док.ВалютаДенежныхСредств = Договор.ВалютаРасчетов;
						Док.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
						Док.Подразделение = НастройкаИзКэша("1СОсновноеПодразделение", тмпАгент.Агент);
						Выполнить("Док.НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Организация,, Док.Дата);");
						Док.СуммаУчета = СуммаДокумента;
						Док.Курс = 1;
						Док.Кратность = 1;
						Выполнить("Док.Автор = Пользователи.ТекущийПользователь();");
						
					Иначе
						Док.Подразделение = НастройкаИзКэша("1СОсновноеПодразделение", тмпАгент.Агент);
						Попытка
							Если ОплатаОтПокупателяПлатежнойКартой Тогда
								Попытка
									Док.ВидОперации = Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя;//ПАКЛ пл. карты
								Исключение
								КонецПопытки;
							Иначе	
								Док.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
							КонецЕсли;
						Исключение
						КонецПопытки;
						
						Док.Контрагент = Контрагент;
						Попытка
						Док.ДоговорКонтрагента = Договор;//ПАКЛ пл. карты
						Исключение
						КонецПопытки;
						Док.ВалютаДокумента = мВалютаРегламентированногоУчета;
						Попытка
							Док.ОтраженоВОперУчете = Истина;//ПАКЛ пл. карты
							Док.Оплачено = Истина;//ПАКЛ пл. карты
						Исключение
						КонецПопытки;
						Док.ОтражатьВУправленческомУчете = НастройкиДокумента.ОтражатьВУУ;
						
						Попытка
							Док.ОтражатьВБухгалтерскомУчете = НастройкиДокумента.ОтражатьВБУ;
							Док.ОтражатьВНалоговомУчете = НастройкиДокумента.ОтражатьВНУ;
						Исключение
						КонецПопытки;
						
						Док.Ответственный = ПолучитьОтветственного(тмпАгент);
						
					КонецЕсли;
					
					Если СпецификаПользователя <> "SD" Тогда
						Док.СуммаДокумента = СуммаДокумента;
						Попытка 
							Док.ПринятоОт = СокрЛП(Док.Контрагент.НаименованиеПолное);//ПАКЛ пл. карты
						Исключение
						КонецПопытки;
						Док.Комментарий = ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", "Пан Агент (" + тмпАгент.Агент + ") №" + Номер) + ?(СокрЛП(тмпДокумент.comment) = "", "", ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", " (") + тмпДокумент.comment + ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", ")"));
						
						//Ставка НДС
						Если БПАГОрганизация.СтавкаНДС.Пустая() Тогда
							Если ВидПрикладногоРешения = "УНФ" Тогда
								
								НалогообложениеНДС = 0;
								Выполнить("НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Организация,, Док.Дата);");
								
								СтавкаНДС = 0;
								Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
									СтавкаНДС = Организация.СтавкаНДСПоУмолчанию;
								Иначе
									Выполнить("СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();");
								КонецЕсли;
								
							Иначе
								//NIY Взять правильную ставку НДС
								СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
							КонецЕсли;
							
						Иначе
							СтавкаНДС = БПАГОрганизация.СтавкаНДС;
						КонецЕсли;
					КонецЕсли;
				
					//Загрузка табличной части
					Если СпецификаПользователя = "SD" Тогда
						Док.СтрокиДокумента.Очистить();
					Иначе	
						Док.РасшифровкаПлатежа.Очистить();
					КонецЕсли;
					
					Для Каждого тмп Из тмпДокумент.rows Цикл
						тмп.sort = Число(тмп.sort);
					КонецЦикла;
					
					тмпДокумент.rows.Сортировать("sort");
					Для Каждого тмпСтрока Из тмпДокумент.rows Цикл
						
						//Сумма
						Сумма = Число(тмпСтрока.sum);
						
						//ID Документа расчетов
						IDДокументаРасчетов = тмпСтрока.debtID;
						
						Если СпецификаПользователя = "SD" Тогда
							НоваяСтрока = Док.СтрокиДокумента.Добавить();
						Иначе	
							НоваяСтрока = Док.РасшифровкаПлатежа.Добавить();
						КонецЕсли;
						
						Если СпецификаПользователя = "SD" Тогда
							//Сумма
							Сумма = Число(тмпСтрока.sum);
							
							//ID Документа расчетов
							IDДокументаРасчетов = тмпСтрока.debtID;
							
							//НоваяСтрока = Док.СтрокиДокумента.Добавить();
							
							НоваяСтрока.Контрагент 	= Контрагент;
							НоваяСтрока.Сумма 		= Сумма;
							
							// "Откаты"
							НоваяСтрока.СуммаСкидки = СуммаСкидки;
							СуммаСкидки 			= 0;
							
							ДокументРасчетов = 0;
							Если IDДокументаРасчетов = "0" Тогда
								//Долг без документа, ни к чему не привязан
								
							ИначеЕсли IDДокументаРасчетов = "1" Тогда
								
								Попытка  
									//Долг по расчетному документу
									Для Каждого тмпМета Из Метаданные.Документы Цикл
										Если тмпМета.Синоним = тмпСтрока.debtDocument Тогда
											ДокументРасчетов = Документы[тмпМета.Имя].НайтиПоНомеру(тмпСтрока.debtNumber, Дата(тмпСтрока.debtDate + " 00:00:00"));
											Прервать;
										КонецЕсли;
									КонецЦикла;
									
								Исключение
									//Долг без документа, ни к чему не привязан
								КонецПопытки;
								
							Иначе
								//Долг по реализации, введенной на устройстве
							КонецЕсли;
							
							НоваяСтрока.КредДокумент = ДокументРасчетов;
							
						ИначеЕсли ВидПрикладногоРешения = "УТ11" Тогда
							
							НоваяСтрока.СуммаВзаиморасчетов = Сумма;
							
							НоваяСтрока.Партнер = Партнер;
							НоваяСтрока.Сумма = Сумма;
							НоваяСтрока.ВалютаВзаиморасчетов = Док.Валюта;
							Попытка
  							НоваяСтрока.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;							
							Исключение
							КонецПопытки;
						ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
							
							НоваяСтрока.Договор = Договор;
							НоваяСтрока.СуммаРасчетов = Сумма;
							НоваяСтрока.Курс = 1;
							НоваяСтрока.Кратность = 1;
							НоваяСтрока.СуммаПлатежа = Сумма;
							
							НоваяСтрока.СтавкаНДС = СтавкаНДС;
							
							ЧислоСтавкаНДС = 0;
							Выполнить("ЧислоСтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);");
							НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаПлатежа - (НоваяСтрока.СуммаПлатежа) / ((ЧислоСтавкаНДС + 100) / 100);
							
						Иначе
							
							НоваяСтрока.СуммаВзаиморасчетов = Сумма;
							
							НоваяСтрока.ДоговорКонтрагента = Договор;
							НоваяСтрока.КурсВзаиморасчетов = 1;
							НоваяСтрока.КратностьВзаиморасчетов = 1;
							
							НоваяСтрока.СуммаПлатежа = Сумма;
							
							НоваяСтрока.СтавкаНДС = СтавкаНДС;
							Выполнить("УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(НоваяСтрока);");
						КонецЕсли;
						
						Если СпецификаПользователя <> "SD" Тогда
							ДокументРасчетов = 0;
							Если IDДокументаРасчетов = "0" Тогда
								//Долг без документа, ни к чему не привязан
								
							ИначеЕсли IDДокументаРасчетов = "1" Тогда
								
								Попытка  
									//Долг по расчетному документу
									Для Каждого тмпМета Из Метаданные.Документы Цикл
										Если тмпМета.Синоним = тмпСтрока.debtDocument Тогда
											ДокументРасчетов = Документы[тмпМета.Имя].НайтиПоНомеру(тмпСтрока.debtNumber, Дата(тмпСтрока.debtDate + " 00:00:00"));
											Прервать;
										КонецЕсли;
									КонецЦикла;
									
								Исключение
									//Долг без документа, ни к чему не привязан
								КонецПопытки;
								
							Иначе
								//Долг по реализации, введенной на устройстве
								
								Запрос = Новый Запрос;
								Запрос.Текст =
								"ВЫБРАТЬ
								|	БПАГДокументыАгентовСрезПоследних.Документ КАК Ссылка
								|ИЗ
								|	РегистрСведений.БПАГДокументыАгентов.СрезПоследних(, ИД = &ИД) КАК БПАГДокументыАгентовСрезПоследних";
								
								Запрос.УстановитьПараметр("ИД", IDДокументаРасчетов);
								Выборка = Запрос.Выполнить().Выбрать();
								Если Выборка.Следующий() Тогда
									ДокументРасчетов = Выборка.Ссылка;
								КонецЕсли;
							КонецЕсли;
							
							Если ВидПрикладногоРешения = "УТ11" Тогда
								НоваяСтрока.ОснованиеПлатежа = ДокументРасчетов;
								
								РасчетыВестиПоДоговору = Ложь;
								Попытка
									РасчетыВестиПоДоговору = ДокументРасчетов.Договор.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
								Исключение
								КонецПопытки;
								
								Попытка
									Если РасчетыВестиПоДоговору Тогда
										НоваяСтрока.Заказ = ДокументРасчетов.Договор;
									Иначе
										НоваяСтрока.Заказ = ДокументРасчетов;
									КонецЕсли;
								Исключение
								КонецПопытки;
								
							ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
								НоваяСтрока.Документ = ДокументРасчетов;
								
							Иначе
								Если Договор.ВестиПоДокументамРасчетовСКонтрагентом Тогда
									НоваяСтрока.ДокументРасчетовСКонтрагентом = ДокументРасчетов;
								КонецЕсли;
							КонецЕсли;
							
							//В качестве документа-основания установим последний документ (если он был)
							Док.ДокументОснование = ДокументРасчетов;
							
							Если (ВидПрикладногоРешения = "УТ11") ИЛИ (ВидПрикладногоРешения = "УНФ") Тогда
								//NIY Вставить пересчет и подстановку значний по умолчанию, если нужно
							Иначе
								Попытка
									Выполнить("УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(НоваяСтрока, Док.ВидОперации);");
								Исключение
								КонецПопытки;
								
								//Проверка на вид прикладного решения
								Попытка
									БухгалтерскийУчетРасчетовСКонтрагентами = Ложь;
								Исключение
								КонецПопытки;
								
								Попытка 
									СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Док.Организация, Док.Контрагент, НоваяСтрока.ДоговорКонтрагента);
									Если НоваяСтрока.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
										НоваяСтрока.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовСКомитентом;
									Иначе
										НоваяСтрока.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
									КонецЕсли;
									НоваяСтрока.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансовПокупателя;
								Исключение
								КонецПопытки;
								
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					Если ОплатаОтПокупателяПлатежнойКартой Тогда
						Попытка
							//Настройки по экварингу
							ДоговорЭквайринга = БПАГ.БПАГПолучитьНастройку("1СДоговорЭквайринга");
							ВидОплатыПоПлатежнымКартам = БПАГ.БПАГПолучитьНастройку("1СВидОплаты");
							Док.ВидОплаты = ВидОплатыПоПлатежнымКартам;
							Док.Эквайрер = ДоговорЭквайринга.Эквайрер; 
							Док.ДоговорЭквайринга = ДоговорЭквайринга;
							Док.ДоговорВзаиморасчетовЭквайрера = ДоговорЭквайринга.ДоговорВзаиморасчетов;
							ПроцентТорговойУступки = 0;
							Выполнить("ПроцентТорговойУступки = УправлениеРозничнойТорговлей.ПолучитьПроцентТорговойУступки(ДоговорЭквайринга, ВидОплатыПоПлатежнымКартам);");
							Док.ПроцентТорговойУступки = ПроцентТорговойУступки;
							Док.СуммаТорговойУступки = Док.СуммаДокумента * ПроцентТорговойУступки / 100;
						Исключение
						КонецПопытки;
					КонецЕсли;
					
					
					Если (ВидПрикладногоРешения = "УТ11") ИЛИ (ВидПрикладногоРешения = "УНФ") ИЛИ (СпецификаПользователя = "SD") Тогда
					Иначе
						
						// Если есть категории "PostUU", "PostBU", "DontPostUU", "DontPostBU", то соответствующим образом проставим отражения в учетах
						УстановитьСпособыОтраженияВУчетах(тмпДокумент, Док);
						
						//Проверка на вид прикладного решения
						Попытка
							НалоговыйУчетУСН = Ложь;
						Исключение
						КонецПопытки;
						
						Попытка
							Если НалоговыйУчетУСН.ПрименениеУСН(Док.Организация, Док.Дата) Тогда
								НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(Док);
							КонецЕсли;
						Исключение
						КонецПопытки;
					КонецЕсли;
					
					СчетДокументов = СчетДокументов + 1;
					Если ЕстьОшибки Тогда
						//Док.ОбменДанными.Загрузка = Истина;
						Док.Записать(РежимЗаписиДокумента.Запись);	
						ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": ПКО " + Номер + " (Приходный кассовый ордер " + Док.Номер + ") - возникли ошибки при загрузке: ");
						ОтладочноеСообщение(СтрокаОшибок);
						
						СчетОшибочных = СчетОшибочных + 1;
						
					Иначе	
						//Док.ОбменДанными.Загрузка = Истина;
						Попытка
							Док.Записать(?(НастройкиДокумента.Проводить, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
						Исключение
							ЕстьОшибки = Истина;
							СчетОшибочных = СчетОшибочных + 1;
							ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": ПКО " + Номер + " (Приходный кассовый ордер " + Док.Номер + ") - возникли ошибки при загрузке: ");
							ОтладочноеСообщение(ОписаниеОшибки());
							Попытка
								Док.Записать(РежимЗаписиДокумента.Запись);
							Исключение
								ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": ПКО " + Номер + " (Приходный кассовый ордер " + Док.Номер + ") - возникли ошибки при загрузке: ");
								ОтладочноеСообщение(ОписаниеОшибки());
							КонецПопытки;
						КонецПопытки;
						
					КонецЕсли;
					
					//Свойства и категории
					УстановитьСвойстваИКатегории(тмпДокумент, Док);
					
					//Запишем данные в служебный регистр
					НоваяЗаписьДокументыАгентов = РегистрыСведений.БПАГДокументыАгентов.СоздатьМенеджерЗаписи();
					НоваяЗаписьДокументыАгентов.ВидДокумента = ?(ОплатаОтПокупателяПлатежнойКартой = Истина, Перечисления.БПАГВидыДокументов.ОплатаПлатежнойКартой, Перечисления.БПАГВидыДокументов.ПКО); //ПАКЛ пл.карты
					
					НоваяЗаписьДокументыАгентов.Период = ТекущаяДата();
					НоваяЗаписьДокументыАгентов.Агент = тмпАгент.Агент;
					НоваяЗаписьДокументыАгентов.Документ = Док.Ссылка;
					Если СпецификаПользователя <> "SD" Тогда
						НоваяЗаписьДокументыАгентов.ТорговаяТочка = ТорговаяТочка;
					КонецЕсли;
					НоваяЗаписьДокументыАгентов.ДатаСозданияНаУстройстве = Дата(ПреобразоватьДатуВФормат24(тмпДокумент.createdDate));
					НоваяЗаписьДокументыАгентов.ДатаИзмененияНаУстройстве = Дата(ПреобразоватьДатуВФормат24(тмпДокумент.modifiedDate));
					
					НоваяЗаписьДокументыАгентов.ИД = тмпДокумент.uniqueID;
					НоваяЗаписьДокументыАгентов.НомерДокументаНаУстройстве = Номер;
					НоваяЗаписьДокументыАгентов.ШиротаСоздания = Число(тмпДокумент.createdLatitude);
					НоваяЗаписьДокументыАгентов.ДолготаСоздания = Число(тмпДокумент.createdLongitude);
					НоваяЗаписьДокументыАгентов.ШиротаИзменения = Число(тмпДокумент.modifiedLatitude);
					НоваяЗаписьДокументыАгентов.ДолготаИзменения = Число(тмпДокумент.modifiedLongitude);
					НоваяЗаписьДокументыАгентов.МоментСозданияПоGPS = ?(тмпДокумент.createdLocationDate = "", 0, Дата(ПреобразоватьДатуВФормат24(тмпДокумент.createdLocationDate)));
					НоваяЗаписьДокументыАгентов.МоментИзмененияПоGPS = ?(тмпДокумент.modifiedLocationDate = "", 0, Дата(ПреобразоватьДатуВФормат24(тмпДокумент.modifiedLocationDate)));
					
					//Последняя проверка на то, что документ не пуст
					Если СокрЛП(НоваяЗаписьДокументыАгентов.Документ) = "" Тогда
						ОтладочноеСообщение("(!!!) Критическая ошибка базы данных. Обнаружена пустая ссылка на документ.");
						#Если Клиент Тогда
							Предупреждение("Критическая ошибка базы данных. Обнаружена пустая ссылка на документ. Обратитесь к системному администратору. Подробности зафиксированы в журнале (каталог logs папки обмена).", 10);
						#КонецЕсли
					Иначе	
						НоваяЗаписьДокументыАгентов.Записать();
					КонецЕсли;
					
				КонецЕсли;				
			КонецЦикла;
		КонецЕсли;
		
		ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Загружено ПКО: " + СчетДокументов + "." +?(СчетОшибочных > 0, " Из них с ошибками: " + СчетОшибочных, " Без ошибок."));	
	КонецЦикла;
	
КонецПроцедуры

#Область ЗагрузитьАнкеты

Процедура ЗагрузитьАнкеты(Агенты)
	
	НастройкиДокумента = ПолучитьНастройкиДокумента(Перечисления.БПАГВидыДокументов.Анкета, ТекущаяДата());
	Если НастройкиДокумента = Неопределено Тогда
		ОтладочноеСообщение("Не заданы настройки для документа ""Анкета""! Загрузка остановлена. Задайте настройки и повторите загрузку.");
		Возврат;
	КонецЕсли;
	
	Для Каждого тмпАгент Из Агенты Цикл
		
		ТЗ = ПолучитьТЗИзPlist(тмпАгент.Агент, "questionnaires", "Не найдены анкеты для ");
		Если ТЗ = Неопределено Тогда
			Продолжить;
		Иначе
			
			СчетДокументов = 0;
			СчетОшибочных = 0;
			Для Каждого тмпДокумент Из ТЗ Цикл
				
				//Глобальное изменение формата - игнорируем старые документы для совместимости
				ДатаПоследнегоИзменения = Дата(ПреобразоватьДатуВФормат24(тмпДокумент.date));
				Если ДатаПоследнегоИзменения < Дата(2013, 1, 15) Тогда
					Продолжить;
				КонецЕсли;
				//End Глобальное изменение формата - игнорируем старые документы для совместимости
				
				ЕстьОшибки = Ложь;
				СтрокаОшибок = "";
				
				Если ТЗ.Колонки.Найти("rowCount") <> Неопределено Тогда
					Если Число(тмпДокумент.rowCount) = 0 Тогда
						ЕстьОшибки = Истина;
						ОтладочноеСообщение("В анкете (номер на устройстве: " + тмпДокумент.number + ") не указано ни одного вопроса!");
						СчетОшибочных = СчетОшибочных + 1;
						Продолжить;
					КонецЕсли;
				Иначе
					ЕстьОшибки = Истина;
					ОтладочноеСообщение("Анкета (номер на устройстве: " + тмпДокумент.number + ") выгружена без табличной части. Документ проигнорирован!");
					СчетОшибочных = СчетОшибочных + 1;
					Продолжить;
				КонецЕсли;
				
				запрос = Новый Запрос;
				
				запрос.Текст =
				"ВЫБРАТЬ
				|	БПАГДокументыАгентовСрезПоследних.Документ КАК Ссылка
				|ИЗ
				|	РегистрСведений.БПАГДокументыАгентов.СрезПоследних(, ИД = &ИД) КАК БПАГДокументыАгентовСрезПоследних
				|ГДЕ
				|	БПАГДокументыАгентовСрезПоследних.ВидДокумента = &ВидДокумента";
				
				запрос.УстановитьПараметр("ИД", тмпДокумент.uniqueID);
				запрос.УстановитьПараметр("ВидДокумента", Перечисления.БПАГВидыДокументов.Анкета);
				
				требуетсяСоздатьИлиИзменитьДокумент = Истина;
				
				выборка = запрос.Выполнить().Выбрать();
				Если выборка.Следующий() Тогда
					
					Попытка
						Если выборка.Ссылка.Пустая() Тогда
							Продолжить;
						ИначеЕсли выборка.Ссылка.Проведен Тогда
							Если настройкиДокумента.Перепроводить Тогда
								Док = выборка.Ссылка.ПолучитьОбъект();	
							Иначе
								требуетсяСоздатьИлиИзменитьДокумент = Ложь;	
								ЕстьОшибки = Истина;
								ОтладочноеСообщение("Документ " + Выборка.Ссылка + " (номер на устройстве: " + тмпДокумент.number + ") уже проведен! Перепроведение отключено в настройках.");
								СчетОшибочных = СчетОшибочных + 1;
							КонецЕсли;
							
						ИначеЕсли выборка.Ссылка.ПометкаУдаления Тогда
							требуетсяСоздатьИлиИзменитьДокумент = Ложь;	
							ЕстьОшибки = Истина;
							ОтладочноеСообщение("Документ " + Выборка.Ссылка + " (номер на устройстве: " + тмпДокумент.number + ") был помечен на удаление в центральной базе! Документ не загружен.");
							СчетОшибочных = СчетОшибочных + 1;
						Иначе
							//Документ уже загружен, но не проведен
							Если НастройкиДокумента.ПерезаписыватьНепроведенные Тогда
								Док = Выборка.Ссылка.ПолучитьОбъект();
								ТребуетсяСоздатьИлиИзменитьДокумент = Истина;	
							Иначе
								ТребуетсяСоздатьИлиИзменитьДокумент = Ложь;	
								ЕстьОшибки = Истина;
								ОтладочноеСообщение("Документ " + Выборка.Ссылка + " (номер на устройстве: " + тмпДокумент.number + ") уже был загружен! Перезапись непроведенных документов отключена в настройках.");
								СчетОшибочных = СчетОшибочных + 1;
							КонецЕсли;	
						КонецЕсли;
					Исключение
						Продолжить;
					КонецПопытки;
					
				Иначе
					Док = Документы.БПАГАнкета.СоздатьДокумент();	
				КонецЕсли;
				
				Если требуетсяСоздатьИлиИзменитьДокумент Тогда
					//Контрагент
					тмпКод = тмпДокумент.clientID;
					Если СпецификаПользователя = "SD" Тогда
						БПАГКонтрагент = Справочники.Контрагенты.НайтиПоКоду(тмпКод);	
					Иначе
						БПАГКонтрагент = Справочники.БПАГКонтрагенты.НайтиПоКоду(тмпКод);
					КонецЕсли;
					
					Если БПАГКонтрагент.Пустая() Тогда
						ЕстьОшибки = Истина;
						СтрокаОшибок = СтрокаОшибок + "Контрагент с кодом " + тмпКод + " не найден! " + Символы.ПС;
					КонецЕсли;
					
					//Торговая точка
					Если СпецификаПользователя = "SD" Тогда
					Иначе	
						тмпКод = тмпДокумент.posID;
						ТорговаяТочка = Справочники.БПАГТорговыеТочки.НайтиПоКоду(тмпКод);
						Если ТорговаяТочка.Пустая() Тогда
							ЕстьОшибки = Истина;
							СтрокаОшибок = СтрокаОшибок + "Торговая точка с кодом " + тмпКод + " не найдена! " + Символы.ПС;
						КонецЕсли;
					КонецЕсли;
					
					//Вид анкеты
					тмпКод = тмпДокумент.questionnaireTypeID;
					ВидАнкеты = Справочники.БПАГВидыАнкет.НайтиПоКоду(тмпКод);
					Если ВидАнкеты.Пустая() Тогда
						ЕстьОшибки = Истина;
						СтрокаОшибок = СтрокаОшибок + "Вид анкеты с кодом " + тмпКод + " не найден! " + Символы.ПС;
					КонецЕсли;
					
					Номер = тмпДокумент.number;
					
					//Дата последнего изменения
					ДатаПоследнегоИзменения = Дата(ПреобразоватьДатуВФормат24(тмпДокумент.date));
					
					//Заполнение (перезаполнение) документа
					Если СпецификаПользователя = "FT" Тогда
						Док.Дата = ТекущаяДата();
					Иначе
						Док.Дата = ДатаПоследнегоИзменения;
					КонецЕсли;
					
					Док.ВидАнкеты = ВидАнкеты;
					
					Если СпецификаПользователя = "SD" Тогда
						
						Док.Подразделение 	= тмпАгент.Агент.Подразделение;
						
						Если ТипЗнч(Док) = Тип("ДокументОбъект.ЗаданиеТорговомуПредставителю") Тогда
							Док.ТорговаяТочка = БПАГКонтрагент;
							Док.ТорговыйАгент = тмпАгент.Агент;
							Док.Статус = Перечисления.СтатусыЗаданийТорговымПредставителям.Отработано;
						Иначе
							Док.Контрагент 	= БПАГКонтрагент;
							Док.Агент 		= тмпАгент.Агент;
							Док.Менеджер 	= тмпАгент.Агент.Менеджер;
						КонецЕсли;
						
					Иначе
						Док.ТорговаяТочка = ТорговаяТочка;
						Док.Контрагент = БПАГКонтрагент;
						Док.Агент = тмпАгент.Агент;
					КонецЕсли;
					
					Док.ИД = тмпДокумент.uniqueID;
					
					Если ТипЗнч(Док) = Тип("ДокументОбъект.ЗаданиеТорговомуПредставителю") Тогда
						табличнаяЧастьОтветы = Док.Задачи;
					Иначе
						табличнаяЧастьОтветы = Док.Ответы;
					КонецЕсли;
					
					//Док.Ответы.Очистить();					
					табличнаяЧастьОтветы.Очистить();
					
					//тмпДокумент.rows.Сортировать("sort");
					Для Каждого тмпСтрока Из тмпДокумент.rows Цикл
						
						НоваяСтрока = табличнаяЧастьОтветы.Добавить();
						
						//Вопрос
						тмпКодВопроса = тмпСтрока.questionID;
						Вопрос = Справочники.БПАГВопросыАнкет.НайтиПоКоду(тмпКодВопроса);
						Если Вопрос.Пустая() Тогда
							ЕстьОшибки = Истина;
							СтрокаОшибок = СтрокаОшибок + "Вопрос с кодом " + тмпКодВопроса + " не найден! " + Символы.ПС;
						КонецЕсли;
						
						// Определение типов						
						Если ТипЗнч(Док) = Тип("ДокументОбъект.ЗаданиеТорговомуПредставителю") Тогда 
							новаяСтрока.ОписаниеЗадачи = Вопрос;
							новаяСтрока.ОписаниеРезультата = тмпСтрока.value;
						Иначе
							НоваяСтрока.Вопрос = Вопрос;
							
							Если тмпСтрока.questionType = "number" Тогда
								НоваяСтрока.Ответ = тмпСтрока.value;
							ИначеЕсли тмпСтрока.questionType = "data" Тогда	
								НоваяСтрока.Ответ = Дата(тмпСтрока.value);
							ИначеЕсли тмпСтрока.questionType = "boolean" Тогда	
								Если тмпСтрока.value = "1" Тогда 
									НоваяСтрока.Ответ = Истина;
								Иначе
									НоваяСтрока.Ответ = Ложь;
								КонецЕсли;
							Иначе
								НоваяСтрока.Ответ = тмпСтрока.value;
							КонецЕсли;
							
						КонецЕсли;
						
						
					КонецЦикла;
					
					СчетДокументов = СчетДокументов + 1;
					Если ЕстьОшибки Тогда
						//Док.ОбменДанными.Загрузка = Истина;
						Док.Записать(РежимЗаписиДокумента.Запись);	
						
						ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Анкета " + Номер + " (номер в учетной системе " + Док.Номер + ") - возникли ошибки при загрузке: ");
						ОтладочноеСообщение(СтрокаОшибок);
						
						СчетОшибочных = СчетОшибочных + 1;
						
					Иначе
						//Док.ОбменДанными.Загрузка = Истина;
						Попытка
							Док.Записать(?(НастройкиДокумента.Проводить, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
						Исключение
							ЕстьОшибки = Истина;
							СчетОшибочных = СчетОшибочных + 1;
							ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Анкета " + Номер + " (номер в учетной системе " + Док.Номер + ") - возникли ошибки при загрузке: ");
							ОтладочноеСообщение(ОписаниеОшибки());
							Попытка
								Док.Записать(РежимЗаписиДокумента.Запись);
							Исключение
								ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Анкета " + Номер + " (номер в учетной системе " + Док.Номер + ") - возникли ошибки при загрузке: ");
								ОтладочноеСообщение(ОписаниеОшибки());
							КонецПопытки;
						КонецПопытки;
					КонецЕсли;
					
					Если ТипЗнч(Док) = Тип("ДокументОбъект.ЗаданиеТорговомуПредставителю") Тогда 
					Иначе
						//Свойства и категории
						УстановитьСвойстваИКатегории(тмпДокумент, Док);
						
						//Запишем данные в служебный регистр
						НоваяЗаписьДокументыАгентов = РегистрыСведений.БПАГДокументыАгентов.СоздатьМенеджерЗаписи();
						НоваяЗаписьДокументыАгентов.ВидДокумента = Перечисления.БПАГВидыДокументов.Анкета;
						
						НоваяЗаписьДокументыАгентов.Период = ТекущаяДата();
						НоваяЗаписьДокументыАгентов.Агент = тмпАгент.Агент;
						НоваяЗаписьДокументыАгентов.Документ = Док.Ссылка;
						
						Если СпецификаПользователя <> "SD" Тогда
							НоваяЗаписьДокументыАгентов.ТорговаяТочка = ТорговаяТочка;
						КонецЕсли;
						НоваяЗаписьДокументыАгентов.ДатаСозданияНаУстройстве = Дата(ПреобразоватьДатуВФормат24(тмпДокумент.createdDate));
						НоваяЗаписьДокументыАгентов.ДатаИзмененияНаУстройстве = Дата(ПреобразоватьДатуВФормат24(тмпДокумент.modifiedDate));
						
						НоваяЗаписьДокументыАгентов.ИД = тмпДокумент.uniqueID;
						НоваяЗаписьДокументыАгентов.НомерДокументаНаУстройстве = Номер;
						НоваяЗаписьДокументыАгентов.ШиротаСоздания = Число(тмпДокумент.createdLatitude);
						НоваяЗаписьДокументыАгентов.ДолготаСоздания = Число(тмпДокумент.createdLongitude);
						НоваяЗаписьДокументыАгентов.ШиротаИзменения = Число(тмпДокумент.modifiedLatitude);
						НоваяЗаписьДокументыАгентов.ДолготаИзменения = Число(тмпДокумент.modifiedLongitude);
						НоваяЗаписьДокументыАгентов.МоментСозданияПоGPS = ?(тмпДокумент.createdLocationDate = "", 0, Дата(ПреобразоватьДатуВФормат24(тмпДокумент.createdLocationDate)));
						НоваяЗаписьДокументыАгентов.МоментИзмененияПоGPS = ?(тмпДокумент.modifiedLocationDate = "", 0, Дата(ПреобразоватьДатуВФормат24(тмпДокумент.modifiedLocationDate)));
						
						//Последняя проверка на то, что документ не пуст
						Если СокрЛП(НоваяЗаписьДокументыАгентов.Документ) = "" Тогда
							ОтладочноеСообщение("(!!!) Критическая ошибка базы данных. Обнаружена пустая ссылка на документ.");
							#Если Клиент Тогда
								Предупреждение("Критическая ошибка базы данных. Обнаружена пустая ссылка на документ. Обратитесь к системному администратору. Подробности зафиксированы в журнале (каталог logs папки обмена).", 10);
							#КонецЕсли
						Иначе	
							НоваяЗаписьДокументыАгентов.Записать();
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;				
			КонецЦикла;
		КонецЕсли;
		
		ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Загружено Анкет: " + СчетДокументов + "." +?(СчетОшибочных > 0, " Из них с ошибками: " + СчетОшибочных, " Без ошибок."));	
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область ЗагрузитьМерчандайзинг

Процедура ЗагрузитьМерчандайзинг(Агенты)
	
	НастройкиДокумента = ПолучитьНастройкиДокумента(Перечисления.БПАГВидыДокументов.Мерчандайзинг, ТекущаяДата());
	
	Если НастройкиДокумента = Неопределено Тогда
		ОтладочноеСообщение("Не заданы настройки для документа ""Мерчандайзинг""! Загрузка остановлена. Задайте настройки и повторите загрузку.");
		Возврат;
	КонецЕсли;
	
	Для Каждого тмпАгент Из Агенты Цикл
		
		ТЗ = ПолучитьТЗИзPlist(тмпАгент.Агент, "merchandising", "Не найдены документы мерчандайзинга для ");
		Если ТЗ = Неопределено Тогда
			Продолжить;
		Иначе
			
			СчетДокументов = 0;
			СчетОшибочных = 0;
			Для Каждого тмпДокумент Из ТЗ Цикл
				
				//Глобальное изменение формата - игнорируем старые документы для совместимости
				ДатаПоследнегоИзменения = Дата(ПреобразоватьДатуВФормат24(тмпДокумент.date));
				Если ДатаПоследнегоИзменения < Дата(2013, 1, 15) Тогда
					Продолжить;
				КонецЕсли;
				//End Глобальное изменение формата - игнорируем старые документы для совместимости
				
				ЕстьОшибки = Ложь;
				СтрокаОшибок = "";
				
				Если ТЗ.Колонки.Найти("rowCount") <> Неопределено Тогда
					Если Число(тмпДокумент.rowCount) = 0 Тогда
						ЕстьОшибки = Истина;
						ОтладочноеСообщение("В документе мерчандайзинг (номер на устройстве: " + тмпДокумент.number + ") не указано ни одного товара!");
						СчетОшибочных = СчетОшибочных + 1;
						Продолжить;
					КонецЕсли;
				Иначе
					ЕстьОшибки = Истина;
					ОтладочноеСообщение("Документ мерчандайзинг (номер на устройстве: " + тмпДокумент.number + ") выгружена без табличной части. Документ проигнорирован!");
					СчетОшибочных = СчетОшибочных + 1;
					Продолжить;
				КонецЕсли;
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	БПАГДокументыАгентовСрезПоследних.Документ КАК Ссылка
				|ИЗ
				|	РегистрСведений.БПАГДокументыАгентов.СрезПоследних(, ИД = &ИД) КАК БПАГДокументыАгентовСрезПоследних
				|ГДЕ
				|	БПАГДокументыАгентовСрезПоследних.ВидДокумента = &ВидДокумента";
				
				Запрос.УстановитьПараметр("ИД", тмпДокумент.uniqueID);
				Запрос.УстановитьПараметр("ВидДокумента", Перечисления.БПАГВидыДокументов.Мерчандайзинг);
				
				ТребуетсяСоздатьИлиИзменитьДокумент = Истина;
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Попытка
						Если Выборка.Ссылка.Пустая() Тогда
							Продолжить;
						ИначеЕсли Выборка.Ссылка.Проведен Тогда
							Если НастройкиДокумента.Перепроводить Тогда
								Док = Выборка.Ссылка.ПолучитьОбъект();	
							Иначе
								ТребуетсяСоздатьИлиИзменитьДокумент = Ложь;	
								ЕстьОшибки = Истина;
								ОтладочноеСообщение("Документ " + Выборка.Ссылка + " (номер на устройстве: " + тмпДокумент.number + ") уже проведен! Перепроведение отключено в настройках.");
								СчетОшибочных = СчетОшибочных + 1;
							КонецЕсли;
						ИначеЕсли Выборка.Ссылка.ПометкаУдаления Тогда
							ТребуетсяСоздатьИлиИзменитьДокумент = Ложь;	
							ЕстьОшибки = Истина;
							ОтладочноеСообщение("Документ " + Выборка.Ссылка + " (номер на устройстве: " + тмпДокумент.number + ") был помечен на удаление в центральной базе! Документ не загружен.");
							СчетОшибочных = СчетОшибочных + 1;
						Иначе
							//Документ уже загружен, но не проведен
							Если НастройкиДокумента.ПерезаписыватьНепроведенные Тогда
								Док = Выборка.Ссылка.ПолучитьОбъект();
								ТребуетсяСоздатьИлиИзменитьДокумент = Истина;	
							Иначе
								ТребуетсяСоздатьИлиИзменитьДокумент = Ложь;	
								ЕстьОшибки = Истина;
								ОтладочноеСообщение("Документ " + Выборка.Ссылка + " (номер на устройстве: " + тмпДокумент.number + ") уже был загружен! Перезапись непроведенных документов отключена в настройках.");
								СчетОшибочных = СчетОшибочных + 1;
							КонецЕсли;	
						КонецЕсли;
					Исключение
						Продолжить;
					КонецПопытки;
				Иначе
					Док = Документы.БПАГМерчандайзинг.СоздатьДокумент();	
				КонецЕсли;
				
				Если ТребуетсяСоздатьИлиИзменитьДокумент Тогда
					//Контрагент
					тмпКод = тмпДокумент.clientID;
					Если СпецификаПользователя = "SD" Тогда
						БПАГКонтрагент = Справочники.Контрагенты.НайтиПоКоду(тмпКод);	
					Иначе
						БПАГКонтрагент = Справочники.БПАГКонтрагенты.НайтиПоКоду(тмпКод);
					КонецЕсли;
					Если БПАГКонтрагент.Пустая() Тогда
						ЕстьОшибки = Истина;
						СтрокаОшибок = СтрокаОшибок + "Контрагент с кодом " + тмпКод + " не найден! " + Символы.ПС;
					КонецЕсли;
					
					//Торговая точка
					Если СпецификаПользователя = "SD" Тогда
					Иначе	
						тмпКод = тмпДокумент.posID;
						ТорговаяТочка = Справочники.БПАГТорговыеТочки.НайтиПоКоду(тмпКод);
						Если ТорговаяТочка.Пустая() Тогда
							ЕстьОшибки = Истина;
							СтрокаОшибок = СтрокаОшибок + "Торговая точка с кодом " + тмпКод + " не найдена! " + Символы.ПС;
						КонецЕсли;
					КонецЕсли;
					
					Номер = тмпДокумент.number;
					
					//Дата последнего изменения
					ДатаПоследнегоИзменения = Дата(ПреобразоватьДатуВФормат24(тмпДокумент.date));
					
					//Заполнение (перезаполнение) документа
					Если СпецификаПользователя = "FT" Тогда
						Док.Дата = ТекущаяДата();
					Иначе
						Док.Дата = ДатаПоследнегоИзменения;
					КонецЕсли;
					
					Док.Контрагент = БПАГКонтрагент;
					Док.Агент = тмпАгент.Агент;
					Если СпецификаПользователя = "SD" Тогда
						Док.Менеджер 		= тмпАгент.Агент.Менеджер;
						Док.Подразделение 	= тмпАгент.Агент.Менеджер.Подразделение;
					Иначе
						Док.ТорговаяТочка = ТорговаяТочка;
					КонецЕсли;
					
					Док.ИД = тмпДокумент.uniqueID;
					
					Док.Товары.Очистить();
					Док.Картинки.Очистить();					
					//тмпДокумент.rows.Сортировать("sort");
					ТЗСвойстваСтрокДокументов = Новый ТаблицаЗначений();
					ТЗСвойстваСтрокДокументов.Колонки.Добавить("Товар");
					ТЗСвойстваСтрокДокументов.Колонки.Добавить("Категория");
					ТЗСвойстваСтрокДокументов.Колонки.Добавить("Значение");
					
					Для Каждого тмпСтрока Из тмпДокумент.rows Цикл
						
						//Товар
						тмпКод = тмпСтрока.goodID;
						тмпНазваниеХарактеристики = "";
						
						ПозицияРазделителяХарактеристики = Найти(тмпСтрока.goodID, ":|");
						Если ПозицияРазделителяХарактеристики > 0 Тогда
							тмпКод = Лев(тмпСтрока.goodID, ПозицияРазделителяХарактеристики - 1);
							тмпНазваниеХарактеристики = Сред(тмпСтрока.goodID, ПозицияРазделителяХарактеристики + 2);
						КонецЕсли;
						
						БПАГНоменклатура = Справочники.БПАГНоменклатура.НайтиПоКоду(тмпКод);
						Если БПАГНоменклатура.Пустая() Тогда
							ЕстьОшибки = Истина;
							СтрокаОшибок = СтрокаОшибок + "Товар с кодом " + тмпКод + " не найден! " + Символы.ПС;
							Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
						Иначе
							Номенклатура = БПАГНоменклатура.Номенклатура;
						КонецЕсли;
						
						//Цена
						Цена = Число(тмпСтрока.price);
						
						//Количество
						Количество = Число(тмпСтрока.quantity);
						
						НоваяСтрока = Док.Товары.Добавить();
						НоваяСтрока.Номенклатура = Номенклатура;
						Если ТипЗнч(Количество) = Тип("Число") Тогда
							НоваяСтрока.Количество = Количество;
						КонецЕсли;
						
						//Цена
						НоваяСтрока.Цена = Цена;
						
						Попытка
							НоваяСтрока.КоличествоФейсингов = Число(тмпСтрока.numberOfFacings);
							Если Число(тмпСтрока.planogramCompliance) = 1 Тогда
								НоваяСтрока.СоответствиеПланограмме = Истина;
							Иначе	
								НоваяСтрока.СоответствиеПланограмме = Ложь;
							КонецЕсли;
						Исключение
						КонецПопытки;
						
						//Картинки номенклатуры
						ТЗСвойствТоваров = тмпСтрока.properties;
						Для Каждого тмпСтрокаСвойств Из ТЗСвойствТоваров Цикл
							Попытка
								//Свойства строк
								ТекущееСвойство =  тмпСтрокаСвойств.uniqueID;
								НаборЗаписей = РегистрыСведений.БПАГКатегорииСтрокДокументов.СоздатьНаборЗаписей();
								НаборЗаписей.Отбор.ВидДокумента.Значение = Перечисления.БПАГВидыДокументов.Мерчандайзинг;
								НаборЗаписей.Прочитать();
								Для Каждого СтрокаНабора Из НаборЗаписей Цикл
									Если СокрЛП(СтрокаНабора.Код) = тмпСтрокаСвойств.uniqueID Тогда
										//записать Таблицу значений для последущей записи в регистр сведений
										НоваяСтрокаТЗ = ТЗСвойстваСтрокДокументов.Добавить();
										НоваяСтрокаТЗ.Товар = Номенклатура;
										НоваяСтрокаТЗ.Категория = СтрокаНабора.Категория;
										НоваяСтрокаТЗ.Значение = тмпСтрокаСвойств.value;
										//НоваяСтрока.Категория1 = СокрЛП(тмпСтрокаСвойств.value);
									КонецЕсли;	
								КонецЦикла;							
								
								//Картинки строк
								ТЗКартинкиМерчандайзинга = тмпСтрокаСвойств.pictures;
								Если ТЗКартинкиМерчандайзинга <> Неопределено Тогда
									Если ТЗКартинкиМерчандайзинга.Количество() > 0 Тогда
										ТЗКартинкиМерчандайзинга.Сортировать("sort Возр");
										Для Каждого тмпКартинка Из ТЗКартинкиМерчандайзинга Цикл
											//Запись ТЧ Картинки
											НоваяСтрока = Док.Картинки.Добавить();
											НоваяСтрока.Имя = тмпКартинка.fileName;
											НоваяСтрока.Номенклатура = Номенклатура;
											НоваяСтрока.Порядок = тмпКартинка.sort;
										КонецЦикла;
									КонецЕсли;
								КонецЕсли;
								
								//Загрузим файлы картинок с FTP
								Если ТЗКартинкиМерчандайзинга.Количество() > 0 Тогда
									Если НастройкаИзКэша("1СИспользоватьВнешнийFTP") Тогда
										Путь = КаталогОбмена + СокрЛП(тмпАгент.Код) + ПолучитьРазделительПути() + "Images" + ПолучитьРазделительПути();
										
										ОтладочноеСообщение("Получение фотографий c FTP началось " + ТекущаяДата());
										Попытка
											Таймаут = Макс(Число(НастройкаИзКэша("1СТаймаутFTP")), 10);
											ФТП = Новый FTPСоединение(АдресВнешнегоFTP, , ЛогинВнешнегоFTP, ПарольВнешнегоFTP, ПроксиСервер, , Таймаут);
										Исключение
											ОтладочноеСообщение("Ошибка работы с FTP: Информация для " + тмпАгент.Агент + " не получена:" + ОписаниеОшибки());
											Продолжить;	
										КонецПопытки;
										
										Для Каждого тмпКартинка Из ТЗКартинкиМерчандайзинга Цикл
											Попытка
												ФТП.Получить(СокрЛП(тмпАгент.Код) + ПолучитьРазделительПути() + "Images" + ПолучитьРазделительПути() + тмпКартинка.fileName,  Путь + тмпКартинка.fileName);
												ОтладочноеСообщение("Получено фото с FTP: " + тмпКартинка.fileName);
											Исключение
												ОтладочноеСообщение("Ошибка работы с FTP: Информация для " + тмпАгент.Агент + " не получена:" + ОписаниеОшибки());
												Продолжить;	
											КонецПопытки;
										КонецЦикла;
										ОтладочноеСообщение("Получение файлов c FTP завершено " + ТекущаяДата());
									КонецЕсли;
								КонецЕсли;
								
							Исключение
							КонецПопытки;
						КонецЦикла;
						
					КонецЦикла;
					
					СчетДокументов = СчетДокументов + 1;
					Если ЕстьОшибки Тогда
						Док.Записать(РежимЗаписиДокумента.Запись);	
						ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Мерчандайзинг " + Номер + " (номер в учетной системе " + Док.Номер + ") - возникли ошибки при загрузке: ");
						ОтладочноеСообщение(СтрокаОшибок);
						
						СчетОшибочных = СчетОшибочных + 1;
						
					Иначе	
						Попытка
							Док.Записать(?(НастройкиДокумента.Проводить, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
							//Док.Записать(РежимЗаписиДокумента.Запись);
						Исключение
							ЕстьОшибки = Истина;
							СчетОшибочных = СчетОшибочных + 1;
							ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Мерчандайзинг " + Номер + " (номер в учетной системе " + Док.Номер + ") - возникли ошибки при загрузке: ");
							ОтладочноеСообщение(ОписаниеОшибки());
							Попытка
								Док.Записать(РежимЗаписиДокумента.Запись);
							Исключение
								ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Мерчандайзинг " + Номер + " (номер в учетной системе " + Док.Номер + ") - возникли ошибки при загрузке: ");
								ОтладочноеСообщение(ОписаниеОшибки());
							КонецПопытки;
						КонецПопытки;
					КонецЕсли;
					
					//Свойства и категории
					УстановитьСвойстваИКатегории(тмпДокумент, Док);
					
					Попытка 
						Если ТЗСвойстваСтрокДокументов.Количество() > 0 Тогда
								//Найдем и удалим запись
								НаборЗаписейДокумента = РегистрыСведений.БПАГЗначенияКатегорийСтрокДокументов.СоздатьНаборЗаписей();
								//НаборЗаписей.Отбор.Товар.Значение = тмпСтрокаСвойства.Товар;
								НаборЗаписейДокумента.Отбор.Документ.Установить(Док.Ссылка);
								//НаборЗаписей.Отбор.Документ.Значение = Док.Ссылка;
								//НаборЗаписей.Отбор.Категория.Значение = тмпСтрокаСвойства.Категория;
								НаборЗаписейДокумента.Прочитать();
								//НаборЗаписейДокумента.Удалить();
								НаборЗаписейДокумента.Очистить();
								НаборЗаписейДокумента.Записать();
							Для Каждого тмпСтрокаСвойства из ТЗСвойстваСтрокДокументов Цикл
								//Новая запись
								НоваяЗаписьКатегорииДокументов = РегистрыСведений.БПАГЗначенияКатегорийСтрокДокументов.СоздатьМенеджерЗаписи();
								НоваяЗаписьКатегорииДокументов.Период = ТекущаяДата();
								НоваяЗаписьКатегорииДокументов.Товар = тмпСтрокаСвойства.Товар;
								НоваяЗаписьКатегорииДокументов.Документ = Док.Ссылка;
								НоваяЗаписьКатегорииДокументов.Категория = тмпСтрокаСвойства.Категория;
								НоваяЗаписьКатегорииДокументов.Значение = тмпСтрокаСвойства.Значение;
								НоваяЗаписьКатегорииДокументов.Записать();
							КонецЦикла;
						КонецЕсли;
					Исключение
					КонецПопытки;	
					
					//Фото документа
					ТЗСвойстваДокумента = тмпДокумент.properties;
					Для Каждого тмпСтрокаСвойств Из ТЗСвойстваДокумента Цикл
						ТЗФотоДокумента = тмпСтрокаСвойств.pictures;
						Если ТЗФотоДокумента <> Неопределено Тогда
							Если ТЗФотоДокумента.Количество() > 0 Тогда
								ТЗФотоДокумента.Сортировать("sort Возр");
								НаборЗаписей = РегистрыСведений.БПАГФотоДокументов.СоздатьНаборЗаписей();
								НаборЗаписей.Отбор.Документ.Установить(Док.Ссылка);
								НаборЗаписей.Прочитать();
								НаборЗаписей.Очистить();
								Для Каждого тмпКартинка Из ТЗФотоДокумента Цикл
									НоваяЗапись = НаборЗаписей.Добавить();
									НоваяЗапись.Документ = Док.Ссылка;
									НоваяЗапись.Порядок = тмпКартинка.sort;
									НоваяЗапись.Фото = тмпКартинка.fileName;
									НаборЗаписей.Записать();
								КонецЦикла;
								//Загрузим файлы картинок с FTP
								Если ТЗФотоДокумента.Количество() > 0 Тогда
									Если НастройкаИзКэша("1СИспользоватьВнешнийFTP") Тогда
										Путь = КаталогОбмена + СокрЛП(тмпАгент.Код) + ПолучитьРазделительПути() + "Images" + ПолучитьРазделительПути();
										
										ОтладочноеСообщение("Получение фотографий c FTP началось " + ТекущаяДата());
										Попытка
											Таймаут = Макс(Число(НастройкаИзКэша("1СТаймаутFTP")), 10);
											ФТП = Новый FTPСоединение(АдресВнешнегоFTP, , ЛогинВнешнегоFTP, ПарольВнешнегоFTP, ПроксиСервер, , Таймаут);
										Исключение
											ОтладочноеСообщение("Ошибка работы с FTP: Информация для " + тмпАгент.Агент + " не получена:" + ОписаниеОшибки());
											Продолжить;	
										КонецПопытки;
										
										Для Каждого тмпКартинка Из ТЗФотоДокумента Цикл
											Попытка
												ФТП.Получить(СокрЛП(тмпАгент.Код) + ПолучитьРазделительПути() + "Images" + ПолучитьРазделительПути() + тмпКартинка.fileName,  Путь + тмпКартинка.fileName);
												ОтладочноеСообщение("Получено фото с FTP: " + тмпКартинка.fileName);
											Исключение
												ОтладочноеСообщение("Ошибка работы с FTP: Информация для " + тмпАгент.Агент + " не получена:" + ОписаниеОшибки());
												Продолжить;	
											КонецПопытки;
										КонецЦикла;
										ОтладочноеСообщение("Получение файлов c FTP завершено " + ТекущаяДата());
									КонецЕсли;
								КонецЕсли;
								//Перенести фото с FTP конец
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					
					//Запишем данные в служебный регистр
					НоваяЗаписьДокументыАгентов = РегистрыСведений.БПАГДокументыАгентов.СоздатьМенеджерЗаписи();
					НоваяЗаписьДокументыАгентов.ВидДокумента = Перечисления.БПАГВидыДокументов.Мерчандайзинг;
					
					НоваяЗаписьДокументыАгентов.Период = ТекущаяДата();
					НоваяЗаписьДокументыАгентов.Агент = тмпАгент.Агент;
					НоваяЗаписьДокументыАгентов.Документ = Док.Ссылка;
					Если СпецификаПользователя <> "SD" Тогда
						НоваяЗаписьДокументыАгентов.ТорговаяТочка = ТорговаяТочка;
					КонецЕсли;
					НоваяЗаписьДокументыАгентов.ДатаСозданияНаУстройстве = Дата(ПреобразоватьДатуВФормат24(тмпДокумент.createdDate));
					НоваяЗаписьДокументыАгентов.ДатаИзмененияНаУстройстве = Дата(ПреобразоватьДатуВФормат24(тмпДокумент.modifiedDate));
					
					НоваяЗаписьДокументыАгентов.ИД = тмпДокумент.uniqueID;
					НоваяЗаписьДокументыАгентов.НомерДокументаНаУстройстве = Номер;
					НоваяЗаписьДокументыАгентов.ШиротаСоздания = Число(тмпДокумент.createdLatitude);
					НоваяЗаписьДокументыАгентов.ДолготаСоздания = Число(тмпДокумент.createdLongitude);
					НоваяЗаписьДокументыАгентов.ШиротаИзменения = Число(тмпДокумент.modifiedLatitude);
					НоваяЗаписьДокументыАгентов.ДолготаИзменения = Число(тмпДокумент.modifiedLongitude);
					НоваяЗаписьДокументыАгентов.МоментСозданияПоGPS = ?(тмпДокумент.createdLocationDate = "", 0, Дата(ПреобразоватьДатуВФормат24(тмпДокумент.createdLocationDate)));
					НоваяЗаписьДокументыАгентов.МоментИзмененияПоGPS = ?(тмпДокумент.modifiedLocationDate = "", 0, Дата(ПреобразоватьДатуВФормат24(тмпДокумент.modifiedLocationDate)));
					
					//Последняя проверка на то, что документ не пуст
					Если СокрЛП(НоваяЗаписьДокументыАгентов.Документ) = "" Тогда
						ОтладочноеСообщение("(!!!) Критическая ошибка базы данных. Обнаружена пустая ссылка на документ.");
						#Если Клиент Тогда
							Предупреждение("Критическая ошибка базы данных. Обнаружена пустая ссылка на документ. Обратитесь к системному администратору. Подробности зафиксированы в журнале (каталог logs папки обмена).", 10);
						#КонецЕсли
					Иначе	
						НоваяЗаписьДокументыАгентов.Записать();
					КонецЕсли;
					
				КонецЕсли;				
			КонецЦикла;
		КонецЕсли;
		
		ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Загружено документов мерчандайзинга: " + СчетДокументов + "." +?(СчетОшибочных > 0, " Из них с ошибками: " + СчетОшибочных, " Без ошибок."));	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

Процедура ЗагрузитьЗаказыНаСклад(Агенты)
	
	ВидПрикладногоРешения = БПАГ.ПолучитьВидПрикладногоРешения();
	
	Если ВидПрикладногоРешения = "УТ10" Тогда
		ВидНоменклатурыТара = НастройкаИзКэша("1СВидНоменклатурыТара");
	КонецЕсли;
		
	НастройкиДокумента = ПолучитьНастройкиДокумента(Перечисления.БПАГВидыДокументов.ЗаказНаСклад, ТекущаяДата());
	Если НастройкиДокумента = Неопределено Тогда
		ОтладочноеСообщение("Не заданы настройки для документа ""Заказ на склад""! Загрузка остановлена. Задайте настройки и повторите загрузку.");
		Возврат;
	КонецЕсли;
	
	Для Каждого тмпАгент Из Агенты Цикл
		
		ТЗ = ПолучитьТЗИзPlist(тмпАгент.Агент, "depotOrders", "Не найдены заказы на склад для ");
		Если ТЗ = Неопределено Тогда
			Продолжить;
		Иначе
			
			СчетДокументов = 0;
			СчетОшибочных = 0;
			Для Каждого тмпДокумент Из ТЗ Цикл
				
				//Глобальное изменение формата - игнорируем старые документы для совместимости
				ДатаПоследнегоИзменения = Дата(тмпДокумент.date);
				Если ДатаПоследнегоИзменения < Дата(2013, 1, 15) Тогда
					Продолжить;
				КонецЕсли;
				
				ЕстьОшибки = Ложь;
				СтрокаОшибок = "";
				
				Если ТЗ.Колонки.Найти("rowCount") <> Неопределено Тогда
					Если Число(тмпДокумент.rowCount) = 0 Тогда
						ЕстьОшибки = Истина;
						ОтладочноеСообщение("Заказ на склад (номер на устройстве: " + тмпДокумент.number + ") пуст (не заполнена табличная часть). Документ проигнорирован!");
						СчетОшибочных = СчетОшибочных + 1;
						Продолжить;
					КонецЕсли;
				Иначе
					ЕстьОшибки = Истина;
					ОтладочноеСообщение("Заказ на склад (номер на устройстве: " + тмпДокумент.number + ") выгружен без табличной части. Документ проигнорирован!");
					СчетОшибочных = СчетОшибочных + 1;
					Продолжить;
				КонецЕсли;
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	БПАГДокументыАгентовСрезПоследних.Документ КАК Ссылка
				|ИЗ
				|	РегистрСведений.БПАГДокументыАгентов.СрезПоследних(, ИД = &ИД) КАК БПАГДокументыАгентовСрезПоследних
				|ГДЕ
				|	БПАГДокументыАгентовСрезПоследних.ВидДокумента = &ВидДокумента";
				
				Запрос.УстановитьПараметр("ИД", тмпДокумент.uniqueID);
				Запрос.УстановитьПараметр("ВидДокумента", Перечисления.БПАГВидыДокументов.ЗаказНаСклад);
				
				ТребуетсяСоздатьИлиИзменитьДокумент = Истина;
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Попытка
						Если Выборка.Ссылка.Пустая() Тогда
							Продолжить;
						ИначеЕсли Выборка.Ссылка.Проведен Тогда
							Если НастройкиДокумента.Перепроводить Тогда
								Док = Выборка.Ссылка.ПолучитьОбъект();	
							Иначе
								ТребуетсяСоздатьИлиИзменитьДокумент = Ложь;	
								ЕстьОшибки = Истина;
								ОтладочноеСообщение("Документ " + Выборка.Ссылка + " (номер на устройстве: " + тмпДокумент.number + ") уже проведен! Перепроведение отключено в настройках.");
								СчетОшибочных = СчетОшибочных + 1;
							КонецЕсли;
						ИначеЕсли Выборка.Ссылка.ПометкаУдаления Тогда
							ТребуетсяСоздатьИлиИзменитьДокумент = Ложь;	
							ЕстьОшибки = Истина;
							ОтладочноеСообщение("Документ " + Выборка.Ссылка + " (номер на устройстве: " + тмпДокумент.number + ") был помечен на удаление в центральной базе! Документ не загружен.");
							СчетОшибочных = СчетОшибочных + 1;
						Иначе
							//Документ уже загружен, но не проведен
							Если НастройкиДокумента.ПерезаписыватьНепроведенные Тогда
								Док = Выборка.Ссылка.ПолучитьОбъект();
								ТребуетсяСоздатьИлиИзменитьДокумент = Истина;	
							Иначе
								ТребуетсяСоздатьИлиИзменитьДокумент = Ложь;	
								ЕстьОшибки = Истина;
								ОтладочноеСообщение("Документ " + Выборка.Ссылка + " (номер на устройстве: " + тмпДокумент.number + ") уже был загружен! Перезапись непроведенных документов отключена в настройках.");
								СчетОшибочных = СчетОшибочных + 1;
							КонецЕсли;	
						КонецЕсли;
					Исключение
						Продолжить;
					КонецПопытки;
				Иначе
					Если ВидПрикладногоРешения = "УНФ" Тогда
						Док = Документы.ПеремещениеЗапасов.СоздатьДокумент();
					Иначе
						Док = Документы.ПеремещениеТоваров.СоздатьДокумент();
					КонецЕсли;
				КонецЕсли;
				
				Если ТребуетсяСоздатьИлиИзменитьДокумент Тогда
					//Организация
					тмпКод = тмпДокумент.companyID;
					БПАГОрганизация = Справочники.БПАГОрганизации.НайтиПоКоду(тмпКод);
					Если БПАГОрганизация.Пустая() Тогда
						ЕстьОшибки = Истина;
						СтрокаОшибок = СтрокаОшибок + "Организация с кодом " + тмпКод + " не найдена! " + Символы.ПС;
						Организация = Справочники.Организации.ПустаяСсылка();
					Иначе
						Организация = БПАГОрганизация.Организация;
					КонецЕсли;
					
					//Склад-отправитель
					тмпКод = тмпДокумент.depotID;
					БПАГСклад = Справочники.БПАГСклады.НайтиПоКоду(тмпКод);
					Если БПАГСклад.Пустая() Тогда
						ЕстьОшибки = Истина;
						СтрокаОшибок = СтрокаОшибок + "Склад с кодом " + тмпКод + " не найден! " + Символы.ПС;
						Если ВидПрикладногоРешения = "УНФ" Тогда
							СкладОтправитель = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
						Иначе
							СкладОтправитель = Справочники.Склады.ПустаяСсылка();
						КонецЕсли;
					Иначе
						СкладОтправитель = БПАГСклад.Склад;
					КонецЕсли;
					
					//Склад-получатель  
					
					//СкладПолучатель = НастройкаИзКэша("defaultMobileDepotID", тмпАгент.Агент).Склад;
					//Если СкладПолучатель.Пустая() Тогда
					//	ЕстьОшибки = Истина;
					//	СтрокаОшибок = СтрокаОшибок + "У агента " + тмпАгент.Агент + " не установлен склад-получатель (основной склад-транспорт)!" + Символы.ПС;
					//КонецЕсли;
					тмпКод = тмпДокумент.destinationDepotID;
					БПАГСкладПолучатель = Справочники.БПАГСклады.НайтиПоКоду(тмпКод);
					Если БПАГСкладПолучатель.Пустая() Тогда
						ЕстьОшибки = Истина;
						СтрокаОшибок = СтрокаОшибок + "Склад с кодом " + тмпКод + " не найден! " + Символы.ПС;
						Если ВидПрикладногоРешения = "УНФ" Тогда
							СкладПолучатель = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
						Иначе
							СкладПолучатель = Справочники.Склады.ПустаяСсылка();
						КонецЕсли;
					Иначе
						СкладПолучатель = БПАГСкладПолучатель.Склад;
					КонецЕсли;
					
					//Номер
					Номер = тмпДокумент.number;
					
					//Дата последнего изменения
					ДатаПоследнегоИзменения = Дата(тмпДокумент.date);
					
					//Заполнение (перезаполнение) документа
					Если СпецификаПользователя = "FT" Тогда
						Док.Дата = ТекущаяДата();
					ИначеЕсли СпецификаПользователя = "Sarmat" Тогда
						Док.Дата = ТекущаяДата();
					Иначе
						Док.Дата = ДатаПоследнегоИзменения;
					КонецЕсли;
					
					Если ВидПрикладногоРешения = "УТ10" Тогда
						Попытка
							Док.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
						Исключение
						КонецПопытки;
					КонецЕсли;
					
					Док.Организация = Организация;
										
					Док.Комментарий = ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", "Пан Агент (" + тмпАгент.Агент + ") №" + Номер) + ?(СокрЛП(тмпДокумент.comment) = "", "", ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", " (") + тмпДокумент.comment + ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", ")"));
					
					Если ВидПрикладногоРешения = "УТ11" Тогда
						
						Док.СкладОтправитель = СкладОтправитель;
						Док.СкладПолучатель = СкладПолучатель;
						
						Док.Ответственный = ПолучитьОтветственного(тмпАгент);
						Док.Подразделение = Док.Ответственный.ТекущееПодразделение;
							
						тмпСтатус = НастройкаИзКэша("1ССтатусЗаказовНаСклад", тмпАгент.Агент);
						Если (тмпСтатус = "Ошибка") Или (тмпСтатус.Пустая()) Тогда
							Док.Статус = Перечисления.СтатусыПеремещенийТоваров.Принято;
						Иначе
							Док.Статус = тмпСтатус;
						КонецЕсли;
						
						Док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
						Док.ВидЦены = Справочники.Склады.УчетныйВидЦены(Док.СкладПолучатель);
						
						Попытка
							Если Справочники.Организации.РозничнаяТорговляОблагаетсяЕНВД(Док.Организация, Док.СкладПолучатель, Док.Дата) Тогда
								Док.ПеремещениеПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД;
							Иначе
								Док.ПеремещениеПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка();
							КонецЕсли;
						Исключение
						КонецПопытки;
						
					ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
						
						Док.ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.Перемещение;
						
						Док.СтруктурнаяЕдиница = СкладОтправитель;
						Док.СтруктурнаяЕдиницаПолучатель = СкладПолучатель;
						
						Выполнить("Док.Автор = Пользователи.ТекущийПользователь();");
						
					Иначе
						
						Док.СкладОтправитель = СкладОтправитель;
						Док.СкладПолучатель = СкладПолучатель;
						
						Док.Подразделение = НастройкаИзКэша("1СОсновноеПодразделение", тмпАгент.Агент);

						Выполнить("ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Док, ""Продажа"");");
						
						Док.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
						
						Док.ОтражатьВУправленческомУчете = НастройкиДокумента.ОтражатьВУУ;
						
						Попытка
							Док.ОтражатьВБухгалтерскомУчете = НастройкиДокумента.ОтражатьВБУ;
							Док.ОтражатьВНалоговомУчете = НастройкиДокумента.ОтражатьВНУ;
						Исключение
						КонецПопытки;
						
						Док.Ответственный = ПолучитьОтветственного(тмпАгент);
					КонецЕсли;
					
					//Загрузка табличной части
					Если ВидПрикладногоРешения = "УНФ" Тогда
						Док.Запасы.Очистить();
					Иначе
						Док.Товары.Очистить();
					КонецЕсли;
					
					Если Док.Проведен Тогда
						//Док.ОбменДанными.Загрузка = Истина;
						Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					КонецЕсли;
					
					// Остатки на складах
					Если НастройкаИзКэша("1СКонтрольОстатковВЗаказеНаСклад", тмпАгент.Агент) Тогда
						
						Если ВидПрикладногоРешения = "УТ11" Тогда
							Запрос = Новый Запрос;
							Запрос.Текст =
							"ВЫБРАТЬ
							|	БПАГНоменклатура.Номенклатура КАК Номенклатура,
							|	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК КоличествоОстаток
							|ИЗ
							|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
							|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад = &Склад) КАК ТоварыНаСкладахОстатки
							|		ПО БПАГНоменклатура.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
							|			И (БПАГНоменклатура.Код В (&МассивКодов))";
						ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
							Запрос = Новый Запрос;
							Запрос.Текст =
							"ВЫБРАТЬ
							|	БПАГНоменклатура.Номенклатура КАК Номенклатура,
							|	ЗапасыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
							|ИЗ
							|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
							|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыНаСкладах.Остатки(, СтруктурнаяЕдиница = &Склад) КАК ЗапасыНаСкладахОстатки
							|		ПО БПАГНоменклатура.Номенклатура = ЗапасыНаСкладахОстатки.Номенклатура
							|			И (БПАГНоменклатура.Код В (&МассивКодов))";
						Иначе
							Запрос = Новый Запрос;
							Запрос.Текст =
							"ВЫБРАТЬ
							|	БПАГНоменклатура.Номенклатура КАК Номенклатура,
							|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
							|ИЗ
							|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
							|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
							|				,
							|					Склад = &Склад) КАК ТоварыНаСкладахОстатки
							|		ПО БПАГНоменклатура.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
							|			И (БПАГНоменклатура.Код В (&МассивКодов))";
						КонецЕсли;
						
						Запрос.УстановитьПараметр("Склад", СкладОтправитель);
						МассивКодов = тмпДокумент.rows.ВыгрузитьКолонку("goodID");
						Запрос.УстановитьПараметр("МассивКодов", МассивКодов);
						
						ТЗОстатки = Запрос.Выполнить().Выгрузить();
					КонецЕсли;
					
					Для Каждого тмп Из тмпДокумент.rows Цикл
						тмп.sort = Число(тмп.sort);
					КонецЦикла;
					тмпДокумент.rows.Сортировать("sort");
					Для Каждого тмпСтрока Из тмпДокумент.rows Цикл
						//Товар
						тмпКод = тмпСтрока.goodID;
						тмпНазваниеХарактеристики = "";
						
						ПозицияРазделителяХарактеристики = Найти(тмпСтрока.goodID, ":|");
						Если ПозицияРазделителяХарактеристики > 0 Тогда
							тмпКод = Лев(тмпСтрока.goodID, ПозицияРазделителяХарактеристики - 1);
							тмпНазваниеХарактеристики = Сред(тмпСтрока.goodID, ПозицияРазделителяХарактеристики + 2);
						КонецЕсли;
						
						БПАГНоменклатура = Справочники.БПАГНоменклатура.НайтиПоКоду(тмпКод);
						Если БПАГНоменклатура.Пустая() Тогда
							ЕстьОшибки = Истина;
							СтрокаОшибок = СтрокаОшибок + "Товар с кодом " + тмпКод + " не найден! " + Символы.ПС;
							Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
						Иначе
							Номенклатура = БПАГНоменклатура.Номенклатура;
						КонецЕсли;
						
						Характеристика = ПолучитьХарактеристику(Номенклатура, тмпНазваниеХарактеристики);
						
						Если ВидПрикладногоРешения = "УНФ" Тогда
							Если Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Запас Тогда
								ЕстьОшибки = Истина;
								СтрокаОшибок = СтрокаОшибок + "Номенклатура " + Номенклатура + " (код: " + тмпКод + ") не является товаром! " + Символы.ПС;
								Продолжить;
							КонецЕсли;
						ИначеЕсли ВидПрикладногоРешения = "УТ11" Тогда
							Если Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Товар Тогда
								ЕстьОшибки = Истина;
								СтрокаОшибок = СтрокаОшибок + "Номенклатура " + Номенклатура + " (код: " + тмпКод + ") не является товаром! " + Символы.ПС;
								Продолжить;
							КонецЕсли;
						Иначе
							Если Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Товар Тогда
								ЕстьОшибки = Истина;
								СтрокаОшибок = СтрокаОшибок + "Номенклатура " + Номенклатура + " (код: " + тмпКод + ") не является товаром! " + Символы.ПС;
								Продолжить;
							КонецЕсли;
						КонецЕсли;
						
						//Единица измерения
						тмпКоэффициент = Число(тмпСтрока.coeff);
						ЕдиницаИзмерения = ПолучитьЕдиницуИзмерения(тмпСтрока, Номенклатура, ЕстьОшибки, СтрокаОшибок);
						
						//Количество
						Количество = Число(тмпСтрока.quantity);
						
						//Проверка остатков
						Если НастройкаИзКэша("1СКонтрольОстатковВЗаказеНаСклад", тмпАгент.Агент) Тогда
							КоличествоОстаток = 0;
							тмпСтрокаОстатков = ТЗОстатки.Найти(Номенклатура, "Номенклатура");
							Если тмпСтрокаОстатков <> Неопределено Тогда
								КоличествоОстаток = тмпСтрокаОстатков.КоличествоОстаток / ?(тмпКоэффициент = 0, 1, тмпКоэффициент);
							КонецЕсли;
							
							Если КоличествоОстаток < Количество Тогда
								ОтладочноеСообщение("Остаток товара " + Номенклатура + " меньше заказанного на склад " + СкладПолучатель + ". Заказано: " + Количество + ", имеется: " + КоличествоОстаток + ".");
								Количество = КоличествоОстаток;
							КонецЕсли;
						КонецЕсли;
						
						Если ВидПрикладногоРешения = "УТ11" Тогда
							
							Если Окр(Количество, 3) > 0 Тогда
								НоваяСтрока = Док.Товары.Добавить();
								НоваяСтрока.Номенклатура = Номенклатура;
								НоваяСтрока.КоличествоУпаковок = Количество;
								НоваяСтрока.Количество = НоваяСтрока.КоличествоУпаковок * тмпКоэффициент;
								НоваяСтрока.Упаковка = ЕдиницаИзмерения;
								НоваяСтрока.Характеристика = Характеристика;
								
								СтруктураДействий = Новый Структура;
								//СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", НоваяСтрока.Характеристика);
								СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
								
								Выполнить("ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, Неопределено);");
							КонецЕсли;
							
						ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
							
							Если Окр(Количество, 3) > 0 Тогда
								НоваяСтрока = Док.Запасы.Добавить();
								НоваяСтрока.Номенклатура = Номенклатура;
								НоваяСтрока.Количество = Количество;
								НоваяСтрока.ЕдиницаИзмерения = ЕдиницаИзмерения;
							КонецЕсли;
							
						Иначе
							Если Окр(Количество, 3) > 0 Тогда
								Если (Номенклатура.ВидНоменклатуры = ВидНоменклатурыТара) И (НЕ Номенклатура.ВидНоменклатуры.Пустая()) Тогда
									//Тара
									
									НоваяСтрока = Док.ВозвратнаяТара.Добавить();
									НоваяСтрока.Номенклатура = Номенклатура;
									НоваяСтрока.Количество = Количество;
									
									// Выполнить общие действия для всех документов при изменении номенклатуры.
									Выполнить("ОбработкаТабличныхЧастей.ПриИзмененииВозвратнойТарыТабЧасти(НоваяСтрока, Док);");
									
									Попытка
										Док.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "ВозвратнаяТара", Док.ОтражатьВБухгалтерскомУчете, Док.ОтражатьВНалоговомУчете);
									Исключение
									КонецПопытки;
								Иначе
									//Не тара, обычная номенклатура
									НоваяСтрока = Док.Товары.Добавить();
									НоваяСтрока.Номенклатура = Номенклатура;
									НоваяСтрока.Количество = Количество;
									
									Если НастройкаИзКэша("1СЗагружатьДокументыВБазовыхЕдиницах", тмпАгент.Агент) Тогда
										НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
										НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
										НоваяСтрока.Количество = НоваяСтрока.Количество * тмпКоэффициент;
									Иначе
										НоваяСтрока.ЕдиницаИзмерения = ЕдиницаИзмерения;
										НоваяСтрока.Коэффициент = ЕдиницаИзмерения.Коэффициент;
									КонецЕсли;
									
									// Выполнить общие действия для всех документов при изменении номенклатуры.
									Выполнить("ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НоваяСтрока, Док);");
									
									Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(НоваяСтрока, Док);");
									
									Попытка
										Док.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", Док.ОтражатьВБухгалтерскомУчете, Док.ОтражатьВНалоговомУчете);
									Исключение
									КонецПопытки;
									
									НоваяСтрока.Качество = Справочники.Качество.Новый;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					// Если есть категории "PostUU", "PostBU", "DontPostUU", "DontPostBU", то соответствующим образом проставим отражения в учетах
					УстановитьСпособыОтраженияВУчетах(тмпДокумент, Док);
					
					СчетДокументов = СчетДокументов + 1;
					Если ЕстьОшибки Тогда
						//Док.ОбменДанными.Загрузка = Истина;
						Док.Записать(РежимЗаписиДокумента.Запись);	
						ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Заказ на склад " + Номер + " (Перемещение товаров " + Док.Номер + ") - возникли ошибки при загрузке: ");
						ОтладочноеСообщение(СтрокаОшибок);
						
						СчетОшибочных = СчетОшибочных + 1;	
					Иначе
						//Док.ОбменДанными.Загрузка = Истина;
						Попытка
							Док.Записать(?(НастройкиДокумента.Проводить, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
						Исключение
							ЕстьОшибки = Истина;
							СчетОшибочных = СчетОшибочных + 1;
							ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Заказ на склад " + Номер + " (Перемещение товаров " + Док.Номер + ") - возникли ошибки при загрузке: ");
							ОтладочноеСообщение(ОписаниеОшибки());
							Попытка
								Док.Записать(РежимЗаписиДокумента.Запись);
							Исключение
								ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Заказ на склад " + Номер + " (Перемещение товаров " + Док.Номер + ") - возникли ошибки при загрузке: ");
								ОтладочноеСообщение(ОписаниеОшибки());
							КонецПопытки;
						КонецПопытки;
					КонецЕсли;
					
					//Свойства и категории
					УстановитьСвойстваИКатегории(тмпДокумент, Док);
					
					//Запишем данные в служебный регистр
					НоваяЗаписьДокументыАгентов = РегистрыСведений.БПАГДокументыАгентов.СоздатьМенеджерЗаписи();
					НоваяЗаписьДокументыАгентов.ВидДокумента = Перечисления.БПАГВидыДокументов.ЗаказНаСклад;
					
					НоваяЗаписьДокументыАгентов.Период = ТекущаяДата();
					НоваяЗаписьДокументыАгентов.Агент = тмпАгент.Агент;
					НоваяЗаписьДокументыАгентов.Документ = Док.Ссылка;
					
					НоваяЗаписьДокументыАгентов.ДатаСозданияНаУстройстве = Дата(тмпДокумент.createdDate);
					НоваяЗаписьДокументыАгентов.ДатаИзмененияНаУстройстве = Дата(тмпДокумент.modifiedDate);
					
					НоваяЗаписьДокументыАгентов.ИД = тмпДокумент.uniqueID;
					НоваяЗаписьДокументыАгентов.НомерДокументаНаУстройстве = Номер;
					НоваяЗаписьДокументыАгентов.ШиротаСоздания = Число(тмпДокумент.createdLatitude);
					НоваяЗаписьДокументыАгентов.ДолготаСоздания = Число(тмпДокумент.createdLongitude);
					НоваяЗаписьДокументыАгентов.ШиротаИзменения = Число(тмпДокумент.modifiedLatitude);
					НоваяЗаписьДокументыАгентов.ДолготаИзменения = Число(тмпДокумент.modifiedLongitude);
					НоваяЗаписьДокументыАгентов.МоментСозданияПоGPS = ?(тмпДокумент.createdLocationDate = "", 0, Дата(тмпДокумент.createdLocationDate));
					НоваяЗаписьДокументыАгентов.МоментИзмененияПоGPS = ?(тмпДокумент.modifiedLocationDate = "", 0, Дата(тмпДокумент.modifiedLocationDate));
					
					//Последняя проверка на то, что документ не пуст
					Если СокрЛП(НоваяЗаписьДокументыАгентов.Документ) = "" Тогда
						ОтладочноеСообщение("(!!!) Критическая ошибка базы данных. Обнаружена пустая ссылка на документ.");
						#Если Клиент Тогда
							Предупреждение("Критическая ошибка базы данных. Обнаружена пустая ссылка на документ. Обратитесь к системному администратору. Подробности зафиксированы в журнале (каталог logs папки обмена).", 10);
						#КонецЕсли
					Иначе	
						НоваяЗаписьДокументыАгентов.Записать();
					КонецЕсли;
					
				КонецЕсли;				
			КонецЦикла;
		КонецЕсли;
		
		ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Загружено заказов на склад: " + СчетДокументов + "." +?(СчетОшибочных > 0, " Из них с ошибками: " + СчетОшибочных, " Без ошибок."));	
	КонецЦикла;
	
КонецПроцедуры

#Область ЗагрузитьВозвратыОтПокупателей

Процедура ЗагрузитьВозвратыОтПокупателей(Агенты)
	
	ВидПрикладногоРешения = БПАГ.ПолучитьВидПрикладногоРешения();
	
	НастройкиДокумента = ПолучитьНастройкиДокумента(Перечисления.БПАГВидыДокументов.ВозвратОтПокупателя, ТекущаяДата());
	Если НастройкиДокумента = Неопределено Тогда
		ОтладочноеСообщение("Не заданы настройки для документа ""Возврат от покупателя""! Загрузка остановлена. Задайте настройки и повторите загрузку.");
		Возврат;
	КонецЕсли;
	
	Если ВидПрикладногоРешения = "УТ10" Тогда
		ВидНоменклатурыТара = НастройкаИзКэша("1СВидНоменклатурыТара");
	КонецЕсли;
	
	Для Каждого тмпАгент Из Агенты Цикл
		
		складВозвратовВДокументе = НастройкаИзКэша("1ССкладВозвратов", тмпАгент.Агент);
		
		ТЗ = ПолучитьТЗИзPlist(тмпАгент.Агент, "returnins", "Не найдены возвраты от покупателей для ");
		Если ТЗ = Неопределено Тогда
			Продолжить;
		Иначе
			//Соберем документы-основания	
			Если СпецификаПользователя = "SD" Тогда
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	ЕСТЬNULL(РасходнаяНакладная.Ссылка, БПАГДокументыАгентовСрезПоследних.Документ) КАК Документ,
				|	БПАГДокументыАгентовСрезПоследних.ИД КАК ИД
				|ИЗ
				|	РегистрСведений.БПАГДокументыАгентов.СрезПоследних(, ИД В (&ИД)) КАК БПАГДокументыАгентовСрезПоследних
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходнаяНакладная КАК РасходнаяНакладная
				|		ПО БПАГДокументыАгентовСрезПоследних.Документ = РасходнаяНакладная.ДокОсн";
			ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	ЕСТЬNULL(РасходнаяНакладная.Ссылка, БПАГДокументыАгентовСрезПоследних.Документ) КАК Документ,
				|	БПАГДокументыАгентовСрезПоследних.ИД КАК ИД
				|ИЗ
				|	РегистрСведений.БПАГДокументыАгентов.СрезПоследних(, ИД В (&ИД)) КАК БПАГДокументыАгентовСрезПоследних
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходнаяНакладная КАК РасходнаяНакладная
				|		ПО БПАГДокументыАгентовСрезПоследних.Документ = РасходнаяНакладная.Заказ";
			Иначе
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	ЕСТЬNULL(РеализацияТоваровУслуг.Ссылка, БПАГДокументыАгентовСрезПоследних.Документ) КАК Документ,
				|	БПАГДокументыАгентовСрезПоследних.ИД КАК ИД
				|ИЗ
				|	РегистрСведений.БПАГДокументыАгентов.СрезПоследних(, ИД В (&ИД)) КАК БПАГДокументыАгентовСрезПоследних
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
				|		ПО БПАГДокументыАгентовСрезПоследних.Документ = РеализацияТоваровУслуг.Сделка";
			КонецЕсли;
			
			Запрос.УстановитьПараметр("ИД", ТЗ.ВыгрузитьКолонку("masterDocumentID"));
			ТЗДокументыПартий = Запрос.Выполнить().Выгрузить();
			
			СчетДокументов = 0;
			СчетОшибочных = 0;
			Для Каждого тмпДокумент Из ТЗ Цикл
				
				//Глобальное изменение формата - игнорируем старые документы для совместимости
				ДатаПоследнегоИзменения = Дата(ПреобразоватьДатуВФормат24(тмпДокумент.date));
				Если ДатаПоследнегоИзменения < Дата(2013, 1, 15) Тогда
					Продолжить;
				КонецЕсли;
				
				ЕстьОшибки = Ложь;
				СтрокаОшибок = "";
				
				Если ТЗ.Колонки.Найти("rowCount") <> Неопределено Тогда
					Если Число(тмпДокумент.rowCount) = 0 Тогда
						ЕстьОшибки = Истина;
						ОтладочноеСообщение("Возврат от покупателя (номер на устройстве: " + тмпДокумент.number + ") пуст (не заполнена табличная часть). Документ проигнорирован!");
						СчетОшибочных = СчетОшибочных + 1;
						Продолжить;
					КонецЕсли;
				Иначе
					ЕстьОшибки = Истина;
					ОтладочноеСообщение("Возврат от покупателя (номер на устройстве: " + тмпДокумент.number + ") выгружен без табличной части. Документ проигнорирован!");
					СчетОшибочных = СчетОшибочных + 1;
					Продолжить;
				КонецЕсли;
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	БПАГДокументыАгентовСрезПоследних.Документ КАК Ссылка
				|ИЗ
				|	РегистрСведений.БПАГДокументыАгентов.СрезПоследних(, ИД = &ИД) КАК БПАГДокументыАгентовСрезПоследних
				|ГДЕ
				|	БПАГДокументыАгентовСрезПоследних.ВидДокумента = &ВидДокумента";
				
				Запрос.УстановитьПараметр("ИД", тмпДокумент.uniqueID);
				Запрос.УстановитьПараметр("ВидДокумента", Перечисления.БПАГВидыДокументов.ВозвратОтПокупателя);

				ТребуетсяСоздатьИлиИзменитьДокумент = Истина;
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Попытка
						Если Выборка.Ссылка.Пустая() Тогда
							Продолжить;
						ИначеЕсли Выборка.Ссылка.Проведен Тогда
							Если НастройкиДокумента.Перепроводить Тогда
								Док = Выборка.Ссылка.ПолучитьОбъект();	
							Иначе
								ТребуетсяСоздатьИлиИзменитьДокумент = Ложь;	
								ЕстьОшибки = Истина;
								ОтладочноеСообщение("Документ " + Выборка.Ссылка + " (номер на устройстве: " + тмпДокумент.number + ") уже проведен! Перепроведение отключено в настройках.");
								СчетОшибочных = СчетОшибочных + 1;
							КонецЕсли;
						ИначеЕсли Выборка.Ссылка.ПометкаУдаления Тогда
							ТребуетсяСоздатьИлиИзменитьДокумент = Ложь;	
							ЕстьОшибки = Истина;
							ОтладочноеСообщение("Документ " + Выборка.Ссылка + " (номер на устройстве: " + тмпДокумент.number + ") был помечен на удаление в центральной базе! Документ не загружен.");
							СчетОшибочных = СчетОшибочных + 1;
						Иначе
							//Документ уже загружен, но не проведен
							Если НастройкиДокумента.ПерезаписыватьНепроведенные Тогда
								Док = Выборка.Ссылка.ПолучитьОбъект();
								ТребуетсяСоздатьИлиИзменитьДокумент = Истина;	
							Иначе
								ТребуетсяСоздатьИлиИзменитьДокумент = Ложь;	
								ЕстьОшибки = Истина;
								ОтладочноеСообщение("Документ " + Выборка.Ссылка + " (номер на устройстве: " + тмпДокумент.number + ") уже был загружен! Перезапись непроведенных документов отключена в настройках.");
								СчетОшибочных = СчетОшибочных + 1;
							КонецЕсли;	
						КонецЕсли;
					Исключение
						Продолжить;
					КонецПопытки;
				Иначе
					Если СпецификаПользователя = "SD" Тогда
						Док = Документы.ВозвратОтПокупателя.СоздатьДокумент();
					Иначе	
						Если ВидПрикладногоРешения = "УТ11" Тогда
							Док = Документы.ВозвратТоваровОтКлиента.СоздатьДокумент();
						ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
							//
						Иначе
							Док = Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если ТребуетсяСоздатьИлиИзменитьДокумент Тогда
					
					Если Спецификапользователя = "Adal" Тогда 
						ОфициальныйВозврат = Истина;
						Для Каждого СтрСвойство из тмпДокумент.properties Цикл
							Если (СокрЛП(СтрСвойство.uniqueID) = "K000000007") или (СокрЛП(СтрСвойство.uniqueID) = "KRET000000007") Тогда
								Если СтрСвойство.value = "0" Тогда
									ОфициальныйВозврат = Ложь;
									//Проверим, загружался ли Возврат ранее, второй раз не загружаем.
									Запрос = Новый Запрос;
									Запрос.Текст =
									"ВЫБРАТЬ
									|	БПАГДокументыАгентовСрезПоследних.Документ КАК Ссылка
									|ИЗ
									|	РегистрСведений.БПАГДокументыАгентов.СрезПоследних(, ИД = &ИД) КАК БПАГДокументыАгентовСрезПоследних
									|ГДЕ
									|	БПАГДокументыАгентовСрезПоследних.ВидДокумента = &ВидДокумента";
									
									Запрос.УстановитьПараметр("ИД", тмпДокумент.uniqueID);
									Запрос.УстановитьПараметр("ВидДокумента", Перечисления.БПАГВидыДокументов.ВозвратОтПокупателя);
									
									ТребуетсяСоздатьИлиИзменитьДокумент = Истина;
									Выборка = Запрос.Выполнить().Выбрать();
									Если Выборка.Следующий() Тогда
									   Прервать;
									КонецЕсли;
									
									//Перенос в реализацию
									//Дата последнего изменения
									ДатаПоследнегоИзменения = Дата(ПреобразоватьДатуВФормат24(тмпДокумент.date));
									
									//Контрагент
									тмпКод = тмпДокумент.clientID;
									БПАГКонтрагент = Справочники.БПАГКонтрагенты.НайтиПоКоду(тмпКод);
									Если БПАГКонтрагент.Пустая() Тогда
										ЕстьОшибки = Истина;
										СтрокаОшибок = СтрокаОшибок + "Контрагент с кодом " + тмпКод + " не найден! " + Символы.ПС;
										Контрагент = Справочники.Контрагенты.ПустаяСсылка();
									Иначе
										Контрагент = БПАГКонтрагент.Контрагент;
									КонецЕсли;
									//Найдем реализацию этого контрагента на Дату
									Запрос = Новый Запрос;
									Запрос.Текст =
									"ВЫБРАТЬ
									|	БПАГДокументыАгентовСрезПоследних.Документ КАК Ссылка
									|ИЗ
									|	РегистрСведений.БПАГДокументыАгентов.СрезПоследних(, Агент = &Агент) КАК БПАГДокументыАгентовСрезПоследних
									|ГДЕ
									|	БПАГДокументыАгентовСрезПоследних.ВидДокумента В ИЕРАРХИИ(&ВидДокумента)
									|	И БПАГДокументыАгентовСрезПоследних.Документ.Контрагент = &Контрагент
									|	И НЕ БПАГДокументыАгентовСрезПоследних.Документ.ПометкаУдаления
									|	И БПАГДокументыАгентовСрезПоследних.Документ.Дата МЕЖДУ &ДатаНачалаПериода И &ДатаКонцаПериода";
									
									Запрос.УстановитьПараметр("Агент", тмпАгент.Агент);
									ВидДокументаРеализация = Новый Массив;
									ВидДокументаРеализация.Добавить(Перечисления.БПАГВидыДокументов.Реализация);
									ВидДокументаРеализация.Добавить(Перечисления.БПАГВидыДокументов.РеализацияПоЗаявке);
									Запрос.УстановитьПараметр("ВидДокумента", ВидДокументаРеализация);
									Запрос.УстановитьПараметр("ДатаНачалаПериода", НачалоДня(ДатаПоследнегоИзменения + (24 * 60 * 60)));
									Запрос.УстановитьПараметр("ДатаКонцаПериода", КонецДня(ДатаПоследнегоИзменения + 7*(24 * 60 * 60)));
									Запрос.УстановитьПараметр("Контрагент", Контрагент);
									
									ТребуетсяСоздатьИлиИзменитьДокумент = Истина;
									Выборка = Запрос.Выполнить().Выбрать();
									Пока Выборка.Следующий() Цикл
										Док = Выборка.Ссылка.ПолучитьОбъект();
										//Заполнить колонку в ТЧ
										Для Каждого тмп Из тмпДокумент.rows Цикл
											тмп.sort = Число(тмп.sort);
										КонецЦикла;
										тмпДокумент.rows.Сортировать("sort");
										Для Каждого тмпСтрока Из тмпДокумент.rows Цикл
											//Товар
											тмпКод = тмпСтрока.goodID;
											
											БПАГНоменклатура = Справочники.БПАГНоменклатура.НайтиПоКоду(тмпКод);
											Если БПАГНоменклатура.Пустая() Тогда
												ЕстьОшибки = Истина;
												СтрокаОшибок = СтрокаОшибок + "Товар с кодом " + тмпКод + " не найден! " + Символы.ПС;
												Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
											Иначе
												Номенклатура = БПАГНоменклатура.Номенклатура;
											КонецЕсли;
											
											//Единица измерения
											тмпКоэффициент = Число(тмпСтрока.coeff);
											ЕдиницаИзмерения = ПолучитьЕдиницуИзмерения(тмпСтрока, Номенклатура, ЕстьОшибки, СтрокаОшибок);
											
											//Цена
											Цена = Число(тмпСтрока.price);
											
											//Количество
											Количество = Число(тмпСтрока.quantity);
											
											//Сумма
											Сумма = Число(тмпСтрока.sum);
											
											//Заполним свойства строки Замена
											ПричинаЗамены = Справочники.БПАГПричиныБрака.ПустаяСсылка();
											Для Каждого тмпСтрокаСвойств Из тмпСтрока.properties Цикл
												ПричинаЗамены = Справочники.БПАГПричиныБрака.НайтиПоНаименованию(СокрЛП(тмпСтрокаСвойств.value));
											КонецЦикла;
											
											
											НоменклатураОтсутствуетВДокументе = Истина;
											//Для Каждого тмпСтрокаРеализации из Док.Товары Цикл
											//	Если тмпСтрокаРеализации = Номенклатура Тогда
											//		//Номенклатура присутствует в реализации
											//		тмпСтрокаРеализации.Замена = Количество;
											//		тмпСтрокаРеализации.ПричинаЗамены = ПричинаЗамены;
											//		НоменклатураОтсутствуетВДокументе = Ложь;
											//	КонецЕсли;	
											//КонецЦикла;
											Если НоменклатураОтсутствуетВДокументе Тогда
												//ДобавитьСтроку с Номенклатурой
												НоваяСтрока = Док.Товары.Добавить();
												НоваяСтрока.Номенклатура = Номенклатура;
												НоваяСтрока.Замена = Количество;
												НоваяСтрока.ПричинаЗамены = ПричинаЗамены;
												Если НастройкаИзКэша("1СЗагружатьДокументыВБазовыхЕдиницах", тмпАгент.Агент) Тогда
													НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
													НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
													НоваяСтрока.Замена = НоваяСтрока.Количество * тмпКоэффициент;
												Иначе
													НоваяСтрока.ЕдиницаИзмерения = ЕдиницаИзмерения;
													НоваяСтрока.Коэффициент = ЕдиницаИзмерения.Коэффициент;
												КонецЕсли;
												НоваяСтрока.Цена = Цена;
												// Выполнить общие действия для всех документов при изменении номенклатуры.
												Выполнить("ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НоваяСтрока, Док);");
												
												Попытка
													Док.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", Док.ОтражатьВБухгалтерскомУчете, Док.ОтражатьВНалоговомУчете);
												Исключение
												КонецПопытки;
												
												// Заполняем реквизиты табличной части.
												Попытка
													Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, Док, ""Реализация"");");
												Исключение
													Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, Док);");
												КонецПопытки;
												
												Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(НоваяСтрока, Док);");
												
												Попытка 
													Выполнить("ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НоваяСтрока, Док);");
													Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(НоваяСтрока, Док);");
												Исключение 
												КонецПопытки;
												Если СпецификаПользователя = "Adal" Тогда
													Попытка
														СчетБУ  = НоваяСтрока.СчетДоходовБУ;
														СчетНУ  = НоваяСтрока.СчетДоходовНУ;
														
														Если НЕ ЗначениеЗаполнено(НоваяСтрока.СчетДоходовБУ) Тогда
															НоваяСтрока.СчетДоходовБУ = ПланыСчетов.Типовой.НайтиПоКоду("6010");
														КонецЕсли;	
														Если НЕ ЗначениеЗаполнено(НоваяСтрока.СубконтоДоходовБУ1) Тогда
															НоваяСтрока.СубконтоДоходовБУ1 = Справочники.Доходы.НайтиПоНаименованию("Доходы от реализации ТМЦ");
														КонецЕсли;	
														Если НЕ ЗначениеЗаполнено(НоваяСтрока.СубконтоДоходовБУ2) Тогда
															НоваяСтрока.СубконтоДоходовБУ2 = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Основная номенклатурная группа");
														КонецЕсли;	
														
														Если НЕ ЗначениеЗаполнено(НоваяСтрока.СчетДоходовНУ) Тогда
															НоваяСтрока.СчетДоходовНУ = ПланыСчетов.Налоговый.НайтиПоКоду("Н710");
														КонецЕсли;	
														Если НЕ ЗначениеЗаполнено(НоваяСтрока.СубконтоДоходовНУ2) Тогда
															НоваяСтрока.СубконтоДоходовНУ2 = НоваяСтрока.Номенклатура;
														КонецЕсли;	
														Если НЕ ЗначениеЗаполнено(НоваяСтрока.СубконтоДоходовНУ1) Тогда
															НоваяСтрока.СубконтоДоходовНУ1 = Справочники.Доходы.НайтиПоНаименованию("Доходы от реализации ТМЦ");
														КонецЕсли;	
														
														Если НЕ ЗначениеЗаполнено(НоваяСтрока.СчетСписанияСебестоимостиБУ) Тогда
															НоваяСтрока.СчетСписанияСебестоимостиБУ = ПланыСчетов.Типовой.НайтиПоКоду("7010");
														КонецЕсли;	
														Если НЕ ЗначениеЗаполнено(НоваяСтрока.СубконтоСписанияСебестоимостиБУ1) Тогда
															НоваяСтрока.СубконтоСписанияСебестоимостиБУ1 = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Реализация ТМЦ");
														КонецЕсли;	
														Если НЕ ЗначениеЗаполнено(НоваяСтрока.СубконтоСписанияСебестоимостиБУ2) Тогда
															НоваяСтрока.СубконтоСписанияСебестоимостиБУ2 = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Основная номенклатурная группа");
														КонецЕсли;	
														
														Если НЕ ЗначениеЗаполнено(НоваяСтрока.СчетСписанияСебестоимостиНУ) Тогда
															НоваяСтрока.СчетСписанияСебестоимостиНУ = ПланыСчетов.Налоговый.НайтиПоКоду("Н810");
														КонецЕсли;	
														Если НЕ ЗначениеЗаполнено(НоваяСтрока.СубконтоСписанияСебестоимостиНУ1) Тогда
															НоваяСтрока.СубконтоСписанияСебестоимостиНУ1 = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Реализация ТМЦ");
														КонецЕсли;	
														
														Если НЕ ЗначениеЗаполнено(НоваяСтрока.НДСВидОперацииРеализации) Тогда
															НоваяСтрока.НДСВидОперацииРеализации = Справочники.ВидыРеализации.РеализацияТМЗ;
														КонецЕсли;	
														Если НЕ ЗначениеЗаполнено(НоваяСтрока.СчетУчетаНДСПоРеализации) Тогда
															НоваяСтрока.СчетУчетаНДСПоРеализации = ПланыСчетов.Типовой.НайтиПоКоду("3130");
														КонецЕсли;	
														Если НЕ ЗначениеЗаполнено(НоваяСтрока.СчетУчетаНУ) Тогда
															НоваяСтрока.СчетУчетаНУ = ПланыСчетов.Налоговый.НайтиПоКоду("Н211");
														КонецЕсли;	
													Исключение
													КонецПопытки;
												КонецЕсли;
												// Ввод состава набора
												Выполнить("УправлениеЗапасами.ДобавитьСоставНабора(НоваяСтрока, Док);");
												УстановитьСпособыОтраженияВУчетах(тмпДокумент, Док);
												
												
											КонецЕсли;	
										КонецЦикла;
										//Док.ОбменДанными.Загрузка = Истина;
										Попытка 
											Док.Записать(РежимЗаписиДокумента.Проведение);
											//Запись в служебный регистр.
											//Запишем данные в служебный регистр
											НоваяЗаписьДокументыАгентов = РегистрыСведений.БПАГДокументыАгентов.СоздатьМенеджерЗаписи();
											НоваяЗаписьДокументыАгентов.ВидДокумента = Перечисления.БПАГВидыДокументов.ВозвратОтПокупателя;
											
											НоваяЗаписьДокументыАгентов.Период = ТекущаяДата();
											НоваяЗаписьДокументыАгентов.Агент = тмпАгент.Агент;
											НоваяЗаписьДокументыАгентов.Документ = Док.Ссылка;
											//НоваяЗаписьДокументыАгентов.ТорговаяТочка = ТорговаяТочка;
											НоваяЗаписьДокументыАгентов.ДатаСозданияНаУстройстве = Дата(ПреобразоватьДатуВФормат24(тмпДокумент.createdDate));
											НоваяЗаписьДокументыАгентов.ДатаИзмененияНаУстройстве = Дата(ПреобразоватьДатуВФормат24(тмпДокумент.modifiedDate));
											
											НоваяЗаписьДокументыАгентов.ИД = тмпДокумент.uniqueID;
											НоваяЗаписьДокументыАгентов.НомерДокументаНаУстройстве = тмпДокумент.number;
											//Последняя проверка на то, что документ не пуст
											Если СокрЛП(НоваяЗаписьДокументыАгентов.Документ) = "" Тогда
												ОтладочноеСообщение("(!!!) Критическая ошибка базы данных. Обнаружена пустая ссылка на документ.");
												#Если Клиент Тогда
													Предупреждение("Критическая ошибка базы данных. Обнаружена пустая ссылка на документ. Обратитесь к системному администратору. Подробности зафиксированы в журнале (каталог logs папки обмена).", 10);
												#КонецЕсли
											Иначе	
												НоваяЗаписьДокументыАгентов.Записать();
											КонецЕсли;
											
										Исключение
										КонецПопытки;
										Прервать;
									КонецЦикла;					
									ОфициальныйВозврат = Ложь;
								КонецЕсли;	
							КонецЕсли;	
						КонецЦикла;
						Если НЕ ОфициальныйВозврат Тогда
							Продолжить;
						КонецЕсли;	
					КонецЕсли; 

					//Организация
					тмпКод = тмпДокумент.companyID;
					БПАГОрганизация = Справочники.БПАГОрганизации.НайтиПоКоду(тмпКод);
					Если БПАГОрганизация.Пустая() Тогда
						ЕстьОшибки = Истина;
						СтрокаОшибок = СтрокаОшибок + "Организация с кодом " + тмпКод + " не найдена! " + Символы.ПС;
						Организация = Справочники.Организации.ПустаяСсылка();
					Иначе
						Организация = БПАГОрганизация.Организация;
					КонецЕсли;
					
					//Контрагент или партнер
					Если СпецификаПользователя = "SD" Тогда
						тмпКод = тмпДокумент.clientID;
						Контрагент = Справочники.Контрагенты.НайтиПоКоду(тмпКод);
						Если Контрагент.Пустая() Тогда
							ЕстьОшибки = Истина;
							СтрокаОшибок = СтрокаОшибок + "Контрагент с кодом " + тмпКод + " не найден! " + Символы.ПС;
						КонецЕсли;	
					Иначе
						Если ВидПрикладногоРешения = "УТ11" Тогда
							тмпКод = тмпДокумент.clientID;
							БПАГКонтрагент = Справочники.БПАГКонтрагенты.НайтиПоКоду(тмпКод);
							Если БПАГКонтрагент.Пустая() Тогда
								ЕстьОшибки = Истина;
								СтрокаОшибок = СтрокаОшибок + "Партнер с кодом " + тмпКод + " не найден! " + Символы.ПС;
								Партнер = Справочники.Партнеры.ПустаяСсылка();
							Иначе
								Партнер = БПАГКонтрагент.Партнер;
							КонецЕсли;
						Иначе
							тмпКод = тмпДокумент.clientID;
							БПАГКонтрагент = Справочники.БПАГКонтрагенты.НайтиПоКоду(тмпКод);
							Если БПАГКонтрагент.Пустая() Тогда
								ЕстьОшибки = Истина;
								СтрокаОшибок = СтрокаОшибок + "Контрагент с кодом " + тмпКод + " не найден! " + Символы.ПС;
								Контрагент = Справочники.Контрагенты.ПустаяСсылка();
							Иначе
								Контрагент = БПАГКонтрагент.Контрагент;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					//Договор или соглашение
					Если СпецификаПользователя = "SD" Тогда
					Иначе	
						Если ВидПрикладногоРешения = "УТ11" Тогда
							тмпНаименованиеСоглашения = Сред(тмпДокумент.analyticsID, СтрДлина(БПАГКонтрагент.Код) + 1);
							Соглашение = ПолучитьСоглашение(тмпНаименованиеСоглашения, Партнер);
							Если Соглашение.Пустая() Тогда
								ЕстьОшибки = Истина;
								СтрокаОшибок = СтрокаОшибок + "Соглашение с наименованием " + тмпНаименованиеСоглашения + " не найдено! " + Символы.ПС;
							КонецЕсли
						Иначе
							тмпКод = тмпДокумент.analyticsID;
							Договор = Справочники.ДоговорыКонтрагентов.НайтиПоКоду(тмпКод);
							Если Договор.Пустая() Тогда
								ЕстьОшибки = Истина;
								СтрокаОшибок = СтрокаОшибок + "Договор с кодом " + тмпКод + " не найден! " + Символы.ПС;
							КонецЕсли;	
						КонецЕсли;
					КонецЕсли;
					
					//Склад
					тмпКод = тмпДокумент.depotID;
					БПАГСклад = Справочники.БПАГСклады.НайтиПоКоду(тмпКод);
					Если БПАГСклад.Пустая() Тогда
						ЕстьОшибки = Истина;
						СтрокаОшибок = СтрокаОшибок + "Склад с кодом " + тмпКод + " не найден! " + Символы.ПС;
						Если ВидПрикладногоРешения = "УНФ" Тогда
							Склад = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
						Иначе
							Склад = Справочники.Склады.ПустаяСсылка();
						КонецЕсли;
					Иначе
						Склад = БПАГСклад.Склад;
					КонецЕсли;
					
					//Тип цен
					Если СпецификаПользователя = "SD" Тогда
						тмпКод = тмпДокумент.priceTypeID;
						БПАГПрайс = Справочники.БПАГПрайсы.НайтиПоКоду(тмпКод);
						Если БПАГПрайс.Пустая() Тогда
							ЕстьОшибки = Истина;
							СтрокаОшибок = СтрокаОшибок + "Прайс с кодом " + тмпКод + " не найден! " + Символы.ПС;
							ТипЦен = Справочники.ТипыЦен.ПустаяСсылка();
						Иначе
							ТипЦен = БПАГПрайс.ТипЦен;
						КонецЕсли;
						
					Иначе
						тмпКод = тмпДокумент.priceTypeID;
						БПАГПрайс = Справочники.БПАГПрайсы.НайтиПоКоду(тмпКод);
						Если БПАГПрайс.Пустая() Тогда
							ЕстьОшибки = Истина;
							СтрокаОшибок = СтрокаОшибок + "Прайс с кодом " + тмпКод + " не найден! " + Символы.ПС;
							Если (ВидПрикладногоРешения = "УТ11") ИЛИ (ВидПрикладногоРешения = "УНФ") Тогда
								ТипЦен = Справочники.ВидыЦен.ПустаяСсылка();
							Иначе
								ТипЦен = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
							КонецЕсли;
						Иначе
							ТипЦен = БПАГПрайс.ТипЦен;
						КонецЕсли;
					КонецЕсли;
					
					//Торговая точка
					Если СпецификаПользователя = "SD" Тогда
						
					Иначе
						тмпКод = тмпДокумент.posID;
						ТорговаяТочка = Справочники.БПАГТорговыеТочки.НайтиПоКоду(тмпКод);
						Если ТорговаяТочка.Пустая() Тогда
							ЕстьОшибки = Истина;
							СтрокаОшибок = СтрокаОшибок + "Торговая точка с кодом " + тмпКод + " не найдена! " + Символы.ПС;
						КонецЕсли;
					КонецЕсли;
					
					//Физлицо (агент)
					Если СпецификаПользователя = "SD" Тогда
					Иначе
						ФизЛицо = тмпАгент.Агент.ФизЛицо;
					КонецЕсли;
					
					//Номер
					Номер = тмпДокумент.number;
					
					//Сумма документа
					СуммаДокумента = Число(тмпДокумент.sum);
					
					//Дата последнего изменения
					ДатаПоследнегоИзменения = Дата(ПреобразоватьДатуВФормат24(тмпДокумент.date));
					
					//Заполнение (перезаполнение) документа
					Если СпецификаПользователя = "SD" Тогда
						Док.Дата 			= КонецДня(ТекущаяДата()) + 60*60;
						Док.ДатаСоздания 	= ТекущаяДата();
						
						Док.Организация = Организация;
						Док.Контрагент 	= Контрагент;
						Док.Менеджер 	= тмпАгент.Агент.Менеджер;;
						
						Док.Подразделение = Склад;
						Док.СуммаДокумента = СуммаДокумента;
						
						Док.Комментарий = ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", "Пан Агент (" + тмпАгент.Агент + ") №" + Номер) + ?(СокрЛП(тмпДокумент.comment) = "", "", ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", " (") + тмпДокумент.comment + ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", ")"));
						Выполнить("Док.Автор = Пользователи.ТекущийПользователь();");
						
						Док.ТипЦен = ТипЦен;
						
						//Найдем документ партии (если есть)
						ДокументПартии = "";
						НайденнаяСтрокаПартий = ТЗДокументыПартий.Найти(тмпДокумент.masterDocumentID, "ИД");
						Если НайденнаяСтрокаПартий <> Неопределено Тогда
							ДокументПартии = НайденнаяСтрокаПартий.Документ;
						КонецЕсли;	
						
						//Док.Заказ = ДокументПартии;
						Док.ДокОсн = ДокументПартии;
					ИначеЕсли ВидПрикладногоРешения = "УТ11" Тогда
						
						Если СпецификаПользователя = "FT" Тогда
							Док.Дата = ТекущаяДата();
						ИначеЕсли СпецификаПользователя = "Sarmat" Тогда
							Док.Дата = ТекущаяДата();
						Иначе
							Док.Дата = ДатаПоследнегоИзменения;
						КонецЕсли;
						
						Док.Валюта = мВалютаРегламентированногоУчета;
						
						Если Спецификапользователя = "FT" Тогда 
							тмпКод = тмпДокумент.posID;
							БПАГАдрес = Справочники.БПАГТорговыеТочки.НайтиПоКоду(тмпКод);
							Если БПАГАдрес.Пустая() Тогда
								БПАГАдрес = "";
							Иначе
								БПАГАдрес = "Адрес торговой точки:" + БПАГАдрес + ". ";
							КонецЕсли;
							Док.Комментарий = БПАГАдрес + ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", "Пан Агент (" + тмпАгент.Агент + ") №" + Номер) + ?(СокрЛП(тмпДокумент.comment) = "", "", ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", " (") + тмпДокумент.comment + ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", ")"));
						Иначе	
							Док.Комментарий = ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", "Пан Агент (" + тмпАгент.Агент + ") №" + Номер) + ?(СокрЛП(тмпДокумент.comment) = "", "", ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", " (") + тмпДокумент.comment + ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", ")"));
						КонецЕсли;
					
						Док.Партнер = Партнер;
						Док.Контрагент = ПолучитьКонтрагентаПартнера(Док.Партнер);
						Док.Организация = Организация;
						Док.СуммаДокумента = СуммаДокумента;
						
						Док.Организация = Организация;
						
						Док.Менеджер = ПолучитьОтветственного(тмпАгент);
						Док.Подразделение = Док.Менеджер.ТекущееПодразделение;
						
						Док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента;
						
						Док.Соглашение = Соглашение;
						Если Не БПАГКонтрагент.Пустая() Тогда
							Док.ЗаполнитьУсловияПродажПоCоглашению();
						КонецЕсли;
						Док.Склад = Склад;
						
						//Выполнить("ПродажиСервер.УстановитьДоступностьДоговора(Док, Ложь, Док.Договор);");
						
						//Найдем документ партии (если есть)
						ДокументПартии = "";
						НайденнаяСтрокаПартий = ТЗДокументыПартий.Найти(тмпДокумент.masterDocumentID, "ИД");
						Если НайденнаяСтрокаПартий <> Неопределено Тогда
							ДокументПартии = НайденнаяСтрокаПартий.Документ;
						КонецЕсли;	
						
					ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
						
						Если СпецификаПользователя = "Sarmat" Тогда
							Док.Дата = ТекущаяДата();
						ИначеЕсли СпецификаПользователя = "SD" Тогда						
							Док.Дата 			= КонецДня(ТекущаяДата()) + 60*60;
							Док.ДатаСоздания 	= ТекущаяДата();
						Иначе
							Док.Дата = ДатаПоследнегоИзменения;
						КонецЕсли;
						Док.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя;
						Док.Организация = Организация;
						Если СпецификаПользователя = "SD" Тогда						
							Док.Контрагент = Контрагент;
							Док.Менеджер 	= тмпАгент.Агент.Менеджер;
							Док.Подразделение = Склад;
						Иначе
							Док.Контрагент = Контрагент;
							Док.Договор = Договор;
							Док.СтруктурнаяЕдиница = Склад;
							Док.ВалютаДокумента = Договор.ВалютаРасчетов;
							Выполнить("Док.НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Организация,, Док.Дата);");
							Док.СуммаВключаетНДС = НастройкаИзКэша("1ССуммаВключаетНДС");
							
							Док.Курс = 1;
							Док.Кратность = 1;
				            Док.Ответственный = ПолучитьОтветственного(тмпАгент);
							Док.Подразделение = НастройкаИзКэша("1СОсновноеПодразделение", тмпАгент.Агент);
							
						КонецЕсли;
						
						Док.СуммаДокумента = СуммаДокумента;
						
						Док.Комментарий = ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", "Пан Агент (" + тмпАгент.Агент + ") №" + Номер) + ?(СокрЛП(тмпДокумент.comment) = "", "", ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", " (") + тмпДокумент.comment + ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", ")"));
						Выполнить("Док.Автор = Пользователи.ТекущийПользователь();");
						
						//Найдем документ партии (если есть)
						ДокументПартии = "";
						НайденнаяСтрокаПартий = ТЗДокументыПартий.Найти(тмпДокумент.masterDocumentID, "ИД");
						Если НайденнаяСтрокаПартий <> Неопределено Тогда
							ДокументПартии = НайденнаяСтрокаПартий.Документ;
						КонецЕсли;	
						
						Док.Заказ = ДокументПартии;
						Если СпецификаПользователя = "SD" Тогда
							Док.ДокОсн = ДокументПартии;
						Иначе
							Док.ДокументОснование = ДокументПартии;
						КонецЕсли;
					Иначе
						
						Если СпецификаПользователя = "Sarmat" Тогда
							Док.Дата = ТекущаяДата();
						Иначе
							Док.Дата = ДатаПоследнегоИзменения;
						КонецЕсли;
						
						Док.ВалютаДокумента = мВалютаРегламентированногоУчета;
						
						Попытка
							Док.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия;
						Исключение
						КонецПопытки;
						
						Док.ДоговорКонтрагента = Договор;
						
						Док.Комментарий = ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", "Пан Агент (" + тмпАгент.Агент + ") №" + Номер) + ?(СокрЛП(тмпДокумент.comment) = "", "", ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", " (") + тмпДокумент.comment + ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", ")"));
						
						Док.Контрагент = Контрагент;
						Док.КратностьВзаиморасчетов = 1;
						Док.КурсВзаиморасчетов = 1;
						Док.Организация = Организация;
						Если СпецификаПользователя = "Adal" Тогда
							Если НЕ Контрагент.Пустая() Тогда
								Док.СкладОрдер = Контрагент.ОсновнойСклад;
							КонецЕсли;
						Иначе	
							Док.СкладОрдер = Склад;
						КонецЕсли;
						Док.СуммаДокумента = СуммаДокумента;
						Док.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
						
						Док.Подразделение = НастройкаИзКэша("1СОсновноеПодразделение", тмпАгент.Агент);
						
						Выполнить("ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Док, ""Продажа"");");
						ПриИзмененииЗначенияОрганизации(Док);
						
						Док.ОтражатьВУправленческомУчете = НастройкиДокумента.ОтражатьВУУ;
						
						Попытка
							Док.ОтражатьВБухгалтерскомУчете = НастройкиДокумента.ОтражатьВБУ;
							Док.ОтражатьВНалоговомУчете = НастройкиДокумента.ОтражатьВНУ;
							ЗаполнитьЗначенияСвойств(Док, Док.ЗаполнитьСтруктуруСчетовУчетаШапки(Док.ОтражатьВБухгалтерскомУчете, Док.ОтражатьВНалоговомУчете));
						Исключение
						КонецПопытки;
						
						Попытка
							Док.ОтразитьВКнигеПокупок = Истина;
							Док.ПокупателемВыставляетсяСчетФактураНаВозврат = Истина;
						Исключение
						КонецПопытки;
						
						Док.Ответственный = ПолучитьОтветственного(тмпАгент);
						
						СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
						
						//СтруктураРеквизитовДокумента = 0;
						//Выполнить("СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(Док)");
						
						Выполнить("ЗаполнениеДокументов.УстановитьТипСделки(Док, Истина);");
						
						Док.ТипЦен = ТипЦен;
						
						//Найдем документ партии (если есть)
						ДокументПартии = "";
						НайденнаяСтрокаПартий = ТЗДокументыПартий.Найти(тмпДокумент.masterDocumentID, "ИД");
						Если НайденнаяСтрокаПартий <> Неопределено Тогда
							ДокументПартии = НайденнаяСтрокаПартий.Документ;
						КонецЕсли;
					КонецЕсли;
					//Загрузка табличной части
					Если (ВидПрикладногоРешения = "УНФ") или (СпецификаПользователя = "SD") Тогда
						Док.Запасы.Очистить();
					Иначе
						Док.Товары.Очистить();
					КонецЕсли;
					
					Если СпецификаПользователя = "SD" Тогда
						СоответствиеСкидок = "";
						Выполнить("СоответствиеСкидок = ЦенообразованиеСервер.ВернутьАвтоматическиеСкидки(Новый Структура(""Контрагент,Подразделение,ДатаСреза"", Док.Контрагент,Док.Подразделение,Док.Дата));");
					КонецЕсли;
					
					Для Каждого тмп Из тмпДокумент.rows Цикл
						тмп.sort = Число(тмп.sort);
					КонецЦикла;
					тмпДокумент.rows.Сортировать("sort");
					Для Каждого тмпСтрока Из тмпДокумент.rows Цикл
						
						//Товар
						тмпКод = тмпСтрока.goodID;
						тмпНазваниеХарактеристики = "";
						
						ПозицияРазделителяХарактеристики = Найти(тмпСтрока.goodID, ":|");
						Если ПозицияРазделителяХарактеристики > 0 Тогда
							тмпКод = Лев(тмпСтрока.goodID, ПозицияРазделителяХарактеристики - 1);
							тмпНазваниеХарактеристики = Сред(тмпСтрока.goodID, ПозицияРазделителяХарактеристики + 2);
						КонецЕсли;
						
						БПАГНоменклатура = Справочники.БПАГНоменклатура.НайтиПоКоду(тмпКод);
						Если БПАГНоменклатура.Пустая() Тогда
							ЕстьОшибки = Истина;
							СтрокаОшибок = СтрокаОшибок + "Товар с кодом " + тмпКод + " не найден! " + Символы.ПС;
							Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
						Иначе
							Номенклатура = БПАГНоменклатура.Номенклатура;
						КонецЕсли;
						Если СпецификаПользователя <> "SD" Тогда
							Характеристика = ПолучитьХарактеристику(Номенклатура, тмпНазваниеХарактеристики);
						КонецЕсли;

						//Единица измерения
						тмпКоэффициент = Число(тмпСтрока.coeff);
						Если СпецификаПользователя = "SD" Тогда
							тмпНаименование = тмпСтрока.unit;
							
							ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(тмпНаименование, Истина, , Номенклатура);
							Если ЕдиницаИзмерения.Пустая() Тогда
								ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;
								тмпКоэффициент = 1;
							ИначеЕсли ЕдиницаИзмерения.ПометкаУдаления Тогда
								ВыборкаПоЕдиницам = Справочники.ЕдиницыИзмерения.Выбрать(, Номенклатура);
								НайденаНеудаленная = Ложь;
								Пока ВыборкаПоЕдиницам.Следующий() Цикл
									Если (ВыборкаПоЕдиницам.Наименование = тмпНаименование) И (НЕ ВыборкаПоЕдиницам.ПометкаУдаления) И (ВыборкаПоЕдиницам.Коэффициент = тмпКоэффициент) Тогда
										ЕдиницаИзмерения = ВыборкаПоЕдиницам.Ссылка;
										НайденаНеудаленная = Истина;
										Прервать;
									КонецЕсли;
								КонецЦикла;
								Если НЕ НайденаНеудаленная Тогда
									ЕстьОшибки = Истина;
									СтрокаОшибок = СтрокаОшибок + "Единица измерения " + тмпНаименование + " у товара " + Номенклатура + " помечена на удаление! " + Символы.ПС;
								Иначе	
									Если ЕдиницаИзмерения.Коэффициент <> тмпКоэффициент Тогда
										ЕстьОшибки = Истина;
										СтрокаОшибок = СтрокаОшибок + "Единица измерения " + тмпНаименование + " у товара " + Номенклатура + " имеет неверный коэффициент, отличающийся от коэффициента на устройстве! " + Символы.ПС;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
							
						КонецЕсли;	
						Если СпецификаПользователя <> "SD" Тогда
							ЕдиницаИзмерения = ПолучитьЕдиницуИзмерения(тмпСтрока, Номенклатура, ЕстьОшибки, СтрокаОшибок);
						КонецЕсли;
						
						//Цена
						Цена = Число(тмпСтрока.price);
						
						//Количество
						Количество = Число(тмпСтрока.quantity);
						
						//Сумма
						Сумма = Число(тмпСтрока.sum);
						
						//Цена без скидки
						ЦенаБезСкидки = 0;
						Попытка
							ЦенаБезСкидки = Число(тмпСтрока.originalPrice);
						Исключение
						КонецПопытки;
						
						//Процент скидки
						ПроцентСкидки = 0;
						Попытка
							ПроцентСкидки = Число(тмпСтрока.discountPercent);
						Исключение
						КонецПопытки;
						
						//Сумма скидки
						СуммаСкидки = 0;
						Попытка
							СуммаСкидки = Число(тмпСтрока.discountSum);
						Исключение
						КонецПопытки;
						
						Если СпецификаПользователя = "SD" Тогда	
							Если Окр(Количество, 3) > 0 Тогда
								НоваяСтрока = Док.Запасы.Добавить();
								НоваяСтрока.Номенклатура 		= Номенклатура;
								#Область изменения_20171017_Карпачев_А_Ю
								//НоваяСтрока.СтруктурнаяЕдиница	= Константы.СкладВозвратов.Получить();
								НоваяСтрока.СтруктурнаяЕдиница	= складВозвратовВДокументе;
								#КонецОбласти
								НоваяСтрока.ЕдиницаИзмерения	= Номенклатура.ЕдиницаИзмерения;
								
								НоваяСтрока.Количество = Количество;
								
								СтруктураПараметров = Новый Структура("Номенклатура, ТипЦен, Подразделение, ДатаСреза", Номенклатура, Док.ТипЦен, Док.Подразделение, Док.Дата);
								НоваяСтрока.Цена      			 = ЦенообразованиеСервер.ВернутьЦенуНоменклатуры(СтруктураПараметров);
								НоваяСтрока.ПроцентСкидки		= СоответствиеСкидок.Получить(СокрЛП(Номенклатура.Родитель.Код) +" / "+СокрЛП(Справочники.ЦеновыеГруппы.ПустаяСсылка().Код));
								
								НоваяСтрока.СуммаБезСкидки		= НоваяСтрока.Цена*НоваяСтрока.Количество;
								НоваяСтрока.Скидка				= НоваяСтрока.СуммаБезСкидки * НоваяСтрока.ПроцентСкидки / 100;
								НоваяСтрока.Сумма				= НоваяСтрока.СуммаБезСкидки - НоваяСтрока.Скидка;
								НоваяСтрока.СуммаНДС			= НоваяСтрока.Сумма / 6;
							КонецЕсли;
						ИначеЕсли ВидПрикладногоРешения = "УТ11" Тогда
							
							Если Окр(Количество, 3) > 0 Тогда
								НоваяСтрока = Док.Товары.Добавить();
								НоваяСтрока.Номенклатура = Номенклатура;
								НоваяСтрока.КоличествоУпаковок = Количество;
								НоваяСтрока.Количество = НоваяСтрока.КоличествоУпаковок * тмпКоэффициент;
								НоваяСтрока.Характеристика = Характеристика;
								
								Если НастройкаИзКэша("1СЗагружатьДокументыВБазовыхЕдиницах", тмпАгент.Агент) Тогда
									// ***** NIY (IO)
									ОтладочноеСообщение("Загрузка возвратов от покупателей с учетом настройки '1СЗагружатьДокументыВБазовыхЕдиницах'. Для версии Управление торговлей 11 загрузка номенклатуры в базовых единицах не предусмотрена.  NIY.");
									//НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
									//НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
									//Если ЦенаБезСкидки = 0 Тогда
									//	НоваяСтрока.Цена = ?(тмпКоэффициент = 0, 0, Цена / тмпКоэффициент * НоваяСтрока.Коэффициент);
									//Иначе
									//	НоваяСтрока.Цена = ?(тмпКоэффициент = 0, 0, ЦенаБезСкидки / тмпКоэффициент * НоваяСтрока.Коэффициент);
									//	НоваяСтрока.ПроцентАвтоматическихСкидок = ПроцентСкидки;
									//	НоваяСтрока.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.БезУсловий;
									//КонецЕсли;
									//НоваяСтрока.Количество = НоваяСтрока.Количество * тмпКоэффициент;
								Иначе
									
									НоваяСтрока.Упаковка = ЕдиницаИзмерения;
									
									НоваяСтрока.Сумма = Сумма;
									НоваяСтрока.Цена = НоваяСтрока.Сумма / НоваяСтрока.Количество;
								КонецЕсли;
								
								НоваяСтрока.ДокументРеализации = ДокументПартии;
								
								// Выполнить общие действия для всех документов при изменении номенклатуры.
								СтруктураПересчетаСуммы = Неопределено;
								Выполнить("СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);");
								
								СтруктураДействий = Новый Структура;
								СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
								СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Док.НалогообложениеНДС);
								СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
								СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
								КэшированныеЗначения = Неопределено;
								Выполнить("ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);");
								
								//НоваяСтрока.КлючСтроки = НоваяСтрока.НомерСтроки;
							КонецЕсли;
							
						ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
							
							Если Окр(Количество, 3) > 0 Тогда
								НоваяСтрока = Док.Запасы.Добавить();
								НоваяСтрока.Номенклатура = Номенклатура;
								НоваяСтрока.Количество = Количество;
								
								Если СпецификаПользователя = "SD" Тогда
									#Область изменения_20171017_Карпачев_А_Ю
									//НоваяСтрока.СтруктурнаяЕдиница	= Константы.СкладВозвратов.Получить();
									НоваяСтрока.СтруктурнаяЕдиница	= складВозвратовВДокументе;
									#КонецОбласти
									НоваяСтрока.ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;
									
									СтруктураПараметров = Новый Структура("Номенклатура, ТипЦен, Подразделение, ДатаСреза", Номенклатура, Док.ТипЦен, Док.Подразделение, Док.Дата);
									Цена = 0;
									Выполнить("Цена = ЦенообразованиеСервер.ВернутьЦенуНоменклатуры(СтруктураПараметров);");
									НоваяСтрока.Цена = Цена;
									ПроцентСкидки = 0;
									Выполнить("ПроцентСкидки = СоответствиеСкидок.Получить(СокрЛП(Номенклатура.Родитель.Код) + "" / "" + СокрЛП(Справочники.ЦеновыеГруппы.ПустаяСсылка().Код));");
									НоваяСтрока.ПроцентСкидки = ПроцентСкидки; 
									
									НоваяСтрока.СуммаБезСкидки = НоваяСтрока.Цена*НоваяСтрока.Количество;
									НоваяСтрока.Скидка = НоваяСтрока.СуммаБезСкидки * НоваяСтрока.ПроцентСкидки / 100;
									НоваяСтрока.Сумма = НоваяСтрока.СуммаБезСкидки - НоваяСтрока.Скидка;
									НоваяСтрока.СуммаНДС = НоваяСтрока.Сумма / 6;
								Иначе	
								
									Если НастройкаИзКэша("1СЗагружатьДокументыВБазовыхЕдиницах", тмпАгент.Агент) Тогда
										// ***** NIY (IO)
										ОтладочноеСообщение("Загрузка возвратов от покупателей с учетом настройки '1СЗагружатьДокументыВБазовыхЕдиницах'. Для версии УНФ загрузка номенклатуры в базовых единицах не предусмотрена.  NIY.");
									Иначе
										НоваяСтрока.ЕдиницаИзмерения = ЕдиницаИзмерения;
										НоваяСтрока.Цена = Цена;
									КонецЕсли;
									
									НоваяСтрока.Сумма = Сумма;
									НоваяСтрока.Всего = Сумма;
									СтруктураДанные = Новый Структура();
									СтруктураДанные.Вставить("Организация", Организация);
									СтруктураДанные.Вставить("Номенклатура", НоваяСтрока.Номенклатура);
									СтруктураДанные.Вставить("Характеристика", НоваяСтрока.Характеристика);
									СтруктураДанные.Вставить("НалогообложениеНДС", Док.НалогообложениеНДС);
									
									СтруктураДанные.Вставить("ДатаОбработки",	 Док.Дата);
									СтруктураДанные.Вставить("ВалютаДокумента",  Док.ВалютаДокумента);
									СтруктураДанные.Вставить("СуммаВключаетНДС", Док.СуммаВключаетНДС);
									СтруктураДанные.Вставить("Коэффициент", 1);
											
									СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
									
									НоваяСтрока.СтавкаНДС = СтруктураДанные.СтавкаНДС;
									
									ЧислоСтавкаНДС = 0;
									Выполнить("ЧислоСтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);");
									
									НоваяСтрока.СуммаНДС = ?(Док.СуммаВключаетНДС, 
																	  НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((ЧислоСтавкаНДС + 100) / 100),
																	  НоваяСтрока.Сумма * ЧислоСтавкаНДС / 100);
								КонецЕсли;
								
							КонецЕсли;
							
						Иначе
							
							Если Окр(Количество, 3) > 0 Тогда
								
								Если (Номенклатура.ВидНоменклатуры = ВидНоменклатурыТара) И (НЕ Номенклатура.ВидНоменклатуры.Пустая()) Тогда
									//Тара
									
									НоваяСтрока = Док.ВозвратнаяТара.Добавить();
									НоваяСтрока.Номенклатура = Номенклатура;
									НоваяСтрока.Количество = Количество;
									
									НоваяСтрока.Цена = Цена;
									НоваяСтрока.Сумма = Сумма;
									
									Выполнить("ОбработкаТабличныхЧастей.ПриИзмененииВозвратнойТарыТабЧасти(НоваяСтрока, Док);");
									
									Попытка
										Док.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "ВозвратнаяТара", Док.ОтражатьВБухгалтерскомУчете, Док.ОтражатьВНалоговомУчете);
									Исключение
									КонецПопытки;
									
								Иначе
									//Не тара, обычная номенклатура
								
									НоваяСтрока = Док.Товары.Добавить();
									НоваяСтрока.Номенклатура = Номенклатура;
									НоваяСтрока.Количество = Количество;
									
									Если НастройкаИзКэша("1СЗагружатьДокументыВБазовыхЕдиницах", тмпАгент.Агент) Тогда
										НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
										НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
										Если ЦенаБезСкидки = 0 Тогда
											НоваяСтрока.Цена = ?(тмпКоэффициент = 0, 0, Цена / тмпКоэффициент * НоваяСтрока.Коэффициент);
										Иначе
											НоваяСтрока.Цена = ?(тмпКоэффициент = 0, 0, ЦенаБезСкидки / тмпКоэффициент * НоваяСтрока.Коэффициент);
											НоваяСтрока.ПроцентАвтоматическихСкидок = ПроцентСкидки;
											Если ПроцентСкидки <> 0 Тогда
												НоваяСтрока.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.БезУсловий;
											КонецЕсли;
										КонецЕсли;
										НоваяСтрока.Количество = НоваяСтрока.Количество * тмпКоэффициент;
									Иначе
										НоваяСтрока.ЕдиницаИзмерения = ЕдиницаИзмерения;
										НоваяСтрока.Коэффициент = ЕдиницаИзмерения.Коэффициент;
										Если ЦенаБезСкидки = 0 Тогда
											НоваяСтрока.Цена = Цена;
										Иначе
											НоваяСтрока.Цена = ЦенаБезСкидки;
											НоваяСтрока.ПроцентАвтоматическихСкидок = ПроцентСкидки;
											Если ПроцентСкидки <> 0 Тогда
												НоваяСтрока.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.БезУсловий;
											КонецЕсли;
										КонецЕсли;
									КонецЕсли;
									
									НоваяСтрока.Сумма = Сумма;
									НоваяСтрока.ДокументПартии = ДокументПартии;
									НоваяСтрока.Качество = Справочники.Качество.Новый;
									
									// Выполнить общие действия для всех документов при изменении номенклатуры.
									Выполнить("ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НоваяСтрока, Док);");
									
									Попытка
										Док.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", Док.ОтражатьВБухгалтерскомУчете, Док.ОтражатьВНалоговомУчете);
									Исключение
									КонецПопытки;
									
									// Заполняем реквизиты табличной части.
									Попытка
										Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, Док, ""Реализация"");");
									Исключение
										Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, Док);");
									КонецПопытки;
									
									// Рассчитать реквизиты табличной части.
									Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, Док);");
									Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, Док);");
									
									НоваяСтрока.КлючСтроки = НоваяСтрока.НомерСтроки;
									// Ввод состава набора
									Выполнить("УправлениеЗапасами.ДобавитьСоставНабора(НоваяСтрока, Док);");
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					//Проверим заполнение цен комплектующих и установим в 1 рубль, если отсутствуют
					Если СпецификаПользователя <> "SD" Тогда
					Если ВидПрикладногоРешения = "УТ10" Тогда
						Для Каждого тмпСтрока Из Док.СоставНабора Цикл
							Если тмпСтрока.Цена = 0 Тогда
								тмпСтрока.Цена = 1;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					КонецЕсли;
					// Если есть категории "PostUU", "PostBU", "DontPostUU", "DontPostBU", то соответствующим образом проставим отражения в учетах
					Если СпецификаПользователя <> "SD" Тогда
						УстановитьСпособыОтраженияВУчетах(тмпДокумент, Док);
					КонецЕсли;
					
					СчетДокументов = СчетДокументов + 1;
					
					//Если СпецификаПользователя = "SD" Тогда
					//	
					//	// запрет загрузки возвратов по 3 и 10 категориям ... пока так) - так, что не ржать!!!
					//	Если НЕ Найти("Категория 3, Категория 10", СокрЛП(Док.ТипЦен)) = 0 Тогда
					//		Док.Запасы.Очистить();
					//		Док.Комментарий = "по данной категории запрещены возвраты !!!! документ очищен.";
					//		ЕстьОшибки = Истина;
					//	КонецЕсли;
					//	
					//КонецЕсли;
					
					Если ЕстьОшибки Тогда
						//Док.ОбменДанными.Загрузка = Истина;
						Док.Записать(РежимЗаписиДокумента.Запись);	
						ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Возврат от покупателя " + Номер + " (Возврат товаров от покупателя " + Док.Номер + ") - возникли ошибки при загрузке: ");
						ОтладочноеСообщение(СтрокаОшибок);
						
						СчетОшибочных = СчетОшибочных + 1;
						
					Иначе	
						//Док.ОбменДанными.Загрузка = Истина;
						Попытка
							Док.Записать(?(НастройкиДокумента.Проводить, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
						Исключение
							ЕстьОшибки = Истина;
							СчетОшибочных = СчетОшибочных + 1;
							ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Возврат от покупателя " + Номер + " (Возврат товаров от покупателя " + Док.Номер + ") - возникли ошибки при загрузке: ");
							ОтладочноеСообщение(ОписаниеОшибки());
							Попытка
								Док.Записать(РежимЗаписиДокумента.Запись);
							Исключение
								ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Возврат от покупателя " + Номер + " (Возврат товаров от покупателя " + Док.Номер + ") - возникли ошибки при загрузке: ");
								ОтладочноеСообщение(ОписаниеОшибки());
							КонецПопытки;
						КонецПопытки;
						
					КонецЕсли;
					
					//Свойства и категории
					Если СпецификаПользователя <> "SD" Тогда
						УстановитьСвойстваИКатегории(тмпДокумент, Док);
					КонецЕсли;
					//Запишем данные в служебный регистр
					НоваяЗаписьДокументыАгентов = РегистрыСведений.БПАГДокументыАгентов.СоздатьМенеджерЗаписи();
					НоваяЗаписьДокументыАгентов.ВидДокумента = Перечисления.БПАГВидыДокументов.ВозвратОтПокупателя;
					
					НоваяЗаписьДокументыАгентов.Период = ТекущаяДата();
					НоваяЗаписьДокументыАгентов.Агент = тмпАгент.Агент;
					НоваяЗаписьДокументыАгентов.Документ = Док.Ссылка;
					Если СпецификаПользователя <> "SD" Тогда
					НоваяЗаписьДокументыАгентов.ТорговаяТочка = ТорговаяТочка;
					КонецЕсли;
					НоваяЗаписьДокументыАгентов.ДатаСозданияНаУстройстве = Дата(ПреобразоватьДатуВФормат24(тмпДокумент.createdDate));
					НоваяЗаписьДокументыАгентов.ДатаИзмененияНаУстройстве = Дата(ПреобразоватьДатуВФормат24(тмпДокумент.modifiedDate));
					
					НоваяЗаписьДокументыАгентов.ИД = тмпДокумент.uniqueID;
					НоваяЗаписьДокументыАгентов.НомерДокументаНаУстройстве = Номер;
					НоваяЗаписьДокументыАгентов.ШиротаСоздания = Число(тмпДокумент.createdLatitude);
					НоваяЗаписьДокументыАгентов.ДолготаСоздания = Число(тмпДокумент.createdLongitude);
					НоваяЗаписьДокументыАгентов.ШиротаИзменения = Число(тмпДокумент.modifiedLatitude);
					НоваяЗаписьДокументыАгентов.ДолготаИзменения = Число(тмпДокумент.modifiedLongitude);
					НоваяЗаписьДокументыАгентов.МоментСозданияПоGPS = ?(тмпДокумент.createdLocationDate = "", 0, Дата(ПреобразоватьДатуВФормат24(тмпДокумент.createdLocationDate)));
					НоваяЗаписьДокументыАгентов.МоментИзмененияПоGPS = ?(тмпДокумент.modifiedLocationDate = "", 0, Дата(ПреобразоватьДатуВФормат24(тмпДокумент.modifiedLocationDate)));
					
					//Последняя проверка на то, что документ не пуст
					Если СокрЛП(НоваяЗаписьДокументыАгентов.Документ) = "" Тогда
						ОтладочноеСообщение("(!!!) Критическая ошибка базы данных. Обнаружена пустая ссылка на документ.");
						#Если Клиент Тогда
							Предупреждение("Критическая ошибка базы данных. Обнаружена пустая ссылка на документ. Обратитесь к системному администратору. Подробности зафиксированы в журнале (каталог logs папки обмена).", 10);
						#КонецЕсли
					Иначе	
						НоваяЗаписьДокументыАгентов.Записать();
					КонецЕсли;
					
				КонецЕсли;				
			КонецЦикла;
		КонецЕсли;
		
		ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Загружено возвратов от покупателей: " + СчетДокументов + "." +?(СчетОшибочных > 0, " Из них с ошибками: " + СчетОшибочных, " Без ошибок."));
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

Процедура ЗагрузитьКоординатыКлиентов(Агенты)
	
	Если Не РольДоступна("ИзменениеКонтрагентов") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого тмпАгент Из Агенты Цикл
		
		ТЗ = ПолучитьТЗИзPlist(тмпАгент.Агент, "posCoords", "Не найдены координаты клиентов для ");
		Если ТЗ = Неопределено Тогда
			Продолжить;
		Иначе
			
			СчетДокументов = 0;
			Для Каждого тмпДокумент Из ТЗ Цикл
				СчетДокументов = СчетДокументов + 1;
				
				Широта = тмпДокумент.latitude;
				Долгота = тмпДокумент.longitude;
				Если СпецификаПользователя = "SD" Тогда
					ТорговаяТочка = Справочники.Контрагенты.НайтиПоКоду(тмпДокумент.posID);
				Иначе	
					ТорговаяТочка = Справочники.БПАГТорговыеТочки.НайтиПоКоду(тмпДокумент.posID);
				КонецЕсли;
				Если НЕ ТорговаяТочка.Пустая() Тогда
					Если СпецификаПользователя = "SD" Тогда
						Если (ТорговаяТочка.ГПСШирота <> Число(Широта)) ИЛИ (ТорговаяТочка.ГПСДолгота <> Число(Долгота)) Тогда
							Объ = ТорговаяТочка.ПолучитьОбъект();
							Объ.ГПСШирота 	= Число(Широта);
							Объ.ГПСДолгота 	= Число(Долгота);
							Если НЕ (Объ.ГПСШирота = 0) И НЕ (Объ.ГПСДолгота = 0) Тогда
								Объ.Записать();
							КонецЕсли;
						КонецЕсли;
					Иначе
						Если (ТорговаяТочка.Широта <> Число(Широта)) ИЛИ (ТорговаяТочка.Долгота <> Число(Долгота)) Тогда
							Объ = ТорговаяТочка.ПолучитьОбъект();
							Объ.Широта = Число(Широта);
							Объ.Долгота = Число(Долгота);
							Объ.Записать();
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//Записать настройку posChangeIndex 
		НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
		ИндексИзменения = Справочники.БПАГВидыНастроекАгентов.НайтиПоКоду("posChangeIndex");
		Если НЕ ИндексИзменения.Пустая() Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Агент", тмпАгент.Агент);
			Отбор.Вставить("Имя", "posChangeIndex");
			ИндексИзменений = ТЗЗаголовок.Скопировать(Отбор);		
			Если ИндексИзменений.Количество()>0 Тогда
				НаборЗаписей.Отбор.Агент.Установить(тмпАгент.Агент.Ссылка);
				НаборЗаписей.Отбор.Профиль.Установить(Справочники.БПАГПрофилиАгентов.ПустаяСсылка());
				НаборЗаписей.Отбор.ВидНастройки.Установить(ИндексИзменения);
				НаборЗаписей.Прочитать();
				НаборЗаписей.Очистить();
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.Агент = тмпАгент.Агент.Ссылка;
				НоваяЗапись.Профиль = Справочники.БПАГПрофилиАгентов.ПустаяСсылка();
				НоваяЗапись.ВидНастройки = ИндексИзменения;
				НоваяЗапись.Значение = ИндексИзменений[0].Значение;
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли;	
		
		ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Загружено координат клиентов: " + СчетДокументов + ".");
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьФото(Агенты, Вариант)
	
	Для Каждого тмпАгент Из Агенты Цикл
		
		Если Вариант = "Организации" Тогда
			СчетДокументов = 0;
			
			ТЗ = ПолучитьТЗИзPlist(тмпАгент.Агент, "companyPictures", "Не найдены фото организаций для ");
			Если ТЗ = Неопределено Тогда
				Продолжить;
			Иначе
				
				ТЗ.Сортировать("sort");
				МассивКартинокДляЗакачки = Новый Массив;
				
				Для Каждого тмпДокумент Из ТЗ Цикл
					ИмяФайла = тмпДокумент.fileName;
					Организация = Справочники.БПАГОрганизации.НайтиПоКоду(тмпДокумент.companyID);
					Если НЕ Организация.Пустая() Тогда
						НайденнаяКартинка = Организация.Картинки.Найти(ИмяФайла, "Имя");
						Если НайденнаяКартинка = Неопределено Тогда
							МассивКартинокДляЗакачки.Добавить(ИмяФайла);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				//Загрузим файлы картинок с FTP
				Если МассивКартинокДляЗакачки.Количество() > 0 Тогда
					Если НастройкаИзКэша("1СИспользоватьВнешнийFTP") Тогда
						Путь = КаталогОбмена + "Images\";
						
						ОтладочноеСообщение("Получение фотографий c FTP началось " + ТекущаяДата());
						Попытка
							Таймаут = Макс(Число(НастройкаИзКэша("1СТаймаутFTP")), 10);
							ФТП = Новый FTPСоединение(АдресВнешнегоFTP, , ЛогинВнешнегоFTP, ПарольВнешнегоFTP, ПроксиСервер, , Таймаут);
							Для Каждого тмпКартинка Из МассивКартинокДляЗакачки Цикл
								ФТП.Получить("Images\" + тмпКартинка,  Путь + тмпКартинка);
								ОтладочноеСообщение("Получено фото с FTP: " + тмпКартинка);
							КонецЦикла;
						Исключение
							ОтладочноеСообщение("Ошибка работы с FTP: Информация для " + тмпАгент.Агент + " не получена:" + ОписаниеОшибки());
							Продолжить;	
						КонецПопытки;
						ОтладочноеСообщение("Получение файлов c FTP завершено " + ТекущаяДата());
					КонецЕсли;
					
					
					Для Каждого тмпДокумент Из ТЗ Цикл
						
						Путь = КаталогОбмена + "Images\";
						
						ИмяФайла = тмпДокумент.fileName;
						Организация = Справочники.БПАГОрганизации.НайтиПоКоду(тмпДокумент.companyID);
						Если НЕ Организация.Пустая() Тогда
							НайденнаяКартинка = Организация.Картинки.Найти(ИмяФайла, "Имя");
							Если НайденнаяКартинка = Неопределено Тогда
								Если НайтиФайлы(Путь + ИмяФайла).Количество() > 0 Тогда
									СчетДокументов = СчетДокументов + 1;
									Объ = Организация.ПолучитьОбъект();
									НоваяКартинка = Объ.Картинки.Добавить();
									НоваяКартинка.Имя = ИмяФайла;
									Объ.Записать();
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;				
				
			КонецЕсли;
			
			//Записать настройку
			НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
			ИндексИзменения = Справочники.БПАГВидыНастроекАгентов.НайтиПоКоду("companyPicturesChangeIndex");
			Если НЕ ИндексИзменения.Пустая() Тогда
				Отбор = Новый Структура();
				Отбор.Вставить("Агент", тмпАгент.Агент);
				Отбор.Вставить("Имя", "companyPicturesChangeIndex");
				ИндексИзменений = ТЗЗаголовок.Скопировать(Отбор);		
				Если ИндексИзменений.Количество()>0 Тогда
					НаборЗаписей.Отбор.Агент.Установить(тмпАгент.Агент.Ссылка);
					НаборЗаписей.Отбор.Профиль.Установить(Справочники.БПАГПрофилиАгентов.ПустаяСсылка());
					НаборЗаписей.Отбор.ВидНастройки.Установить(ИндексИзменения);
					НаборЗаписей.Прочитать();
					НаборЗаписей.Очистить();
					НоваяЗапись = НаборЗаписей.Добавить();
					НоваяЗапись.Агент = тмпАгент.Агент.Ссылка;
					НоваяЗапись.Профиль = Справочники.БПАГПрофилиАгентов.ПустаяСсылка();
					НоваяЗапись.ВидНастройки = ИндексИзменения;
					НоваяЗапись.Значение = ИндексИзменений[0].Значение;
					НаборЗаписей.Записать();
				КонецЕсли;
			КонецЕсли;	
			
			ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Загружено фотографий организаций: " + СчетДокументов + ".");
		КонецЕсли;
		
		Если Вариант = "ТорговыеТочки" Тогда
			СчетДокументов = 0;
			
			ТЗ = ПолучитьТЗИзPlist(тмпАгент.Агент, "posPictures", "Не найдены фото торговых точек для ");
			Если ТЗ = Неопределено Тогда
				Продолжить;
			Иначе
				
				ТЗ.Сортировать("sort");
				МассивКартинокДляЗакачки = Новый Массив;
				
				Для Каждого тмпДокумент Из ТЗ Цикл
					ИмяФайла = тмпДокумент.fileName;
					ТорговаяТочка = Справочники.БПАГТорговыеТочки.НайтиПоКоду(тмпДокумент.posID);
					Если НЕ ТорговаяТочка.Пустая() Тогда
						НайденнаяКартинка = ТорговаяТочка.Картинки.Найти(ИмяФайла, "Имя");
						Если НайденнаяКартинка = Неопределено Тогда
							МассивКартинокДляЗакачки.Добавить(ИмяФайла);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				//Загрузим файлы картинок с FTP
				Если МассивКартинокДляЗакачки.Количество() > 0 Тогда
					Если НастройкаИзКэша("1СИспользоватьВнешнийFTP") Тогда
						Путь = КаталогОбмена + "Images\";
						
						ОтладочноеСообщение("Получение фотографий c FTP началось " + ТекущаяДата());
						Попытка
							Таймаут = Макс(Число(НастройкаИзКэша("1СТаймаутFTP")), 10);
							ФТП = Новый FTPСоединение(АдресВнешнегоFTP, , ЛогинВнешнегоFTP, ПарольВнешнегоFTP, ПроксиСервер, , Таймаут);
							Для Каждого тмпКартинка Из МассивКартинокДляЗакачки Цикл
								ФТП.Получить("Images\" + тмпКартинка,  Путь + тмпКартинка);
								ОтладочноеСообщение("Получено фото с FTP: " + тмпКартинка);
							КонецЦикла;
						Исключение
							ОтладочноеСообщение("Ошибка работы с FTP: Информация для " + тмпАгент.Агент + " не получена:" + ОписаниеОшибки());
							Продолжить;	
						КонецПопытки;
						ОтладочноеСообщение("Получение файлов c FTP завершено " + ТекущаяДата());
					КонецЕсли;
					
					
					Для Каждого тмпДокумент Из ТЗ Цикл
						
						Путь = КаталогОбмена + "Images\";
						
						ИмяФайла = тмпДокумент.fileName;
						ТорговаяТочка = Справочники.БПАГТорговыеТочки.НайтиПоКоду(тмпДокумент.posID);
						Если НЕ ТорговаяТочка.Пустая() Тогда
							НайденнаяКартинка = ТорговаяТочка.Картинки.Найти(ИмяФайла, "Имя");
							Если НайденнаяКартинка = Неопределено Тогда
								Если НайтиФайлы(Путь + ИмяФайла).Количество() > 0 Тогда
									СчетДокументов = СчетДокументов + 1;
									Объ = ТорговаяТочка.ПолучитьОбъект();
									НоваяКартинка = Объ.Картинки.Добавить();
									НоваяКартинка.Имя = ИмяФайла;
									Объ.Записать();
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;				
				
			КонецЕсли;
			//Сохранить настройку
			НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
			ИндексИзменения = Справочники.БПАГВидыНастроекАгентов.НайтиПоКоду("posPicturesChangeIndex");
			Если НЕ ИндексИзменения.Пустая() Тогда
				Отбор = Новый Структура();
				Отбор.Вставить("Агент", тмпАгент.Агент);
				Отбор.Вставить("Имя", "posPicturesChangeIndex");
				ИндексИзменений = ТЗЗаголовок.Скопировать(Отбор);		
				Если ИндексИзменений.Количество()>0 Тогда
					НаборЗаписей.Отбор.Агент.Установить(тмпАгент.Агент.Ссылка);
					НаборЗаписей.Отбор.Профиль.Установить(Справочники.БПАГПрофилиАгентов.ПустаяСсылка());
					НаборЗаписей.Отбор.ВидНастройки.Установить(ИндексИзменения);
					НаборЗаписей.Прочитать();
					НаборЗаписей.Очистить();
					НоваяЗапись = НаборЗаписей.Добавить();
					НоваяЗапись.Агент = тмпАгент.Агент.Ссылка;
					НоваяЗапись.Профиль = Справочники.БПАГПрофилиАгентов.ПустаяСсылка();
					НоваяЗапись.ВидНастройки = ИндексИзменения;
					НоваяЗапись.Значение = ИндексИзменений[0].Значение;
					НаборЗаписей.Записать();
				КонецЕсли;
			КонецЕсли;	
			
			ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Загружено фотографий торговых точек: " + СчетДокументов + ".");
		КонецЕсли;
		
		Если Вариант = "Товары" Тогда
			СчетДокументов = 0;
			
			ТЗ = ПолучитьТЗИзPlist(тмпАгент.Агент, "goodPictures", "Не найдены фото товаров для ");
			Если ТЗ = Неопределено Тогда
				Продолжить;
			Иначе
				
				ТЗ.Сортировать("sort");
				МассивКартинокДляЗакачки = Новый Массив;
				
				Для Каждого тмпДокумент Из ТЗ Цикл
					ИмяФайла = тмпДокумент.fileName;
					Товар = Справочники.БПАГНоменклатура.НайтиПоКоду(тмпДокумент.goodID);
					Если НЕ Товар.Пустая() Тогда
						НайденнаяКартинка = Товар.Картинки.Найти(ИмяФайла, "Имя");
						Если НайденнаяКартинка = Неопределено Тогда
							МассивКартинокДляЗакачки.Добавить(ИмяФайла);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				//Загрузим файлы картинок с FTP
				Если МассивКартинокДляЗакачки.Количество() > 0 Тогда
					Если НастройкаИзКэша("1СИспользоватьВнешнийFTP") Тогда
						Путь = КаталогОбмена + "Images\";
						
						ОтладочноеСообщение("Получение фотографий c FTP началось " + ТекущаяДата());
						Попытка
							Таймаут = Макс(Число(НастройкаИзКэша("1СТаймаутFTP")), 10);
							ФТП = Новый FTPСоединение(АдресВнешнегоFTP, , ЛогинВнешнегоFTP, ПарольВнешнегоFTP, ПроксиСервер, , Таймаут);
							Для Каждого тмпКартинка Из МассивКартинокДляЗакачки Цикл
								ФТП.Получить("Images\" + тмпКартинка,  Путь + тмпКартинка);
								ОтладочноеСообщение("Получено фото с FTP: " + тмпКартинка);
							КонецЦикла;
						Исключение
							ОтладочноеСообщение("Ошибка работы с FTP: Информация для " + тмпАгент.Агент + " не получена:" + ОписаниеОшибки());
							Продолжить;	
						КонецПопытки;
						ОтладочноеСообщение("Получение файлов c FTP завершено " + ТекущаяДата());
					КонецЕсли;
					
					
					Для Каждого тмпДокумент Из ТЗ Цикл
						
						Путь = КаталогОбмена + "Images\";
						
						ИмяФайла = тмпДокумент.fileName;
						Товар = Справочники.БПАГНоменклатура.НайтиПоКоду(тмпДокумент.goodID);
						Если НЕ Товар.Пустая() Тогда
							НайденнаяКартинка = Товар.Картинки.Найти(ИмяФайла, "Имя");
							Если НайденнаяКартинка = Неопределено Тогда
								Если НайтиФайлы(Путь + ИмяФайла).Количество() > 0 Тогда
									СчетДокументов = СчетДокументов + 1;
									Объ = Товар.ПолучитьОбъект();
									НоваяКартинка = Объ.Картинки.Добавить();
									НоваяКартинка.Имя = ИмяФайла;
									Объ.Записать();
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;				
				
			КонецЕсли;
			
			//Сохранить настройку
			НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
			ИндексИзменения = Справочники.БПАГВидыНастроекАгентов.НайтиПоКоду("goodPicturesChangeIndex");
			Если НЕ ИндексИзменения.Пустая() Тогда
				Отбор = Новый Структура();
				Отбор.Вставить("Агент", тмпАгент.Агент);
				Отбор.Вставить("Имя", "goodPicturesChangeIndex");
				ИндексИзменений = ТЗЗаголовок.Скопировать(Отбор);		
				Если ИндексИзменений.Количество()>0 Тогда
					НаборЗаписей.Отбор.Агент.Установить(тмпАгент.Агент.Ссылка);
					НаборЗаписей.Отбор.Профиль.Установить(Справочники.БПАГПрофилиАгентов.ПустаяСсылка());
					НаборЗаписей.Отбор.ВидНастройки.Установить(ИндексИзменения);
					НаборЗаписей.Прочитать();
					НаборЗаписей.Очистить();
					НоваяЗапись = НаборЗаписей.Добавить();
					НоваяЗапись.Агент = тмпАгент.Агент.Ссылка;
					НоваяЗапись.Профиль = Справочники.БПАГПрофилиАгентов.ПустаяСсылка();
					НоваяЗапись.ВидНастройки = ИндексИзменения;
					НоваяЗапись.Значение = ИндексИзменений[0].Значение;
					НаборЗаписей.Записать();
				КонецЕсли;
			КонецЕсли;	
			
			ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Загружено фотографий товаров: " + СчетДокументов + ".");
		КонецЕсли;
		
		Если Вариант = "Анкеты" Тогда
			СчетДокументов = 0;
			
			ТЗ = ПолучитьТЗИзPlist(тмпАгент.Агент, "questionnairePictures", "Не найдены фото анкет для ");
			Если ТЗ = Неопределено Тогда
				Продолжить;
			Иначе
				
				//ТЗ.Сортировать("sort");
				МассивКартинокДляЗакачки = Новый Массив;
				
				Для Каждого тмпДокумент Из ТЗ Цикл
					Анкета = Документы.БПАГАнкета.НайтиПоРеквизиту("ИД", тмпДокумент.questionnaireID);
					Если НЕ Анкета.Пустая() Тогда
						Для Каждого тмпСтрока Из тмпДокумент.pictures Цикл
							НайденнаяКартинка = Анкета.Картинки.Найти(тмпСтрока.fileName, "Имя");
							Если НайденнаяКартинка = Неопределено Тогда
								МассивКартинокДляЗакачки.Добавить(тмпСтрока.fileName);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
				//Загрузим файлы картинок с FTP
				Если МассивКартинокДляЗакачки.Количество() > 0 Тогда
					Если НастройкаИзКэша("1СИспользоватьВнешнийFTP") Тогда
						Путь = КаталогОбмена + СокрЛП(тмпАгент.Код) + "\Images\";
						
						ОтладочноеСообщение("Получение фотографий c FTP началось " + ТекущаяДата());
						Попытка
							Таймаут = Макс(Число(НастройкаИзКэша("1СТаймаутFTP")), 10);
							ФТП = Новый FTPСоединение(АдресВнешнегоFTP, , ЛогинВнешнегоFTP, ПарольВнешнегоFTP, ПроксиСервер, , Таймаут);
						Исключение
							ОтладочноеСообщение("Ошибка работы с FTP: Информация для " + тмпАгент.Агент + " не получена:" + ОписаниеОшибки());
							Продолжить;	
						КонецПопытки;
						
						Для Каждого тмпКартинка Из МассивКартинокДляЗакачки Цикл
							Попытка
								ФТП.Получить(СокрЛП(тмпАгент.Код) + "\Images\" + тмпКартинка,  Путь + тмпКартинка);
								ОтладочноеСообщение("Получено фото с FTP: " + тмпКартинка);
							Исключение
								ОтладочноеСообщение("Ошибка работы с FTP: Информация для " + тмпАгент.Агент + " не получена:" + ОписаниеОшибки());
								Продолжить;	
							КонецПопытки;
						КонецЦикла;
						ОтладочноеСообщение("Получение файлов c FTP завершено " + ТекущаяДата());
					КонецЕсли;
					
					Для Каждого тмпДокумент Из ТЗ Цикл
						
						Путь = КаталогОбмена + СокрЛП(тмпАгент.Код) + "\Images\";
						
						Анкета = Документы.БПАГАнкета.НайтиПоРеквизиту("ИД", тмпДокумент.questionnaireID);
						Если НЕ Анкета.Пустая() Тогда
							Для Каждого тмпСтрока Из тмпДокумент.pictures Цикл
								НайденнаяКартинка = Анкета.Картинки.Найти(тмпСтрока.fileName, "Имя");
								Если НайденнаяКартинка = Неопределено Тогда
									Если НайтиФайлы(Путь + тмпСтрока.fileName).Количество() > 0 Тогда
										СчетДокументов = СчетДокументов + 1;
										Объ = Анкета.ПолучитьОбъект();
										НоваяКартинка = Объ.Картинки.Добавить();
										НоваяКартинка.Имя = тмпСтрока.fileName;
										НоваяКартинка.Вопрос = Справочники.БПАГВопросыАнкет.НайтиПоКоду(тмпСтрока.questionID, , , Анкета.ВидАнкеты);
										НоваяКартинка.Порядок = тмпСтрока.sort;
										Объ.Картинки.Сортировать("Порядок");
										Объ.Записать();
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;				
				
			КонецЕсли;
			
			ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Загружено фотографий анкет: " + СчетДокументов + ".");
		КонецЕсли;
		
		Если Вариант = "Агентов" Тогда
			СчетДокументов = 0;
			
			ТЗ = ПолучитьТЗИзPlist(тмпАгент.Агент, "agentPictures", "Не найдены фото агента для ");
			Если ТЗ = Неопределено Тогда
				Продолжить;
			Иначе
				
				ТЗ.Сортировать("sort");
				МассивКартинокДляЗакачки = Новый Массив;
				
				Для Каждого тмпДокумент Из ТЗ Цикл
					ИмяФайла = тмпДокумент.fileName;
					Агент = Справочники.БПАГАгенты.НайтиПоКоду(тмпАгент.Код);
					Если НЕ Агент.Пустая() Тогда
						НайденнаяКартинка = Агент.Картинки.Найти(ИмяФайла, "Имя");
						Если НайденнаяКартинка = Неопределено Тогда
							МассивКартинокДляЗакачки.Добавить(ИмяФайла);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				//Загрузим файлы картинок с FTP
				Если МассивКартинокДляЗакачки.Количество() > 0 Тогда
					Если НастройкаИзКэша("1СИспользоватьВнешнийFTP") Тогда
						Путь = КаталогОбмена + "Images\";
						
						ОтладочноеСообщение("Получение фотографий c FTP началось " + ТекущаяДата());
						Попытка
							Таймаут = Макс(Число(НастройкаИзКэша("1СТаймаутFTP")), 10);
							ФТП = Новый FTPСоединение(АдресВнешнегоFTP, , ЛогинВнешнегоFTP, ПарольВнешнегоFTP, ПроксиСервер, , Таймаут);
							Для Каждого тмпКартинка Из МассивКартинокДляЗакачки Цикл
								ФТП.Получить("Images\" + тмпКартинка,  Путь + тмпКартинка);
								ОтладочноеСообщение("Получено фото с FTP: " + тмпКартинка);
							КонецЦикла;
						Исключение
							ОтладочноеСообщение("Ошибка работы с FTP: Информация для " + тмпАгент.Агент + " не получена:" + ОписаниеОшибки());
							Продолжить;	
						КонецПопытки;
						ОтладочноеСообщение("Получение файлов c FTP завершено " + ТекущаяДата());
					КонецЕсли;
					
					
					Для Каждого тмпДокумент Из ТЗ Цикл
						
						Путь = КаталогОбмена + "Images\";
						
						ИмяФайла = тмпДокумент.fileName;
						Агент = Справочники.БПАГАгенты.НайтиПоКоду(тмпАгент.Код);
						Если НЕ Агент.Пустая() Тогда
							НайденнаяКартинка = Агент.Картинки.Найти(ИмяФайла, "Имя");
							Если НайденнаяКартинка = Неопределено Тогда
								Если НайтиФайлы(Путь + ИмяФайла).Количество() > 0 Тогда
									СчетДокументов = СчетДокументов + 1;
									Объ = Агент.ПолучитьОбъект();
									НоваяКартинка = Объ.Картинки.Добавить();
									НоваяКартинка.Имя = ИмяФайла;
									Объ.Записать();
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;				
				
			КонецЕсли;
			
			//Записать настройку
			НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
			ИндексИзменения = Справочники.БПАГВидыНастроекАгентов.НайтиПоКоду("agentPicturesChangeIndex ");
			Если НЕ ИндексИзменения.Пустая() Тогда
				Отбор = Новый Структура();
				Отбор.Вставить("Агент", тмпАгент.Агент);
				Отбор.Вставить("Имя", "agentPicturesChangeIndex ");
				ИндексИзменений = ТЗЗаголовок.Скопировать(Отбор);		
				Если ИндексИзменений.Количество()>0 Тогда
					НаборЗаписей.Отбор.Агент.Установить(тмпАгент.Агент.Ссылка);
					НаборЗаписей.Отбор.Профиль.Установить(Справочники.БПАГПрофилиАгентов.ПустаяСсылка());
					НаборЗаписей.Отбор.ВидНастройки.Установить(ИндексИзменения);
					НаборЗаписей.Прочитать();
					НаборЗаписей.Очистить();
					НоваяЗапись = НаборЗаписей.Добавить();
					НоваяЗапись.Агент = тмпАгент.Агент.Ссылка;
					НоваяЗапись.Профиль = Справочники.БПАГПрофилиАгентов.ПустаяСсылка();
					НоваяЗапись.ВидНастройки = ИндексИзменения;
					НоваяЗапись.Значение = ИндексИзменений[0].Значение;
					НаборЗаписей.Записать();
				КонецЕсли;
			КонецЕсли;	
			
			ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Загружено фотографий агента: " + СчетДокументов + ".");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьЖурналРаботы(Агенты) Экспорт
	
	ВидНастройкиПоследнегоIDЛога = Справочники.БПАГВидыНастроекАгентов.НайтиПоКоду("processedLogID");
		
	Для Каждого тмпАгент Из Агенты Цикл
		
		Если (Не НастройкаИзКэша("logSyncMode", тмпАгент.Агент)) И (Не НастройкаИзКэша("allowBackgroundGPSTracking", тмпАгент.Агент)) Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверка каталога лога
		ПутьКаталогаЛогаАгента = КаталогОбмена + СокрЛП(тмпАгент.Код) + "\Logs\";
		Файл = Новый Файл(ПутьКаталогаЛогаАгента);
		Если НЕ Файл.Существует() Тогда
			Попытка
				СоздатьКаталог(ПутьКаталогаЛогаАгента);
				ОтладочноеСообщение("Создан новый каталог журнала: " + ПутьКаталогаЛогаАгента);
			Исключение
				ОтладочноеСообщение("Каталог журнала не создан: " + ОписаниеОшибки());
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		
		//Чтение нового лога, полученного стандартным обменом
		ТЗ = ПолучитьТЗЛога(тмпАгент.Агент, "log");
		тмпПоследнийIDЛога = 0;
		Если ТЗ <> Неопределено Тогда
			Если ТЗ.Количество() > 0 Тогда
				ТЗ.Колонки.Добавить("ЧислоID");
				Для Каждого СтрокаТЗ Из ТЗ Цикл
					СтрокаТЗ.ЧислоID = Число(СтрокаТЗ.uniqueID);
				КонецЦикла;
				
				ТЗ.Сортировать("ЧислоID");
				тмпПоследнийIDЛога = Макс(тмпПоследнийIDЛога, ТЗ[ТЗ.Количество() - 1].ЧислоID);
				ТЗ.Колонки.Удалить("ЧислоID");
			КонецЕсли;
		КонецЕсли;
		
		ПарольАрхива = СокрЛП(НастройкаИзКэша("1СПарольАрхивов"));
		//Чтение автоматических логов постоянного слежения
		ФайлыАвтоматическихЛогов = НайтиФайлы(ПутьКаталогаЛогаАгента, "*.zip");
		Для Каждого тмпФайл Из ФайлыАвтоматическихЛогов Цикл
			
			Попытка
				Распаковщик = Новый ЧтениеZipФайла(тмпФайл.ПолноеИмя, ПарольАрхива);
				Распаковщик.ИзвлечьВсе(ПутьКаталогаЛогаАгента);
			Исключение
				УдалитьФайлы(тмпФайл.ПолноеИмя);
				Продолжить;
			КонецПопытки;
			УдалитьФайлы(тмпФайл.ПолноеИмя);
			
			Если ТЗ = Неопределено Тогда
				ТЗ = ПолучитьТЗЛога(тмпАгент.Агент, "log", "Logs");
			Иначе
				ВремТЗ = ПолучитьТЗЛога(тмпАгент.Агент, "log", "Logs");
				Если ВремТЗ <> Неопределено Тогда
					Для Каждого СтрокаТЗ Из ВремТЗ Цикл
						НоваяСтрока = ТЗ.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		Попытка
			УдалитьФайлы(ПутьКаталогаЛогаАгента + "log.plist");
		Исключение
		КонецПопытки;
		
		Если ТЗ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТЗ.Количество() = 0 Тогда
			Продолжить;	
		КонецЕсли;
		
		ТЗ.Сортировать("date");
		НачальнаяДатаЛога = ТЗ[0].date;
		КонечнаяДатаЛога = ТЗ[ТЗ.Количество() - 1].date;
		Если НачальнаяДатаЛога > КонечнаяДатаЛога Тогда
			ОтладочноеСообщение("Ошибка чтения даты журнала " + ТекущаяДата());
			Продолжить;
		КонецЕсли;
		
		// Чтение формализованных логов в общую ТЗ
		СписокФайловЛога = ПолучитьМассивФайловЛога(НачальнаяДатаЛога, КонечнаяДатаЛога, тмпАгент.Код);
		Для Каждого ФайлЛога Из СписокФайловЛога Цикл	
			ИмяФайлаИсточника = КаталогОбмена + СокрЛП(тмпАгент.Код) + "\Logs\" + ФайлЛога.Представление + ".plist";
			ФайлЗагрузки = Новый Файл(ИмяФайлаИсточника);
			Если ФайлЗагрузки.Существует() Тогда
				//ВремТЗ = Новый ТаблицаЗначений();
				ВремТЗ = ПолучитьТЗЛога(тмпАгент.Агент, ФайлЛога, "Logs");
				Если ВремТЗ <> Неопределено Тогда
					Для Каждого СтрокаТЗ Из ВремТЗ Цикл
						НоваяСтрока = ТЗ.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Свертка таблицы
		СтрокаСвертки = "";
		Для Каждого КолонкаТЗ Из ТЗ.Колонки Цикл
			СтрокаСвертки = СтрокаСвертки + КолонкаТЗ.Имя + ",";
		КонецЦикла;
		СтрокаСвертки = Лев(СтрокаСвертки, СтрДлина(СтрокаСвертки) - 1);
		ТЗ.Свернуть(СтрокаСвертки);
		ТЗ.Колонки.Добавить("ЧислоID");
		
		// Запись логов в каталог агента
		Для Каждого ФайлЛога Из СписокФайловЛога Цикл
			Текст = Новый ТекстовыйДокумент;
			ТекСтрока = "<?xml version=""1.0"" encoding=""UTF-8""?>
			|<!DOCTYPE plist PUBLIC ""-//Apple//DTD PLIST 1.0//EN"" ""http://www.apple.com/DTDs/PropertyList-1.0.dtd"">
			|<plist version=""1.0"">
			|<array>";
			
			Текст.ДобавитьСтроку(ТекСтрока);
			
			Отбор = Новый Структура;
			Отбор.Вставить("day", ФайлЛога.Значение);
			НайденныеСтроки = ТЗ.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого СтрокаТЗ Из ТЗ Цикл
				СтрокаТЗ.ЧислоID = Число(СтрокаТЗ.uniqueID);
			КонецЦикла;
			
			ТЗ.Сортировать("ЧислоID");
			Для Каждого СтрокаТЗ Из НайденныеСтроки Цикл
				Текст.ДобавитьСтроку(Символы.Таб + "<dict>");
				Для Каждого КолонкаТЗ Из ТЗ.Колонки Цикл
					Если КолонкаТЗ.Имя = "day" Тогда
						Продолжить;
					КонецЕсли;
					
					Если КолонкаТЗ.Имя = "data" Тогда
						Если НЕ СокрЛП(СтрокаТЗ.data) = "" Тогда
							Текст.ДобавитьСтроку(Символы.Таб + Символы.Таб + "<key>data</key>");
							Текст.ДобавитьСтроку(Символы.Таб + Символы.Таб + Символы.Таб + "<dict>");
							Для Каждого СтрокаData Из СтрокаТЗ.data Цикл
								Текст.ДобавитьСтроку(Символы.Таб + Символы.Таб + Символы.Таб + Символы.Таб + "<key>" + СтрокаData.Ключ + "</key>");
								Текст.ДобавитьСтроку(Символы.Таб + Символы.Таб + Символы.Таб + Символы.Таб + "<string>" + СтрокаData.Значение + "</string>")
							КонецЦикла;
							Текст.ДобавитьСтроку(Символы.Таб + Символы.Таб + Символы.Таб + "</dict>");
						КонецЕсли;
						
					ИначеЕсли КолонкаТЗ.Имя = "ЧислоID" Тогда
						
					Иначе
						Текст.ДобавитьСтроку(Символы.Таб + Символы.Таб + "<key>" + КолонкаТЗ.Имя + "</key>");
						Текст.ДобавитьСтроку(Символы.Таб + Символы.Таб + "<string>" + СтрокаТЗ[КолонкаТЗ.Имя] + "</string>");
					КонецЕсли;
				КонецЦикла;
				Текст.ДобавитьСтроку(Символы.Таб + "</dict>");
			КонецЦикла;
			
			Текст.ДобавитьСтроку("</array>");
			Текст.ДобавитьСтроку("</plist>");
			Текст.Записать(КаталогОбмена + СокрЛП(тмпАгент.Код) + "\Logs\" + ФайлЛога.Представление + ".plist", КодировкаТекста.UTF8);
		КонецЦикла;
		
		// Устанавливаем максимальный ID лога
		НаборЗаписей = РегистрыСведений.БПАГНастройкиАгентов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидНастройки.Установить(ВидНастройкиПоследнегоIDЛога);
		НаборЗаписей.Отбор.Агент.Установить(тмпАгент.Агент);
		НаборЗаписей.Прочитать();
		НужноЗаписать = Ложь;
		Если НаборЗаписей.Количество() = 0 Тогда
			НужноЗаписать = Истина;
			НоваяСтрока = НаборЗаписей.Добавить();
			НоваяСтрока.Агент = тмпАгент.Агент;
			НоваяСтрока.ВидНастройки = ВидНастройкиПоследнегоIDЛога;
			НоваяСтрока.Значение = тмпПоследнийIDЛога;
		Иначе
			Если НаборЗаписей[0].Значение = "" Тогда
				НаборЗаписей[0].Значение = тмпПоследнийIDЛога;
				НужноЗаписать = Истина;
			ИначеЕсли НаборЗаписей[0].Значение < тмпПоследнийIDЛога Тогда
				НаборЗаписей[0].Значение = тмпПоследнийIDЛога;
				НужноЗаписать = Истина;
			КонецЕсли;
		КонецЕсли;
		Если НужноЗаписать Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьПоступления(Агенты)
	
	ВидПрикладногоРешения = БПАГ.ПолучитьВидПрикладногоРешения();
	ИспользоватьХарактеристики = НастройкаИзКэша("1СИспользоватьХарактеристикиТоваров");
	
	НастройкиДокумента = ПолучитьНастройкиДокумента(Перечисления.БПАГВидыДокументов.Поступление, ТекущаяДата());
	Если НастройкиДокумента = Неопределено Тогда
		ОтладочноеСообщение("Не заданы настройки для документа ""Поступления""! Загрузка остановлена. Задайте настройки и повторите загрузку.");
		Возврат;
	КонецЕсли;
	
	Если ВидПрикладногоРешения = "УТ10" Тогда
		ВидНоменклатурыТара = НастройкаИзКэша("1СВидНоменклатурыТара");
	КонецЕсли;
	
	Для Каждого тмпАгент Из Агенты Цикл
		
		ТЗ = ПолучитьТЗИзPlist(тмпАгент.Агент, "receipts", "Не найдены поступления для ");
		Если ТЗ = Неопределено Тогда
			Продолжить;
		Иначе
			
			СчетДокументов = 0;
			СчетОшибочных = 0;
			Для Каждого тмпДокумент Из ТЗ Цикл
				
				//Глобальное изменение формата - игнорируем старые документы для совместимости
				ДатаПоследнегоИзменения = Дата(тмпДокумент.date);
				Если ДатаПоследнегоИзменения < Дата(2013, 1, 15) Тогда
					Продолжить;
				КонецЕсли;
				//End Глобальное изменение формата - игнорируем старые документы для совместимости
				
				ЕстьОшибки = Ложь;
				СтрокаОшибок = "";
				
				Если ТЗ.Колонки.Найти("rowCount") <> Неопределено Тогда
					Если Число(тмпДокумент.rowCount) = 0 Тогда
						ЕстьОшибки = Истина;
						ОтладочноеСообщение("Поступление (номер на устройстве: " + тмпДокумент.number + ") пуста (не заполнена табличная часть). Документ проигнорирован!");
						СчетОшибочных = СчетОшибочных + 1;
						Продолжить;
					КонецЕсли;
				Иначе
					ЕстьОшибки = Истина;
					ОтладочноеСообщение("Поступление (номер на устройстве: " + тмпДокумент.number + ") выгружена без табличной части. Документ проигнорирован!");
					СчетОшибочных = СчетОшибочных + 1;
					Продолжить;
				КонецЕсли;
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	БПАГДокументыАгентовСрезПоследних.Документ КАК Ссылка
				|ИЗ
				|	РегистрСведений.БПАГДокументыАгентов.СрезПоследних(, ИД = &ИД) КАК БПАГДокументыАгентовСрезПоследних
				|ГДЕ
				|	БПАГДокументыАгентовСрезПоследних.ВидДокумента = &ВидДокумента";
				
				Запрос.УстановитьПараметр("ИД", тмпДокумент.uniqueID);
				Запрос.УстановитьПараметр("ВидДокумента", Перечисления.БПАГВидыДокументов.Поступление);
				
				ТребуетсяСоздатьИлиИзменитьДокумент = Истина;
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Попытка
						Если Выборка.Ссылка.Пустая() Тогда
							Продолжить;
						ИначеЕсли Выборка.Ссылка.Проведен Тогда
							Если НастройкиДокумента.Перепроводить Тогда
								Док = Выборка.Ссылка.ПолучитьОбъект();	
							Иначе
								ТребуетсяСоздатьИлиИзменитьДокумент = Ложь;	
								ЕстьОшибки = Истина;
								ОтладочноеСообщение("Документ " + Выборка.Ссылка + " (номер на устройстве: " + тмпДокумент.number + ") уже проведен! Перепроведение отключено в настройках.");
								СчетОшибочных = СчетОшибочных + 1;
							КонецЕсли;
						ИначеЕсли Выборка.Ссылка.ПометкаУдаления Тогда
							ТребуетсяСоздатьИлиИзменитьДокумент = Ложь;	
							ЕстьОшибки = Истина;
							ОтладочноеСообщение("Документ " + Выборка.Ссылка + " (номер на устройстве: " + тмпДокумент.number + ") был помечен на удаление в центральной базе! Документ не загружен.");
							СчетОшибочных = СчетОшибочных + 1;
						Иначе
							//Документ уже загружен, но не проведен
							Если НастройкиДокумента.ПерезаписыватьНепроведенные Тогда
								Док = Выборка.Ссылка.ПолучитьОбъект();
								ТребуетсяСоздатьИлиИзменитьДокумент = Истина;	
							Иначе
								ТребуетсяСоздатьИлиИзменитьДокумент = Ложь;	
								ЕстьОшибки = Истина;
								ОтладочноеСообщение("Документ " + Выборка.Ссылка + " (номер на устройстве: " + тмпДокумент.number + ") уже был загружен! Перезапись непроведенных документов отключена в настройках.");
								СчетОшибочных = СчетОшибочных + 1;
							КонецЕсли;	
						КонецЕсли;
					Исключение
						Продолжить;
					КонецПопытки;
				Иначе
					Если ВидПрикладногоРешения = "УНФ" Тогда
						//Посмотреть как в УНФ называется
						//Док = Документы.РасходнаяНакладная.СоздатьДокумент();	
					Иначе
						Док = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();	
					КонецЕсли;
				КонецЕсли;
				
				//Если документ изначально создавался в 1С
				ДокументБылСозданВ1С = Ложь;
				Если Не ЕстьОшибки Тогда
					Если тмпДокумент.uniqueID = СокрЛП(Док.Ссылка.УникальныйИдентификатор()) Тогда
						ДокументБылСозданВ1С = Истина;
						ТребуетсяСоздатьИлиИзменитьДокумент = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если ТребуетсяСоздатьИлиИзменитьДокумент Или ДокументБылСозданВ1С Тогда
					
					Если ТребуетсяСоздатьИлиИзменитьДокумент Тогда
						//Организация
						тмпКод = тмпДокумент.companyID;
						БПАГОрганизация = Справочники.БПАГОрганизации.НайтиПоКоду(тмпКод);
						Если БПАГОрганизация.Пустая() Тогда
							ЕстьОшибки = Истина;
							СтрокаОшибок = СтрокаОшибок + "Организация с кодом " + тмпКод + " не найдена! " + Символы.ПС;
							Организация = Справочники.Организации.ПустаяСсылка();
						Иначе
							Организация = БПАГОрганизация.Организация;
						КонецЕсли;
						
						//Контрагент или партнер
						Если ВидПрикладногоРешения = "УТ11" Тогда
							тмпКод = тмпДокумент.clientID;
							БПАГКонтрагент = Справочники.БПАГКонтрагенты.НайтиПоКоду(тмпКод);
							Если БПАГКонтрагент.Пустая() Тогда
								ЕстьОшибки = Истина;
								СтрокаОшибок = СтрокаОшибок + "Партнер с кодом " + тмпКод + " не найден! " + Символы.ПС;
								Партнер = Справочники.Партнеры.ПустаяСсылка();
							Иначе
								Партнер = БПАГКонтрагент.Партнер;
							КонецЕсли;
						Иначе
							тмпКод = тмпДокумент.clientID;
							БПАГКонтрагент = Справочники.БПАГКонтрагенты.НайтиПоКоду(тмпКод);
							Если БПАГКонтрагент.Пустая() Тогда
								ЕстьОшибки = Истина;
								СтрокаОшибок = СтрокаОшибок + "Контрагент с кодом " + тмпКод + " не найден! " + Символы.ПС;
								Контрагент = Справочники.Контрагенты.ПустаяСсылка();
							Иначе
								Контрагент = БПАГКонтрагент.Контрагент;
							КонецЕсли;
						КонецЕсли;
						
						//Склад
						тмпКод = тмпДокумент.depotID;
						БПАГСклад = Справочники.БПАГСклады.НайтиПоКоду(тмпКод);
						Если БПАГСклад.Пустая() Тогда
							ЕстьОшибки = Истина;
							СтрокаОшибок = СтрокаОшибок + "Склад с кодом " + тмпКод + " не найден! " + Символы.ПС;
							Если ВидПрикладногоРешения = "УНФ" Тогда
								Склад = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
							Иначе
								Склад = Справочники.Склады.ПустаяСсылка();
							КонецЕсли;
						Иначе
							Склад = БПАГСклад.Склад;
						КонецЕсли;
						
						//Договор или соглашение
						Если ВидПрикладногоРешения = "УТ11" Тогда
							тмпНаименованиеСоглашения = тмпДокумент.analyticsID;//Сред(тмпДокумент.analyticsID, СтрДлина(БПАГКонтрагент.Код) + 1);
							Соглашение = ПолучитьСоглашениеСПоставщиком(тмпНаименованиеСоглашения, Партнер);
							Если Соглашение.Пустая() Тогда
								ЕстьОшибки = Истина;
								СтрокаОшибок = СтрокаОшибок + "Соглашение с наименованием " + тмпНаименованиеСоглашения + " не найдено! " + Символы.ПС;
							КонецЕсли
						Иначе
							тмпКод = тмпДокумент.analyticsID;
							Договор = Справочники.ДоговорыКонтрагентов.НайтиПоКоду(тмпКод);
							Если Договор.Пустая() Тогда
								ЕстьОшибки = Истина;
								СтрокаОшибок = СтрокаОшибок + "Договор с кодом " + тмпКод + " не найден! " + Символы.ПС;
							КонецЕсли;	
						КонецЕсли;
						
						//Тип цен
						тмпКод = тмпДокумент.priceTypeID;
						БПАГПрайс = Справочники.БПАГПрайсы.НайтиПоКоду(тмпКод);
						Если БПАГПрайс.Пустая() Тогда
							ЕстьОшибки = Истина;
							СтрокаОшибок = СтрокаОшибок + "Прайс с кодом " + тмпКод + " не найден! " + Символы.ПС;
							Если (ВидПрикладногоРешения = "УТ11") ИЛИ (ВидПрикладногоРешения = "УНФ") Тогда
								ТипЦен = Справочники.ВидыЦен.ПустаяСсылка();
							Иначе
								ТипЦен = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
							КонецЕсли;
						Иначе
							ТипЦен = БПАГПрайс.ТипЦен;
						КонецЕсли;
						
						//Торговая точка
						тмпКод = тмпДокумент.posID;
						ТорговаяТочка = Справочники.БПАГТорговыеТочки.НайтиПоКоду(тмпКод);
						Если ТорговаяТочка.Пустая() Тогда
							ЕстьОшибки = Истина;
							СтрокаОшибок = СтрокаОшибок + "Торговая точка с кодом " + тмпКод + " не найдена! " + Символы.ПС;
						КонецЕсли;
						
						//Физлицо (агент)
						ФизЛицо = тмпАгент.Агент.ФизЛицо;
						
						//Номер
						Номер = тмпДокумент.number;
						
						//Сумма документа
						СуммаДокумента = Число(тмпДокумент.sum);
						
						//Дата последнего изменения
						ДатаПоследнегоИзменения = Дата(тмпДокумент.date);
						
						//Заполнение (перезаполнение) документа
						Если ВидПрикладногоРешения = "УТ11" Тогда
							//ПАКЛ-> 15.08.2015
							Док.Дата = ДатаПоследнегоИзменения;
							Док.Валюта = мВалютаРегламентированногоУчета;
							Док.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета;
							Док.Организация = Организация;
							Док.Склад = Склад;
							Попытка
								Док.ЦенаВключаетНДС = НастройкаИзКэша("1ССуммаВключаетНДС");
								//Если Док.ЦенаВключаетНДС Тогда
								//	Док.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.;
								//	Док.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.;
								//Иначе	
								//	Док.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
								//КонецЕсли;	
							Исключение
							КонецПопытки;
							Док.Соглашение = Соглашение;
							Док.Партнер = Партнер;
							Док.Контрагент = ПолучитьКонтрагентаПартнера(Док.Партнер);
							
							Если Не БПАГКонтрагент.Пустая() Тогда
								Док.ЗаполнитьУсловияЗакупокПоCоглашению();
							КонецЕсли;
							
							Док.Принял = ПолучитьОтветственного(тмпАгент);
							Док.Менеджер = ПолучитьОтветственного(тмпАгент);
							Док.Подразделение = Док.Менеджер.ТекущееПодразделение;
							Док.Согласован = Истина;
							Док.СуммаДокумента = СуммаДокумента;
							Док.СуммаВзаиморасчетов = СуммаДокумента;
							
							Попытка
								УсловияЗакупок = 0;
								Выполнить("УсловияЗакупок = ЗакупкиСервер.ПолучитьУсловияЗакупок(Док.Соглашение, Истина, Истина);");
								Док.ФормаОплаты = УсловияЗакупок.ФормаОплаты;
								Док.ЦенаВключаетНДС = УсловияЗакупок.ЦенаВключаетНДС;
								Док.НалогообложениеНДС = УсловияЗакупок.НалогообложениеНДС;
								//Выполнить("Док.ДатаПлатежа = ПродажиСервер.ПолучитьПоследнююДатуПоГрафику(Док.Дата, УсловияПродаж.ГрафикОплаты, УсловияПродаж.Соглашение);");
							Исключение
							КонецПопытки;
							Док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
							
							
							//ПАКЛ<-
						ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
								// ***** NIY (IO)
						Иначе
							
							Если СпецификаПользователя = "FT" Тогда
								Док.Дата = ТекущаяДата();
							ИначеЕсли СпецификаПользователя = "Sarmat" Тогда 
								Док.Дата = ТекущаяДата();
							Иначе
								Док.Дата = ДатаПоследнегоИзменения;
							КонецЕсли;
							
							Док.ВалютаДокумента = мВалютаРегламентированногоУчета;
							
							Попытка
								Док.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
							Исключение
							КонецПопытки;
							
							Док.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
							Док.Грузоотправитель = Организация;
							Док.Грузополучатель = ?(ТорговаяТочка.Грузополучатель.Пустая(), Контрагент, ТорговаяТочка.Грузополучатель);
							Док.ДоговорКонтрагента = Договор;
							
							Док.Комментарий = ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", "Пан Агент (" + тмпАгент.Агент + ") №" + Номер) + ?(СокрЛП(тмпДокумент.comment) = "", "", ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", " (") + тмпДокумент.comment + ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", ")"));
							
							Док.Контрагент = Контрагент;
							Док.КратностьВзаиморасчетов = 1;
							Док.КурсВзаиморасчетов = 1;
							Док.Организация = Организация;
							Док.СкладОрдер = Склад;
							Док.СуммаДокумента = СуммаДокумента;
							
							Док.Подразделение = НастройкаИзКэша("1СОсновноеПодразделение", тмпАгент.Агент);
							
							Выполнить("ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Док, ""Покупка"");");
							
							Док.ОтражатьВУправленческомУчете = НастройкиДокумента.ОтражатьВУУ;
							
							Попытка
								Док.ОтражатьВБухгалтерскомУчете = НастройкиДокумента.ОтражатьВБУ;
								Док.ОтражатьВНалоговомУчете = НастройкиДокумента.ОтражатьВНУ;
								ЗаполнитьЗначенияСвойств(Док, Док.ЗаполнитьСтруктуруСчетовУчетаШапки(Док.ОтражатьВБухгалтерскомУчете, Док.ОтражатьВНалоговомУчете));
							Исключение
							КонецПопытки;
							
							Док.Ответственный = ПолучитьОтветственного(тмпАгент);
							
							СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
							
							//СтруктураРеквизитовДокумента = 0;
							//Выполнить("СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(Док)");
							
							Выполнить("ЗаполнениеДокументов.УстановитьТипСделки(Док, Истина);");
							
							Док.ТипЦен = ТипЦен;
						КонецЕсли;
						
						//Загрузка табличной части
						Если ВидПрикладногоРешения = "УНФ" Тогда
							Док.Запасы.Очистить();
						Иначе
							Док.Товары.Очистить();
						КонецЕсли;
						
						Для Каждого тмп Из тмпДокумент.rows Цикл
							тмп.sort = Число(тмп.sort);
						КонецЦикла;
						тмпДокумент.rows.Сортировать("sort");
						Для Каждого тмпСтрока Из тмпДокумент.rows Цикл
							
							//Товар
							тмпКод = тмпСтрока.goodID;
							тмпНазваниеХарактеристики = "";
							
							ПозицияРазделителяХарактеристики = Найти(тмпСтрока.goodID, ":|");
							Если ПозицияРазделителяХарактеристики > 0 Тогда
								тмпКод = Лев(тмпСтрока.goodID, ПозицияРазделителяХарактеристики - 1);
								тмпНазваниеХарактеристики = Сред(тмпСтрока.goodID, ПозицияРазделителяХарактеристики + 2);
							КонецЕсли;
							
							БПАГНоменклатура = Справочники.БПАГНоменклатура.НайтиПоКоду(тмпКод);
							Если БПАГНоменклатура.Пустая() Тогда
								ЕстьОшибки = Истина;
								СтрокаОшибок = СтрокаОшибок + "Товар с кодом " + тмпКод + " не найден! " + Символы.ПС;
								Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
							Иначе
								Номенклатура = БПАГНоменклатура.Номенклатура;
							КонецЕсли;
							
							Характеристика = ПолучитьХарактеристику(Номенклатура, тмпНазваниеХарактеристики);
							
							//Единица измерения
							тмпКоэффициент = Число(тмпСтрока.coeff);
							ЕдиницаИзмерения = ПолучитьЕдиницуИзмерения(тмпСтрока, Номенклатура, ЕстьОшибки, СтрокаОшибок);
							
							//Цена
							Цена = Число(тмпСтрока.price);
							
							//Количество
							Количество = Число(тмпСтрока.quantity);
							
							//Сумма
							Сумма = Число(тмпСтрока.sum);
							
							Если ВидПрикладногоРешения = "УТ11" Тогда
								// ***** NIY (IO)
								Если Окр(Количество, 3) > 0 Тогда
									
									НоваяСтрока = Док.Товары.Добавить();
									НоваяСтрока.Номенклатура = Номенклатура;
									НоваяСтрока.КоличествоУпаковок = Количество;
									НоваяСтрока.Количество = НоваяСтрока.КоличествоУпаковок * тмпКоэффициент;
									НоваяСтрока.Характеристика = Характеристика;
									
									//Цена
									//НоваяСтрока.ВидЦены = ТипЦен;
									
									Если НастройкаИзКэша("1СЗагружатьДокументыВБазовыхЕдиницах", тмпАгент.Агент) Тогда
										// ***** NIY (IO)
										ОтладочноеСообщение("Загрузка реализаций с учетом настройки '1СЗагружатьДокументыВБазовыхЕдиницах'. Для версии Управление торговлей 11 загрузка номенклатуры в базовых единицах не предусмотрена.  NIY.");
										//НоваяСтрока.Упаковка = НоваяСтрока.Номенклатура. .ЕдиницаХраненияОстатков;
										//НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
										//Если ЦенаБезСкидки = 0 Тогда
										//	НоваяСтрока.Цена = ?(тмпКоэффициент = 0, 0, Цена / тмпКоэффициент * НоваяСтрока.Коэффициент);
										//Иначе
										//	НоваяСтрока.Цена = ?(тмпКоэффициент = 0, 0, ЦенаБезСкидки / тмпКоэффициент * НоваяСтрока.Коэффициент);
										//	НоваяСтрока.ПроцентАвтоматическихСкидок = ПроцентСкидки;
										//	НоваяСтрока.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.БезУсловий;
										//КонецЕсли;
										//НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
									Иначе
										НоваяСтрока.Упаковка = ЕдиницаИзмерения;
										НоваяСтрока.Цена = Цена;
									КонецЕсли;
									
									НоваяСтрока.Сумма = Сумма;
									
									НоваяСтрока.Склад = Док.Склад;
									
									СтруктураПересчетаСуммы = Неопределено;
									Выполнить("СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);");
									
									СтруктураДействий = Новый Структура;
									СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
									СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Док.НалогообложениеНДС);
									СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
									СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
									СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
									КэшированныеЗначения = Неопределено;
									Выполнить("ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);");									
								КонецЕсли;
								
								//********************************************************************
							ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
								// ***** NIY (IO)
							Иначе //УТ10
								Если Окр(Количество, 3) > 0 Тогда
									
									Если (Номенклатура.ВидНоменклатуры = ВидНоменклатурыТара) И (НЕ Номенклатура.ВидНоменклатуры.Пустая()) Тогда
										//Тара
										НоваяСтрока = Док.ВозвратнаяТара.Добавить();
										НоваяСтрока.Номенклатура = Номенклатура;
										НоваяСтрока.Количество = Количество;
										
										НоваяСтрока.Цена = Цена;
										НоваяСтрока.Сумма = Сумма;
										
										// Выполнить общие действия для всех документов при изменении номенклатуры.
										Выполнить("ОбработкаТабличныхЧастей.ПриИзмененииВозвратнойТарыТабЧасти(НоваяСтрока, Док);");
										
										// Заполняем реквизиты табличной части.
										//Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(НоваяСтрока, Док);");
										
										// Рассчитать реквизиты табличной части.
										Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(НоваяСтрока, Док);");
										
										Попытка
											Док.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "ВозвратнаяТара", Док.ОтражатьВБухгалтерскомУчете, Док.ОтражатьВНалоговомУчете);
										Исключение
										КонецПопытки;
										
									Иначе
										//Не тара, обычная номенклатура или услуга
										Если СпецификаПользователя = "SB" Тогда
											НаименованиеЗатраты = "";
											Для Каждого тмпСтрокаСвойств Из тмпСтрока.properties Цикл
												НаименованиеЗатраты = СокрЛП(тмпСтрокаСвойств.value);
											КонецЦикла;
											
											//Если НаименованиеЗатраты <> "" Тогда
												//Создадим элемент справочника номенклатуры - копию шаблона
												//Объ = Справочники.Номенклатура.СоздатьЭлемент();
												//Объ.Родитель = Номенклатура.Родитель;
												//Объ.Артикул = Номенклатура.Артикул;
												//Объ.БазоваяЕдиницаИзмерения = Номенклатура.БазоваяЕдиницаИзмерения;
												//Объ.ВидНоменклатуры = Номенклатура.ВидНоменклатуры;
												//Объ.Комментарий = Номенклатура.Комментарий;
												//Объ.Наименование = НаименованиеЗатраты;
												//Объ.НаименованиеПолное = НаименованиеЗатраты;
												//Объ.НоменклатурнаяГруппа = Номенклатура.НоменклатурнаяГруппа;
												//Объ.НоменклатурнаяГруппаЗатрат = Номенклатура.НоменклатурнаяГруппаЗатрат;
												//Объ.ОсновнойПоставщик = Номенклатура.ОсновнойПоставщик;
												//Объ.ОтветственныйМенеджерЗаПокупки = Номенклатура.ОтветственныйМенеджерЗаПокупки;
												//Объ.СтранаПроисхождения = Номенклатура.СтранаПроисхождения;
												//Объ.Услуга = Номенклатура.Услуга;
												//Объ.Записать();
												//ЕдиницаОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
												//ЕдиницаОбъект.Наименование = Объ.БазоваяЕдиницаИзмерения.Наименование;
												//ЕдиницаОбъект.ЕдиницаПоКлассификатору = Объ.БазоваяЕдиницаИзмерения;
												//ЕдиницаОбъект.Коэффициент = 1;
												//ЕдиницаОбъект.Владелец = Объ.Ссылка;
												//ЕдиницаОбъект.Записать();
												//Объ.ЕдиницаДляОтчетов = ЕдиницаОбъект.Ссылка;
												//Объ.ЕдиницаИзмеренияМест = ЕдиницаОбъект.Ссылка;
												//Объ.ЕдиницаХраненияОстатков = ЕдиницаОбъект.Ссылка;
												//Объ.СтавкаНДС = Номенклатура.СтавкаНДС;
												//Объ.СтатьяЗатрат = Номенклатура.СтатьяЗатрат;
												//Объ.Записать();
												//Номенклатура = Объ.Ссылка;
											//КонецЕсли;
											
											Если Номенклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
												//Услуга
												НоваяСтрока = Док.Услуги.Добавить();
												НоваяСтрока.Номенклатура = Номенклатура;
												Если НаименованиеЗатраты <> "" Тогда
													НоваяСтрока.Содержание = НаименованиеЗатраты;
												Иначе	
													НоваяСтрока.Содержание = Номенклатура.НаименованиеПолное;
												Конецесли;	
												НоваяСтрока.Количество = Количество;
												НоваяСтрока.Цена = Цена;
												НоваяСтрока.Сумма = Сумма;
												НоваяСтрока.Подразделение = Док.Подразделение;
												НоваяСтрока.СтатьяЗатрат = Номенклатура.СтатьяЗатрат;
												// Выполнить общие действия для всех документов при изменении номенклатуры.
												Выполнить("ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НоваяСтрока, Док);");
												
												Попытка
													Док.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Услуги", Док.ОтражатьВБухгалтерскомУчете, Док.ОтражатьВНалоговомУчете);
												Исключение
												КонецПопытки;
												
												// Заполняем реквизиты табличной части.
												Попытка
													Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, Док);");
												Исключение
													Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, Док, ""Приобретение"");");
												КонецПопытки;
												
												// Рассчитать реквизиты табличной части.
												Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, Док);");
												Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, Док);");
												
											Иначе 
												//Товар
												НоваяСтрока = Док.Товары.Добавить();
												НоваяСтрока.Номенклатура = Номенклатура;
												НоваяСтрока.Количество = Количество;
												НоваяСтрока.ХарактеристикаНоменклатуры = Характеристика;
												
												Если НастройкаИзКэша("1СЗагружатьДокументыВБазовыхЕдиницах", тмпАгент.Агент) Тогда
													НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
													НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
													НоваяСтрока.Цена = ?(тмпКоэффициент = 0, 0, Цена / тмпКоэффициент * НоваяСтрока.Коэффициент);
													НоваяСтрока.Количество = НоваяСтрока.Количество * тмпКоэффициент;
												Иначе
													НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
													НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
													НоваяСтрока.Цена = Цена;
												КонецЕсли;
												
												НоваяСтрока.Сумма = Сумма;
												
												// Выполнить общие действия для всех документов при изменении номенклатуры.
												Выполнить("ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НоваяСтрока, Док);");
												
												Попытка
													Док.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", Док.ОтражатьВБухгалтерскомУчете, Док.ОтражатьВНалоговомУчете);
												Исключение
												КонецПопытки;
												
												// Заполняем реквизиты табличной части.
												Попытка
													Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, Док);");
												Исключение
													Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, Док, ""Приобретение"");");
												КонецПопытки;
												
												// Рассчитать реквизиты табличной части.
												Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, Док);");
												Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, Док);");
												
												//НоваяСтрока.КлючСтроки = НоваяСтрока.НомерСтроки;
												
											КонецЕсли;
										Иначе	
											НоваяСтрока = Док.Товары.Добавить();
											НоваяСтрока.Номенклатура = Номенклатура;
											НоваяСтрока.Количество = Количество;
											НоваяСтрока.ХарактеристикаНоменклатуры = Характеристика;
											
											Если НастройкаИзКэша("1СЗагружатьДокументыВБазовыхЕдиницах", тмпАгент.Агент) Тогда
												НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
												НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
												НоваяСтрока.Цена = ?(тмпКоэффициент = 0, 0, Цена / тмпКоэффициент * НоваяСтрока.Коэффициент);
												НоваяСтрока.Количество = НоваяСтрока.Количество * тмпКоэффициент;
											Иначе
												НоваяСтрока.ЕдиницаИзмерения = ЕдиницаИзмерения;
												НоваяСтрока.Коэффициент = ЕдиницаИзмерения.Коэффициент;
												НоваяСтрока.Цена = Цена;
											КонецЕсли;
											
											НоваяСтрока.Сумма = Сумма;
											
											// Выполнить общие действия для всех документов при изменении номенклатуры.
											Выполнить("ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НоваяСтрока, Док);");
											
											Попытка
												Док.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", Док.ОтражатьВБухгалтерскомУчете, Док.ОтражатьВНалоговомУчете);
											Исключение
											КонецПопытки;
											
											// Заполняем реквизиты табличной части.
											Попытка
												Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, Док);");
											Исключение
												Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, Док, ""Приобретение"");");
											КонецПопытки;
											
											// Рассчитать реквизиты табличной части.
											Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, Док);");
											Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, Док);");
											
											//НоваяСтрока.КлючСтроки = НоваяСтрока.НомерСтроки;
											
										КонецЕсли;
										
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
						СчетДокументов = СчетДокументов + 1;						
						// Если есть категории "PostUU", "PostBU", "DontPostUU", "DontPostBU", то соответствующим образом проставим отражения в учетах
						УстановитьСпособыОтраженияВУчетах(тмпДокумент, Док);
						
						Если ЕстьОшибки Тогда
							//Док.ОбменДанными.Загрузка = Истина;
							Док.Записать(РежимЗаписиДокумента.Запись);	
							ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Поступление " + Номер + " (Поступление товаров и услуг " + Док.Номер + ") - возникли ошибки при загрузке: ");
							ОтладочноеСообщение(СтрокаОшибок);
							
							СчетОшибочных = СчетОшибочных + 1;
							
						Иначе	
							//Док.ОбменДанными.Загрузка = Истина;
							Попытка
								Док.Записать(?(НастройкиДокумента.Проводить, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
							Исключение
								ЕстьОшибки = Истина;
								СчетОшибочных = СчетОшибочных + 1;
								ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Поступление " + Номер + " (Поступление товаров и услуг " + Док.Номер + ") - возникли ошибки при загрузке: ");
								ОтладочноеСообщение(ОписаниеОшибки());
								Попытка
									Док.Записать(РежимЗаписиДокумента.Запись);
								Исключение
									ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Поступление " + Номер + " (Поступление товаров и услуг " + Док.Номер + ") - возникли ошибки при загрузке: ");
									ОтладочноеСообщение(ОписаниеОшибки());
								КонецПопытки;
							КонецПопытки;
							
						КонецЕсли;
						
					КонецЕсли;
					
					Если ВидПрикладногоРешения = "УТ10" Тогда
						УстановитьСвойстваИКатегории(тмпДокумент, Док);
					КонецЕсли;
					
					//Запишем данные в служебный регистр
					НоваяЗаписьДокументыАгентов = РегистрыСведений.БПАГДокументыАгентов.СоздатьМенеджерЗаписи();
					НоваяЗаписьДокументыАгентов.ВидДокумента = Перечисления.БПАГВидыДокументов.Поступление;
					
					НоваяЗаписьДокументыАгентов.Период = ТекущаяДата();
					НоваяЗаписьДокументыАгентов.Агент = тмпАгент.Агент;
					НоваяЗаписьДокументыАгентов.Документ = Док.Ссылка;
					НоваяЗаписьДокументыАгентов.ТорговаяТочка = ТорговаяТочка;
					НоваяЗаписьДокументыАгентов.ДатаСозданияНаУстройстве = Дата(тмпДокумент.createdDate);
					НоваяЗаписьДокументыАгентов.ДатаИзмененияНаУстройстве = Дата(тмпДокумент.modifiedDate);
					
					НоваяЗаписьДокументыАгентов.ИД = тмпДокумент.uniqueID;
					НоваяЗаписьДокументыАгентов.НомерДокументаНаУстройстве = Номер;
					НоваяЗаписьДокументыАгентов.ШиротаСоздания = Число(тмпДокумент.createdLatitude);
					НоваяЗаписьДокументыАгентов.ДолготаСоздания = Число(тмпДокумент.createdLongitude);
					НоваяЗаписьДокументыАгентов.ШиротаИзменения = Число(тмпДокумент.modifiedLatitude);
					НоваяЗаписьДокументыАгентов.ДолготаИзменения = Число(тмпДокумент.modifiedLongitude);
					НоваяЗаписьДокументыАгентов.МоментСозданияПоGPS = ?(тмпДокумент.createdLocationDate = "", 0, Дата(тмпДокумент.createdLocationDate));
					НоваяЗаписьДокументыАгентов.МоментИзмененияПоGPS = ?(тмпДокумент.modifiedLocationDate = "", 0, Дата(тмпДокумент.modifiedLocationDate));
					
					//Последняя проверка на то, что документ не пуст
					Если СокрЛП(НоваяЗаписьДокументыАгентов.Документ) = "" Тогда
						ОтладочноеСообщение("(!!!) Критическая ошибка базы данных. Обнаружена пустая ссылка на документ.");
						#Если Клиент Тогда
							Предупреждение("Критическая ошибка базы данных. Обнаружена пустая ссылка на документ. Обратитесь к системному администратору. Подробности зафиксированы в журнале (каталог logs папки обмена).", 10);
						#КонецЕсли
					Иначе	
						НоваяЗаписьДокументыАгентов.Записать();
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Загружено поступлений: " + СчетДокументов + "." +?(СчетОшибочных > 0, " Из них с ошибками: " + СчетОшибочных, " Без ошибок."));
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗагрузитьРКО(Агенты)
	
	ВидПрикладногоРешения = БПАГ.ПолучитьВидПрикладногоРешения();
	
	НастройкиДокумента = ПолучитьНастройкиДокумента(Перечисления.БПАГВидыДокументов.РКО, ТекущаяДата());
	Если НастройкиДокумента = Неопределено Тогда
		ОтладочноеСообщение("Не заданы настройки для документа ""РКО""! Загрузка остановлена. Задайте настройки и повторите загрузку.");
		Возврат;
	КонецЕсли;
	
	Для Каждого тмпАгент Из Агенты Цикл
		
		ТЗ = ПолучитьТЗИзPlist(тмпАгент.Агент, "cashOuts", "Не найдены РКО для ");
		Если ТЗ = Неопределено Тогда
			Продолжить;
		Иначе
			
			СчетДокументов = 0;
			СчетОшибочных = 0;
			Для Каждого тмпДокумент Из ТЗ Цикл
				
				//Глобальное изменение формата - игнорируем старые документы для совместимости
				ДатаПоследнегоИзменения = Дата(тмпДокумент.date);
				Если ДатаПоследнегоИзменения < Дата(2013, 1, 15) Тогда
					Продолжить;
				КонецЕсли;
				//End Глобальное изменение формата - игнорируем старые документы для совместимости
				
				ЕстьОшибки = Ложь;
				СтрокаОшибок = "";
				
				Если ТЗ.Колонки.Найти("rowCount") <> Неопределено Тогда
					Если Число(тмпДокумент.rowCount) = 0 Тогда
						ЕстьОшибки = Истина;
						ОтладочноеСообщение("РКО (номер на устройстве: " + тмпДокумент.number + ") пуст (не заполнена табличная часть). Документ проигнорирован!");
						СчетОшибочных = СчетОшибочных + 1;
						Продолжить;
					КонецЕсли;
				Иначе
					ЕстьОшибки = Истина;
					ОтладочноеСообщение("РКО (номер на устройстве: " + тмпДокумент.number + ") выгружен без табличной части. Документ проигнорирован!");
					СчетОшибочных = СчетОшибочных + 1;
					Продолжить;
				КонецЕсли;
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	БПАГДокументыАгентовСрезПоследних.Документ КАК Ссылка
				|ИЗ
				|	РегистрСведений.БПАГДокументыАгентов.СрезПоследних(, ИД = &ИД) КАК БПАГДокументыАгентовСрезПоследних
				|ГДЕ
				|	БПАГДокументыАгентовСрезПоследних.ВидДокумента = &ВидДокумента";
				
				Запрос.УстановитьПараметр("ИД", тмпДокумент.uniqueID);
				Запрос.УстановитьПараметр("ВидДокумента", Перечисления.БПАГВидыДокументов.РКО);
				
				ТребуетсяСоздатьИлиИзменитьДокумент = Истина;
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Попытка
						Если Выборка.Ссылка.Пустая() Тогда
							Продолжить;
						ИначеЕсли Выборка.Ссылка.Проведен Тогда
							Если НастройкиДокумента.Перепроводить Тогда
								Док = Выборка.Ссылка.ПолучитьОбъект();	
							Иначе
								ТребуетсяСоздатьИлиИзменитьДокумент = Ложь;	
								ЕстьОшибки = Истина;
								ОтладочноеСообщение("Документ " + Выборка.Ссылка + " (номер на устройстве: " + тмпДокумент.number + ") уже проведен! Перепроведение отключено в настройках.");
								СчетОшибочных = СчетОшибочных + 1;
							КонецЕсли;
						ИначеЕсли Выборка.Ссылка.ПометкаУдаления Тогда
							ТребуетсяСоздатьИлиИзменитьДокумент = Ложь;	
							ЕстьОшибки = Истина;
							ОтладочноеСообщение("Документ " + Выборка.Ссылка + " (номер на устройстве: " + тмпДокумент.number + ") был помечен на удаление в центральной базе! Документ не загружен.");
							СчетОшибочных = СчетОшибочных + 1;
						Иначе
							//Документ уже загружен, но не проведен
							Если НастройкиДокумента.ПерезаписыватьНепроведенные Тогда
								Док = Выборка.Ссылка.ПолучитьОбъект();
								ТребуетсяСоздатьИлиИзменитьДокумент = Истина;	
							Иначе
								ТребуетсяСоздатьИлиИзменитьДокумент = Ложь;	
								ЕстьОшибки = Истина;
								ОтладочноеСообщение("Документ " + Выборка.Ссылка + " (номер на устройстве: " + тмпДокумент.number + ") уже был загружен! Перезапись непроведенных документов отключена в настройках.");
								СчетОшибочных = СчетОшибочных + 1;
							КонецЕсли;	
						КонецЕсли;
					Исключение
						Продолжить;
					КонецПопытки;
				Иначе
					Если ВидПрикладногоРешения = "УНФ" Тогда
						//Док = Документы.ПоступлениеВКассу.СоздатьДокумент();	
					Иначе
						Док = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();	
					КонецЕсли;
				КонецЕсли;
				
				Если ТребуетсяСоздатьИлиИзменитьДокумент Тогда
					//Организация
					тмпКод = тмпДокумент.companyID;
					БПАГОрганизация = Справочники.БПАГОрганизации.НайтиПоКоду(тмпКод);
					Если БПАГОрганизация.Пустая() Тогда
						ЕстьОшибки = Истина;
						СтрокаОшибок = СтрокаОшибок + "Организация с кодом " + тмпКод + " не найдена! " + Символы.ПС;
						Организация = Справочники.Организации.ПустаяСсылка();
					Иначе
						Организация = БПАГОрганизация.Организация;
					КонецЕсли;
					
					//Контрагент или партнер
					Если ВидПрикладногоРешения = "УТ11" Тогда
						тмпКод = тмпДокумент.clientID;
						БПАГКонтрагент = Справочники.БПАГКонтрагенты.НайтиПоКоду(тмпКод);
						Если БПАГКонтрагент.Пустая() Тогда
							ЕстьОшибки = Истина;
							СтрокаОшибок = СтрокаОшибок + "Партнер с кодом " + тмпКод + " не найден! " + Символы.ПС;
							Партнер = Справочники.Партнеры.ПустаяСсылка();
						Иначе
							Партнер = БПАГКонтрагент.Партнер;
						КонецЕсли;
					Иначе
						тмпКод = тмпДокумент.clientID;
						БПАГКонтрагент = Справочники.БПАГКонтрагенты.НайтиПоКоду(тмпКод);
						Если БПАГКонтрагент.Пустая() Тогда
							ЕстьОшибки = Истина;
							СтрокаОшибок = СтрокаОшибок + "Контрагент с кодом " + тмпКод + " не найден! " + Символы.ПС;
							Контрагент = Справочники.Контрагенты.ПустаяСсылка();
						Иначе
							Контрагент = БПАГКонтрагент.Контрагент;
						КонецЕсли;
					КонецЕсли;
					
					//Договор или соглашение
					Если ВидПрикладногоРешения = "УТ11" Тогда
						тмпНаименованиеСоглашения = Сред(тмпДокумент.analyticsID, СтрДлина(БПАГКонтрагент.Код) + 1);
						Соглашение = ПолучитьСоглашение(тмпНаименованиеСоглашения, Партнер);
						Если Соглашение.Пустая() Тогда
							ЕстьОшибки = Истина;
							СтрокаОшибок = СтрокаОшибок + "Соглашение с наименованием " + тмпНаименованиеСоглашения + " не найдено! " + Символы.ПС;
						КонецЕсли
					Иначе
						тмпКод = тмпДокумент.analyticsID;
						Договор = Справочники.ДоговорыКонтрагентов.НайтиПоКоду(тмпКод);
						Если Договор.Пустая() Тогда
							ЕстьОшибки = Истина;
							СтрокаОшибок = СтрокаОшибок + "Договор с кодом " + тмпКод + " не найден! " + Символы.ПС;
						КонецЕсли;	
					КонецЕсли;
					
					//Торговая точка
					тмпКод = тмпДокумент.posID;
					ТорговаяТочка = Справочники.БПАГТорговыеТочки.НайтиПоКоду(тмпКод);
					Если ТорговаяТочка.Пустая() Тогда
						ЕстьОшибки = Истина;
						СтрокаОшибок = СтрокаОшибок + "Торговая точка с кодом " + тмпКод + " не найдена! " + Символы.ПС;
					КонецЕсли;
					
					//Физлицо (агент)
					ФизЛицо = тмпАгент.Агент.ФизЛицо;
					
					//Касса
					Касса = ПолучитьКассу(тмпАгент.Агент, БПАГОрганизация, СтрокаОшибок, ЕстьОшибки);
					
					//Номер
					Номер = тмпДокумент.number;
					
					//Сумма документа
					СуммаДокумента = Число(тмпДокумент.sum);
					Если СуммаДокумента = 0 Тогда
						ЕстьОшибки = Истина;
						СтрокаОшибок = СтрокаОшибок + "Сумма РКО равна нулю! " + Символы.ПС;
					КонецЕсли;
					
					//Дата последнего изменения
					ДатаПоследнегоИзменения = Дата(тмпДокумент.date);
					
					//Заполнение (перезаполнение) документа
					Док.Дата = ДатаПоследнегоИзменения;
					
					Док.Организация = Организация;
					Док.Касса = Касса;
					
					Если ВидПрикладногоРешения = "УТ11" Тогда
						// ***** NIY (IO)
					ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
     					// ***** NIY (IO)
					Иначе
						Док.Подразделение = НастройкаИзКэша("1СОсновноеПодразделение", тмпАгент.Агент);
						Попытка
							Док.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику;
						Исключение
						КонецПопытки;
						
						Док.Контрагент = Контрагент;
						Док.ДоговорКонтрагента = Договор;
						Док.ВалютаДокумента = мВалютаРегламентированногоУчета;
						Док.ОтраженоВОперУчете = Истина;
						Док.Оплачено = Истина;
						Док.ОтражатьВУправленческомУчете = НастройкиДокумента.ОтражатьВУУ;
						
						Попытка
							Док.ОтражатьВБухгалтерскомУчете = НастройкиДокумента.ОтражатьВБУ;
							Док.ОтражатьВНалоговомУчете = НастройкиДокумента.ОтражатьВНУ;
						Исключение
						КонецПопытки;
						
						Док.Ответственный = ПолучитьОтветственного(тмпАгент);
						
					КонецЕсли;
					
					Док.СуммаДокумента = СуммаДокумента;
					//Док.ПринятоОт = СокрЛП(Док.Контрагент.НаименованиеПолное);
					Док.Комментарий = ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", "Пан Агент (" + тмпАгент.Агент + ") №" + Номер) + ?(СокрЛП(тмпДокумент.comment) = "", "", ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", " (") + тмпДокумент.comment + ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", ")"));
					
					//Ставка НДС
					Если БПАГОрганизация.СтавкаНДС.Пустая() Тогда
						Если ВидПрикладногоРешения = "УНФ" Тогда
							// ***** NIY (IO)
						Иначе
							//NIY Взять правильную ставку НДС
							СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
						КонецЕсли;
					Иначе
						СтавкаНДС = БПАГОрганизация.СтавкаНДС;
					КонецЕсли;
					
					//Загрузка табличной части
					Док.РасшифровкаПлатежа.Очистить();
					
					Для Каждого тмп Из тмпДокумент.rows Цикл
						тмп.sort = Число(тмп.sort);
					КонецЦикла;
					тмпДокумент.rows.Сортировать("sort");
					Для Каждого тмпСтрока Из тмпДокумент.rows Цикл
						
						//Сумма
						Сумма = Число(тмпСтрока.sum);
						
						//ID Документа расчетов
						IDДокументаРасчетов = тмпСтрока.debtID;
						
						НоваяСтрока = Док.РасшифровкаПлатежа.Добавить();
						
						Если ВидПрикладногоРешения = "УТ11" Тогда
							// ***** NIY (IO)
						ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
							// ***** NIY (IO)
						Иначе
							
							НоваяСтрока.СуммаВзаиморасчетов = Сумма;
							
							НоваяСтрока.ДоговорКонтрагента = Договор;
							НоваяСтрока.КурсВзаиморасчетов = 1;
							НоваяСтрока.КратностьВзаиморасчетов = 1;
							
							НоваяСтрока.СуммаПлатежа = Сумма;
							
							НоваяСтрока.СтавкаНДС = СтавкаНДС;
							Выполнить("УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(НоваяСтрока);");
						КонецЕсли;
						
						ДокументРасчетов = 0;
						Если IDДокументаРасчетов = "0" Тогда
							//Долг без документа, ни к чему не привязан
							
						ИначеЕсли IDДокументаРасчетов = "1" Тогда
							
							Попытка  
								//Долг по расчетному документу
								Для Каждого тмпМета Из Метаданные.Документы Цикл
									Если тмпМета.Синоним = тмпСтрока.debtDocument Тогда
										ДокументРасчетов = Документы[тмпМета.Имя].НайтиПоНомеру(тмпСтрока.debtNumber, Дата(тмпСтрока.debtDate + " 00:00:00"));
										Прервать;
									КонецЕсли;
								КонецЦикла;
								
							Исключение
								//Долг без документа, ни к чему не привязан
							КонецПопытки;
							
						Иначе
							//Долг по поступлению, введенному на устройстве
							
							Запрос = Новый Запрос;
							Запрос.Текст =
							"ВЫБРАТЬ
							|	БПАГДокументыАгентовСрезПоследних.Документ КАК Ссылка
							|ИЗ
							|	РегистрСведений.БПАГДокументыАгентов.СрезПоследних(, ИД = &ИД) КАК БПАГДокументыАгентовСрезПоследних";
							
							Запрос.УстановитьПараметр("ИД", IDДокументаРасчетов);
							Выборка = Запрос.Выполнить().Выбрать();
							Если Выборка.Следующий() Тогда
								ДокументРасчетов = Выборка.Ссылка;
							КонецЕсли;
						КонецЕсли;
						
						Если ВидПрикладногоРешения = "УТ11" Тогда
								// ***** NIY (IO)
						ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
								// ***** NIY (IO)
						Иначе
							Если Договор.ВестиПоДокументамРасчетовСКонтрагентом Тогда
								НоваяСтрока.ДокументРасчетовСКонтрагентом = ДокументРасчетов;
							КонецЕсли;
						КонецЕсли;
						
						//В качестве документа-основания установим последний документ (если он был)
						Док.ДокументОснование = ДокументРасчетов;
						
						Если (ВидПрикладногоРешения = "УТ11") ИЛИ (ВидПрикладногоРешения = "УНФ") Тогда
							//NIY Вставить пересчет и подстановку значний по умолчанию, если нужно
						Иначе
							Попытка
								Выполнить("УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(НоваяСтрока, Док.ВидОперации);");
							Исключение
							КонецПопытки;
							
							//Проверка на вид прикладного решения
							Попытка
								БухгалтерскийУчетРасчетовСКонтрагентами = Ложь;
							Исключение
							КонецПопытки;
							
							Попытка 
								СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Док.Организация, Док.Контрагент, НоваяСтрока.ДоговорКонтрагента);
								Если НоваяСтрока.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
									НоваяСтрока.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовСКомитентом;
								Иначе
									НоваяСтрока.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
								КонецЕсли;
								НоваяСтрока.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансов;
							Исключение
							КонецПопытки;
						КонецЕсли;
						
					КонецЦикла;
					
					Если (ВидПрикладногоРешения = "УТ11") ИЛИ (ВидПрикладногоРешения = "УНФ") Тогда
					Иначе
						
						// Если есть категории "PostUU", "PostBU", "DontPostUU", "DontPostBU", то соответствующим образом проставим отражения в учетах
						УстановитьСпособыОтраженияВУчетах(тмпДокумент, Док);
						
						//Проверка на вид прикладного решения
						Попытка
							НалоговыйУчетУСН = Ложь;
						Исключение
						КонецПопытки;
						
						Попытка
							Если НалоговыйУчетУСН.ПрименениеУСН(Док.Организация, Док.Дата) Тогда
								НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(Док);
							КонецЕсли;
						Исключение
						КонецПопытки;
					КонецЕсли;
					
					СчетДокументов = СчетДокументов + 1;
					Если ЕстьОшибки Тогда
						//Док.ОбменДанными.Загрузка = Истина;
						Док.Записать(РежимЗаписиДокумента.Запись);	
						ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": РКО " + Номер + " (Расходный кассовый ордер " + Док.Номер + ") - возникли ошибки при загрузке: ");
						ОтладочноеСообщение(СтрокаОшибок);
						
						СчетОшибочных = СчетОшибочных + 1;
						
					Иначе	
						//Док.ОбменДанными.Загрузка = Истина;
						Попытка
							Док.Записать(?(НастройкиДокумента.Проводить, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
						Исключение
							ЕстьОшибки = Истина;
							СчетОшибочных = СчетОшибочных + 1;
							ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": ПКО " + Номер + " (Расходный кассовый ордер " + Док.Номер + ") - возникли ошибки при загрузке: ");
							ОтладочноеСообщение(ОписаниеОшибки());
							Попытка
								Док.Записать(РежимЗаписиДокумента.Запись);
							Исключение
								ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": ПКО " + Номер + " (Расходный кассовый ордер " + Док.Номер + ") - возникли ошибки при загрузке: ");
								ОтладочноеСообщение(ОписаниеОшибки());
							КонецПопытки;
						КонецПопытки;
						
					КонецЕсли;
					
					//Свойства и категории
					УстановитьСвойстваИКатегории(тмпДокумент, Док);
					
					//Запишем данные в служебный регистр
					НоваяЗаписьДокументыАгентов = РегистрыСведений.БПАГДокументыАгентов.СоздатьМенеджерЗаписи();
					НоваяЗаписьДокументыАгентов.ВидДокумента = Перечисления.БПАГВидыДокументов.РКО;
					
					НоваяЗаписьДокументыАгентов.Период = ТекущаяДата();
					НоваяЗаписьДокументыАгентов.Агент = тмпАгент.Агент;
					НоваяЗаписьДокументыАгентов.Документ = Док.Ссылка;
					НоваяЗаписьДокументыАгентов.ТорговаяТочка = ТорговаяТочка;
					НоваяЗаписьДокументыАгентов.ДатаСозданияНаУстройстве = Дата(тмпДокумент.createdDate);
					НоваяЗаписьДокументыАгентов.ДатаИзмененияНаУстройстве = Дата(тмпДокумент.modifiedDate);
					
					НоваяЗаписьДокументыАгентов.ИД = тмпДокумент.uniqueID;
					НоваяЗаписьДокументыАгентов.НомерДокументаНаУстройстве = Номер;
					НоваяЗаписьДокументыАгентов.ШиротаСоздания = Число(тмпДокумент.createdLatitude);
					НоваяЗаписьДокументыАгентов.ДолготаСоздания = Число(тмпДокумент.createdLongitude);
					НоваяЗаписьДокументыАгентов.ШиротаИзменения = Число(тмпДокумент.modifiedLatitude);
					НоваяЗаписьДокументыАгентов.ДолготаИзменения = Число(тмпДокумент.modifiedLongitude);
					НоваяЗаписьДокументыАгентов.МоментСозданияПоGPS = ?(тмпДокумент.createdLocationDate = "", 0, Дата(тмпДокумент.createdLocationDate));
					НоваяЗаписьДокументыАгентов.МоментИзмененияПоGPS = ?(тмпДокумент.modifiedLocationDate = "", 0, Дата(тмпДокумент.modifiedLocationDate));
					
					//Последняя проверка на то, что документ не пуст
					Если СокрЛП(НоваяЗаписьДокументыАгентов.Документ) = "" Тогда
						ОтладочноеСообщение("(!!!) Критическая ошибка базы данных. Обнаружена пустая ссылка на документ.");
						#Если Клиент Тогда
							Предупреждение("Критическая ошибка базы данных. Обнаружена пустая ссылка на документ. Обратитесь к системному администратору. Подробности зафиксированы в журнале (каталог logs папки обмена).", 10);
						#КонецЕсли
					Иначе	
						НоваяЗаписьДокументыАгентов.Записать();
					КонецЕсли;
					
				КонецЕсли;				
			КонецЦикла;
		КонецЕсли;
		
		ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Загружено РКО: " + СчетДокументов + "." +?(СчетОшибочных > 0, " Из них с ошибками: " + СчетОшибочных, " Без ошибок."));	
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьВозвратыПоставщикам(Агенты)
	
	ВидПрикладногоРешения = БПАГ.ПолучитьВидПрикладногоРешения();
	
	НастройкиДокумента = ПолучитьНастройкиДокумента(Перечисления.БПАГВидыДокументов.ВозвратПоставщику, ТекущаяДата());
	Если НастройкиДокумента = Неопределено Тогда
		ОтладочноеСообщение("Не заданы настройки для документа ""Возврат поставщику""! Загрузка остановлена. Задайте настройки и повторите загрузку.");
		Возврат;
	КонецЕсли;
	
	Если ВидПрикладногоРешения = "УТ10" Тогда
		ВидНоменклатурыТара = НастройкаИзКэша("1СВидНоменклатурыТара");
	КонецЕсли;
	
	Для Каждого тмпАгент Из Агенты Цикл
		
		ТЗ = ПолучитьТЗИзPlist(тмпАгент.Агент, "returnOuts", "Не найдены возвраты поставщику для ");
		Если ТЗ = Неопределено Тогда
			Продолжить;
		Иначе
			
			//Соберем документы-основания	
			Если ВидПрикладногоРешения = "УНФ" Тогда
				//Запрос = Новый Запрос;
				//Запрос.Текст =
				//"ВЫБРАТЬ
				//|	ЕСТЬNULL(РасходнаяНакладная.Ссылка, БПАГДокументыАгентовСрезПоследних.Документ) КАК Документ,
				//|	БПАГДокументыАгентовСрезПоследних.ИД КАК ИД
				//|ИЗ
				//|	РегистрСведений.БПАГДокументыАгентов.СрезПоследних(, ИД В (&ИД)) КАК БПАГДокументыАгентовСрезПоследних
				//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходнаяНакладная КАК РасходнаяНакладная
				//|		ПО БПАГДокументыАгентовСрезПоследних.Документ = РасходнаяНакладная.Заказ";
			Иначе
				//Запрос = Новый Запрос;
				//Запрос.Текст =
				//"ВЫБРАТЬ
				//|	ЕСТЬNULL(ПоступлениеТоваровУслуг.Ссылка, БПАГДокументыАгентовСрезПоследних.Документ) КАК Документ,
				//|	БПАГДокументыАгентовСрезПоследних.ИД КАК ИД
				//|ИЗ
				//|	РегистрСведений.БПАГДокументыАгентов.СрезПоследних(, ИД В (&ИД)) КАК БПАГДокументыАгентовСрезПоследних
				//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
				//|		ПО БПАГДокументыАгентовСрезПоследних.Документ = ПоступлениеТоваровУслуг.Сделка";
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	ЕСТЬNULL(ПоступлениеТоваровУслуг.Ссылка, БПАГДокументыАгентовСрезПоследних.Документ) КАК Документ,
				|	БПАГДокументыАгентовСрезПоследних.ИД КАК ИД
				|ИЗ
				|	РегистрСведений.БПАГДокументыАгентов.СрезПоследних(, ИД В (&ИД)) КАК БПАГДокументыАгентовСрезПоследних
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
				|		ПО БПАГДокументыАгентовСрезПоследних.Документ = ПоступлениеТоваровУслуг.Ссылка";
			КонецЕсли;
			
			Запрос.УстановитьПараметр("ИД", ТЗ.ВыгрузитьКолонку("masterDocumentID"));
			ТЗДокументыПартий = Запрос.Выполнить().Выгрузить();
			
			СчетДокументов = 0;
			СчетОшибочных = 0;
			Для Каждого тмпДокумент Из ТЗ Цикл
				
				//Глобальное изменение формата - игнорируем старые документы для совместимости
				ДатаПоследнегоИзменения = Дата(тмпДокумент.date);
				Если ДатаПоследнегоИзменения < Дата(2013, 1, 15) Тогда
					Продолжить;
				КонецЕсли;
				
				ЕстьОшибки = Ложь;
				СтрокаОшибок = "";
				
				Если ТЗ.Колонки.Найти("rowCount") <> Неопределено Тогда
					Попытка 
						Если Число(тмпДокумент.rowCount) = 0 Тогда
							ЕстьОшибки = Истина;
							ОтладочноеСообщение("Возврат поставщику (номер на устройстве: " + тмпДокумент.number + ") пуст (не заполнена табличная часть). Документ проигнорирован!");
							СчетОшибочных = СчетОшибочных + 1;
							Продолжить;
						КонецЕсли;
					Исключение
						ЕстьОшибки = Истина;
						ОтладочноеСообщение("Возврат поставщику (номер на устройстве: " + тмпДокумент.number + ") пуст (не заполнена табличная часть). Документ проигнорирован!");
						СчетОшибочных = СчетОшибочных + 1;
						Продолжить;
					КонецПопытки;
				Иначе
					ЕстьОшибки = Истина;
					ОтладочноеСообщение("Возврат поставщику (номер на устройстве: " + тмпДокумент.number + ") выгружен без табличной части. Документ проигнорирован!");
					СчетОшибочных = СчетОшибочных + 1;
					Продолжить;
				КонецЕсли;
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	БПАГДокументыАгентовСрезПоследних.Документ КАК Ссылка
				|ИЗ
				|	РегистрСведений.БПАГДокументыАгентов.СрезПоследних(, ИД = &ИД) КАК БПАГДокументыАгентовСрезПоследних
				|ГДЕ
				|	БПАГДокументыАгентовСрезПоследних.ВидДокумента = &ВидДокумента";
				
				Запрос.УстановитьПараметр("ИД", тмпДокумент.uniqueID);
				Запрос.УстановитьПараметр("ВидДокумента", Перечисления.БПАГВидыДокументов.ВозвратПоставщику);
				
				ТребуетсяСоздатьИлиИзменитьДокумент = Истина;
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Попытка
						Если Выборка.Ссылка.Пустая() Тогда
							Продолжить;
						ИначеЕсли Выборка.Ссылка.Проведен Тогда
							Если НастройкиДокумента.Перепроводить Тогда
								Док = Выборка.Ссылка.ПолучитьОбъект();	
							Иначе
								ТребуетсяСоздатьИлиИзменитьДокумент = Ложь;	
								ЕстьОшибки = Истина;
								ОтладочноеСообщение("Документ " + Выборка.Ссылка + " (номер на устройстве: " + тмпДокумент.number + ") уже проведен! Перепроведение отключено в настройках.");
								СчетОшибочных = СчетОшибочных + 1;
							КонецЕсли;
						ИначеЕсли Выборка.Ссылка.ПометкаУдаления Тогда
							ТребуетсяСоздатьИлиИзменитьДокумент = Ложь;	
							ЕстьОшибки = Истина;
							ОтладочноеСообщение("Документ " + Выборка.Ссылка + " (номер на устройстве: " + тмпДокумент.number + ") был помечен на удаление в центральной базе! Документ не загружен.");
							СчетОшибочных = СчетОшибочных + 1;
						Иначе
							//Документ уже загружен, но не проведен
							Если НастройкиДокумента.ПерезаписыватьНепроведенные Тогда
								Док = Выборка.Ссылка.ПолучитьОбъект();
								ТребуетсяСоздатьИлиИзменитьДокумент = Истина;	
							Иначе
								ТребуетсяСоздатьИлиИзменитьДокумент = Ложь;	
								ЕстьОшибки = Истина;
								ОтладочноеСообщение("Документ " + Выборка.Ссылка + " (номер на устройстве: " + тмпДокумент.number + ") уже был загружен! Перезапись непроведенных документов отключена в настройках.");
								СчетОшибочных = СчетОшибочных + 1;
							КонецЕсли;	
						КонецЕсли;
					Исключение
						Продолжить;
					КонецПопытки;
				Иначе
					Если ВидПрикладногоРешения = "УТ11" Тогда
					// ***** NIY (IO)
					ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
					// ***** NIY (IO)
					Иначе
						Док = Документы.ВозвратТоваровПоставщику.СоздатьДокумент();
					КонецЕсли;
				КонецЕсли;
				
				Если ТребуетсяСоздатьИлиИзменитьДокумент Тогда
					
					//Организация
					тмпКод = тмпДокумент.companyID;
					БПАГОрганизация = Справочники.БПАГОрганизации.НайтиПоКоду(тмпКод);
					Если БПАГОрганизация.Пустая() Тогда
						ЕстьОшибки = Истина;
						СтрокаОшибок = СтрокаОшибок + "Организация с кодом " + тмпКод + " не найдена! " + Символы.ПС;
						Организация = Справочники.Организации.ПустаяСсылка();
					Иначе
						Организация = БПАГОрганизация.Организация;
					КонецЕсли;
					
					//Контрагент или партнер
					Если ВидПрикладногоРешения = "УТ11" Тогда
						тмпКод = тмпДокумент.clientID;
						БПАГКонтрагент = Справочники.БПАГКонтрагенты.НайтиПоКоду(тмпКод);
						Если БПАГКонтрагент.Пустая() Тогда
							ЕстьОшибки = Истина;
							СтрокаОшибок = СтрокаОшибок + "Партнер с кодом " + тмпКод + " не найден! " + Символы.ПС;
							Партнер = Справочники.Партнеры.ПустаяСсылка();
						Иначе
							Партнер = БПАГКонтрагент.Партнер;
						КонецЕсли;
					Иначе
						тмпКод = тмпДокумент.clientID;
						БПАГКонтрагент = Справочники.БПАГКонтрагенты.НайтиПоКоду(тмпКод);
						Если БПАГКонтрагент.Пустая() Тогда
							ЕстьОшибки = Истина;
							СтрокаОшибок = СтрокаОшибок + "Контрагент с кодом " + тмпКод + " не найден! " + Символы.ПС;
							Контрагент = Справочники.Контрагенты.ПустаяСсылка();
						Иначе
							Контрагент = БПАГКонтрагент.Контрагент;
						КонецЕсли;
					КонецЕсли;
					
					//Договор или соглашение
					Если ВидПрикладногоРешения = "УТ11" Тогда
						тмпНаименованиеСоглашения = Сред(тмпДокумент.analyticsID, СтрДлина(БПАГКонтрагент.Код) + 1);
						Соглашение = ПолучитьСоглашение(тмпНаименованиеСоглашения, Партнер);
						Если Соглашение.Пустая() Тогда
							ЕстьОшибки = Истина;
							СтрокаОшибок = СтрокаОшибок + "Соглашение с наименованием " + тмпНаименованиеСоглашения + " не найдено! " + Символы.ПС;
						КонецЕсли
					Иначе
						тмпКод = тмпДокумент.analyticsID;
						Договор = Справочники.ДоговорыКонтрагентов.НайтиПоКоду(тмпКод);
						Если Договор.Пустая() Тогда
							ЕстьОшибки = Истина;
							СтрокаОшибок = СтрокаОшибок + "Договор с кодом " + тмпКод + " не найден! " + Символы.ПС;
						КонецЕсли;	
					КонецЕсли;
					
					//Склад
					тмпКод = тмпДокумент.depotID;
					БПАГСклад = Справочники.БПАГСклады.НайтиПоКоду(тмпКод);
					Если БПАГСклад.Пустая() Тогда
						ЕстьОшибки = Истина;
						СтрокаОшибок = СтрокаОшибок + "Склад с кодом " + тмпКод + " не найден! " + Символы.ПС;
						Если ВидПрикладногоРешения = "УНФ" Тогда
							Склад = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
						Иначе
							Склад = Справочники.Склады.ПустаяСсылка();
						КонецЕсли;
					Иначе
						Склад = БПАГСклад.Склад;
					КонецЕсли;
					
					//Тип цен
					тмпКод = тмпДокумент.priceTypeID;
					БПАГПрайс = Справочники.БПАГПрайсы.НайтиПоКоду(тмпКод);
					Если БПАГПрайс.Пустая() Тогда
						ЕстьОшибки = Истина;
						СтрокаОшибок = СтрокаОшибок + "Прайс с кодом " + тмпКод + " не найден! " + Символы.ПС;
						Если (ВидПрикладногоРешения = "УТ11") ИЛИ (ВидПрикладногоРешения = "УНФ") Тогда
							ТипЦен = Справочники.ВидыЦен.ПустаяСсылка();
						Иначе
							ТипЦен = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
						КонецЕсли;
					Иначе
						ТипЦен = БПАГПрайс.ТипЦен;
					КонецЕсли;
					
					//Торговая точка
					тмпКод = тмпДокумент.posID;
					ТорговаяТочка = Справочники.БПАГТорговыеТочки.НайтиПоКоду(тмпКод);
					Если ТорговаяТочка.Пустая() Тогда
						ЕстьОшибки = Истина;
						СтрокаОшибок = СтрокаОшибок + "Торговая точка с кодом " + тмпКод + " не найдена! " + Символы.ПС;
					КонецЕсли;
					
					//Физлицо (агент)
					ФизЛицо = тмпАгент.Агент.ФизЛицо;
					
					//Номер
					Номер = тмпДокумент.number;
					
					//Сумма документа
					СуммаДокумента = Число(тмпДокумент.sum);
					
					//Дата последнего изменения
					ДатаПоследнегоИзменения = Дата(тмпДокумент.date);
					
					//Заполнение (перезаполнение) документа
					Если ВидПрикладногоРешения = "УТ11" Тогда
					// ***** NIY (IO)
					ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
					// ***** NIY (IO)
					Иначе
						
						Если СпецификаПользователя = "Sarmat" Тогда
							Док.Дата = ТекущаяДата();
						Иначе
							Док.Дата = ДатаПоследнегоИзменения;
						КонецЕсли;
						
						Док.ВалютаДокумента = мВалютаРегламентированногоУчета;
						
						Попытка
							Док.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия;
						Исключение
						КонецПопытки;
						
						Док.ДоговорКонтрагента = Договор;
						
						Док.Комментарий = ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", "Пан Агент (" + тмпАгент.Агент + ") №" + Номер) + ?(СокрЛП(тмпДокумент.comment) = "", "", ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", " (") + тмпДокумент.comment + ?(НастройкаИзКэша("1СНеПодставлятьАгентаВКомментарий", тмпАгент.Агент), "", ")"));
						
						Док.Контрагент = Контрагент;
						Док.КратностьВзаиморасчетов = 1;
						Док.КурсВзаиморасчетов = 1;
						Док.Организация = Организация;
						Док.Склад = Склад;
						Док.СуммаДокумента = СуммаДокумента;
						Док.ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;
						
						Док.Подразделение = НастройкаИзКэша("1СОсновноеПодразделение", тмпАгент.Агент);
						Выполнить("ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Док, ""Покупка"");");
						ПриИзмененииЗначенияОрганизации(Док);
						
						Док.ОтражатьВУправленческомУчете = НастройкиДокумента.ОтражатьВУУ;
						
						Попытка
							Док.ОтражатьВБухгалтерскомУчете = НастройкиДокумента.ОтражатьВБУ;
							Док.ОтражатьВНалоговомУчете = НастройкиДокумента.ОтражатьВНУ;
							ЗаполнитьЗначенияСвойств(Док, Док.ЗаполнитьСтруктуруСчетовУчетаШапки(Док.ОтражатьВБухгалтерскомУчете, Док.ОтражатьВНалоговомУчете));
						Исключение
						КонецПопытки;
						
						Док.Ответственный = ПолучитьОтветственного(тмпАгент);
						
						СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
						
						//СтруктураРеквизитовДокумента = 0;
						//Выполнить("СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(Док)");
						
						Выполнить("ЗаполнениеДокументов.УстановитьТипСделки(Док, Истина);");
						
						Док.ТипЦен = ТипЦен;
						
						//Найдем документ партии (если есть)
						ДокументПартии = "";
						НайденнаяСтрокаПартий = ТЗДокументыПартий.Найти(тмпДокумент.masterDocumentID, "ИД");
						Если НайденнаяСтрокаПартий <> Неопределено Тогда
							ДокументПартии = НайденнаяСтрокаПартий.Документ;
						КонецЕсли;
					КонецЕсли;
					
					//Загрузка табличной части
					Если ВидПрикладногоРешения = "УНФ" Тогда
						//Док.Запасы.Очистить();
					Иначе
						Док.Товары.Очистить();
					КонецЕсли;
					
					Для Каждого тмп Из тмпДокумент.rows Цикл
						тмп.sort = Число(тмп.sort);
					КонецЦикла;
					тмпДокумент.rows.Сортировать("sort");
					Для Каждого тмпСтрока Из тмпДокумент.rows Цикл
						
						//Товар
						тмпКод = тмпСтрока.goodID;
						тмпНазваниеХарактеристики = "";
						
						ПозицияРазделителяХарактеристики = Найти(тмпСтрока.goodID, ":|");
						Если ПозицияРазделителяХарактеристики > 0 Тогда
							тмпКод = Лев(тмпСтрока.goodID, ПозицияРазделителяХарактеристики - 1);
							тмпНазваниеХарактеристики = Сред(тмпСтрока.goodID, ПозицияРазделителяХарактеристики + 2);
						КонецЕсли;
						
						БПАГНоменклатура = Справочники.БПАГНоменклатура.НайтиПоКоду(тмпКод);
						Если БПАГНоменклатура.Пустая() Тогда
							ЕстьОшибки = Истина;
							СтрокаОшибок = СтрокаОшибок + "Товар с кодом " + тмпКод + " не найден! " + Символы.ПС;
							Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
						Иначе
							Номенклатура = БПАГНоменклатура.Номенклатура;
						КонецЕсли;
						
						Характеристика = ПолучитьХарактеристику(Номенклатура, тмпНазваниеХарактеристики);
						
						//Единица измерения
						тмпКоэффициент = Число(тмпСтрока.coeff);
						ЕдиницаИзмерения = ПолучитьЕдиницуИзмерения(тмпСтрока, Номенклатура, ЕстьОшибки, СтрокаОшибок);
						
						//Цена
						Цена = Число(тмпСтрока.price);
						
						//Количество
						Количество = Число(тмпСтрока.quantity);
						
						//Сумма
						Сумма = Число(тмпСтрока.sum);
						
						//Цена без скидки
						ЦенаБезСкидки = 0;
						Попытка
							ЦенаБезСкидки = Число(тмпСтрока.originalPrice);
						Исключение
						КонецПопытки;
						
						//Процент скидки
						ПроцентСкидки = 0;
						Попытка
							ПроцентСкидки = Число(тмпСтрока.discountPercent);
						Исключение
						КонецПопытки;
						
						//Сумма скидки
						СуммаСкидки = 0;
						Попытка
							СуммаСкидки = Число(тмпСтрока.discountSum);
						Исключение
						КонецПопытки;
						
						Если ВидПрикладногоРешения = "УТ11" Тогда
								// ***** NIY (IO) возврат покупателю
						ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
									// ***** NIY (IO) возврат покупателю
						Иначе
							
							Если Окр(Количество, 3) > 0 Тогда
								
								Если (Номенклатура.ВидНоменклатуры = ВидНоменклатурыТара) И (НЕ Номенклатура.ВидНоменклатуры.Пустая()) Тогда
									//Тара
									
									НоваяСтрока = Док.ВозвратнаяТара.Добавить();
									НоваяСтрока.Номенклатура = Номенклатура;
									НоваяСтрока.Количество = Количество;
									
									НоваяСтрока.Цена = Цена;
									НоваяСтрока.Сумма = Сумма;
									
									Выполнить("ОбработкаТабличныхЧастей.ПриИзмененииВозвратнойТарыТабЧасти(НоваяСтрока, Док);");
									
									Попытка
										Док.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "ВозвратнаяТара", Док.ОтражатьВБухгалтерскомУчете, Док.ОтражатьВНалоговомУчете);
									Исключение
									КонецПопытки;
									
								Иначе
									//Не тара, обычная номенклатура
								
									НоваяСтрока = Док.Товары.Добавить();
									НоваяСтрока.Номенклатура = Номенклатура;
									НоваяСтрока.Количество = Количество;
									
									Если НастройкаИзКэша("1СЗагружатьДокументыВБазовыхЕдиницах", тмпАгент.Агент) Тогда
										НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
										НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
										Если ЦенаБезСкидки = 0 Тогда
											НоваяСтрока.Цена = ?(тмпКоэффициент = 0, 0, Цена / тмпКоэффициент * НоваяСтрока.Коэффициент);
										Иначе
											НоваяСтрока.Цена = ?(тмпКоэффициент = 0, 0, ЦенаБезСкидки / тмпКоэффициент * НоваяСтрока.Коэффициент);
											НоваяСтрока.ПроцентАвтоматическихСкидок = ПроцентСкидки;
											Если ПроцентСкидки <> 0 Тогда
												НоваяСтрока.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.БезУсловий;
											КонецЕсли;
										КонецЕсли;
										НоваяСтрока.Количество = НоваяСтрока.Количество * тмпКоэффициент;
									Иначе
										НоваяСтрока.ЕдиницаИзмерения = ЕдиницаИзмерения;
										НоваяСтрока.Коэффициент = ЕдиницаИзмерения.Коэффициент;
										Если ЦенаБезСкидки = 0 Тогда
											НоваяСтрока.Цена = Цена;
										Иначе
											НоваяСтрока.Цена = ЦенаБезСкидки;
											НоваяСтрока.ПроцентАвтоматическихСкидок = ПроцентСкидки;
											Если ПроцентСкидки <> 0 Тогда
												НоваяСтрока.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.БезУсловий;
											КонецЕсли;
										КонецЕсли;
									КонецЕсли;
									
									НоваяСтрока.Сумма = Сумма;
									НоваяСтрока.ДокументПоступления = ДокументПартии;
									НоваяСтрока.Качество = Справочники.Качество.Новый;
									
									// Выполнить общие действия для всех документов при изменении номенклатуры.
									Выполнить("ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НоваяСтрока, Док);");
									
									Попытка
										Док.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", Док.ОтражатьВБухгалтерскомУчете, Док.ОтражатьВНалоговомУчете);
									Исключение
									КонецПопытки;
									
									// Заполняем реквизиты табличной части.
									Попытка
										Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, Док, ""Реализация"");");
									Исключение
										Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, Док);");
									КонецПопытки;
									
									// Рассчитать реквизиты табличной части.
									Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, Док);");
									Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, Док);");
									
									Попытка
									НоваяСтрока.КлючСтроки = НоваяСтрока.НомерСтроки;
									Исключение
									КонецПопытки;
									// Ввод состава набора
									//Выполнить("УправлениеЗапасами.ДобавитьСоставНабора(НоваяСтрока, Док);");
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					////Проверим заполнение цен комплектующих и установим в 1 рубль, если отсутствуют
					//Если ВидПрикладногоРешения = "УТ10" Тогда
					//	Для Каждого тмпСтрока Из Док.СоставНабора Цикл
					//		Если тмпСтрока.Цена = 0 Тогда
					//			тмпСтрока.Цена = 1;
					//		КонецЕсли;
					//	КонецЦикла;
					//КонецЕсли;
					
					// Если есть категории "PostUU", "PostBU", "DontPostUU", "DontPostBU", то соответствующим образом проставим отражения в учетах
					УстановитьСпособыОтраженияВУчетах(тмпДокумент, Док);
					
					СчетДокументов = СчетДокументов + 1;
					Если ЕстьОшибки Тогда
						//Док.ОбменДанными.Загрузка = Истина;
						Док.Записать(РежимЗаписиДокумента.Запись);	
						ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Возврат поставщику " + Номер + " (Возврат товаров поставщику " + Док.Номер + ") - возникли ошибки при загрузке: ");
						ОтладочноеСообщение(СтрокаОшибок);
						
						СчетОшибочных = СчетОшибочных + 1;
						
					Иначе	
						//Док.ОбменДанными.Загрузка = Истина;
						Попытка
							Док.Записать(?(НастройкиДокумента.Проводить, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
						Исключение
							ЕстьОшибки = Истина;
							СчетОшибочных = СчетОшибочных + 1;
							ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Возврат поставщику " + Номер + " (Возврат товаров поставщику " + Док.Номер + ") - возникли ошибки при загрузке: ");
							ОтладочноеСообщение(ОписаниеОшибки());
							Попытка
								Док.Записать(РежимЗаписиДокумента.Запись);
							Исключение
								ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Возврат поставщику " + Номер + " (Возврат товаров поставщику " + Док.Номер + ") - возникли ошибки при загрузке: ");
								ОтладочноеСообщение(ОписаниеОшибки());
							КонецПопытки;
						КонецПопытки;
						
					КонецЕсли;
					
					//Свойства и категории
					УстановитьСвойстваИКатегории(тмпДокумент, Док);
					
					//Запишем данные в служебный регистр
					НоваяЗаписьДокументыАгентов = РегистрыСведений.БПАГДокументыАгентов.СоздатьМенеджерЗаписи();
					НоваяЗаписьДокументыАгентов.ВидДокумента = Перечисления.БПАГВидыДокументов.ВозвратПоставщику;
					
					НоваяЗаписьДокументыАгентов.Период = ТекущаяДата();
					НоваяЗаписьДокументыАгентов.Агент = тмпАгент.Агент;
					НоваяЗаписьДокументыАгентов.Документ = Док.Ссылка;
					НоваяЗаписьДокументыАгентов.ТорговаяТочка = ТорговаяТочка;
					НоваяЗаписьДокументыАгентов.ДатаСозданияНаУстройстве = Дата(тмпДокумент.createdDate);
					НоваяЗаписьДокументыАгентов.ДатаИзмененияНаУстройстве = Дата(тмпДокумент.modifiedDate);
					
					НоваяЗаписьДокументыАгентов.ИД = тмпДокумент.uniqueID;
					НоваяЗаписьДокументыАгентов.НомерДокументаНаУстройстве = Номер;
					НоваяЗаписьДокументыАгентов.ШиротаСоздания = Число(тмпДокумент.createdLatitude);
					НоваяЗаписьДокументыАгентов.ДолготаСоздания = Число(тмпДокумент.createdLongitude);
					НоваяЗаписьДокументыАгентов.ШиротаИзменения = Число(тмпДокумент.modifiedLatitude);
					НоваяЗаписьДокументыАгентов.ДолготаИзменения = Число(тмпДокумент.modifiedLongitude);
					НоваяЗаписьДокументыАгентов.МоментСозданияПоGPS = ?(тмпДокумент.createdLocationDate = "", 0, Дата(тмпДокумент.createdLocationDate));
					НоваяЗаписьДокументыАгентов.МоментИзмененияПоGPS = ?(тмпДокумент.modifiedLocationDate = "", 0, Дата(тмпДокумент.modifiedLocationDate));
					
					//Последняя проверка на то, что документ не пуст
					Если СокрЛП(НоваяЗаписьДокументыАгентов.Документ) = "" Тогда
						ОтладочноеСообщение("(!!!) Критическая ошибка базы данных. Обнаружена пустая ссылка на документ.");
						#Если Клиент Тогда
							Предупреждение("Критическая ошибка базы данных. Обнаружена пустая ссылка на документ. Обратитесь к системному администратору. Подробности зафиксированы в журнале (каталог logs папки обмена).", 10);
						#КонецЕсли
					Иначе	
						НоваяЗаписьДокументыАгентов.Записать();
					КонецЕсли;
					
				КонецЕсли;				
			КонецЦикла;
		КонецЕсли;
		
		ОтладочноеСообщение("Агент: " + тмпАгент.Агент + ": Загружено возвратов поставщику: " + СчетДокументов + "." +?(СчетОшибочных > 0, " Из них с ошибками: " + СчетОшибочных, " Без ошибок."));
	КонецЦикла;
	
КонецПроцедуры

//ВариантОбмена - "Выгрузка", "Загрузка", их сочетание
//ОбъектыОбмена - "Товары", "Остатки", "Все", их сочетание
Функция МодульОбъектаОбменДанными(ВариантОбмена, ОбъектыОбмена, Агенты) Экспорт
	
	ТЗЗаголовок = Новый ТаблицаЗначений;
	ТЗЗаголовок.Колонки.Добавить("Агент");
	ТЗЗаголовок.Колонки.Добавить("Имя");
	ТЗЗаголовок.Колонки.Добавить("Значение");
	
	ИнициализироватьКэшФайловВыгрузки();
	ОбновитьСтруктуруДанныхСистемы();
	
	СпецификаПользователя = БПАГ.ПолучитьСпецификуПользователя();
	ОбновитьКэшНастроекАгентов();
	
	ВидАдресаДоставки = НастройкаИзКэша("1СВидАдресаДоставки");
	
	Лог = Новый ТекстовыйДокумент;
	
	//Проверим пути
	Путь = КаталогОбмена;
	Файл = Новый Файл(Путь);
	Если НЕ Файл.Существует() Тогда
		ОтладочноеСообщение("ВНИМАНИЕ! Каталог " + Путь + " не существует! Выгрузка невозможна. Измените в настройках обмена путь к каталогу обмена на правильный!");
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого тмпСтрока Из Агенты Цикл
		Путь = КаталогОбмена + СокрЛП(тмпСтрока.Код) + "\";
		Файл = Новый Файл(Путь);
		Если НЕ Файл.Существует() Тогда
			Попытка
				СоздатьКаталог(Путь);
				ОтладочноеСообщение("Создан новый каталог для агента: " + Путь);
			Исключение
				ОтладочноеСообщение("Каталог для агента не создан: " + ОписаниеОшибки());
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
		
		Путь = КаталогОбмена + СокрЛП(тмпСтрока.Код) + "\Images\";
		Файл = Новый Файл(Путь);
		Если НЕ Файл.Существует() Тогда
			Попытка
				СоздатьКаталог(Путь);
				ОтладочноеСообщение("Создан новый каталог для агента: " + Путь);
			Исключение
				ОтладочноеСообщение("Каталог для агента не создан: " + ОписаниеОшибки());
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
		
		Путь = КаталогОбмена + СокрЛП(тмпСтрока.Код) + "\Logs\";
		Файл = Новый Файл(Путь);
		Если НЕ Файл.Существует() Тогда
			Попытка
				СоздатьКаталог(Путь);
				ОтладочноеСообщение("Создан новый каталог для агента: " + Путь);
			Исключение
				ОтладочноеСообщение("Каталог для агента не создан: " + ОписаниеОшибки());
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
		
		Путь = КаталогОбмена + СокрЛП(тмпСтрока.Код) + "\tmpFromDeviceUnzipped\";
		Файл = Новый Файл(Путь);
		Если НЕ Файл.Существует() Тогда
			Попытка
				СоздатьКаталог(Путь);
				ОтладочноеСообщение("Создан новый каталог для агента: " + Путь);
			Исключение
				ОтладочноеСообщение("Каталог для агента не создан: " + ОписаниеОшибки());
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
		
		Путь = КаталогОбмена + СокрЛП(тмпСтрока.Код) + "\tmpFromDeviceUnzippedBackup\";
		Файл = Новый Файл(Путь);
		Если НЕ Файл.Существует() Тогда
			Попытка
				СоздатьКаталог(Путь);
				ОтладочноеСообщение("Создан новый каталог для агента: " + Путь);
			Исключение
				ОтладочноеСообщение("Каталог для агента не создан: " + ОписаниеОшибки());
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если Найти(ВариантОбмена, "Загрузка") > 0 Тогда
		
		//Поиск и распаковка
		Для Каждого тмпСтрока Из Агенты Цикл
			Путь = КаталогОбмена + СокрЛП(тмпСтрока.Код) + "\";
			
			Если НастройкаИзКэша("1СИспользоватьВнешнийFTP") Тогда
				ОтладочноеСообщение("Получение файлов c FTP началось " + ТекущаяДата());
				
				Попытка
					Если НастройкаИзКэша("allowBackgroundGPSTracking", тмпСтрока.Агент) И (НастройкаИзКэша("logSyncInterval", тмпСтрока.Агент) > 0) Тогда
						Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Журнал работы агента") > 0) Тогда
							Таймаут = Макс(Число(НастройкаИзКэша("1СТаймаутFTP")), 10);
							ФТП = Новый FTPСоединение(АдресВнешнегоFTP, , ЛогинВнешнегоFTP, ПарольВнешнегоFTP, ПроксиСервер, , Таймаут);
							
							НайденныеФайлы = ФТП.НайтиФайлы(СокрЛП(тмпСтрока.Код) + "/Logs/" + "*.zip");
							Если НайденныеФайлы.Количество() > 0 Тогда
								Для Каждого тмпФайл Из НайденныеФайлы Цикл
									ФТП.Получить(СокрЛП(тмпСтрока.Код) + "/Logs/" + тмпФайл.Имя,  Путь + "/Logs/" + тмпФайл.Имя);
									ФТП.Удалить(СокрЛП(тмпСтрока.Код) + "/Logs/" + тмпФайл.Имя);
									//ОтладочноеСообщение("Получен файл журнала " + тмпСтрока.Агент + " " + тмпФайл.Имя);
								КонецЦикла;
							Иначе
								ОтладочноеСообщение("Журналы работы агента " + тмпСтрока.Агент + " не выгружались с устройства.");
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Исключение
					ОтладочноеСообщение("Ошибка работы с FTP: Журнал для " + тмпСтрока.Агент + " не получен:" + ОписаниеОшибки());
				КонецПопытки;
					
				Попытка
					Таймаут = Макс(Число(НастройкаИзКэша("1СТаймаутFTP")), 10);
					ФТП = Новый FTPСоединение(АдресВнешнегоFTP, , ЛогинВнешнегоFTP, ПарольВнешнегоFTP, ПроксиСервер, , Таймаут);
					
					НайденныеФайлы = ФТП.НайтиФайлы(СокрЛП(тмпСтрока.Код) + "/" + "fromDevice.zip");
					Если НайденныеФайлы.Количество() > 0 Тогда
						ФТП.Получить(СокрЛП(тмпСтрока.Код) + "/" + "fromDevice.zip",  Путь + "fromDevice.zip");
						ФТП.Удалить(СокрЛП(тмпСтрока.Код) + "/" + "fromDevice.zip");
					Иначе
						ОтладочноеСообщение("Информация агента " + тмпСтрока.Агент + " не выгружалась с устройства.");
						Продолжить;
					КонецЕсли;
					
				Исключение
					ОтладочноеСообщение("Ошибка работы с FTP: Информация для " + тмпСтрока.Агент + " не получена:" + ОписаниеОшибки());
					Продолжить;	
				КонецПопытки;
				
				ОтладочноеСообщение("Получение файлов c FTP завершено " + ТекущаяДата());
				
			КонецЕсли;
			
			Попытка
				ФайлЗагрузки = Новый Файл(Путь + "fromDevice.zip");
				Если ФайлЗагрузки.Существует() Тогда
					//Удалим старые файлы
					УдалитьФайлы(Путь + "tmpFromDeviceUnzipped\", "*.*");
					
					ПарольАрхива = СокрЛП(НастройкаИзКэша("1СПарольАрхивов"));
					
					Распаковщик = Новый ЧтениеZipФайла(Путь + "fromDevice.zip", ПарольАрхива);
					Распаковщик.ИзвлечьВсе(Путь + "tmpFromDeviceUnzipped\");
					БППереместитьФайл(Путь + "fromDevice.zip", Путь + "tmpFromDeviceUnzippedBackup\fromDevice.zip");
				Иначе
					ОтладочноеСообщение("Информация агента " + тмпСтрока.Агент + " не выгружалась с устройства.");
					Продолжить;
				КонецЕсли;
			Исключение
				ОтладочноеСообщение("" + тмпСтрока.Код + ": Распаковка не удалась: " + ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;
		ОтладочноеСообщение("Распаковка файлов завершена " + ТекущаяДата());
		
		ОтладочноеСообщение("Загрузка началась " + ТекущаяДата());
		
		
		ОтладочноеСообщение("Загрузка заголовка началась " + ТекущаяДата());
		
		ЗагрузитьЗаголовок(Агенты);
		
		МодульОбъектаОбновитьСписокАгентов();
		
		ОтладочноеСообщение("Загрузка заголовка завершена " + ТекущаяДата());
		
		
		Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Реализация") > 0) Тогда
			ОтладочноеСообщение("Загрузка реализаций началась " + ТекущаяДата());
			ЗагрузитьРеализации(Агенты);
			ОтладочноеСообщение("Загрузка реализаций завершена " + ТекущаяДата());
		КонецЕсли;
		
		Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Заявка") > 0) Тогда
			ОтладочноеСообщение("Загрузка заявок началась " + ТекущаяДата());
			ЗагрузитьЗаявки(Агенты);
			ОтладочноеСообщение("Загрузка заявок завершена " + ТекущаяДата());
		КонецЕсли;
		
		Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Возврат от покупателя") > 0) Тогда
			ОтладочноеСообщение("Загрузка возвратов от покупателей началась " + ТекущаяДата());
			ЗагрузитьВозвратыОтПокупателей(Агенты);
			ОтладочноеСообщение("Загрузка возвратов от покупателей завершена " + ТекущаяДата());
		КонецЕсли;
		
		Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "ПКО") > 0) Тогда
			ОтладочноеСообщение("Загрузка ПКО началась " + ТекущаяДата());
			ЗагрузитьПКО(Агенты);
			ОтладочноеСообщение("Загрузка ПКО завершена " + ТекущаяДата());
		КонецЕсли;
		
		Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Анкета") > 0) Тогда
			ОтладочноеСообщение("Загрузка анкет началась " + ТекущаяДата());
			ЗагрузитьАнкеты(Агенты);
			ОтладочноеСообщение("Загрузка анкет завершена " + ТекущаяДата());
		КонецЕсли;
		
		Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Заказ на склад") > 0) Тогда
			ОтладочноеСообщение("Загрузка заказов на склад началась " + ТекущаяДата());
			ЗагрузитьЗаказыНаСклад(Агенты);
			ОтладочноеСообщение("Загрузка заказов на склад завершена " + ТекущаяДата());
		КонецЕсли;
		
		Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Поступление") > 0) Тогда
			ОтладочноеСообщение("Загрузка поступлений началась " + ТекущаяДата());
			ЗагрузитьПоступления(Агенты);
			ОтладочноеСообщение("Загрузка поступлений завершена " + ТекущаяДата());
		КонецЕсли;
		
		Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Мерчандайзинг") > 0) Тогда
			ОтладочноеСообщение("Загрузка документов мерчандайзинга началась " + ТекущаяДата());
			ЗагрузитьМерчандайзинг(Агенты);
			ОтладочноеСообщение("Загрузка документов мерчандайзинга завершена " + ТекущаяДата());
		КонецЕсли;
		
		Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "РКО") > 0) Тогда
			ОтладочноеСообщение("Загрузка РКО началась " + ТекущаяДата());
			ЗагрузитьРКО(Агенты);
			ОтладочноеСообщение("Загрузка РКО завершена " + ТекущаяДата());
		КонецЕсли;
		
		Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Возврат поставщику") > 0) Тогда
			ОтладочноеСообщение("Загрузка возвратов от покупателей началась " + ТекущаяДата());
			ЗагрузитьВозвратыПоставщикам(Агенты);
			ОтладочноеСообщение("Загрузка возвратов от покупателей завершена " + ТекущаяДата());
		КонецЕсли;
		
		Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Координаты клиентов") > 0) Тогда
			ОтладочноеСообщение("Загрузка координат клиентов началась " + ТекущаяДата());
			ЗагрузитьКоординатыКлиентов(Агенты);
			ОтладочноеСообщение("Загрузка координат клиентов завершена " + ТекущаяДата());
		КонецЕсли;
		
		Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Фото организаций") > 0) Тогда
			ОтладочноеСообщение("Загрузка фотографий организаций началась " + ТекущаяДата());
			ЗагрузитьФото(Агенты, "Организации");
			ОтладочноеСообщение("Загрузка фотографий организаций завершена " + ТекущаяДата());
		КонецЕсли;
		
		Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Фото торговых точек") > 0) Тогда
			ОтладочноеСообщение("Загрузка фотографий торговых точек началась " + ТекущаяДата());
			ЗагрузитьФото(Агенты, "ТорговыеТочки");
			ОтладочноеСообщение("Загрузка фотографий торговых точек завершена " + ТекущаяДата());
		КонецЕсли;
		
		Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Фото товаров") > 0) Тогда
			ОтладочноеСообщение("Загрузка фотографий товаров началась " + ТекущаяДата());
			ЗагрузитьФото(Агенты, "Товары");
			ОтладочноеСообщение("Загрузка фотографий товаров завершена " + ТекущаяДата());
		КонецЕсли;
		
		Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Фото анкет") > 0) Тогда
			ОтладочноеСообщение("Загрузка фотографий анкет началась " + ТекущаяДата());
			ЗагрузитьФото(Агенты, "Анкеты");
			ОтладочноеСообщение("Загрузка фотографий анкет завершена " + ТекущаяДата());
		КонецЕсли;
		
		Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Журнал работы агента") > 0) Тогда
			ОтладочноеСообщение("Загрузка журнала работы агента " + ТекущаяДата());
			ЗагрузитьЖурналРаботы(Агенты);
			ОтладочноеСообщение("Загрузка журнала работы агента завершена " + ТекущаяДата());
		КонецЕсли;
		
		Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Фото агентов") > 0) Тогда
			ОтладочноеСообщение("Загрузка фото агентов " + ТекущаяДата());
			ЗагрузитьФото(Агенты,"Агентов");
			ОтладочноеСообщение("Загрузка фото агентов завершена " + ТекущаяДата());
		КонецЕсли;
		
		ОтладочноеСообщение("Выгрузка статусов началась " + ТекущаяДата());
		ВыгрузитьСтатусы(Агенты);
		ОтладочноеСообщение("Выгрузка статусов завершена " + ТекущаяДата());
		ЗаписатьФайлыСтатусов(Агенты);
		
		ОтладочноеСообщение("Загрузка завершена " + ТекущаяДата());
	КонецЕсли;
	
	Если Найти(ВариантОбмена, "Выгрузка") > 0 Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ТЗКартинки.Очистить();
		
		ОтладочноеСообщение("Выгрузка началась " + ТекущаяДата());
		
		ОтладочноеСообщение("Формирование произвольных отчетов началось " + ТекущаяДата());
		БПАГ.СформироватьПроизвольныеОтчеты();
		ОтладочноеСообщение("Формирование произвольных отчетов завершено " + ТекущаяДата());
		
		Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Настройки") > 0) Тогда
			ВыгрузитьЗаголовок(Агенты);
		КонецЕсли;
		
		Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Вопросы анкет") > 0) Тогда
			ОтладочноеСообщение("Выгрузка вопросов анкет началась " + ТекущаяДата());
			ВыгрузитьВопросыАнкет(Агенты);
			ОтладочноеСообщение("Выгрузка вопросов анкет завершена " + ТекущаяДата());
		КонецЕсли;
		
		Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Товары") > 0) Тогда
			ОтладочноеСообщение("Выгрузка товаров началась " + ТекущаяДата());
			ВыгрузитьТовары(Агенты);
			ОтладочноеСообщение("Выгрузка товаров завершена " + ТекущаяДата());
		КонецЕсли;
		
		Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Цены") > 0) Тогда
			ОтладочноеСообщение("Выгрузка цен началась " + ТекущаяДата());
			ВыгрузитьЦены(Агенты);
			ОтладочноеСообщение("Выгрузка цен завершена " + ТекущаяДата());
		КонецЕсли;
		
		Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Остатки") > 0) Тогда
			ОтладочноеСообщение("Выгрузка остатков началась " + ТекущаяДата());
			МодульОбъектаСинхронизироватьОстатки();
			ВыгрузитьОстатки(Агенты);
			ОтладочноеСообщение("Выгрузка остатков завершена " + ТекущаяДата());
		КонецЕсли;
		
		Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Картинки товаров") > 0) Тогда
			ОтладочноеСообщение("Выгрузка картинок товаров началась " + ТекущаяДата());
			ВыгрузитьКартинкиТоваров(Агенты);
			ОтладочноеСообщение("Выгрузка картинок товаров завершена " + ТекущаяДата());
		КонецЕсли;
		
		Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Клиенты") > 0) Тогда
			ОтладочноеСообщение("Выгрузка клиентов началась " + ТекущаяДата());
			ВыгрузитьКлиентов(Агенты);
			ОтладочноеСообщение("Выгрузка клиентов завершена " + ТекущаяДата());
		КонецЕсли;
		
		Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Картинки клиентов") > 0) Тогда
			ОтладочноеСообщение("Выгрузка картинок клиентов началась " + ТекущаяДата());
			ВыгрузитьКартинкиКлиентов(Агенты);
			ОтладочноеСообщение("Выгрузка картинок клиентов завершена " + ТекущаяДата());
		КонецЕсли;
		
		Если СпецификаПользователя = "SD" Тогда
			Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Долги") > 0) Тогда
				ОтладочноеСообщение("Выгрузка долгов началась " + ТекущаяДата());
				МодульОбъектаСинхронизироватьДолгиАгентов(Агенты);
				ВыгрузитьДолги(Агенты);
				ОтладочноеСообщение("Выгрузка долгов завершена " + ТекущаяДата());
			КонецЕсли;
		Иначе	
			Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Долги") > 0) Тогда
				ОтладочноеСообщение("Выгрузка долгов началась " + ТекущаяДата());
				МодульОбъектаСинхронизироватьДолги();
				ВыгрузитьДолги(Агенты);
				ОтладочноеСообщение("Выгрузка долгов завершена " + ТекущаяДата());
			КонецЕсли;
		КонецЕсли;
		
		
		Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Склады") > 0) Тогда
			ВыгрузитьСклады(Агенты);
		КонецЕсли;
		
		Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Организации") > 0) Тогда
			ВыгрузитьОрганизации(Агенты);
		КонецЕсли;
		
		Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Планы") > 0) Тогда
			ВыгрузитьПланы(Агенты);
		КонецЕсли;
		
		Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Фактические продажи") > 0) Тогда
			ВыгрузитьФактическиеПродажи(Агенты);
		КонецЕсли;
		
		Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Фактическая история продаж") > 0) Тогда
			ВыгрузитьИсториюПродаж(Агенты);
		КонецЕсли;
		
		Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Прогноз продаж") > 0) Тогда
			ВыгрузитьПрогнозПродаж(Агенты);
		КонецЕсли;
		
		Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Заявки") > 0) Тогда
			ВыгрузитьЗаявки(Агенты);
		КонецЕсли;
		
		Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Реализации") > 0) Тогда
			ВыгрузитьРеализации(Агенты);
		КонецЕсли;
		
		Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Поступления") > 0) Тогда
			ВыгрузитьПоступления(Агенты);
		КонецЕсли;
		
		Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Перемещения") > 0) Тогда
			ВыгрузитьПеремещения(Агенты);
		КонецЕсли;
		
		Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Анкеты") > 0) Тогда
			ВыгрузитьАнкеты(Агенты);
		КонецЕсли;
		
		//Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Мерчандайзинг") > 0) Тогда
		//	ВыгрузитьМерчандайзинг(Агенты);
		//КонецЕсли;
		
		Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Маршруты") > 0) Тогда
			ОтладочноеСообщение("Выгрузка маршрутов началась " + ТекущаяДата());
			ВыгрузитьМаршруты(Агенты);
			ОтладочноеСообщение("Выгрузка маршрутов завершена " + ТекущаяДата());
		КонецЕсли;
		
		Если (ОбъектыОбмена = "Все") ИЛИ (Найти(ОбъектыОбмена, "Статусы документов") > 0) Тогда
			ОтладочноеСообщение("Выгрузка статусов началась " + ТекущаяДата());
			ВыгрузитьСтатусы(Агенты);
			ОтладочноеСообщение("Выгрузка статусов завершена " + ТекущаяДата());
		КонецЕсли;
		
		ЗаписатьФайлыСтатусов(Агенты);
		
		ОтладочноеСообщение("Запись файлов началась " + ТекущаяДата());
		Для Каждого тмпСтрока Из Агенты Цикл
			Путь = КаталогОбмена + СокрЛП(тмпСтрока.Код) + "\";
			
			Попытка
				ПарольАрхива = СокрЛП(НастройкаИзКэша("1СПарольАрхивов"));
				
				Упаковщик = Новый ЗаписьZipФайла(Путь + "toDevice.zip", ПарольАрхива);
				Попытка
					Упаковщик.Добавить(Путь + "*.plist");
				Исключение
				КонецПопытки;
				
				Попытка
					Упаковщик.Добавить(Путь + "*.html");
				Исключение
				КонецПопытки;
				
				Попытка
					Упаковщик.Добавить(Путь + "*.css");
				Исключение
				КонецПопытки;
				
				Попытка
					Упаковщик.Добавить(Путь + "*.js");
				Исключение
				КонецПопытки;
				
				Упаковщик.Записать();
				
			Исключение
				ОтладочноеСообщение(ОписаниеОшибки());
				Продолжить;				
			КонецПопытки;
			
			Если НастройкаИзКэша("1СИспользоватьВнешнийFTP") Тогда
				Попытка
					Таймаут = Макс(Число(НастройкаИзКэша("1СТаймаутFTP")), 10);
					ФТП = Новый FTPСоединение(АдресВнешнегоFTP, , ЛогинВнешнегоFTP, ПарольВнешнегоFTP, ПроксиСервер, , Таймаут);
					
					МассивФайлов = ФТП.НайтиФайлы(СокрЛП(тмпСтрока.Код));
					Если МассивФайлов.Количество() = 0 Тогда //Создадим каталог на FTP
						ФТП.СоздатьКаталог(СокрЛП(тмпСтрока.Код));
					КонецЕсли;
					
					МассивФайлов = ФТП.НайтиФайлы(СокрЛП(тмпСтрока.Код) + "/" + "Images");
					Если МассивФайлов.Количество() = 0 Тогда //Создадим каталог картинок на FTP
						ФТП.СоздатьКаталог(СокрЛП(тмпСтрока.Код) + "\" + "Images");
					КонецЕсли;
					
					ФТП.Записать(Путь + "toDevice.zip", СокрЛП(тмпСтрока.Код) + "\" + "toDevice.zip");
				Исключение
					ОтладочноеСообщение("Ошибка работы с FTP: Информация для " + тмпСтрока.Агент + " не отправлена:" + ОписаниеОшибки());
					Продолжить;	
				КонецПопытки;
			КонецЕсли;
			
		КонецЦикла;
		ОтладочноеСообщение("Запись файлов завершена " + ТекущаяДата());
		
		//Выгрузим файлы картинок на FTP
		Если НастройкаИзКэша("1СИспользоватьВнешнийFTP") Тогда
			Если Найти(ОбъектыОбмена, "Файлы картинок") > 0 Тогда
				Попытка
					ОтладочноеСообщение("Выгрузка файлов картинок на FTP началась " + ТекущаяДата());
					
					Путь = КаталогОбмена + "Images\";
					
					Таймаут = Макс(Число(НастройкаИзКэша("1СТаймаутFTP")), 10);
					ФТП = Новый FTPСоединение(АдресВнешнегоFTP, , ЛогинВнешнегоFTP, ПарольВнешнегоFTP, ПроксиСервер, , Таймаут);
					
					МассивФайлов = ФТП.НайтиФайлы("Images");
					Если МассивФайлов.Количество() = 0 Тогда //Создадим каталог на FTP
						ФТП.СоздатьКаталог("Images");
					КонецЕсли;
					
					МассивФайлов = ФТП.НайтиФайлы("Images", "*.*");
					
					СуществующиеФайлы = Новый ТаблицаЗначений;
					СуществующиеФайлы.Колонки.Добавить("Имя");
					СуществующиеФайлы.Колонки.Добавить("Размер");
					Для Каждого тмпЗначение Из МассивФайлов Цикл
						НоваяСтрока = СуществующиеФайлы.Добавить();
						НоваяСтрока.Имя = тмпЗначение.Имя;
						НоваяСтрока.Размер = тмпЗначение.Размер();
					КонецЦикла;
					
					ТЗКартинки.Свернуть("Имя, Размер");
					ТЗКартинки.Сортировать("Имя");
					
					Счет = 0;
					ПрогрессорВсего = ТЗКартинки.Количество();
					Для Каждого тмпКартинка Из ТЗКартинки Цикл
						Счет = Счет + 1;
						БПАГ.глПрогрессор(тмпКартинка.Имя, ПрогрессорВсего, Счет);
						СуществующийФайл = СуществующиеФайлы.Найти(тмпКартинка.Имя, "Имя");
						Если СуществующийФайл = Неопределено Тогда
							Файл = Новый Файл(Путь + тмпКартинка.Имя);
							Если Файл.Существует() Тогда
								ФТП.Записать(Путь + тмпКартинка.Имя, "Images\" + тмпКартинка.Имя);
							КонецЕсли;
						Иначе
							//Файл уже есть на FTP. Проверим размер
							Файл = Новый Файл(Путь + тмпКартинка.Имя);
							Если Файл.Существует() Тогда
								Если СуществующийФайл.Размер <> тмпКартинка.Размер Тогда
									ФТП.Записать(Путь + тмпКартинка.Имя, "Images\" + тмпКартинка.Имя);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					ОтладочноеСообщение("Выгрузка файлов картинок на FTP завершена " + ТекущаяДата());
				Исключение
					ОтладочноеСообщение("Ошибка работы с FTP при выгрузке файлов картинок: " + ОписаниеОшибки());
				КонецПопытки;	
			КонецЕсли;
		КонецЕсли;
		
		ОтладочноеСообщение("Выгрузка завершена " + ТекущаяДата());
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Путь = КаталогОбмена + "logs\";
	Файл = Новый Файл(Путь);
	Если НЕ Файл.Существует() Тогда
		Попытка
			СоздатьКаталог(Путь);
			ОтладочноеСообщение("Создан новый каталог файлов журнала: " + Путь);
		Исключение
			ОтладочноеСообщение("Каталог файлов журнала не создан: " + ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	ИмяФайла = Путь + "log " + Формат(ТекущаяДата(), "ДФ='yyyy.MM.dd HH-mm-ss'")  + ".txt";
	Лог.Записать(ИмяФайла);
	Лог = Новый ТекстовыйДокумент;
	
	Возврат Истина;	
КонецФункции

//Обновляет список агентов для обмена данными
Процедура МодульОбъектаОбновитьСписокАгентов() Экспорт
	ТЗСтарые = ОбменАгенты.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БПАГАгенты.Ссылка КАК Агент,
	|	БПАГАгенты.*
	|ИЗ
	|	Справочник.БПАГАгенты КАК БПАГАгенты
	|ГДЕ
	|	НЕ БПАГАгенты.ПометкаУдаления
	|	И НЕ БПАГАгенты.ЭтоГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	БПАГАгенты.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ОбменАгенты.Очистить();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ОбменАгенты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		СтараяСтрока = ТЗСтарые.Найти(НоваяСтрока.Агент, "Агент");
		Если СтараяСтрока <> Неопределено Тогда
			НоваяСтрока.Флаг = СтараяСтрока.Флаг;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Устанавливает или снимает флажки
Процедура МодульОбъектаГрупповаяОтметкаАгентовОбмена(Включить) Экспорт
	ТЗ = ОбменАгенты.Выгрузить();
	ТЗ.ЗаполнитьЗначения(Включить, "Флаг");
	ОбменАгенты.Загрузить(ТЗ);
КонецПроцедуры

Процедура МодульОбъектаСинхронизироватьОстатки() Экспорт
	
	ВидПрикладногоРешения = БПАГ.ПолучитьВидПрикладногоРешения();
	
	ОбновитьКэшНастроекАгентов();
	
	//Остатки товаров
	Запрос = Новый Запрос;
	
	Если ВидПрикладногоРешения = "УНФ" Тогда
		
		Если 1=2 И (НЕ НастройкаИзКэша("1СОстаткиБезУчетаСкладов")) И (НЕ НастройкаИзКэша("1СОстаткиБезУчетаОрганизаций")) Тогда
			//По складам и организациям
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БПАГНоменклатура.Ссылка КАК Номенклатура,
			|	БПАГОрганизации.Ссылка КАК Организация,
			|	БПАГСклады.Ссылка КАК Склад,
			|	СУММА(ЗапасыНаСкладахОстатки.КоличествоОстаток) КАК Количество
			|ИЗ
			|	РегистрНакопления.ЗапасыНаСкладах.Остатки КАК ЗапасыНаСкладахОстатки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГНоменклатура КАК БПАГНоменклатура
			|		ПО ЗапасыНаСкладахОстатки.Номенклатура = БПАГНоменклатура.Номенклатура
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГСклады КАК БПАГСклады
			|		ПО ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница = БПАГСклады.Склад
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГОрганизации КАК БПАГОрганизации
			|		ПО ЗапасыНаСкладахОстатки.Организация = БПАГОрганизации.Организация
			|ГДЕ
			|	НЕ БПАГНоменклатура.ПометкаУдаления
			|	И НЕ БПАГОрганизации.ПометкаУдаления
			|	И НЕ БПАГСклады.ПометкаУдаления
			|
			|СГРУППИРОВАТЬ ПО
			|	БПАГНоменклатура.Ссылка,
			|	БПАГОрганизации.Ссылка,
			|	БПАГСклады.Ссылка";
			
		ИначеЕсли 1=2 ИЛИ (НастройкаИзКэша("1СОстаткиБезУчетаСкладов")) И (НастройкаИзКэша("1СОстаткиБезУчетаОрганизаций")) Тогда
			//Без разрезов
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БПАГНоменклатура.Ссылка КАК Номенклатура,
			|	NULL КАК Организация,
			|	NULL КАК Склад,
			|	СУММА(ЗапасыНаСкладахОстатки.КоличествоОстаток) КАК Количество
			|ИЗ
			|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки КАК ЗапасыНаСкладахОстатки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГНоменклатура КАК БПАГНоменклатура
			|		ПО ЗапасыНаСкладахОстатки.Номенклатура = БПАГНоменклатура.Номенклатура
			|ГДЕ
			|	НЕ БПАГНоменклатура.ПометкаУдаления
			|
			|СГРУППИРОВАТЬ ПО
			|	БПАГНоменклатура.Ссылка";
			
			
		ИначеЕсли 1=2 И (НЕ НастройкаИзКэша("1СОстаткиБезУчетаСкладов")) И (НастройкаИзКэша("1СОстаткиБезУчетаОрганизаций")) Тогда
			//Только по складам
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БПАГНоменклатура.Ссылка КАК Номенклатура,
			|	NULL КАК Организация,
			|	БПАГСклады.Ссылка КАК Склад,
			|	СУММА(ЗапасыНаСкладахОстатки.КоличествоОстаток) КАК Количество
			|ИЗ
			|	РегистрНакопления.ЗапасыНаСкладах.Остатки КАК ЗапасыНаСкладахОстатки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГНоменклатура КАК БПАГНоменклатура
			|		ПО ЗапасыНаСкладахОстатки.Номенклатура = БПАГНоменклатура.Номенклатура
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГСклады КАК БПАГСклады
			|		ПО ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница = БПАГСклады.Склад
			|ГДЕ
			|	НЕ БПАГНоменклатура.ПометкаУдаления
			|	И НЕ БПАГСклады.ПометкаУдаления
			|
			|СГРУППИРОВАТЬ ПО
			|	БПАГНоменклатура.Ссылка,
			|	БПАГСклады.Ссылка";
			
		ИначеЕсли 1=1 ИЛИ (НастройкаИзКэша("1СОстаткиБезУчетаСкладов")) И (НЕ НастройкаИзКэша("1СОстаткиБезУчетаОрганизаций")) Тогда
			
			//Только по организациям ... НАШ ВАРИАНТ
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БПАГНоменклатура.Ссылка КАК Номенклатура,
			|	ЗапасыНаСкладахОстатки.Подразделение КАК Подразделение,
			|	БПАГСклады.Ссылка КАК Склад,
			|	СУММА(ЗапасыНаСкладахОстатки.КоличествоОстаток) КАК Количество
			|ИЗ
			|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки КАК ЗапасыНаСкладахОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БПАГСклады КАК БПАГСклады
			|		ПО ЗапасыНаСкладахОстатки.Подразделение = БПАГСклады.Склад
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БПАГНоменклатура КАК БПАГНоменклатура
			|		ПО ЗапасыНаСкладахОстатки.Номенклатура = БПАГНоменклатура.Номенклатура
			|ГДЕ
			|	НЕ БПАГНоменклатура.ПометкаУдаления
			|	И ЗапасыНаСкладахОстатки.Склад <> &СкладВозвратов
			|
			|СГРУППИРОВАТЬ ПО
			|	БПАГНоменклатура.Ссылка,
			|	ЗапасыНаСкладахОстатки.Подразделение,
			|	БПАГСклады.Ссылка";
			
		Иначе
			ОтладочноеСообщение("Ошибка установки констант выгрузки остатков!");
			Возврат;
		КонецЕсли;
		
	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СкладВозвратов", Константы.СкладВозвратов.Получить());
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	ТЗ.Свернуть("Номенклатура, Подразделение, Склад", "Количество");
	
	Набор = РегистрыСведений.БПАГОстаткиТоваров.СоздатьНаборЗаписей();
	Набор.Загрузить(ТЗ);
	Набор.Записать();
	
КонецПроцедуры

Процедура МодульОбъектаСинхронизироватьДолги() Экспорт
	
	ОбновитьКэшНастроекАгентов();
	
	//Долги контрагентов
	Если НастройкаИзКэша("1СПростойУчетДолговПоПоследнимРеализациям") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка КАК Договор,
		|	БПАГКонтрагенты.Ссылка КАК Контрагент,
		|	БПАГОрганизации.Ссылка КАК Организация
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГКонтрагенты КАК БПАГКонтрагенты
		|		ПО ДоговорыКонтрагентов.Владелец = БПАГКонтрагенты.Контрагент
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГОрганизации КАК БПАГОрганизации
		|		ПО ДоговорыКонтрагентов.Организация = БПАГОрганизации.Организация
		|ГДЕ
		|	НЕ ДоговорыКонтрагентов.ПометкаУдаления
		|	И НЕ БПАГКонтрагенты.ПометкаУдаления
		|	И НЕ БПАГОрганизации.ПометкаУдаления
		|	И НЕ ДоговорыКонтрагентов.Владелец.ПометкаУдаления
		|	И НЕ ДоговорыКонтрагентов.Организация.ПометкаУдаления";
		
		ТЗАктивныеДоговоры = Запрос.Выполнить().Выгрузить();
		
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("Организация");
		ТЗ.Колонки.Добавить("Контрагент");
		ТЗ.Колонки.Добавить("Договор");
		ТЗ.Колонки.Добавить("СсылкаНаДокумент");
		КЧ = Новый КвалификаторыЧисла(15, 2);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Число"));
		ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);
		ТЗ.Колонки.Добавить("Долг", ОписаниеТиповЧ);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК Договор,
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК Долг,
		|	ВзаиморасчетыСКонтрагентами.Регистратор КАК Реализация,
		|	ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов КАК Сумма
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки КАК ВзаиморасчетыСКонтрагентамиОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
		|		ПО ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента = ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
		|	И ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток > 0
		|	И ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов > 0
		|	И ВзаиморасчетыСКонтрагентами.ВидДвижения = &ВидДвижения
		|	И ВзаиморасчетыСКонтрагентами.Активность
		|	И ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента В(&АктивныеДоговоры)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВзаиморасчетыСКонтрагентами.Регистратор.Дата УБЫВ
		|ИТОГИ
		|	МАКСИМУМ(Долг),
		|	СУММА(Сумма)
		|ПО
		|	Договор";
		Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
		Запрос.УстановитьПараметр("АктивныеДоговоры", ТЗАктивныеДоговоры.ВыгрузитьКолонку("Договор"));
		
		Результат = Запрос.Выполнить();
		ВыборкаПоДоговорам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		Счет = 0;
		ПрогрессорВсего = ВыборкаПоДоговорам.Количество();
		
		Пока ВыборкаПоДоговорам.Следующий() Цикл
			
			Счет = Счет + 1;
			БПАГ.глПрогрессор("Синхронизация долгов", ПрогрессорВсего, Счет);
			
			#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
			#КонецЕсли
			
			СуммаОсталосьРаспределить = ВыборкаПоДоговорам.Долг;
			
			ВыборкаПоРеализациям = ВыборкаПоДоговорам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			Пока (СуммаОсталосьРаспределить > 0) И (ВыборкаПоРеализациям.Следующий()) Цикл
				
				РаспределяемаяСумма = Мин(ВыборкаПоРеализациям.Сумма, СуммаОсталосьРаспределить);
				
				Если РаспределяемаяСумма > 0 Тогда
					НоваяСтрока = ТЗ.Добавить();
					НоваяСтрока.Договор = ВыборкаПоДоговорам.Договор;
					НоваяСтрока.СсылкаНаДокумент = ВыборкаПоРеализациям.Реализация;
					НоваяСтрока.Долг = РаспределяемаяСумма;
					
					СуммаОсталосьРаспределить = СуммаОсталосьРаспределить - РаспределяемаяСумма;
				КонецЕсли;
			КонецЦикла;
			
			Если СуммаОсталосьРаспределить > 0 Тогда
				НоваяСтрока = ТЗ.Добавить();
				НоваяСтрока.Договор = ВыборкаПоДоговорам.Договор;
				НоваяСтрока.СсылкаНаДокумент = "";
				НоваяСтрока.Долг = СуммаОсталосьРаспределить;
			КонецЕсли;
			
		КонецЦикла;
		
		ТЗ.Свернуть("Организация, Контрагент, Договор, СсылкаНаДокумент", "Долг");
		
		ТЗ.Колонки.Добавить("Сумма");
		ТЗ.Колонки.Добавить("Дата");
		ТЗ.Колонки.Добавить("Номер");
		
		Для Каждого тмпСтрока Из ТЗ Цикл
			НайденнаяСтрока = ТЗАктивныеДоговоры.Найти(тмпСтрока.Договор, "Договор");
			Если НайденнаяСтрока <> Неопределено Тогда
				тмпСтрока.Организация = НайденнаяСтрока.Организация;
				тмпСтрока.Контрагент = НайденнаяСтрока.Контрагент;
			КонецЕсли;
			Если тмпСтрока.СсылкаНаДокумент <> "" Тогда
				тмпСтрока.Сумма = тмпСтрока.СсылкаНаДокумент.СуммаДокумента;
				тмпСтрока.Дата = тмпСтрока.СсылкаНаДокумент.Дата;
				тмпСтрока.Номер = тмпСтрока.СсылкаНаДокумент.Номер;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Если ВидПрикладногоРешения = "УТ10" Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БПАГОрганизации.Ссылка КАК Организация,
			|	БПАГКонтрагенты.Ссылка КАК Контрагент,
			|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента КАК Договор,
			|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДокументРасчетовСКонтрагентом КАК СсылкаНаДокумент,
			|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДокументРасчетовСКонтрагентом.СуммаДокумента КАК Сумма,
			|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.СуммаВзаиморасчетовОстаток КАК Долг,
			|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДокументРасчетовСКонтрагентом.Дата КАК Дата,
			|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДокументРасчетовСКонтрагентом.Номер КАК Номер
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(, ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом) КАК ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГОрганизации КАК БПАГОрганизации
			|		ПО ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Организация = БПАГОрганизации.Организация
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГКонтрагенты КАК БПАГКонтрагенты
			|		ПО ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Контрагент = БПАГКонтрагенты.Контрагент
			|ГДЕ
			|	(НЕ БПАГКонтрагенты.ПометкаУдаления)
			|	И (НЕ БПАГОрганизации.ПометкаУдаления)
			|	И ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.СуммаВзаиморасчетовОстаток <> 0
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	БПАГОрганизации.Ссылка,
			|	БПАГКонтрагенты.Ссылка,
			|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента,
			|	NULL,
			|	NULL,
			|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток,
			|	NULL,
			|	NULL
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(, (НЕ ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом)) КАК ВзаиморасчетыСКонтрагентамиОстатки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГОрганизации КАК БПАГОрганизации
			|		ПО ВзаиморасчетыСКонтрагентамиОстатки.Организация = БПАГОрганизации.Организация
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГКонтрагенты КАК БПАГКонтрагенты
			|		ПО ВзаиморасчетыСКонтрагентамиОстатки.Контрагент = БПАГКонтрагенты.Контрагент
			|ГДЕ
			|	(НЕ БПАГКонтрагенты.ПометкаУдаления)
			|	И (НЕ БПАГОрганизации.ПометкаУдаления)
			|	И ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток <> 0";
			
			ТЗ = Запрос.Выполнить().Выгрузить();
			
		ИначеЕсли ВидПрикладногоРешения = "УТ11" Тогда
		
			//Если (СпецификаПользователя = "FT") ИЛИ (СпецификаПользователя = "Kirillova") Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	&Организация КАК Организация,
				|	БПАГКонтрагенты.Ссылка КАК Контрагент,
				|	БПАГКонтрагенты.Партнер,
				|	0 КАК Сумма,
				|	0 КАК Долг,
				|	&ТекущаяДата КАК Дата,
				|	NULL КАК СсылкаНаДокумент
				|ИЗ
				|	Справочник.БПАГКонтрагенты КАК БПАГКонтрагенты
				|ГДЕ
				|	НЕ БПАГКонтрагенты.ПометкаУдаления
				|	И НЕ БПАГКонтрагенты.Партнер.ПометкаУдаления
				|	И НЕ БПАГКонтрагенты.ЭтоГруппа";
				
				тмпОрганизация = 0;
				ВыборкаОрганизаций = Справочники.БПАГОрганизации.Выбрать();
				Пока ВыборкаОрганизаций.Следующий() Цикл
					Если НЕ ВыборкаОрганизаций.ПометкаУдаления Тогда
						тмпОрганизация = ВыборкаОрганизаций.Ссылка;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Запрос.УстановитьПараметр("Организация", тмпОрганизация);
				Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
				
				ТЗ = Запрос.Выполнить().Выгрузить();
				Для Каждого тмпСтрока Из ТЗ Цикл
					Партнер = тмпСтрока.Партнер;
					ДанныеПоВзаиморасчетам = ФТ_ПолучитьДанныеПоВзаиморасчетам(тмпСтрока.Партнер);
					тмпСтрока.Долг = ДанныеПоВзаиморасчетам.СуммаКОплате;
				КонецЦикла;
			//КонецЕсли;
			
		ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
				
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БПАГОрганизации.Ссылка КАК Организация,
			|	БПАГКонтрагенты.Ссылка КАК Контрагент,
			|	РасчетыСПокупателямиОстатки.Договор КАК Договор,
			|	РасчетыСПокупателямиОстатки.Документ КАК СсылкаНаДокумент,
			|	РасчетыСПокупателямиОстатки.Документ.СуммаДокумента КАК Сумма,
			|	РасчетыСПокупателямиОстатки.СуммаОстаток КАК Долг,
			|	РасчетыСПокупателямиОстатки.Документ.Дата КАК Дата,
			|	РасчетыСПокупателямиОстатки.Документ.Номер КАК Номер
			|ИЗ
			|	РегистрНакопления.РасчетыСПокупателями.Остатки(, ) КАК РасчетыСПокупателямиОстатки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГОрганизации КАК БПАГОрганизации
			|		ПО РасчетыСПокупателямиОстатки.Организация = БПАГОрганизации.Организация
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГКонтрагенты КАК БПАГКонтрагенты
			|		ПО РасчетыСПокупателямиОстатки.Контрагент = БПАГКонтрагенты.Контрагент
			|ГДЕ
			|	НЕ БПАГКонтрагенты.ПометкаУдаления
			|	И НЕ БПАГОрганизации.ПометкаУдаления
			|	И РасчетыСПокупателямиОстатки.СуммаОстаток <> 0";
			
			ТЗ = Запрос.Выполнить().Выгрузить();
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ТЗ = Неопределено Тогда
		ТЗ.Колонки.Добавить("Документ");
		Для Каждого тмпСтрока Из ТЗ Цикл
			Если тмпСтрока.СсылкаНаДокумент <> NULL Тогда
				тмпСтрока.Документ = ТипЗнч(тмпСтрока.СсылкаНаДокумент);
			КонецЕсли;
		КонецЦикла;
		
		Набор = РегистрыСведений.БПАГДолгиКлиентов.СоздатьНаборЗаписей();
		Набор.Загрузить(ТЗ);
		Набор.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура МодульОбъектаСинхронизироватьДолгиАгентов(агенты) Экспорт
	
	ОбновитьКэшНастроекАгентов();
	
	//Долги контрагентов
	отборМенеджер = Новый СписокЗначений;
	Для Каждого тмпАгенты Из агенты Цикл
		
		Если тмпАгенты.Агент.Менеджер.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		отборМенеджер.Добавить(тмпАгенты.Агент.Менеджер);
		
	КонецЦикла;
	
	
	Если СпецификаПользователя = "SD" Тогда
		
		запрос = Новый Запрос;
		запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		#Область ТекстЗапроса
		
		запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПоступлениеДенегВедомость.Маршрут КАК Менеджер,
		|	МАКСИМУМ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПоступлениеДенегВедомость.Дата, ДЕНЬ), ДЕНЬ, 1)) КАК Дата
		|ПОМЕСТИТЬ ВТ_Даты
		|ИЗ
		|	Документ.ПоступлениеДенегВедомость КАК ПоступлениеДенегВедомость
		|ГДЕ
		|	ПоступлениеДенегВедомость.Маршрут В(&ОтборМенеджер)
		|	И ПоступлениеДенегВедомость.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеДенегВедомость.Маршрут
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КпкКассаСтрокиДокумента.Контрагент,
		|	ВТ_Даты.Менеджер,
		|	КпкКассаСтрокиДокумента.КредДокумент КАК СсылкаНаДокумент,
		|	СУММА(-1 * КпкКассаСтрокиДокумента.Сумма) КАК Долг,
		|	ВТ_Даты.Дата КАК ДатаГП
		|ПОМЕСТИТЬ ВТ_КпкКасса
		|ИЗ
		|	ВТ_Даты КАК ВТ_Даты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КпкКасса.СтрокиДокумента КАК КпкКассаСтрокиДокумента
		|		ПО (КпкКассаСтрокиДокумента.Ссылка.Дата >= ВТ_Даты.Дата)
		|			И (КпкКассаСтрокиДокумента.Ссылка.Менеджер = ВТ_Даты.Менеджер)
		|			И (КпкКассаСтрокиДокумента.Ссылка.Проведен)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Даты.Менеджер,
		|	КпкКассаСтрокиДокумента.КредДокумент,
		|	КпкКассаСтрокиДокумента.Контрагент,
		|	ВТ_Даты.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БПАГОрганизации.Ссылка КАК Организация,
		|	ВзаиморасчетыСПокупателямиОстатки.Контрагент,
		|	ВзаиморасчетыСПокупателямиОстатки.Менеджер КАК Менеджер,
		|	"""" КАК Договор,
		|	ВзаиморасчетыСПокупателямиОстатки.КредитныйДокумент КАК СсылкаНаДокумент,
		|	СУММА(ВзаиморасчетыСПокупателямиОстатки.КредитныйДокумент.СуммаДокумента) КАК Сумма,
		|	СУММА(ВзаиморасчетыСПокупателямиОстатки.СуммаОстаток + ЕСТЬNULL(ВТ_КпкКасса.Долг, 0)) КАК Долг,
		|	ВзаиморасчетыСПокупателямиОстатки.КредитныйДокумент.Дата КАК Дата,
		|	ВзаиморасчетыСПокупателямиОстатки.КредитныйДокумент.Номер КАК Номер,
		|	ВзаиморасчетыСПокупателямиОстатки.КредитныйДокумент КАК Документ,
		|	СУММА(ВТ_КпкКасса.Долг) КАК кпкКасса
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСПокупателями.Остатки(, Менеджер В (&ОтборМенеджер)) КАК ВзаиморасчетыСПокупателямиОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КпкКасса КАК ВТ_КпкКасса
		|		ПО ВзаиморасчетыСПокупателямиОстатки.КредитныйДокумент = ВТ_КпкКасса.СсылкаНаДокумент
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.Менеджеры КАК КонтрагентыМенеджеры
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БПАГОрганизации КАК БПАГОрганизации
		|			ПО КонтрагентыМенеджеры.ОсновнаяОрганизация = БПАГОрганизации.Организация
		|		ПО ВзаиморасчетыСПокупателямиОстатки.Контрагент = КонтрагентыМенеджеры.Ссылка
		|			И ВзаиморасчетыСПокупателямиОстатки.Менеджер = КонтрагентыМенеджеры.Менеджер
		|
		|СГРУППИРОВАТЬ ПО
		|	ВзаиморасчетыСПокупателямиОстатки.КредитныйДокумент,
		|	ВзаиморасчетыСПокупателямиОстатки.Контрагент,
		|	ВзаиморасчетыСПокупателямиОстатки.Менеджер,
		|	ВзаиморасчетыСПокупателямиОстатки.КредитныйДокумент.Дата,
		|	ВзаиморасчетыСПокупателямиОстатки.КредитныйДокумент.Номер,
		|	БПАГОрганизации.Ссылка,
		|	ВзаиморасчетыСПокупателямиОстатки.КредитныйДокумент
		|ИТОГИ
		|	СУММА(Сумма),
		|	СУММА(Долг),
		|	СУММА(кпкКасса)
		|ПО
		|	Менеджер";
		
		#КонецОбласти 
		
		запрос.УстановитьПараметр("ОтборМенеджер", ОтборМенеджер );
		
		результатЗапроса = Запрос.Выполнить();
		
	КонецЕсли;
		
	набор = РегистрыСведений.БПАГДолгиКлиентов.СоздатьНаборЗаписей();
	
	//Если НЕ ТЗ = Неопределено Тогда
	Если НЕ результатЗапроса.Пустой() Тогда
		
		выборкаМенеджер = результатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Менеджер");
		Пока выборкаМенеджер.Следующий() Цикл
			
			набор.Отбор.Менеджер.Установить(выборкаМенеджер.Менеджер);
			набор.Прочитать();
			набор.Очистить();
			
			выборкаДетальныеЗаписи = выборкаМенеджер.Выбрать();
			Пока выборкаДетальныеЗаписи.Следующий() Цикл
				
				новаяЗапись = набор.Добавить();
				ЗаполнитьЗначенияСвойств(новаяЗапись, выборкаДетальныеЗаписи);
				
				Если выборкаДетальныеЗаписи.СсылкаНаДокумент <> NULL Тогда
					новаяЗапись.Документ = ТипЗнч(выборкаДетальныеЗаписи.СсылкаНаДокумент);
				Иначе
					новаяЗапись.Документ = "";
				КонецЕсли;
					
				
			КонецЦикла;
			
			набор.Записать();
			
		КонецЦикла;
		
	Иначе
		Для каждого знМенеджер Из ОтборМенеджер Цикл
			
			набор.Отбор.Менеджер.Установить(знМенеджер);
			набор.Прочитать();
			набор.Очистить();
			набор.Записать();
		
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры	// МодульОбъектаСинхронизироватьДолгиАгентов()


Функция ПолучитьВерсиюОбработки() Экспорт
	Возврат Версия;
КонецФункции

Функция ЗаполнитьВалютуРегламентированногоУчета();
	СпецификаПользователя = БПАГ.ПолучитьСпецификуПользователя();
	Если СпецификаПользователя = "SD" Тогда
		Выполнить("мВалютаРегламентированногоУчета = Константы.ВалютаУчета.Получить()");	
	ИначеЕсли ВидПрикладногоРешения = "УТ11" Тогда
		Выполнить("мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить()");	
	ИначеЕсли ВидПрикладногоРешения = "УНФ" Тогда
		Выполнить("мВалютаРегламентированногоУчета = Константы.ВалютаУчета.Получить()");	
	Иначе
		Выполнить("мВалютаРегламентированногоУчета = глЗначениеПеременной(""ВалютаРегламентированногоУчета"")");	
	КонецЕсли;
КонецФункции

Функция ФТ_ПолучитьДанныеПоВзаиморасчетам(Знач Партнер)
	Перем СтруктДанныеВзаиморасчетов,МассивРасчетныхДокументов;
	
	СтруктДанныеВзаиморасчетов = Новый Структура(
	"СуммаДолга,СуммаДолгаСтр,СуммаКОплате,СуммаКОплатеСтр,СуммаСледующегоПлатежа,СуммаСледующегоПлатежаСтр,ДатаСледующегоПлатежа,ДатаСледующегоПлатежаСтр,МассивРасчетныхДокументов"
	,	0				//СуммаДолга
	,	""				//СуммаДолгаСтр
	,	0				//СуммаКОплате
	,	""				//СуммаКОплатеСтр
	,	0				//СуммаСледующегоПлатежа
	,	""				//СуммаСледующегоПлатежаСтр
	,	Дата(1,1,1)		//ДатаСледующегоПлатежа
	,	""				//ДатаСледующегоПлатежаСтр
	,	Новый Массив	//МассивРасчетныхДокументов
	);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер",Партнер);
	
	ФТ_ПолучитьДатуСуммуСледующегоПлатежа(Партнер,ТекущаяДата(),СтруктДанныеВзаиморасчетов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ВзаиморасчетыОбщие.СуммаДолга) КАК СуммаДолга,
	|	СУММА(ВзаиморасчетыОбщие.СуммаКОплате) КАК СуммаКОплате
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(РасчетыСКлиентамиПоДокументамОстатки.СуммаОстаток) КАК СуммаДолга,
	|		СУММА(ВЫБОР
	|				КОГДА ЕСТЬNULL(РасчетыСКлиентамиПоДокументамОстатки.ЗаказКлиента.ДатаПлатежа, ЕСТЬNULL(РасчетыСКлиентамиПоДокументамОстатки.ЗаказКлиента.Дата, &ПустаяДата)) < &Сегодня
	|					ТОГДА РасчетыСКлиентамиПоДокументамОстатки.КОплатеОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК СуммаКОплате
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентами.Остатки(&ДатаКон, АналитикаУчетаПоПартнерам.Партнер = &Партнер) КАК РасчетыСКлиентамиПоДокументамОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СУММА(РасчетыСПоставщикамиОстатки.СуммаОстаток),
	|		СУММА(ВЫБОР
	|				КОГДА ЕСТЬNULL(РасчетыСПоставщикамиОстатки.ЗаказПоставщику.ДатаПлатежа, ЕСТЬNULL(РасчетыСПоставщикамиОстатки.ЗаказПоставщику.Дата, &ПустаяДата)) < &Сегодня
	|					ТОГДА РасчетыСПоставщикамиОстатки.КОплатеОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ)
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками.Остатки(&ДатаКон, АналитикаУчетаПоПартнерам.Партнер = &Партнер) КАК РасчетыСПоставщикамиОстатки) КАК ВзаиморасчетыОбщие"
	;
	Запрос.УстановитьПараметр("ДатаКон", ТекущаяДата());
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1));
	Запрос.УстановитьПараметр("Сегодня", НачалоДня(ТекущаяДата()));
	
	Попытка
		ТЗ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
		СтрТЗ = ТЗ[0];
		
		СтруктДанныеВзаиморасчетов.СуммаДолга		= ?(СтрТЗ.СуммаДолга	= Null,0,СтрТЗ.СуммаДолга);
		СтруктДанныеВзаиморасчетов.СуммаКОплате		= ?(СтрТЗ.СуммаКОплате	= Null,0,СтрТЗ.СуммаКОплате);
		
		СтруктДанныеВзаиморасчетов.СуммаДолгаСтр	= Формат(СтруктДанныеВзаиморасчетов.СуммаДолга, "ЧН=; ЧГ=3,0") + " RUB";
		СтруктДанныеВзаиморасчетов.СуммаКОплатеСтр	= Формат(Мин(СтруктДанныеВзаиморасчетов.СуммаКОплате,СтруктДанныеВзаиморасчетов.СуммаДолга), "ЧН=; ЧГ=3,0") + " RUB";
	Исключение
		СП = Новый СообщениеПользователю;
		СП.Текст = ОписаниеОшибки();
		СП.Сообщить();
	КонецПопытки;
	
	Возврат СтруктДанныеВзаиморасчетов;
КонецФункции

Функция ФТ_ПолучитьДатуСуммуСледующегоПлатежа(Знач Партнер, Знач ДатаСледующегоПлатежа, СтруктДанныеВзаиморасчетов)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(КОНЕЦПЕРИОДА(РасчетыСКлиентамиОбороты.Период, ДЕНЬ)) КАК ДатаСледующегоПлатежа,
	|	РасчетыСКлиентамиОбороты.ЗаказКлиента
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Обороты(&ДатаНач, , Регистратор, АналитикаУчетаПоПартнерам.Партнер = &Партнер) КАК РасчетыСКлиентамиОбороты
	|ГДЕ
	|	РасчетыСКлиентамиОбороты.КОплатеПриход > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСКлиентамиОбороты.ЗаказКлиента
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСледующегоПлатежа";
	
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоДня(ДатаСледующегоПлатежа),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("МассивРасчетныхДокументов", СтруктДанныеВзаиморасчетов.МассивРасчетныхДокументов);
	
	Попытка
		ТЗ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	Исключение
		СП = Новый СообщениеПользователю;
		СП.Текст = ОписаниеОшибки();
		СП.Сообщить();
		
		Возврат Ложь;
	КонецПопытки;
	
	Если НЕ ТЗ.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтрТЗ = ТЗ[0];
	СтруктДанныеВзаиморасчетов.МассивРасчетныхДокументов = ТЗ.Скопировать(ТЗ.НайтиСтроки(Новый Структура("ДатаСледующегоПлатежа", СтрТЗ.ДатаСледующегоПлатежа)), "ЗаказКлиента").ВыгрузитьКолонку("ЗаказКлиента");
	
	СтруктДанныеВзаиморасчетов.ДатаСледующегоПлатежа = СтрТЗ.ДатаСледующегоПлатежа;
	СтруктДанныеВзаиморасчетов.ДатаСледующегоПлатежаСтр	= Формат(СтруктДанныеВзаиморасчетов.ДатаСледующегоПлатежа, "ДФ=dd.MM.yyyy");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(РасчетыСКлиентамиОстатки.СуммаОстаток) КАК СуммаСледующегоПлатежа
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(&ДатаСледующегоПлатежа, АналитикаУчетаПоПартнерам.Партнер = &Партнер) КАК РасчетыСКлиентамиОстатки
	|ГДЕ
	|	РасчетыСКлиентамиОстатки.ЗаказКлиента В(&МассивРасчетныхДокументов)";
	
	Запрос.УстановитьПараметр("ДатаСледующегоПлатежа",Новый Граница(КонецДня(СтруктДанныеВзаиморасчетов.ДатаСледующегоПлатежа),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("МассивРасчетныхДокументов",СтруктДанныеВзаиморасчетов.МассивРасчетныхДокументов);
	
	ТЗ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	Если ТЗ.Количество() Тогда
		СтрТЗ = ТЗ[0];
		
		СтруктДанныеВзаиморасчетов.СуммаСледующегоПлатежа		= ?(СтрТЗ.СуммаСледующегоПлатежа = Null,0,СтрТЗ.СуммаСледующегоПлатежа);
		СтруктДанныеВзаиморасчетов.СуммаСледующегоПлатежаСтр	= Формат(СтруктДанныеВзаиморасчетов.СуммаСледующегоПлатежа,"ЧН=; ЧГ=3,0") + " RUB";
		
		Если СтруктДанныеВзаиморасчетов.СуммаСледующегоПлатежа <= 0 Тогда
			Возврат ФТ_ПолучитьДатуСуммуСледующегоПлатежа(Партнер,КонецДня(СтруктДанныеВзаиморасчетов.ДатаСледующегоПлатежа) + 1,СтруктДанныеВзаиморасчетов);
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция ПолучитьКонтрагентаПартнера(Партнер)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.ПометкаУдаления
	|	И Контрагенты.Партнер = &Партнер";
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Если СпецификаПользователя = "SD" Тогда
			Возврат Ложь;
		КонецЕсли;	
		РодительПартнера = Партнер.Родитель;
		Если РодительПартнера.Пустая() Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	НЕ Контрагенты.ПометкаУдаления
		|	И Контрагенты.Партнер = &Партнер";
		
		Запрос.УстановитьПараметр("Партнер", РодительПартнера);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		Иначе
			
			РодительРодителяПартнера = Партнер.Родитель.Родитель;
			Если РодительРодителяПартнера.Пустая() Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	НЕ Контрагенты.ПометкаУдаления
			|	И Контрагенты.Партнер = &Партнер";
			
			Запрос.УстановитьПараметр("Партнер", РодительРодителяПартнера);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Возврат Выборка.Ссылка;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецФункции

Процедура КонтрагентыСинхронизироватьВсе() Экспорт
	
	ВидПрикладногоРешения = БПАГ.ПолучитьВидПрикладногоРешения();
	
	Параметры = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БПАГКонтрагенты." + ?(ВидПрикладногоРешения = "УТ11", "Партнер", "Контрагент")+ " КАК СсылкаНаРодной
	|ИЗ
	|	Справочник.БПАГКонтрагенты КАК БПАГКонтрагенты
	|ГДЕ
	|	БПАГКонтрагенты.Родитель = &ПустаяСсылка
	|	И БПАГКонтрагенты." + ?(ВидПрикладногоРешения = "УТ11", "Партнер", "Контрагент")+ " <> &ПустойКонтрагент
	|	И НЕ БПАГКонтрагенты.ПометкаУдаления";
	
	Попытка
		Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Партнеры.ПустаяСсылка());
	Исключение
		Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	КонецПопытки;
	
	Запрос.УстановитьПараметр("ПустаяСсылка", Справочники.БПАГКонтрагенты.ПустаяСсылка());
	Параметры.Вставить("Значение", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СсылкаНаРодной"));

	ЗапуститьСинхронизациюВсехКонтрагентов(Параметры);
	
КонецПроцедуры

Процедура ЗапуститьСинхронизациюВсехКонтрагентов(ПараметрыПеретаскивания, Строка = Неопределено)
	
	ВидПрикладногоРешения = БПАГ.ПолучитьВидПрикладногоРешения();
	
	НаличиеСетевыхТорговыхТочек = БПАГ.БПАГПолучитьНастройку("1СНаличиеСетевыхТорговыхТочек");
	ВидАдресаДоставки = БПАГ.БПАГПолучитьНастройку("1СВидАдресаДоставки");
	ВидТелефонаДоставки = БПАГ.БПАГПолучитьНастройку("1СВидТелефонаДоставки");
	ПриоритетКонтактнойИнформацииПриСинхронизации = БПАГ.БПАГПолучитьНастройку("1СПриоритетКонтактнойИнформацииПриСинхронизации");
	РежимКонтроляВзаиморасчетовВЗаявке = БПАГ.БПАГПолучитьНастройку("1СРежимКонтроляВзаиморасчетовВЗаявке");
	РежимКонтроляВзаиморасчетовВРеализации = БПАГ.БПАГПолучитьНастройку("1СРежимКонтроляВзаиморасчетовВРеализации");
	
	ПеретаскиваемыеЗначения = ПараметрыПеретаскивания.Значение;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	1 КАК Счет
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.Ссылка В ИЕРАРХИИ(&Значения)
	|ИТОГИ
	|	СУММА(Счет)
	|ПО
	|	ОБЩИЕ";
	
	Если ВидПрикладногоРешения <> "УТ11" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Партнер", "Контрагент");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Значения", ПеретаскиваемыеЗначения);
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	ЗапуститьРекурсиюПеретаскиванияКонтрагентов(ПараметрыПеретаскивания, Строка);
КонецПроцедуры

Процедура ЗапуститьРекурсиюПеретаскиванияКонтрагентов(ПараметрыПеретаскивания, Строка = Неопределено, Папа = 0)
	
	ВидПрикладногоРешения = БПАГ.ПолучитьВидПрикладногоРешения();
	
	ПеретаскиваемыеЗначения = ПараметрыПеретаскивания.Значение;
	
	Если ((ВидПрикладногоРешения = "УТ11") И (ТипЗнч(ПеретаскиваемыеЗначения) = Тип("СправочникСсылка.Партнеры"))) ИЛИ (ТипЗнч(ПеретаскиваемыеЗначения) = Тип("СправочникСсылка.Контрагенты")) Тогда
		Перетаскиваемое = ПеретаскиваемыеЗначения;
		Если Перетаскиваемое.ПометкаУдаления Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Партнеры.Ссылка
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|ГДЕ
		|	Партнеры.Родитель = &Родитель";
		
		Если ВидПрикладногоРешения <> "УТ11" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Партнер", "Контрагент");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Родитель", Перетаскиваемое);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			//Создадим группу и отправим потомков по рекурсии
			
			СуществующийЭлемент = Справочники.БПАГКонтрагенты.НайтиПоРеквизиту(?(ВидПрикладногоРешения = "УТ11", "Партнер", "Контрагент"), Перетаскиваемое);
			Если СуществующийЭлемент <> Справочники.БПАГКонтрагенты.ПустаяСсылка() Тогда
				Объ = СуществующийЭлемент.ПолучитьОбъект();
			Иначе
				Объ = Справочники.БПАГКонтрагенты.СоздатьГруппу();
			КонецЕсли;
			
			Если Папа = 0 Тогда
				
			Иначе
				Объ.Родитель = Папа;
			КонецЕсли;
			
			Если ВидПрикладногоРешения = "УТ11" Тогда
				Объ.Партнер = Перетаскиваемое;
			Иначе
				Объ.Контрагент = Перетаскиваемое;
			КонецЕсли;
			Объ.Наименование = Перетаскиваемое.Наименование;
			Объ.Записать();
			
			Запрос = Новый Запрос();
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Партнеры.Ссылка
			|ИЗ
			|	Справочник.Партнеры КАК Партнеры
			|ГДЕ
			|	Партнеры.Родитель = &Родитель
			|	И (НЕ Партнеры.ПометкаУдаления)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Партнеры.Наименование";
			
			Если ВидПрикладногоРешения <> "УТ11" Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "Партнер", "Контрагент");
			КонецЕсли;
			
			Запрос.УстановитьПараметр("Родитель", Перетаскиваемое);
			ТЗ = Запрос.Выполнить().Выгрузить();
			
			Для Каждого Потомок Из ТЗ Цикл
				РекурсивныеПараметрыПеретаскивания = ПараметрыПеретаскивания;
				РекурсивныеПараметрыПеретаскивания.Значение = Потомок.Ссылка;
				ЗапуститьРекурсиюПеретаскиванияКонтрагентов(РекурсивныеПараметрыПеретаскивания, Строка, Объ.Ссылка);
			КонецЦикла;
			
		Иначе
			Если ВидПрикладногоРешения = "УТ11" Тогда
				Если НЕ Перетаскиваемое.Клиент Тогда
					Если СпецификаПользователя <> "FT" Тогда
					
					КонецЕсли;
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			СуществующийЭлемент = Справочники.БПАГКонтрагенты.НайтиПоРеквизиту(?(ВидПрикладногоРешения = "УТ11", "Партнер", "Контрагент"), Перетаскиваемое);
			Если СуществующийЭлемент <> Справочники.БПАГКонтрагенты.ПустаяСсылка() Тогда
				Объ = СуществующийЭлемент.ПолучитьОбъект();
			Иначе
				Если ВидПрикладногоРешения = "УТ11" Тогда
					Если НЕ Перетаскиваемое.Клиент Тогда //Если это не клиент, то нового не создаем
						Возврат;
					КонецЕсли;
				КонецЕсли;
				Объ = Справочники.БПАГКонтрагенты.СоздатьЭлемент();
			КонецЕсли;
			
			Если Папа = 0 Тогда
				
			Иначе
				Объ.Родитель = Папа;
			КонецЕсли;
			
			Если ВидПрикладногоРешения = "УТ11" Тогда
				Объ.Партнер = Перетаскиваемое;
			Иначе
				Объ.Контрагент = Перетаскиваемое;
			КонецЕсли;
			Объ.Наименование = Перетаскиваемое.Наименование;
			Объ.Записать();
			
			Если НаличиеСетевыхТорговыхТочек Тогда //Берем все подходящие ХХХХХХ и создаем из них ТТ (если еще нет)
				
				Если СпецификаПользователя = "SD" Тогда
					//не используется
				ИначеЕсли СпецификаПользователя = "FT" Тогда
					
					//Телефон
					Запрос = Новый Запрос;
					Запрос.Текст =
					"ВЫБРАТЬ
					|	ПартнерыКонтактнаяИнформация.Представление КАК Наименование
					|ИЗ
					|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
					|ГДЕ
					|	ПартнерыКонтактнаяИнформация.Ссылка = &Ссылка
					|	И ПартнерыКонтактнаяИнформация.Вид = &Вид";
					
					Запрос.УстановитьПараметр("Ссылка", Перетаскиваемое);
					Запрос.УстановитьПараметр("Вид", ВидТелефонаДоставки);
					
					Телефон = "";
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						Телефон = Выборка.Наименование;
					КонецЕсли;
	
					Запрос = Новый Запрос;
					Запрос.Текст =
					"ВЫБРАТЬ
					|	ФорсайТрейд_АдресаДоставок.Ссылка КАК ТТ,
					|	ФорсайТрейд_АдресаДоставок.Наименование КАК Наименование
					|ИЗ
					|	Справочник.ФорсайТрейд_АдресаДоставок КАК ФорсайТрейд_АдресаДоставок
					|ГДЕ
					|	НЕ ФорсайТрейд_АдресаДоставок.ПометкаУдаления
					|	И ФорсайТрейд_АдресаДоставок.Владелец = &Владелец";
					
					Запрос.УстановитьПараметр("Владелец", Перетаскиваемое);
					
					ТЗАдресаДоставок = Запрос.Выполнить().Выгрузить();
					Выборка = Запрос.Выполнить().Выбрать();
					ТТНайдена = Ложь;
					Пока Выборка.Следующий() Цикл
						
						НайденнаяТТ = Справочники.БПАГТорговыеТочки.НайтиПоНаименованию(Выборка.Наименование, Истина, , Объ.Ссылка);
						Если НайденнаяТТ.Пустая() Тогда
							НоваяТТ = Справочники.БПАГТорговыеТочки.СоздатьЭлемент();
							НоваяТТ.Владелец = Объ.Ссылка;
							НоваяТТ.Наименование = Выборка.Наименование;
							НоваяТТ.Адрес = НоваяТТ.Наименование;
							НоваяТТ.Телефон = Телефон;
							НоваяТТ.Записать();
						Иначе
							Если (НайденнаяТТ.Адрес <> НайденнаяТТ.Наименование) ИЛИ (НайденнаяТТ.Телефон <> Телефон) Тогда
								ТТОбъ = НайденнаяТТ.ПолучитьОбъект();
								ТТОбъ.Адрес = ТТОбъ.Наименование;
								ТТОбъ.Телефон = Телефон;
								ТТОбъ.Записать();
							КонецЕсли;
						КонецЕсли;
						
						ТТНайдена = Истина;
					КонецЦикла;
					
					Если Не ТТНайдена Тогда
						//Поищем по типовому адресу
						Запрос = Новый Запрос;
						Запрос.Текст =
						"ВЫБРАТЬ
						|	ПартнерыКонтактнаяИнформация.Представление КАК Наименование
						|ИЗ
						|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
						|ГДЕ
						|	ПартнерыКонтактнаяИнформация.Ссылка = &Ссылка
						|	И ПартнерыКонтактнаяИнформация.Вид = &Вид";
						
						Запрос.УстановитьПараметр("Ссылка", Перетаскиваемое);
						Запрос.УстановитьПараметр("Вид", ВидАдресаДоставки);
						
						Выборка = Запрос.Выполнить().Выбрать();
						Если Выборка.Следующий() Тогда
							НовыйАдрес = ТЗАдресаДоставок.Добавить();
							НовыйАдрес.Наименование = Выборка.Наименование;

							НайденнаяТТ = Справочники.БПАГТорговыеТочки.НайтиПоНаименованию(Выборка.Наименование, Истина, , Объ.Ссылка);
							Если НайденнаяТТ.Пустая() Тогда
								НоваяТТ = Справочники.БПАГТорговыеТочки.СоздатьЭлемент();
								НоваяТТ.Владелец = Объ.Ссылка;
								НоваяТТ.Наименование = Выборка.Наименование;
								НоваяТТ.Адрес = НоваяТТ.Наименование;
								НоваяТТ.Телефон = Телефон;
								НоваяТТ.Записать();
							КонецЕсли;
							
							ТТНайдена = Истина;	
						КонецЕсли;
						
						Если Не ТТНайдена Тогда
							//БПАГ.ИнформационноеСообщение("Для партнера " + Перетаскиваемое + " не найдено ни одного адреса доставки!");
							Возврат;
						КонецЕсли;
					КонецЕсли;
					
					Запрос = Новый Запрос;
					Запрос.Текст =
					"ВЫБРАТЬ
					|	БПАГТорговыеТочки.Ссылка КАК ТТ,
					|	БПАГТорговыеТочки.Наименование КАК Наименование
					|ИЗ
					|	Справочник.БПАГТорговыеТочки КАК БПАГТорговыеТочки
					|ГДЕ
					|	БПАГТорговыеТочки.Владелец = &Владелец";
					
					Запрос.УстановитьПараметр("Владелец", Объ.Ссылка);
					
					Выборка = Запрос.Выполнить().Выбрать();
					
					Пока Выборка.Следующий() Цикл
						НайденнаяСтрокаАдреса = ТЗАдресаДоставок.Найти(Выборка.Наименование, "Наименование");
						Если НайденнаяСтрокаАдреса = Неопределено Тогда
							//БПАГ.ИнформационноеСообщение("Для партнера " + Перетаскиваемое + " удален неиспользуемый адрес доставки: " + Выборка.Наименование);
							ОбъектТТ = Выборка.ТТ.ПолучитьОбъект();
							ОбъектТТ.Удалить();
						КонецЕсли;
				 	КонецЦикла;
					
				Иначе 
					
					//Телефон
					Запрос = Новый Запрос;
					Запрос.Текст =
					"ВЫБРАТЬ
					|	ПартнерыКонтактнаяИнформация.Представление КАК Наименование
					|ИЗ
					|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
					|ГДЕ
					|	ПартнерыКонтактнаяИнформация.Ссылка = &Ссылка
					|	И ПартнерыКонтактнаяИнформация.Вид = &Вид";
					
					Запрос.УстановитьПараметр("Ссылка", Перетаскиваемое);
					Запрос.УстановитьПараметр("Вид", ВидТелефонаДоставки);
					
					Телефон = "";
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						Телефон = Выборка.Наименование;
					КонецЕсли;
	
					//Адрес
					Запрос = Новый Запрос;
					Запрос.Текст =
					"ВЫБРАТЬ
					|	ПартнерыКонтактнаяИнформация.Представление КАК Наименование
					|ИЗ
					|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
					|ГДЕ
					|	ПартнерыКонтактнаяИнформация.Ссылка = &Ссылка
					|	И ПартнерыКонтактнаяИнформация.Вид = &Вид";
					
					Запрос.УстановитьПараметр("Ссылка", Перетаскиваемое);
					Запрос.УстановитьПараметр("Вид", ВидАдресаДоставки);
					
					Выборка = Запрос.Выполнить().Выбрать();
					ТТНайдена = Ложь;
					Пока Выборка.Следующий() Цикл
						
						НайденнаяТТ = Справочники.БПАГТорговыеТочки.НайтиПоНаименованию(Выборка.Наименование, Истина, , Объ.Ссылка);
						Если НайденнаяТТ.Пустая() Тогда
							НоваяТТ = Справочники.БПАГТорговыеТочки.СоздатьЭлемент();
							НоваяТТ.Владелец = Объ.Ссылка;
							НоваяТТ.Наименование = Выборка.Наименование;
							НоваяТТ.Адрес = НоваяТТ.Наименование;
							НоваяТТ.Телефон = Телефон;
							НоваяТТ.Записать();
						Иначе
							Если (НайденнаяТТ.Адрес <> НайденнаяТТ.Наименование) ИЛИ (НайденнаяТТ.Телефон <> Телефон) Тогда
								ТТОбъ = НайденнаяТТ.ПолучитьОбъект();
								ТТОбъ.Адрес = ТТОбъ.Наименование;
								ТТОбъ.Телефон = Телефон;
								ТТОбъ.Записать();
							КонецЕсли;
						КонецЕсли;
						
						ТТНайдена = Истина;
					КонецЦикла;
					
				КонецЕсли;
				
			Иначе //Не используем договоры, берем основной или первый подходящий
				
				////Сначала пытаемся работать с основным договором
				//ОсновнойДоговор = Перетаскиваемое.ОсновнойДоговорКонтрагента;
				//Если ОсновнойДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
				//	ОбновитьТорговыеТочки(Объ, ОсновнойДоговор);
				//Иначе //Если основной договор не подходит, берем первый подходящий
				//	Запрос = Новый Запрос;
				//	Запрос.Текст =
				//	"ВЫБРАТЬ ПЕРВЫЕ 1
				//	|	ДоговорыКонтрагентов.Ссылка КАК Договор
				//	|ИЗ
				//	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				//	|ГДЕ
				//	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)
				//	|	И ДоговорыКонтрагентов.Владелец = &Владелец
				//	|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора";
				//	
				//	Запрос.УстановитьПараметр("Владелец", Перетаскиваемое);
				//	Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
				//	
				//	Выборка = Запрос.Выполнить().Выбрать();
				//	Если Выборка.Следующий() Тогда
				//		ОбновитьТорговыеТочки(Объ, Выборка.Договор);
				//	Иначе
				//		БПАГ.ИнформационноеСообщение("Для контрагента " + Перетаскиваемое + " не найден подходящий договор! Должен присутствовать договор с видом ""С покупателем"", не помеченный на удаление!");
				//		Возврат;
				//	КонецЕсли;
				//	
				//КонецЕсли;
			КонецЕсли;
			
			Объ.Записать();
		КонецЕсли;
	ИначеЕсли ТипЗнч(ПеретаскиваемыеЗначения) = Тип("Массив") Тогда
		Для Каждого Перетаскиваемое Из ПеретаскиваемыеЗначения Цикл
			РекурсивныеПараметрыПеретаскивания = ПараметрыПеретаскивания;
			РекурсивныеПараметрыПеретаскивания.Значение = Перетаскиваемое;
			ЗапуститьРекурсиюПеретаскиванияКонтрагентов(РекурсивныеПараметрыПеретаскивания, Строка);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура НоменклатураСинхронизироватьВсе() Экспорт
	
	Параметры = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БПАГНоменклатура.Номенклатура КАК СсылкаНаРодной
	|ИЗ
	|	Справочник.БПАГНоменклатура КАК БПАГНоменклатура
	|ГДЕ
	|	БПАГНоменклатура.Родитель = &ПустаяСсылка
	|	И НЕ БПАГНоменклатура.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ПустаяСсылка", Справочники.БПАГНоменклатура.ПустаяСсылка());
	
	Параметры.Вставить("Значение", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СсылкаНаРодной"));
	ЗапуститьСинхронизациюВсейНоменклатуры(Параметры);	
	
КонецПроцедуры

Процедура ЗапуститьСинхронизациюВсейНоменклатуры(ПараметрыПеретаскивания, Строка = Неопределено)
	
	КаталогКартинок = БПАГ.БПАГПолучитьНастройку("1СКаталогОбмена") + "images/";
	КаталогКартинокПроверен = Ложь;
	КаталогКартинокСуществует = Истина;
		
	ПеретаскиваемыеЗначения = ПараметрыПеретаскивания.Значение;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	1 КАК Счет
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В ИЕРАРХИИ(&Значения)
	|ИТОГИ
	|	СУММА(Счет)
	|ПО
	|	ОБЩИЕ";
	
	Запрос.УстановитьПараметр("Значения", ПеретаскиваемыеЗначения);
	Выборка = Запрос.Выполнить().Выбрать();	
	ЗапуститьРекурсиюПеретаскиванияНоменклатуры(ПараметрыПеретаскивания, Строка);	
КонецПроцедуры

Процедура ЗапуститьРекурсиюПеретаскиванияНоменклатуры(ПараметрыПеретаскивания, Строка = Неопределено, Папа = 0);	
	
	ПеретаскиваемыеЗначения = ПараметрыПеретаскивания.Значение;
	
	Если ТипЗнч(ПеретаскиваемыеЗначения) = Тип("СправочникСсылка.Номенклатура") Тогда
		Перетаскиваемое = ПеретаскиваемыеЗначения;
		Если Перетаскиваемое.ПометкаУдаления Тогда
			Возврат;
		КонецЕсли;
		
		Если Перетаскиваемое.ЭтоГруппа Тогда
			//Создадим группу и отправим потомков по рекурсии
			
			СуществующийЭлемент = Справочники.БПАГНоменклатура.НайтиПоРеквизиту("Номенклатура", Перетаскиваемое);
			Если СуществующийЭлемент <> Справочники.БПАГНоменклатура.ПустаяСсылка() Тогда
				Объ = СуществующийЭлемент.ПолучитьОбъект();
			Иначе
				Объ = Справочники.БПАГНоменклатура.СоздатьГруппу();
			КонецЕсли;
			
			Если Папа = 0 Тогда
				//Если Строка = Неопределено Тогда
				//	//Перетаскивание на пустое место
				//	Если Элемент <> Неопределено Тогда
				//		Если (Перетаскиваемое = Элемент.ТекущийРодитель.Номенклатура) ИЛИ (Перетаскиваемое = Элемент.ТекущийРодитель.Родитель.Номенклатура) ИЛИ (Перетаскиваемое = Элемент.ТекущийРодитель.Родитель.Родитель.Номенклатура) ИЛИ (Перетаскиваемое = Элемент.ТекущийРодитель.Родитель.Родитель.Родитель.Номенклатура) ИЛИ (Перетаскиваемое = Элемент.ТекущийРодитель.Родитель.Родитель.Родитель.Родитель.Номенклатура) Тогда
				//			//Не меняем родителя - попытка перетащить группу в саму себя
				//		Иначе
				//			Объ.Родитель = Элемент.ТекущийРодитель;
				//		КонецЕсли;
				//	КонецЕсли;
				//Иначе
				//	Если (Перетаскиваемое = Строка.Номенклатура) ИЛИ (Перетаскиваемое = Строка.Родитель.Номенклатура) ИЛИ (Перетаскиваемое = Строка.Родитель.Родитель.Номенклатура) ИЛИ (Перетаскиваемое = Строка.Родитель.Родитель.Родитель.Номенклатура) ИЛИ (Перетаскиваемое = Строка.Родитель.Родитель.Родитель.Родитель.Номенклатура) ИЛИ (Перетаскиваемое = Строка.Родитель.Родитель.Родитель.Родитель.Родитель.Номенклатура) Тогда
				//		//Не меняем родителя - попытка перетащить элемент или группу на самое себя
				//	ИначеЕсли Строка.ЭтоГруппа Тогда
				//		Объ.Родитель = Строка;
				//	Иначе
				//		Объ.Родитель = Элемент.ТекущийРодитель;
				//	КонецЕсли;
				//КонецЕсли;
			Иначе
				Объ.Родитель = Папа;
			КонецЕсли;
			
			Объ.Номенклатура = Перетаскиваемое;
			Объ.Наименование = Перетаскиваемое.Наименование;
			Объ.Записать();
			
			Запрос = Новый Запрос();
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Родитель = &Родитель
			|	И (НЕ Номенклатура.ПометкаУдаления)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Номенклатура.Наименование";
			
			Запрос.УстановитьПараметр("Родитель", Перетаскиваемое);
			ТЗ = Запрос.Выполнить().Выгрузить();
			
			Для Каждого Потомок Из ТЗ Цикл
				РекурсивныеПараметрыПеретаскивания = ПараметрыПеретаскивания;
				РекурсивныеПараметрыПеретаскивания.Значение = Потомок.Ссылка;
				ЗапуститьРекурсиюПеретаскиванияНоменклатуры(РекурсивныеПараметрыПеретаскивания, Строка, Объ.Ссылка);
			КонецЦикла;
			
		Иначе
			СуществующийЭлемент = Справочники.БПАГНоменклатура.НайтиПоРеквизиту("Номенклатура", Перетаскиваемое);
			Если СуществующийЭлемент <> Справочники.БПАГНоменклатура.ПустаяСсылка() Тогда
				Объ = СуществующийЭлемент.ПолучитьОбъект();
			Иначе
				Объ = Справочники.БПАГНоменклатура.СоздатьЭлемент();
			КонецЕсли;
			
			Если Папа = 0 Тогда
				//Если Строка = Неопределено Тогда
				//	Если Элемент <> Неопределено Тогда
				//		Объ.Родитель = Элемент.ТекущийРодитель;
				//	КонецЕсли;
				//Иначе
				//	Если Строка.ЭтоГруппа Тогда
				//		Объ.Родитель = Строка
				//	Иначе
				//		Объ.Родитель = Элемент.ТекущийРодитель;
				//	КонецЕсли;
				//КонецЕсли;
			Иначе
				Объ.Родитель = Папа;
			КонецЕсли;
			
			Объ.Номенклатура = Перетаскиваемое;
			Объ.Наименование = Перетаскиваемое.Наименование;
			
			//Добавим картинки из типовых
			Если КаталогКартинокСуществует Тогда
				ЗапросФайлы = Новый Запрос;
				ЗапросФайлы.Текст =
				"ВЫБРАТЬ
				|	НоменклатураПрисоединенныеФайлы.ПутьКФайлу,
				|	НоменклатураПрисоединенныеФайлы.Ссылка,
				|	НоменклатураПрисоединенныеФайлы.ТипХраненияФайла
				|ИЗ
				|	Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
				|ГДЕ
				|	НоменклатураПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
				|	И НЕ НоменклатураПрисоединенныеФайлы.ПометкаУдаления";
				
				ЗапросФайлы.УстановитьПараметр("ВладелецФайла", Перетаскиваемое);
				
				Выборка = ЗапросФайлы.Выполнить().Выбрать();
				
				Счет = 0;
				Пока Выборка.Следующий() Цикл
					Счет = Счет + 1;
					//Создадим каталог картинок, если он еще не создан
					Если Не КаталогКартинокПроверен Тогда
						//Проверить и создать или выдать сообщение
						Если БПАГ.БПАГПолучитьНастройку("1СКаталогОбмена") = "" Тогда
							КаталогКартинокСуществует = Ложь;
						Иначе	
							Файл = Новый Файл(КаталогКартинок);
							Если Не Файл.Существует() Тогда
								Попытка
									СоздатьКаталог(КаталогКартинок);
									КаталогКартинокСуществует = Истина;
								Исключение
									Сообщить(ОписаниеОшибки());
									КаталогКартинокСуществует = Ложь;
								КонецПопытки;
							КонецЕсли;
						КонецЕсли;
						КаталогКартинокПроверен = Истина;
					КонецЕсли;
					
					Если КаталогКартинокСуществует Тогда
						
						ФайлВКаталогеОбмена = Ложь;
						ДанныеФайла = 0;
						Выполнить("ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(Выборка.Ссылка);");
						
						Если СпецификаПользователя = "FT" Тогда
							ИмяФайлаТиповойКартинки = ДанныеФайла.ИмяФайла;
						Иначе
							ИмяФайлаТиповойКартинки = СокрЛП(Выборка.Ссылка.ВладелецФайла.Код) + "_" + ДанныеФайла.ИмяФайла;
						КонецЕсли;
						
						ФайлНаДиске = Новый Файл(КаталогКартинок + ИмяФайлаТиповойКартинки);
						Если ФайлНаДиске.Существует() Тогда
							Если ФайлНаДиске.Размер() = ДанныеФайла.Размер Тогда
								ФайлВКаталогеОбмена = Истина;
							КонецЕсли;
						КонецЕсли;
						
						Если Не ФайлВКаталогеОбмена Тогда	
							ДвоичныеДанные = 0;
							Попытка
								Выполнить("ДвоичныеДанные = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Выборка.Ссылка);");
								ИмяФайлаТиповойКартинки = СокрЛП(БПАГ.ПревратитьСтрокуВТранслит(ИмяФайлаТиповойКартинки));
								ДвоичныеДанные.Записать(КаталогКартинок + ИмяФайлаТиповойКартинки);
							Исключение
							КонецПопытки;
						КонецЕсли;
						
						НайденнаяСтрокаТиповойКартинки = Объ.Картинки.Найти(ИмяФайлаТиповойКартинки, "Имя");
						Если НайденнаяСтрокаТиповойКартинки = Неопределено Тогда
							НоваяКартинка = Объ.Картинки.Добавить();
							НоваяКартинка.Имя = ИмяФайлаТиповойКартинки;
						КонецЕсли;
						
					КонецЕсли;						
				КонецЦикла;
			КонецЕсли;
			
			Объ.Записать();
		КонецЕсли;
	ИначеЕсли ТипЗнч(ПеретаскиваемыеЗначения) = Тип("Массив") Тогда
		Для Каждого Перетаскиваемое Из ПеретаскиваемыеЗначения Цикл
			РекурсивныеПараметрыПеретаскивания = ПараметрыПеретаскивания;
			РекурсивныеПараметрыПеретаскивания.Значение = Перетаскиваемое;
			ЗапуститьРекурсиюПеретаскиванияНоменклатуры(РекурсивныеПараметрыПеретаскивания, Строка);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// БПОИ
Функция ПолучитьМассивФайловЛога(НачальнаяДатаЛога, КонечнаяДатаЛога, КодАгента) Экспорт
	
	СписокФайлов = Новый СписокЗначений;	
	ТекущаяДатаЛога = НачалоДня(НачальнаяДатаЛога);
	Пока ТекущаяДатаЛога <= КонечнаяДатаЛога Цикл
		СписокФайлов.Добавить(ТекущаяДатаЛога, "log_" + СокрЛП(КодАгента) + "_" + Формат(ТекущаяДатаЛога,"ДФ=yyMMdd"));	
		ТекущаяДатаЛога = ТекущаяДатаЛога + 24 * 60 * 60;
	КонецЦикла;
	
	Возврат СписокФайлов;
	
КонецФункции

// БПОИ
Функция ПолучитьТЗЛога(Агент, ИмяФайла, Каталог = Неопределено) Экспорт
	
	Если Каталог = Неопределено Тогда
		ИмяФайлаИсточника = КаталогОбмена + СокрЛП(Агент.Код) + "\tmpFromDeviceUnzipped\" + ИмяФайла + ".plist";
	Иначе
		ИмяФайлаИсточника = КаталогОбмена + СокрЛП(Агент.Код) + "\" + Каталог + "\" + ИмяФайла + ".plist";
	КонецЕсли;

	ФайлЗагрузки = Новый Файл(ИмяФайлаИсточника);
	Если НЕ ФайлЗагрузки.Существует() Тогда
		//ОтладочноеСообщение(СообщениеНеНайденФайл + Агент);
		Возврат Неопределено;
	КонецЕсли;
	
	Чтение = Новый ЧтениеXML();
	Попытка
		Чтение.ОткрытьФайл(ИмяФайлаИсточника);
	Исключение
		ОтладочноеСообщение("Ошибка чтения XML: " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Пока Чтение.Прочитать() Цикл
		Если (Чтение.Имя = "array") И (Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента) Тогда
			ТЗ = ПрочитатьУровеньИзXMLЛога(Чтение);
		КонецЕсли;
	КонецЦикла;
	
	Чтение.Закрыть();
	БППереместитьФайл(КаталогОбмена + СокрЛП(Агент.Код) + "\tmpFromDeviceUnzipped\" + ИмяФайла + ".plist", КаталогОбмена + СокрЛП(Агент.Код) + "\tmpFromDeviceUnzippedBackup\" + ИмяФайла + ".plist");
	
	Для Каждого СтрокаТЗ Из ТЗ Цикл
		СтрокаТЗ.date = ПолучитьДатуИВремяGMT(СтрокаТЗ.date, 2);
		СтрокаТЗ.locationDate = ПолучитьДатуИВремяGMT(СтрокаТЗ.locationDate, 2);
		СтрокаТЗ.day = НачалоДня(СтрокаТЗ.date);
	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции

// БПОИ
Функция ПолучитьДатуИВремяGMT(СтрокаДаты, GMT)
	Если СтрокаДаты = "" Тогда
		Возврат Дата("00010101");	
	КонецЕсли;
	
	Если СтрокаДаты = "01.01.0001 0:00:00" Тогда
		Возврат Дата("00010101");
	КонецЕсли;
	
	СтрокаДатаВремя = Строка(СтрокаДаты); 	
	ПозицияGMT = Найти(СтрокаДатаВремя, "GMT");
	Если ПозицияGMT <> 0 Тогда
		СтрокаДатаВремя = Лев(СтрокаДатаВремя, ПозицияGMT - 2);
	КонецЕсли;
	СтрокаДатаВремя = СтрЗаменить(СтрокаДатаВремя, " ", ",");
	СтрокаДатаВремя = СтрЗаменить(СтрокаДатаВремя, ":", ",");
	СтрокаДатаВремя = СтрЗаменить(СтрокаДатаВремя, ".", ",");
	МассивДаты = РазложитьСтрокуВМассив(СтрокаДатаВремя);
	ДатаВремя = Дата(МассивДаты[2], МассивДаты[1], МассивДаты[0], МассивДаты[3], МассивДаты[4], МассивДаты[5]);

	Возврат ДатаВремя;
КонецФункции

// БПОИ
Функция РазложитьСтрокуВМассив(Знач Стр, Разделитель = ",") Экспорт	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока Истина Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр, Поз - 1));
			Стр = СокрЛ(Сред(Стр, Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока Истина Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр, Поз - 1));
			Стр = Сред(Стр, Поз + ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;	
КонецФункции

Функция ПрочитатьУровеньИзXMLЛога(Чтение)
	
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("data");
	ТЗ.Колонки.Добавить("day");
	ФлагКлюч = Ложь;
	ФлагЗначение = Ложь;
	ТекущийКлюч = "";
	НайденоНеПустоеЗначение = Ложь;
	ЧтениеВТекст = Ложь;
	
	Пока Чтение.Прочитать() Цикл
		Если НЕ ЧтениеВТекст Тогда
			Если (Чтение.Имя = "dict") И (Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента) Тогда
				Если Чтение.КонтекстПространствИмен.Глубина <= 3 Тогда
					тмпСтрока = ТЗ.Добавить();
				Иначе
					ЧтениеВТекст = Истина;
				КонецЕсли;
			ИначеЕсли (Чтение.Имя = "dict") И (Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента) Тогда
				Если Чтение.КонтекстПространствИмен.Глубина > 3 Тогда
					ЧтениеВТекст = Ложь;
				КонецЕсли;
			ИначеЕсли (Чтение.Имя = "array") И (Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента) Тогда
				тмпТЗ = ПрочитатьУровеньИзXMLЛога(Чтение);
				Колонка = ТЗ.Колонки.Найти(ТекущийКлюч);
				Если Колонка = Неопределено Тогда
					ТЗ.Колонки.Добавить(ТекущийКлюч);
				КонецЕсли;
				тмпСтрока[ТекущийКлюч] = тмпТЗ;
			ИначеЕсли (Чтение.Имя = "array") И (Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента) Тогда
				Возврат ТЗ;
			ИначеЕсли (Чтение.Имя = "key") И (Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента) Тогда
				ФлагКлюч = Истина;
			ИначеЕсли (Чтение.Имя = "key") И (Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента) Тогда
				ФлагКлюч = Ложь;
			ИначеЕсли (Чтение.Имя = "string") И (Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента) Тогда
				ФлагЗначение = Истина;
			ИначеЕсли (Чтение.Имя = "string") И (Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента) Тогда
				Если Не НайденоНеПустоеЗначение Тогда
					Колонка = ТЗ.Колонки.Найти(ТекущийКлюч);
					Если Колонка = Неопределено Тогда
						ТЗ.Колонки.Добавить(ТекущийКлюч);
					КонецЕсли;
					тмпСтрока[ТекущийКлюч] = "";
				КонецЕсли;
				НайденоНеПустоеЗначение = Ложь;
				ФлагЗначение = Ложь;
			ИначеЕсли (Чтение.Имя = "#text") И (ФлагКлюч) Тогда
				ТекущийКлюч = Чтение.Значение;
			ИначеЕсли (Чтение.Имя = "#text") И (ФлагЗначение) Тогда
				Колонка = ТЗ.Колонки.Найти(ТекущийКлюч);
				Если Колонка = Неопределено Тогда
					ТЗ.Колонки.Добавить(ТекущийКлюч);
				КонецЕсли;
				тмпСтрока[ТекущийКлюч] = Чтение.Значение;
				НайденоНеПустоеЗначение = Истина;
			КонецЕсли;
		Иначе
			// Пишем как текст
			Если (Чтение.Имя = "key") И (Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента) Тогда
				ФлагКлюч = Истина;
			ИначеЕсли (Чтение.Имя = "dict") И (Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента) Тогда
				Если Чтение.КонтекстПространствИмен.Глубина = 3 Тогда
					ЧтениеВТекст = Ложь;
				КонецЕсли;
			ИначеЕсли (Чтение.Имя = "key") И (Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента) Тогда
				ФлагКлюч = Ложь;
			ИначеЕсли (Чтение.Имя = "string") И (Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента) Тогда
				ФлагЗначение = Истина;
			ИначеЕсли (Чтение.Имя = "string") И (Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента) Тогда
				НайденоНеПустоеЗначение = Ложь;
				ФлагЗначение = Ложь;
			ИначеЕсли (Чтение.Имя = "#text") И (ФлагКлюч) Тогда
				ТекущийКлюч = Чтение.Значение;
			ИначеЕсли (Чтение.Имя = "#text") И (ФлагЗначение) Тогда
				Если тмпСтрока.data = Неопределено Тогда
					тмпСтрока.data = Новый Структура;
				КонецЕсли;
				тмпСтрока.data.Вставить(ТекущийКлюч, Чтение.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
КонецФункции

Процедура СоздатьАнкетыПриПервомЗапуске() Экспорт
	
	//Создаем анкеты только если справочник Виды анкет пустой.
	ВыборкаАнкеты = Справочники.БПАГВидыАнкет.Выбрать();	
	Если ВыборкаАнкеты.Следующий() Тогда
		Возврат;
	Иначе
		Сообщить("Создана анкета ""Новый клиент""");
		ОбъВладелец = Справочники.БПАГВидыАнкет.СоздатьЭлемент();
		ОбъВладелец.Наименование = "Новый клиент";
		ОбъВладелец.Комментарий = "Анкета для внесения данных нового клиента";
		ОбъВладелец.Записать();
		
		Объ = Справочники.БПАГВопросыАнкет.СоздатьЭлемент();
		Объ.Владелец = ОбъВладелец.Ссылка;
		Объ.Наименование = "Наименование клиента";
		Объ.Идентификатор = "Name";
		Объ.Тип = Перечисления.БПАГТипыВопросовАнкет.Строка;
		Объ.Подсказка = "Юридическое наименование клиента";
		Объ.ВыравниваниеВопроса = Перечисления.БПАГВидыВыравниванияПоГоризонтали.Лево;
		Объ.РазмерШрифтаВопроса = "23";
		Объ.Записать();
		
		Объ = Справочники.БПАГВопросыАнкет.СоздатьЭлемент();
		Объ.Владелец = ОбъВладелец.Ссылка;
		Объ.Наименование = "Комментарий";
		Объ.Порядок = 1;
		Объ.Тип = Перечисления.БПАГТипыВопросовАнкет.Строка;
		Объ.ВыравниваниеВопроса = Перечисления.БПАГВидыВыравниванияПоГоризонтали.Право;
		Объ.Записать();
		
		ОбъГруппаКД = Справочники.БПАГВопросыАнкет.СоздатьГруппу();
		ОбъГруппаКД.Владелец = ОбъВладелец.Ссылка;
		ОбъГруппаКД.Наименование = "Контактные данные";
		ОбъГруппаКД.Порядок = 3;
		ОбъГруппаКД.Записать();
		
		Объ = Справочники.БПАГВопросыАнкет.СоздатьЭлемент();
		Объ.Владелец = ОбъВладелец.Ссылка;
		Объ.Родитель = ОбъГруппаКД.Ссылка;
		Объ.Наименование = "Адрес";
		Объ.Тип = Перечисления.БПАГТипыВопросовАнкет.Строка;
		Объ.Порядок = 2;
		Объ.Записать();
		
		Объ = Справочники.БПАГВопросыАнкет.СоздатьЭлемент();
		Объ.Владелец = ОбъВладелец.Ссылка;
		Объ.Родитель = ОбъГруппаКД.Ссылка;
		Объ.Наименование = "Телефон";
		Объ.Тип = Перечисления.БПАГТипыВопросовАнкет.Строка;
		Объ.Порядок = 4;
		Объ.Записать();
		
		Объ = Справочники.БПАГВопросыАнкет.СоздатьЭлемент();
		Объ.Владелец = ОбъВладелец.Ссылка;
		Объ.Родитель = ОбъГруппаКД.Ссылка;
		Объ.Наименование = "Факс";
		Объ.Тип = Перечисления.БПАГТипыВопросовАнкет.Строка;
		Объ.Порядок = 5;
		Объ.Записать();
		
		Объ = Справочники.БПАГВопросыАнкет.СоздатьЭлемент();
		Объ.Владелец = ОбъВладелец.Ссылка;
		Объ.Родитель = ОбъГруппаКД.Ссылка;
		Объ.Наименование = "E-mail";
		Объ.Тип = Перечисления.БПАГТипыВопросовАнкет.Строка;
		Объ.Порядок = 6;
		Объ.Записать();
		
		Объ = Справочники.БПАГВопросыАнкет.СоздатьЭлемент();
		Объ.Владелец = ОбъВладелец.Ссылка;
		Объ.Родитель = ОбъГруппаКД.Ссылка;
		Объ.Наименование = "Адрес в сети интернет";
		Объ.Тип = Перечисления.БПАГТипыВопросовАнкет.Строка;
		Объ.Порядок = 7;
		Объ.Подсказка = "http:\\";
		Объ.Записать();
		
		Объ = Справочники.БПАГВопросыАнкет.СоздатьЭлемент();
		Объ.Владелец = ОбъВладелец.Ссылка;
		Объ.Родитель = ОбъГруппаКД.Ссылка;
		Объ.Наименование = "Режим работы";
		Объ.Тип = Перечисления.БПАГТипыВопросовАнкет.Строка;
		Объ.Порядок = 8;
		Объ.Записать();
		
		Объ = Справочники.БПАГВопросыАнкет.СоздатьЭлемент();
		Объ.Владелец = ОбъВладелец.Ссылка;
		Объ.Родитель = ОбъГруппаКД.Ссылка;
		Объ.Наименование = "Оформить договор";
		Объ.Тип = Перечисления.БПАГТипыВопросовАнкет.Строка;
		Объ.Порядок = 9;
		НоваяСтрока = Объ.ВариантыОтвета.Добавить();
		НоваяСтрока.Вариант = "Розничный";
		НоваяСтрока = Объ.ВариантыОтвета.Добавить();
		НоваяСтрока.Вариант = "Оптовый";
		Объ.Записать();
		
		ОбъГруппаКД = Справочники.БПАГВопросыАнкет.СоздатьГруппу();
		ОбъГруппаКД.Владелец = ОбъВладелец.Ссылка;
		ОбъГруппаКД.Наименование = "Данные контактного лица";
		ОбъГруппаКД.Порядок = 10;
		ОбъГруппаКД.Записать();
		
		Объ = Справочники.БПАГВопросыАнкет.СоздатьЭлемент();
		Объ.Владелец = ОбъВладелец.Ссылка;
		Объ.Родитель = ОбъГруппаКД.Ссылка;
		Объ.Наименование = "ФИО";
		Объ.Тип = Перечисления.БПАГТипыВопросовАнкет.Строка;
		Объ.Порядок = 11;
		Объ.Обязательный = Истина; 
		Объ.Записать();
		
		Объ = Справочники.БПАГВопросыАнкет.СоздатьЭлемент();
		Объ.Владелец = ОбъВладелец.Ссылка;
		Объ.Родитель = ОбъГруппаКД.Ссылка;
		Объ.Наименование = "Телефон";
		Объ.Тип = Перечисления.БПАГТипыВопросовАнкет.Строка;
		Объ.Порядок = 12;
		Объ.Обязательный = Истина; 
		Объ.Записать();
		
		Объ = Справочники.БПАГВопросыАнкет.СоздатьЭлемент();
		Объ.Владелец = ОбъВладелец.Ссылка;
		Объ.Родитель = ОбъГруппаКД.Ссылка;
		Объ.Наименование = "E-mail";
		Объ.Тип = Перечисления.БПАГТипыВопросовАнкет.Строка;
		Объ.Порядок = 13;
		Объ.Обязательный = Истина;
		Объ.Подсказка = "ivanov@mail.ru";
		Объ.Записать();
		
		ОбъГруппаКД = Справочники.БПАГВопросыАнкет.СоздатьГруппу();
		ОбъГруппаКД.Владелец = ОбъВладелец.Ссылка;
		ОбъГруппаКД.Наименование = "Данные для отдела продаж";
		ОбъГруппаКД.Порядок = 14;
		ОбъГруппаКД.Записать();
		
		Объ = Справочники.БПАГВопросыАнкет.СоздатьЭлемент();
		Объ.Владелец = ОбъВладелец.Ссылка;
		Объ.Родитель = ОбъГруппаКД.Ссылка;
		Объ.Наименование = "Желаемая дата контакта";
		Объ.Тип = Перечисления.БПАГТипыВопросовАнкет.Дата;
		Объ.Порядок = 15;
		Объ.Записать();
		
		Объ = Справочники.БПАГВопросыАнкет.СоздатьЭлемент();
		Объ.Владелец = ОбъВладелец.Ссылка;
		Объ.Родитель = ОбъГруппаКД.Ссылка;
		Объ.Наименование = "Сфера деятельности организации";
		Объ.Тип = Перечисления.БПАГТипыВопросовАнкет.Строка;
		Объ.Подсказка = "Розничная торговля, оптовая торговля, услуги насел";
		Объ.Порядок = 16;
		НоваяСтрока = Объ.ВариантыОтвета.Добавить();
		НоваяСтрока.Вариант = "Розница";
		НоваяСтрока = Объ.ВариантыОтвета.Добавить();
		НоваяСтрока.Вариант = "Опт";
		НоваяСтрока = Объ.ВариантыОтвета.Добавить();
		НоваяСтрока.Вариант = "Услуги";
		НоваяСтрока = Объ.ВариантыОтвета.Добавить();
		НоваяСтрока.Вариант = "Услуги населению";
		Объ.Записать();
		
		
		Сообщить("Создана анкета ""Мерчандайзинг""");
		ОбъВладелец = Справочники.БПАГВидыАнкет.СоздатьЭлемент();
		ОбъВладелец.Наименование = "Мерчандайзинг";
		ОбъВладелец.Комментарий = "Анкета по мерчандайзингу";
		ОбъВладелец.Записать();
		
		Для НомерГруппы = 1 по 10 Цикл
			
			ОбъГруппаТГ = Справочники.БПАГВопросыАнкет.СоздатьГруппу();
			ОбъГруппаТГ.Владелец = ОбъВладелец.Ссылка;
			ОбъГруппаТГ.Наименование = "Товарная группа " + СокрЛП(НомерГруппы);
			ОбъГруппаТГ.Порядок = Число(СокрЛП(НомерГруппы) + 1);
			ОбъГруппаТГ.Записать();
			
			Объ = Справочники.БПАГВопросыАнкет.СоздатьЭлемент();
			Объ.Владелец = ОбъВладелец.Ссылка;
			Объ.Родитель = ОбъГруппаТГ.Ссылка;
			Объ.Наименование = "Содержание " + СокрЛП(НомерГруппы);
			Объ.Тип = Перечисления.БПАГТипыВопросовАнкет.Строка;
			Объ.Порядок = Число(СокрЛП(НомерГруппы) + 2);
			Объ.Записать();
			
			Объ = Справочники.БПАГВопросыАнкет.СоздатьЭлемент();
			Объ.Владелец = ОбъВладелец.Ссылка;
			Объ.Родитель = ОбъГруппаТГ.Ссылка;
			Объ.Наименование = "Количество " + СокрЛП(НомерГруппы);
			Объ.Тип = Перечисления.БПАГТипыВопросовАнкет.Число;
			Объ.Порядок = Число(СокрЛП(НомерГруппы) + 3);
			Объ.Записать();
			
			Объ = Справочники.БПАГВопросыАнкет.СоздатьЭлемент();
			Объ.Владелец = ОбъВладелец.Ссылка;
			Объ.Родитель = ОбъГруппаТГ.Ссылка;
			Объ.Наименование = "Цена " + СокрЛП(НомерГруппы);
			Объ.Тип = Перечисления.БПАГТипыВопросовАнкет.Число;
			Объ.Порядок = Число(СокрЛП(НомерГруппы) + 4);
			Объ.Записать();
			
			Объ = Справочники.БПАГВопросыАнкет.СоздатьЭлемент();
			Объ.Владелец = ОбъВладелец.Ссылка;
			Объ.Родитель = ОбъГруппаТГ.Ссылка;
			Объ.Наименование = "Фото " + СокрЛП(НомерГруппы);
			Объ.Тип = Перечисления.БПАГТипыВопросовАнкет.Фото;
			Объ.Порядок = Число(СокрЛП(НомерГруппы) + 5);
			Объ.Записать();
			
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры	

//Вспомогательная функция
Функция Из_10_В_Любую(Знач Значение = 0,Нотация = 36) Экспорт 
	Если Нотация <= 0 Тогда 
		Возврат("");
	КонецЕсли;
	Значение = Число(Значение);
	Если Значение <= 0 Тогда 
		Возврат("0"); 
	КонецЕсли;
	
	Значение = Цел(Значение);
	Результат = "";
	Пока Значение > 0 Цикл
		Результат = Сред("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", Значение % Нотация + 1, 1) + Результат;
		Значение = Цел(Значение/Нотация);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции
 
Функция ВыполнитьРасчет(ПарольНаБазу)
	Стр1 = "pmTPx2jMA6jauLxvEwZq7XYxejGKuXBa9AWppmVG7nJht2jZQL"; //Ключ
	Стр2 = ПарольНаБазу; //Пароль
	Длина1 = СтрДлина(Стр1);
	Результат = "";
	
	Для i = 1 По СтрДлина(Стр2) Цикл
		Байт1 = Формат(Число(Из_10_В_Любую(КодСимвола(Стр1, ((i - 1) % Длина1) + 1), 2)), "ЧЦ=16; ЧВН=; ЧГ=0");
		Байт2 = Формат(Число(Из_10_В_Любую(КодСимвола(Стр2, i), 2)), "ЧЦ=16; ЧВН=; ЧГ=0");
		
		Байт = "";
		Для j = 1 По 16 Цикл
			Байт = Байт + ?(Сред(Байт1, j, 1) = Сред(Байт2, j, 1), "0", "1");
		КонецЦикла;
		
		ЧислоКод = 0;
		Для j = 0 По 15 Цикл
			ЧислоКод = ЧислоКод + Число(Сред(Байт, 16 - j, 1)) * Pow(2, j);
		КонецЦикла;
		Код = Формат(ЧислоКод, "ЧЦ=6; ЧВН=; ЧГ=0");
		
		Результат = Результат + Код + " ";
	КонецЦикла;
	
	Возврат Результат; 
КонецФункции

Функция ПреобразоватьДатуВФормат24(Дата)
	НоваяДата = "";
	
	СтрокаШаблон = "AMPM";
	тмпПодстрока = Прав(СокрЛП(Дата), 2);
	Если Найти(СтрокаШаблон, тмпПодстрока) > 0 Тогда
		//12 - часовой формат
		Если тмпПодстрока = "AM" Тогда	
			НоваяДата = Лев(СокрЛП(Дата),19);
		ИначеЕсли тмпПодстрока = "PM" Тогда		
			Часы = Сред(СокрЛП(Дата), 11, 2);
			Если СокрЛП(Часы) = "1" Тогда
				НоваяДата = Лев(СокрЛП(Дата),11) + "13" + Сред(СокрЛП(Дата), 13, 6);
			ИначеЕсли СокрЛП(Часы) = "2" Тогда
				НоваяДата = Лев(СокрЛП(Дата),11) + "14" + Сред(СокрЛП(Дата), 13, 6);
			ИначеЕсли СокрЛП(Часы) = "3" Тогда
				НоваяДата = Лев(СокрЛП(Дата),11) + "15" + Сред(СокрЛП(Дата), 13, 6);
			ИначеЕсли СокрЛП(Часы) = "4" Тогда
				НоваяДата = Лев(СокрЛП(Дата),11) + "16" + Сред(СокрЛП(Дата), 13, 6);
			ИначеЕсли СокрЛП(Часы) = "5" Тогда
				НоваяДата = Лев(СокрЛП(Дата),11) + "17" + Сред(СокрЛП(Дата), 13, 6);
			ИначеЕсли СокрЛП(Часы) = "6" Тогда
				НоваяДата = Лев(СокрЛП(Дата),11) + "18" + Сред(СокрЛП(Дата), 13, 6);
			ИначеЕсли СокрЛП(Часы) = "7" Тогда
				НоваяДата = Лев(СокрЛП(Дата),11) + "19" + Сред(СокрЛП(Дата), 13, 6);
			ИначеЕсли СокрЛП(Часы) = "8" Тогда
				НоваяДата = Лев(СокрЛП(Дата),11) + "20" + Сред(СокрЛП(Дата), 13, 6);
			ИначеЕсли СокрЛП(Часы) = "9" Тогда
				НоваяДата = Лев(СокрЛП(Дата),11) + "21" + Сред(СокрЛП(Дата), 13, 6);
			ИначеЕсли СокрЛП(Часы) = "10" Тогда
				НоваяДата = Лев(СокрЛП(Дата),11) + "22" + Сред(СокрЛП(Дата), 13, 6);
			ИначеЕсли СокрЛП(Часы) = "11" Тогда
				НоваяДата = Лев(СокрЛП(Дата),11) + "23" + Сред(СокрЛП(Дата), 13, 6);
			ИначеЕсли СокрЛП(Часы) = "12" Тогда
				НоваяДата = Лев(СокрЛП(Дата),11) + "00" + Сред(СокрЛП(Дата), 13, 6);
			КонецЕсли;	
		КонецЕсли;
	Иначе
		//24 - часовой формат
		НоваяДата = Дата;
	КонецЕсли;
	
	Возврат НоваяДата;
КонецФункции	

Функция ПолучитьМассивФайловЛогаОтклоненийОтРекомендованного(НачальнаяДатаЛога, КонечнаяДатаЛога, КодАгента) Экспорт
	
	СписокФайлов = Новый СписокЗначений;	
	ТекущаяДатаЛога = НачалоДня(НачальнаяДатаЛога);
	Пока ТекущаяДатаЛога <= КонечнаяДатаЛога Цикл
		ИмяФайлаБезВремени = Сред(СокрЛП(ТекущаяДатаЛога), 7, 4) + "_" + Сред(СокрЛП(ТекущаяДатаЛога), 4, 2) + "_" + Сред(СокрЛП(ТекущаяДатаЛога), 1, 2);
		СписокФайлов.Добавить(ТекущаяДатаЛога, ИмяФайлаБезВремени);	
		ТекущаяДатаЛога = ТекущаяДатаЛога + 24 * 60 * 60;
	КонецЦикла;
	
	Возврат СписокФайлов;
	
КонецФункции



ВидПрикладногоРешения = БПАГ.ПолучитьВидПрикладногоРешения();

ЗаполнитьНастройкиДокументов();

ПолучитьТЗНастроекИзМакета();

КаталогОбмена = БПАГ.БПАГПолучитьНастройку("1СКаталогОбмена");

ЗаполнитьВалютуРегламентированногоУчета();

СпецификаПользователя = БПАГ.ПолучитьСпецификуПользователя();

ОбновитьСтруктуруДанныхСистемы();

ТЗКартинки = Новый ТаблицаЗначений;
ТЗКартинки.Колонки.Добавить("Имя");
ТЗКартинки.Колонки.Добавить("Размер");

Цвета = Новый Массив(20);
Цвета[0] = "000000000";
Цвета[1] = "255255255";
Цвета[2] = "255000000";
Цвета[3] = "000255000";
Цвета[4] = "000000255";
Цвета[5] = "255255000";
Цвета[6] = "255000255";
Цвета[7] = "000255255";
Цвета[8] = "083106194";
Цвета[9] = "218165032";
Цвета[10] = "178034034";
Цвета[11] = "218112214";
Цвета[12] = "050205050";
Цвета[13] = "000128000";
Цвета[14] = "065105225";
Цвета[15] = "218165032";
Цвета[16] = "255099071";
Цвета[17] = "112128144";
Цвета[18] = "189183107";
Цвета[19] = "173255047";

Лог = Новый ТекстовыйДокумент;

Версия = "3.5";
ВнутреннийИдентификаторВерсии = 0305000;