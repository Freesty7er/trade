// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем ИмяФайла     		Экспорт;
Перем ПрефиксАгента     Экспорт;
Перем ТипыКонтактнойИнформации;
// Список соответствий видов документов Агент+ и ЦБД (тип - "СписокЗначений")   
Перем списСоотвВидовДок Экспорт; 	     
Перем ТаблицаЛогов 	    Экспорт;

Перем Т_;
Перем КПК; 
Перем Текст;
Перем ПланПосещений;
Перем ТДопКлиенты;
Перем сзДопТовары;
Перем сзКлиентыАгента;
Перем сзТоргТочкиАгента;
Перем ТаблицаДоговоровАгента;
Перем сзКонтактныеЛица;
Перем ОснФирма;
Перем КассыАгента;
Перем ОснКассаККМ;
Перем ОснСклад;
Перем АвтоСклад;
Перем ВидОплатыПоУмолчанию;
Перем флАвтоИсторияПродаж;
Перем тзОписаниеКартинок;  
Перем ИспТочек;
Перем ИспЕдИзм;
Перем сзАссортимент;
Перем ПарольЗИП;
Перем ОтветитьНаЗапрос;  
Перем КоличествоПопыток;   	     // количество попыток для проведения операции создания или записи объекта
Перем ПаузаМеждуПопытками; 		 // пауза в секундах между попытками    
Перем мВалютаРегламентированногоУчета;
Перем мДоступныеУчетныеЗаписи;
Перем тзКатегорииЦен;
Перем ТекПользователь;
Перем СоответствиеСпрЗагр;
Перем СоответствиеДокЗагр;
Перем СписокОрдеровДляЗаписи;
Перем КолФотоМТ;

Перем КПКОбъектServer Экспорт;
Перем КПКОбъектZip    Экспорт;
Перем КПКОбъектCrypto Экспорт;	

// Добавленные переменные
Перем СведенияАгента;
Перем ДокОбмена;
Перем СписНеНайденныхТиповЦен;
Перем СписЗагруженныхОбъектовСпр;
Перем ТабЗагруженныхФото;

Перем лИмяФормыКонстант;

Перем ЕстьКонтактнаяИнформация;

Перем ПрерватьЗагрузку;
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// <Описание функции>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьЦенуНоменклатуры(ТекНоменклатура, ТекХарактеристика = Неопределено, ТекТипЦены, ТекДата, 
					ТекЕдИзм, ТекВалюта) Экспорт

	//Если ТекХарактеристика = Неопределено Тогда
	//	Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	//Иначе	
	//	Характеристика = ТекХарактеристика;
	//КонецЕсли; 					
	
	Коэффициент = 1;
	
	//Если ТипЗнч(ТекЕдИзм) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
	//	Коэффициент = ТекЕдИзм.Коэффициент;
	//Иначе	
	//	Коэффициент = 1;	
	//КонецЕсли; 
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("ВидЦен", ТекТипЦены);
	СтруктураДанные.Вставить("ДатаОбработки", ТекДата);
	СтруктураДанные.Вставить("Номенклатура", ТекНоменклатура);
	СтруктураДанные.Вставить("Характеристика", ТекХарактеристика);
	СтруктураДанные.Вставить("Коэффициент", Коэффициент);
	СтруктураДанные.Вставить("ВалютаДокумента", ТекВалюта);
	
	//СтруктураДанные.Вставить("СуммаВключаетНДС", ТекТипЦены.ЦенаВключаетНДС);
	СтруктураДанные.Вставить("СуммаВключаетНДС", Истина);
	
	//Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
	СтруктураПараметров = Новый Структура("Номенклатура, ТипЦен, Подразделение, ДатаСреза", ТекНоменклатура, ТекТипЦены, Подразделение, ТекДата);
	Цена = ЦенообразованиеСервер.ВернутьЦенуНоменклатуры(СтруктураПараметров);
	
	Возврат Цена;
	
КонецФункции // ПолучитьЦенуНоменклатуры() 

// Процедура предназначена для оповещения пользователей о событиях обмена
// а также для записи событий в лог обмена
//
Процедура ОповеститьОСобытии(ТекстСообщения = "", Статус = "", ОтражатьВЛоге = Истина, СсылкаНаОбъект = Неопределено) Экспорт
	
	НужныйСтатус = ?(Статус = "", СтатусСообщения.Внимание, Статус);
	
	//#Если Клиент Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	//#КонецЕсли
	
	Если ОтражатьВЛоге Тогда
		ЗаписатьЛогОбмена(ТекстСообщения, СсылкаНаОбъект, НужныйСтатус);
	КонецЕсли;
	
КонецПроцедуры

//Процедура ведения лога обмена
//
Процедура ЗаписатьЛогОбмена(ТекстСообщения = "", СсылкаНаОбъект = Неопределено, ТипСобытия = Неопределено)
		
	НоваяСтрока = ТаблицаЛогов.Добавить();
	НоваяСтрока.ТипСобытия     = Строка(ТипСобытия);
	НоваяСтрока.Дата           = ТекущаяДата();
	НоваяСтрока.Событие        = ТекстСообщения;
	НоваяСтрока.Пользователь   = ТекПользователь;
	НоваяСтрока.Агент          = ВыбАгент;
	НоваяСтрока.СсылкаНаОбъект = ?(СсылкаНаОбъект = Неопределено, "", СсылкаНаОбъект);
	
КонецПроцедуры

Процедура СохранитьТаблицуЛогаВНастройкахПользователя()Экспорт
	
	ЛогОбмена = РегистрыСведений.кпкСохраненныеНастройки.СоздатьМенеджерЗаписи();
	ЛогОбмена.Пользователь 		    = ТекПользователь;
	ЛогОбмена.ИмяОбъекта    	    = ЭтотОбъект.Метаданные().Имя;
	ЛогОбмена.НаименованиеНастройки = Строка(Формат(ТекущаяДата(), "ДФ=yyyy.MM.dd"));
	ЛогОбмена.Прочитать();
	
	Если ЛогОбмена.Выбран() Тогда
		ТекТаблица = Новый ХранилищеЗначения(ТаблицаЛогов, Новый СжатиеДанных);
		ЛогОбмена.СохраненнаяНастройка = ТекТаблица;
		Если Не ВыполнитьОперациюДляОбъекта(ЛогОбмена, "запись") Тогда 						
			ТекстСообщения = "Не удалось записать сведения в журнал обмена данных!";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное);			
		КонецЕсли; 
	Иначе
		ЛогОбмена.Пользователь 			= ТекПользователь;
		ЛогОбмена.ИмяОбъекта 			= ЭтотОбъект.Метаданные().Имя;
		ЛогОбмена.НаименованиеНастройки = Строка(Формат(ТекущаяДата(), "ДФ=yyyy.MM.dd"));
		ТекТаблица = Новый ХранилищеЗначения(ТаблицаЛогов, Новый СжатиеДанных);
		ЛогОбмена.СохраненнаяНастройка  = ТекТаблица;
		Если Не ВыполнитьОперациюДляОбъекта(ЛогОбмена, "запись") Тогда 						
			ТекстСообщения = "Не удалось записать сведения в журнал обмена данных!";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное);			
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры  //СохранитьТаблицуЛогаВНастройкахПользователя()

// Функция проверяет переданное значение идентификатора на пустой
//
// Параметры:
//  ИД - идентификатор
//
//Возвращаемое значение:
//  Булево
//
// Добавлена 14.06.2007
//
Функция ЭтоПустойИдентификатор(ИД) Экспорт
	Если (СокрЛП(ИД) = "00000000-0000-0000-0000-000000000000") ИЛИ (СокрЛП(ИД) = "") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции //ЭтоПустойИдентификатор()

// Функция преобразовывает дату из формата XML в дату формата 1С
// для переданного элемента таблицы XML
// Параметры:
//  Эл - элемент XML-таблицы
//  Рекв - название реквизита, который нужно преобразовать
//
//Возвращаемое значение:
//  Дата
//
// Добавлена 14.06.2007
//      
Функция ДатаИзXML(Эл, Рекв) Экспорт
	
	_Дата = Эл.ПолучитьАтрибут(Рекв);
	_Дата = СтрЗаменить(_Дата, "-", "");
	_Дата = СтрЗаменить(_Дата, " ", "");
	
	Возврат Дата(_Дата);
	
КонецФункции //ДатаИзXML()

// Функция преобразовывает дату и время из формата XML в дату формата 1С
//
//Возвращаемое значение:
//  Дата
//
// Добавлена Арт 2007-12-26
//
Функция ДатаВремяXMLВФормат1С(ДатаВремя) Экспорт
	
	СимвРазделителяА15 = " ";		
	СимвРазделителяМТ  = "T";
			
	Поз = Найти(ДатаВремя, "-");
	
	Если Поз <> 0 Тогда	 
    	Год   = Число(Лев(ДатаВремя,  Поз - 1));
		Месяц = Число(Сред(ДатаВремя, Поз + 1,2));
		День  = Число(Сред(ДатаВремя, Поз + 4,2));
	Иначе
		Возврат '00010101';
	КонецЕсли;
	
	ПозПробела = Найти(ДатаВремя, СимвРазделителяА15);
	
	Часы    = 0;
	Минуты  = 0;
	Секунды = 0;
	
	Если ПозПробела = 0 Тогда
		ПозПробела = Найти(ДатаВремя, СимвРазделителяМТ);
	КонецЕсли;
	    
	Если ПозПробела > 0 Тогда
		Часы    = Число(Сред(ДатаВремя, ПозПробела + 1, 2));
		Минуты  = Число(Сред(ДатаВремя, ПозПробела + 4, 2));
		Секунды = Число(Сред(ДатаВремя, ПозПробела + 7, 2));
	КонецЕсли;
	
	Возврат Дата(Год, Месяц, День, Часы, Минуты, Секунды);
	
КонецФункции //ДатаВремяXMLВФормат1С()

// Функция возвращает единицу измерения по коду
//
// Параметры:
//  Товар - номенклатура
//  Код -   код единицы, которую нужно получить
//
//Возвращаемое значение:
//  Значение типа "Справочник.ЕдиницыИзмерения"
//
// Добавлена 26.10.2007
//
Функция ПолучитьЕдиницуПоКоду(Товар, Код) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Владелец = &Владелец
	|	И ЕдиницыИзмерения.Коэффициент <> 0
	|	И ЕдиницыИзмерения.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЕдиницыИзмерения.Коэффициент");
	
	Запрос.УстановитьПараметр("Владелец", Товар);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Сч = 0;
	Пока Выборка.Следующий() Цикл		
		Если Сч = Код Тогда
			Возврат Выборка.Ссылка;		
		КонецЕсли;		
		Сч = Сч + 1;
	КонецЦикла;
	
	Возврат Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	
КонецФункции //ПолучитьЕдиницуПоКоду()

Функция ПолучитьКодЕдиницы(Товар, Единица) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка КАК Единица
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Владелец = &Владелец
	|	И ЕдиницыИзмерения.Коэффициент <> 0
	|	И ЕдиницыИзмерения.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЕдиницыИзмерения.Коэффициент");
	
	Запрос.УстановитьПараметр("Владелец", Товар);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Сч = 0;
	Пока Выборка.Следующий() Цикл		
		Если Выборка.Единица = Единица Тогда
			Возврат Сч;		
		КонецЕсли;		
		Сч = Сч + 1;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции //ПолучитьКодЕдиницы()   
 
// Функция получает код категории документа из справочника "кпкКатегорииДокументов"
//
// Параметры:
//  Док - нужный документ
//
//Возвращаемое значение:
//  Число
//
// Добавлена 09.11.2007
//
Функция ВернутьКодКатегорииДокумента(Док, ЭтоДолг = Ложь) Экспорт
	
	Рез = "0";
	СтОтбор = Новый Структура;
	СтОтбор.Вставить("КПКДокумент", Док.Ссылка);
	СведДок = РегистрыСведений.кпкСведенияДокумента.ПолучитьПоследнее(, СтОтбор);
	Если СведДок <> Неопределено Тогда
		Если ЭтоДолг Тогда		
			Если СведДок.КатегорияДляДолга <> Неопределено Тогда
				Если НЕ СведДок.КатегорияДляДолга.Пустая() Тогда
					Рез = СведДок.КатегорияДляДолга;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если СведДок.Категория <> Неопределено Тогда
				Если НЕ СведДок.Категория.Пустая() Тогда
					Рез = СведДок.Категория;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции //ВернутьКодКатегорииДокумента()

// Функция предназначена для определения даты последнего
// созданного трека в ИБ 1С: Предприятия
//
// Возвращаемое значение:
//  Дата
//
// Добавлено: Арт 2007-12-26	                                                                 
//
Функция ПолучитьДатуПоследнегоТрека()
	 	
	РежимЗагрузкиТреков = Константы.кпкРежимЗагрузкиТреков.Получить();
	
	Отбор = Новый Структура("Агент", ВыбАгент);
	
	СтруктураПослТрека = РегистрыСведений.кпкСведенияПоГПСТрекам.ПолучитьПоследнее(ТекущаяДата(), Отбор);
	
	Если РежимЗагрузкиТреков = 0 Тогда			
		ДатаТрека = СтруктураПослТрека.ДатаСоздания;			
	Иначе			
		Если ЗначениеЗаполнено(СтруктураПослТрека.ИмяФайлаТреков) Тогда
			ДатаТрека = ПолучитьДатуПоследнегоТрекаИзФайла(СтруктураПослТрека.ИмяФайлаТреков);									
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат ДатаТрека;
	
КонецФункции //ПолучитьДатуПоследнегоТрека()

Функция ПолучитьДатуПоследнегоТрекаИзФайла(ИмяФайлаТреков) Экспорт
	
	ДатаТрека = '00010101';
	
	// Проверка папки хранения треков
	ПапкаТреков = СокрЛП(Константы.кпкПапкаТреков.Получить()); 
	
	Если Не ЗначениеЗаполнено(ПапкаТреков) Тогда
		
		ТекстСообщения = "Укажите значение константы ""Папка треков"" на форме " + лИмяФормыКонстант +   
						 " Выгрузка последнего созданного трека не произведена!";
		ОповеститьОСобытии(ТекстСообщения);
		Возврат ДатаТрека;
	КонецЕсли;
	
	Если Не кпкАгентПлюс.ПроверитьСуществованиеКаталога(ПапкаТреков, Истина) Тогда
		ТекстСообщения = "Не найден каталог, указанный в константе ""Папка треков""! на форме " + лИмяФормыКонстант +  
						 " Выгрузка последнего созданного трека не произведена!";
		ОповеститьОСобытии(ТекстСообщения);
		Возврат ДатаТрека;   
	КонецЕсли; 	
	
	ТекстФайла = Новый ТекстовыйДокумент();
	
	ДополнитьСлешВПуть(ПапкаТреков);
	
	ПолноеИмяФ = ПапкаТреков + ИмяФайлаТреков;
	
	ФайлНаДиске = Новый Файл(ПолноеИмяФ);   	
	Если Не ФайлНаДиске.Существует() Тогда
		ТекстСообщения = "Не найден файл трека """ + ПолноеИмяФ + """! " +  
						 "Выгрузка последнего созданного трека не произведена!";
		ОповеститьОСобытии(ТекстСообщения);
		Возврат ДатаТрека;   
	КонецЕсли; 	
	
	Попытка 		
		ТекстФайла.Прочитать(ПолноеИмяФ); 						
	Исключение 				
		ОповеститьОСобытии("Не удалось прочитать файл трека " + ПолноеИмяФ);
		ОповеститьОСобытии(ОписаниеОшибки());
		ОповеститьОСобытии("Выгрузка последнего созданного трека не произведена!");
		Возврат ДатаТрека;
	КонецПопытки;		                            
	
	ВсегоСтрок = ТекстФайла.КоличествоСтрок();
	
	// Будем считать, что в последней строке содержится последний записанный трек
	СтрокаПослТрека = ТекстФайла.ПолучитьСтроку(ВсегоСтрок);
	
	Если ПустаяСтрока(СтрокаПослТрека) Тогда               
		СтрокаПослТрека = ТекстФайла.ПолучитьСтроку(ВсегоСтрок-1);   
	КонецЕсли;
	
	Если ФайлНаДиске.Расширение = ".txt" Тогда
		
		ПозДаты = Найти(СтрокаПослТрека,  Символы.Таб);                                 
		
		Если ПозДаты > 0 Тогда 			
			ДатаВремяИзФайла = СокрЛП(Лев(СтрокаПослТрека, ПозДаты));			
			ДатаТрека        = ДатаВремяXMLВФормат1С(ДатаВремяИзФайла); 			
		КонецЕсли;	
		
	ИначеЕсли ФайлНаДиске.Расширение = ".plt" Тогда
		
		СчЗп = 0;
		ПозЗп = Найти(СтрокаПослТрека, ",");
		// После 5-й по счету запятой следует дата
		Пока ПозЗп > 0 Цикл
			СчЗп = СчЗп + 1;			
			СтрокаПослТрека = Сред(СтрокаПослТрека, ПозЗп + 1);
			ПозЗп = Найти(СтрокаПослТрека, ",");
			Если СчЗп = 5 Тогда				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ПозЗп = Найти(СтрокаПослТрека, ",");
		Если ПозЗп > 0 Тогда
			ДатаТрека = Лев(СтрокаПослТрека, ПозЗп-1); 
			ВремяТрека = Сред(СтрокаПослТрека, ПозЗп+1, 6);
			
			Год   = Число("20" + Прав(ДатаТрека, 2));
			Месяц = Число(Сред(ДатаТрека, 3,2));
			День  = Число(Лев(ДатаТрека, 2));
			
			Часы    = Число(Лев(ВремяТрека, 2));
			Минуты  = Число(Сред(ВремяТрека, 3,2));
			Секунды = Число(Прав(ВремяТрека, 2));
			
			ДатаТрека = Дата(Год, Месяц, День, Часы, Минуты, Секунды);
		КонецЕсли;
		
	Иначе
		Возврат ДатаТрека;
	КонецЕсли;
	
	Возврат ДатаТрека;
	
КонецФункции //ПолучитьДатуПоследнегоТрекаИзФайла()

Процедура УстановитьТипЦеныВДокументе(КодТипаЦен, Док) Экспорт
	 	 
	Если КодТипаЦен <= 0 Тогда
		ТекстСообщения = "В документе " + Строка(Док) + " не правильно указан тип цены! Будет проставлен тип цены из договора!";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, Док);      
		ТипЦен = Док.Договор.ВидЦен;				
	Иначе                                       		
		НайденнаяСтрока = тзКатегорииЦен.Найти(КодТипаЦен, "Код");
		Если НайденнаяСтрока = Неопределено Тогда
			ТекстСообщения = "В списке выгружаемых типов цен для мобильного устройства не найден тип цены с кодом: " + КодТипаЦен + ". Будет проставлен тип цены из договора!";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, Док);      
			ТипЦен = Док.Договор.ВидЦен;
		Иначе
			ТипЦен = НайденнаяСтрока.ТипыЦен;
		КонецЕсли;
	КонецЕсли;
	
	Док.ВидЦен = ТипЦен;	
	
	МетаданныеДокумента = Док.Метаданные();
	
	// Если тип цен оказался не заполненным, то берем его из установок пользователя
	Если НЕ ЗначениеЗаполнено(Док.ВидЦен) Тогда
		Док.ВидЦен = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекПользователь, "ОсновнойТипЦенПродажи");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Док.ВидЦен) Тогда
		// Если ВидЦен - элемент справочника ВидыЦен и цены выбранного типа расчетные, 
		// то флаги включения налогов надо брать из базовой цены
		Если ТипЗнч(Док.ВидЦен) = Тип("СправочникСсылка.ВидыЦен") И Док.ВидЦен.РассчитываетсяДинамически Тогда
			флСуммаВключаетНДС = Док.ВидЦен.БазовыйВидЦен.ЦенаВключаетНДС;
		Иначе
			флСуммаВключаетНДС = Док.ВидЦен.ЦенаВключаетНДС;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) Тогда
		Док.СуммаВключаетНДС = флСуммаВключаетНДС;	
	КонецЕсли;
	
КонецПроцедуры //УстановитьТипЦеныВДокументе()

// Процедура формирует таблицу типов цен номенклатуры
// для выгрузки в КПК
// 
Процедура СформироватьТаблицуВыгружаемыхТиповЦен()  	

	тзКатегорииЦен.Очистить();
	
	ТаблицаВыгружаемыхТиповЦен = Константы.кпкТипыЦен.Получить().Получить();
	
	Если ТипЗнч(ТаблицаВыгружаемыхТиповЦен) <> Тип("ТаблицаЗначений") Тогда		
		ОповеститьОСобытии("Нужно указать список выгружаемых типов цен номенклатуры на форме констант " + лИмяФормыКонстант + "!");  		
		Возврат;
	КонецЕсли;
	
	Если ТаблицаВыгружаемыхТиповЦен.Колонки.Найти("Код") = Неопределено Тогда			
		ОповеститьОСобытии("Нужно перезаполнить список выгружаемых типов цен номенклатуры на форме констант " + лИмяФормыКонстант + "!");  		
		Возврат;
	КонецЕсли;  
	
	СтОтбор = Новый Структура("Объект", ВыбАгент);
	
	ДоступностьТиповЦен = РегистрыСведений.кпкСведенияАгента.Получить(СтОтбор).ДоступностьТиповЦен;
	
	Если ДоступностьТиповЦен = Перечисления.кпкДоступностьТиповЦен.ТипыЦенИзСписка Тогда 
		
		ТаблицаЦен = РегистрыСведений.кпкСведенияАгента.Получить(СтОтбор).ДоступныеТипыЦен.Получить();
		
		Если ТаблицаЦен = Неопределено Тогда
			ОповеститьОСобытии("Нужно определить выгружаемый список типов цен для агента: " + ВыбАгент + " в регистре сведений ""Сведения агента""!");
			Возврат;
		КонецЕсли;
		
		Для Каждого СтрокаТаб Из ТаблицаЦен Цикл
			
			НайденнаяСтрока = ТаблицаВыгружаемыхТиповЦен.Найти(СтрокаТаб.ТипЦены, "ТипыЦен");
			
			Если Не НайденнаяСтрока = Неопределено Тогда
				
				Если НайденнаяСтрока.Выгружать Тогда
					
					НовСтрока = тзКатегорииЦен.Добавить();
					НовСтрока.ТипыЦен = НайденнаяСтрока.ТипыЦен;
					НовСтрока.Код 	  = НайденнаяСтрока.Код;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
				
		тзКатегорииЦен = ТаблицаВыгружаемыхТиповЦен.Скопировать(Новый Структура("Выгружать", Истина));
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьТаблицуВыгружаемыхТиповЦен()
  
// Процедура производит заполенение одинаковых реквизитов шапки для документов
//
// Добавлена 14.06.2007
//
Процедура ЗаполнитьОсновныеПараметрыДокумента(Док, СтруктураДокКПК, Менеджер, СтруктураПолей, ТипОперации, СтрокаТЧ = Неопределено) Экспорт
	
	ИдФирмы   	= СтруктураДокКПК.ИдФирмы;
	ИдКлиента 	= СтруктураДокКПК.ИдКлиента;
	ИдТоргТочки = СтруктураДокКПК.ИдТоргТочки;
	ИдДоговора  = СтруктураДокКПК.ИдДоговора;
	ВидДок 		= СтруктураДокКПК.ВидДокумента;
	НомерДок    = Строка(СтруктураДокКПК.Номер);  
	ДатаДок 	= СтруктураДокКПК.Дата;
	Комментарий = СтруктураДокКПК.Комментарий;
	
	ПредставлениеДокВКПК = ВидДок + " № " + НомерДок + " от " + ДатаДок;
		
	Если СтруктураПолей.Свойство("Организация") Тогда
		// Получаем организацию из документа
		Если ЭтоПустойИдентификатор(ИдФирмы) Тогда			
			ОповеститьОСобытии("В документе: " + ПредставлениеДокВКПК + " не указана фирма!", СтатусСообщения.Внимание);      
		Иначе		
			Организация = ПолучитьСсылкуИзСправочника(ИдФирмы, "Организации");			
			Если Док.Метаданные().Реквизиты.Найти("Организация") <> Неопределено Тогда
				Док.Организация = Организация;
			КонецЕсли;
		КонецЕсли;    		
	КонецЕсли;
	
	Если СтруктураПолей.Свойство("Подразделение") Тогда
		
		Если Док.Метаданные().Реквизиты.Найти("Подразделение") <> Неопределено Тогда
			Док.Подразделение = ВыбАгент.Менеджер.Подразделение;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураПолей.Свойство("Менеджер") Тогда	
		Если Док.Метаданные().Реквизиты.Найти("Менеджер") <> Неопределено Тогда
			Док.Менеджер = ВыбАгент.Менеджер;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПолей.Свойство("Контрагент") Тогда		
		// Получаем торговую точку из документа
		Если ЭтоПустойИдентификатор(ИдКлиента) Тогда			
			ОповеститьОСобытии("В документе: " + ПредставлениеДокВКПК + " не указан контрагент!", СтатусСообщения.Внимание);
		Иначе	
			Контрагент = ПолучитьСсылкуИзСправочника(ИдКлиента, "Контрагенты");
			Если Док.Метаданные().Реквизиты.Найти("Контрагент") <> Неопределено Тогда
				Док.Контрагент = Контрагент;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	
	Если СтруктураПолей.Свойство("ТипЦен") Тогда	
		Если Док.Метаданные().Реквизиты.Найти("ТипЦен") <> Неопределено Тогда
			
			НайденнаяСтрока = Док.Контрагент.Менеджеры.Найти(ВыбАгент.Менеджер, "Менеджер");
			Если НайденнаяСтрока = Неопределено Тогда
			Иначе
				Док.ТипЦен = НайденнаяСтрока.ТипЦен;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	
	
	
	Если СтруктураПолей.Свойство("ДоговорКонтрагента") Тогда				
		
		Если Константы.кпкИспользоватьДоговоры.Получить() Тогда
			// Получаем торговую точку из документа
			Если ЭтоПустойИдентификатор(ИдДоговора) Тогда			
				ОповеститьОСобытии("В документе: " + ПредставлениеДокВКПК + " не указан договор! Будет проставлен договор по умолчанию!", СтатусСообщения.Внимание);				
			Иначе	
				ДоговорКонтрагента = ПолучитьСсылкуИзСправочника(ИдДоговора, "ДоговорыКонтрагентов");				
				Если Док.Метаданные().Реквизиты.Найти("Договор") <> Неопределено Тогда
					Док.Договор = ДоговорКонтрагента;
				КонецЕсли;
				Если СтрокаТЧ <> Неопределено тогда
					СтрокаТЧ.Договор = ДоговорКонтрагента;
				КонецЕсли;
			КонецЕсли;                                         
		КонецЕсли;	
				
	КонецЕсли;  	
	
	Если ИспТочек Тогда
		// Получаем торговую точку из документа
		Если СтруктураПолей.Свойство("ТорговаяТочка") Тогда		
			
			Если ИдТоргТочки = ИдКлиента Тогда // ID пустой точки в А+ совпадает с ID клиента				
				ОповеститьОСобытии("В документе: " + ПредставлениеДокВКПК + " не указана торговая точка!", СтатусСообщения.Внимание);
			Иначе				
				Точка = ПолучитьСсылкуИзСправочника(ИдТоргТочки, "кпкТорговыеТочки");								
				Если Док.Метаданные().Реквизиты.Найти("кпкТорговаяТочка") <> Неопределено Тогда
					Док.кпкТорговаяТочка = Точка;
				ИначеЕсли Док.Метаданные().Реквизиты.Найти("ТорговаяТочка") <> Неопределено Тогда
					Док.ТорговаяТочка = Точка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;   		
	КонецЕсли;    	
	
	Если Док.Метаданные().Реквизиты.Найти("Агент") <> Неопределено Тогда
		Док.Агент = ВыбАгент;
	КонецЕсли; 	
	
	Если Док.Метаданные().Реквизиты.Найти("Комментарий") <> Неопределено Тогда
		Док.Комментарий = Комментарий;
	КонецЕсли;
	
	Если Не Док.Проведен Тогда
		Док.Дата = ТекущаяДата();
	КонецЕсли;
	
	ИспАвтонумерациюЦБД	= Константы.кпкИспользоватьАвтонумерациюДокументовВЦБД.Получить();
	ИспАвтонумерациюЦБД = Истина;
	
	Если ЗначениеЗаполнено(НомерДок) И (Не ИспАвтонумерациюЦБД) Тогда
		Если Менеджер.НайтиПоНомеру(НомерДок, ТекущаяДата()) = Менеджер.ПустаяСсылка() Тогда	
			Док.Номер = НомерДок;	
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДокКПК.Свойство("ВидЦен") Тогда
		Если Док.Метаданные().Реквизиты.Найти("ВидЦен") <> Неопределено Тогда
			ВидЦены = ПолучитьСсылкуИзСправочника(СтруктураДокКПК.ВидЦен, "ВидыЦен");								
			Док.ВидЦен 	= ВидЦены;
			Если Док.Метаданные().Реквизиты.Найти("СуммаВключаетНДС") <> Неопределено Тогда
				Док.СуммаВключаетНДС = ВидЦены.ЦенаВключаетНДС;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДокКПК.Свойство("СуммаДокумента") Тогда
		Если Док.Метаданные().Реквизиты.Найти("СуммаДокумента") <> Неопределено Тогда
			Док.СуммаДокумента 	= СтруктураДокКПК.СуммаДокумента;
		КонецЕсли;
	КонецЕсли;
	
	Если Док.Метаданные().Реквизиты.Найти("Автор") <> Неопределено Тогда
		Док.Автор 	= ТекПользователь;
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьОсновныеПараметрыДокумента()

// Процедура заполняет договор в документе
//
// Добавлена 2009-07-01
//  
Процедура УстановитьДоговорВДокументе(Док, СтрокаТЧ = Неопределено) Экспорт
	
	Если СтрокаТЧ <> Неопределено тогда
		Док_Договор = СтрокаТЧ.Договор;
	ИначеЕсли Док.Метаданные().Реквизиты.Найти("Договор") <> Неопределено Тогда
		Док_Договор = Док.Договор;
	Иначе
		Док_Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Док_Договор) Тогда
		Возврат;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Док.Контрагент) и Не ЗначениеЗаполнено(Док_Договор) Тогда
		СписокДопустимыхВидовДоговоров = Новый СписокЗначений();
		СписокДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
		
		мСтруктураПараметровДляПолученияДоговора = Новый Структура("СписокДопустимыхВидовДоговоров", СписокДопустимыхВидовДоговоров);
		
		РежимВыгрузкиКонтрагентов = Константы.кпкРежимВыгрузкиКонтрагентов.Получить();
		
		// Получаем список доступных договоров для контрагента
		РезультатЗапроса = кпкАгентПлюс.ПолучитьДоступныеДоговорыКонтрагента(Док.Контрагент, мСтруктураПараметровДляПолученияДоговора, Ложь, Док.Организация);
		ТаблицаДоговоров = РезультатЗапроса.Выгрузить();

		Если РежимВыгрузкиКонтрагентов = 1 или РежимВыгрузкиКонтрагентов = 4 Тогда // выгрузка по списку договоров
			
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	кпкДоговораАгентов.Договор,
			|	ВЫБОР
			|		КОГДА кпкДоговораАгентов.Договор = кпкДоговораАгентов.Договор.Владелец.ДоговорПоУмолчанию
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК Сортировка
			|ИЗ
			|	Справочник.кпкДоговораАгентов КАК кпкДоговораАгентов
			|ГДЕ
			|	(НЕ кпкДоговораАгентов.ПометкаУдаления)
			|	И кпкДоговораАгентов.Владелец = &Агент
			|	И кпкДоговораАгентов.Договор В ИЕРАРХИИ(&СписокДоговоров)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Сортировка УБЫВ");
			
			Запрос.УстановитьПараметр("Агент", 		     ВыбАгент);
			Запрос.УстановитьПараметр("СписокДоговоров", ТаблицаДоговоров.ВыгрузитьКолонку("Договор"));
			
			Выборка = Запрос.Выполнить().Выбрать();
			// Проставляем первый попавшийся договор
			Если Выборка.Следующий() Тогда
				Док_Договор = Выборка.Договор;				
			Иначе    				
				Если Константы.кпкРежимТоргТочек.Получить() = 1 Тогда
					Если Док.Метаданные().Реквизиты.Найти("кпкТорговаяТочка") <> Неопределено Тогда
						Док_Договор = Док.кпкТорговаяТочка.Договор;
					ИначеЕсли Док.Метаданные().Реквизиты.Найти("ТорговаяТочка") <> Неопределено Тогда
						Док_Договор = Док.ТорговаяТочка.Договор;
					КонецЕсли;  				
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Док_Договор) Тогда
					
					Для Каждого СтрокаТаб Из ТаблицаДоговоров Цикл
						Если СтрокаТаб.Договор = Док.Контрагент.ДоговорПоУмолчанию Тогда
							ТекстСообщения = "Не найдено ни одного подходящего договора для контрагента " + СокрЛП(Док.Контрагент) + " из указанного списка договоров агента." + Символы.ПС + 
											 "В документ: " + Строка(Док)+ " будет проставлен основной договор!";
						Иначе
							ТекстСообщения = "Не найдено ни одного подходящего договора для контрагента " + СокрЛП(Док.Контрагент) + " из указанного списка договоров агента." + Символы.ПС + 
										     "В документ: " + Строка(Док)+ " будет проставлен первый попавшийся подходящий договор!";
						КонецЕсли;
						ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, Док.Ссылка);
						Док_Договор = СтрокаТаб.Договор;						
						Прервать;
					КонецЦикла;
					             					
					Если Не ЗначениеЗаполнено(Док_Договор) Тогда
						ТекстСообщения = "Не найдено ни одного подходящего договора для контрагента " + СокрЛП(Док.Контрагент) + "." + Символы.ПС + 
										 "В документ: " + Строка(Док)+ " не проставлен договор! Укажите договор вручную или создайте новый!";
						ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, Док.Ссылка);
					КонецЕсли; 
					
				КонецЕсли;  
				
			КонецЕсли;
			
		Иначе
			
			Если Константы.кпкРежимТоргТочек.Получить() = 1 Тогда
				Если Док.Метаданные().Реквизиты.Найти("кпкТорговаяТочка") <> Неопределено Тогда
					Док_Договор = Док.кпкТорговаяТочка.Договор;
				ИначеЕсли Док.Метаданные().Реквизиты.Найти("ТорговаяТочка") <> Неопределено Тогда
					Док_Договор = Док.ТорговаяТочка.Договор;
				КонецЕсли;  				
			КонецЕсли;  
			
			Если Не ЗначениеЗаполнено(Док_Договор) Тогда
				
				Для Каждого СтрокаТаб Из ТаблицаДоговоров Цикл
					Док_Договор = СтрокаТаб.Договор;
					Прервать;				
				КонецЦикла;		
				
				Если Не ЗначениеЗаполнено(Док_Договор) Тогда
					ТекстСообщения = "Не найдено ни одного подходящего договора для контрагента " + СокрЛП(Док.Контрагент) + "." + Символы.ПС + 
									 "В документ: " + Строка(Док)+ " не проставлен договор! Укажите договор вручную или создайте новый!";
					ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, Док.Ссылка);
				КонецЕсли;  
				
			КонецЕсли;  
			
		КонецЕсли;
	КонецЕсли;
	
	Если Док.Метаданные().Реквизиты.Найти("Договор") <> Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(Док.Договор) тогда
			Док.Договор = Док_Договор;
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если СтрокаТЧ <> Неопределено Тогда
		
		СтрокаТЧ.Договор = Док_Договор;
		
	КонецЕсли; 	
	
КонецПроцедуры // УстановитьДоговорВДокументе()

// Функция выполняет укзанную операцию с переданным объектом
// и возвращает значение типа Булево в результате выполнения
// операции
//
Функция ВыполнитьОперациюДляОбъекта(Объект, ВидОперации) Экспорт
	
	флОперацияВыполнена = Ложь;
		
	Для Сч = 1 По КоличествоПопыток Цикл
		
		Попытка
			
			Если ВидОперации = "запись" Тогда				
				Объект.Записать();
			ИначеЕсли ВидОперации = "проведение" Тогда
				Если Объект.ПометкаУдаления Тогда					
					ОповеститьОСобытии("Документ помечен на удаление - проведение отменено!", СтатусСообщения.Важное, Истина, Объект);					
					Возврат Ложь;					
				Иначе            					
					Объект.Записать(РежимЗаписиДокумента.Проведение);                                                   					
				КонецЕсли;				
			ИначеЕсли ВидОперации = "создание" Тогда
				Если Найти(Строка(Объект), "Справочник")>0 Тогда    
					Объект = Объект.СоздатьЭлемент();
				ИначеЕсли Найти(Строка(Объект), "Документ")>0 Тогда
					Объект = Объект.СоздатьДокумент();
				ИначеЕсли Найти(Строка(Объект), "Регистр")>0 Тогда
					Объект = Объект.СоздатьМенеджерЗаписи();      
				Иначе
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			
			флОперацияВыполнена = Истина;
			
			Прервать;
			
		Исключение
			
			Сообщить("------------------------------------------------------" + Символы.ПС + ОписаниеОшибки());
			
			// Пауза снизит нагрузку на сервер и позволит другим пользователям закончить операции,
			// которые идут в транзакции.
			#Если Клиент Тогда
			Предупреждение("В данный момент нет возможности выполнить " + ВидОперации + " для объекта: " + Строка(Объект) +
							Символы.ПС + "Повторная попытка будет произведена через " + ПаузаМеждуПопытками + " секунд",
							ПаузаМеждуПопытками, "Пауза"); 
			#КонецЕсли
			
			ТекстСообщения = "Не удалось выполнить " + ВидОперации + " для объекта: """ + Строка(Объект) + """";
			
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное, Истина, Объект);
			
		КонецПопытки; 
		
	КонецЦикла;        		
		
	Возврат флОперацияВыполнена;
			
КонецФункции //ВыполнитьОперациюДляОбъекта()
  	
Процедура ПриИзмененииАгента(ТекАгент) Экспорт
	
	Если ЗначениеЗаполнено(ТекАгент) Тогда
		
		Выборка = РегистрыСведений.кпкСведенияАгента.Выбрать(Новый Структура("Объект", ВыбАгент));
		
		Если Выборка.Следующий() Тогда    			
			
			СведенияАгента = ПолучитьДанныеАгента();
			
			КассыАгента 	 	 = СведенияАгента.КассыАгента;
			КПК 		 		 = СведенияАгента.КПК;
			ОснФирма 	 		 = СведенияАгента.ОсновнаяФирма;
			ПрефиксАгента		 = СведенияАгента.ПрефиксНомеровДок;
			СписокСкладов 		 = СведенияАгента.СписокСкладов;
			АвтоСклад 	  		 = СведенияАгента.ПередвижнойСклад;
			ОснКассаККМ   		 = СведенияАгента.КассаККМ;
			ПарольЗИП     		 = СведенияАгента.ПарольЗИП;
			ВидОплатыПоУмолчанию = СведенияАгента.ВидОплатыПоУмолчанию;
			ОснСклад     		 = СведенияАгента.ОсновнойСклад;
			
		Иначе
			
			ТекстСообщения = "В регистре сведений ""Сведения агентов"" не найдено данных по агенту: " + ТекАгент + "!";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Ложь);			
			Возврат;
			
		КонецЕсли;		
		
	Иначе
		
		СведенияАгента.Очистить();
		
	КонецЕсли;   
	
КонецПроцедуры //ПриИзмененииАгента()
 
// Процедура сообщает о документе, который уже был загружен
//
// Добавлена 14.06.2007
//    
Процедура СообщитьОПропускеДокумента(СтруктураПараметров) Экспорт

	ТекстСообщения = "Пропущена загрузка документа """ + СтруктураПараметров.ВидДокумента +
					 """ № " + Строка(СтруктураПараметров.Номер) + " от " + Строка(СтруктураПараметров.Дата) + 
					 " - документ был загружен ранее.";
	ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация);
	
КонецПроцедуры //СообщитьОПропускеДокумента()

Функция УстановитьНастройкиПоУмолчанию() Экспорт
	
	Если СпособОбмена = 0 Тогда
		СпособОбмена = Константы.кпкСпособОбмена.Получить();
	КонецЕсли;
	
	РеализацияПоЗаявкам = Константы.кпкРеализацияПоЗаявкам.Получить();
	
	Если СпособОбмена = 2 Тогда  				
		НастроитьАвтообменССервером();   			
	КонецЕсли;    	
			
	флАрхив 		    = Истина;	
	флАвтоИсторияПродаж = Ложь;	
	
	НачПериодаЗаданий = ТекущаяДата();
	КонПериодаЗаданий = ТекущаяДата();
	
	СрокПеремещений = Константы.кпкСрокПеремещений.Получить();
	
	ПланПосещений = Документы.кпкПланПосещений.ПустаяСсылка();
	
	Возврат Истина;
	
КонецФункции //УстановитьНастройкиПоУмолчанию()

Функция ПреобразоватьКодСправочника(ЭлементСпр)
	
	Префикс = Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить();
	
	СтрКод = СокрЛП(ЭлементСпр.Код);
	СтрКод = СтрЗаменить(СтрКод, Префикс, "");
	
	Числ = 0;
	Попытка
		Числ = Число(СтрКод);
	Исключение    		
		Представление = ЭлементСпр.Ссылка.Метаданные().Представление();
		ОповеститьОСобытии("Неверно указан код: " + СокрЛП(ЭлементСпр.Код) + " элемента справочника: """ + Представление + """." + 
						   "Требуется указать числовое значение кода!", СтатусСообщения.Внимание, Истина, ЭлементСпр.Ссылка);
	КонецПопытки;
	
	Возврат Числ;
	
КонецФункции //ПреобразоватьКодСправочника()

// Функция СократитьНаименование() формирует сокращенную строку 
// путем скоращения некоторых слов. Слова при необходимости могут
// быть дополнены программистом
//
Функция СократитьНаименование(ТекНаим) Экспорт
	
	Наим = СокрЛП(ТекНаим);
	
	Наим = Лев(Наим, 1) + НРег(Сред(Наим, 2)); // понижаем регистр кроме первой буквы
	Наим = СтрЗаменить(Наим,"   "," ");		   // для сокращения наименования заменяем тройной пробел на одинарный
	Наим = СтрЗаменить(Наим,"  "," ");		   // ... двойной пробел на одинарный
	Наим = СтрЗаменить(Наим,". ",".");		   // ... ". " на "."
	Наим = СтрЗаменить(Наим,"""","'");		   // заменяем двойную кавычку на одинарную
	                                        
	Если СтрДлина(Наим) <= 20 Тогда
		Возврат Наим;
	КонецЕсли;
	
	Наим = СтрЗаменить(Наим,"для ","д/");
	Наим = СтрЗаменить(Наим," г ","г ");
	Наим = СтрЗаменить(Наим," г.","г.");
	Наим = СтрЗаменить(Наим," мл","мл");
	Наим = СтрЗаменить(Наим,", ",",");
	Наим = СтрЗаменить(Наим," (","(");
	Наим = СтрЗаменить(Наим,") ",")");
	Наим = СтрЗаменить(Наим," )",")");
	Наим = СтрЗаменить(Наим,"( ","(");
	Наим = СтрЗаменить(Наим," -","-");
	Наим = СтрЗаменить(Наим,"- ","-");
	Наим = СтрЗаменить(Наим," +","+");
	Наим = СтрЗаменить(Наим,"+ ","+");
	Наим = СтрЗаменить(Наим," шт ","шт ");
	Наим = СтрЗаменить(Наим," шт.","шт.");
	Наим = СтрЗаменить(Наим," гр ","г ");
	Наим = СтрЗаменить(Наим," /","/");
	Наим = СтрЗаменить(Наим,"/ ","/");
	Наим = СтрЗаменить(Наим,".,",".");
	Наим = СтрЗаменить(Наим,",.",".");
	Наим = СтрЗаменить(Наим," кг","кг");
	
	Возврат Наим;
	
КонецФункции // СократитьНаименование()

Процедура НастроитьАвтообменССервером() Экспорт
	
	Если флАвтоОбмен Тогда
		ПапкаСервера = СокрЛП(Константы.кпкАПСПапкаОбмена.Получить());
		Если Не ЗначениеЗаполнено(ПапкаСервера) Тогда
			ТекстСообщения = "Не указана константа ""Папка обмена"" для способа обмена ""Агент Плюс СОД"". Автообмен не будет производиться!";
			ОповеститьОСобытии(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		КПКОбъектServer.SetExchangeDir(ПапкаСервера);
		КПКОбъектServer.EnableServer();
		
	Иначе
		
		КПКОбъектServer.DisableServer();			            
		
	КонецЕсли;
	
КонецПроцедуры //НастроитьАвтообменССервером
    
Процедура ЗаписатьВПротоколЗагрузкуЭлемСпр(Спр, ЭтоНовый)
	
	Наим 		  = Спр.Наименование;
	Представление = Спр.Ссылка.ПолучитьОбъект().Метаданные().Представление();
	ИмяСпр 	      = Спр.Ссылка.ПолучитьОбъект().Метаданные().Имя;
	
	Если ЭтоНовый Тогда
		ТекстСообщения = "Записан новый элемент справочника: """ + Представление + """ (""" + Наим + """)";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Истина, Спр.Ссылка);
	Иначе
		ТекстСообщения = "Обновлен элемент справочника: """ + Представление + """ (""" + Наим + """)";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Истина, Спр.Ссылка);
	КонецЕсли;  
	
	ИдСпр = Строка(Спр.Ссылка.УникальныйИдентификатор());
	Если СписЗагруженныхОбъектовСпр.НайтиПоЗначению(ИдСпр) = Неопределено Тогда
    	СписЗагруженныхОбъектовСпр.Добавить(ИдСпр, ИмяСпр);
	КонецЕсли;                                          	
	
КонецПроцедуры //ЗаписатьВПротоколЗагрузкуЭлемСпр

Процедура ДобавитьСтрокуПоСкидкеНоменклатуры(ТаблицаНом, Ном, Цена, Контр, Процент)
	
	НужныеСтроки = ТаблицаНом.НайтиСтроки(Новый Структура("Номенклатура, Контрагент", Ном, Контр));
	
	Если НужныеСтроки.Количество() = 0 Тогда			
		НоваяСтрока = ТаблицаНом.Добавить(); 
		НоваяСтрока.Номенклатура = Ном;
		НоваяСтрока.Контрагент   = Контр;
		НоваяСтрока.Процент 	 = Процент;
		НоваяСтрока.Цена 		 = Цена;
	Иначе
		Для Каждого НужСтрока Из НужныеСтроки Цикл			
			НужСтрока.Процент = Процент;					
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры //ДобавитьСтрокуПоСкидкеНоменклатуры()

// Процедура создает новый документ "РеализацияТоваровиУслуг",на основании документа "ЗаказаПокупателя",
// используя стандартный метод "Заполнить()"                                                            
//
// Добавлена 29.06.2007
//   
Процедура ВвестиРеализациюНаОснованииЗаявки(ДокЗаявка)
	
	// Ищем среди подчиненных документов данной заявки реализацию
	ДокРеал = 0;
	СтРеал = Новый Структура;
	СтЗаявка = Новый Структура;
	СтЗаявка.Вставить("Сделка", ДокЗаявка);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	РасходнаяНакладная.Ссылка,
	|	РасходнаяНакладная.Заказ КАК Сделка
	|ИЗ
	|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
	|ГДЕ
	|	РасходнаяНакладная.Заказ.Ссылка = &Сделка";
	
	Запрос.УстановитьПараметр("Сделка", ДокЗаявка.Ссылка);
	Реализации = Запрос.Выполнить().Выбрать();

	Если Реализации.Следующий() Тогда
		ДокРеал = Реализации.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	Если ДокРеал <> 0 Тогда // Нашли документ, созданный на основании заявки
		Если Не флОбновлять Тогда
			Возврат;
		КонецЕсли;		
		ДокРеал.Запасы.Очистить();
		ДокРеал.Дата = ТекущаяДата();
	Иначе    		
		ДокРеал = Документы.РасходнаяНакладная;
		
		Если Не ВыполнитьОперациюДляОбъекта(ДокРеал, "создание") Тогда 			
			ТекстСообщения = "Не удалось создать новый документ ""Расходная накладная""!";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное);
			Возврат;			
		КонецЕсли;  		
		ДокРеал.Дата = ТекущаяДата();
	КонецЕсли;
	
	ДокРеал.Заполнить(ДокЗаявка.Ссылка);
	
	Если ИспТочек Тогда
		ДокРеал.кпкТорговаяТочка = ДокЗаявка.кпкТорговаяТочка;
	КонецЕсли;
	
	Если ВыполнитьОперациюДляОбъекта(ДокРеал, "запись") Тогда 			
		ТекстСообщения = "На основании документа: " + Строка(ДокЗаявка.Ссылка) + " создан документ: " + Строка(ДокРеал);
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Истина, ДокРеал.Ссылка);	
		
		Если флПроводить Тогда
			
			Если Не ЗначениеЗаполнено(ДокРеал.Контрагент) Тогда
				ОповеститьОСобытии("В документе " + Строка(ДокРеал) + " не указан контрагент. Документ не будет проведен!", СтатусСообщения.Важное, Истина, ДокРеал.Ссылка);
				Проводить = Ложь;
			КонецЕсли;
			
			//Если Не ЗначениеЗаполнено(ДокРеал.Договор) Тогда
			//	ОповеститьОСобытии("В документе " + Строка(ДокРеал) + " не указан договор. Документ не будет проведен!", СтатусСообщения.Важное, Истина, ДокРеал.Ссылка);
			//	Проводить = Ложь;
			//КонецЕсли;
			
			Если ДокРеал.СуммаДокумента = 0 Тогда
				ОповеститьОСобытии("Сумма документа " + Строка(ДокРеал) + " равна 0. Документ не будет проведен!", СтатусСообщения.Важное, Истина, ДокРеал.Ссылка);
				Проводить = Ложь;
			КонецЕсли;
			
			Если Проводить Тогда
				Если Не ВыполнитьОперациюДляОбъекта(ДокРеал, "проведение") Тогда 							
					ОповеститьОСобытии("Не удалось провести документ: " + Строка(ДокРеал), СтатусСообщения.Важное, Истина, ДокРеал.Ссылка);
					Возврат;			
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;	
	Иначе
		ТекстСообщения = "Не удалось записать документ: " + Строка(ДокРеал) + ", созданного на основании документа: " + Строка(ДокЗаявка.Ссылка);
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное, Истина, ДокРеал.Ссылка);		
	КонецЕсли;
	
КонецПроцедуры //ВвестиРеализациюНаОснованииЗаявки()
   
// Функция создает каталог временных файлов для фото, если его не существует
// а если каталог существует, то очищает его
//
Процедура ОчиститьПапкуВременныхФото()
	
	ПапкаВремФото = КаталогВременныхФайлов() + "Photos1C\";
	
	кпкАгентПлюс.ПроверитьСуществованиеКаталога(ПапкаВремФото, Ложь, Истина);
	
	НайденныеФайлы = НайтиФайлы(ПапкаВремФото, "*.*");	
	
	Если НайденныеФайлы.Количество() > 0 Тогда
		Сообщить("Удаление временных файлов фото ...");
		УдалитьФайлы(ПапкаВремФото, "*.*");
	КонецЕсли;
	
КонецПроцедуры //ОчиститьПапкуВременныхФото 
 
Функция ПолучитьКодТипаЦены(ПарТипЦены, ОбъектМетаданных, Объект = Неопределено)  	
	
	КодТипаЦены = "";
	
	Если Не ПарТипЦены = Неопределено Тогда
		
		Если Не ПарТипЦены.Пустая() Тогда 
			
			Если ТипЗнч(ПарТипЦены) = Тип("СправочникСсылка.ВидыЦенКонтрагентов") Тогда
				ТипЦены = ПарТипЦены.ТипЦеныНоменклатуры;
			Иначе
				ТипЦены = ПарТипЦены;
			КонецЕсли;
			
			НайденнаяСтрока = тзКатегорииЦен.Найти(ТипЦены, "ТипыЦен");
			
			Если Не НайденнаяСтрока = Неопределено Тогда  
				
				КодТипаЦены = НайденнаяСтрока.Код;		
				
			Иначе
				
				СтОтбор = Новый Структура("Объект", ВыбАгент);
				
				ДоступностьТиповЦен = РегистрыСведений.кпкСведенияАгента.Получить(СтОтбор).ДоступностьТиповЦен;
				
				Если СписНеНайденныхТиповЦен.НайтиПоЗначению(ТипЦены) = Неопределено Тогда
					
					ТипОбъекта = Строка(ОбъектМетаданных);
					
					Если Найти(ТипОбъекта, "Регистр") = 0 Тогда 					
						ИмяОбъекта = ОбъектМетаданных.Метаданные().Имя;
						Если Метаданные.Справочники.Найти(ИмяОбъекта) <> Неопределено Тогда
							ТипОбъекта = "Справочник";
						ИначеЕсли Метаданные.Документы.Найти(ИмяОбъекта) <> Неопределено Тогда							
							ТипОбъекта = "Документ";					
						КонецЕсли;
					КонецЕсли;
					
					Если Найти(ТипОбъекта, "Справочник")>0 Тогда    
						ВидОбъекта = ОбъектМетаданных.Метаданные().Синоним;
						СтрТипОбъекта = "элементе справочника """ + ВидОбъекта + """: " + Строка(ОбъектМетаданных);
					ИначеЕсли Найти(ТипОбъекта, "Документ")>0 Тогда
						ВидОбъекта = ОбъектМетаданных.Метаданные().Синоним;
						СтрТипОбъекта = "документе: " + Строка(ОбъектМетаданных);  
					ИначеЕсли Найти(ТипОбъекта, "Регистр")>0 Тогда 						
						ВидОбъекта = РегистрыСведений.кпкСведенияКонтрагента.СоздатьНаборЗаписей().Метаданные();						
						СтрТипОбъекта = "записи регистра сведений """ + ВидОбъекта + """ для объекта: """ + Строка(Объект) + """";  
					КонецЕсли;
										
					ТекстОкончание = "Используется в " + СтрТипОбъекта;
					
					Если ДоступностьТиповЦен = Перечисления.кпкДоступностьТиповЦен.ТипыЦенИзСписка Тогда
						ТекстНачало = "Не найден тип цены """ + ТипЦены + """ в списке выгружаемых типов цен для агента: " + ВыбАгент + " в регистре сведений ""Сведения агента""!";						
					Иначе
						ТекстНачало = "Не найден тип цены """ + ТипЦены + """ в списке выгружаемых типов цен на форме констант """ + лИмяФормыКонстант + """!";						
					КонецЕсли;
					
					ОповеститьОСобытии(ТекстНачало + Символы.ПС + ТекстОкончание, СтатусСообщения.Внимание, Истина, ОбъектМетаданных);
					
				КонецЕсли;
				
				СписНеНайденныхТиповЦен.Добавить(ТипЦены);
				
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЕсли;		
	
	Возврат Строка(КодТипаЦены);  
	
КонецФункции //ПолучитьКодТипаЦены()
  
// Процедура заполняет таблицу Агент Плюс СОД
//
Процедура ЗаполнитьТаблицуАПС() Экспорт
	
	ТабАПСервер.Очистить();
	
	ПапкаОбмена = КПКОбъектServer.GetExchangeDir();			
	
	Если Не ЗначениеЗаполнено(ПапкаОбмена) Тогда
	    ПапкаОбмена = СокрЛП(Константы.кпкАпсПапкаОбмена.Получить());
		Если Не ЗначениеЗаполнено(ПапкаОбмена) Тогда
		    ТекстСообщения = "Не установлено значение константы ""Папка обмена"" для Агент Плюс СОД! Получение данных от агента невозможно!";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Ложь);
			Возврат;
		Иначе
			КПКОбъектServer.SetExchangeDir(ПапкаОбмена);				
		КонецЕсли;
	КонецЕсли;
	
	Спис = Новый СписокЗначений;
	
	ГотовоАгентов = 0;
	
	КолКПК = КПКОбъектServer.GetPPCCount();				
	
	СчетчикЦикла = 0;
	Для Поз = 0 По КолКПК - 1 Цикл
		
		СтрИнфо = КПКОбъектServer.GetPPCInfoByIndex(Поз);						
		
		Если Не ЗначениеЗаполнено(СтрИнфо) Тогда
			Продолжить;
		КонецЕсли;
		Стр = Сред(СтрИнфо, 2) + ",""";
		Спис = кпкАгентПлюс.ИзСтрокиВСписок(Стр, """,""");
		// В списке следующие значения:
		//0-й - иденифмкато КПК
		//1-й - псевдоним торгвого агента (владельца КПК)
		//2-й - директория обмена данными 
		//3-й - имя полученного с КПК файла с директорией
		//4-й - время сеанса
		//5-й - контрольная сумма полученного файла
		ИдКПК = Спис.Получить(0).Значение;
		
		СпрКПК = Справочники.кпкКПК.НайтиПоРеквизиту("Идентификатор", ИдКПК);
		Если СпрКПК.Пустая() Тогда
		    ТекстСообщения = "В справочнике ""Мобильные устройства"" не найдено мобильное устройство с идентификатором """ + ИдКПК + """!";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Ложь);
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ Объект Как Агент ИЗ РегистрСведений.кпкСведенияАгента ГДЕ КПК = (&парКПК)";
		Запрос.УстановитьПараметр("парКПК", СпрКПК);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СпрАг = Выборка.Агент;
		Иначе
		    ТекстСообщения = "В справочнике ""Мобильные устройства"" не найдено мобильное устройство с идентификатором """ + ИдКПК + """!";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Ложь);
			Продолжить;
		КонецЕсли;
		
		НовСтр = ТабАПСервер.Добавить();
		НовСтр.Агент 	= СпрАг;
		НовСтр.Папка	= Спис.Получить(2).Значение;
		ФайлДанных 	    = Спис.Получить(3).Значение;

		Если ЗначениеЗаполнено(ФайлДанных) Тогда   
			ВремяСеансаXML = Спис.Получить(4).Значение;
			НовСтр.ЕстьДанные    = Истина;
			НовСтр.Пометка       = Истина;						
			НовСтр.ДатаПолучения = ДатаВремяXMLВФормат1С(ВремяСеансаXML);   
			
			ГотовоАгентов     = ГотовоАгентов + 1;			
		Иначе
			НовСтр.Пометка   	 = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ГотовоАгентов = 0 Тогда
	    ТекстСообщения = "Таблица обновлена. Новых данных от агентов не поступило.";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Ложь);
	Иначе
		ВыбАгент = Справочники.Агенты.ПустаяСсылка();		
		ТекстСообщения = "Таблица обновлена. Готов к загрузке данных от " + Строка(ГотовоАгентов) + " агентов.";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Ложь);
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьТаблицуАПС()

Функция ДобавитьЗаписьВРегистр(МенеджерРегистра, Объект)
	
	Менеджер 		= МенеджерРегистра.СоздатьМенеджерЗаписи();
	Менеджер.Объект = Объект;
	Менеджер.Прочитать();
	
	Если Не Менеджер.Выбран() Тогда
		Менеджер.Объект = Объект;
		Если Не ВыполнитьОперациюДляОбъекта(Менеджер, "запись") Тогда 						
			ТекстСообщения = "Не удалось записать сведения по объекту: " + Строка(Объект) + " в базу!";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное);
			Возврат Ложь;		
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции // ДобавитьЗаписьВРегистр()

Процедура ДополнитьСлешВПуть(Каталог) Экспорт
	
	Если Прав(Каталог, 1) <> "\" Тогда
		Каталог = Каталог + "\";
	КонецЕсли;
	
КонецПроцедуры //ДополнитьСлешВПуть

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВЫГРУЗКИ ДАННЫХ С КПК /////////////////////////////////// 
////////////////////////////////////////////////////////////////////////////////

Процедура ВыгрузкаЗапросов() Экспорт
	
	Выборка = Справочники.кпкЗапросыАгентов.Выбрать(, ВыбАгент);
	
	Пока Выборка.Следующий() Цикл
		
		Если (Выборка.ПометкаУдаления) ИЛИ (НЕ Выборка.Активен) Тогда
			Продолжить;
		КонецЕсли;
		
		КолФото = 0;
		
		ВидЗапроса = Выборка.Запрос.ВидЗапроса;
		
		Если ВидЗапроса = Перечисления.кпкВидыЗапросовДляАгентов.ИсторияПродаж Тогда
			
			кпкАгентПлюс.СформироватьСписокКлиентовАгентов(ВыбАгент, ПланПосещений, сзКлиентыАгента, сзТоргТочкиАгента, ТаблицаДоговоровАгента);			
			
			Ассортимент = РегистрыСведений.кпкСведенияАгента.Получить(Новый Структура("Объект", ВыбАгент)).Ассортимент;			
			
			сзАссортимент = Ассортимент.ТАссортимент.ВыгрузитьКолонку("Номенклатура");
			
			Если Не ОткрытьФайлВыгрузкиМТ() Тогда
				Возврат;
			КонецЕсли;					
			
			ДокОбмена.ЗаписатьНачалоЭлемента("CATALOGS");
				ДобавитьПоле("Comment", "Справочники");
				ВыгрузитьИсториюПродаж();
			ДокОбмена.ЗаписатьКонецЭлемента();
			
			ЗакрытьФайлВыгрузкиМТ();
			
		ИначеЕсли ВидЗапроса = Перечисления.кпкВидыЗапросовДляАгентов.Взаиморасчеты Тогда
			
			СформироватьТаблицуВыгружаемыхТиповЦен(); 
						
			кпкАгентПлюс.СформироватьСписокКлиентовАгентов(ВыбАгент, ПланПосещений, сзКлиентыАгента, сзТоргТочкиАгента, ТаблицаДоговоровАгента);
			
				#Если Клиент Тогда
					Состояние("Заполнение списка клиентов...");
				#КонецЕсли				
			
				
				кпкАгентПлюс.СформироватьСписокКлиентовАгентов(ВыбАгент, ПланПосещений, сзКлиентыАгента, сзТоргТочкиАгента, ТаблицаДоговоровАгента);
				
				Если Не ОткрытьФайлВыгрузкиМТ() Тогда
					Возврат;
				КонецЕсли;					
				
				ДокОбмена.ЗаписатьНачалоЭлемента("CATALOGS");
					ДобавитьПоле("Comment", "Справочники");
					ВыгрузитьКлиентов();
				ДокОбмена.ЗаписатьКонецЭлемента();
					
				ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENTS");
					ДобавитьПоле("Comment", "Документы");
					ВыгрузитьВзаиморасчеты();
				ДокОбмена.ЗаписатьКонецЭлемента();
				
				ЗакрытьФайлВыгрузкиМТ();					
				
			
		ИначеЕсли ВидЗапроса = Перечисления.кпкВидыЗапросовДляАгентов.Маршруты Тогда
			
			кпкАгентПлюс.НайтиПланАгента(ВыбАгент, сзКлиентыАгента, сзТоргТочкиАгента, ПланПосещений);
			
				Если Не ОткрытьФайлВыгрузкиМТ() Тогда
					Возврат;
				КонецЕсли;    				
				
				ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENTS");
					ДобавитьПоле("Comment", "Документы");
					ВыгрузитьМаршрутыАгента();
				ДокОбмена.ЗаписатьКонецЭлемента();
				
				ЗакрытьФайлВыгрузкиМТ();	
				
			
		ИначеЕсли ВидЗапроса = Перечисления.кпкВидыЗапросовДляАгентов.Номенклатура Тогда
			
			СформироватьТаблицуВыгружаемыхТиповЦен();
				
				Если Не ОткрытьФайлВыгрузкиМТ() Тогда
					Возврат;
				КонецЕсли;			
				
				ДокОбмена.ЗаписатьНачалоЭлемента("CATALOGS");
					ДобавитьПоле("Comment", "Справочники");
					ВыгрузитьНоменклатуру();
					ВыгрузитьХарактеристикиНоменклатуры();
				ДокОбмена.ЗаписатьКонецЭлемента();
				
				ЗакрытьФайлВыгрузкиМТ();
			
		ИначеЕсли ВидЗапроса = Перечисления.кпкВидыЗапросовДляАгентов.Задания Тогда
			
		ИначеЕсли ВидЗапроса = Перечисления.кпкВидыЗапросовДляАгентов.Полный Тогда
			
			ВыгрузитьДанныеДляМобильнойТорговли();
			
		КонецЕсли;
		
		Спр = Выборка.ПолучитьОбъект();
		Спр.Активен = Ложь;
		
		ОтветитьНаЗапрос = Ложь;
		
		Если Не ВыполнитьОперациюДляОбъекта(Спр, "запись") Тогда 									
			Возврат;			
		КонецЕсли;
 		
	КонецЦикла;
	
КонецПроцедуры //ВыгрузкаЗапросов()

////////////////////////////////////

Функция ВыгрузитьДанныеНаАПСервер(Режим = 0)
	
	СтОтбор = Новый Структура("Объект", ВыбАгент);	
	Выборка = РегистрыСведений.кпкСведенияАгента.Выбрать(СтОтбор);
	Если Выборка.Следующий() Тогда
		АПСПапка = СокрЛП(Выборка.АПСПапка);
	КонецЕсли;	
	
	ДополнитьСлешВПуть(АПСПапка);		
	
	ПапкаСервера = СокрЛП(Константы.кпкАПСПапкаОбмена.Получить());
	Если ПустаяСтрока(ПапкаСервера) Тогда
		Возврат 0;
	КонецЕсли;
	
	ДополнитьСлешВПуть(ПапкаСервера);		
	
	Если Не кпкАгентПлюс.ПроверитьСуществованиеКаталога(ПапкаСервера, Истина) Тогда		
		ОповеститьОСобытии("Не существует каталога """ + ПапкаСервера + """, указанного в качестве папки обмена для Агент Плюс СОД!");
		Возврат 0;
	КонецЕсли;
	
	ПапкаАгента = ПапкаСервера + АПСПапка;
	
	Если Не кпкАгентПлюс.ПроверитьСуществованиеКаталога(ПапкаАгента, Истина) Тогда
		ОповеститьОСобытии("Не существует каталога """ + ПапкаАгента + """, указанного в качестве каталога обмена для агента: " + ВыбАгент);
		Возврат 0;
	КонецЕсли;
	
	ФайлНаДиске = Новый Файл(ИмяФайла);  	
	ИмяФайлаНаСервере = "From1C" + ФайлНаДиске.Расширение;
	
	ИмяФайлаАПС = ПапкаАгента + ИмяФайлаНаСервере;	
	
	ФайлАПС = Новый Файл(ИмяФайлаАПС);
	Если (ФайлАПС.Существует()) И (Режим = -1) Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяФайла) Тогда
		КопироватьФайл(ИмяФайла, ИмяФайлаАПС); //просто копируем файл в подпапку на сервере
		ОповеститьОСобытии("Данные для торгового агента: """ + ВыбАгент + """ успешно выгружены на Агент Плюс СОД!", СтатусСообщения.Информация);
	Иначе
		ОповеститьОСобытии("Данные для торгового агента: """ + ВыбАгент + """ не выгружены.", СтатусСообщения.Важное);
	КонецЕсли;
	
	Возврат 1;	
	
КонецФункции // ВыгрузитьДанныеНаАПСервер()

Процедура ВыгрузитьДанные(ОтветнаяВыгрузка = Ложь) Экспорт
	
	ИмяФайла = "";
	
	Если СформироватьФайлВыгрузкиДляКПК(ОтветнаяВыгрузка) Тогда
		
		ОтправкаФайла(ОтветнаяВыгрузка);			
		
	КонецЕсли;
	
	СохранитьТаблицуЛогаВНастройкахПользователя();
	
КонецПроцедуры //ВыгрузитьДанные

Процедура ОтправкаФайла(Ответ)	
	
	Если СпособОбмена = 2 Тогда
		Сообщить("Отправка данных через Агент Плюс СОД...");
		Если Ответ Тогда
			ВыгрузитьДанныеНаАПСервер(-1);
		Иначе
			ВыгрузитьДанныеНаАПСервер();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ОтправкаФайла()

//////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАГРУЗКИ ДАННЫХ С КПК ///////////
////////////////////////////////////////////////////////

// Функция осуществляет запись документа в ИБ 1С: Предприятия
//
//Возвращаемое значение:
//  Число: 1 - если документ записан, 0 - если при записи произошлда ошибка
//
// Добавлена 14.06.2007
//      
Функция ЗаписьДокумента(Док, СтруктураДокКПК, НовыйДок = Истина, ДобавлятьЗаписьвРегистр = Истина)	
	
	Проводить = Истина;
	
	Если флПроводить Тогда
		Если Док.Метаданные().Реквизиты.Найти("Контрагент") <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(Док.Контрагент) Тогда
				ОповеститьОСобытии("В документе " + Строка(Док) + " не указан контрагент. Документ не будет проведен!", СтатусСообщения.Важное, Истина, Док.Ссылка);
				Проводить = Ложь;
			КонецЕсли;
		КонецЕсли;	
		//Если Док.Метаданные().Реквизиты.Найти("Договор") <> Неопределено Тогда
		//	Если Не ЗначениеЗаполнено(Док.Договор) Тогда
		//		ОповеститьОСобытии("В документе " + Строка(Док) + " не указан договор. Документ не будет проведен!", СтатусСообщения.Важное, Истина, Док.Ссылка);
		//		Проводить = Ложь;
		//	КонецЕсли;
		//КонецЕсли;	
		Если Док.Метаданные().Реквизиты.Найти("СуммаДокумента") <> Неопределено Тогда
			Если Док.СуммаДокумента = 0 Тогда
				ОповеститьОСобытии("Сумма документа " + Строка(Док) + " равна 0. Документ не будет проведен!", СтатусСообщения.Важное, Истина, Док.Ссылка);
				Проводить = Ложь;
			КонецЕсли;
		КонецЕсли;	
	Иначе
		Проводить = Ложь
	КонецЕсли;
		
	ЗаписьЖурналаРегистрации("Загружен документ из мобильного устройства", УровеньЖурналаРегистрации.Информация, Док.Метаданные(), Док.Ссылка, "Запись документа");
		
	Если Не ВыполнитьОперациюДляОбъекта(Док, "запись") Тогда 							
		ОповеститьОСобытии("Не удалось записать документ " + Строка(Док) + " в базу!", СтатусСообщения.Важное, Истина, Док.Ссылка);
		Возврат 0;			
	КонецЕсли;	
	
	Если Проводить и Не ТипЗнч(Док) = Тип("ДокументСсылка.Инвентаризация") Тогда
		Если Не ВыполнитьОперациюДляОбъекта(Док, "проведение") Тогда 						
			ОповеститьОСобытии("Не удалось провести документ: " + Строка(Док), СтатусСообщения.Важное, Истина, Док.Ссылка);
			Возврат 0;			
		КонецЕсли;				
	КонецЕсли;
	
	ТекстСообщения = ?(НовыйДок, "Создан", "Перезаписан") + " документ " + Строка(Док);
	ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Истина, Док.Ссылка);
	
	Если ДобавлятьЗаписьвРегистр Тогда
		
		Если СтруктураДокКПК.СпособСоздания = "User" Тогда
			СпособСоздания = Перечисления.кпкСпособыСозданияДокументовВКПК.Вручную;
		ИначеЕсли СтруктураДокКПК.СпособСоздания = "Copy" Тогда
			СпособСоздания = Перечисления.кпкСпособыСозданияДокументовВКПК.Скопирован;
		ИначеЕсли СтруктураДокКПК.СпособСоздания = "Sub" Тогда
			СпособСоздания = Перечисления.кпкСпособыСозданияДокументовВКПК.ВведенНаОсновании;
		ИначеЕсли СтруктураДокКПК.СпособСоздания = "Load" Тогда
			СпособСоздания = Перечисления.кпкСпособыСозданияДокументовВКПК.ЗагруженИзЦБД;
		КонецЕсли;  	
		
		СведенияДокумента 					 = РегистрыСведений.кпкСведенияДокумента.СоздатьМенеджерЗаписи();
		СведенияДокумента.Агент 			 = ВыбАгент;
		СведенияДокумента.ДатаВремяСоздания  = СтруктураДокКПК.Дата;
		СведенияДокумента.кпкГПСШирота 		 = СтруктураДокКПК.Широта;
		СведенияДокумента.кпкГПСДолгота 	 = СтруктураДокКПК.Долгота;		
		Если СтруктураДокКПК.Свойство("Категория") Тогда
			СведенияДокумента.Категория			 = СтруктураДокКПК.Категория;
		КонецЕсли;
		СведенияДокумента.КПКДокумент 		 = Док.Ссылка;               		
		СведенияДокумента.ИДДокумента		 = НРег(СокрЛП(Док.Ссылка.УникальныйИдентификатор()));
		СведенияДокумента.Период 			 = ТекущаяДата();
		СведенияДокумента.СпособСозданияВКПК = СпособСоздания;
		
		сообщить("----" + СокрЛП(Док.Ссылка) + " / "+ СокрЛП(СведенияДокумента.КПКДокумент));
		
		Если Не ВыполнитьОперациюДляОбъекта(СведенияДокумента, "запись") Тогда 						
			ТекстСообщения = "Не удалось записать сведения по документу: " + Строка(Док) + " в базу!";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное);
			Возврат 0;		
		КонецЕсли;   
		
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции //ЗаписьДокумента()

Функция ЗагрузитьДанныеСАПСервера(Режим = 0) Экспорт
	
	ПриИзмененииАгента(ВыбАгент);
    
	ПапкаСервера = СокрЛП(Константы.кпкАПСПапкаОбмена.Получить());
	Если ПустаяСтрока(ПапкаСервера) Тогда
		Возврат 0;
	КонецЕсли;
	
	КПКОбъектServer.SetExchangeDir(ПапкаСервера);		
	
	ДополнитьСлешВПуть(ПапкаСервера);
	
	НаимАгента = СокрЛП(ВыбАгент.Наименование);
	Если КПК = Неопределено Тогда
		ТекстСообщения = "У агента: """ + НаимАгента + """ не указано мобильное устройство!";
		ОповеститьОСобытии(ТекстСообщения);
		Возврат 0;
	КонецЕсли;

	ИдКПК = СокрЛП(КПК.Идентификатор);
	Если Не ЗначениеЗаполнено(ИдКПК) Тогда
		ТекстСообщения = "У агента """ + НаимАгента + """ указано обильное устройство с пустым иденификатором!";
		ОповеститьОСобытии(ТекстСообщения);
		Возврат 0;
	КонецЕсли;
	
	Спис = Новый СписокЗначений;
	
	СтрИнфо = "";
	 //Получаем данные на основе идентификатора КПК
	СтрИнфо = КПКОбъектServer.GetPPCInfo(ИдКПК); 		

	Если ПустаяСтрока(СтрИнфо) Тогда
		Текст = "Данные для агента: """ + НаимАгента + """ не загружены! Возможно некорректно сформированы настройки для Агент Плюс СОД";
		ОповеститьОСобытии(Текст);
		Возврат 0;
	КонецЕсли;
	
	Спис = кпкАгентПлюс.ИзСтрокиВСписок(СтрИнфо, """,""");
	// В списке следующие значения:
	//0-й - идентификатор КПК
	//1-й - псевдоним торгвого агента (владельца КПК)
	//2-й - директория обмена данными 
	//3-й - имя полученного с КПК файла с директорией
	//4-й - время сеанса
	//5-й - контрольная сумма полученного файла
	
	ИмяФайла = СокрЛП(Спис.Получить(3));
	
	// Если в результате получения данных методом компоненты
	// файла не обнаружено, пробуем проверить существует ли такой файл в папке
	// агента физически
	Если ПустаяСтрока(ИмяФайла) Тогда  		
		СтОтбор = Новый Структура("Объект", ВыбАгент);		
		Выборка = РегистрыСведений.кпкСведенияАгента.Выбрать(СтОтбор);
		Если Выборка.Следующий() Тогда
			АПСПапка = СокрЛП(Выборка.АПСПапка);
		Иначе
			ОповеститьОСобытии("Для агента: " + ВыбАгент + " не существует записи в регистре сведений ""Сведения агентов""!");
			Возврат 0;
		КонецЕсли;	 		
		
		ИмяФайла = "To1C.zip";		
		ФайлАгента = ПапкаСервера + АПСПапка + ИмяФайла;
		ФайлЗагрузки = Новый Файл(ФайлАгента);
		Если НЕ ФайлЗагрузки.Существует() Тогда
			
			ИмяФайла = "\ToCBD.zip";
			ФайлАгента = ПапкаСервера + АПСПапка + ИмяФайла;
			ФайлЗагрузки = Новый Файл(ФайлАгента);
			Если НЕ ФайлЗагрузки.Существует() Тогда
				ТекстСообщения = "Данные от агента: """ + НаимАгента + """ на сервере отсутствуют.";
				ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация);
				Возврат 0;
			КонецЕсли;
			
		КонецЕсли;   		
	Иначе    		
		ФайлАгента = ПапкаСервера + ИмяФайла;
		ФайлЗагрузки = Новый Файл(ФайлАгента);
		Если НЕ ФайлЗагрузки.Существует() Тогда
			ТекстСообщения = "Данные от агента: """ + НаимАгента + """ на сервере отсутствуют.";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация);
			Возврат 0;
		КонецЕсли; 		
	КонецЕсли;
 	
	Если ФайлЗагрузки = Неопределено Тогда
		ТекстСообщения = "Данные от агента: """ + НаимАгента + """ на сервере отсутствуют.";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация);
		Возврат 0;
	КонецЕсли;  
   	
	Путь = КаталогВременныхФайлов();
	ФайлЛокальный = Путь + ФайлЗагрузки.Имя;
	КопироватьФайл(ФайлАгента, ФайлЛокальный);
	
	// Если файл с треком перемещений, то нужно удалить временный файл
	Если ВРЕГ(ФайлЗагрузки.Расширение) = ".TXT" Тогда
		Попытка
			УдалитьФайлы(СокрЛП(ФайлЗагрузки.ПолноеИмя) + ".clt");			
		Исключение
			ТекстСообщения = "Не удалось удалить файл : " + ФайлЗагрузки.ПолноеИмя + " по причине: " + ОписаниеОшибки();																				
			ОповеститьОСобытии(ТекстСообщения);			
		КонецПопытки;		
	КонецЕсли;
	
	// Обязательно оповещаем сервер о получении файла загрузки 1С:Предприятием!!!
	// Оповещение всегда проходит на основании идентификатора КПК!
	КПКОбъектServer.ProcessDone(ИдКПК); 				
	
	Результат = ЗагрузитьДанные(ФайлЛокальный);
	Если Результат = 0 Тогда
		ОповеститьОСобытии("Данные для агента """ + НаимАгента + """ не загружены!", СтатусСообщения.Важное);
		Возврат 0;			
	КонецЕсли;
	
КонецФункции //ЗагрузитьДанныеСАПСервера()
    
// Процедура предназначена для загрузки данных по трекам передвижения агента
// из текстового файла, который находится внутри архива, передаваемого с КПК
//
// Параметры:
//  ФайтТрека - текстовый файл, из которого нужно прочитать информацию по трекам
//
// Добавлено: Арт 2007-12-26
//
Процедура ЗагрузкаДанныхТрека(ФайлТрека) 
	
	РежимЗагрузкиТреков = Константы.кпкРежимЗагрузкиТреков.Получить();
	
	Если РежимЗагрузкиТреков = 1 Тогда   		
		
		// Проверка папки хранения треков
		ПапкаТреков = СокрЛП(Константы.кпкПапкаТреков.Получить()); 		
		Если Не ЗначениеЗаполнено(ПапкаТреков) Тогда
			ТекстСообщения = "Укажите значение константы ""Папка треков"" на форме настройки констант " + лИмяФормыКонстант + "!";
			ОповеститьОСобытии(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		Если Не кпкАгентПлюс.ПроверитьСуществованиеКаталога(ПапкаТреков, Истина) Тогда
			ТекстСообщения = "Не найден каталог, указанный в константе ""Папка треков""!";
			ОповеститьОСобытии(ТекстСообщения);
			Возврат;   
		КонецЕсли; 
		
		Попытка
			ИмяФ = "Track_" + Формат(ТекущаяДата(), "ДФ=yyyyMMddhhmmss") + "_" + Строка(ВыбАгент.УникальныйИдентификатор()) + ".txt";
			ДополнитьСлешВПуть(ПапкаТреков);		
			ПутьКФайлуТрека = ПапкаТреков + ИмяФ;
			КопироватьФайл(ФайлТрека, ПутьКФайлуТрека);			
		Исключение				
			ТекстСообщения = "Не удалось скопировать файл трека!";
			ОповеститьОСобытии(ТекстСообщения);
			ОповеститьОСобытии("Причина: " + ОписаниеОшибки(), СтатусСообщения.Информация);
			Возврат;
		КонецПопытки;
		
		ВыборкаПоКлючу = РегистрыСведений.кпкСведенияПоГПСТрекам.Выбрать(,,Новый Структура("Ключ", ИмяФ));
		Если ВыборкаПоКлючу.Следующий() Тогда					
			Возврат;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.кпкСведенияПоГПСТрекам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Агент.Установить(ВыбАгент);
		НаборЗаписей.Прочитать();
							
		НоваяЗапись = НаборЗаписей.Добавить();			
		НоваяЗапись.ДатаСоздания    = ТекущаяДата();
		НоваяЗапись.Период          = ТекущаяДата();
		НоваяЗапись.Агент 		    = ВыбАгент;
		НоваяЗапись.ИмяФайлаТреков  = ИмяФ;
		НоваяЗапись.Ключ 		    = ИмяФ;
		    		
		Если ВыполнитьОперациюДляОбъекта(НаборЗаписей, "запись") Тогда			
			ОповеститьОСобытии("Загружены новые данные трека перемещений", СтатусСообщения.Информация);
		Иначе					
			ОповеститьОСобытии("Не удалось записать новые данные трека перемещений в базу!", СтатусСообщения.Важное);
			Возврат;			
		КонецЕсли;
 		
	Иначе
		
		ТекстФайл = Новый ТекстовыйДокумент();	        
		
		Попытка 		
			ТекстФайл.Прочитать(ФайлТрека); 						
		Исключение			
			ОповеститьОСобытии("Не удалось открыть файл трека: " + ФайлТрека);
		КонецПопытки;		                            
		
		СчСек = 0;
		
		НаборЗаписей = РегистрыСведений.кпкСведенияПоГПСТрекам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Агент.Установить(ВыбАгент);
		НаборЗаписей.Прочитать();
		
		Для п = 1 По ТекстФайл.КоличествоСтрок() Цикл  				
			
			СтрокаТекста = СокрЛП(ТекстФайл.ПолучитьСтроку(п));												
			ПозДаты = Найти(СтрокаТекста,  Символы.Таб);                                 
			
			Если ПозДаты > 0 Тогда
				
				Широта    = 0;			
				Долгота   = 0;	
				Скорость  = 0;
				
				ДатаВремя = СокрЛП(Лев(СтрокаТекста, ПозДаты));
				
				Попытка
					ДатаСоздания = ДатаВремяXMLВФормат1С(ДатаВремя);
				Исключение
					Продолжить;
				КонецПопытки;
				
				Если ЗначениеЗаполнено(ДатаСоздания) Тогда
					
					//Вычисляем широту
					СтрокаТекста = Прав(СтрокаТекста, СтрДлина(СтрокаТекста) - ПозДаты);
					ПозШир = Найти(СтрокаТекста, Символы.Таб);           
					Если ПозШир > 0 Тогда                                      
						Широта  = Число(Лев(СтрокаТекста, ПозШир));                            						
					КонецЕсли;  
					
					// Вычисляем долготу и скорость
					СтрокаТекста = Сред(СтрокаТекста, ПозШир+1);
					
					ПозДол = Найти(СтрокаТекста, Символы.Таб);           
					
					Если ПозДол > 0 Тогда                                      
						Долгота  = Число(Лев(СтрокаТекста, ПозДол));
						Скорость = Число(Сред(СтрокаТекста, ПозДол+1));
					Иначе						
						Долгота  = Число(СтрокаТекста);
					КонецЕсли;  
					
					КлючЗаписи = Строка(ДатаСоздания) + "_" + СокрЛП(Широта) + "_" + СокрЛП(Долгота);
					
					ВыборкаПоКлючу = РегистрыСведений.кпкСведенияПоГПСТрекам.Выбрать(,,Новый Структура("Ключ", КлючЗаписи));
					Если ВыборкаПоКлючу.Следующий() Тогда					
						Продолжить;
					КонецЕсли;
					
					СчСек = СчСек + 1;					
					НоваяЗапись = НаборЗаписей.Добавить();			
					НоваяЗапись.ДатаСоздания = ДатаСоздания;
					НоваяЗапись.Период 	     = ТекущаяДата() + СчСек;
					НоваяЗапись.Агент 		 = ВыбАгент;
					НоваяЗапись.Широта 		 = Широта;
					НоваяЗапись.Долгота 	 = Долгота; 
					НоваяЗапись.Ключ 		 = КлючЗаписи;
					НоваяЗапись.Скорость	 = Скорость;
										
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;	
			
		Если СчСек > 0 Тогда
			Если ВыполнитьОперациюДляОбъекта(НаборЗаписей, "запись") Тогда
				ТекстСообщения = "Загружены новые данные трека перемещений";
				ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация);
			Иначе		
				ТекстСообщения = "Не удалось записать новые данные трека перемещений в базу!";
				ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное);
				Возврат;			
			КонецЕсли;   	
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры //ЗагрузкаДанныхТрека()

///////////////////////////

Функция СоздатьНовыйДокумент(МенеджерДок, Док, СтруктураДокКПК, ПропуститьЗагрузку)
		
	DocID     = Новый УникальныйИдентификатор(СтруктураДокКПК.ИдДок);
	ДокСсылка = МенеджерДок.ПолучитьСсылку(DocID);
	Док 	  = ДокСсылка.ПолучитьОбъект();
	
	Если Док = Неопределено Тогда
		
		Если ТипЗнч(МенеджерДок) = Тип("ДокументМенеджер.кпкЗаданиеАгента") Тогда
			ТекстСообщения = "Документ ""Задание агента"" с номером " + СтруктураДокКПК.Номер +  
							 " от " + Формат(СтруктураДокКПК.Дата, "ДФ=dd.MM.yyyy") + " не найден в базе!";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное);
			ПропуститьЗагрузку = Истина;
		Иначе
			
			Док = МенеджерДок;
			
			Синоним = МенеджерДок.ПустаяСсылка().Метаданные().Синоним;
			
			Если Не ВыполнитьОперациюДляОбъекта(Док, "создание") Тогда 									
				ТекстСообщения = "Не удалось создать новый документ """ + Синоним + """!";
				ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное);
				ПропуститьЗагрузку = Истина;			
			КонецЕсли;
			
			Док.УстановитьСсылкуНового(ДокСсылка);	
			
			Возврат Истина;
			
		КонецЕсли;
		
	Иначе  
		
		Если Не флОбновлять и ТипЗнч(МенеджерДок) <> Тип("ДокументМенеджер.кпкЗаданиеАгента") Тогда
			ПропуститьЗагрузку = Истина;			
		КонецЕсли;		
		Док.Разблокировать();
		
	КонецЕсли;  
	
	Возврат Ложь;
		
КонецФункции // СоздатьНовыйДокумент()
     
Функция ЗагрузитьДанные(ВхФайл = 0) Экспорт
	
	ФайлЗагрузки = ВхФайл;
	
	ПапкаРаспаковки = КаталогВременныхФайлов();
	
	Если ВРег(Прав(ФайлЗагрузки,3)) = "CRP" Тогда //зашифрованный файл
		//расшифровываем файл
		РасшифрованныйФайл = Лев(ФайлЗагрузки, СтрДлина(ФайлЗагрузки) - 4);
		
		КПКОбъектCrypto.SetCryptPassword(СокрЛП(Константы.кпкКриптоПароль.Получить()));
		Результат = КПКОбъектCrypto.DecryptFile(ФайлЗагрузки, РасшифрованныйФайл);			
		
		Если Результат <> 0 Тогда
			РасшифровкаОшибки = КПКОбъектCrypto.ErrDescription(Результат);				
			ОповеститьОСобытии(РасшифровкаОшибки);
			Возврат 0;
		Иначе
			Попытка
				УдалитьФайлы(ФайлЗагрузки);
			Исключение
				ТекстСообщения = "Не удалось удалить файл загрузки: " + ФайлЗагрузки + " по причине: " + ОписаниеОшибки();																				
				ОповеститьОСобытии(ТекстСообщения);			
			КонецПопытки;					
			ФайлЗагрузки = РасшифрованныйФайл; //файл успешно расшифрован
		КонецЕсли;
	КонецЕсли;   
	
	Если ВРег(Прав(ФайлЗагрузки,3)) = "ZIP" Тогда
		Агент = ВыбАгент;	
		Если Агент = Неопределено Тогда
			Пароль = "";
		Иначе
			СтОтбор = Новый Структура("Объект", Агент);			
			Выборка = РегистрыСведений.кпкСведенияАгента.Выбрать(СтОтбор);
			Если Выборка.Следующий() Тогда
				Пароль = СокрП(Выборка.ПарольЗИП);
			Иначе
				Пароль = "";
			КонецЕсли;
		КонецЕсли;		
		
		АрхивФото = ПапкаРаспаковки + "PhotosToCDB.zip";		
		ФайлФото = Новый Файл(АрхивФото);
		Если ФайлФото.Существует() Тогда  
			Попытка
				УдалитьФайлы(ФайлФото);
			Исключение
				ТекстСообщения = "Не удалось удалить файл фото: " + ФайлФото + " по причине: " + ОписаниеОшибки();																
				ОповеститьОСобытии(ТекстСообщения);			
			КонецПопытки;							
		КонецЕсли;
		
		ОчиститьПапкуВременныхФото();   		
		
		#Если Клиент Тогда
			Состояние("Распаковка полученных данных...");
		#КонецЕсли    
		
		ПапкаРаспаковки = КаталогВременныхФайлов();
		
		КПКОбъектZip.SetPassword(Пароль);
		Результат = КПКОбъектZip.UnPack(ФайлЗагрузки, ПапкаРаспаковки);			
		
		Если Результат <> 0 Тогда
			РасшифровкаОшибки = КПКОбъектZip.ErrDescription(Результат);				
			ОповеститьОСобытии("Ошибка распаковки архива из мобильного устройства! " + РасшифровкаОшибки, СтатусСообщения.Важное);
			СохранитьТаблицуЛогаВНастройкахПользователя();
			Возврат 0;
		КонецЕсли;
		
		ДополнитьСлешВПуть(ПапкаРаспаковки);
		
		ФайлЗагрузки = ПапкаРаспаковки + "ToCDB.xml";
		ФайлXML = Новый Файл(ФайлЗагрузки);
		Если НЕ ФайлXML.Существует() Тогда
			ФайлЗагрузки = ПапкаРаспаковки + "ToCBD.xml";
			ФайлXML = Новый Файл(ФайлЗагрузки);
		КонецЕсли;
		Если НЕ ФайлXML.Существует() Тогда
			ОповеститьОСобытии("В файле архива мобильного устройства не найдено файлов для загрузки в требуемом формате!");
			СохранитьТаблицуЛогаВНастройкахПользователя();
			Возврат 0;
		КонецЕсли;
			
		ПапкаВремФото = ПапкаРаспаковки + "Photos1C\";
		
		Если Не кпкАгентПлюс.ПроверитьСуществованиеКаталога(ПапкаВремФото) Тогда
			СоздатьКаталог(ПапкаВремФото);			
		КонецЕсли;
		
		Если ФайлФото.Существует() Тогда // значит в архиве с файлом загрузки был и архив фотографий
			ОповеститьОСобытии("Файл загрузки содержит архив фотографий", СтатусСообщения.Информация);
			
			КПКОбъектZip.SetPassword("");
			Результат = КПКОбъектZip.UnPack(АрхивФото, ПапкаВремФото);				
			
			Если Результат <> 0 Тогда
				
				КПКОбъектZip.SetPassword(Пароль);
				Результат = КПКОбъектZip.UnPack(АрхивФото, ПапкаВремФото);				
				
				Если Результат <> 0 Тогда
					ОповеститьОСобытии("Ошибка распаковки архива фотографий: " + АрхивФото, СтатусСообщения.Важное);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОтветнаяВыгрузка = Истина;
		
	АрхивТрека = Новый Файл(ПапкаРаспаковки + "gpstrack.zip");
	
	ФайлЗагрузкиНаДиске = Новый Файл(ФайлЗагрузки);
	Если ФайлЗагрузкиНаДиске.Существует() Тогда
		// Если поступили новые данные только по треку перемещения
		Если ФайлЗагрузкиНаДиске.Имя = "gpstrack.txt" Тогда
			ФайлТрека = ФайлЗагрузкиНаДиске;
			// При загрузке треков не нужно отвечать
			ОтветнаяВыгрузка = Ложь;
			Перейти ~М1;
		КонецЕсли;
	Иначе
		ОповеститьОСобытии("Не найдено файлов загрузки от мобильного устройства в папке " + ПапкаРаспаковки + "!", СтатусСообщения.Важное);
		СохранитьТаблицуЛогаВНастройкахПользователя();
		Возврат 0;
	КонецЕсли;		
	
	ФайлТрека =  Новый Файл(ПапкаРаспаковки + "gpstrack.txt"); 
	
	Если АрхивТрека.Существует() Тогда // Найден архив с файлом трека перемещений
		
		ИмяАрхива = АрхивТрека.ПолноеИмя;
		
		РезультатТрека = КПКОбъектZip.UnPack(ИмяАрхива, ПапкаРаспаковки);			
		
		Если РезультатТрека <> 0 Тогда
			ОповеститьОСобытии("Ошибка распаковки архива с треками: " + ИмяАрхива, СтатусСообщения.Важное);
		Иначе
			Попытка
				УдалитьФайлы(АрхивТрека.ПолноеИмя);
			Исключение
				ТекстСообщения = "Не удалось удалить файл трека: " + АрхивТрека.ПолноеИмя + " по причине: " + ОписаниеОшибки();												
				ОповеститьОСобытии(ТекстСообщения);			
			КонецПопытки;							
		КонецЕсли;	
		
		Если Не ФайлТрека.Существует() Тогда			
			ОповеститьОСобытии("В архиве с треками не найден файл для загрузки!", СтатусСообщения.Важное);
		КонецЕсли; 
		
	КонецЕсли; 
	
	#Если Клиент Тогда
		Состояние("Загрузка данных...");
	#КонецЕсли    
	
	XMLЗагрузитьДанныеМобильнаяТорговля(ФайлЗагрузки);     
	
	Если ПрерватьЗагрузку тогда
		Возврат 0;
	КонецЕсли;

	
	Если ЕстьКонтактнаяИнформация тогда
		XMLЗагрузитьДанныеМобильнаяТорговляКонтактнаяИнформация(ФайлЗагрузки);     
	КонецЕсли;
	
	ФайлЗагрузкиНаДиске = Новый Файл(ФайлЗагрузки);
	Если ФайлЗагрузкиНаДиске.Существует() Тогда
		Попытка
			УдалитьФайлы(ФайлЗагрузки);
		Исключение
			ТекстСообщения = "Не удалось удалить файл загрузки: " + ФайлЗагрузки + " по причине: " + ОписаниеОшибки();							
			ОповеститьОСобытии(ТекстСообщения);			
		КонецПопытки;			
	КонецЕсли;    	
	
	~М1:
	
	Если ФайлТрека.Существует() Тогда
		#Если Клиент Тогда
			Состояние("Загрузка данных трека перемещений....");
		#КонецЕсли	
		ЗагрузкаДанныхТрека(ФайлТрека.ПолноеИмя); 		
		Попытка
			УдалитьФайлы(ФайлТрека.ПолноеИмя);
		Исключение
			ТекстСообщения = "Не удалось удалить файл трека: " + ФайлТрека.ПолноеИмя + " по причине: " + ОписаниеОшибки();				
			ОповеститьОСобытии(ТекстСообщения);			
		КонецПопытки;				
	КонецЕсли;
	
	Если АрхивТрека.Существует() Тогда
		Попытка
			УдалитьФайлы(АрхивТрека.ПолноеИмя);
		Исключение
			ТекстСообщения = "Не удалось удалить файл трека: " + АрхивТрека.ПолноеИмя + " по причине: " + ОписаниеОшибки();
			ОповеститьОСобытии(ТекстСообщения);			
		КонецПопытки;							
	КонецЕсли;
	
	// Всегда формируем ответную выгрузку	
	Если ОтветнаяВыгрузка И 1=2 Тогда
		#Если Клиент Тогда
			Состояние("Выгрузка ответных данных...");	
		#КонецЕсли
		ОповеститьОСобытии("Выгрузка ответных данных...", СтатусСообщения.Информация);
		ВыгрузитьДанные(Истина);		
	КонецЕсли;
	
	СохранитьТаблицуЛогаВНастройкахПользователя();
	
	Возврат 1;
	
КонецФункции //ЗагрузитьДанные()

Функция СформироватьФайлВыгрузкиДляКПК(ОтветнаяВыгрузка) Экспорт
	
	ПриИзмененииАгента(ВыбАгент);
	
	СписНеНайденныхТиповЦен.Очистить();
	
	КолФото = 0;
	КолФотоМТ = 0;
	
	//Текст.ДобавитьСтроку("agentp_data" + Т_ + "to_ppc" + стрБаза);
	//Текст.ДобавитьСтроку("// Файл выгрузки для отправки в КПК");
	
	Если ОтветитьНаЗапрос Тогда  	
		ОповеститьОСобытии("Выгрузка ответа на запрос...", СтатусСообщения.Информация);
		ВыгрузкаЗапросов();
	ИначеЕсли ОтветнаяВыгрузка Тогда		
		ВыгрузитьПодтверждения(Истина);
	Иначе // Обычная выгрузка данных, вызывается в том числе по кнопке "Выгрузить"     		
		
		Если ВидВыгрузки = 1 или ВидВыгрузки = 2 Тогда
			
			ВыгрузитьДанныеДляМобильнойТорговли();
			
		//ИначеЕсли ВидВыгрузки = 3 Тогда	
		//	#Если Клиент Тогда
		//		Состояние("Выгрузка истории продаж...");
		//	#КонецЕсли
		//	кпкАгентПлюс.СформироватьСписокКлиентовАгентов(ВыбАгент, ПланПосещений, сзКлиентыАгента, сзТоргТочкиАгента, ТаблицаДоговоровАгента);			
		//	Ассортимент = РегистрыСведений.кпкСведенияАгента.Получить(Новый Структура("Объект", ВыбАгент)).Ассортимент;			
		//	сзАссортимент.ЗагрузитьЗначения(Ассортимент.ТАссортимент.ВыгрузитьКолонку("Номенклатура"));
		//	ВыгрузкаИсторииПродаж();
		//	ВыгрузкаСистемныхКонстант();
		//ИначеЕсли ВидВыгрузки = 4 Тогда
		//	#Если Клиент Тогда
		//		Состояние("Выгрузка запросов...");
		//	#КонецЕсли
		//	ВыгрузкаЗапросов();
		//	ВыгрузкаСистемныхКонстант(0, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	#Если Клиент Тогда
		Состояние("");
	#КонецЕсли
	
	Каталог = СокрЛП(ФайловыеФункцииПереопределяемый.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов);
	
	Если Не (ЗначениеЗаполнено(Каталог) и кпкАгентПлюс.ПроверитьСуществованиеКаталога(Каталог)) Тогда		
		Каталог = КаталогВременныхФайлов();		
	КонецЕсли;
	
	ДополнитьСлешВПуть(Каталог);
	
	Если ВидВыгрузки = 3 Тогда		
		ИмяФайла = Каталог + "hist" + Строка(ВыбАгент.Код) + ".xml";
	КонецЕсли;
	
	Если флАрхив Тогда
		
		#Если Клиент Тогда
			Состояние("Упаковка...");
		#КонецЕсли
				
		СтрАрхивКартинок = "";		
		Если флВыгружатьКартинкиВКПК Тогда
			Если КолФото > 0 Или КолФотоМТ > 0 Тогда
				// Добавляем в архив картинки товаров
				КаталогКартинок = КаталогВременныхФайлов() + "PhotosFrom1C\";
				Если ЗначениеЗаполнено(КаталогКартинок) Тогда					
					ПолныйПутьКАрхиву = КаталогКартинок + "GoodsPhotosFromCDB.zip";
					НужныйФайлАрхиваНаДиске = Новый Файл(ПолныйПутьКАрхиву);
					Если НужныйФайлАрхиваНаДиске.Существует() Тогда
						СтрАрхивКартинок = Т_+ "GoodsPhotosFromCDB.zip" + Т_ + ПолныйПутьКАрхиву
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ПутьИмяАрхива = Лев(ИмяФайла, СтрДлина(ИмяФайла) - 3) + "zip"; //файл вида <Код агента>.zip
		ИмяВАрхиве = "FromCDB" + "." + Прав(ИмяФайла, 3);	
		
		Пароль = СокрП(ПарольЗИП);      // А+ (релиз 15, 08.12.04)
		
		// Если пароль пустой, то архив пакуется без пароля
		КПКОбъектZip.SetPassword(Пароль);
		Результат = КПКОбъектZip.Pack(ПутьИмяАрхива, ИмяВАрхиве + Т_ + ИмяФайла + СтрАрхивКартинок);			
		
		Если Результат <> 0 Тогда			
			РасшифровкаОшибки = КПКОбъектZip.ErrDescription(Результат);				
			ОповеститьОСобытии("Не удалось упаковать в архив файл по причине: " + РасшифровкаОшибки, СтатусСообщения.Важное);
			Возврат Ложь;
		Иначе
			ИмяФайла = ПутьИмяАрхива; //архив успешно записан
			Если ЗначениеЗаполнено(Пароль) Тогда  				
				ОповеститьОСобытии("Подготовленный архив zip защищен паролем!", СтатусСообщения.Информация, Ложь);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	#Если Клиент Тогда
		Состояние("");
	#КонецЕсли
	
	Возврат Истина;
	
КонецФункции // СформироватьФайлВыгрузкиДляКПК()

////////////////////////////////////////////////////////////////////////////////
// Процедуры для Агент Плюс 2.0				 ///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// Функция возвращает ссылку на элемент по полученному из XML уникальному идентификатору
// Параметры:
// ИдЭлемента - Строка Уникального идентификатора
// Спр - Имя справочника, в котором необходимо найти элемент
// Возвращаемое значение:
// Найденная ссылка или пустая ссылка на справочник, если искомого элеимента нет или неправильный идентификатор
Функция ПолучитьСсылкуИзСправочника(ИдЭлемента, Спр, СоздаватьЭлемент = Ложь)
	
	Перем СсылкаЭлемента;
	
	Если ИдЭлемента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдЭлемента = НРег(ИдЭлемента);
	
	СпрМенеджер = Справочники[Спр];
	
	Если ЗначениеЗаполнено(ИдЭлемента) Тогда
		
		ГуидЭлемента = Новый УникальныйИдентификатор(ИдЭлемента);
		СсылкаЭлемента = СпрМенеджер.ПолучитьСсылку(ГуидЭлемента);
		
		Если СсылкаЭлемента.ПолучитьОбъект() = Неопределено Тогда
			
			Если СоздаватьЭлемент Тогда
				
				ЭлементОбъект = СпрМенеджер.СоздатьЭлемент();
				СсылкаОбъекта = СпрМенеджер.ПолучитьСсылку(ГуидЭлемента);
				ЭлементОбъект.УстановитьСсылкуНового(СсылкаОбъекта);
				ЭлементОбъект.ОбменДанными.Загрузка = Истина;
				
				Если Не ВыполнитьОперациюДляОбъекта(ЭлементОбъект, "запись") Тогда 			
					ТекстСообщения = "Не удалось записать элемент справочника: " + ЭлементОбъект;
					ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, ЭлементОбъект);		
					Возврат СсылкаЭлемента;			
				КонецЕсли;
				
				СсылкаЭлемента = ЭлементОбъект.Ссылка;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СсылкаЭлемента = Неопределено Тогда
		СсылкаЭлемента = СпрМенеджер.ПустаяСсылка();
	КонецЕсли;
	
	Если Спр = "ЕдиницыИзмерения" тогда
		Если СсылкаЭлемента.Коэффициент = 1 тогда
			Возврат СсылкаЭлемента.Владелец.ЕдиницаИзмерения;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат СсылкаЭлемента;
	
КонецФункции //ПолучитьСсылкуИзСправочника

// Функция определения соответствия перечисления типов контактной информации
// в 1С и Агент Плюс 2.0
Функция ЗаполнитьПеречислениеКонтактнойИнформации()
	
	ТипыКонтактнойИнформации = Новый Соответствие;
	ТипыКонтактнойИнформации.Вставить(Перечисления.ТипыКонтактнойИнформации.Адрес, 				   "a4d0f540-64ed-4f3e-b2bb-818da38f5ab2");
	ТипыКонтактнойИнформации.Вставить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, "52477200-af54-405b-9888-14b8bded0e19");
	ТипыКонтактнойИнформации.Вставить(Перечисления.ТипыКонтактнойИнформации.ВебСтраница, 		   "2c2cfc86-e2a0-414d-a116-5acadac53437");
	ТипыКонтактнойИнформации.Вставить(Перечисления.ТипыКонтактнойИнформации.Другое, 			   "e45419b3-0cfd-47ce-8b24-7037a1e86aed");
	ТипыКонтактнойИнформации.Вставить(Перечисления.ТипыКонтактнойИнформации.Телефон, 			   "8fc8f351-14f0-48eb-952a-38bb313b28d5");
	
	Возврат ТипыКонтактнойИнформации;
	
КонецФункции

// Функция определения соответствия перечисления статусов документов
// в 1С и Агент Плюс 2.0
Функция ПолучитьСтатусЦБД(Документ)
	
	Перем СтатусДокумента;
	
	Если Документ.Проведен Тогда
		СтатусДокумента = "cf16bcd2-6b49-419c-926d-8e9f5f6b596b";
	ИначеЕсли Документ.ПометкаУдаления Тогда
		СтатусДокумента = "9c81410c-02e8-4299-9c53-f28658e974c8";
	Иначе
		СтатусДокумента = "ae4fd9db-ed1e-4c1a-bb98-26e1e2fd2268";
	КонецЕсли;
		
	Возврат СтатусДокумента;
	
КонецФункции

// Функция определения сведений о контрагенте
// в 1С и Агент Плюс 2.0
Функция ПолучитьДанныеАгента()
		
	СтруктураСведений = РегистрыСведений.кпкСведенияАгента.Получить(Новый Структура("Объект", ВыбАгент));
	
	Возврат СтруктураСведений;
	
КонецФункции

// Функция заполнения соответствия констант и дополнительных настроек в 1С:Предприятии
// и приложении Агент Плюс:Мобильная торговля
Функция ЗаполнитьСписокКонстант()
	
	СоответствиеКонстант = Новый Соответствие;
	
	//Общие настройки
	СоответствиеКонстант.Вставить("79c698db-3c55-465e-acfe-4741acdd5655", "AgentID");				 //Идентфикатор агента //Константы[Метаданные.Константы.Найти("кпкИспользоватьЕдИзм").Имя].Получить()
	СоответствиеКонстант.Вставить("a2e1cc68-0624-45a6-8057-efd35259b9fe", "Agent");  				 //Наименование торгового агента
	СоответствиеКонстант.Вставить("90c4c934-85a6-449e-a519-d5ae44da667b", "PPCID");     			 //Идентификатор КПК
	СоответствиеКонстант.Вставить("61a474b1-21d0-4047-b2d5-7213a7294050", "ShowTabs");     			 //Список видимых закладок
	СоответствиеКонстант.Вставить("344436bc-3e1b-42d7-b453-496d61eae2d8", "PicCatalog");     		 //Каталог хранения картинок
	СоответствиеКонстант.Вставить("ddedce5e-7a69-4858-bc89-f48e3e44a8ef", "OptPwd");     		     //Пароль доступа к настройкам
	
	//Справочники общие настройки
	
	//Номенклатура
	СоответствиеКонстант.Вставить("3abcd996-1632-46f6-8855-cb25759bc304", "FlagsPriceEdit");     	 //Разрешить редактирование товаров
	СоответствиеКонстант.Вставить("d902c64a-9a7a-40d1-8067-e4bb6b309534", "UseCodes");               //Признак отображения кодов товаров
	
	//Контрагенты
	СоответствиеКонстант.Вставить("73355324-f463-428a-91d2-2868dd35a168", "FlagsClientsCreate");     //Разрешить создание клиентов
	СоответствиеКонстант.Вставить("5616d1e9-bfa3-40fc-baba-852d16b5e774", "FlagsClientsEdit");     	 //Разрешить редактирование клиентов
	
	//Торговые точки
	СоответствиеКонстант.Вставить("b69ec9a6-565f-4e3e-844f-0060c5975fed", "FlagsTPointsCreate");     //Разрешить создание торговых точек
	СоответствиеКонстант.Вставить("f52e3c06-48d6-4809-ae16-13c61e78eabd", "FlagsTPointsEdit");     	 //Разрешить изменение торговых точек
	
	//Договоры
	СоответствиеКонстант.Вставить("abc5b73a-f477-406b-89c5-e9aab3b4f1e1", "FlagsContactsCreate");    //Разрешить создание договоров
	СоответствиеКонстант.Вставить("36767a2e-4df5-43b5-9813-893bf6f65a7f", "FlagsContactsEdit");    	 //Разрешить редактирование договоров
	
	// Документы общие настройки
	СоответствиеКонстант.Вставить("dc63708b-9257-48dc-9f16-d9846ac7d5fe", "MainRecvSelFirm");     	 //Проверять выбор фирмы
	СоответствиеКонстант.Вставить("b8396958-7d13-4633-a6c3-c8d639cbf9e6", "MainRecvSelClient");      //Проверять выбор клиента
	СоответствиеКонстант.Вставить("f984e263-b838-489e-a1d4-f775db7ede98", "MainRecvSelTPoint");      //Проверять выбор торговой точки
	СоответствиеКонстант.Вставить("56649629-21e4-4116-aec6-e794f12c62fe", "MainRecvContact");     	 //Проверять выбор договора	
	СоответствиеКонстант.Вставить("c5b563df-6ff8-4801-b19d-6a8dcb9cb95e", "UsePersPrices");			 //Использовать персональные цены
	СоответствиеКонстант.Вставить("8deb5086-fb67-436e-a5f7-5118ce0dc09e", "EditConfirmDocs");		 //Редактировать подтвержденные документы
	СоответствиеКонстант.Вставить("018dd98c-d617-4d35-b5c0-efdabf6b37a2", "HideStoreList");			 //Скрывать список складов при вводе количества
	СоответствиеКонстант.Вставить("6d4c184b-810d-4c23-ba6e-fb7e03b48812", "AskChangePrice");		 //Запрашивать подтверждение изменения цены
	СоответствиеКонстант.Вставить("0deef076-ff1f-4e4d-acb5-8344be0281a1", "NotEditPriceType");		 //Редактировать тип цены документа
	СоответствиеКонстант.Вставить("16d90b81-6ba0-4e72-a471-4350213b934e", "UseComments");			 //Запрашивать комментарий к фотографиям
	СоответствиеКонстант.Вставить("faf41508-ab25-4e1b-9bbd-f80634a3d264", "EditDocData");			 //Изменять дату документа
	//СоответствиеКонстант.Вставить("5c0be27d-7b90-4e9c-89fd-1d1e5c42c944", "UseDiscountLimits");			 //Использовать ограничение скидки
	
	// Заказы
	СоответствиеКонстант.Вставить("690b5736-e1b9-41ef-a132-807acad31687", "OrderEditPrice");     	 //Разрешить редактирование цен
	СоответствиеКонстант.Вставить("4a6b2c4c-445b-4985-a509-10fb1a2d57ce", "EditDiscountOrder");		 //Разрешить изменять скидку
	СоответствиеКонстант.Вставить("ad21d2f3-5797-49a1-aeeb-ef15dfc671a0", "OrderControlMinAmt");     //Проверять минимальное количество
	СоответствиеКонстант.Вставить("072ec906-bd0b-4b75-afa8-bece1434f1eb", "OrderNoChangeRests");     //Не изменять остатки
	СоответствиеКонстант.Вставить("711587ed-1589-4e69-a7f7-09ade3fb5888", "OrderNoNegRests");    	 //Запретить отрицательные остатки
	СоответствиеКонстант.Вставить("0de4a49f-691b-4910-95bf-6f25a281d9e1", "FlagsShowWeight");     	 //Показывать колонку веса
	СоответствиеКонстант.Вставить("07066b23-0099-43cc-99ab-7edf987fd359", "VrfTimeDelivery");     	 //Проверять время доставки
	СоответствиеКонстант.Вставить("0de4a49f-691b-4910-95bf-6f25a281d9e1", "флПоказыватьКолонкуВеса");//Отображать колонку веса в журнале документов
	СоответствиеКонстант.Вставить("b0fddb94-caf7-4003-b2fd-df15bd2f1f1b", "DelayDelivery");			 //Отсрочка доставки
	
	// Маршруты
	СоответствиеКонстант.Вставить("99eeeef3-015a-4727-8166-65f2dcceab29", "FlagsUseRoutes");         //Использовать маршруты
	СоответствиеКонстант.Вставить("8e0a70a1-476c-4c7b-a8a7-0c9ce334fc68", "FlagsPriority");          //Маршруты в приоритете
	
	// Касса
	СоответствиеКонстант.Вставить("ccd3f25e-a29b-419f-b8a2-d58e380efae2", "CashChooseDoc");          //Указывать документ оплаты
	СоответствиеКонстант.Вставить("ef7c73d2-d745-4e04-a5f1-afcbbcb72f05", "CashCheckSum");           //Проверять сумму оплаты
	
	// Мерчендайзинг
	СоответствиеКонстант.Вставить("d2dd4509-e164-4e6c-a0b2-c46b5ca0397d", "SelGoodsDsblEdit");       //Редактируемы мерчендайзинг
	СоответствиеКонстант.Вставить("68524bcf-b992-4896-8a91-44ee31498831", "FlagsMerchEdit");         //Изменять режим подбора в мерчендайзинге
	//СоответствиеКонстант.Вставить("4f409d16-f5cb-487f-b67b-2dbb45382b45", "UseMerchInOrder");        //Создавать мерчендайзинг в заказе
	СоответствиеКонстант.Вставить("a86959b3-ed83-44d8-b457-df8dfea9efdd", "AutoMerch");          	 //Создавать мерчендайзинг для заказа автоматически  	
	СоответствиеКонстант.Вставить("ec1c050f-9183-4cf8-9a40-8546c8617ebb", "FlagsMerchCount");        //Запрашивать количество
	СоответствиеКонстант.Вставить("aeddb719-eb7a-493e-b80e-ee2d63e76fe5", "FlagsMerchPrice");        //Запрашивать цену
	
	// Документы продажи
	СоответствиеКонстант.Вставить("c64dac8a-2fbc-40bf-bf49-143398aaac9a", "DocsSalePodbor");         //Разрешить изменять режим подбора
	СоответствиеКонстант.Вставить("32cd846c-cafa-4006-bc05-ef2cd135e2ea", "DocsSaleAskAmount");      //Запрашивать количество мерчендайзинга
	СоответствиеКонстант.Вставить("138f9a6c-7f96-4136-9fbc-0663476bc094", "DocsSaleAmInWindow");     //Количество мерчендайзинга в одном окне
	
	// Настройки GPS	
	СоответствиеКонстант.Вставить("e8dca437-fa0d-4f92-b7b8-4a7a162638c5", "UseGPS");   			     //Использовать GPS	
	
	// Настройки GPS-трекинга
	СоответствиеКонстант.Вставить("6e7183cc-abf6-4b18-af75-f4d851551fd4", "WriteTrack");   			     //использовать трекинг	
	СоответствиеКонстант.Вставить("c6b9563f-947a-46c2-82dd-d375e103317d", "UseSyncTimeMT");   			 //Синхронизировать время по спутнику 		
	СоответствиеКонстант.Вставить("dd7cde5e-3b09-4fa5-809b-529e8bbfb929", "WriteSpeed");   			     //Записывать скорость	
	СоответствиеКонстант.Вставить("", 									  "Schedule");   			     //Расписание
	СоответствиеКонстант.Вставить("6517da49-a145-43a7-8730-a3e9978e437b", "AutoSend");   			     //Фоновая передача трекинга
	СоответствиеКонстант.Вставить("54e2a0b0-4f94-499d-875a-9d2ee7634da9", "AutoSendInterval");   		 //Фоновая передача трекинга
			
	Возврат СоответствиеКонстант;
	
КонецФункции //ЗаполнитьСписокКонстант

Функция ПолучитьЗначениеПеречисления(ЗначПараметра)
	
	ТипыКонтактнойИнформации = Новый Соответствие;
	ТипыКонтактнойИнформации.Вставить("a4d0f540-64ed-4f3e-b2bb-818da38f5ab2", Перечисления.ТипыКонтактнойИнформации.Адрес);
	ТипыКонтактнойИнформации.Вставить("52477200-af54-405b-9888-14b8bded0e19", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ТипыКонтактнойИнформации.Вставить("2c2cfc86-e2a0-414d-a116-5acadac53437", Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
	ТипыКонтактнойИнформации.Вставить("e45419b3-0cfd-47ce-8b24-7037a1e86aed", Перечисления.ТипыКонтактнойИнформации.Другое);
	ТипыКонтактнойИнформации.Вставить("8fc8f351-14f0-48eb-952a-38bb313b28d5", Перечисления.ТипыКонтактнойИнформации.Телефон);
	ТекТип = ТипыКонтактнойИнформации.Получить(Нрег(ЗначПараметра));
	
	Возврат ТекТип;	
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры для Агент Плюс 2.0				 ///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ВЫГРУЗКИ ДАННЫХ
//////////////////////////////////////////////////////////

Процедура ЗаписатьЭлементВДокументОбмена(СтруктураПолей, ЗакрытьЭлемент = Истина)
	
	ДокОбмена.ЗаписатьНачалоЭлемента("ITEM");
	
	Для Каждого ТекЭлемент Из СтруктураПолей Цикл
		ДобавитьПоле(ТекЭлемент.Ключ, ТекЭлемент.Значение);
	КонецЦикла;
	
	Если ЗакрытьЭлемент Тогда
		ДокОбмена.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
КонецПроцедуры //ЗаписатьЭлементВДокументОбмена

Функция ПреобразоватьЗначениеВСтрокуДляXML(Значение)
	
	Перем ПреобразованноеЗначение;
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		ПреобразованноеЗначение = XMLСтрока(Значение);
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		ПреобразованноеЗначение = XMLСтрока(кпкАгентПлюс.ФорматироватьЧисло(Значение));
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
		ПреобразованноеЗначение = XMLСтрока(Число(Значение));
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		ПреобразованноеЗначение = XMLСтрока(кпкАгентПлюс.ДатаВремяВФорматXMLИз1СМТ(Значение));
	ИначеЕсли ТипЗнч(Значение) = Тип("УникальныйИдентификатор") Тогда
		ПреобразованноеЗначение = ВРег(XMLСтрока(Значение));
	ИначеЕсли Не ЗначениеЗаполнено(Значение) Тогда
		ПреобразованноеЗначение = "";
	ИначеЕсли ЗначениеЗаполнено(Значение) Тогда
		ПреобразованноеЗначение = ВРег(XMLСтрока(Значение.Ссылка.УникальныйИдентификатор()));
	Иначе
		ПреобразованноеЗначение = XMLСтрока(Значение);
	КонецЕсли;
	
	ЗнАтрибута = СтрЗаменить(ПреобразованноеЗначение, Символы.ПС,  "#рс#");
	ЗнАтрибута = СтрЗаменить(ПреобразованноеЗначение, Символы.Таб, "#ст#");   	
		
	Возврат ЗнАтрибута;
	
КонецФункции //ПреобразоватьЗначениеВСтрокуДляXML()

Процедура ДобавитьПоле(Имя, Значение)
	
	ЗначXML = ПреобразоватьЗначениеВСтрокуДляXML(Значение);
	
	//Если ЗначениеЗаполнено(ЗначXML) Тогда
		ДокОбмена.ЗаписатьАтрибут(Имя, ЗначXML);
	//КонецЕсли;
	
КонецПроцедуры // ДобавитьПоле()

Процедура ДобавитьКонстанту(Идентификатор, Значение)
	
	ДокОбмена.ЗаписатьНачалоЭлемента("ITEM");
	
		ДобавитьПоле("GUID",  Идентификатор);
		ДобавитьПоле("VALUE", Значение);							
		
	ДокОбмена.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // ДобавитьКонстанту() 

Процедура ДобавитьПустойЭлементВXML(Имя)
	
	ДокОбмена.ЗаписатьНачалоЭлемента(Имя);
	ДокОбмена.ЗаписатьКонецЭлемента();
	
КонецПроцедуры //ДобавитьПустойЭлементВXML		

Функция ПолучитьСтруктуруПредопределенныхПолейСправочника(ТекЭлемент, СоздаватьИдентификатор = Ложь)
	
	СтруктураПолей = Новый Структура;
	
	Попытка
		Если СоздаватьИдентификатор Тогда
			СтруктураПолей.Вставить("GUID",	Новый УникальныйИдентификатор());
		Иначе
			СтруктураПолей.Вставить("GUID",	ТекЭлемент.Ссылка.УникальныйИдентификатор());
		КонецЕсли;
	Исключение
		//сообщить("кпкОбменДанными.МодульОбъекта(2676)}: Значение не является значением объектного типа (УникальныйИдентификатор)");
		сообщить(ОписаниеОшибки());
		СтруктураПолей.Вставить("GUID",	Новый УникальныйИдентификатор());
	КонецПопытки;
	
	СтруктураПолей.Вставить("IsDeleted", ТекЭлемент.ПометкаУдаления);
	СтруктураПолей.Вставить("Name", 	 ТекЭлемент.Наименование);
	
	Возврат СтруктураПолей
	
КонецФункции //ПолучитьСтруктуруПредопределенныхПолейСправочника

Функция ПолучитьСтруктуруПредопределенныхПолейДокумента(ТекДокумент, СоздаватьИдентификатор = Ложь)
	
	СтруктураПолей = Новый Структура;
	
	Если СоздаватьИдентификатор Тогда
		СтруктураПолей.Вставить("GUID",	Новый УникальныйИдентификатор());
	Иначе
		СтруктураПолей.Вставить("GUID",	ТекДокумент.Ссылка.УникальныйИдентификатор());
	КонецЕсли;
	
	СтруктураПолей.Вставить("dt", 		 ТекДокумент.Дата);
	СтруктураПолей.Вставить("IsDeleted", ТекДокумент.ПометкаУдаления);
	СтруктураПолей.Вставить("IsPost", 	 ТекДокумент.Проведен); 
	
	Возврат СтруктураПолей
	
КонецФункции //ПолучитьСтруктуруПредопределенныхПолейДокумента
           
Процедура ВыгрузитьПростойСправочник(Идентификатор, Выборка, ИмяСпр = "")
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
		ДобавитьПоле("GUID", Идентификатор);
		
		ДобавитьПоле("Comment", "Справочник." + ИмяСпр);
		
		// Передаем команду на очистку справочника перед загрузкой
		ДобавитьПоле("KILLALL", "1");                	
	
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	
			Пока Выборка.Следующий() Цикл				
				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Выборка);				
				ЗаписатьЭлементВДокументОбмена(СтруктураПолей);				
			КонецЦикла;
			
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента();     //CATALOG
	
КонецПроцедуры //ВыгрузитьПростойСправочник

Функция ПолучитьТекстЗапросПоКонтрагентам()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.Родитель КАК Родитель,
	|	Контрагенты.ЭтоГруппа,
	|	Контрагенты.Код,
	|	Контрагенты.Наименование,
	|	кпкСведенияКонтрагента.Статус,
	|	Контрагенты.ПометкаУдаления,
	|	ЕСТЬNULL(КонтрагентыМенеджеры.ТипЦен, ЗНАЧЕНИЕ(Справочник.ТипыЦен.ПустаяСсылка)) КАК ТипЦен
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.кпкСведенияКонтрагента КАК кпкСведенияКонтрагента
	|		ПО (кпкСведенияКонтрагента.Объект = Контрагенты.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.Менеджеры КАК КонтрагентыМенеджеры
	|		ПО (КонтрагентыМенеджеры.Ссылка = Контрагенты.Ссылка)
	|			И (КонтрагентыМенеджеры.Менеджер = &Менеджер)
	|ГДЕ
	|	НЕ КонтрагентыМенеджеры.Ссылка.ЭтоГруппа
	|	И НЕ КонтрагентыМенеджеры.Ссылка.ПометкаУдаления
	|	И КонтрагентыМенеджеры.Ссылка В ИЕРАРХИИ(&СписКлиентов)";	
	
	Возврат ТекстЗапроса;
	
КонецФункции //ПолучитьТекстЗапросПоКонтрагентам

Функция ПолучитьТекстЗапросаПоНоменклатуре(ЗапросПоХарактеристиками = Ложь)
	
	Если Не флВыгрТоварыСНулевОст Тогда	
		Если ЗапросПоХарактеристиками Тогда
			УсловиеОтбора = "И ВЫБОР
			|КОГДА ОстаткиТоваров.Товар.ТипНоменклатуры = Значение(Перечисление.ТипыНоменклатуры.Услуга)
			|ТОГДА 100
			|ИНАЧЕ ОстаткиТоваров.СвободныйОстаток
			|КОНЕЦ > 0";
			
			УсловиеОтбора = "";

		Иначе
			УсловиеОтбора = "И ВЫБОР
			|КОГДА СпрНоменклатура.ТипНоменклатуры = Значение(Перечисление.ТипыНоменклатуры.Услуга)
			|ТОГДА 100
			|ИНАЧЕ ОстаткиТоваров.СвободныйОстаток
			|КОНЕЦ > 0";
			
			УсловиеОтбора = "";
			
		КонецЕсли;
	КонецЕсли;  
	
	Если ЗапросПоХарактеристиками Тогда
				
		 ТекстЗапроса =
		 "ВЫБРАТЬ
        |	ТоварыНаСкладахОстатки.СтруктурнаяЕдиница КАК Склад,
        |	ТоварыНаСкладахОстатки.КоличествоОстаток КАК СвободныйОстаток,
        |	ТоварыНаСкладахОстатки.Характеристика КАК Ссылка,
        |	ТоварыНаСкладахОстатки.Номенклатура КАК Товар
        |ПОМЕСТИТЬ ОстаткиТоваров
        |ИЗ
        |	РегистрНакопления.Запасы.Остатки(
        |			&Период,
        |			СтруктурнаяЕдиница В ИЕРАРХИИ (&Склады)
        |				И ЗаказПокупателя = &ПустойЗаказ
        |				И (Характеристика.Владелец В ИЕРАРХИИ (&Ассортимент)
        |					ИЛИ Номенклатура В ИЕРАРХИИ (&Ассортимент))) КАК ТоварыНаСкладахОстатки
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	ЕСТЬNULL(ОстаткиТоваров.Товар, ХарактеристикиНоменклатуры.Владелец) КАК Номенклатура,
        |	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ""<Без характеристики>"") КАК Ссылка,
        |	ОстаткиТоваров.Склад,
        |	ОстаткиТоваров.СвободныйОстаток КАК СвободныйОстаток
        |ИЗ
        |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
        |		ПОЛНОЕ СОЕДИНЕНИЕ ОстаткиТоваров КАК ОстаткиТоваров
        |		ПО (ОстаткиТоваров.Ссылка = ХарактеристикиНоменклатуры.Ссылка)
        |ГДЕ
        |	ХарактеристикиНоменклатуры.Владелец В ИЕРАРХИИ(&Ассортимент)
		|   И (НЕ ОстаткиТоваров.Товар.ЭтоГруппа)
		|   И (НЕ ОстаткиТоваров.Товар.ПометкаУдаления)		
		|	И (НЕ ХарактеристикиНоменклатуры.ПометкаУдаления)		
		|	" + УсловиеОтбора + "
        |ИТОГИ
        |	СУММА(СвободныйОстаток)
		|ПО
		|	Номенклатура,
		|	Ссылка
		|	Склад";
						 		 
	 Иначе
			
		ТекстЗапроса = 	
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварыНаСкладахОстатки.Номенклатура КАК Ссылка,
		|	ТоварыНаСкладахОстатки.Склад КАК СтруктурнаяЕдиница,
		|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК СвободныйОстаток
		|ПОМЕСТИТЬ ОстаткиТоваров
		|ИЗ
		|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(
		|			&Период,
		|			Склад В ИЕРАРХИИ (&Склады)
		|				И Подразделение = &Подразделение
		|				И Номенклатура В ИЕРАРХИИ (&Ассортимент)) КАК ТоварыНаСкладахОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыНаСкладахОстатки.Номенклатура,
		|	ТоварыНаСкладахОстатки.Склад,
		|	ТоварыНаСкладахОстатки.КоличествоОстаток
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка КАК Ссылка,
		|	СпрНоменклатура.ПометкаУдаления,
		|	СпрНоменклатура.Наименование,
		|	ЕСТЬNULL(СпрНоменклатура.Родитель, """") КАК Родитель,
		|	0 КАК СтавкаНДС,
		|	ЕСТЬNULL(СпрНоменклатура.Родитель, """") КАК НоменклатурнаяГруппа,
		|	ЕСТЬNULL(СпрНоменклатура.ЕдиницаИзмерения, """") КАК БазоваяЕдиницаИзмерения,
		|	ЕСТЬNULL(СпрНоменклатура.ЕдиницаИзмерения, """") КАК ЕдиницаХраненияОстатков,
		|	ЛОЖЬ КАК ВестиУчетПоХарактеристикам,
		|	ОстаткиТоваров.СвободныйОстаток КАК СвободныйОстаток,
		|	ОстаткиТоваров.СтруктурнаяЕдиница,
		|	СпрНоменклатура.Наименование КАК НаименованиеПолное
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиТоваров КАК ОстаткиТоваров
		|		ПО СпрНоменклатура.Ссылка = ОстаткиТоваров.Ссылка
		|ГДЕ
		|	СпрНоменклатура.Ссылка В ИЕРАРХИИ(&Ассортимент)
		|	И НЕ СпрНоменклатура.ЭтоГруппа
		|	И НЕ СпрНоменклатура.ПометкаУдаления
		|	И СпрНоменклатура.НеАктуально = ЛОЖЬ" + УсловиеОтбора + "		
		|ИТОГИ
		|	СУММА(СвободныйОстаток)
		|ПО
		|	Ссылка КАК Склад";
		
	КонецЕсли;	
	
	Возврат ТекстЗапроса;
	
КонецФункции //ПолучитьТекстЗапросаПоНоменклатуре

//////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ВЫГРУЗКИ ДАННЫХ ДЛЯ ПРИЛОЖЕНИЯ МОБИЛЬНАЯ ТОРГОВЛЯ
//////////////////////////////////////////////////////////////////
//
Процедура ВыгрузитьВидыКонтактнойИнформации()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка,
	|	ВидыКонтактнойИнформации.Наименование,
	|	ВидыКонтактнойИнформации.Тип.Ссылка КАК ТипКИ,
	|	ВидыКонтактнойИнформации.ПометкаУдаления
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации");
	
	СписокЭлементов = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
	ДокОбмена.ЗаписатьАтрибут("GUID", "564e0eca-c498-4d28-83d7-4bdeaec558e2");
	
		ДобавитьПоле("Comment", "Справочник.ВидыКонтактнойИнформации");
	
	 	// Передаем команду на очистку видов КИ
		Если флОчищатьСправочникиПередЗагрузкой Тогда
			ДобавитьПоле("KILLALL", "1");                	
		КонецЕсли;	 
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
			Пока СписокЭлементов.Следующий() Цикл  				
				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(СписокЭлементов);				
				СтруктураПолей.Вставить("A02", ТипыКонтактнойИнформации.Получить(СписокЭлементов.ТипКИ));
				ЗаписатьЭлементВДокументОбмена(СтруктураПолей);				
			КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
	
КонецПроцедуры // ВыгрузитьВидыКонтактнойИнформации()

Процедура ВыгрузитьДоговорыКонтагентов()
	
	РежимВыгрузкиКонтрагентов = Константы.кпкРежимВыгрузкиКонтрагентов.Получить();
	
	Если РежимВыгрузкиКонтрагентов = 1 Тогда
		ТекстУсловияДоговоров = " И ДоговорыКонтрагентов.Владелец В(&СписокКлиентов) И ДоговорыКонтрагентов.Ссылка В ИЕРАРХИИ (&СписокДоговоров)";
	ИначеЕсли РежимВыгрузкиКонтрагентов = 4 Тогда
		ТекстУсловияДоговоров = " И ВЫБОР КОГДА ДоговорыКонтрагентов.Владелец В ИЕРАРХИИ (&СписокКлиентов) И ДоговорыКонтрагентов.Владелец В (&СписКлиентовПоДоговорам)" +
								"ТОГДА ДоговорыКонтрагентов.Владелец В ИЕРАРХИИ (&СписокКлиентов) И ДоговорыКонтрагентов.Ссылка В ИЕРАРХИИ (&СписокДоговоров)" +
								"ИНАЧЕ ДоговорыКонтрагентов.Владелец В ИЕРАРХИИ (&СписокКлиентов) КОНЕЦ";
	Иначе
		ТекстУсловияДоговоров = " И ДоговорыКонтрагентов.Владелец В(&СписокКлиентов)";		
	КонецЕсли; 	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ДоговорыКонтрагентов.Ссылка,
	                      |	ДоговорыКонтрагентов.Код,
	                      |	ДоговорыКонтрагентов.Наименование,
	                      |	ДоговорыКонтрагентов.Владелец КАК Контрагент,
	                      |	ДоговорыКонтрагентов.ДатаДоговора КАК Дата,
	                      |	ДоговорыКонтрагентов.Организация КАК Организация,
	                      |	ДоговорыКонтрагентов.ВидЦен КАК ВидЦен,
	                      |	ДоговорыКонтрагентов.ПометкаУдаления,
	                      |	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК СрокДействия
	                      |ИЗ
	                      |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	                      |ГДЕ
	                      |	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)" + ТекстУсловияДоговоров);
	
	Запрос.УстановитьПараметр("СписокКлиентов",    		 сзКлиентыАгента);
	Запрос.УстановитьПараметр("СписокДоговоров", 		 ТаблицаДоговоровАгента.ВыгрузитьКолонку("Договор"));
	Запрос.УстановитьПараметр("СписКлиентовПоДоговорам", ТаблицаДоговоровАгента.ВыгрузитьКолонку("Контрагент"));
	
	СписокЭлементов = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
		ДобавитьПоле("GUID", "735a9ce5-dcc1-4d1a-8f8d-643a50a6befc");
		ДобавитьПоле("Comment", "Справочник.ДоговорыКонтрагентов");
		
		// Передаем команду на очистку договоров перед загрузкой
		Если флОчищатьСправочникиПередЗагрузкой Тогда
			ДобавитьПоле("KILLALL", "1");                	
		КонецЕсли;	
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
			Пока СписокЭлементов.Следующий() Цикл
			
				#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
				#КонецЕсли
				
				КодТипаЦены = ПолучитьКодТипаЦены(СписокЭлементов.ВидЦен, СписокЭлементов.Ссылка);

				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(СписокЭлементов);				
				СтруктураПолей.Вставить("A02", СписокЭлементов.Контрагент);
				СтруктураПолей.Вставить("A03", СписокЭлементов.Дата);
				СтруктураПолей.Вставить("A04", СписокЭлементов.СрокДействия);
				СтруктураПолей.Вставить("A05", СписокЭлементов.Организация);
				Если Не ПустаяСтрока(КодТипаЦены) Тогда
					СтруктураПолей.Вставить("A06", СписокЭлементов.ВидЦен);
				КонецЕсли;
				ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
				
			КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента(); // ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента();     // CATALOG
	                                    
КонецПроцедуры // ВыгрузитьДоговорыКонтагентов

Процедура ВыгрузитьКонтактныеЛица()
	
	Возврат;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КонтактныеЛицаКонтрагентов.Ссылка КАК Ссылка,
	|	КонтактныеЛицаКонтрагентов.ПометкаУдаления КАК ПометкаУдаления,
	|	КонтактныеЛицаКонтрагентов.Владелец КАК Контрагент,
	|	NULL КАК ТорговаяТочка,
	|	КонтактныеЛицаКонтрагентов.Код,
	|	КонтактныеЛицаКонтрагентов.Наименование,
	|	КонтактныеЛицаКонтрагентов.ФизЛицо.ДатаРождения КАК ДатаРождения,
	|	КонтактныеЛицаКонтрагентов.Комментарий
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛицаКонтрагентов
	|ГДЕ
	|	КонтактныеЛицаКонтрагентов.Владелец В(&СписокКонтрагентов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	кпкТорговыеТочкиКонтактныеЛица.КонтактноеЛицо.Ссылка,
	|	кпкТорговыеТочкиКонтактныеЛица.КонтактноеЛицо.ПометкаУдаления,
	|	NULL,
	|	кпкТорговыеТочкиКонтактныеЛица.Ссылка,
	|	кпкТорговыеТочкиКонтактныеЛица.КонтактноеЛицо.Код,
	|	кпкТорговыеТочкиКонтактныеЛица.КонтактноеЛицо.Наименование,
	|	кпкТорговыеТочкиКонтактныеЛица.КонтактноеЛицо.ФизЛицо.ДатаРождения,
	|	кпкТорговыеТочкиКонтактныеЛица.КонтактноеЛицо.Комментарий
	|ИЗ
	|	Справочник.кпкТорговыеТочки.КонтактныеЛица КАК кпкТорговыеТочкиКонтактныеЛица
	|ГДЕ
	|	кпкТорговыеТочкиКонтактныеЛица.Ссылка.Владелец В(&СписокКонтрагентов)");
	
	Запрос.УстановитьПараметр("СписокКонтрагентов", сзКлиентыАгента);
	
	СписокЭлементов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	сзКонтактныеЛица = Новый СписокЗначений;
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
		ДобавитьПоле("GUID", "cf387a58-4655-41b5-a460-85884d1f20d0");
		
		ДобавитьПоле("Connect", "Справочник.КонтактныеЛица");		
		
		// Передаем команду на очистку КЛ перед загрузкой
		Если флОчищатьСправочникиПередЗагрузкой Тогда
			ДобавитьПоле("KILLALL", "1");                	
		КонецЕсли;	
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
			СписокКЛ = Новый СписокЗначений;
			
			Пока СписокЭлементов.Следующий() Цикл
				
				#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
				#КонецЕсли

			    СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(СписокЭлементов);
					
				СтруктураПолей.Вставить("A02", 		 СписокЭлементов.ДатаРождения);
				Если СписокКЛ.НайтиПоЗначению(СписокЭлементов.Ссылка) <> Неопределено И 
					ЗначениеЗаполнено(СписокЭлементов.ТорговаяТочка) Тогда
					//СтруктураПолей.Вставить("A03",  	 СписокЭлементов.ТорговаяТочка.Владелец);
				Иначе
					СтруктураПолей.Вставить("A03",  	 СписокЭлементов.Контрагент);					
				КонецЕсли;   
				
				СтруктураПолей.Вставить("A04", 		 СписокЭлементов.ТорговаяТочка);
				СтруктураПолей.Вставить("A05", 		 СписокЭлементов.Комментарий);
				
				ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
				
				СписокКЛ.Добавить(СписокЭлементов.Ссылка);
				
			КонецЦикла;
	
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
	
КонецПроцедуры //ВыгрузитьКонтактныеЛица

Процедура ВыгрузитьКлиентов()
	
	сзВыгруженныеКлиенты = Новый СписокЗначений;
	
	Запрос = Новый Запрос(ПолучитьТекстЗапросПоКонтрагентам());
	
	Запрос.УстановитьПараметр("СписКлиентов", 	сзКлиентыАгента);
	Запрос.УстановитьПараметр("Менеджер", 		ВыбАгент.Менеджер);
	
	парСписокГрупп = Новый СписокЗначений;
	
	Для Каждого ЭлСписка Из сзКлиентыАгента Цикл
		Если ЗначениеЗаполнено(ЭлСписка.Значение.Родитель) Тогда
			парСписокГрупп.Добавить(ЭлСписка.Значение.Родитель);
		КонецЕсли;
	КонецЦикла;
	
	КонтрагентыДляВыгрузки = Запрос.Выполнить().Выбрать();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.ПометкаУдаления,
	|	Контрагенты.Наименование КАК Наименование,
	|	Контрагенты.Родитель.Ссылка КАК Родитель
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ЭтоГруппа
	|	И Контрагенты.Ссылка В(&СписокГрупп)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ");
	
	Запрос.УстановитьПараметр("СписокГрупп", парСписокГрупп);
	
	СписокГрупп = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
		ДобавитьПоле("GUID", "9450980f-fb59-47e3-bae2-aa3c58441b1a");
		
		ДобавитьПоле("Comment", "Справочник.Контрагенты");
		
		// Передаем команду на очистку клиентов перед загрузкой
		Если флОчищатьСправочникиПередЗагрузкой Тогда
			ДобавитьПоле("KILLALL", "1");                	
		КонецЕсли;	
		
		// Выгрузка групп контрагентов	
		ДокОбмена.ЗаписатьНачалоЭлемента("GROUPS");
		
			ДокОбмена.ЗаписатьНачалоЭлемента("GROUP");
			
				ДобавитьПоле("GUID", "1e18c8db-08f6-47da-874b-100d6e109ab8");
				
				ДобавитьПоле("Comment", "Элементы группировка по иерархии");
				
				ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");	
				
					СпВГ = Новый СписокЗначений;
					
					Пока СписокГрупп.Следующий() Цикл							
						Если СпВГ.НайтиПоЗначению(СписокГрупп.Ссылка) = Неопределено Тогда												
							СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(СписокГрупп);						
							//Если ЗначениеЗаполнено(СписокГрупп.Родитель) Тогда							
								СтруктураПолей.Вставить("ParId", СписокГрупп.Родитель);						
								ЗаписатьЭлементВДокументОбмена(СтруктураПолей);							
								СпВГ.Добавить(СписокГрупп.Ссылка);   				
							//КонецЕсли;
						КонецЕсли;   						
					КонецЦикла;  				
				
				ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
			
			ДокОбмена.ЗаписатьКонецЭлемента();     //GROUP
		
		ДокОбмена.ЗаписатьКонецЭлемента(); 		   //GROUPS
		
		// Выгрузка элементов справочника
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
		СчЭлементов = 0;
		
		ВсегоЭлементов = КонтрагентыДляВыгрузки.Количество();
		
		Пока КонтрагентыДляВыгрузки.Следующий() Цикл	
			
			СчЭлементов = СчЭлементов + 1;
			
			ПроцентВыгрузки = Окр(СчЭлементов/ВсегоЭлементов*100, 0);		
			
			#Если Клиент Тогда
				Состояние("Выгрузка контрагентов: " + ПроцентВыгрузки + "%");			
				ОбработкаПрерыванияПользователя();
			#КонецЕсли   			
			
			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(КонтрагентыДляВыгрузки);						
			СтруктураПолей.Вставить("A02", 		 КонтрагентыДляВыгрузки.Родитель);
			//СтруктураПолей.Вставить("A05", 		 КонтрагентыДляВыгрузки.Скидка);
			СтруктураПолей.Вставить("A05", 		 0);
			СтруктураПолей.Вставить("A06", 		 КонтрагентыДляВыгрузки.Статус);
			//СтруктураПолей.Вставить("A08", 		 КонтрагентыДляВыгрузки.ОсновнойДоговор);
			СтруктураПолей.Вставить("A08", 		 0);
			
			//Если ЗначениеЗаполнено(КонтрагентыДляВыгрузки.ОсновнойДоговор.ВидЦен) Тогда
			//	СтруктураПолей.Вставить("A09", 	 КонтрагентыДляВыгрузки.ОсновнойДоговор.ВидЦен);
			//КонецЕсли;
			СтруктураПолей.Вставить("A09", 	 	КонтрагентыДляВыгрузки.ТипЦен);
			
			СтруктураПолей.Вставить("GrpId0", 	КонтрагентыДляВыгрузки.Родитель);
			
			ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
			
			Если Константы.кпкВключитьАвтозаполнениеРегистровСведений.Получить() Тогда
				ДобавитьЗаписьВРегистр(РегистрыСведений.кпкСведенияКонтрагента, КонтрагентыДляВыгрузки.Ссылка);
			КонецЕсли;
			
		КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента();     //CATALOG
	
КонецПроцедуры //ВыгрузкаКлиентов()

Процедура ВыгрузитьОрганизации()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.Наименование,
	|	Организации.ПометкаУдаления,
	|	Организации.ИНН,
	|	Организации.КодПоЕДРПОУ КАК ОГРН,
	|	ЕСТЬNULL(кпкСведенияОрганизаций.ИспНДС, ЛОЖЬ) КАК ИспНДС,
	|	Организации.ПрефиксНомеровДокументов КАК Префикс
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.кпкСведенияОрганизаций КАК кпкСведенияОрганизаций
	|		ПО (кпкСведенияОрганизаций.Объект = Организации.Ссылка)");
	
	СписокЭлементов = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
	ДобавитьПоле("GUID", "0e3cbaea-5467-45cd-8c86-fb1777da435b");

	ДобавитьПоле("Comment", "Справочник.Организации");	
	
	// Передаем команду на очистку клиентов перед загрузкой
	Если флОчищатьСправочникиПередЗагрузкой Тогда
		ДобавитьПоле("KILLALL", "1");                	
	КонецЕсли;	
	
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
			Пока СписокЭлементов.Следующий() Цикл 	
				СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Локализация.ПолучитьЯзыкФормированияПечатныхФорм(),СписокЭлементов.Ссылка, ТекущаяДата(), ,);
			
				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(СписокЭлементов);
				СтруктураПолей.Вставить("A02", 		 СписокЭлементов.ИспНДС);
				СтруктураПолей.Вставить("A05", 		 СписокЭлементов.ИНН);
				СтруктураПолей.Вставить("A06", 		 СписокЭлементов.ИНН);
				СтруктураПолей.Вставить("A07", 		 СписокЭлементов.ОГРН);
				СтруктураПолей.Вставить("A04", 		 СведенияОбОрганизации.Телефоны);
				СтруктураПолей.Вставить("A03", 		 СведенияОбОрганизации.ЮридическийАдрес);
				СтруктураПолей.Вставить("A09", 		 СведенияОбОрганизации.ФактическийАдрес);
				СтруктураПолей.Вставить("A010", 	 СписокЭлементов.Префикс);
				ЗаписатьЭлементВДокументОбмена(СтруктураПолей);  								
				
				Если Константы.кпкВключитьАвтозаполнениеРегистровСведений.Получить() Тогда
					ДобавитьЗаписьВРегистр(РегистрыСведений.кпкСведенияОрганизаций, СписокЭлементов.Ссылка);
				КонецЕсли;
				
			КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
	
	
КонецПроцедуры //ВыгрузитьОрганизации
 
Процедура ВыгрузитьТорговыеТочки()
	
	РежимВыгрузкиКонтрагентов = Константы.кпкРежимВыгрузкиКонтрагентов.Получить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	кпкТорговыеТочки.Ссылка,
	|	кпкТорговыеТочки.ПометкаУдаления,
	|	кпкТорговыеТочки.Наименование,
	|	ЕСТЬNULL(кпкТорговыеТочки.Владелец, """") КАК Контрагент,
	|	кпкТорговыеТочки.Телефоны КАК Телефон,
	|	кпкТорговыеТочки.Адрес,
	|	кпкТорговыеТочки.ОсновнойТипЦены
	|ИЗ
	|	Справочник.кпкТорговыеТочки КАК кпкТорговыеТочки
	|ГДЕ
	|	кпкТорговыеТочки.Владелец В(&Владелец)");
	
	Запрос.УстановитьПараметр("Владелец", сзКлиентыАгента);
	
	СписокЭлементов = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
		ДобавитьПоле("GUID", "d3dbb02e-681e-4fc2-ad0e-8ef1234e9f48");
		
		ДобавитьПоле("Comment", "Справочник.ТорговыеТочки");	
		
		// Передаем команду на очистку клиентов перед загрузкой
		Если флОчищатьСправочникиПередЗагрузкой Тогда
			ДобавитьПоле("KILLALL", "1");                	
		КонецЕсли;	
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	
			Пока СписокЭлементов.Следующий() Цикл
				
				// Если выгрузка контрагентов по плану посещений или из списка контрагентов для агента
				// то нужно проверять согласно списку выгружаемых торговых точек, чтобы в выгрузку
				// не попадали лишние торговые точки
				Если (РежимВыгрузкиКонтрагентов = 0) или (РежимВыгрузкиКонтрагентов = 2) Тогда 
					Если сзТоргТочкиАгента.НайтиПоЗначению(СписокЭлементов.Ссылка) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
				#КонецЕсли   
			
				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(СписокЭлементов);
				СтруктураПолей.Вставить("A02", СписокЭлементов.Контрагент);
				
				ОсновнойТипЦены = "";
				Если ЗначениеЗаполнено(СписокЭлементов.ОсновнойТипЦены) Тогда
					СтруктураПолей.Вставить("A08", СписокЭлементов.ОсновнойТипЦены);					
				КонецЕсли;
				
				ЗаписатьЭлементВДокументОбмена(СтруктураПолей);	
				
			КонецЦикла;
	
		ДокОбмена.ЗаписатьКонецЭлемента();  //ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента();      //CATALOG
	
КонецПроцедуры //ВыгрузитьТорговыеТочки

Процедура ВыгрузитьНоменклатуру()
	
	сзАссортимент = Новый Массив; 	
	сзАссортимент = СведенияАгента.Ассортимент.ТАссортимент.ВыгрузитьКолонку("Номенклатура");
		
	парСписокГрупп = Новый СписокЗначений;
	
	Для Каждого ЭлМассива Из сзАссортимент Цикл
		Если ЭлМассива.ЭтоГруппа Тогда			
			парСписокГрупп.Добавить(ЭлМассива);
		ИначеЕсли ЗначениеЗаполнено(ЭлМассива.Родитель) Тогда
			парСписокГрупп.Добавить(ЭлМассива.Родитель);							
		КонецЕсли;		
	КонецЦикла;
	
	ДопНастройкиАгента = СведенияАгента.ДополнительныеНастройки.Получить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.ПометкаУдаления,
	|	Номенклатура.Наименование,
	|	Номенклатура.Родитель.Ссылка КАК Родитель
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В ИЕРАРХИИ (&СписокГрупп) И
	|	Номенклатура.ЭтоГруппа 
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ"); 
	
	Запрос.УстановитьПараметр("СписокГрупп", парСписокГрупп);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СписокГрупп = РезультатЗапроса.Выбрать();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Категории.Ссылка КАК Ссылка,
	|	Категории.ПометкаУдаления,
	|	Категории.Код,
	|	Категории.Наименование КАК Наименование,
	|	Категории.Родитель.Ссылка КАК Родитель
	|ИЗ
	|	Справочник.НоменклатурныеГруппы КАК Категории
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|АВТОУПОРЯДОЧИВАНИЕ");
	
	//СписокКатегорий = Запрос.Выполнить().Выбрать();
	
	// Выгружаем спарвочник номенклатуры
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
		ДобавитьПоле("GUID", "d6d52ada-0f38-4112-af3c-2f1e425a43d1");
		
		ДобавитьПоле("Comment", "Справочник.Номенклатура");	
		
		// Команда на очистку всего справочника перед загрузкой данных
		Если флОчищатьСправочникиПередЗагрузкой Тогда
			ДобавитьПоле("KILLALL", "1");                	
		КонецЕсли;
				
		// Выгрузка группировок справочника номенклатура
		ДокОбмена.ЗаписатьНачалоЭлемента("GROUPS");
		
			// Объявление группировки по иерархии
			ДокОбмена.ЗаписатьНачалоЭлемента("GROUP");
			
			ДобавитьПоле("GUID", "8e502a85-8dd4-41cf-a7a4-17ab50872d36");
			
			ДобавитьПоле("Comment", "Элементы группировки по иерархии");
			
				// Элементы группировки иерархии
				ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");	
			
					СпВГ = Новый СписокЗначений;
			 	
					Пока СписокГрупп.Следующий() Цикл	
						
						Если СпВГ.НайтиПоЗначению(СписокГрупп.Ссылка) = Неопределено Тогда
							СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(СписокГрупп);
							//Если ЗначениеЗаполнено(СписокГрупп.Родитель) Тогда
								СтруктураПолей.Вставить("ParId", СписокГрупп.Родитель);							
								ЗаписатьЭлементВДокументОбмена(СтруктураПолей);	
								СпВГ.Добавить(СписокГрупп.Ссылка);
							//КонецЕсли;                        							
						КонецЕсли;                   					
						
					КонецЦикла;
									
				ДокОбмена.ЗаписатьКонецЭлемента();  //ELEMENTS
						
			ДокОбмена.ЗаписатьКонецЭлемента();      //GROUP
			
			// Объявление группировки по категориям номенклатуры
			//////ДокОбмена.ЗаписатьНачалоЭлемента("GROUP");
			//////
			//////ДобавитьПоле("GUID", "e42da5b9-e29b-43e1-b7e3-9b500879d6b7");
			//////
			//////ДобавитьПоле("Comment", "Элементы группировки по категориям");
			//////
			//////	// Элементы группировки по категориям
			//////	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");	
			//////	
			//////		Пока СписокКатегорий.Следующий() Цикл
			//////			
			//////			СтруктураПолей = Новый Структура;
			//////			СтруктураПолей.Вставить("GUID", СписокКатегорий.Ссылка.УникальныйИдентификатор());						
			//////			СтруктураПолей.Вставить("IsDeleted", СписокКатегорий.ПометкаУдаления);
			//////			//Если ЗначениеЗаполнено(СписокКатегорий.Родитель) Тогда
			//////				СтруктураПолей.Вставить("ParId", СписокКатегорий.Родитель);
			//////			//КонецЕсли;
			//////			СтруктураПолей.Вставить("Name", СписокКатегорий.Наименование);
			//////			ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
			//////			
			//////		КонецЦикла;
			//////		
			//////	ДокОбмена.ЗаписатьКонецЭлемента();  //ELEMENTS
			//////	
			//////ДокОбмена.ЗаписатьКонецЭлемента();      //GROUP
			
		ДокОбмена.ЗаписатьКонецЭлемента();        	//GROUPS
			
	// Ниже идет код, касающийся выгрузки непосредственно элементов справочника	
	сзСклады 	  = Новый СписокЗначений;	
	сзСклады.ЗагрузитьЗначения(СведенияАгента.СписокСкладов.Склады.ВыгрузитьКолонку("Склад"));
		
	СписокВыгруженныхГрупп = Новый СписокЗначений;  		
		
	Запрос = Новый Запрос(ПолучитьТекстЗапросаПоНоменклатуре());
	
	Запрос.УстановитьПараметр("Период", 	 	ТекущаяДата());
	Запрос.УстановитьПараметр("Ассортимент", 	сзАссортимент);
	Запрос.УстановитьПараметр("Склады",      	сзСклады);
	Запрос.УстановитьПараметр("Подразделение",	Подразделение);
	Запрос.УстановитьПараметр("ПустойЗаказ", 	Документы.ЗаказПокупателя.ПустаяСсылка());
		                                    
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВсегоТиповЦен = тзКатегорииЦен.Количество();	
	ВсегоСкладов  = сзСклады.Количество();
	
	// Выгрузка элементов справочника
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	
	ДобавитьПоле("Comment", "Элементы справочника 'Номенклатура'");
	
	ВсегоЭлементов = Выборка.Количество();
	
	СчЭлементов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		СчЭлементов = СчЭлементов + 1;
		
		ПроцентВыгрузки = Окр(СчЭлементов/ВсегоЭлементов*100, 0);		
		
		#Если Клиент Тогда
			Состояние("Выгрузка номенклатуры: " + ПроцентВыгрузки + "%");			
			ОбработкаПрерыванияПользователя();
		#КонецЕсли

		ТекНоменклатура = Выборка.Ссылка;
		
		СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Выборка);						
		
		СтрКод = "";
		Если Не ДопНастройкиАгента = Неопределено Тогда		
			ЗначениеКонстанты = ДопНастройкиАгента["UseCodes"];
			Если Не ЗначениеКонстанты = Неопределено Тогда
				Если ЗначениеКонстанты = 1 Тогда					
					СтрКод = ТекНоменклатура.Ссылка.Код;
				ИначеЕсли ЗначениеКонстанты = 2 Тогда					
					СтрКод = ТекНоменклатура.Ссылка.Артикул;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ЕдЦены = ПолучитьБазовуюЕдиницу(ТекНоменклатура);
		
		//ЭтоУслуга = ТекНоменклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
		ЭтоУслуга = Ложь;
		
		СтруктураПолей.Вставить("Code", СтрКод);
		СтруктураПолей.Вставить("A02",  ТекНоменклатура.Родитель.Ссылка);
		//СтруктураПолей.Вставить("A04",  ТекНоменклатура.СтавкаНДС.Ставка);
		СтруктураПолей.Вставить("A04",  "0");
		//СтруктураПолей.Вставить("A05",  ТекНоменклатура.НоменклатурнаяГруппа);
		СтруктураПолей.Вставить("A05",  ТекНоменклатура.Родитель);
		//СтруктураПолей.Вставить("A06",  ПолучитьЕдиницуХраненияОстатков(ТекНоменклатура));
		СтруктураПолей.Вставить("A06",  ТекНоменклатура.ЕдиницаИзмерения);
		//СтруктураПолей.Вставить("A08",  ТекНоменклатура.ИспользоватьХарактеристики);
		СтруктураПолей.Вставить("A08",  Ложь);
		СтруктураПолей.Вставить("A011", Выборка.СвободныйОстаток);
		//СтруктураПолей.Вставить("A013", ПолучитьЕдиницуХраненияОстатков(ТекНоменклатура));
		СтруктураПолей.Вставить("A013", ТекНоменклатура.ЕдиницаИзмерения);
		СтруктураПолей.Вставить("A014", Истина);
		СтруктураПолей.Вставить("A015", ЭтоУслуга);
		
        //СтруктураПолей.Вставить("A035", ТекНоменклатура.НаименованиеПолное);
		СтруктураПолей.Вставить("A035", ТекНоменклатура.Наименование);
		СтруктураПолей.Вставить("A037", ЗначениеЗаполнено(Выборка.СвободныйОстаток));
		
		// Выгружаем цены в разрезе типов цен
		КолВыгрТиповЦен = 0;
		
		Для Каждого СтрокаТабЦен Из тзКатегорииЦен Цикл   
			Если КолВыгрТиповЦен = 10 Тогда
				Прервать;
			КонецЕсли;
			ТекТипЦены = СтрокаТабЦен.ТипыЦен;  
			ТекЦена = ПолучитьЦенуНоменклатуры(ТекНоменклатура, , ТекТипЦены, ТекущаяДата(), ЕдЦены, мВалютаРегламентированногоУчета);			
			СтруктураПолей.Вставить("A02" + Строка(КолВыгрТиповЦен), ТекЦена);							
			КолВыгрТиповЦен = КолВыгрТиповЦен + 1;			
		КонецЦикла;  
			
		// Выгружаем остатки по складам
		СписокОстатков = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ТабОстатков = Новый ТаблицаЗначений;
		ТабОстатков.Колонки.Добавить("Склад");
		ТабОстатков.Колонки.Добавить("Остаток");
		
		Для Каждого ЭлСклада Из сзСклады Цикл
			СписокОстатков.Сбросить();
			ТекСклад = ЭлСклада.Значение;
			СтрОст = ТабОстатков.Добавить();
			СтрОст.Склад   = ТекСклад;
			СтрОст.Остаток = 0;
			
			Если СписокОстатков.НайтиСледующий(ТекСклад) Тогда								
				СтрОст.Остаток = СписокОстатков.СвободныйОстаток;						
			КонецЕсли;
			
		КонецЦикла;
		
		КолВыгрСкладов = 0;
		
		Для Каждого СтрокаОст Из ТабОстатков Цикл   
			Если КолВыгрСкладов = 5 Тогда
				Прервать;
			КонецЕсли;			
			СтруктураПолей.Вставить("A03" + Строка(КолВыгрСкладов), СтрокаОст.Остаток);							
			КолВыгрСкладов = КолВыгрСкладов + 1;			
		КонецЦикла;   

		///////////////////////////
		
		Если ТекНоменклатура.Родитель <> Справочники.Номенклатура.ПустаяСсылка() И ТекНоменклатура.Родитель <> Null Тогда
			СтруктураПолей.Вставить("GrpId0", ТекНоменклатура.Родитель);
		КонецЕсли;
		
		//Если ТекНоменклатура.НоменклатурнаяГруппа <> Справочники.НоменклатурныеГруппы.ПустаяСсылка() И ТекНоменклатура.НоменклатурнаяГруппа <> Null Тогда
		//	СтруктураПолей.Вставить("GrpId1", ТекНоменклатура.НоменклатурнаяГруппа);
		//КонецЕсли;
		
		// Во втором параметре передается Ложь - это означает,
		// что не закрывает тег "Item", его закрытие производится ниже
		//ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
		ЗаписатьЭлементВДокументОбмена(СтруктураПолей, Ложь);
		
		КолТиповЦен = ВсегоТиповЦен - КолВыгрТиповЦен;
		КолСкладов  = ВсегоСкладов  - КолВыгрСкладов;
		
		ОтборКартинок = Новый Структура("ВладелецФайла", ТекНоменклатура);
		СписокКартинокОбъекта = Справочники.Файлы.Выбрать(, , ОтборКартинок);
		
		ЕстьКартинки = СписокКартинокОбъекта.Следующий();
		
		
		ОбщееУсловие = КолТиповЦен > 0 или КолСкладов > 0 или (ЕстьКартинки и флВыгружатьКартинкиВКПК); 
		
		Если ОбщееУсловие Тогда	   			
			
			//Заполняем табличные части справочника
			ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
			
			Если КолСкладов > 0 Тогда
				
				//Заполняем табличную часть остатков		
				ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
				
				ДобавитьПоле("GUID", "af0a6972-4bca-4652-a3cf-8ebc1ed1ee0d");
				
				ДобавитьПоле("Comment", "Табличная часть 'Остатки'");
				
				Цел10 = Цел(КолСкладов/5) + 1;
				
				Для СчЦел = 1 По Цел10 Цикл
					
					ОстСкладовТЧ = Мин(КолСкладов, 5);
					
					Если ОстСкладовТЧ <= 0 Тогда Продолжить; КонецЕсли;
					
					СтруктураПолей = Новый Структура;
					СтруктураПолей.Вставить("GUID",   Новый УникальныйИдентификатор());
					СтруктураПолей.Вставить("CtlgId", ТекНоменклатура);
					СтруктураПолей.Вставить("A06",    СчЦел);
					
					Для СчТЧ = 1 По ОстСкладовТЧ Цикл
						НомерСтроки = КолВыгрСкладов + СчТЧ - 1;
						Если НомерСтроки > ТабОстатков.Количество()-1 Тогда
							Прервать;
						КонецЕсли;
						СтрокаОстатка = ТабОстатков.Получить(НомерСтроки);
						ТекОстаток = 0;
						Если Не СтрокаОстатка = Неопределено Тогда
							ТекОстаток = СтрокаОстатка.Остаток;
						КонецЕсли;
						СтруктураПолей.Вставить("A0" + Строка(СчТЧ), ТекОстаток);							
					КонецЦикла;
					
					ЗаписатьЭлементВДокументОбмена(СтруктураПолей);		
					
					КолВыгрСкладов = КолВыгрСкладов + 5;
					
				КонецЦикла;				
				
				ДокОбмена.ЗаписатьКонецЭлемента(); //TABLE
				
			КонецЕсли;			
			
			Если КолТиповЦен > 0 Тогда
				
				// Заполняем табличную часть ценами
				ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
			
					ДобавитьПоле("GUID", "7f72aed2-94f7-4165-b112-c7a69fea70cc");
					
					ДобавитьПоле("Comment", "Табличная часть 'Цены'");
					
					Цел10 = Цел(КолТиповЦен/10) + 1;
					
					Для СчЦел = 1 По Цел10 Цикл
						
						ОстТиповЦенТЧ = Мин(КолТиповЦен, 10);
						
						Если ОстТиповЦенТЧ <= 0 Тогда Продолжить; КонецЕсли;
						
						СтруктураПолей = Новый Структура;
						СтруктураПолей.Вставить("GUID",   Новый УникальныйИдентификатор());
						СтруктураПолей.Вставить("CtlgId", ТекНоменклатура);
						СтруктураПолей.Вставить("A011",   СчЦел);
						
						Для СчТЧ = 1 По ОстТиповЦенТЧ Цикл   
							СтрокаТабЦен = тзКатегорииЦен.Получить(КолВыгрТиповЦен + СчТЧ - 1);
							Если Не СтрокаТабЦен = Неопределено Тогда
								ТекТипЦены = СтрокаТабЦен.ТипыЦен;    			
								ТекЦена = ПолучитьЦенуНоменклатуры(ТекНоменклатура, , ТекТипЦены, ТекущаяДата(), ЕдЦены, мВалютаРегламентированногоУчета);			
								СтруктураПолей.Вставить("A0" + Строка(СчТЧ), ТекЦена);							
							КонецЕсли;
						КонецЦикла;
						
						ЗаписатьЭлементВДокументОбмена(СтруктураПолей);									
						
					КонецЦикла;
							
				ДокОбмена.ЗаписатьКонецЭлемента(); //TABLE			
			
			КонецЕсли;
			
			Если ЕстьКартинки И флВыгружатьКартинкиВКПК Тогда		
			
				//Заполняем табличную часть картинок		
				ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
			
				ДобавитьПоле("GUID", "7f95b575-4ea8-442d-8d76-8e2bfcb0a89c");		
				
				ДобавитьПоле("Comment", "Табличная часть 'Картинки'");
				
				
				ОтборКартинок = Новый Структура("ВладелецФайла", ТекНоменклатура);
				СписокКартинокОбъекта = Справочники.Файлы.Выбрать(, , ОтборКартинок);
				
				Пока СписокКартинокОбъекта.Следующий() Цикл				
					
					РасширениеКартинок = "Все картинки (*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf)";
					Если Найти(РасширениеКартинок,СокрЛП(СписокКартинокОбъекта.ТекущаяВерсияРасширение)) = 0 тогда
						Продолжить;
					КонецЕсли;
					
					СтруктураПолей = Новый Структура;
					СтруктураПолей.Вставить("GUID",   СписокКартинокОбъекта.Ссылка.УникальныйИдентификатор());
					СтруктураПолей.Вставить("CtlgId", ТекНоменклатура);
					СтруктураПолей.Вставить("A01", 	  СписокКартинокОбъекта.Ссылка.УникальныйИдентификатор());
					ЗаписатьЭлементВДокументОбмена(СтруктураПолей);				
				КонецЦикла;
			
				ДокОбмена.ЗаписатьКонецЭлемента(); //TABLE
				
			КонецЕсли;
		
		ДокОбмена.ЗаписатьКонецЭлемента();     //TABLES
		
		КонецЕсли;
		
		// Закрываем тег ITEM, который был открыт при вызове
		// процедуры "ЗаписатьЭлементВДокументОбмена"
		ДокОбмена.ЗаписатьКонецЭлемента();     //ITEM
                                            
	КонецЦикла;
	
	ДокОбмена.ЗаписатьКонецЭлемента();          //ELEMENTS
	
	ДокОбмена.ЗаписатьКонецЭлемента();          // CATALOG
	
	РежимВыгрузкиОстатков = Константы.кпкРежимВыгрузкиОстатков.Получить();
	
	// В разрезе серий Тогда
	Если РежимВыгрузкиОстатков = 2 Тогда
		ОповеститьОСобытии("Выгрузка остатков в разрезе серий не поддерживается в приложении ""Мобильная торговля""!" + Символы.ПС + 
						   "Будет произведена выгрузка без учета разреза!");
	КонецЕсли;
	
	// Выгружаем сопутствующие данные
	Если Константы.ФункциональнаяОпцияИспользоватьХарактеристики.Получить() и РежимВыгрузкиОстатков = 1 Тогда		
		#Если Клиент Тогда
			Состояние("Выгрузка характеристик номенклатуры...");			
			ОбработкаПрерыванияПользователя();
		#КонецЕсли      
		ВыгрузитьХарактеристикиНоменклатуры();
	Иначе
		// Если не выгружаются характеристики, нужно передавать команду
		// на их очитску, если они были раньше выгружены
		ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");		
			ДобавитьПоле("GUID", "cc552c31-f7de-4259-a6e3-66ef765d3b43");									
			ДобавитьПоле("KILLALL", "1");                	                    			
		ДокОбмена.ЗаписатьКонецЭлемента();	
	КонецЕсли;
	
	#Если Клиент Тогда
		Состояние("Выгрузка единиц измерения...");			
		ОбработкаПрерыванияПользователя();
	#КонецЕсли
	
	ВыгрузитьЕдиницыИзмерения();		
	
КонецПроцедуры // ВыгрузитьНоменклатуру()

Процедура ВыгрузитьХарактеристикиНоменклатуры()
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
	ДобавитьПоле("GUID", "cc552c31-f7de-4259-a6e3-66ef765d3b43");
	
	ДобавитьПоле("Comment", "Справочник.ХарактеристикиНоменклатуры");
	
	// Очищаем все характеристики перед загрузкой их в БД МУ
	Если флОчищатьСправочникиПередЗагрузкой Тогда
		ДобавитьПоле("KILLALL", "1");                	
	КонецЕсли;	
	
	сзАссортимент = Новый Массив;
	сзСклады 	  = Новый СписокЗначений;
	
	сзАссортимент = СведенияАгента.Ассортимент.ТАссортимент.ВыгрузитьКолонку("Номенклатура");
	сзСклады.ЗагрузитьЗначения(СведенияАгента.СписокСкладов.Склады.ВыгрузитьКолонку("Склад"));		
	
	РежимВыгрузкиОстатков = Константы.кпкРежимВыгрузкиОстатков.Получить();
		
	Запрос = Новый Запрос(ПолучитьТекстЗапросаПоНоменклатуре(Истина));
	
	Запрос.УстановитьПараметр("Период", 	 ТекущаяДата());
	Запрос.УстановитьПараметр("Ассортимент", сзАссортимент);
	Запрос.УстановитьПараметр("Склады",      сзСклады);
	Запрос.УстановитьПараметр("ПустойЗаказ", Документы.ЗаказПокупателя.ПустаяСсылка());
		                                    
	Результат = Запрос.Выполнить();	
	
	ВыборкаНоменклатура = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВсегоТиповЦен = тзКатегорииЦен.Количество();	
	ВсегоСкладов  = сзСклады.Количество();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		ТекНоменклатура = ВыборкаНоменклатура.Номенклатура;

		Если ТекНоменклатура.ЭтоГруппа Тогда Продолжить; КонецЕсли;
		
		ВыборкаХарактеристика = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаХарактеристика.Следующий() Цикл
			
			ТекХарактеристика = ВыборкаХарактеристика.Ссылка;
			
			НаимХарактеристики = Строка(ТекХарактеристика);
			
			Если ТипЗнч(ТекХарактеристика) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
				Владелец = ТекХарактеристика;				
				Если Константы.кпкВыгружатьПолноеНазваниеХарактеристик.Получить() Тогда
					НаимХарактеристики = ТекХарактеристика.Владелец.Наименование + "(" + ТекХарактеристика.Наименование + ")";
				КонецЕсли;				
			Иначе
				Владелец = ТекНоменклатура;								
			КонецЕсли;    	
			
			ЕдЦены = ПолучитьБазовуюЕдиницу(ТекНоменклатура);	
			
			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Владелец);		
			СтруктураПолей.Вставить("Name", НаимХарактеристики);
			СтруктураПолей.Вставить("A02",  ТекНоменклатура);
			СтруктураПолей.Вставить("A04",  ВыборкаХарактеристика.СвободныйОстаток);
			СтруктураПолей.Вставить("A037", ЗначениеЗаполнено(ВыборкаХарактеристика.СвободныйОстаток));
			
			// Выгружаем цены в разрезе типов цен
			КолВыгрТиповЦен = 0;
			
			Для Каждого СтрокаТабЦен Из тзКатегорииЦен Цикл   
				Если КолВыгрТиповЦен = 10 Тогда
					Прервать;
				КонецЕсли;
				ТекТипЦены = СтрокаТабЦен.ТипыЦен;  
				ТекЦена = ПолучитьЦенуНоменклатуры(ТекНоменклатура, ТекХарактеристика, ТекТипЦены, ТекущаяДата(), ЕдЦены, мВалютаРегламентированногоУчета);			
				СтруктураПолей.Вставить("A02" + Строка(КолВыгрТиповЦен), ТекЦена);							
				КолВыгрТиповЦен = КолВыгрТиповЦен + 1;			
			КонецЦикла;  
			
			// Выгружаем остатки по складам
			СписокОстатков = ВыборкаХарактеристика.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			ТабОстатков = Новый ТаблицаЗначений;
			ТабОстатков.Колонки.Добавить("Склад");
			ТабОстатков.Колонки.Добавить("Остаток");
			
			Для Каждого ЭлСклада Из сзСклады Цикл
				СписокОстатков.Сбросить();
				ТекСклад = ЭлСклада.Значение;
				СтрОст = ТабОстатков.Добавить();
				СтрОст.Склад   = ТекСклад;
				СтрОст.Остаток = 0;
				Если СписокОстатков.НайтиСледующий(ТекСклад) Тогда								
					СтрОст.Остаток = СписокОстатков.СвободныйОстаток;						
				КонецЕсли;
			КонецЦикла;
			
			КолВыгрСкладов = 0;
			
			Для Каждого СтрокаОст Из ТабОстатков Цикл   
				Если КолВыгрСкладов = 5 Тогда
					Прервать;
				КонецЕсли;			
				СтруктураПолей.Вставить("A03" + Строка(КолВыгрСкладов), СтрокаОст.Остаток);							
				КолВыгрСкладов = КолВыгрСкладов + 1;			
			КонецЦикла;   
			
			// Во втором параметре передается Ложь - это означает,
			// что не закрывает тег "Item", его закрытие производится ниже		
			ЗаписатьЭлементВДокументОбмена(СтруктураПолей, Ложь);
			 			
			КолТиповЦен = ВсегоТиповЦен - КолВыгрТиповЦен;
			КолСкладов  = ВсегоСкладов  - КолВыгрСкладов;
			
			ОбщееУсловие = КолТиповЦен > 0 или КолСкладов > 0; 			
			
			Если ОбщееУсловие Тогда	   			
				
				//Заполняем табличные части справочника
				ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
				
				Если КолСкладов > 0 Тогда
				
				//Заполняем табличную часть остатков		
				ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
				
				ДобавитьПоле("GUID", "19481e88-8575-4720-80e6-222816c754e4");
				
				ДобавитьПоле("Comment", "Табличная часть 'Остатки'");
				
				Цел10 = Цел(КолСкладов/5) + 1;
				
				Для СчЦел = 1 По Цел10 Цикл
					
					ОстСкладовТЧ = Мин(КолСкладов, 5);
					
					Если ОстСкладовТЧ <= 0 Тогда Продолжить; КонецЕсли;
					
					СтруктураПолей = Новый Структура;
					СтруктураПолей.Вставить("GUID",   Новый УникальныйИдентификатор());
					СтруктураПолей.Вставить("CtlgId", Владелец);
					СтруктураПолей.Вставить("A06",    СчЦел);
					
					Для СчТЧ = 1 По ОстСкладовТЧ Цикл   
						НомерСтроки = КолВыгрСкладов + СчТЧ - 1;
						Если НомерСтроки > ТабОстатков.Количество()-1 Тогда
							Прервать;
						КонецЕсли;
						СтрокаОстатка = ТабОстатков.Получить(НомерСтроки);						
						ТекОстаток = 0;
						Если Не СтрокаОстатка = Неопределено Тогда
							ТекОстаток = СтрокаОстатка.Остаток;
						КонецЕсли;
						СтруктураПолей.Вставить("A0" + Строка(СчТЧ), ТекОстаток);							
					КонецЦикла;
					
					ЗаписатьЭлементВДокументОбмена(СтруктураПолей);									
					
					КолВыгрСкладов = КолВыгрСкладов + 5;									
					
				КонецЦикла;				
				
				ДокОбмена.ЗаписатьКонецЭлемента(); //TABLE
				
			КонецЕсли;			
			
			Если КолТиповЦен > 0 Тогда
				
				// Заполняем табличную часть ценами
				ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
			
					ДобавитьПоле("GUID", "d91732e1-d4d8-4566-9f4f-bb1b0a043e6f");
					
					ДобавитьПоле("Comment", "Табличная часть 'Цены'");
				
					Цел10 = Цел(КолТиповЦен/10) + 1;
					
					Для СчЦел = 1 По Цел10 Цикл
						
						ОстТиповЦенТЧ = Мин(КолТиповЦен, 10);
						
						Если ОстТиповЦенТЧ <= 0 Тогда Продолжить; КонецЕсли;
						
						СтруктураПолей = Новый Структура;
						СтруктураПолей.Вставить("GUID",   Новый УникальныйИдентификатор());
						СтруктураПолей.Вставить("CtlgId", Владелец);
						СтруктураПолей.Вставить("A011",   СчЦел);
						
						Для СчТЧ = 1 По ОстТиповЦенТЧ Цикл   
							СтрокаТабЦен = тзКатегорииЦен.Получить(КолВыгрТиповЦен + СчТЧ - 1);
							Если Не СтрокаТабЦен = Неопределено Тогда
								ТекТипЦены = СтрокаТабЦен.ТипыЦен;    			
								ТекЦена = ПолучитьЦенуНоменклатуры(ТекНоменклатура, ТекХарактеристика, ТекТипЦены, ТекущаяДата(), ЕдЦены, мВалютаРегламентированногоУчета);			
								СтруктураПолей.Вставить("A0" + Строка(СчТЧ), ТекЦена);							
							КонецЕсли;
						КонецЦикла;
						
						ЗаписатьЭлементВДокументОбмена(СтруктураПолей);									
						
					КонецЦикла;
							
				ДокОбмена.ЗаписатьКонецЭлемента(); //TABLE			
				
				КонецЕсли;
				
				ДокОбмена.ЗаписатьКонецЭлемента();     //TABLES			
				
			КонецЕсли;			
			
			// Закрыаем тег ITEM, который был открыт при вызове
			// процедуры "ЗаписатьЭлементВДокументОбмена"
			ДокОбмена.ЗаписатьКонецЭлемента();     //ITEM
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДокОбмена.ЗаписатьКонецЭлемента();         //ELEMENTS
	
	ДокОбмена.ЗаписатьКонецЭлемента();         //CATALOG
	
КонецПроцедуры //ВыгрузитьХарактеристикиНоменклатуры

Процедура ВыгрузитьЕдиницыИзмерения()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕдиницыИзмерения.Владелец КАК Номенклатура
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Владелец В ИЕРАРХИИ(&Ассортимент)
	|	И ЕдиницыИзмерения.Коэффициент = 1");
	
	Запрос.УстановитьПараметр("Ассортимент", сзАссортимент);
	
	//ТаблицаЭлементов = Запрос.Выполнить().Выгрузить();
	//МассивЭлементов = ТаблицаЭлементов.ВыгрузитьКолонку("Номенклатура");
	
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.ЕдиницаИзмерения.Наименование
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В ИЕРАРХИИ(&Ассортимент)
	|	И (НЕ Номенклатура.Ссылка В (&МассивЭлементов))
	|	И Номенклатура.ЭтоГруппа = ЛОЖЬ");
	
	
	//Запрос.УстановитьПараметр("Ассортимент", сзАссортимент);
	//Запрос.УстановитьПараметр("МассивЭлементов", МассивЭлементов);
	
	//ТаблицаЭлементов = Запрос.Выполнить().Выгрузить();
	
	//Для Каждого СтрокаТаблицаЭлементов Из ТаблицаЭлементов цикл
	//	
	//	ЕдиницаИзмеренияОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
	//	ЕдиницаИзмеренияОбъект.Владелец = СтрокаТаблицаЭлементов.Ссылка;
	//	ЕдиницаИзмеренияОбъект.Коэффициент = 1;
	//	ЕдиницаИзмеренияОбъект.Наименование = СтрокаТаблицаЭлементов.ЕдиницаИзмеренияНаименование;
	//	ЕдиницаИзмеренияОбъект.Записать();
	//	
	//КонецЦикла;
	
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕдиницыИзмерения.ЕдиницаИзмерения.Ссылка КАК Ссылка,
	|	ЕдиницыИзмерения.ЕдиницаИзмерения.Наименование КАК Наименование,
	|	ЕдиницыИзмерения.ЕдиницаИзмерения.ПометкаУдаления КАК ПометкаУдаления,
	|	ЕдиницыИзмерения.Ссылка КАК Номенклатура,
	|	1 КАК Коэффициент,
	|	ЕдиницыИзмерения.Вес КАК Вес
	|ИЗ
	|	Справочник.Номенклатура КАК ЕдиницыИзмерения
	|ГДЕ
	|   ЕдиницыИзмерения.ЭтоГруппа = Ложь
	|//	ЕдиницыИзмерения.Ссылка В ИЕРАРХИИ(&Ассортимент)");
	
	Запрос.УстановитьПараметр("Ассортимент", сзАссортимент);
	
	СписокЭлементов = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
		
		ДобавитьПоле("GUID", "80452c60-b442-4da9-a048-42f63270ca14");
		
		ДобавитьПоле("Comment", "Справочник.ЕдиницыИзмерения");
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
			Пока СписокЭлементов.Следующий() Цикл
			
				#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
				#КонецЕсли

				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(СписокЭлементов);	
				СтруктураПолей.Вставить("A03", 		 СписокЭлементов.Номенклатура);
				СтруктураПолей.Вставить("A02", 		 СписокЭлементов.Коэффициент);
				СтруктураПолей.Вставить("A04", 		 СписокЭлементов.Вес);
				ЗаписатьЭлементВДокументОбмена(СтруктураПолей);		
			КонецЦикла;
			
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
	
КонецПроцедуры //ВыгрузитьЕдиницыИзмерения

Процедура ВыгрузитьКонтактнуюИнформацию()
	
	Возврат;
	
	// Производим выгрузку контактной информации в один справочник
	// по всем объектам: контрагентам, торговым точкам и контактным лицам
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Ссылка КАК Ссылка,
	|	КонтактнаяИнформация.Тип КАК Тип,
	|	КонтактнаяИнформация.Вид КАК Вид,
	|	КонтактнаяИнформация.Представление КАК Представление,
	|	NULL КАК Адрес,
	|	NULL КАК Телефоны
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Ссылка В (&сзКлиенты)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КонтактнаяИнформация.Ссылка КАК Ссылка,
	|	КонтактнаяИнформация.Тип КАК Тип,
	|	КонтактнаяИнформация.Вид КАК Вид,
	|	КонтактнаяИнформация.Представление КАК Представление,
	|	NULL КАК Адрес,
	|	NULL КАК Телефоны
	|ИЗ
	|	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Ссылка.Владелец В (&сзКлиенты)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	кпкТорговыеТочки.Ссылка,
	|	NULL,
	|	NULL,
	|	NULL,
	|	кпкТорговыеТочки.Адрес,
	|	кпкТорговыеТочки.Телефоны
	|ИЗ
	|	Справочник.кпкТорговыеТочки КАК кпкТорговыеТочки
	|ГДЕ
	|	кпкТорговыеТочки.Ссылка В (&сзТорговыеТочки)");
	
	Запрос.УстановитьПараметр("сзКлиенты", 	      сзКлиентыАгента);
	Запрос.УстановитьПараметр("сзКонтактныеЛица", сзКонтактныеЛица);
	Запрос.УстановитьПараметр("сзТорговыеТочки",  сзТоргТочкиАгента);
	
	СписокЭлементов = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
		ДобавитьПоле("GUID", "85b62882-0156-4881-85ba-b8fef05c867b");
		
		ДобавитьПоле("Comment", "Справочник.КонтактнаяИнформация");
		
		// Передаем команду на удаление всех элементов перед загрузкой
		// всегда, иначе элементы будут всегда дозаписываться
		ДокОбмена.ЗаписатьАтрибут("KILLALL", "1");
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
			Пока СписокЭлементов.Следующий() Цикл
			
			    #Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
				#КонецЕсли  
				
			    ТекОбъект = СписокЭлементов.Ссылка;
				
				СтруктураПолей = Новый Структура;
				СтруктураПолей.Вставить("GUID", 	 Новый УникальныйИдентификатор());				
				СтруктураПолей.Вставить("IsDeleted", Ложь);
				
				Если ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.кпкТорговыеТочки") Тогда
					
					СтруктураПолей.Вставить("A02",СписокЭлементов.Ссылка);
					
					Если ЗначениеЗаполнено(СписокЭлементов.Адрес) Тогда  						
						СтруктураПолей.Вставить("A04", ТипыКонтактнойИнформации[Перечисления.ТипыКонтактнойИнформации.Адрес]);
						СтруктураПолей.Вставить("A05", Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
						СтруктураПолей.Вставить("A06", СписокЭлементов.Адрес);						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СписокЭлементов.Телефоны) Тогда						
						СтруктураПолей.Вставить("A04", ТипыКонтактнойИнформации[Перечисления.ТипыКонтактнойИнформации.Телефон]);
						СтруктураПолей.Вставить("A05", Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
						СтруктураПолей.Вставить("A06", СписокЭлементов.Телефоны);						
					КонецЕсли; 
										
				Иначе	
					
					Если ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.Контрагенты") Тогда
						СтруктураПолей.Вставить("A01", СписокЭлементов.Ссылка);
					ИначеЕсли ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
						СтруктураПолей.Вставить("A03", СписокЭлементов.Ссылка);					
					КонецЕсли;				 
					СтруктураПолей.Вставить("A04", ТипыКонтактнойИнформации[СписокЭлементов.Тип]);
					СтруктураПолей.Вставить("A05", СписокЭлементов.Вид);
					СтруктураПолей.Вставить("A06", СписокЭлементов.Представление);
					
				КонецЕсли;		
				
				ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
				
			КонецЦикла;
	
		ДокОбмена.ЗаписатьКонецЭлемента();  //ELEMENTS 
		
	ДокОбмена.ЗаписатьКонецЭлемента();      //CATALOG
	
КонецПроцедуры

Процедура ВыгрузитьВзаиморасчеты()
	
	РежимВыгрузкиДолгов = Константы.кпкРежимВыгрузкиДолгов.Получить();
	
	ИмяРегистра  = "ВзаиморасчетыСПокупателями";
	ИмяИзмерения = "КредитныйДокумент"; 
	
	ТекстУсловияДоговоров = "";
	Если ТаблицаДоговоровАгента.Количество() <> 0 Тогда
		ТекстУсловияДоговоров = " ДоговорКонтрагента В ИЕРАРХИИ (&СписокДоговоров)";
	Иначе
		ТекстУсловияДоговоров = " Контрагент В (&СписокКлиентов)";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Организация КАК Организация,
	|	ВложенныйЗапрос.Контрагент КАК Контрагент,
	|	ВложенныйЗапрос.Сделка КАК Сделка,
	|	ВложенныйЗапрос.Долг КАК Долг,
	|	ВложенныйЗапрос.Договор КАК Договор
	|ИЗ
	|	(ВЫБРАТЬ
	|		РегистрВзаиморасчетов.Организация КАК Организация,
	|		РегистрВзаиморасчетов.Контрагент КАК Контрагент,
	|		РегистрВзаиморасчетов." + ИмяИзмерения + " КАК Сделка,
	|		СУММА(РегистрВзаиморасчетов.СуммаОстаток) КАК Долг,
	|		МИНИМУМ(РегистрВзаиморасчетов.Договор) КАК Договор
	|	ИЗ
	|		РегистрНакопления." + ИмяРегистра + ".Остатки(&ДатаКон," + ТекстУсловияДоговоров + " И ТипРасчетов = &ТипРасчетов) КАК РегистрВзаиморасчетов  	
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РегистрВзаиморасчетов.Организация,
	|		РегистрВзаиморасчетов.Контрагент,
	|		РегистрВзаиморасчетов." + ИмяИзмерения + ") КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.Долг > 0
	|ИТОГИ
	|	СУММА(Долг)
	|ПО
	|	Организация,
	|	Контрагент";
	
	//Запрос = Новый Запрос(ТекстЗапроса);
	//Запрос.УстановитьПараметр("ДатаКон",     	 ТекущаяДата());	
	//Запрос.УстановитьПараметр("СписокКлиентов",  сзКлиентыАгента);
	//Запрос.УстановитьПараметр("СписокДоговоров", ТаблицаДоговоровАгента.ВыгрузитьКолонку("Договор"));
	//Запрос.УстановитьПараметр("ТипРасчетов", 	Перечисления.ТипыРасчетов.Долг);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ПоступлениеДенегВедомость.Дата) КАК Дата
		|ИЗ
		|	Документ.ПоступлениеДенегВедомость КАК ПоступлениеДенегВедомость
		|ГДЕ
		|	ПоступлениеДенегВедомость.Маршрут = &Менеджер
		|	И ПоступлениеДенегВедомость.Проведен = ИСТИНА");
	
	Запрос.УстановитьПараметр("Менеджер", ВыбАгент.Менеджер);
	Результат = Запрос.Выполнить();

	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
		
	Если ЗначениеЗаполнено(Выборка.Дата) Тогда	
		ДатаПоследнейВедомости = КонецДня(Выборка.Дата) + 1;
	Иначе
		ДатаПоследнейВедомости = НачалоМесяца(ТекущаяДата());
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Контрагент КАК Контрагент,
	|	ВложенныйЗапрос.КредДокумент КАК Сделка,
	|	ВложенныйЗапрос.Долг КАК Долг
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВзаиморасчетыСПокупателямиОстатки.Контрагент КАК Контрагент,
	|		ВзаиморасчетыСПокупателямиОстатки.КредитныйДокумент КАК КредДокумент,
	|		ВзаиморасчетыСПокупателямиОстатки.СуммаОстаток КАК Долг
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыСПокупателями.Остатки(
	|				,
	|				Менеджер = &Менеджер
	|					И Подразделение = &Подразделение) КАК ВзаиморасчетыСПокупателямиОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КпкКасса.Контрагент,
	|		КпкКасса.Сделка,
	|		-1 * КпкКасса.СуммаДокумента
	|	ИЗ
	|		Документ.КпкКасса КАК КпкКасса
	|	ГДЕ
	|		КпкКасса.Проведен = ИСТИНА
	|		И КпкКасса.Дата >= &ДатаПоследнейВедомости
	|		И КпкКасса.Агент = &Агент) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.Контрагент.Наименование,
	|	Сделка
	|ИТОГИ
	|	СУММА(Долг)
	|ПО
	|	Контрагент,
	|	Сделка");
				   
	Запрос.УстановитьПараметр("Менеджер", 				ВыбАгент.Менеджер);
	Запрос.УстановитьПараметр("Агент", 					ВыбАгент);
	Запрос.УстановитьПараметр("Подразделение", 			Подразделение);
	Запрос.УстановитьПараметр("НомерКоманды", 			ВыбАгент.Менеджер.НомерКоманды);
	Запрос.УстановитьПараметр("ДатаПоследнейВедомости", ДатаПоследнейВедомости);

	
	РезультатЗапроса = Запрос.Выполнить();
	
	//ВыборкаОрганизация = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Структура тега
	КоличествоЦен = 0;
	
	ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENT");
	
		ДобавитьПоле("GUID", "a93aadfa-2a35-40fe-b88a-3768825cdd31");
		ДобавитьПоле("Comment", "Документ.Долг");
		
		// Удаляем все документы перед загрузкой
		ДокОбмена.ЗаписатьАтрибут("KILLALL", "1");
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
		//Пока ВыборкаОрганизация.Следующий() Цикл
			
			//Фирма = ВыборкаОрганизация.Организация;
					
			//ВыборкаКлиент = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ВыборкаКлиент = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаКлиент.Следующий() Цикл
				
				#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
				#КонецЕсли
			
				Клиент 	  = ВыборкаКлиент.Контрагент;
				
				КолвоПросроченоНакладных 	= 0;
				ПревышенСрокКредита 		= Ложь;
				
				ВыборкаДок = ВыборкаКлиент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
							
				Пока ВыборкаДок.Следующий() Цикл  
					
					ТекДата      = НачалоДня(ТекущаяДата());					
					Док          = ВыборкаДок.Сделка;
					ДокДолг      = ВыборкаДок.Долг;  
					Договор      = "";
					ТоргТочка    = Справочники.кпкТорговыеТочки.ПустаяСсылка();
					КредДок      = "";
					КатегирияДок = "";   					
					СуммаДок 	 = ДокДолг;												
					
					Если НЕ ЗначениеЗаполнено(Док) Тогда
						Продолжить;
					ИначеЕсли ДокДолг = 0 Тогда	
						// будем выгружать нулевой долг....это -кпкКасса
					ИначеЕсли ДокДолг < 10 Тогда
						Продолжить;
					КонецЕсли;
					
					Фирма = Док.Организация;
					
					// Когда взаиморасчеты с контрагентом ведутся по договорам
					Если НЕ ЗначениеЗаполнено(Док) Тогда 									
						ДатаВремяДок     = ТекДата;
						Комментарий      = "Долг по договору";
						ПредставлениеДок = кпкАгентПлюс.УбратьНечитаемыеСимволы(ВыборкаДок.Договор.Наименование);
						СрокДок 	  	 = ТекДата;   
						//СуммаДок 	     = ДокДолг;												
					// Когда взаиморасчеты с контрагентом ведутся по документам (сделки или  
					// документы расчетов, в зависимости от константы "РежимВыгрузкиДолгов")	
					Иначе     					
						КредДок   = Док;
					
						Если КредДок.Пустая() Тогда
							Продолжить;
						КонецЕсли;
						
						Если ИспТочек Тогда   						
							МетаданныеТоргТочка = КредДок.Метаданные().Реквизиты.Найти("кпкТорговаяТочка");												
							Если МетаданныеТоргТочка <> Неопределено Тогда
								ДокТоргТочка = КредДок.кпкТорговаяТочка;
								Если НЕ ДокТоргТочка.Пустая() Тогда
									ТоргТочка = ДокТоргТочка;
								КонецЕсли;						
							КонецЕсли; 							
						КонецЕсли;
						
						НомерДок       	 = СокрЛП(КредДок.Номер);
						ДатаВремяДок  	 = КредДок.Дата;
						Комментарий   	 = кпкАгентПлюс.УбратьНечитаемыеСимволы(КредДок.Комментарий);
						СостДок 	     = ?(КредДок.Проведен, "1", "2");					
						//СуммаДок 	  	 = 0;  
						
						ПредставлениеДок = КредДок.Метаданные().Представление();
						
						
						СостДокВЦБД = Строка(кпкАгентПлюс.АПВернутьСостояниеДок(КредДок) + 8);	
											
						ДатаОплаты = КредДок.Метаданные().Реквизиты.Найти("ДатаОплаты");
						
						Если ДатаОплаты = Неопределено Тогда				
							СрокДок = НачалоДня(КредДок.Дата + (КредДок.Контрагент.СрокОплаты + 7)*24*60*60);
						Иначе				
							СрокДок = НачалоДня(КредДок.ДатаОплаты);
						КонецЕсли; 
						
						// проверим стоп отгрузку
						Если (СрокДок <= НачалоДня(ТекущаяДата()) ) И НЕ(ДокДолг = 0) Тогда
							КолвоПросроченоНакладных = КолвоПросроченоНакладных + 1;
						КонецЕсли;
						
						Если (СрокДок <= НачалоДня(ТекущаяДата()) ) И НЕ(ДокДолг = 0) Тогда
							ПревышенСрокКредита = Истина;
						КонецЕсли;
						
						// Ищем в справочнике категорий нужную категорию для документа
						КатегирияДок = ВернутьКодКатегорииДокумента(КредДок, Истина);
															
					КонецЕсли;	
					
					//Если СрокДок > ТекДата Тогда
					//	Продолжить;
					//КонецЕсли;
					
					Если ЗначениеЗаполнено(Док) Тогда 									
						СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейДокумента(Док);
					Иначе
						ТекДокумент = Новый Структура("Дата, ПометкаУдаления, Проведен", ДатаВремяДок, Ложь, Истина);
						СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейДокумента(ТекДокумент, Истина);
					КонецЕсли;
					
					СтруктураПолей.Вставить("A01", 		 КатегирияДок);
					СтруктураПолей.Вставить("A02", 		 Фирма);
					СтруктураПолей.Вставить("A03", 		 Клиент);
					СтруктураПолей.Вставить("A04", 		 ТоргТочка);
					СтруктураПолей.Вставить("A05", 		 Договор);
					СтруктураПолей.Вставить("A06", 		 СрокДок);
					СтруктураПолей.Вставить("A07", 		 СуммаДок);
					СтруктураПолей.Вставить("A08", 		 Комментарий);
					
					ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
					
				КонецЦикла;
				
				СтатусКлиента = ?((КолвоПросроченоНакладных>=10) или (ПревышенСрокКредита=1),"2","0");
				
			КонецЦикла;  
			
		//КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента();  //ELEMENTS 
	
	ДокОбмена.ЗаписатьКонецЭлемента();      //DOCUMENT
	
КонецПроцедуры //ВыгрузкаВзаиморасчетов()

Процедура ВыгрузитьПосещения()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Посещение.Ссылка КАК Док,
	|	кпкСведенияДокумента.Агент,
	|	кпкСведенияДокумента.кпкГПСШирота КАК Широта,
	|	кпкСведенияДокумента.кпкГПСДолгота КАК Долгота,
	|	кпкСведенияДокумента.Категория
	|ИЗ
	|	Документ.кпкПосещение КАК Посещение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.кпкСведенияДокумента КАК кпкСведенияДокумента
	|		ПО Посещение.Ссылка = кпкСведенияДокумента.КПКДокумент
	|ГДЕ
	|	кпкСведенияДокумента.ДатаВремяСоздания МЕЖДУ &НачПериода И &КонПериода
	|	И кпкСведенияДокумента.Агент = &Агент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Посещение.МоментВремени";
	
	ИнтервалПодтверждения = Константы.кпкИнтервалВыгрузкиЗаказов.Получить();
	
	Запрос = Новый Запрос(ТекстЗапроса);
		
	Запрос.УстановитьПараметр("НачПериода", ТекущаяДата() - (86400 * ИнтервалПодтверждения));
	Запрос.УстановитьПараметр("КонПериода", ТекущаяДата());
	Запрос.УстановитьПараметр("Агент", 	    ВыбАгент);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДок = Результат.Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENT");
	
		ДобавитьПоле("GUID", "9f147c59-5ee8-4550-8289-12ecfe5d0617");
		
		ДобавитьПоле("Comment", "Документ.Посещение");
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
			Пока ВыборкаДок.Следующий() Цикл  
				
				#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
				#КонецЕсли
				
				Док = ВыборкаДок.Док;
				
				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейДокумента(Док);
				
				СтруктураПолей.Вставить("DocNumber", Док.Номер);					
				СтруктураПолей.Вставить("A01",  	 Док.Организация);
				СтруктураПолей.Вставить("A02",  	 Док.Контрагент);
				СтруктураПолей.Вставить("A03",  	 Док.ТорговаяТочка);
				СтруктураПолей.Вставить("A04",  	 Док.Результат);
				СтруктураПолей.Вставить("A05",  	 Док.Комментарий);
				СтруктураПолей.Вставить("A06",  	 ВыборкаДок.Категория);
				СтруктураПолей.Вставить("A07",  	 ВыборкаДок.Широта);
				СтруктураПолей.Вставить("A08",  	 ВыборкаДок.Долгота);
								
				Если Док.Вопросы.Количество() > 0 Тогда 
				
					// Во втором параметре передается Ложь - это означает,
					// что не закрывает тег "Item", его закрытие производится ниже		
					ЗаписатьЭлементВДокументОбмена(СтруктураПолей, Ложь);
					
					ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
						
						ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
					
						ДобавитьПоле("GUID", "99f6a8ce-3046-4782-ab5e-557f40243749");
						
						ДобавитьПоле("Comment", "Табличная часть 'Вопросы'");
						
						Для Каждого СтрокаТаб Из Док.Вопросы Цикл				
							СтруктураПолей = Новый Структура;
							СтруктураПолей.Вставить("GUID",  Новый УникальныйИдентификатор());
							СтруктураПолей.Вставить("DocId", Док);
							СтруктураПолей.Вставить("A01",   СтрокаТаб.Вопрос);
							СтруктураПолей.Вставить("A02",   СтрокаТаб.Ответ);
							ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
						КонецЦикла;
												
						ДокОбмена.ЗаписатьКонецЭлемента();  //TABLE
									
					ДокОбмена.ЗаписатьКонецЭлемента();  //TABLES
				
					// Закрыаем тег ITEM, который был открыт при вызове
					// процедуры "ЗаписатьЭлементВДокументОбмена"
					ДокОбмена.ЗаписатьКонецЭлемента();  //ITEM
					
				Иначе
					
					ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
					
				КонецЕсли;
			
			КонецЦикла;
			
		ДокОбмена.ЗаписатьКонецЭлемента();  // ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента();      // DOCUMENT
	
КонецПроцедуры

Процедура ВыгрузитьРасходныеНакладные()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РасходнаяНакладная.Ссылка КАК Док
	|ИЗ
	|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
	|ГДЕ
	|	РасходнаяНакладная.Дата МЕЖДУ &НачПериода И &КонПериода
	|	И РасходнаяНакладная.Менеджер = &Менеджер
	|	//И 1 = 2
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасходнаяНакладная.МоментВремени");
	
	ИнтервалЗаказов = Константы.кпкИнтервалВыгрузкиЗаказов.Получить();
	
		
	Запрос.УстановитьПараметр("НачПериода", ТекущаяДата() - (86400 * ИнтервалЗаказов));
	Запрос.УстановитьПараметр("КонПериода", ТекущаяДата());
	Запрос.УстановитьПараметр("Менеджер",   ВыбАгент.Менеджер);
	
	Результат = Запрос.Выполнить();
	
	//тз = Результат.Выгрузить();
	//сообщить(тз.Количество());
	
	ВыборкаДок = Результат.Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENT");
	
		ДобавитьПоле("GUID", "7FFB418C-73C9-4883-91C5-827FA5145A3A");
		
		ДобавитьПоле("Comment", "Документ.Реализация");
		
		Если 1=2 Тогда
			ДобавитьПоле("KILLALL", "1");
		КонецЕсли;
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
			Пока ВыборкаДок.Следующий() Цикл  
				
				#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
				#КонецЕсли
				
				Док = ВыборкаДок.Док;
				
				//КодТипаЦены = ПолучитьКодТипаЦены(Док.ВидЦен, Док);
				
				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейДокумента(Док);
				
				ОбщийВес = 0;
				
				СтруктураПолей.Вставить("DocNumber", Док.Номер);					
				//СтруктураПолей.Вставить("A00", 		 ПолучитьСтатусЦБД(Док));
				СтруктураПолей.Вставить("A01",  	 Док.Организация);
				СтруктураПолей.Вставить("A02",  	 Док.Контрагент);
				//СтруктураПолей.Вставить("A04",  	 Док.кпкТорговаяТочка);
				//СтруктураПолей.Вставить("A05",  	 Док.Договор);
				//Если Не ПустаяСтрока(КодТипаЦены) Тогда
				//	СтруктураПолей.Вставить("A07",  	 Док.ТипЦен);
				//КонецЕсли;
				СтруктураПолей.Вставить("A07",  	 Док.СуммаДокумента);
				//СтруктураПолей.Вставить("A08",  	 ОбщийВес);
				//СтруктураПолей.Вставить("A010",  	 Док.ДатаОтгрузки);
				СтруктураПолей.Вставить("A09",  	 Док.Комментарий);
				//СтруктураПолей.Вставить("A012",  	 ВыборкаДок.Категория);
				//СтруктураПолей.Вставить("A014",  	 ВыборкаДок.Широта);
				//СтруктураПолей.Вставить("A015",  	 ВыборкаДок.Долгота);
								
				Если Док.Запасы.Количество() > 0 Тогда 
				
					// Во втором параметре передается Ложь - это означает,
					// что не закрывает тег "Item", его закрытие производится ниже		
					ЗаписатьЭлементВДокументОбмена(СтруктураПолей, Ложь);
					
					ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
						
						ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
					
						ДобавитьПоле("GUID", "E4D61E0A-1D62-48D7-B70C-BCBA935D377A");
						
						ДобавитьПоле("Comment", "Табличная часть 'Запасы'");                	
						
						Для Каждого СтрокаТаб Из Док.Запасы	Цикл				
							СтруктураПолей = Новый Структура;
							СтруктураПолей.Вставить("GUID",  Новый УникальныйИдентификатор());
							СтруктураПолей.Вставить("DocId", Док);
							СтруктураПолей.Вставить("A01",   СтрокаТаб.Номенклатура);
							//СтруктураПолей.Вставить("A02",   СтрокаТаб.Характеристика);
							СтруктураПолей.Вставить("A03",   СтрокаТаб.ЕдиницаИзмерения);
							СтруктураПолей.Вставить("A04",   СтрокаТаб.Количество);
							СтруктураПолей.Вставить("A05",   СтрокаТаб.Цена);
							СтруктураПолей.Вставить("A06",   СтрокаТаб.Сумма);
							СтруктураПолей.Вставить("A09",   СтрокаТаб.ПроцентСкидки);
							СтруктураПолей.Вставить("A012",  СтрокаТаб.Скидка);
							СтруктураПолей.Вставить("A07",   СтрокаТаб.СуммаНДС);
							СтруктураПолей.Вставить("A08",   0);                    //вес
							//СтруктураПолей.Вставить("A010",  СтрокаТаб.СтавкаНДС.Ставка);
							//Если ЗначениеЗаполнено(Док.СтруктурнаяЕдиницаРезерв) Тогда
							//	СтруктураПолей.Вставить("A011",  Док.СтруктурнаяЕдиницаРезерв);
							//КонецЕсли;   
							
							ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
						КонецЦикла;
						
						ДокОбмена.ЗаписатьКонецЭлемента();  //TABLE
									
					ДокОбмена.ЗаписатьКонецЭлемента();  //TABLES
				
					// Закрыаем тег ITEM, который был открыт при вызове
					// процедуры "ЗаписатьЭлементВДокументОбмена"
					ДокОбмена.ЗаписатьКонецЭлемента();  //ITEM
					
				Иначе
					
					ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
					
				КонецЕсли;
			
			КонецЦикла;
			
		ДокОбмена.ЗаписатьКонецЭлемента();  // ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента();      // DOCUMENT	
КонецПроцедуры

Процедура ВыгрузитьЗаказыПокупателей()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Заказ.Ссылка КАК Док,
	|	кпкСведенияДокумента.Агент,
	|	кпкСведенияДокумента.кпкГПСШирота КАК Широта,
	|	кпкСведенияДокумента.кпкГПСДолгота КАК Долгота,
	|	кпкСведенияДокумента.Категория
	|ИЗ
	|	Документ.ЗаказПокупателя КАК Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.кпкСведенияДокумента КАК кпкСведенияДокумента
	|		ПО Заказ.Ссылка = кпкСведенияДокумента.КПКДокумент
	|ГДЕ
	|	кпкСведенияДокумента.ДатаВремяСоздания МЕЖДУ &НачПериода И &КонПериода
	|	И кпкСведенияДокумента.Агент = &Агент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Заказ.МоментВремени";
	
	ИнтервалЗаказов = Константы.кпкИнтервалВыгрузкиЗаказов.Получить();
	
	Запрос = Новый Запрос(ТекстЗапроса);
		
	Запрос.УстановитьПараметр("НачПериода", ТекущаяДата() - (86400 * ИнтервалЗаказов));
	Запрос.УстановитьПараметр("КонПериода", ТекущаяДата());
	Запрос.УстановитьПараметр("Агент", 	    ВыбАгент);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДок = Результат.Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENT");
	
		ДобавитьПоле("GUID", "e01e1f5c-d6e4-46e8-b923-3758b0d79bde");
		
		ДобавитьПоле("Comment", "Документ.ЗаказПокупателя");
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
			Пока ВыборкаДок.Следующий() Цикл  
				
				#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
				#КонецЕсли
				
				Док = ВыборкаДок.Док;
				
				КодТипаЦены = ПолучитьКодТипаЦены(Док.ВидЦен, Док);
				
				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейДокумента(Док);
				
				ОбщийВес = 0;
				
				СтруктураПолей.Вставить("DocNumber", Док.Номер);					
				СтруктураПолей.Вставить("A01", 		 ПолучитьСтатусЦБД(Док));
				СтруктураПолей.Вставить("A02",  	 Док.Организация);
				СтруктураПолей.Вставить("A03",  	 Док.Контрагент);
				СтруктураПолей.Вставить("A04",  	 Док.кпкТорговаяТочка);
				СтруктураПолей.Вставить("A05",  	 Док.Договор);
				Если Не ПустаяСтрока(КодТипаЦены) Тогда
					СтруктураПолей.Вставить("A07",  	 Док.ВидЦен);
				КонецЕсли;
				СтруктураПолей.Вставить("A08",  	 Док.СуммаДокумента);
				СтруктураПолей.Вставить("A09",  	 ОбщийВес);
				СтруктураПолей.Вставить("A010",  	 Док.ДатаОтгрузки);
				СтруктураПолей.Вставить("A011",  	 Док.Комментарий);
				СтруктураПолей.Вставить("A012",  	 ВыборкаДок.Категория);
				СтруктураПолей.Вставить("A014",  	 ВыборкаДок.Широта);
				СтруктураПолей.Вставить("A015",  	 ВыборкаДок.Долгота);
								
				Если Док.Запасы.Количество() > 0 Тогда 
				
					// Во втором параметре передается Ложь - это означает,
					// что не закрывает тег "Item", его закрытие производится ниже		
					ЗаписатьЭлементВДокументОбмена(СтруктураПолей, Ложь);
					
					ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
						
						ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
					
						ДобавитьПоле("GUID", "0738e61b-f06f-464a-8483-4249e0254819");
						
						ДобавитьПоле("Comment", "Табличная часть 'Запасы'");                	
						
						Для Каждого СтрокаТаб Из Док.Запасы	Цикл				
							СтруктураПолей = Новый Структура;
							СтруктураПолей.Вставить("GUID",  Новый УникальныйИдентификатор());
							СтруктураПолей.Вставить("DocId", Док);
							СтруктураПолей.Вставить("A01",   СтрокаТаб.Номенклатура);
							СтруктураПолей.Вставить("A02",   СтрокаТаб.Характеристика);
							СтруктураПолей.Вставить("A03",   СтрокаТаб.ЕдиницаИзмерения);
							СтруктураПолей.Вставить("A04",   СтрокаТаб.Количество);
							СтруктураПолей.Вставить("A05",   СтрокаТаб.Цена);
							СтруктураПолей.Вставить("A06",   СтрокаТаб.Всего);
							СтруктураПолей.Вставить("A09",   СтрокаТаб.ПроцентСкидкиНаценки);
							СтруктураПолей.Вставить("A012",  (СтрокаТаб.Количество*СтрокаТаб.Цена) - СтрокаТаб.Сумма);
							СтруктураПолей.Вставить("A07",   СтрокаТаб.СуммаНДС);
							СтруктураПолей.Вставить("A08",   0);                    //вес
							СтруктураПолей.Вставить("A010",  СтрокаТаб.СтавкаНДС.Ставка);
							Если ЗначениеЗаполнено(Док.СтруктурнаяЕдиницаРезерв) Тогда
								СтруктураПолей.Вставить("A011",  Док.СтруктурнаяЕдиницаРезерв);
							КонецЕсли;   
							
							ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
						КонецЦикла;
						
						ДокОбмена.ЗаписатьКонецЭлемента();  //TABLE
									
					ДокОбмена.ЗаписатьКонецЭлемента();  //TABLES
				
					// Закрыаем тег ITEM, который был открыт при вызове
					// процедуры "ЗаписатьЭлементВДокументОбмена"
					ДокОбмена.ЗаписатьКонецЭлемента();  //ITEM
					
				Иначе
					
					ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
					
				КонецЕсли;
			
			КонецЦикла;
			
		ДокОбмена.ЗаписатьКонецЭлемента();  // ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента();      // DOCUMENT
	
КонецПроцедуры //ВыгрузитьЗаказыПокупателей

Процедура ВыгрузитьМаршрутыАгента() Экспорт
	
	ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENT");
	
	ДобавитьПоле("GUID", "43920fa1-745d-4499-84af-7000672ceeff");
	
	ДобавитьПоле("Comment", "Документ.Маршрут");                	
	
	// Очищаем все маршруты перед загрузкой их в БД МУ
	ДобавитьПоле("KILLALL", "1");
	
	Если ЗначениеЗаполнено(ПланПосещений) Тогда	
		ДатаНачала    = НачалоДня(ПланПосещений.Дата);
		ДатаОкончания = КонецДня(ДатаНачала + (ПланПосещений.ИнтервалПланирования - 1)*86400);
	Иначе
		ДатаНачала    = НачалоМесяца(ТекущаяДата());
		ДатаОкончания = КонецМесяца(ТекущаяДата());
	КонецЕсли;
	
	ТекДата = ДатаНачала;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Агент", ВыбАгент);
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	Пока ТекДата < ДатаОкончания Цикл
		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		Выборка = Документы.кпкМаршрут.Выбрать(НачалоДня(ТекДата), КонецДня(ТекДата), СтруктураОтбора, "Дата Убыв");
		
		Если Выборка.Следующий() Тогда
			
			Если Выборка.Проведен и Не Выборка.ДокОснование.ПометкаУдаления Тогда
				ТекМаршрут 	   = Новый Структура("Дата, ПометкаУдаления, Проведен", ТекДата, Ложь, Истина);
				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейДокумента(ТекМаршрут, Истина);
				//СтруктураПолей.Вставить("A01",  НачалоДня(Выборка.Дата));
				ЗаписатьЭлементВДокументОбмена(СтруктураПолей, Ложь);
				// Заполняем табличные части справочника
				ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
				
				// Заполняем табличную часть контрагентов маршрута		
				ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
				
				ДобавитьПоле("GUID", "ed832712-a167-4b9e-87f1-5127e6f70814");
				
				ДобавитьПоле("Comment", "Табличная часть 'Точки маршрута'");										
				
				ИдВладельца = СтруктураПолей.GUID;
				Для Каждого Стр Из Выборка.СписокПосещений Цикл					
					
					СтруктураПолей = Новый Структура;
					СтруктураПолей.Вставить("GUID",   Новый УникальныйИдентификатор());
					СтруктураПолей.Вставить("DocId",  ИдВладельца);
					Если ЗначениеЗаполнено(Стр.Контрагент) Тогда
						СтруктураПолей.Вставить("A01", 	  Стр.Контрагент);
					КонецЕсли;
					Если ЗначениеЗаполнено(Стр.ТорговаяТочка) Тогда
						СтруктураПолей.Вставить("A02", 	  Стр.ТорговаяТочка);	
					КонецЕсли;                                               					
					Если ЗначениеЗаполнено(Стр.Время) Тогда
						СтруктураПолей.Вставить("A03", Формат(Стр.Время, "ДФ=HH:mm"));
					КонецЕсли;                                            										
					СтруктураПолей.Вставить("A04", 	  Стр.Напоминание);
					ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
					
				КонецЦикла;
				ДокОбмена.ЗаписатьКонецЭлемента(); //TABLE
				ДокОбмена.ЗаписатьКонецЭлемента(); //TABLES
				ДокОбмена.ЗаписатьКонецЭлемента(); //ITEM
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(ПланПосещений) Тогда	
			
			Смещение = (НачалоДня(ТекДата) - НачалоДня(ПланПосещений.Дата))/86400;
			
			Если Смещение < 0 Тогда
				ТекДата = ТекДата + 86400;
				Продолжить;				
			КонецЕсли;
			
			ТекМаршрут 	   = Новый Структура("Дата, ПометкаУдаления, Проведен", ТекДата, Ложь, Истина);
			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейДокумента(ТекМаршрут, Истина);
			//СтруктураПолей.Вставить("A01",  НачалоДня(Выборка.Дата));
			ЗаписатьЭлементВДокументОбмена(СтруктураПолей, Ложь);
			// Заполняем табличные части справочника
			ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
			
			// Заполняем табличную часть контрагентов маршрута		
			ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
			
			ДобавитьПоле("GUID", "ed832712-a167-4b9e-87f1-5127e6f70814");
			
			ДобавитьПоле("Comment", "Табличная часть 'Точки маршрута'");
			
			ИдВладельца = СтруктураПолей.GUID;
			Для Каждого Стр Из ПланПосещений.Дни Цикл
				Если Вычислить("Стр.Д" + (1 + Смещение)) Тогда					
					Время = кпкАгентПлюс.ДатаВремяВФорматXMLИз1С(ТекДата, "Дата");					
					СтруктураПолей = Новый Структура;
					СтруктураПолей.Вставить("GUID",   Новый УникальныйИдентификатор());
					СтруктураПолей.Вставить("DocId",  ИдВладельца);
					СтруктураПолей.Вставить("A01", 	  Стр.Контрагент);
					СтруктураПолей.Вставить("A02", 	  Стр.ТорговаяТочка);
					//СтруктураПолей.Вставить("A03", 	  Время);
					ЗаписатьЭлементВДокументОбмена(СтруктураПолей);					
				КонецЕсли;
			КонецЦикла;
			ДокОбмена.ЗаписатьКонецЭлемента(); //TABLE
			ДокОбмена.ЗаписатьКонецЭлемента(); //TABLES
			ДокОбмена.ЗаписатьКонецЭлемента(); //ITEM
		КонецЕсли;		
		ТекДата = ТекДата + 86400;
	КонецЦикла;
	
	ДокОбмена.ЗаписатьКонецЭлемента();  //ELEMENTS 
	
	ДокОбмена.ЗаписатьКонецЭлемента();  //CATALOG
	
КонецПроцедуры //ВыгрузкаМаршрутов()

Процедура ВыгрузитьПодтвержденияЗаказовПокупателей()
	
	Интервал = Константы.кпкИнтервалПодтверждений.Получить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Заказ.Ссылка КАК Ссылка,
	|	кпкСведенияДокументаСрезПоследних.Агент,
	|	кпкСведенияДокументаСрезПоследних.ИДДокумента,
	|	кпкСведенияДокументаСрезПоследних.Период
	|ИЗ
	|	РегистрСведений.кпкСведенияДокумента.СрезПоследних(&КонПериода, Агент = &Агент) КАК кпкСведенияДокументаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК Заказ
	|		ПО кпкСведенияДокументаСрезПоследних.КПКДокумент = Заказ.Ссылка
	|ГДЕ
	|	кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания > &НачПериода
	|	И кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания < &КонПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	кпкЗаявка.Ссылка,
	|	кпкСведенияДокументаСрезПоследних.Агент,
	|	кпкСведенияДокументаСрезПоследних.ИДДокумента,
	|	кпкСведенияДокументаСрезПоследних.Период
	|ИЗ
	|	РегистрСведений.кпкСведенияДокумента.СрезПоследних(&КонПериода, Агент = &Агент) КАК кпкСведенияДокументаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КпкЗаявка КАК кпкЗаявка
	|		ПО кпкСведенияДокументаСрезПоследних.КПКДокумент = кпкЗаявка.Ссылка
	|ГДЕ
	|	кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания > &НачПериода
	|	И кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания < &КонПериода";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(ТекущаяДата() - (86400 * Интервал)));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(ТекущаяДата()));	
	Запрос.УстановитьПараметр("Агент",      ВыбАгент);
	
	Результат = Запрос.Выполнить();
	
	СписокЭлементов = Результат.Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENT");
	
		ДобавитьПоле("GUID", "e01e1f5c-d6e4-46e8-b923-3758b0d79bde");

		ДобавитьПоле("Comment", "Подтверждения документа 'ЗаказПокупателя'");						
		
		ДокОбмена.ЗаписатьНачалоЭлемента("CONFIRMATIONS");
		
		Пока СписокЭлементов.Следующий() Цикл
			
			#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
			#КонецЕсли
			
			ЗаписатьЭлементВДокументОбмена(Новый Структура("GUID", СписокЭлементов.Ссылка));
			
		КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //CONFIRMATIONS
		
	ДокОбмена.ЗаписатьКонецЭлемента();     //DOCUMENT
	
КонецПроцедуры //ВыгрузитьПодтвержденияЗаказовПокупателей

Процедура ВыгрузитьПодтвержденияПосещений()
	
	Интервал = Константы.кпкИнтервалПодтверждений.Получить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Посещение.Ссылка КАК Ссылка,
	|	кпкСведенияДокументаСрезПоследних.Агент,
	|	кпкСведенияДокументаСрезПоследних.ИДДокумента,
	|	кпкСведенияДокументаСрезПоследних.Период
	|ИЗ
	|	РегистрСведений.кпкСведенияДокумента.СрезПоследних(&КонПериода, Агент = &Агент) КАК кпкСведенияДокументаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.кпкПосещение КАК Посещение
	|		ПО кпкСведенияДокументаСрезПоследних.КПКДокумент = Посещение.Ссылка
	|ГДЕ
	|	кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания > &НачПериода
	|	И кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания < &КонПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	Посещение.МоментВремени";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(ТекущаяДата() - (86400 * Интервал)));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(ТекущаяДата()));	
	Запрос.УстановитьПараметр("Агент",      ВыбАгент);
	
	Результат = Запрос.Выполнить();
	
	СписокЭлементов = Результат.Выбрать();
	
	СписокДокументовВыгрузки = Новый ТаблицаЗначений;
	СписокДокументовВыгрузки.Колонки.Добавить("Ссылка");
	СписокДокументовВыгрузки.Колонки.Добавить("Агент");
	СписокДокументовВыгрузки.Колонки.Добавить("ИдДокумента");
	СписокДокументовВыгрузки.Колонки.Добавить("Период");
	
	ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENT");
	
		ДобавитьПоле("GUID", "9f147c59-5ee8-4550-8289-12ecfe5d0617");
		
		ДобавитьПоле("Comment", "Подтверждения документа 'Посещение'");						

		ДокОбмена.ЗаписатьНачалоЭлемента("CONFIRMATIONS");
		
		Пока СписокЭлементов.Следующий() Цикл
			
			#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
			#КонецЕсли
			
			ЗаписатьЭлементВДокументОбмена(Новый Структура("GUID", СписокЭлементов.Ссылка));
			
			НоваяСтрока = СписокДокументовВыгрузки.Добавить();
			НоваяСтрока.Ссылка 		 = СписокЭлементов.Ссылка;
			НоваяСтрока.Агент 		 = СписокЭлементов.Агент;
			НоваяСтрока.ИдДокумента  = СписокЭлементов.ИдДокумента;
			НоваяСтрока.Период	     = СписокЭлементов.Период;
			
		КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //CONFIRMATIONS
		
	ДокОбмена.ЗаписатьКонецЭлемента();     //DOCUMENT
	
КонецПроцедуры

Процедура ВыгрузитьПодтвержденияПоступлений()
	
	Интервал = Константы.кпкИнтервалПодтверждений.Получить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Поступление.Ссылка КАК Ссылка,
	|	кпкСведенияДокументаСрезПоследних.Агент,
	|	кпкСведенияДокументаСрезПоследних.ИДДокумента,
	|	кпкСведенияДокументаСрезПоследних.Период
	|ИЗ
	|	РегистрСведений.кпкСведенияДокумента.СрезПоследних(&КонПериода, Агент = &Агент) КАК кпкСведенияДокументаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратОтПокупателя КАК Поступление
	|		ПО кпкСведенияДокументаСрезПоследних.КПКДокумент = Поступление.Ссылка
	|ГДЕ
	|	кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания > &НачПериода
	|	И кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания < &КонПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	Поступление.МоментВремени";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(ТекущаяДата() - (86400 * Интервал)));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(ТекущаяДата()));	
	Запрос.УстановитьПараметр("Агент",      ВыбАгент);
	
	Результат = Запрос.Выполнить();
	
	СписокЭлементов = Результат.Выбрать();
	
	СписокДокументовВыгрузки = Новый ТаблицаЗначений;
	СписокДокументовВыгрузки.Колонки.Добавить("Ссылка");
	СписокДокументовВыгрузки.Колонки.Добавить("Агент");
	СписокДокументовВыгрузки.Колонки.Добавить("ИдДокумента");
	СписокДокументовВыгрузки.Колонки.Добавить("Период");
	
	ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENT");
	
		ДобавитьПоле("GUID", "4971b041-beab-4fa6-b1e8-10138f04fe44");
		
		ДобавитьПоле("Comment", "Подтверждения документа 'Поступление'");						

		ДокОбмена.ЗаписатьНачалоЭлемента("CONFIRMATIONS");
		
		Пока СписокЭлементов.Следующий() Цикл
			
			#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
			#КонецЕсли
			
			ЗаписатьЭлементВДокументОбмена(Новый Структура("GUID", СписокЭлементов.Ссылка));
			
			НоваяСтрока = СписокДокументовВыгрузки.Добавить();
			НоваяСтрока.Ссылка 		 = СписокЭлементов.Ссылка;
			НоваяСтрока.Агент 		 = СписокЭлементов.Агент;
			НоваяСтрока.ИдДокумента  = СписокЭлементов.ИдДокумента;
			НоваяСтрока.Период	     = СписокЭлементов.Период;
			
		КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //CONFIRMATIONS
		
	ДокОбмена.ЗаписатьКонецЭлемента();     //DOCUMENT
	
КонецПроцедуры

Процедура ВыгрузитьПодтвержденияОрдеров()
	
	Интервал = Константы.кпкИнтервалПодтверждений.Получить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	кпкКасса.Ссылка КАК Ссылка,
	|	кпкСведенияДокументаСрезПоследних.Агент,
	|	кпкСведенияДокументаСрезПоследних.ИДДокумента,
	|	кпкСведенияДокументаСрезПоследних.Период КАК Период
	|ИЗ
	|	РегистрСведений.кпкСведенияДокумента.СрезПоследних(&КонПериода, Агент = &Агент) КАК кпкСведенияДокументаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КпкКасса КАК кпкКасса
	|		ПО кпкСведенияДокументаСрезПоследних.КПКДокумент = кпкКасса.Ссылка
	|ГДЕ
	|	кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания > &НачПериода
	|	И кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания < &КонПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(ТекущаяДата() - (86400 * Интервал)));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(ТекущаяДата()));	
	Запрос.УстановитьПараметр("Агент",      ВыбАгент);
	
	Результат = Запрос.Выполнить();
	
	СписокЭлементов = Результат.Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENT");
	
		ДобавитьПоле("GUID", "749be2e0-9b00-4d7b-9d4d-88ca53327511");

		ДобавитьПоле("Comment", "Подтверждения документа 'Касса'");						
		
		ДокОбмена.ЗаписатьНачалоЭлемента("CONFIRMATIONS");
		
		Пока СписокЭлементов.Следующий() Цикл
			
			#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
			#КонецЕсли
			
			ЗаписатьЭлементВДокументОбмена(Новый Структура("GUID", СписокЭлементов.Ссылка));
			
		КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //CONFIRMATIONS
		
	ДокОбмена.ЗаписатьКонецЭлемента();     //DOCUMENT
	
КонецПроцедуры //ВыгрузитьПодтвержденияОрдеров

Процедура ВыгрузитьПодтвержденияМерчендайзинга()
	
	Интервал = Константы.кпкИнтервалПодтверждений.Получить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Мерчендайзинг.Ссылка КАК Ссылка,
	|	кпкСведенияДокументаСрезПоследних.Агент,
	|	кпкСведенияДокументаСрезПоследних.ИДДокумента,
	|	кпкСведенияДокументаСрезПоследних.Период
	|ИЗ
	|	РегистрСведений.кпкСведенияДокумента.СрезПоследних(&КонПериода, Агент = &Агент) КАК кпкСведенияДокументаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.кпкМерчендайзинг КАК Мерчендайзинг
	|		ПО кпкСведенияДокументаСрезПоследних.КПКДокумент = Мерчендайзинг.Ссылка
	|ГДЕ
	|	кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания > &НачПериода
	|	И кпкСведенияДокументаСрезПоследних.ДатаВремяСоздания < &КонПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	Мерчендайзинг.МоментВремени";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(ТекущаяДата() - (86400 * Интервал)));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(ТекущаяДата()));	
	Запрос.УстановитьПараметр("Агент",      ВыбАгент);
	
	Результат = Запрос.Выполнить();
	
	СписокЭлементов = Результат.Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENT");
	
		ДобавитьПоле("GUID", "61dee5fe-d0a8-4842-a6af-a8d33f298845");

		ДобавитьПоле("Comment", "Подтверждения документа 'Мерчендайзинг'");						
		
		ДокОбмена.ЗаписатьНачалоЭлемента("CONFIRMATIONS");
		
		Пока СписокЭлементов.Следующий() Цикл
			
			#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
			#КонецЕсли
			
			ЗаписатьЭлементВДокументОбмена(Новый Структура("GUID", СписокЭлементов.Ссылка));
			
		КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //CONFIRMATIONS
		
	ДокОбмена.ЗаписатьКонецЭлемента();     //DOCUMENT
	
КонецПроцедуры //ВыгрузитьПодтвержденияМерчендайзинга

Процедура ВыгрузитьИсториюПродаж()
	
	Перем Дата01, Дата02;   	
	
	Если Константы.кпкГлубинаИсторииПродаж.Получить() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Глубина = Константы.кпкГлубинаИсторииПродаж.Получить();
	КолИнтервалов = (Константы.кпкКоличествоИнтерваловИстории.Получить());	
	ДлинаИнтервала = Окр(Глубина / ?(КолИнтервалов = 0, 1, КолИнтервалов));
	
	Дата02 = ТекущаяДата();
	Дата01 = Дата02 - (Глубина * 86400);
	Дата01 = НачалоДня(Дата01);
	
	Дата1 = Дата01;
	Дата2 = Дата02;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &Значение
	|			ТОГДА ЕСТЬNULL(ПродажиОбороты.Документ.кпкТорговаяТочка, ПродажиОбороты.Документ.Контрагент)
	|		ИНАЧЕ ПродажиОбороты.Документ.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ПродажиОбороты.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ПродажиОбороты.Номенклатура
	|		ИНАЧЕ ПродажиОбороты.Характеристика
	|	КОНЕЦ КАК Номенклатура,
	|	СУММА(ПродажиОбороты.КоличествоОборот) КАК ОборотКоличество,
	|	СУММА(ПродажиОбороты.СуммаОборот) КАК ОборотСумма
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(
	|				&ДатаНач,
	|				&ДатаКон,
	|				,
	|				Документ.Контрагент В (&ПарКлиенты)
	|					И Документ.Договор.ВидДоговора = &ВидДоговора) КАК ПродажиОбороты
	|		ПО (ПродажиОбороты.Номенклатура = СпрНоменклатура.Ссылка)
	|ГДЕ
	|	(ПродажиОбороты.Номенклатура В ИЕРАРХИИ (&Ассортимент)
	|			ИЛИ ПродажиОбороты.Номенклатура В (&ДопАссортимент))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ПродажиОбороты.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ПродажиОбороты.Номенклатура
	|		ИНАЧЕ ПродажиОбороты.Характеристика
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &Значение
	|			ТОГДА ЕСТЬNULL(ПродажиОбороты.Документ.кпкТорговаяТочка, ПродажиОбороты.Документ.Контрагент)
	|		ИНАЧЕ ПродажиОбороты.Документ.Контрагент
	|	КОНЕЦ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("парКлиенты",     сзКлиентыАгента);
	Запрос.УстановитьПараметр("Ассортимент",    сзАссортимент);
	Запрос.УстановитьПараметр("ДопАссортимент", сзДопТовары);
	Запрос.УстановитьПараметр("ВидДоговора",    Перечисления.ВидыДоговоров.СПокупателем);
	Запрос.УстановитьПараметр("Значение", Булево(Константы.кпкРежимТоргТочек.Получить()));
	
	СписокИсторий = Новый ТаблицаЗначений;
	СписокИсторий.Колонки.Добавить("Контрагент");
	СписокИсторий.Колонки.Добавить("Номенклатура");
	Для Инт = 1 По КолИнтервалов Цикл
		СписокИсторий.Колонки.Добавить("ОборотКоличество" + Строка(Инт));
		СписокИсторий.Колонки.Добавить("ОборотСумма" + Строка(Инт));
	КонецЦикла;
	
	Для Инт = 1 По КолИнтервалов Цикл   
		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		Дата02 = Дата01 + ((ДлинаИнтервала) * 86400);
		Дата02 = ?(КонецДня(Дата02) > ТекущаяДата(), ТекущаяДата(), КонецДня(Дата02));
		Запрос.УстановитьПараметр("ДатаНач", Дата01);
		Запрос.УстановитьПараметр("ДатаКон", Дата02);
		ПродДокументы = Запрос.Выполнить().Выбрать();
		Пока ПродДокументы.Следующий() Цикл
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Контрагент",    			   ПродДокументы.Контрагент);
			СтруктураПоиска.Вставить("Номенклатура",   			   ПродДокументы.Номенклатура);
			СтрокиПоиска = СписокИсторий.НайтиСтроки(СтруктураПоиска);
			Если СтрокиПоиска.Количество() = 0 Тогда
				НоваяСтрока = СписокИсторий.Добавить();
				НоваяСтрока.Контрагент = ПродДокументы.Контрагент;
				НоваяСтрока.Номенклатура = ПродДокументы.Номенклатура;
				НоваяСтрока["ОборотКоличество" + Строка(Инт)] = Строка(ПродДокументы.ОборотКоличество);
				НоваяСтрока["ОборотСумма" + Строка(Инт)] 	  = Строка(ПродДокументы.ОборотСумма);
			Иначе
				СтрокиПоиска[0]["ОборотКоличество" + Строка(Инт)] = Строка(ПродДокументы.ОборотКоличество);
				СтрокиПоиска[0]["ОборотСумма" + Строка(Инт)] 	  = Строка(ПродДокументы.ОборотСумма);
			КонецЕсли;
			
		КонецЦикла;
		Дата01 = Дата01 + ((ДлинаИнтервала + 1) * 86400);
	КонецЦикла;
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
		
		ДобавитьПоле("GUID", "af9faa26-9638-41c5-bfce-9514e670ef2e");
		ДобавитьПоле("Comment", "Справочник.ИсторияПродаж");

		// Передаем команду на очистку организаций перед загрузкой
		Если флОчищатьСправочникиПередЗагрузкой Тогда
			ДобавитьПоле("KILLALL", "1");                	
		КонецЕсли;
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
			Для Каждого ТекСтрока Из СписокИсторий Цикл		
				ИсторияКоличество = "";
				ИсторияСумма 	  = "";
				Для Инт = 1 По КолИнтервалов Цикл
					ЗначениеКоличества = ТекСтрока["ОборотКоличество" + Строка(Инт)];
					ИсторияКоличество = ИсторияКоличество + ?(ЗначениеЗаполнено(ЗначениеКоличества), Строка(ЗначениеКоличества), "0") + " ";
					
					ЗначениеСумма = ТекСтрока["ОборотСумма" + Строка(Инт)];
					ИсторияСумма = ИсторияСумма + ?(ЗначениеЗаполнено(ЗначениеСумма), Строка(ЗначениеСумма), "0") + " ";
				КонецЦикла;
				СтруктураПолей = Новый Структура;				
				СтруктураПолей.Вставить("GUID", Новый УникальныйИдентификатор());
				СтруктураПолей.Вставить("IsDeleted", "0");
				СтруктураПолей.Вставить("A02", ВРег(Строка(ТекСтрока.Контрагент.УникальныйИдентификатор())));
				СтруктураПолей.Вставить("A04", ВРег(Строка(ТекСтрока.Номенклатура.УникальныйИдентификатор())));
				СтруктураПолей.Вставить("A07", СокрЛП(ИсторияКоличество));
				СтруктураПолей.Вставить("A08", СокрЛП(ИсторияСумма));
				ЗаписатьЭлементВДокументОбмена(СтруктураПолей);		
			КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента();   //ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента();       //CATALOG
	
КонецПроцедуры //ВыгрузитьИсториюПродаж

// Выгрузка дополнительной информации
// В данной процедуре выгружаются следующие справочники:
// 		1. Типы цен
//      2. Склады
//      3. Категории документов
//      4. Категории номенклатуры
//      5. Статусы контрагентов
//      6. Категории контрагентов
//      6. Типы торговых точек
//
Процедура ВыгрузитьДополнительнуюИнформацию()
	
	// Выгрузка типов цен
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
		ДобавитьПоле("GUID", "00f1ffe7-e16e-4ff4-9ef1-b8d0c54bdf59");
		
		ДобавитьПоле("Comment", "Справочник.ТипыЦен");
		
		// Передаем команду на очистку справочника перед загрузкой
		ДобавитьПоле("KILLALL", "1");                	
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
			Сч = 0;
			Для Каждого СтрокаТаб Из тзКатегорииЦен Цикл
				ТипЦены = СтрокаТаб.ТипыЦен;
				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(ТипЦены);		
				СтруктураПолей.Вставить("Code", Сч);
				//СтруктураПолей.Вставить("A02",  ТипЦены.ЦенаВключаетНДС);
				СтруктураПолей.Вставить("A02",  Истина);
				ЗаписатьЭлементВДокументОбмена(СтруктураПолей);		
				Сч = Сч + 1;
			КонецЦикла;
			
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
	//////////////////////////////////////////////////
	
	// Выгрузка складов	
	Если 1=2 Тогда
		сзСклады = Новый СписокЗначений;
		
		сзСклады.ЗагрузитьЗначения(СведенияАгента.СписокСкладов.Склады.ВыгрузитьКолонку("Склад"));
		
		ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
		
		ДобавитьПоле("GUID", "2516ffce-f46f-4326-be00-438ef0871d30");
		
		ДобавитьПоле("Comment", "Справочник.Склады");
		
		// Передаем команду на очистку справочника перед загрузкой
		ДобавитьПоле("KILLALL", "1"); 
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
		Сч = 0;
		Для Каждого ЭлСписка Из сзСклады Цикл
			Склад = ЭлСписка.Значение;
			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Склад);
			СтруктураПолей.Вставить("Code", Сч);
			ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
			Сч = Сч + 1;
		КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
		ДокОбмена.ЗаписатьКонецЭлемента();     //CATALOG
		
	КонецЕсли;
	
	//////////////////////////////////////////////////
	
	// Выгрузка категорий документов	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	кпкКатегорииДокументов.Ссылка,
	|	кпкКатегорииДокументов.Код,
	|	кпкКатегорииДокументов.Наименование,
	|	кпкКатегорииДокументов.ПометкаУдаления,
	|	кпкКатегорииДокументов.Цвет
	|ИЗ
	|	Справочник.кпкКатегорииДокументов КАК кпкКатегорииДокументов");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
	ДобавитьПоле("GUID", "f997f837-8721-4896-8fe8-3497c6c38206");
	
	ДобавитьПоле("Comment", "Справочник.КатегорииДокументов");	
	
	// Передаем команду на очистку справочника перед загрузкой
	ДобавитьПоле("KILLALL", "1"); 
	 
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
		Пока Выборка.Следующий() Цикл		
			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Выборка);
			СтруктураПолей.Вставить("A02", Строка(кпкАгентПлюс.ПреобразоватьЦветВАбсолютный(Выборка.Цвет.Получить())));
			ЗаписатьЭлементВДокументОбмена(СтруктураПолей);		
		КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента();     //CATALOG
	
    //////////////////////////////////////////////////
	
   // Выгрузка категорий номенклатуры	
   Если 1=2 Тогда
	   Запрос = Новый Запрос(
	   "ВЫБРАТЬ
	   |	НоменклатурныеГруппы.Ссылка,
	   |	НоменклатурныеГруппы.ПометкаУдаления,
	   |	НоменклатурныеГруппы.Код,
	   |	НоменклатурныеГруппы.Наименование
	   |ИЗ
	   |	Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы");
	   
	   Выборка = Запрос.Выполнить().Выбрать();
	   
	   ВыгрузитьПростойСправочник("41598c02-f788-48a7-a039-645ef74bd57f", Выборка, "НоменклатурныеГруппы");
   КонецЕсли;
    //////////////////////////////////////////////////
	
	// Выгрузка статусов контрагентов	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	кпкСтатусыКонтрагентов.Ссылка,
	|	кпкСтатусыКонтрагентов.ПометкаУдаления,
	|	кпкСтатусыКонтрагентов.Наименование,
	|	кпкСтатусыКонтрагентов.Предупреждение,
	|	кпкСтатусыКонтрагентов.Цвет
	|ИЗ
	|	Справочник.кпкСтатусыКонтрагентов КАК кпкСтатусыКонтрагентов");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
	ДобавитьПоле("GUID", "74046d94-b25d-4f3a-b553-27b7fdd3c60c");
	
	ДобавитьПоле("Comment", "Справочник.СтатусыКонтрагентов");	
	
	// Передаем команду на очистку справочника перед загрузкой
	ДобавитьПоле("KILLALL", "1"); 
	
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
		Пока Выборка.Следующий() Цикл		
			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Выборка);
			СтруктураПолей.Вставить("A02", Выборка.Предупреждение);
			СтруктураПолей.Вставить("A03", Строка(кпкАгентПлюс.ПреобразоватьЦветВАбсолютный(Выборка.Цвет.Получить())));
			ЗаписатьЭлементВДокументОбмена(СтруктураПолей);		
		КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента();     //CATALOG
    //////////////////////////////////////////////////
	
	// Выгрузка категорий контрагентов
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	кпкКатегорииКонтрагентов.Ссылка,
	|	кпкКатегорииКонтрагентов.ПометкаУдаления,
	|	кпкКатегорииКонтрагентов.Наименование,
	|	кпкКатегорииКонтрагентов.Комментарий
	|ИЗ
	|	Справочник.кпкКатегорииКонтрагентов КАК кпкКатегорииКонтрагентов");
	
	Запрос.УстановитьПараметр("Ассортимент", сзАссортимент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
		ДобавитьПоле("GUID", "c75131a9-f98e-4443-b790-3ada6137440b");
		
		ДобавитьПоле("Comment", "Справочник.КатегорииКонтрагентов");
		 		
		// Передаем команду на очистку справочника перед загрузкой
		ДобавитьПоле("KILLALL", "1"); 
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
		Пока Выборка.Следующий() Цикл
			
			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Выборка);
			СтруктураПолей.Вставить("A01", Выборка.Комментарий);
			ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
			
		КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента();     //CATALOG
	//////////////////////////////////////////////////
	
	// Выгрузка типов торговых точек
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	кпкТипыТорговыхТочек.Ссылка,
	|	кпкТипыТорговыхТочек.ПометкаУдаления,
	|	кпкТипыТорговыхТочек.Наименование
	|ИЗ
	|	Справочник.кпкТипыТорговыхТочек КАК кпкТипыТорговыхТочек");
	
	//Запрос.УстановитьПараметр("Ассортимент", сзАссортимент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВыгрузитьПростойСправочник("edb6b6c0-922f-42d2-8868-cbeb347d8c74", Выборка, "ТипыТорговыхТочек");

	//////////////////////////////////////////////////
	
	// Выгрузка результатов посещений
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	кпкРезультатыПосещений.Ссылка,
	|	кпкРезультатыПосещений.ПометкаУдаления,
	|	кпкРезультатыПосещений.Наименование
	|ИЗ
	|	Справочник.кпкРезультатыПосещений КАК кпкРезультатыПосещений");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВыгрузитьПростойСправочник("ffd68f37-4bdd-4692-8ab2-a22964f602b1", Выборка, "РезультатыПосещений");

	//////////////////////////////////////////////////
	
	// Выгрузка Вопросов анкеты
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	кпкВопросыАнкеты.Ссылка,
	|	кпкВопросыАнкеты.ПометкаУдаления,
	|	кпкВопросыАнкеты.Наименование,
	|	кпкВопросыАнкеты.кпкОбязательный КАК Обязательный
	|ИЗ
	|	Справочник.кпкВопросыАнкеты КАК кпкВопросыАнкеты
	|ГДЕ
	|	кпкВопросыАнкеты.кпкВыгружать = ИСТИНА");
	
	Выборка = Запрос.Выполнить().Выбрать();

	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
	ДобавитьПоле("GUID", "d2015f3b-2f65-46f7-a40d-2867fb75d930");
	
	ДобавитьПоле("Comment", "Справочник.ВопросыАнкеты");
	
	// Передаем команду на очистку запросов перед загрузкой
	Если флОчищатьСправочникиПередЗагрузкой Тогда
		ДобавитьПоле("KILLALL", "1");                	
	КонецЕсли;	

	Выборка = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	
		Пока Выборка.Следующий() Цикл 				
			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Выборка);
			СтруктураПолей.Вставить("A01", Выборка.Обязательный);
			ЗаписатьЭлементВДокументОбмена(СтруктураПолей);				
		КонецЦикла;
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
	
	//////////////////////////////////////////////////
	
	// Выгрузка Вопросов анкеты
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	кпкОтветыАнкеты.Ссылка,
	|	кпкОтветыАнкеты.ПометкаУдаления,
	|	кпкОтветыАнкеты.Наименование,
	|	кпкОтветыАнкеты.Владелец.Ссылка КАК Вопрос
	|ИЗ
	|	Справочник.кпкОтветыАнкеты КАК кпкОтветыАнкеты");
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
	ДобавитьПоле("GUID", "f3fef961-294a-48e2-8a72-bfc950c4466b");
	
	ДобавитьПоле("Comment", "Справочник.ОтветыАнкеты");
	
	// Передаем команду на очистку запросов перед загрузкой
	Если флОчищатьСправочникиПередЗагрузкой Тогда
		ДобавитьПоле("KILLALL", "1");                	
	КонецЕсли;	

	Выборка = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	
		Пока Выборка.Следующий() Цикл 				
			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Выборка);
			СтруктураПолей.Вставить("A01", Выборка.Вопрос);
			ЗаписатьЭлементВДокументОбмена(СтруктураПолей);				
		КонецЦикла;
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG

	//////////////////////////////////////////////////
	
	// Выгрузка запросов
	НевыгружаемыеЗапросы = Новый СписокЗначений();
	НевыгружаемыеЗапросы.Добавить(Перечисления.кпкВидыЗапросовДляАгентов.Задания);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	кпкЗапросы.Наименование,
	|	кпкЗапросы.Код,
	|	кпкЗапросы.Ссылка,
	|	кпкЗапросы.ПометкаУдаления
	|ИЗ
	|	Справочник.кпкЗапросы КАК кпкЗапросы
	|ГДЕ
	|	кпкЗапросы.ПометкаУдаления = ЛОЖЬ
	|	И (НЕ кпкЗапросы.ВидЗапроса В (&СписокНевыгружаемых))");
	
	Запрос.УстановитьПараметр("СписокНевыгружаемых", НевыгружаемыеЗапросы);
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
	ДобавитьПоле("GUID", "cc458719-5078-4dc8-9a0c-fa19e3904f39");
	
	ДобавитьПоле("Comment", "Справочник.Запросы");
	
	// Передаем команду на очистку запросов перед загрузкой
	Если флОчищатьСправочникиПередЗагрузкой Тогда
		ДобавитьПоле("KILLALL", "1");                	
	КонецЕсли;	

	Выборка = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	
		Пока Выборка.Следующий() Цикл 				
			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Выборка);
			СтруктураПолей.Вставить("Code", Выборка.Код);
			ЗаписатьЭлементВДокументОбмена(СтруктураПолей);				
		КонецЦикла;
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
	
    //////////////////////////////////////////////////
	
КонецПроцедуры //ВыгрузитьДополнительнуюИнформацию

Процедура ВыгрузитьИзображения()

	Если Не флВыгружатьКартинкиВКПК Тогда		
		Возврат;
    КонецЕсли;
	
	ИмяКаталога = КаталогВременныхФайлов() + "PhotosFrom1C\";
	
	кпкАгентПлюс.ПроверитьСуществованиеКаталога(ИмяКаталога, Ложь, Истина);
	
	НайденныеФайлы = НайтиФайлы(ИмяКаталога, "*.PNG");
	
	Если НайденныеФайлы.Количество() > 0 Тогда 
		Попытка
			УдалитьФайлы(ИмяКаталога, "*.PNG"); 
		Исключение			
			ТекстСообщения = "Невозможно удалить файлы картинок из каталога: " + ИмяКаталога+ " по причине: " + ОписаниеОшибки();																				
			ОповеститьОСобытии(ТекстСообщения);
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	 "ВЫБРАТЬ
	 |	Файлы.Ссылка,
	 |	Файлы.ВладелецФайла,
	 |	Файлы.ТекущаяВерсия,
	 |	Файлы.ПометкаУдаления,
	 |	Файлы.Наименование,
	 |	Файлы.ТекущаяВерсияРасширение КАК Расширение
	 |ИЗ
	 |	Справочник.Файлы КАК Файлы
	 |ГДЕ
	 |	Файлы.ВладелецФайла В ИЕРАРХИИ(&Объект)");
	 
	Запрос.УстановитьПараметр("Объект"	 , сзАссортимент);
	СписокИзображений = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
    СтрДляАрхива = "";	
	
	Пока СписокИзображений.Следующий() Цикл
		
		РасширениеКартинок = "Все картинки (*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf)";
		Если Найти(РасширениеКартинок,СокрЛП(СписокИзображений.Расширение)) = 0 тогда
			Продолжить;
		КонецЕсли;
		
		ИДТовара 	  	 = Строка(СписокИзображений.Ссылка.УникальныйИдентификатор());
		ИмяФайлаФото    = ВРег(ИдТовара);
		ПолноеИмяФайла = ИмяКаталога + ИмяФайлаФото;
		
		
	     ВерсияСсылка = СписокИзображений.ТекущаяВерсия;
	     
	     ТипХраненияФайла = ВерсияСсылка.ТипХраненияФайла;
	     Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
	          Если НЕ ВерсияСсылка.Том.Пустая() Тогда
	               ПолныйПуть = ФайловыеФункции.ПолныйПутьТома(ВерсияСсылка.Том) + ВерсияСсылка.ПутьКФайлу; 
	               ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
	          КонецЕсли;
	     Иначе
	          ДвоичныеДанные = ВерсияСсылка.ФайлХранилище.Получить();
	     КонецЕсли;
	     
		//СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(СписокИзображений);				
		СтруктураПолей = Новый Структура;
		СтруктураПолей.Вставить("GUID"	 	 , ВРег(Строка(СписокИзображений.Ссылка.УникальныйИдентификатор())));
		СтруктураПолей.Вставить("FileName"	 , ВРег(ИмяФайлаФото));
		СтруктураПолей.Вставить("Format"	 , ВерсияСсылка.Расширение);
		СтруктураПолей.Вставить("Description", СписокИзображений.Наименование);
		ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
				
		Картинка 	   = Новый Картинка(ДвоичныеДанные);   
		КартинкаPNG    = Картинка.Преобразовать(ФорматКартинки.PNG);
		КартинкаPNG.Записать(ПолноеИмяФайла);
		КолФотоМТ = КолФотоМТ + 1;
		
		СтрДляАрхива = СтрДляАрхива + ИмяФайлаФото + Т_ + ПолноеИмяФайла + Т_;	
	КонецЦикла;
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //PICTURES
	
	Если ЗначениеЗаполнено(СтрДляАрхива) Тогда
		// Убираем последний табулятор
		СтрДляАрхива = Лев(СтрДляАрхива, СтрДлина(СтрДляАрхива)-1);	
		КПКОбъектZip.Pack(ИмяКаталога + "GoodsPhotosFromCDB.zip", СтрДляАрхива);									
	КонецЕсли;

КонецПроцедуры // ВыгрузитьИзображения()

Процедура ВыгрузитьКонстанты(ТекстXML)
	
	// Валюта
	ДобавитьКонстанту("d2b5508c-7453-4a52-b803-a846992a485d", Справочники.Валюты.НациональнаяВалюта.Наименование);
	
	// Единица измерения веса
	ДобавитьКонстанту("13af34a5-664d-4aad-a29c-eefc04fefca9", Константы.кпкЕдиницаИзмеренияВеса.Получить().Наименование);
	
	// Основная фирма
	ДобавитьКонстанту("13faf2a0-3d1e-469e-bc53-cdada6ac1375", Строка(СведенияАгента.ОсновнаяФирма.УникальныйИдентификатор()));
	
	// Пересчет в базовые единицы измерения
	ДобавитьКонстанту("0d0b118f-a77d-4a90-adfb-c79e5eb08cdb", ПреобразоватьЗначениеВСтрокуДляXML(Константы.кпкИспользоватьЕдИзм.Получить()));
	
	// Использовать характеристики
	РежимВыгрузкиОстатков = Константы.кпкРежимВыгрузкиОстатков.Получить();
	ИспХарактеристики = Константы.ФункциональнаяОпцияИспользоватьХарактеристики.Получить() и РежимВыгрузкиОстатков = 1;
	ДобавитьКонстанту("6e9470db-c618-4bf8-b510-d1e39e2217f6", ПреобразоватьЗначениеВСтрокуДляXML(ИспХарактеристики));
	
	// Префикс нумерации документов
	ДобавитьКонстанту("c21ed754-43d4-423d-bdb6-8d2f36b9f8d1", ПрефиксАгента);
	
	// Склады в табличной части документов
	ДобавитьКонстанту("63b7d515-ce1d-4f91-b65e-1293495a07e1", "0");
	
	// Основной склад
	ДобавитьКонстанту("86ba5dad-16d0-46b8-9d8d-3eab2cf08685", ПреобразоватьЗначениеВСтрокуДляXML(ОснСклад));
	
	// Использовать торговые точки
	ДобавитьКонстанту("8c52bbbf-8bbb-447d-b18b-06860d372818", Строка(Константы.кпкРежимТоргТочек.Получить()));
	
	// Использовать договоры
	ДобавитьКонстанту("b201164e-e265-4c1d-b3d0-0579bcd1fda6", ПреобразоватьЗначениеВСтрокуДляXML(Константы.кпкИспользоватьДоговоры.Получить()));
	
	// Фактический адрес
	ДобавитьКонстанту("1b3d41b2-eb00-4f25-a476-6a668c5e69f0", ПреобразоватьЗначениеВСтрокуДляXML(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента));
	
	// Основной тип цены продажи
	ДобавитьКонстанту("7bc85296-f536-411e-aaa9-74ad5c7adea2", Строка(СведенияАгента.ОсновнойТипЦены.УникальныйИдентификатор()));
	
	// Использование истории продаж
	ИспИП = Константы.кпкГлубинаИсторииПродаж.Получить();
	ДобавитьКонстанту("0270b3d5-4213-419b-9e3a-48cba4caec04", ?(ИспИП = 0, "0", "1"));
	
	// Дата и время последнего трека, сделанного в КПК
	ДатаТрека = ПолучитьДатуПоследнегоТрека();
	
	// Дата и время последнего трека, сделанного в КПК
	Если ЗначениеЗаполнено(ДатаТрека) Тогда           
		ДобавитьКонстанту("df297ad7-e2ce-478a-974e-fb399239e23e", ДатаТрека);
	КонецЕсли;
	
КонецПроцедуры //ВыгрузитьКонстанты

Процедура ВыгрузитьПодтвержденияДокументов()
	
	ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENTS");
	
		ДобавитьПоле("Comment", "Подтверждения документов");	
	
	   	ВыгрузитьПодтвержденияЗаказовПокупателей();
		
		ВыгрузитьПодтвержденияОрдеров();
		
		ВыгрузитьПодтвержденияМерчендайзинга(); 
		
		ВыгрузитьПодтвержденияПосещений();
		
		ВыгрузитьПодтвержденияПоступлений();
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //DOCUMENTS
	
КонецПроцедуры //ВыгрузитьПодтвержденияДокументов

Процедура ЗагрузитьКонтрагента(ТекстXML, ОбъектСпр, ЭтоНовый)
	
	Пока ТекстXML.ПрочитатьАтрибут() Цикл
		
		ИмяПараметра  = ТекстXML.Имя;
		ЗначПараметра = ТекстXML.Значение;
		
		Если Не ЗначениеЗаполнено(ЗначПараметра) Тогда Продолжить; КонецЕсли;
		
		Если ИмяПараметра = "IsDeleted" Тогда
			ПометкаУдаления = Булево(Число(ТекстXML.Значение));							
		ИначеЕсли ИмяПараметра = "Name" Тогда
			ОбъектСпр.Наименование = СокрЛП(ТекстXML.Значение);
		ИначеЕсли ИмяПараметра = "GrpId0" Тогда 			
			ОбъектСпр.Родитель = ПолучитьСсылкуИзСправочника(ЗначПараметра, "Контрагенты");
		ИначеЕсли ИмяПараметра = "A08" Тогда
			ТекДоговорКонтрагента = Новый УникальныйИдентификатор(ЗначПараметра);
		ИначеЕсли ИмяПараметра = "A06" Тогда
			ТекСтатусКонтрагента = ЗначПараметра;
		КонецЕсли; 						
		
	КонецЦикла;
	
	ОбъектСпр.ЮрФизЛицо =  Перечисления.ЮрФизЛицо.ЮрЛицо;
	ОбъектСпр.НаименованиеПолное = ОбъектСпр.Наименование;

	ОбъектСпр.СчетУчетаРасчетовСПокупателем = ПланыСчетов.Управленческий.РасчетыСПокупателями;
	ОбъектСпр.СчетУчетаАвансовПокупателя    = ПланыСчетов.Управленческий.РасчетыПоАвансамПолученным;
	ОбъектСпр.СчетУчетаРасчетовСПоставщиком = ПланыСчетов.Управленческий.РасчетыСПоставщиками;
	ОбъектСпр.СчетУчетаАвансовПоставщику    = ПланыСчетов.Управленческий.РасчетыПоАвансамВыданным;
	
	ОбъектСпр.ОбменДанными.Загрузка = Истина;
	
	Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпр, "запись") Тогда 	
		ТекстСообщения = "Не удалось записать элемент справочника: " + Строка(ОбъектСпр) + " в базу!";				
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, ОбъектСпр);		
		ТекстXML.Пропустить();	
	КонецЕсли;	
	
	ОбъектСпр.УстановитьПометкуУдаления(ПометкаУдаления, Ложь);
	ДоговорКонтрагента = ПолучитьСсылкуИзСправочника(ТекДоговорКонтрагента, "ДоговорыКонтрагентов");
	
	Если Не ОбъектСпр.ЭтоГруппа Тогда 
		ОбъектСпр.ДоговорПоУмолчанию = ДоговорКонтрагента;
	
		Если НЕ ЗначениеЗаполнено(ОбъектСпр.ДоговорПоУмолчанию) Тогда
			ДоговорКонтрагента = Неопределено;		
			СписокДоговоров = Справочники.ДоговорыКонтрагентов.Выбрать( , ОбъектСпр.Ссылка);
			Пока СписокДоговоров.Следующий() Цикл
				Если СписокДоговоров.ВидДоговора = Перечисления.ВидыДоговоров.СПокупателем Тогда
					ДоговорКонтрагента = СписокДоговоров.Ссылка;
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
		    Если ДоговорКонтрагента = Неопределено Тогда
				НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
				НовыйДоговор.Владелец = ОбъектСпр.Ссылка;
				НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоров.СПокупателем;
				НовыйДоговор.Наименование  = "Основной договор";
				НовыйДоговор.ВалютаРасчетов = Справочники.Валюты.НациональнаяВалюта;
				НовыйДоговор.Организация = Справочники.Организации.ОсновнаяОрганизация;
				НовыйДоговор.ВидЦен = Справочники.ВидыЦен.Оптовая;
				НовыйДоговор.ОбменДанными.Загрузка = Истина;
				НовыйДоговор.Записать();
				ДоговорКонтрагента = НовыйДоговор.Ссылка;
				
			КонецЕсли; 
			ОбъектСпр.ДоговорПоУмолчанию = ДоговорКонтрагента;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(ОбъектСпр.КонтактноеЛицо) Тогда
			СписокКонтактныхЛиц = Справочники.КонтактныеЛица.Выбрать( , ОбъектСпр.Ссылка);
			Пока СписокКонтактныхЛиц.Следующий() Цикл
				ОбъектСпр.КонтактноеЛицо = СписокКонтактныхЛиц.Ссылка;
				Прервать;
			КонецЦикла; 
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпр, "запись") Тогда 	
		ТекстСообщения = "Не удалось записать элемент справочника: " + Строка(ОбъектСпр) + " в базу!";				
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, ОбъектСпр);				
		Возврат;							
	КонецЕсли;	
	
	ЗаписатьВПротоколЗагрузкуЭлемСпр(ОбъектСпр, ЭтоНовый);
	
	СведенияКонтрагента = РегистрыСведений.кпкСведенияКонтрагента.СоздатьМенеджерЗаписи();
	СведенияКонтрагента.Объект = ОбъектСпр.Ссылка;
	СведенияКонтрагента.Прочитать();
	Если СведенияКонтрагента.Выбран() Тогда
		СведенияКонтрагента.Статус = ПолучитьСсылкуИзСправочника(ТекСтатусКонтрагента, "кпкСтатусыКонтрагентов");
	Иначе
		СведенияКонтрагента.Объект = ОбъектСпр.Ссылка;
		СведенияКонтрагента.Статус = ПолучитьСсылкуИзСправочника(ТекСтатусКонтрагента, "кпкСтатусыКонтрагентов");							
	КонецЕсли;
	
	Если Не ВыполнитьОперациюДляОбъекта(СведенияКонтрагента, "запись") Тогда 	
		ТекстСообщения = "Не удалось записать сведения для объекта: " + Строка(СведенияКонтрагента.Объект) + " в базу!";				
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, СведенияКонтрагента.Объект);		
		ТекстXML.Пропустить();	
	Иначе
		ТекстСообщения = ?(ЭтоНовый , "Записаны", "Обновлены") + " сведения для объекта: " + Строка(СведенияКонтрагента.Объект);				
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Истина, СведенияКонтрагента.Объект);									
	КонецЕсли;	
	
КонецПроцедуры //ЗагрузитьКонтрагента

Процедура ЗагрузитьДоговор(ТекстXML, ОбъектСпр, ЭтоНовый)
	
	Пока ТекстXML.ПрочитатьАтрибут() Цикл
		
		ИмяПараметра  = ТекстXML.Имя;
		ЗначПараметра = ТекстXML.Значение;
		
		Если Не ЗначениеЗаполнено(ЗначПараметра) Тогда Продолжить; КонецЕсли;
		
		Если ИмяПараметра = "IsDeleted" Тогда
			ПометкаУдаления = Булево(Число(ТекстXML.Значение));							
		ИначеЕсли ИмяПараметра = "Name" Тогда
			ОбъектСпр.Наименование = СокрЛП(ТекстXML.Значение);
		ИначеЕсли ИмяПараметра = "A02" Тогда 			
			ТекВладелец = Новый УникальныйИдентификатор(ЗначПараметра);
		ИначеЕсли ИмяПараметра = "A03" Тогда
			ОбъектСпр.ДатаДоговора = ДатаВремяXMLВФормат1С(ЗначПараметра);
		ИначеЕсли ИмяПараметра = "A04" Тогда
			//ОбъектСпр.СрокДействия = ДатаВремяXMLВФормат1С(ЗначПараметра);
		ИначеЕсли ИмяПараметра = "A05" Тогда
			ОбъектСпр.Организация = ПолучитьСсылкуИзСправочника(ЗначПараметра, "Организации");
		ИначеЕсли ИмяПараметра = "A06" Тогда
			ОбъектСпр.ВидЦен = ПолучитьСсылкуИзСправочника(ЗначПараметра, "ВидыЦен");
		КонецЕсли; 						
		
	КонецЦикла;
	
	ВладелецТочки = ПолучитьСсылкуИзСправочника(ТекВладелец, "Контрагенты");
	ОбъектСпр.Владелец = ВладелецТочки;						
	ОбъектСпр.ОбменДанными.Загрузка = Истина;
	ОбъектСпр.ВалютаРасчетов  = Справочники.Валюты.НациональнаяВалюта;
	ОбъектСпр.ВидДоговора = Перечисления.ВидыДоговоров.СПокупателем;
	Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпр, "запись") Тогда 	
		ТекстСообщения = "Не удалось записать элемент справочника: " + Строка(ОбъектСпр) + " в базу!";				
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, ОбъектСпр);		
		Возврат;
	КонецЕсли;	
	
	ОбъектСпр.УстановитьПометкуУдаления(ПометкаУдаления, Ложь);
	
	ЗаписатьВПротоколЗагрузкуЭлемСпр(ОбъектСпр, ЭтоНовый);   	
	
КонецПроцедуры //ЗагрузитьДоговор

Процедура ЗагрузитьТорговуюТочку(ТекстXML, ОбъектСпр, ЭтоНовый)
	
	Пока ТекстXML.ПрочитатьАтрибут() Цикл
		
		ИмяПараметра  = ТекстXML.Имя;
		ЗначПараметра = ТекстXML.Значение;
		
		Если Не ЗначениеЗаполнено(ЗначПараметра) Тогда Продолжить; КонецЕсли;
		
		Если ИмяПараметра = "IsDeleted" Тогда
			ПометкаУдаления = Булево(Число(ТекстXML.Значение));							
		ИначеЕсли ИмяПараметра = "Name" Тогда
			ОбъектСпр.Наименование = СокрЛП(ТекстXML.Значение);
		ИначеЕсли ИмяПараметра = "A02" Тогда 			
			ТекВладелец = ЗначПараметра;
		ИначеЕсли ИмяПараметра = "A05" Тогда 			
			ОбъектСпр.Категория = ПолучитьСсылкуИзСправочника(ЗначПараметра, "кпкКатегорииКонтрагентов");
		ИначеЕсли ИмяПараметра = "A06" Тогда 			
			ОбъектСпр.ТипТочки = ПолучитьСсылкуИзСправочника(ЗначПараметра, "кпкТипыТорговыхТочек");
		ИначеЕсли ИмяПараметра = "A07" Тогда 			
			ОбъектСпр.Комментарий = ЗначПараметра;
		КонецЕсли; 						
		
	КонецЦикла;
	
	ВладелецТочки = ПолучитьСсылкуИзСправочника(ТекВладелец, "Контрагенты");
	ОбъектСпр.Владелец = ВладелецТочки;
	ОбъектСпр.НаименованиеПолное = ОбъектСпр.Наименование;
	
	Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпр, "запись") Тогда 	
		ТекстСообщения = "Не удалось записать элемент справочника: " + Строка(ОбъектСпр) + " в базу!";				
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, ОбъектСпр);				
		Возврат;
	КонецЕсли;
	
	СписокКонтактныхЛиц = Справочники.КонтактныеЛица.Выбрать( , ОбъектСпр.Ссылка);
	Пока СписокКонтактныхЛиц.Следующий() Цикл
		Если ОбъектСпр.КонтактныеЛица.Найти(СписокКонтактныхЛиц.Ссылка) = Неопределено Тогда 
			НоваяСтрока = ОбъектСпр.КонтактныеЛица.Добавить();
			НоваяСтрока.КонтактноеЛицо = СписокКонтактныхЛиц.Ссылка;
		КонецЕсли;
	КонецЦикла; 
	
	Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпр, "запись") Тогда 	
		ТекстСообщения = "Не удалось записать элемент справочника: " + Строка(ОбъектСпр) + " в базу!";				
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, ОбъектСпр);				
		Возврат;
	КонецЕсли;
	
	ЗаписатьВПротоколЗагрузкуЭлемСпр(ОбъектСпр, ЭтоНовый);
	
	ОбъектСпр.УстановитьПометкуУдаления(ПометкаУдаления, Ложь);  	
	
КонецПроцедуры //ЗагрузитьТорговуюТочку

Процедура ЗагрузитьКонтактноеЛицо(ТекстXML, ОбъектСпр, ЭтоНовый)
	
	Пока ТекстXML.ПрочитатьАтрибут() Цикл
		
		ИмяПараметра  = ТекстXML.Имя;
		ЗначПараметра = ТекстXML.Значение;
		
		Если Не ЗначениеЗаполнено(ЗначПараметра) Тогда Продолжить; КонецЕсли;
		
		Если ИмяПараметра = "IsDeleted" Тогда
			ПометкаУдаления = Булево(Число(ТекстXML.Значение));							
		ИначеЕсли ИмяПараметра = "Name" Тогда
			ОбъектСпр.Наименование = СокрЛП(ТекстXML.Значение);
		ИначеЕсли ИмяПараметра = "A02" Тогда 			
			ДатаРожденияКЛ = ДатаВремяXMLВФормат1С(ЗначПараметра);
		ИначеЕсли ИмяПараметра = "A03" Тогда 			
			КонтрагентКЛ = ЗначПараметра;
		ИначеЕсли ИмяПараметра = "A04" Тогда 			
			ТорговаяТочкаКЛ = ЗначПараметра;
		ИначеЕсли ИмяПараметра = "A05" Тогда 			
			ОбъектСпр.Комментарий = ЗначПараметра;
		КонецЕсли; 						
		
	КонецЦикла;    						
	
	ОбъектСпр.ОбменДанными.Загрузка = Истина;
	
	Если ЗначениеЗаполнено(КонтрагентКЛ) И Не ЗначениеЗаполнено(ТорговаяТочкаКЛ) Тогда 
		ТекВладелецКЛ = ПолучитьСсылкуИзСправочника(КонтрагентКЛ, "Контрагенты");
		ОбъектСпр.Владелец = ТекВладелецКЛ;
	Иначе
		ТекВладелецКЛ = ПолучитьСсылкуИзСправочника(ТорговаяТочкаКЛ, "кпкТорговыеТочки");
		ОбъектСпр.Владелец = ТекВладелецКЛ;
	КонецЕсли;
	
	Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпр, "запись") Тогда 	
		ТекстСообщения = "Не удалось записать элемент справочника: " + Строка(ОбъектСпр) + " в базу!";				
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, ОбъектСпр);				
		Возврат;
	КонецЕсли;
	
	ОбъектСпр.УстановитьПометкуУдаления(ПометкаУдаления, Ложь);
	
	ЗаписатьВПротоколЗагрузкуЭлемСпр(ОбъектСпр, ЭтоНовый);
	
КонецПроцедуры //ЗагрузитьКонтактноеЛицо

Процедура ЗагрузитьФотографиюДокумента(ТекстXML, ОбъектСпр, ЭтоНовый)
	
	Пока ТекстXML.ПрочитатьАтрибут() Цикл
		
		ИмяПараметра  = ТекстXML.Имя;
		ЗначПараметра = ТекстXML.Значение;
		
		Если Не ЗначениеЗаполнено(ЗначПараметра) Тогда Продолжить; КонецЕсли;
		
		Если ИмяПараметра = "IsDeleted" Тогда
			ПометкаУдаления = Булево(Число(ТекстXML.Значение));							
		ИначеЕсли ИмяПараметра = "Name" Тогда
			ОбъектСпр.Наименование = СокрЛП(ТекстXML.Значение);
		ИначеЕсли ИмяПараметра = "A01" Тогда 			
			ОбъектСпр.ИдОбъекта = ЗначПараметра;
		ИначеЕсли ИмяПараметра = "A02" Тогда 											
			ОбъектСпр.ИдОбъекта = ЗначПараметра;
		ИначеЕсли ИмяПараметра = "A03" Тогда 											
			ОбъектСпр.ИдОбъекта = ЗначПараметра;
		ИначеЕсли ИмяПараметра = "A06" Тогда 											
			ОбъектСпр.ИдОбъекта = ЗначПараметра;
		ИначеЕсли ИмяПараметра = "A04" Тогда 											
			ИдФото = ЗначПараметра;								
		ИначеЕсли ИмяПараметра = "A05" Тогда 																			
			ОбъектСпр.ДатаВремяСоздания = ЗначПараметра;
		КонецЕсли; 						
		
	КонецЦикла;
	
	Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпр, "запись") Тогда 	
		ТекстСообщения = "Не удалось записать элемент справочника: " + Строка(ОбъектСпр) + " в базу!";				
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, ОбъектСпр);				
		Возврат;
	КонецЕсли;
	
	НовСтрока = ТабЗагруженныхФото.Добавить();
	НовСтрока.Ссылка = ОбъектСпр.Ссылка;
	НовСтрока.ИдФото = НРег(ИдФото);
	
	ЗаписатьВПротоколЗагрузкуЭлемСпр(ОбъектСпр, ЭтоНовый);	
	
КонецПроцедуры //ЗагрузитьФотографиюДокумента

Процедура ЗагрузитьКонтактнуюИнформацию(ТекстXML, Спр)
	
	ИдЭлемента       = ТекстXML.ПолучитьАтрибут("GUID");
	ИдКонтрагент     = ТекстXML.ПолучитьАтрибут("A01");
	ИдТорговаяТочка  = ТекстXML.ПолучитьАтрибут("A02");
	ИдКонтактноеЛицо = ТекстXML.ПолучитьАтрибут("A03");
	ИдТип 		     = ТекстXML.ПолучитьАтрибут("A04");
	ИдВид 		     = ТекстXML.ПолучитьАтрибут("A05");
	Представление    = ТекстXML.ПолучитьАтрибут("A06");
	
	Если Не ИдКонтрагент = Неопределено Тогда
		ТекОбъект = ПолучитьСсылкуИзСправочника(ИдКонтрагент, "Контрагенты");
		Если Не ЗначениеЗаполнено(ТекОбъект) Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли Не ИдКонтактноеЛицо = Неопределено Тогда
		ТекОбъект = ПолучитьСсылкуИзСправочника(ИдКонтактноеЛицо, "КонтактныеЛица");
		Если Не ЗначениеЗаполнено(ТекОбъект) Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли Не ИдТорговаяТочка = Неопределено Тогда
		ТекОбъект = ПолучитьСсылкуИзСправочника(ИдТорговаяТочка, "кпкТорговыеТочки");
		Если Не ЗначениеЗаполнено(ТекОбъект) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;	
	
	
	Тип = ПолучитьЗначениеПеречисления(ИдТип); 
	Если Тип = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Вид = ПолучитьСсылкуИзСправочника(ИдВид, "ВидыКонтактнойИнформации");
	Если Вид = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИдКонтрагент <> Неопределено или ИдКонтактноеЛицо <> Неопределено Тогда
		
		ТекОбъектОбъект = ТекОбъект.ПолучитьОбъект();
		Если ТекОбъектОбъект = Неопределено тогда
			ЕстьКонтактнаяИнформация = Истина;
			Возврат;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура("Тип, Вид", Тип, Вид);
		
		НайденныеСтроки = ТекОбъектОбъект.КонтактнаяИнформация.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 тогда
			НайденныеСтроки[0].Представление = Представление;
			НайденныеСтроки[0].АдресЭП = "";
			НайденныеСтроки[0].Город  = "";
			НайденныеСтроки[0].ДоменноеИмяСервера = "";
			НайденныеСтроки[0].ЗначенияПолей = "";
			НайденныеСтроки[0].НомерТелефона = "";
			НайденныеСтроки[0].НомерТелефонаБезКодов = "";
			НайденныеСтроки[0].Регион = "";
			НайденныеСтроки[0].Страна = "";
			
		Иначе
			НоваяСтрока = ТекОбъектОбъект.КонтактнаяИнформация.Добавить();
			НоваяСтрока.Вид = Вид;
			НоваяСтрока.Тип = Тип;
			НоваяСтрока.Представление = Представление;
		КонецЕсли;
		
		Если Не ВыполнитьОперациюДляОбъекта(ТекОбъектОбъект, "запись") Тогда 	
			ТекстСообщения = "Не удалось записать контактную информацию для объекта: " + ТекОбъект;				
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, ТекОбъект);					
			Возврат;
		КонецЕсли;
		
		ТекстСообщения = "Записана контактная информация для объекта: " + ТекОбъект;				
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Истина, ТекОбъект);	
		
	ИначеЕсли ИдТорговаяТочка <> Неопределено Тогда
		
		ОбъектТТ = ТекОбъект.ПолучитьОбъект();
		Если ОбъектТТ = Неопределено тогда
			ЕстьКонтактнаяИнформация = Истина;
			Возврат;
		КонецЕсли;
		
		Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			ОбъектТТ.Адрес = Представление;
		ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			ОбъектТТ.Телефоны = Представление;
		КонецЕсли;
		
		Если ОбъектТТ.Владелец = Справочники.Контрагенты.ПустаяСсылка() Тогда
			ОбъектТТ.ОбменДанными.Загрузка = Истина;
		КонецЕсли;						
		
		Если Не ВыполнитьОперациюДляОбъекта(ОбъектТТ, "запись") Тогда 	
			ТекстСообщения = "Не удалось записать элемент справочника: " + ОбъектТТ;				
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, ОбъектТТ);		
			Возврат;
		КонецЕсли;	
		
		ТекстСообщения = "Записана контактная информация для объекта: " + ОбъектТТ;				
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Истина, ОбъектТТ);
		
	КонецЕсли;
	
	Если СписЗагруженныхОбъектовСпр.НайтиПоЗначению(ИдЭлемента) = Неопределено Тогда
		СписЗагруженныхОбъектовСпр.Добавить(ИдЭлемента, "КонтактнаяИнформация");
	КонецЕсли;   					
			 	
КонецПроцедуры //ЗагрузитьКонтактнуюИнформацию
   
Процедура ЗагрузитьСправочник(ТекстXML, Спр)
	
	СпрМенеджер = Справочники[Спр];
	
	ИдОбъекта = Новый УникальныйИдентификатор(ТекстXML.ЗначениеАтрибута("GUID"));
	
	СсылкаОбъекта = СпрМенеджер.ПолучитьСсылку(ИдОбъекта);
	
	ЭтоНовыйОбъект = Истина;
	
	Если СсылкаОбъекта.ПолучитьОбъект() = Неопределено Тогда			
		ОбъектСпр = СпрМенеджер.СоздатьЭлемент();						
		ОбъектСпр.УстановитьСсылкуНового(СсылкаОбъекта);
		ОбъектСпр.ОбменДанными.Загрузка = Истина;
		ОбъектСпр.УстановитьНовыйКод();
	Иначе						
		ОбъектСпр = СсылкаОбъекта.ПолучитьОбъект();
		ОбъектСпр.Разблокировать();
		ЭтоНовыйОбъект = Ложь;
	КонецЕсли; 
	
	// Записываем предварительно, если справочник не подчиненный
	Если СсылкаОбъекта.Метаданные().Владельцы.Количество() = 0 Тогда
		Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпр, "запись") Тогда 	
			ТекстСообщения = "Не удалось записать элемент справочника: " + Строка(ОбъектСпр) + " в базу!";				
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, ОбъектСпр);		
			ТекстXML.Пропустить();
			Возврат;
		КонецЕсли;									
	КонецЕсли;					
	
	Если Спр = "Контрагенты" Тогда   		
		ЗагрузитьКонтрагента(ТекстXML, ОбъектСпр, ЭтоНовыйОбъект);	
		ТекстXML.Прочитать();
	ИначеЕсли Спр = "ДоговорыКонтрагентов" Тогда		
		ЗагрузитьДоговор(ТекстXML, ОбъектСпр, ЭтоНовыйОбъект);   	
		ТекстXML.Прочитать();
	ИначеЕсли Спр = "кпкТорговыеТочки" Тогда 		
		ЗагрузитьТорговуюТочку(ТекстXML, ОбъектСпр, ЭтоНовыйОбъект);   		
		ТекстXML.Прочитать();
	ИначеЕсли Спр = "КонтактныеЛица" Тогда 		
		ЗагрузитьКонтактноеЛицо(ТекстXML, ОбъектСпр, ЭтоНовыйОбъект);       		
		ТекстXML.Прочитать();
	ИначеЕсли Спр = "кпкФотоКДокументам" Тогда   		
		ЗагрузитьФотографиюДокумента(ТекстXML, ОбъектСпр, ЭтоНовыйОбъект);   		
		ТекстXML.Прочитать();
	КонецЕсли;
			
КонецПроцедуры //ЗагрузитьСправочник

Процедура ЗагрузитьСправочники(ТекстXML)
	
	ЕстьКонтактнаяИнформация = Ложь;
	
	СписЗагруженныхОбъектовСпр.Очистить();
		
	ТабЗагруженныхФото.Очистить();		
		
	Пока ТекстXML.Прочитать() Цикл
		
		Если ТекстXML.Имя = "KILLEDS" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ТекстXML.Пропустить();
			Продолжить;
		КонецЕсли;
		
		Если ТекстXML.Имя = "CATALOGS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		КонецЕсли;
 		
		Если ТекстXML.Имя = "CATALOG" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Продолжить;
		КонецЕсли;
		
		ИдСпрXML = ТекстXML.ЗначениеАтрибута("GUID");
		Если ИдСпрXML <> Неопределено Тогда
			ИдСправочника = ИдСпрXML;  												
		КонецЕсли;
		
		Спр = СоответствиеСпрЗагр.Получить(НРег(ИдСправочника));
		
		Если Спр = Неопределено Тогда
			ТекстXML.Пропустить();			
			Если ТекстXML.Имя = "CATALOGS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;
			Иначе
				ИдСпрXML = ТекстXML.ЗначениеАтрибута("GUID");
				Если ИдСпрXML <> Неопределено Тогда
					ИдСправочника = ИдСпрXML;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
			
		Пока ТекстXML.Прочитать() Цикл
			
			Если ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;
			КонецЕсли;
			
			Если ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;
			ИначеЕсли ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ТекстXML.Прочитать();
			ИначеЕсли ТекстXML.Имя = "KILLEDS" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ТекстXML.Пропустить();
				Прервать;
			КонецЕсли;
			
			Если Спр = "КонтактнаяИнформация" Тогда
				ЗагрузитьКонтактнуюИнформацию(ТекстXML, Спр);
				ТекстXML.Прочитать();
			Иначе
				ЗагрузитьСправочник(ТекстXML, Спр);
			КонецЕсли;  								
			
		КонецЦикла;   	 
		
	КонецЦикла;   
		
КонецПроцедуры //ЗагрузитьСправочники

Процедура ЗагрузитьДокументЗаказ(ТекстXML, ОбъектДок, ЭтоНовыйОбъект)
	
	СтруктураПараметров = Новый Структура("ВидДокумента, Номер, Дата, ВидЦен, ИдДок, СостДок," + 
										  "ИдФирмы, ИдКлиента, ИдДоговора, ИдТоргТочки, ИдМаршрута, СуммаДокумента, Комментарий," + 
										  "ВидОплаты, ИдДокОсн, Широта, Долгота, Категория, СпособСоздания");	
	
	ПометкаУдаления = Булево(Число(ТекстXML.ПолучитьАтрибут("IsDeleted")));
	
	СтруктураПараметров.ВидДокумента       = "Заказ";
	СтруктураПараметров.Номер     	   	   = ТекстXML.ПолучитьАтрибут("DocNumber");
	СтруктураПараметров.Дата     	   	   = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt"));    	
	СтруктураПараметров.ИдФирмы 	   	   = ТекстXML.ПолучитьАтрибут("A02");
	СтруктураПараметров.ИдКлиента	   	   = ТекстXML.ПолучитьАтрибут("A03");
	СтруктураПараметров.ИдДоговора 		   = ТекстXML.ПолучитьАтрибут("A05");
	СтруктураПараметров.ИдТоргТочки   	   = ТекстXML.ПолучитьАтрибут("A04");	
	СтруктураПараметров.Комментарий    	   = ТекстXML.ПолучитьАтрибут("A011");	
	СтруктураПараметров.СуммаДокумента	   = Число(ТекстXML.ПолучитьАтрибут("A08"));
	СтруктураПараметров.ВидЦен 	           = ТекстXML.ПолучитьАтрибут("A07");
	
	СтруктураПараметров.Широта	    	   = ТекстXML.ПолучитьАтрибут("A014");
	СтруктураПараметров.Долгота	    	   = ТекстXML.ПолучитьАтрибут("A015");	
	СтруктураПараметров.Категория 	       = ПолучитьСсылкуИзСправочника(ТекстXML.ПолучитьАтрибут("A012"), "кпкКатегорииДокументов");
	СтруктураПараметров.СпособСоздания 	   = "User";
	
	Если ВыбАгент.СоздаватьЗаказыПокупателей Тогда
		Менеджер = Документы.ЗаказПокупателя;
	Иначе
		Менеджер = Документы.КпкЗаявка;
	КонецЕсли;
		
	//
	СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент, Подразделение, Менеджер, ТипЦен");
	    
	ЗаполнитьОсновныеПараметрыДокумента(ОбъектДок, СтруктураПараметров, Менеджер, СтруктураОбязательныхПолей, "");
	
	ОбъектДок.ДатаДоставки 	     = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A010"));
	
	Если Не ОбъектДок.ЭтоНовый() Тогда
		ОбъектДок.Запасы.Очистить();
	Иначе
		ОбъектДок.МаршрутРазвоза = Справочники.МаршрутыРазвоза.ПустойМаршрут;
	КонецЕсли;
	
	
	//ОбъектДок.Дата = КонецДня(ТекущаяДата()) + 60*60;
	ОбъектДок.Дата = КонецДня(ТекущаяДата());
	
	ТекстXML.Прочитать();
	// Заполнение табличной части
	Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		
		ТекстXML.Прочитать();
		
		Если СокрЛП(ТекстXML.ПолучитьАтрибут("GUID")) = "0738E61B-F06F-464A-8483-4249E0254819" Тогда
			
			Пока ТекстXML.Прочитать() Цикл
				
				Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					ТекстXML.Пропустить();
					Прервать;
				КонецЕсли;
				
				Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Продолжить;
				КонецЕсли;
				
				ИдНоменклатуры   = ТекстXML.ПолучитьАтрибут("A01");
				ИдХарактеристики = ТекстXML.ПолучитьАтрибут("A02");
				ИдЕдиницыИзм	 = ТекстXML.ПолучитьАтрибут("A03");
				Количество		 = Число(ТекстXML.ПолучитьАтрибут("A04"));
				Цена			 = Число(ТекстXML.ПолучитьАтрибут("A05"));
				Сумма			 = Число(ТекстXML.ПолучитьАтрибут("A06"));
				СуммаНДС		 = Число(ТекстXML.ПолучитьАтрибут("A07"));
				Вес				 = Число(ТекстXML.ПолучитьАтрибут("A08"));
				СкидкаТЧ		 = Число(ТекстXML.ПолучитьАтрибут("A09"));
				СтавкаНДС		 = Число(ТекстXML.ПолучитьАтрибут("A010"));
				ИдСклад			 = ТекстXML.ПолучитьАтрибут("A011");
								
				ТекНоменклатура  = ПолучитьСсылкуИзСправочника(ИдНоменклатуры, "Номенклатура");
				//ТекЕдиница       = ПолучитьСсылкуИзСправочника(ИдЕдиницыИзм, "ЕдиницыИзмерения");
				
					
				НоваяСтрока = ОбъектДок.Запасы.Добавить();
				НоваяСтрока.Единица			= ТекНоменклатура.ЕдиницаИзмерения;
				
				НоваяСтрока.Номенклатура	= ТекНоменклатура;				
				НоваяСтрока.Количество      = Количество;
				
				//ЦеныСтруктураПараметров = Новый Структура("Номенклатура, ТипЦен, Подразделение, ДатаСреза", ТекНоменклатура, ОбъектДок.ТипЦен, ОбъектДок.Подразделение, ОбъектДок.Дата);
				//НоваяСтрока.Цена 	= ЦенообразованиеСервер.ВернутьЦенуНоменклатуры(ЦеныСтруктураПараметров);
				НоваяСтрока.Цена 	= Цена;
				
				НоваяСтрока.Сумма 	= НоваяСтрока.Цена*НоваяСтрока.Количество;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли; 							
	
	ОбъектДок.СуммаДокумента = ОбъектДок.Запасы.Итог("Сумма");

	Результат = ЗаписьДокумента(ОбъектДок, СтруктураПараметров, ЭтоНовыйОбъект);
	
	Если Результат = 1 Тогда
		
		ОбъектДок.УстановитьПометкуУдаления(ПометкаУдаления);
		
		Если ОбъектДок.ПометкаУдаления Тогда
			ТекстСообщения = "На основании документа: " + Строка(ОбъектДок.Ссылка) + " не будет создан документ ""Реализация товаров и услуг"", потому что он помечен на удаление";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное, Истина, ОбъектДок.Ссылка);
		Иначе
			Если РеализацияПоЗаявкам = 2 Тогда
				//ВвестиРеализациюНаОснованииЗаявки(ОбъектДок);
			КонецЕсли;	
		КонецЕсли;	
		
	ИначеЕсли Результат = 2 Тогда
		
		СообщитьОПропускеДокумента(СтруктураПараметров)
		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьДокументЗаказ

Процедура ЗагрузитьДокументОрдера(ТекстXML, ОбъектДок, ЭтоНовыйОбъект)
	
	СтруктураПараметров = Новый Структура("ВидДокумента, Номер, Дата, ВидЦен, ИдДок, СостДок," + 
										  "ИдФирмы, ИдКлиента, ИдДоговора, ИдТоргТочки, ИдМаршрута, СуммаДокумента, Комментарий," + 
										  "ВидОплаты, ИдДокОсн, Широта, Долгота, Категория, СпособСоздания");	
	
	ПометкаУдаления = Булево(Число(ТекстXML.ПолучитьАтрибут("IsDeleted")));
	
	СтруктураПараметров.ВидДокумента       = "Касса";
	СтруктураПараметров.Номер     	   	   = ТекстXML.ПолучитьАтрибут("DocNumber");
	СтруктураПараметров.Дата     	   	   = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt"));    	
	СтруктураПараметров.ИдФирмы 	   	   = ТекстXML.ПолучитьАтрибут("A01");
	СтруктураПараметров.ИдКлиента	   	   = ТекстXML.ПолучитьАтрибут("A02");	
	СтруктураПараметров.ИдТоргТочки   	   = ТекстXML.ПолучитьАтрибут("A03");
	СтруктураПараметров.ИдДоговора 		   = ТекстXML.ПолучитьАтрибут("A04");
	СтруктураПараметров.Комментарий    	   = ТекстXML.ПолучитьАтрибут("A06");	
	СтруктураПараметров.СуммаДокумента	   = Число(ТекстXML.ПолучитьАтрибут("A07"));
	
	СтруктураПараметров.Широта	    	   = ТекстXML.ПолучитьАтрибут("A012");
	СтруктураПараметров.Долгота	    	   = ТекстXML.ПолучитьАтрибут("A013");	
	СтруктураПараметров.Категория 	       = ПолучитьСсылкуИзСправочника(ТекстXML.ПолучитьАтрибут("A011"), "кпкКатегорииДокументов");
	СтруктураПараметров.СпособСоздания 	   = "User";
	
	Если ТипЗнч(ОбъектДок.Ссылка) = Тип("ДокументСсылка.кпкКасса") Тогда
		Менеджер = Документы.кпкКасса;
	//Иначе
	//	Менеджер = Документы.РасходИзКассы;
	КонецЕсли;
	
	СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент, Подразделение");
	
	ЗаполнитьОсновныеПараметрыДокумента(ОбъектДок, СтруктураПараметров, Менеджер, СтруктураОбязательныхПолей, "");
	
	Расход = ТекстXML.ПолучитьАтрибут("A08");
	Если Расход <> Неопределено Тогда
		ОбъектДок.ЭтоРасход = Истина;
		ОбъектДок.СуммаДокумента = -1*ОбъектДок.СуммаДокумента;
	КонецЕсли;
	
	ИдОснования = ТекстXML.ПолучитьАтрибут("A09"); 
	
	MDocID = Новый УникальныйИдентификатор(ИдОснования);
	ОбъектДок.Сделка = Документы.РасходнаяНакладная.ПолучитьСсылку(MDocID);
	
	Результат = ЗаписьДокумента(ОбъектДок, СтруктураПараметров, ЭтоНовыйОбъект);
	
	Если Результат = 1 Тогда
		
		ОбъектДок.УстановитьПометкуУдаления(ПометкаУдаления);
		
	ИначеЕсли Результат = 2 Тогда
		
		СообщитьОПропускеДокумента(СтруктураПараметров)
		
	КонецЕсли;
	
	
КонецПроцедуры //ЗагрузитьДокументОрдера

Процедура ЗагрузитьДокументМерчендазинг(ТекстXML, ОбъектДок, ЭтоНовыйОбъект)
	
	СтруктураПараметров = Новый Структура("ВидДокумента, Номер, Дата, ВидЦен, ИдДок, СостДок," + 
										  "ИдФирмы, ИдКлиента, ИдДоговора, ИдТоргТочки, ИдМаршрута, СуммаДокумента, Комментарий," + 
										  "ВидОплаты, ИдДокОсн, Широта, Долгота, Категория, СпособСоздания");	
	
	ПометкаУдаления = Булево(Число(ТекстXML.ПолучитьАтрибут("IsDeleted")));
	
	СтруктураПараметров.ВидДокумента       = "Мерчендайзинг";
	СтруктураПараметров.Номер     	   	   = ТекстXML.ПолучитьАтрибут("DocNumber");
	СтруктураПараметров.Дата     	   	   = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt"));    	
	СтруктураПараметров.ИдФирмы 	   	   = ТекстXML.ПолучитьАтрибут("A01");
	СтруктураПараметров.ИдКлиента	   	   = ТекстXML.ПолучитьАтрибут("A02");	
	СтруктураПараметров.ИдТоргТочки   	   = ТекстXML.ПолучитьАтрибут("A03");
	СтруктураПараметров.ВидЦен   	       = ТекстXML.ПолучитьАтрибут("A05");	
	СтруктураПараметров.Комментарий    	   = ТекстXML.ПолучитьАтрибут("A07");	
	
	СтруктураПараметров.Широта	    	   = ТекстXML.ПолучитьАтрибут("A09");
	СтруктураПараметров.Долгота	    	   = ТекстXML.ПолучитьАтрибут("A010");	
	СтруктураПараметров.Категория 	       = ПолучитьСсылкуИзСправочника(ТекстXML.ПолучитьАтрибут("A08"), "кпкКатегорииДокументов");
	СтруктураПараметров.СпособСоздания 	   = "User";
	
	Менеджер = Документы.кпкМерчендайзинг;
	
	СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент, ТорговаяТочка");
	
	ЗаполнитьОсновныеПараметрыДокумента(ОбъектДок, СтруктураПараметров, Менеджер, СтруктураОбязательныхПолей, "");
	
	Если Не ОбъектДок.ЭтоНовый() Тогда
		ОбъектДок.Номенклатура.Очистить();
	КонецЕсли;
	
	ТекстXML.Прочитать();
	// Заполнение табличной части
	Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		
		ТекстXML.Прочитать();
		
		Если НРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = "a9c8662f-9554-4deb-a78a-fb66dc757060" Тогда
			
			Пока ТекстXML.Прочитать() Цикл
				
				Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Прервать;
				КонецЕсли;
				
				Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Продолжить;
				КонецЕсли;
				
				ИдНоменклатуры   = ТекстXML.ПолучитьАтрибут("A01");
				ИдХарактеристики = ТекстXML.ПолучитьАтрибут("A02");
				ИдЕдиницыИзм	 = ТекстXML.ПолучитьАтрибут("A03");
				Количество		 = ТекстXML.ПолучитьАтрибут("A04");
				Цена			 = ТекстXML.ПолучитьАтрибут("A05");
				Сумма			 = ТекстXML.ПолучитьАтрибут("A07");
				
				НоваяСтрока      = ОбъектДок.Номенклатура.Добавить();
				
				ТекНоменклатура  = ПолучитьСсылкуИзСправочника(ИдНоменклатуры, "Номенклатура");
				ТекЕдиница       = ПолучитьСсылкуИзСправочника(ИдЕдиницыИзм, "ЕдиницыИзмерения");									
				
				Если НРег(ТекНоменклатура.УникальныйИдентификатор()) <> НРег(ИдХарактеристики) Тогда
					НоваяСтрока.Характеристика = ПолучитьСсылкуИзСправочника(ИдХарактеристики, "ХарактеристикиНоменклатуры");
				КонецЕсли;
				
				НоваяСтрока.ЕдиницаИзмерения 	 = ТекЕдиница;
				НоваяСтрока.Номенклатура		 = ТекНоменклатура;
				НоваяСтрока.Количество           = Число(Количество);
				НоваяСтрока.Цена      			 = Число(Цена);
				НоваяСтрока.Сумма     			 = Число(Сумма);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли; 							
	
	Результат = ЗаписьДокумента(ОбъектДок, СтруктураПараметров, ЭтоНовыйОбъект);
	
	Если Результат = 1 Тогда
		
		ОбъектДок.УстановитьПометкуУдаления(ПометкаУдаления);
		
	ИначеЕсли Результат = 2 Тогда
		
		СообщитьОПропускеДокумента(СтруктураПараметров)
		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьДокументМерчендайзинг

Процедура ЗагрузитьДокументПосещения(ТекстXML, ОбъектДок, ЭтоНовыйОбъект)
	
	СтруктураПараметров = Новый Структура("ВидДокумента, Номер, Дата, ТипЦен, ИдДок, СостДок," + 
										  "ИдФирмы, ИдКлиента, ИдДоговора, ИдТоргТочки, ИдМаршрута, СуммаДокумента, Комментарий," + 
										  "ВидОплаты, ИдДокОсн, Широта, Долгота, Категория, СпособСоздания");	
	
	ПометкаУдаления = Булево(Число(ТекстXML.ПолучитьАтрибут("IsDeleted")));
	
	СтруктураПараметров.ВидДокумента       = "Заказ";
	СтруктураПараметров.Номер     	   	   = ТекстXML.ПолучитьАтрибут("DocNumber");
	СтруктураПараметров.Дата     	   	   = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt"));    	
	СтруктураПараметров.ИдФирмы 	   	   = ТекстXML.ПолучитьАтрибут("A01");
	СтруктураПараметров.ИдКлиента	   	   = ТекстXML.ПолучитьАтрибут("A02");
	СтруктураПараметров.ИдТоргТочки   	   = ТекстXML.ПолучитьАтрибут("A03");
	СтруктураПараметров.Комментарий    	   = ТекстXML.ПолучитьАтрибут("A05");	
	
	СтруктураПараметров.Широта	    	   = ТекстXML.ПолучитьАтрибут("A07");
	СтруктураПараметров.Долгота	    	   = ТекстXML.ПолучитьАтрибут("A08");	
	СтруктураПараметров.Категория 	       = ПолучитьСсылкуИзСправочника(ТекстXML.ПолучитьАтрибут("A06"), "кпкКатегорииДокументов");
	СтруктураПараметров.СпособСоздания 	   = "User";
	
	Менеджер = Документы.кпкПосещение;
		
	//
	СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент, ТорговаяТочка");
	
	ЗаполнитьОсновныеПараметрыДокумента(ОбъектДок, СтруктураПараметров, Менеджер, СтруктураОбязательныхПолей, "Продажа");
	ОбъектДок.Результат = ПолучитьСсылкуИзСправочника(ТекстXML.ПолучитьАтрибут("A04"), "кпкРезультатыПосещений");
	Если Не ОбъектДок.ЭтоНовый() Тогда
		ОбъектДок.Вопросы.Очистить();
	КонецЕсли;
	
	ТекстXML.Прочитать();
	// Заполнение табличной части
	Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		
		ТекстXML.Прочитать();
		
		Если НРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = "99f6a8ce-3046-4782-ab5e-557f40243749" Тогда
			
			Пока ТекстXML.Прочитать() Цикл
				
				Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					ТекстXML.Пропустить();
					Прервать;
				КонецЕсли;
				
				Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Продолжить;
				КонецЕсли;
				
				ИдВопрос = ТекстXML.ПолучитьАтрибут("A01");
				ИдОтвет  = ТекстXML.ПолучитьАтрибут("A02");
				
				ТекВопрос  = ПолучитьСсылкуИзСправочника(ИдВопрос, "кпкВопросыАнкеты");
				ТекОтвет   = ПолучитьСсылкуИзСправочника(ИдОтвет, "кпкОтветыАнкеты");
				
				Если ЗначениеЗаполнено(ТекВопрос) и ЗначениеЗаполнено(ТекОтвет) Тогда				
					НоваяСтрока 	   = ОбъектДок.Вопросы.Добавить();
					НоваяСтрока.Вопрос = ТекВопрос;
					НоваяСтрока.Ответ  = ТекОтвет;	
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли; 							
	
	Результат = ЗаписьДокумента(ОбъектДок, СтруктураПараметров, ЭтоНовыйОбъект);
	
	Если Результат = 1 Тогда
		
		ОбъектДок.УстановитьПометкуУдаления(ПометкаУдаления);	
		
	ИначеЕсли Результат = 2 Тогда
		
		СообщитьОПропускеДокумента(СтруктураПараметров)
		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьДокументПосещение

&НаСервере
Процедура ЗагрузитьДокументПоступление(ТекстXML, ОбъектДок, ЭтоНовыйОбъект)
	
	СтруктураПараметров = Новый Структура("ВидДокумента, Номер, Дата, ВидЦен, ИдФирмы," +
										  "ИдКлиента, ИдТоргТочки, ИдДоговора, СуммаДокумента, Комментарий, ИдДокОсн," + 
										  "Широта, Долгота, Категория, СпособСоздания");
	
	СтруктураПараметров.ВидДокумента       	= "Поступление";
	СтруктураПараметров.Номер     	   	   = ТекстXML.ПолучитьАтрибут("DocNumber");
	СтруктураПараметров.Дата     	   	   = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt"));    	
	СтруктураПараметров.ИдФирмы 	   	   = ТекстXML.ПолучитьАтрибут("A01");
	СтруктураПараметров.ИдКлиента  	   	= ТекстXML.ПолучитьАтрибут("A02");	
	СтруктураПараметров.ВидЦен 	           = ТекстXML.ПолучитьАтрибут("A06");
	
	СтруктураПараметров.Комментарий    	   = ТекстXML.ПолучитьАтрибут("A09");	
	СтруктураПараметров.СуммаДокумента	   = Число(ТекстXML.ПолучитьАтрибут("A07"));
	
	СтруктураПараметров.Широта	    	   = ТекстXML.ПолучитьАтрибут("A013");
	СтруктураПараметров.Долгота	    	   = ТекстXML.ПолучитьАтрибут("A014");	
	СтруктураПараметров.Категория 	       = ПолучитьСсылкуИзСправочника(ТекстXML.ПолучитьАтрибут("A010"), "кпкКатегорииДокументов");
	СтруктураПараметров.СпособСоздания 	   = "User";
	
	ДокМенеджер = Документы["ВозвратОтПокупателя"];
	
	ОбъектДок.Заполнить(Неопределено);
	
	ЭтоВозврат = Истина;
	Если ТипЗнч(ОбъектДок) = Тип("ДокументОбъект.ПриходнаяНакладная") Тогда		
		ЭтоВозврат = Ложь;
	КонецЕсли;	
	
	СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент, Подразделение, Менеджер, ТипЦен");
	
	ЗаполнитьОсновныеПараметрыДокумента(ОбъектДок, СтруктураПараметров, ДокМенеджер, СтруктураОбязательныхПолей, "");
	
	Если ОбъектДок.ЭтоНовый() Тогда
		ОбъектДок.ДатаСоздания = ТекущаяДата();
	Иначе
    	ОбъектДок.Запасы.Очистить();
	КонецЕсли;
	
	ОбъектДок.Дата = КонецДня(ТекущаяДата()) + 60*60;
	
	ИдОснования = ТекстXML.ПолучитьАтрибут("A011"); 
	
	
	
	Если НЕ ПустаяСтрока(ИдОснования) Тогда
		
		MDocID = Новый УникальныйИдентификатор(ИдОснования);
		ДокОсн = Документы.РасходнаяНакладная.ПолучитьСсылку(MDocID);
		
		Если ДокОсн.ПолучитьОбъект() <> Неопределено Тогда
			ДокОсн = ДокОсн.ПолучитьОбъект();
			ДокОсн.Разблокировать();
		КонецЕсли;
		
		ОбъектДок.ДокОсн = ДокОсн.Ссылка;
		
	КонецЕсли;
	
	
	Если ЭтоВозврат Тогда
		ИмяТЧ = "235dc1ea-5963-4dcd-95e1-e8cef487a2ae";
	Иначе
		ИмяТЧ = "a10221fa-5ac6-4e8c-80d8-d40d8dfc7779";
	КонецЕсли;
	
	ТекстXML.Прочитать();
	
	СоответствиеСкидок = ЦенообразованиеСервер.ВернутьАвтоматическиеСкидки(Новый Структура("Контрагент", ОбъектДок.Контрагент));
	
	// Заполнение табличной части
	Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		
		ТекстXML.Прочитать();
		
		Если НРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = ИмяТЧ Тогда
			
			Пока ТекстXML.Прочитать() Цикл
				
				Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Прервать;
				КонецЕсли;
				
				Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Продолжить;
				КонецЕсли;
				
				ИдНоменклатуры   = ТекстXML.ПолучитьАтрибут("A01");
				Количество		 = ТекстXML.ПолучитьАтрибут("A04");
				
				ТекНоменклатура  = ПолучитьСсылкуИзСправочника(ИдНоменклатуры, "Номенклатура");
				
				НоваяСтрока = ОбъектДок.Запасы.Добавить();
				
				НоваяСтрока.Номенклатура 		= ТекНоменклатура;
    			НоваяСтрока.Количество          = Количество;
				НоваяСтрока.СтруктурнаяЕдиница	= Константы.СкладВозвратов.Получить();
				
				СтруктураПараметровДляЦены = Новый Структура("Номенклатура, ТипЦен, Подразделение, ДатаСреза", ТекНоменклатура, ОбъектДок.ТипЦен, ОбъектДок.Подразделение, ОбъектДок.Дата);
				НоваяСтрока.Цена      			= ЦенообразованиеСервер.ВернутьЦенуНоменклатуры(СтруктураПараметровДляЦены);
				
				//НоваяСтрока.ПроцентСкидки		= СоответствиеСкидок.Получить(СокрЛП(ТекНоменклатура.Родитель.Код) +" / "+СокрЛП(ТекНоменклатура.ЦеноваяГруппа.Код));
				НоваяСтрока.ПроцентСкидки		= СоответствиеСкидок.Получить(СокрЛП(ТекНоменклатура.Родитель.Код) +" / "+СокрЛП(Справочники.ЦеновыеГруппы.ПустаяСсылка().Код));
				
				НоваяСтрока.СуммаБезСкидки		= НоваяСтрока.Цена*НоваяСтрока.Количество;
				НоваяСтрока.Скидка				= НоваяСтрока.СуммаБезСкидки * НоваяСтрока.ПроцентСкидки / 100;
				НоваяСтрока.Сумма				= НоваяСтрока.СуммаБезСкидки - НоваяСтрока.Скидка;
								
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли; 				
	
	Результат = ЗаписьДокумента(ОбъектДок, СтруктураПараметров, ЭтоНовыйОбъект);
	
	
КонецПроцедуры // ЗагрузитьДокументПоступление


Функция ЗагрузитьДокумент(ТекстXML, Док)
	
	Если Док = "ПоступлениеВКассу" Тогда
		
		ДокМенеджер = Документы.КпкКасса;
		
		Расход = ТекстXML.ПолучитьАтрибут("A08");
		Если Расход <> Неопределено Тогда
			Если Булево(Число(Расход)) Тогда
				Док = "РасходИзКассы";
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Док = "ЗаказПокупателя" Тогда
		Если ВыбАгент.СоздаватьЗаказыПокупателей Тогда
			ДокМенеджер = Документы.ЗаказПокупателя;	
		Иначе
			ДокМенеджер = Документы.КпкЗаявка;
		КонецЕсли;
		
	Иначе
		ДокМенеджер = Документы[Док];	
	КонецЕсли;
	
	
	
	
	Проведен 	     = Булево(Число(ТекстXML.ЗначениеАтрибута("IsPost")));					
	Дата     		 = Строка(ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt")));
	Номер    	     = СокрЛП(ТекстXML.ПолучитьАтрибут("DocNumber"));
	ПредставлениеДок = ДокМенеджер.ПустаяСсылка().Метаданные().Синоним;
	
	Если Не Проведен И НЕ(Док = "ВозвратОтПокупателя") Тогда
		ОповеститьОСобытии("Пропущена загрузка документа: " + ПредставлениеДок + " №: " + Номер + " от: " + Дата + ". Документ не проведен в мобильном приложении!");						
		ТекстXML.Пропустить();
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоНовыйОбъект 	= Истина;
	
	ИдОбъекта = Новый УникальныйИдентификатор(ТекстXML.ЗначениеАтрибута("GUID"));
	
	СсылкаОбъекта = ДокМенеджер.ПолучитьСсылку(ИдОбъекта);
	
	Если СсылкаОбъекта.ПолучитьОбъект() = Неопределено Тогда			
		ОбъектДок = ДокМенеджер.СоздатьДокумент();						
		ОбъектДок.УстановитьСсылкуНового(СсылкаОбъекта);
		ЭтоНовыйОбъект = Истина;						
	Иначе
		Если Не флОбновлять Тогда							
			ТекстXML.Пропустить();
			Возврат Ложь;
		КонецЕсли;
		ОбъектДок = СсылкаОбъекта.ПолучитьОбъект();
		ОбъектДок.Разблокировать();
		ЭтоНовыйОбъект = Ложь;
	КонецЕсли;
	
	Если Док = "ЗаказПокупателя" Тогда
		
		ЗагрузитьДокументЗаказ(ТекстXML, ОбъектДок, ЭтоНовыйОбъект);
		
	ИначеЕсли Док = "ПоступлениеВКассу" Или Док = "РасходИзКассы" Тогда 
		
		ЗагрузитьДокументОрдера(ТекстXML, ОбъектДок, ЭтоНовыйОбъект);
		
		ТекстXML.Прочитать();
		
	ИначеЕсли Док = "кпкМерчендайзинг" Тогда
		
		ЗагрузитьДокументМерчендазинг(ТекстXML, ОбъектДок, ЭтоНовыйОбъект);
		
	ИначеЕсли Док = "кпкПосещение" Тогда
		
		ЗагрузитьДокументПосещения(ТекстXML, ОбъектДок, ЭтоНовыйОбъект);
		
	ИначеЕсли Док = "ВозвратОтПокупателя" Тогда
		ЗагрузитьДокументПоступление(ТекстXML, ОбъектДок, ЭтоНовыйОбъект);
	Иначе
		
		ТекстXML.Пропустить();
		Если Не ЗагрузитьДокумент(ТекстXML, Док) Тогда
			Возврат Ложь;
		КонецЕсли; 	
		
	КонецЕсли;  	

	Возврат Истина;

КонецФункции //ЗагрузитьДокумент

Процедура ЗагрузитьДокументы(ТекстXML)
	
	Пока ТекстXML.Прочитать() Цикл
		
		Если ТекстXML.Имя = "KILLEDS" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ТекстXML.Пропустить();
			Продолжить;
		КонецЕсли;
		
		Если ТекстXML.Имя = "DOCUMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		КонецЕсли;
 		
		Если ТекстXML.Имя = "DOCUMENT" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Продолжить;
		КонецЕсли;
		
		ИдДокXML = ТекстXML.ЗначениеАтрибута("GUID");
		Если ИдДокXML <> Неопределено Тогда
			ИдДокумента = ИдДокXML;  												
		КонецЕсли;
        		
		Док = СоответствиеДокЗагр.Получить(НРег(ИдДокумента));
		
		Если Док = Неопределено Тогда 
			ТекстXML.Пропустить();
			Если ТекстXML.Имя = "DOCUMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;
			КонецЕсли;   			
		КонецЕсли;
		
		Пока ТекстXML.Прочитать() Цикл
			~М2:
			Если ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;
			ИначеЕсли ТекстXML.Имя = "DOCUMENT" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;			
			ИначеЕсли ТекстXML.Имя = "KILLEDS" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ТекстXML.Пропустить();
				Прервать;
			КонецЕсли;
 			
			Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если НЕ ЗагрузитьДокумент(ТекстXML, Док) тогда 
			    	Перейти ~М2;
                КонецЕсли;
			КонецЕсли;
					
		КонецЦикла;   	 
		
	КонецЦикла;  
		
КонецПроцедуры //ЗагрузитьДокументы

Функция ЗагрузитьФотографии(ТекстXML)
	
	// В этой папке у нас уже содержатся распакованные фото из файла выгрузки
	ПапкаВремФото = КаталогВременныхФайлов() + "Photos1C\";    
	
	Пока ТекстXML.Прочитать() Цикл
		
		Если ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		КонецЕсли;
		
		Если ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Пока ТекстXML.Прочитать() Цикл
				
				Если ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Прервать;
				КонецЕсли;
				
				Если ТекстXML.Имя = "ITEM" И Не ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда					
					
					ИдФото = Новый УникальныйИдентификатор(ТекстXML.ЗначениеАтрибута("GUID"));
					ИмяФайлаФото = ТекстXML.ЗначениеАтрибута("FileName");
					ФорматФайла  = ТекстXML.ЗначениеАтрибута("Format");
					Комментарий  = ТекстXML.ЗначениеАтрибута("Description");
					
					НайдСтроки = ТабЗагруженныхФото.НайтиСтроки(Новый Структура("ИдФото", НРег(ИдФото))); 
					
					Если НайдСтроки.Количество() = 0 Тогда
						
						// Фото, не привязанное к документу
						НовСтрока = ТабЗагруженныхФото.Добавить();
						НовСтрока.Ссылка = Неопределено;
						НовСтрока.ИдФото = ИдФото;     						
						
					Иначе
						
						Для Каждого НайдСтрока Из НайдСтроки Цикл
							
							ОбъектСпрФото = НайдСтрока.Ссылка.ПолучитьОбъект();
							
							Если ОбъектСпрФото = Неопределено Тогда Продолжить; КонецЕсли;
							
							ИдДок = ОбъектСпрФото.ИдОбъекта;
							
							Запрос = Новый Запрос("ВЫБРАТЬ
							|	СведенияДок.КПКДокумент
							|ИЗ
							|	РегистрСведений.кпкСведенияДокумента.СрезПоследних(&Дата, ИДДокумента = &ИД) КАК СведенияДок");    							
							
							Запрос.УстановитьПараметр("ИД",   НРег(ИдДок));
							Запрос.УстановитьПараметр("Дата", ТекущаяДата());
							
							Выборка = Запрос.Выполнить().Выбрать();
							Если Выборка.Следующий() Тогда 
								Док = Выборка.КПКДокумент;
							КонецЕсли;
							
							Если Док = Неопределено Тогда
								ТекстСообщения = "Документ, на который ссылается фотография """ + ИмяФайлаФото + """ не был загружен в ЦБД (идентификатор документа: " + ИдДок + """)!";
								ОповеститьОСобытии(ТекстСообщения);
								ОповеститьОСобытии("Пропущена загрузка фотографии: """ + ИмяФайлаФото + """!", СтатусСообщения.Важное);
								Продолжить;
							КонецЕсли; 	
							
							ПолныйПутьФото = ПапкаВремФото + ИдФото;
							
							ФайлФотоНаДиске = Новый Файл(ПолныйПутьФото);
							
							Если Не ФайлФотоНаДиске.Существует() Тогда Продолжить; КонецЕсли;
							
							ФотоСКПК 		  	  = Новый Картинка(ПолныйПутьФото, Ложь);
							НоваяКартинка = ФотоСКПК.Преобразовать(ФорматКартинки.PNG);
							ХранилищеКартинки 	  = Новый ХранилищеЗначения(НоваяКартинка, Новый СжатиеДанных);
							ФотоДата = ФайлФотоНаДиске.ПолучитьВремяИзменения();
							
							ОбъектСпрФото.ФайлКПК      = ИмяФайлаФото;
							ОбъектСпрФото.Комментарий  = СокрЛП(Комментарий);
							ОбъектСпрФото.ФайлФото     = ХранилищеКартинки;
							ОбъектСпрФото.Док          = Док;	
							ОбъектСпрФото.Наименование = ?(Комментарий = "", ИмяФайлаФото, Комментарий);
							ОбъектСпрФото.ДатаВремяСоздания = ФотоДата;
							
							Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпрФото, "запись") Тогда 						
								ОповеститьОСобытии("Не удалось записать элемент справочника ""Фотографии документов""", СтатусСообщения.Важное);
								Продолжить;			
							КонецЕсли;    							
							
							// Для документов "Заявка", "Реализация" и "Поступление" записываем еще фото 
							// в справочник "Хранилище дополнительной тинформации" типовой конфигурации	
							Если ТипЗнч(Док) = Тип("ДокументСсылка.ЗаказПокупателя") или  ТипЗнч(Док) = Тип("ДокументСсылка.РасходнаяНакладная") или 
								ТипЗнч(Док) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
								
								Если Найти(ИмяФайлаФото,".") > 0 тогда
									ИмяФайлаФото = Лев(ИмяФайлаФото,Найти(ИмяФайлаФото,".")-1);
								КонецЕсли;
								
								Запрос = Новый Запрос("ВЫБРАТЬ
								|	Файлы.Ссылка
								|ИЗ
								|	Справочник.Файлы КАК Файлы
								|ГДЕ
								|	Файлы.ВладелецФайла = &Объект
								|	И Файлы.ПолноеНаименование ПОДОБНО &ИмяФайла");
								
								Запрос.УстановитьПараметр("Объект",   Док.Ссылка);
								Запрос.УстановитьПараметр("ИмяФайла", ИмяФайлаФото);
								
								Результат = Запрос.Выполнить();
								
								СпрМенеджер = Справочники.Файлы;
								
								Если Результат.Пустой() Тогда
									НовыйОбъект = СпрМенеджер.СоздатьЭлемент();
									НовыйОбъект.Автор 	  = ОбщегоНазначения.ТекущийПользователь();
									НовыйОбъект.ДатаСоздания 	  = ФотоДата;
									НовыйОбъект.ВладелецФайла  	  = Док.Ссылка;
									НовыйОбъект.ПолноеНаименование  = ИмяФайлаФото;
									НовыйОбъект.Наименование  = ?(Комментарий = "", ИмяФайлаФото, Комментарий);
									
									Если Не ВыполнитьОперациюДляОбъекта(НовыйОбъект, "запись") Тогда 						
										ОповеститьОСобытии("Не удалось сохранить фотографию  для документа: " + Строка(Док.Ссылка), СтатусСообщения.Важное);
										Продолжить;			
									КонецЕсли;
									
									НовыйВерсииФайлов = Справочники.ВерсииФайлов.СоздатьЭлемент();
									НовыйВерсииФайлов.Владелец = НовыйОбъект.Ссылка;
									НовыйВерсииФайлов.Наименование = НовыйОбъект.Наименование;
									НовыйВерсииФайлов.ПолноеНаименование = НовыйОбъект.ПолноеНаименование;
									НовыйВерсииФайлов.ФайлХранилище = Новый ХранилищеЗначения(НоваяКартинка, Новый СжатиеДанных);
									НовыйВерсииФайлов.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
									НовыйВерсииФайлов.Автор = НовыйОбъект.Автор;
									НовыйВерсииФайлов.ДатаСоздания = НовыйОбъект.ДатаСоздания;
									НовыйВерсииФайлов.ДатаМодификацииУниверсальная = НовыйОбъект.ДатаСоздания;
									НовыйВерсииФайлов.НомерВерсии = 1;
									НовыйВерсииФайлов.Расширение = "PNG";
									
									Если Не ВыполнитьОперациюДляОбъекта(НовыйВерсииФайлов, "запись") Тогда 						
										ОповеститьОСобытии("Не удалось сохранить фотографию  для документа: " + Строка(Док.Ссылка), СтатусСообщения.Важное);
										Продолжить;			
									КонецЕсли;
									
									НовыйОбъект.ТекущаяВерсия = НовыйВерсииФайлов.Ссылка;
									НовыйОбъект.ТекущаяВерсияАвтор = НовыйОбъект.Автор;
									НовыйОбъект.ТекущаяВерсияДатаСоздания = НовыйОбъект.ДатаСоздания;
									НовыйОбъект.ТекущаяВерсияРасширение = "PNG";
									
									НовыйОбъект.Записать();
									
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЦикла;				
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции //ЗагрузитьФотографии()    


Процедура XMLЗагрузитьДанныеМобильнаяТорговляКонтактнаяИнформация(ФайлЗагрузки)
	
	ТекстXML = Новый ЧтениеXML;
	
	ТекстXML.ОткрытьФайл(ФайлЗагрузки);
	
	Пока ТекстXML.Прочитать() Цикл
		Если ТекстXML.Имя = "CATALOGS" Тогда
			Пока ТекстXML.Прочитать() Цикл
				
				Если ТекстXML.Имя = "KILLEDS" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					ТекстXML.Пропустить();
					Продолжить;
				КонецЕсли;
				
				Если ТекстXML.Имя = "CATALOGS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Прервать;
				КонецЕсли;
		 		
				Если ТекстXML.Имя = "CATALOG" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Продолжить;
				КонецЕсли;
				
				ИдСпрXML = ТекстXML.ЗначениеАтрибута("GUID");
				Если ИдСпрXML <> Неопределено Тогда
					ИдСправочника = ИдСпрXML;  												
				КонецЕсли;
				
				Спр = СоответствиеСпрЗагр.Получить(НРег(ИдСправочника));
				
				Если Спр = Неопределено Тогда
					ТекстXML.Пропустить();			
					Если ТекстXML.Имя = "CATALOGS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
						Прервать;
					Иначе
						ИдСпрXML = ТекстXML.ЗначениеАтрибута("GUID");
						Если ИдСпрXML <> Неопределено Тогда
							ИдСправочника = ИдСпрXML;
						КонецЕсли;
						Продолжить;
					КонецЕсли;
				КонецЕсли;
					
				Пока ТекстXML.Прочитать() Цикл
					
					Если ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
						Прервать;
					КонецЕсли;
					
					Если ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
						Прервать;
					ИначеЕсли ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						ТекстXML.Прочитать();
					ИначеЕсли ТекстXML.Имя = "KILLEDS" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						ТекстXML.Пропустить();
						Прервать;
					КонецЕсли;
					
					Если Спр = "КонтактнаяИнформация" Тогда
						ЗагрузитьКонтактнуюИнформацию(ТекстXML, Спр);
						ТекстXML.Прочитать();
					КонецЕсли;  								
					
				КонецЦикла;   	 
				
			КонецЦикла;   
			
		КонецЕсли;
	КонецЦикла;
	
	ТекстXML.Закрыть();
	
КонецПроцедуры

//	----------------------------------------------------------------------------
//	XMLЗагрузитьДанныеМобильнаяТорговля()
//	!"№
Процедура XMLЗагрузитьДанныеМобильнаяТорговля(ФайлЗагрузки)
	
	ТекстXML = Новый ЧтениеXML;
	
	ТекстXML.ОткрытьФайл(ФайлЗагрузки);
	
	ОповеститьОСобытии("Начало загрузки данных от агента: " + ВыбАгент.Наименование, СтатусСообщения.Информация);
	
	ПрерватьЗагрузку = Ложь;
	
	Пока ТекстXML.Прочитать() Цикл
		
		Если Не ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда Продолжить; КонецЕсли;
		
		Если ТекстXML.Имя = "CONSTANTS" Тогда
			
			Если ТекстXML.Имя = "CONSTANTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Продолжить;
			КонецЕсли;
			
			Пока ТекстXML.Прочитать() Цикл
				
				Если ТекстXML.Имя = "CONSTANTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Прервать;
				КонецЕсли;
				
				ЗапросОбновления = "0";
				
				Если ТекстXML.Имя = "ITEM" Тогда
					Если "79c698db-3c55-465e-acfe-4741acdd5655" = Нрег(ТекстXML.ЗначениеАтрибута("GUID")) Тогда
						АгентИд  = ТекстXML.ЗначениеАтрибута("Value");							
						АгентИзФайла = ПолучитьСсылкуИзСправочника(АгентИд, "Агенты");
						Если АгентИзФайла <> ВыбАгент Тогда							
							ОповеститьОСобытии("Получен файл загрузки от агента: " + АгентИзФайла, СтатусСообщения.Информация);							
							Если АгентИзФайла.ПолучитьОбъект() = Неопределено Тогда
								ОповеститьОСобытии("Агент с идентификатором: " + АгентИд + " не найден в текущей БД! Загрузка не будет выполнена!");
								ПрерватьЗагрузку = Истина;
								Возврат;
							КонецЕсли;                                                                                         							
							ВыбАгент = АгентИзФайла;                                                                           							
						КонецЕсли;
						Прервать;
					ИначеЕсли "cf41ba05-a4ee-4492-9a2c-c96394c4864a" = Нрег(ТекстXML.ЗначениеАтрибута("GUID")) Тогда
						ЗапросОбновления = ТекстXML.ЗначениеАтрибута("Value");							
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла; 			
								
			Если ЗапросОбновления <> "0" Тогда
				Код = ЗапросОбновления;
				
				СпрЗапросы = Справочники.кпкЗапросы;
				СпрЗапросыАгентов = Справочники.кпкЗапросыАгентов;
				Если НЕ ПустаяСтрока(Код) Тогда
					Запрос = СпрЗапросы.НайтиПоКоду(Код);
				Иначе
					Продолжить;
				КонецЕсли;
				
				НужныйЗапрос = СпрЗапросыАгентов.НайтиПоРеквизиту("Запрос", Запрос, ,ВыбАгент);
				Если НужныйЗапрос = СпрЗапросыАгентов.ПустаяСсылка() Тогда
					ТекЗапросАгента = СпрЗапросыАгентов;
					Если Не ВыполнитьОперациюДляОбъекта(ТекЗапросАгента, "создание") Тогда 			
						ТекстСообщения = "Не удалось создать новый элемент справочника ""Запросы агентов""!";
						ОповеститьОСобытии(ТекстСообщения);
						Продолжить;			
					КонецЕсли;   
					ТекЗапросАгента.Владелец = ВыбАгент;
					ТекЗапросАгента.Запрос   = Запрос;
				Иначе
					ТекЗапросАгента = НужныйЗапрос.ПолучитьОбъект();
				КонецЕсли;
				
				Если Не ТекЗапросАгента.Активен Тогда
					ТекЗапросАгента.Активен = Истина;					
				КонецЕсли;
				
				Если ВыполнитьОперациюДляОбъекта(ТекЗапросАгента, "запись") Тогда
					ОтветитьНаЗапрос = Истина;
					Возврат;
				Иначе
					ТекстСообщения = "Не удалось прочитать запрос для агента: " + ВыбАгент + ". Ответ на запрос не будет выполнен!";
					ОповеститьОСобытии(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТекстXML.Имя = "CATALOGS" Тогда
			
			ЗагрузитьСправочники(ТекстXML);
			
		ИначеЕсли ТекстXML.Имя = "DOCUMENTS" Тогда
			
			ЗагрузитьДокументы(ТекстXML);
			
		ИначеЕсли ТекстXML.Имя = "PICTURES" Тогда
			
			Если ТекстXML.Имя = "PICTURES" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;
			КонецЕсли;   
			
			ЗагрузитьФотографии(ТекстXML);						
			
		КонецЕсли;				
		
	КонецЦикла;
	
	ТекстXML.Закрыть();
	
	//ЗакончитьЗагрузкуОрдеров();
	
	ОповеститьОСобытии("Данные от агента: " + ВыбАгент.Наименование + " успешно загружены!", СтатусСообщения.Информация);
	
	
КонецПроцедуры	// XMLЗагрузитьДанныеМобильнаяТорговля()

// Функция возвращает ссылку на элемент по полученному из XML уникальному идентификатору
// Параметры:
// ИдДокумента - Строка Уникального идентификатора
// Док - Имя документа, в котором необходимо найти элемент
// Возвращаемое значение:
// Найденная ссылка или пустая ссылка на документ, если искомого элеимента нет или неправильный идентификатор
Функция ПолучитьСсылкуИзДокумента(ИдДокумента, Док)
	
	Перем СсылкаДокумента;
	
	Если ИдДокумента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдДокумента = НРег(ИдДокумента);
	
	ДокМенеджер = документы[Док];
	
	Если ЗначениеЗаполнено(ИдДокумента) Тогда
		
		ГуидДокумента = Новый УникальныйИдентификатор(ИдДокумента);
		СсылкаДокумента = ДокМенеджер.ПолучитьСсылку(ГуидДокумента);
		
	КонецЕсли;
	
	Если СсылкаДокумента = Неопределено Тогда
		СсылкаДокумента = ДокМенеджер.ПустаяСсылка();
	КонецЕсли;
	
	Возврат СсылкаДокумента;
	
КонецФункции //ПолучитьСсылкуИзСправочника

Процедура ЗакончитьЗагрузкуОрдеров()
	
	СписокОснованийДляОрдера = Новый СписокЗначений;
	СписокОснованийДляОрдера.Добавить("ЗаказПокупателя");
	СписокОснованийДляОрдера.Добавить("РасходнаяНакладная");
	СписокОснованийДляОрдера.Добавить("АктВыполненныхРабот");
	СписокОснованийДляОрдера.Добавить("ПриходнаяНакладная");
	СписокОснованийДляОрдера.Добавить("РасходнаяНакладная");
	
	Для Каждого СтрокаОрдера Из СписокОрдеровДляЗаписи Цикл
		
		ОбъектДок = СтрокаОрдера.Документ;
		СтрокаПлатеж = ОбъектДок.РасшифровкаПлатежа[0];
		
		Для Каждого ТекВидОснования Из СписокОснованийДляОрдера Цикл
			Если ТекВидОснования.Значение = "ЗаказПокупателя" тогда
				ДокОснования = ПолучитьСсылкуИзДокумента(СтрокаОрдера.ИдОснования, ТекВидОснования.Значение);
				Если ЗначениеЗаполнено(ДокОснования) Тогда
					ОбъектОснования = ДокОснования.ПолучитьОбъект();
					Если ОбъектОснования <> Неопределено Тогда
						СтрокаПлатеж.Заказ = ОбъектОснования.Ссылка;
						ОбъектДок.ДокументОснование = ОбъектОснования.Ссылка;
						СтрокаПлатеж.ПризнакАванса = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ДокОснования = ПолучитьСсылкуИзДокумента(СтрокаОрдера.ИдОснования, ТекВидОснования.Значение);
				Если ЗначениеЗаполнено(ДокОснования) Тогда
					ОбъектОснования = ДокОснования.ПолучитьОбъект();
					Если ОбъектОснования <> Неопределено Тогда
						СтрокаПлатеж.Документ = ОбъектОснования.Ссылка;
						ОбъектДок.ДокументОснование = ОбъектОснования.Ссылка;
						СтрокаПлатеж.ПризнакАванса = Ложь;
						Попытка
							СтрокаПлатеж.Заказ = ОбъектОснования.Заказ;
						Исключение
						КонецПопытки;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Результат = ЗаписьДокумента(ОбъектДок, СтрокаОрдера.СтруктураДокКПК, СтрокаОрдера.ЭтоНовыйОбъект);
		
		Если Результат = 2 Тогда
		
			СообщитьОПропускеДокумента(СтрокаОрдера.СтруктураДокКПК)
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокОрдеровДляЗаписи.Очистить();
	
КонецПроцедуры //ЗакончитьЗагрузкуОрдеров

Функция ПолучитьБазовуюЕдиницу(Номенклатура)
	
	ТекБазоваяЕдиница = Номенклатура.ЕдиницаИзмерения;
	
	
	Возврат ТекБазоваяЕдиница;
			
КонецФункции //ПолучитьБазовуюЕдиницу

Функция ПолучитьЕдиницуХраненияОстатков(Номенклатура)

	СписокЕдиниц = Справочники.ЕдиницыИзмерения.Выбрать( , Номенклатура);
	Пока СписокЕдиниц.Следующий() Цикл
		Если СписокЕдиниц.Коэффициент = 1 Тогда
			Возврат СписокЕдиниц.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	ТекЕдиница = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
	ТекЕдиница.Владелец = Номенклатура;
	ТекЕдиница.Коэффициент = 1;
	ТекЕдиница.Наименование = Номенклатура.ЕдиницаИзмерения.Наименование;
	ТекЕдиница.Записать();
	Возврат ТекЕдиница.Ссылка;
	
КонецФункции // ПолучитьЕдиницуХраненияОстатков()
 

Функция ОткрытьФайлВыгрузкиМТ()
	
	КаталогФайла = СокрЛП(ФайловыеФункцииПереопределяемый.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов);

	Если ЗначениеЗаполнено(КаталогФайла) Тогда
		Если Не кпкАгентПлюс.ПроверитьСуществованиеКаталога(КаталогФайла) Тогда		
			КаталогФайла = КаталогВременныхФайлов();		
		КонецЕсли;
	Иначе
		КаталогФайла = КаталогВременныхФайлов();
	КонецЕсли;
	
	ДополнитьСлешВПуть(КаталогФайла);
	
	ФайлДанных = КаталогФайла + "FromCDB.xml";
	
	ДокОбмена = Новый ЗаписьXML();
	Попытка
		ДокОбмена.ОткрытьФайл(ФайлДанных);
	Исключение
		ОповеститьОСобытии("Ошибка создания файла выгрузки! По причине: " + ОписаниеОшибки());		
		Возврат Неопределено;
	КонецПопытки;
	
	ДокОбмена.ЗаписатьОбъявлениеXML();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("DATA");
	
	ДокОбмена.ЗаписатьАтрибут("DBVERSION", "1977");
	
	ИмяФайла = ФайлДанных;
	
	Возврат Истина;
	
КонецФункции //ОткрытьФайлВыгрузкиМТ

Процедура ЗакрытьФайлВыгрузкиМТ()
	
	ДокОбмена.ЗаписатьКонецЭлемента();	// DATA
	
	ДокОбмена.Закрыть();
	
КонецПроцедуры //ЗакрытьФайлВыгрузкиМТ

//	----------------------------------------------------------------------------
//	ВыгрузитьДанныеДляМобильнойТорговли()
//	!"№
Процедура ВыгрузитьДанныеДляМобильнойТорговли() Экспорт 
	
	ЗамерПроизводительности = Истина;
	
	Если ЗамерПроизводительности Тогда
		Сообщить("Начало выгрузки - "+СокрЛП(ТекущаяДата()));
	КонецЕсли;
	
	ТипыКонтактнойИнформации = ЗаполнитьПеречислениеКонтактнойИнформации();
	СписокКонстант 			 = ЗаполнитьСписокКонстант();
	
	ДопНастройкиАгента = СведенияАгента.ДополнительныеНастройки.Получить();
	
	#Если Клиент Тогда
		Состояние("Заполнение списка клиентов...");
	#КонецЕсли
	
	кпкАгентПлюс.СформироватьСписокКлиентовАгентов(ВыбАгент, ПланПосещений, сзКлиентыАгента, сзТоргТочкиАгента, ТаблицаДоговоровАгента);
	
	СформироватьТаблицуВыгружаемыхТиповЦен();
	
	Если Не ОткрытьФайлВыгрузкиМТ() Тогда  		
		Возврат;  		
	КонецЕсли;
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CONSTANTS");
			
	ДобавитьПоле("Comment", "Константы");	
	
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
			// Выгружаем список констант				
			#Если Клиент Тогда
				Состояние("Выгрузка констант...");
			#КонецЕсли	
			
			Если ЗамерПроизводительности Тогда
				Сообщить("Выгрузка констант - "+СокрЛП(ТекущаяДата()));
			КонецЕсли;
			
			ВыгрузитьКонстанты(ДокОбмена);
			
			Если ДопНастройкиАгента <> Неопределено Тогда
				Для Каждого ТекКонстанта Из СписокКонстант Цикл
					ЗначениеКонстанты = ДопНастройкиАгента[ТекКонстанта.Значение];
					Если ЗначениеКонстанты = Неопределено Тогда Продолжить; КонецЕсли;
					Если ТекКонстанта.Значение = "UseCodes" Тогда							
						Если ЗначениеКонстанты = 0 Тогда
							ЗначениеКонстанты = Ложь;
						Иначе
							ЗначениеКонстанты = Истина;
						КонецЕсли;
					КонецЕсли;
					Если ТекКонстанта.Значение = "Agent" Тогда							
						ЗначениеКонстанты = Строка(ЗначениеКонстанты);						
					КонецЕсли;
					Если ТекКонстанта.Значение = "Schedule" Тогда
						//Если Не ЗначениеКонстанты.Пустая() Тогда
						//	РабочееВремя = Формат(ЗначениеКонстанты.ВремяНачала, "ДФ=HH:mm") + "-" + Формат(ЗначениеКонстанты.ВремяОкончания, "ДФ=HH:mm");							
						//	ДобавитьКонстанту("e38fe34e-f36a-44c9-9dbd-a29f7c925940", ЗначениеКонстанты.ПериодПовтораВТечениеДня);
						//	ДобавитьКонстанту("1de1dae1-a088-4c5b-a68e-4d233b49683a", РабочееВремя);							
						//	ДобавитьКонстанту("428f867c-0bf1-45b2-b812-ef1d284d3e3f", ЗначениеКонстанты.ДниНедели);
						//КонецЕсли;
					Иначе
						Если ЗначениеЗаполнено(ЗначениеКонстанты) Тогда							
							ДобавитьКонстанту(ТекКонстанта.Ключ, ЗначениеКонстанты);									
						КонецЕсли;
					КонецЕсли;					
				КонецЦикла;
			КонецЕсли;
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
		//ДокОбмена.ЗаписатьНачалоЭлемента("KILLEDS");
		//// Внутрь этого тега следует передавать константы, которые
		//// необходимо удалить в мобильном устройстве
		//ДокОбмена.ЗаписатьКонецЭлемента(); //KILLEDS
		
	ДокОбмена.ЗаписатьКонецЭлемента();  // CONSTANTS
	
	// Выгружаем справочные данные	
	#Если Клиент Тогда
		Состояние("Выгрузка справочников...");
	#КонецЕсли   				
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOGS");
	
	ДобавитьПоле("Comment", "Справочники");	
	 
		#Если Клиент Тогда
			Состояние("Выгрузка организаций...");
		#КонецЕсли 		
		ВыгрузитьОрганизации();
		
		#Если Клиент Тогда
			Состояние("Выгрузка контрагентов...");
		#КонецЕсли   			
		
		Если ЗамерПроизводительности Тогда
			Сообщить("Выгрузка контрагентов - "+СокрЛП(ТекущаяДата()));
		КонецЕсли;
		
		ВыгрузитьКлиентов();		
		
		Если Константы.кпкИспользоватьДоговоры.Получить() Тогда
			#Если Клиент Тогда
				Состояние("Выгрузка договоров контрагентов...");
			#КонецЕсли    
			ВыгрузитьДоговорыКонтагентов(); 
		КонецЕсли;
		
		Если ИспТочек Тогда
			#Если Клиент Тогда
				Состояние("Выгрузка торговых точек...");
			#КонецЕсли  
			ВыгрузитьТорговыеТочки();	
		КонецЕсли;
		
		#Если Клиент Тогда
			Состояние("Выгрузка контактной информации...");
		#КонецЕсли				
		//ВыгрузитьКонтактныеЛица();		
		//ВыгрузитьВидыКонтактнойИнформации();
		//ВыгрузитьКонтактнуюИнформацию();
		
		#Если Клиент Тогда
			Состояние("Выгрузка номенклатуры...");			
		#КонецЕсли  		
		
		Если ЗамерПроизводительности Тогда
			Сообщить("Выгрузка номенклатуры - "+СокрЛП(ТекущаяДата()));
		КонецЕсли;
		
		ВыгрузитьНоменклатуру();
				
		#Если Клиент Тогда
			Состояние("Выгрузка истории продаж...");			
		#КонецЕсли  		
		
		Если ЗамерПроизводительности Тогда
			Сообщить("Выгрузка истори продаж - "+СокрЛП(ТекущаяДата()));
		КонецЕсли;
		
		//ВыгрузитьИсториюПродаж();
				
		#Если Клиент Тогда
			Состояние("Выгрузка дополнительной информации...");
		#КонецЕсли
		
		Если ЗамерПроизводительности Тогда
			Сообщить("Выгрузка доп. информации - "+СокрЛП(ТекущаяДата()));
		КонецЕсли;
		ВыгрузитьДополнительнуюИнформацию();
		
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOGS

	// Выгружаем документы	
	#Если Клиент Тогда
		Состояние("Выгрузка документов...");
	#КонецЕсли 	

	ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENTS");
	
		ДобавитьПоле("Comment", "Документы");	
	
		// Если нет необходимости выгружать целиком документы, 		
		// то можно включить в выгрузку просто выгрузку подтверждений.
		// Нужно выше раскомментировать процедуру "ВыгрузитьПодтверждения"

		#Если Клиент Тогда
			Состояние("Выгрузка заказов...");
		#КонецЕсли			
		//ВыгрузитьЗаказыПокупателей();		
		
		#Если Клиент Тогда
			Состояние("Выгрузка продаж...");
		#КонецЕсли			
		
		Если ЗамерПроизводительности Тогда
			Сообщить("Выгрузка расходных накладных - "+СокрЛП(ТекущаяДата()));
		КонецЕсли;
		
		ВыгрузитьРасходныеНакладные();
	
		#Если Клиент Тогда
			Состояние("Выгрузка взаиморасчетов...");
		#КонецЕсли	
		
		Если ЗамерПроизводительности Тогда
			Сообщить("Выгрузка взаиморасчетов - "+СокрЛП(ТекущаяДата()));
		КонецЕсли;
		
		ВыгрузитьВзаиморасчеты();
		
		#Если Клиент Тогда
			Состояние("Выгрузка маршрутов...");
		#КонецЕсли
		//ВыгрузитьМаршрутыАгента();
		
		#Если Клиент Тогда
			Состояние("Выгрузка посещений...");
		#КонецЕсли			
		//ВыгрузитьПосещения();
		
		ДокОбмена.ЗаписатьКонецЭлемента();  // DOCUMENTS;
	
	// Выгружаем картинки	
	#Если Клиент Тогда
		Состояние("Выгрузка картинок...");
	#КонецЕсли
	
	ДокОбмена.ЗаписатьНачалоЭлемента("PICTURES");
	
		ДобавитьПоле("Comment", "Фотографии");	
	
		//ВыгрузитьИзображения();
		
		Если ЗамерПроизводительности Тогда
			Сообщить("Выгрузка изображений - "+СокрЛП(ТекущаяДата()));
		КонецЕсли;
	
	ДокОбмена.ЗаписатьКонецЭлемента();  // PICTURES;
	
	#Если Клиент Тогда
		Состояние("Выгрузка подтверждений...");
	#КонецЕсли
	
	Если ЗамерПроизводительности Тогда
		Сообщить("Выгрузка подтверждений - "+СокрЛП(ТекущаяДата()));
	КонецЕсли;
	
	ВыгрузитьПодтверждения();
 
	// Закрываем теги файла выгрузки
	ЗакрытьФайлВыгрузкиМТ();
	
	#Если Клиент Тогда
		Состояние("");
	#КонецЕсли 	
	
	Если ЗамерПроизводительности Тогда
		Сообщить("Окончание выгрузки - "+СокрЛП(ТекущаяДата()));
	КонецЕсли;
	
КонецПроцедуры //ВыгрузитьДанныеДляМобильнойТорговли

Процедура ВыгрузитьПодтвержденияСправочников()   	
	
	ТабСпр = Новый ТаблицаЗначений;
	ТабСпр.Колонки.Добавить("ВидСпр");
	ТабСпр.Колонки.Добавить("Объект");  
	
	Для Каждого ЭлементСписка Из СписЗагруженныхОбъектовСпр Цикл		
		ОбъектСпр     = ЭлементСписка.Значение;
		Представление = ЭлементСписка.Представление;
		
		СтрокаТаб = ТабСпр.Добавить();		
		СтрокаТаб.Объект = ОбъектСпр;
		СтрокаТаб.ВидСпр = Представление;		        		
	КонецЦикла;
	
	ТабСпр.Сортировать("ВидСпр");
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOGS");
	
	ДобавитьПоле("Comment", "Подтверждения справочников");	
	
	ТекВидСпр = "";
	НужноЗакрытьТег = Ложь;
	
	Для Каждого СтрокаТаб Из ТабСпр Цикл 
		 		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли   
		
		ИдСпр = "";
		Для Каждого ЭлемСоотв Из СоответствиеСпрЗагр Цикл
			Если Не ЭлемСоотв.Значение = СтрокаТаб.ВидСпр Тогда Продолжить; КонецЕсли;			
			ИдСпр = ЭлемСоотв.Ключ;
			Прервать;
		КонецЦикла;
		
		Если ПустаяСтрока(ИдСпр) Тогда Продолжить; КонецЕсли;
				
		Если ТекВидСпр <> СтрокаТаб.ВидСпр Тогда 
			
			Если ТекВидСпр <> "" Тогда		
				НужноЗакрытьТег = Ложь;
				ДокОбмена.ЗаписатьКонецЭлемента(); //CONFIRMATIONS			
				ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG      				
			КонецЕсли;	
			
			ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
					
			ДобавитьПоле("GUID", ИдСпр);
			
			ДобавитьПоле("Comment", "Подтверждения справочника '" + ТекВидСпр + "'");	
			
			ДокОбмена.ЗаписатьНачалоЭлемента("CONFIRMATIONS");	
			
			НужноЗакрытьТег = Истина;
			
		КонецЕсли;
		
		ТекЭлемент = СтрокаТаб.Объект;
		
		ЗаписатьЭлементВДокументОбмена(Новый Структура("GUID", ТекЭлемент));
		
		ТекВидСпр = СтрокаТаб.ВидСпр;
		
	КонецЦикла;	
	
	Если НужноЗакрытьТег Тогда 
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //CONFIRMATIONS
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
		
	КонецЕсли;
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOGS   	
	
КонецПроцедуры //ВыгрузитьПодтвержденияСправочников

Процедура ВыгрузитьПодтвержденияФотографий()   	
	
	ДокОбмена.ЗаписатьНачалоЭлемента("PICTURES");
	
		ДобавитьПоле("Comment", "Подтверждения фотографий");	
	
		
		ДокОбмена.ЗаписатьНачалоЭлемента("CONFIRMATIONS");	
		
		Для Каждого СтрокаТаб Из ТабЗагруженныхФото Цикл 
			
			#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
			#КонецЕсли   	
		
			ЗаписатьЭлементВДокументОбмена(Новый Структура("GUID", СтрокаТаб.ИдФото));
		
		КонецЦикла;
			
		ДокОбмена.ЗаписатьКонецЭлемента(); //CONFIRMATIONS  		
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //PICTURES   	
	
КонецПроцедуры //ВыгрузитьПодтвержденияФотографий

Процедура ВыгрузитьПодтверждения(ЗаписатьОбъявление = Ложь) Экспорт
	
	Если ЗаписатьОбъявление Тогда
		
		Каталог = СокрЛП(ФайловыеФункцииПереопределяемый.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов);
	
		Если Не (ЗначениеЗаполнено(Каталог) и кпкАгентПлюс.ПроверитьСуществованиеКаталога(Каталог)) Тогда		
			Каталог = КаталогВременныхФайлов();		
		КонецЕсли;
 
		ДополнитьСлешВПуть(Каталог);
		
		ИмяФайла = Каталог + "FromCDB.xml";
		
		ДокОбмена = Новый ЗаписьXML;
		
		ДокОбмена.ОткрытьФайл(ИмяФайла);
		
		ДокОбмена.ЗаписатьОбъявлениеXML();
		
		ДокОбмена.ЗаписатьНачалоЭлемента("DATA");
				
	КонецЕсли;
	
	ВыгрузитьПодтвержденияДокументов(); 
	
	ВыгрузитьПодтвержденияСправочников();
	
	ВыгрузитьПодтвержденияФотографий();
	
	Если ЗаписатьОбъявление Тогда
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //DATA
		
		ДокОбмена.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры //ВыгрузитьПодтверждения

//////////////////////////////////////////////////////// 
	
	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;	

	ЕстьКонтактнаяИнформация = Ложь;

	ПланПосещений = Документы.кпкПланПосещений.ПустаяСсылка();

	сзАссортимент 		= Новый Массив; 	
	сзДопТовары 	    = Новый СписокЗначений;
	сзКлиентыАгента     = Новый СписокЗначений;
	сзТоргТочкиАгента   = Новый СписокЗначений;

	ТаблицаДоговоровАгента    = Новый ТаблицаЗначений;
	ТаблицаДоговоровАгента.Колонки.Добавить("Контрагент");
	ТаблицаДоговоровАгента.Колонки.Добавить("Договор");

	ЛогОбмена = РегистрыСведений.кпкСохраненныеНастройки.СоздатьМенеджерЗаписи();
	ЛогОбмена.Пользователь 		    = ТекПользователь;
	ЛогОбмена.ИмяОбъекта  		    = ЭтотОбъект.Метаданные().Имя;
	ЛогОбмена.НаименованиеНастройки = Строка(Формат(ТекущаяДата(), "ДФ=yyyy.MM.dd"));
	ЛогОбмена.Прочитать();

	Если ЛогОбмена.Выбран() Тогда
		ТаблицаЛогов = ЛогОбмена.СохраненнаяНастройка.Получить();
	Иначе 	
		МассивСсылок = Новый Массив;
		Для Каждого ТекСправочник Из Метаданные.Справочники Цикл
			МассивСсылок.Добавить(Тип("СправочникСсылка." + ТекСправочник.Имя));
		КонецЦикла;
		
		Для Каждого ТекДокумент Из Метаданные.Документы Цикл
			МассивСсылок.Добавить(Тип("ДокументСсылка." + ТекДокумент.Имя));
		КонецЦикла;
		
		КСТ = Новый КвалификаторыСтроки(50);
		КДД = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
		КСС = Новый КвалификаторыСтроки(0);
		КСП = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
		КСА = Новый ОписаниеТипов("СправочникСсылка.Агенты");
		КМС = Новый ОписаниеТипов(МассивСсылок);
		
		ТаблицаЛогов = Новый ТаблицаЗначений;
		ТаблицаЛогов.Колонки.Добавить("ТипСобытия", Новый ОписаниеТипов("Строка", , , , КСТ, ), "Тип события");
		ТаблицаЛогов.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата", , , КДД, , ));
		ТаблицаЛогов.Колонки.Добавить("Событие", Новый ОписаниеТипов("Строка", , , , КСС, ));
		ТаблицаЛогов.Колонки.Добавить("Пользователь", Новый ОписаниеТипов(КСП, , , , , ));
		ТаблицаЛогов.Колонки.Добавить("Агент", Новый ОписаниеТипов(КСА, , , , , ));
		ТаблицаЛогов.Колонки.Добавить("СсылкаНаОбъект", Новый ОписаниеТипов(КМС, , , , , ), "Ссылка на объект");
	КонецЕсли;        

	ТДопКлиенты = Новый ТаблицаЗначений;
	ТДопКлиенты.Колонки.Добавить("Клиент");
	ТДопКлиенты.Колонки.Добавить("Должник");
	ТДопКлиенты.Колонки.Добавить("ТоргТочка");

	тзОписаниеКартинок = Новый ТаблицаЗначений;
	тзОписаниеКартинок.Колонки.Добавить("ИДТовара");
	тзОписаниеКартинок.Колонки.Добавить("Картинка");
	тзОписаниеКартинок.Колонки.Добавить("Наименование");
	тзОписаниеКартинок.Колонки.Добавить("Описание");

	тзКатегорииЦен = Новый ТаблицаЗначений;
	тзКатегорииЦен.Колонки.Добавить("ТипыЦен");	
	тзКатегорииЦен.Колонки.Добавить("Код");	
	                                                    
	КоличествоПопыток   = 5;   
	ПаузаМеждуПопытками = 10;  

	ОтветитьНаЗапрос = Ложь;

	Т_ = Символы.Таб;

	ИспТочек 			  			= Константы.кпкРежимТоргТочек.Получить();
	ИспЕдИзм 			 		 	= Не Константы.кпкИспользоватьЕдИзм.Получить();
	мВалютаРегламентированногоУчета = Справочники.Валюты.НациональнаяВалюта;

		Попытка
			
			КПКОбъектServer = Новый COMОбъект("AgentPlus.ApServer");
			КПКОбъектZip 	= Новый COMОбъект("AgentPlus.Zip");		
			КПКОбъектCrypto = Новый COMОбъект("AgentPlus.Crypto");	
			
		Исключение
			ТекстСообщения = "Не удалось создать объекты внешней компоненты APPlusCOM.dll. Причина: " + ОписаниеОшибки() + 
							 ". Возможно компонента APPlusCOM.dll не зарегистрирована на сервере";
							 
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, , , "Загрузка объектов внешней компоненты");
			ОповеститьОСобытии(ТекстСообщения);
			СохранитьТаблицуЛогаВНастройкахПользователя();
		КонецПопытки;  	

	СоответствиеСпрЗагр = Новый Соответствие();

	СоответствиеСпрЗагр.Вставить("9450980f-fb59-47e3-bae2-aa3c58441b1a", "Контрагенты");	
	СоответствиеСпрЗагр.Вставить("735a9ce5-dcc1-4d1a-8f8d-643a50a6befc", "ДоговорыКонтрагентов");
	СоответствиеСпрЗагр.Вставить("d3dbb02e-681e-4fc2-ad0e-8ef1234e9f48", "кпкТорговыеТочки");
	СоответствиеСпрЗагр.Вставить("cf387a58-4655-41b5-a460-85884d1f20d0", "КонтактныеЛица");     	
	СоответствиеСпрЗагр.Вставить("85b62882-0156-4881-85ba-b8fef05c867b", "КонтактнаяИнформация");
	СоответствиеСпрЗагр.Вставить("05ea7926-febb-4d82-97fc-19294dd5dd29", "кпкФотоКДокументам");

	СоответствиеДокЗагр = Новый Соответствие();

	СоответствиеДокЗагр.Вставить("e01e1f5c-d6e4-46e8-b923-3758b0d79bde", "ЗаказПокупателя");
	СоответствиеДокЗагр.Вставить("749be2e0-9b00-4d7b-9d4d-88ca53327511", "ПоступлениеВКассу");
	СоответствиеДокЗагр.Вставить("61dee5fe-d0a8-4842-a6af-a8d33f298845", "кпкМерчендайзинг");
	СоответствиеДокЗагр.Вставить("9f147c59-5ee8-4550-8289-12ecfe5d0617", "кпкПосещение");
	СоответствиеДокЗагр.Вставить("4971b041-beab-4fa6-b1e8-10138f04fe44", "ВозвратОтПокупателя");

	СписокОрдеровДляЗаписи = Новый ТаблицаЗначений;
	СписокОрдеровДляЗаписи.Колонки.Добавить("Документ");
	СписокОрдеровДляЗаписи.Колонки.Добавить("СтруктураДокКПК");
	СписокОрдеровДляЗаписи.Колонки.Добавить("ЭтоНовыйОбъект");
	СписокОрдеровДляЗаписи.Колонки.Добавить("ИдОснования");

	СведенияАгента = Новый Структура;

	СписНеНайденныхТиповЦен = Новый СписокЗначений;

	СписЗагруженныхОбъектовСпр = Новый СписокЗначений;

	ТабЗагруженныхФото = Новый ТаблицаЗначений;
	ТабЗагруженныхФото.Колонки.Добавить("Ссылка");
	ТабЗагруженныхФото.Колонки.Добавить("ИдФото"); 			

	лИмяФормыКонстант = "Настройка параметров работы с мобильным приложением";
	
//////////////////////////////////////////////////////////////////////////////////////
// Версия обработки для типовой конфигурации "Управление небольшой фирмой для Украины" следующих версий:
// 1.3.1.4,   
//////////////////////////////////////////////////////////////////////////////////////