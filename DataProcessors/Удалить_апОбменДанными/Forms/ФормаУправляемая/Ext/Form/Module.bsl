//&НаКлиенте
//Перем КпкОбъект;
//Перем КПКОбъектZip;

&НаСервере 
Перем флОбновлять;
Перем флИскатьПоGUI_77;
Перем СписокКлиентовДляВыгрузки;


&НаКлиенте
Перем КПКОбъектServer;

&НаСервере 
Перем ДокОбмена;
Перем ТипыКонтактнойИнформации;
Перем Ассортимент;
Перем МассивОрганизаций;
Перем МассивКонтрагентов;
Перем МассивПартнеров;
Перем МассивСкладов;
Перем МассивВидовЦен;
Перем МассивКЛ;
Перем ДопНастройкиАгента;

&НаСервере 
Перем ТаблицаКассовыхДокументов Экспорт;

&НаСервере 
Перем ТабКИ Экспорт;

&НаСервере
Перем ТабДоговоров Экспорт;

&НаСервере 
Перем ТаблицаДокументовПоступлений Экспорт;

&НаСервере
Перем ЭтоВыгрузкаОпределенныхДокументов; //при вызове из обработки апВыгрузкаДокументовВМУ
//Перем ОтчетЗапроса;	//Отчет необходимый для формирования агенту
//Перем ПараметрыЗапроса; //Структура параметров для формирования запроса агента
//Перем ОтветитьНаЗапросОтчета; // Признак того, что нужно ответить на запрос, посланный агентом из МУ
//Перем ФайлОтчета;

&НаСервере
Перем GUID_SYSTEM_SAVESCRIPT;

////////////////////////////////////////////////////////////////////////////////////////////
//Идентификаторы для загрузки/выгрузки данных
//
Перем GUID_ENUM_CLIENTS_TPOINTS_CAT;
Перем GUID_ENUM_RATINGCAT; 
//////////////////
//Идентификаторы для тега Ref_System (константы)
Перем GUID_SYSTEM_AGENTNAME;
Перем GUID_SYSTEM_AGENTID;
Перем GUID_SYSTEM_FIRMID;
Перем GUID_SYSTEM_MSTOREID;
Перем GUID_SYSTEM_SHDATEBG;
Перем GUID_SYSTEM_SHDATEND;
Перем GUID_SYSTEM_TIMEUNLD;
Перем GUID_SYSTEM_DISCOUNTS;
Перем GUID_SYSTEM_AMNTPRECISION;
Перем GUID_SYSTEM_MONEYNAME;
Перем GUID_SYSTEM_FLAGS;
Перем GUID_SYSTEM_PRICECOUNT;
Перем GUID_SYSTEM_VATRATE;                     
Перем GUID_SYSTEM_TIMEDLVDISP;
Перем GUID_SYSTEM_DSCNTRECISION;
Перем GUID_SYSTEM_PRICEPACKTIME;
Перем GUID_SYSTEM_AUTHOR_TEL;
Перем GUID_SYSTEM_GOODS_PICT_PATH;
Перем GUID_SYSTEM_WEIGHT_UNIT;
Перем GUID_SYSTEM_MERCH;
Перем GUID_SYSTEM_USE_UNITS;
Перем GUID_SYSTEM_PHOTOS_PATH; 
Перем GUID_SYSTEM_GPSTRACK_TIME;    
Перем GUID_SYSTEM_MINPRICECODE; 

//////////////////
//Предопределенные идентификаторы тега Ref_AttrTypes
Перем GUID_ATTRTYP_COMMENT;	
Перем GUID_ATTRTYP_PAYMNTTYPE;
Перем GUID_ATTRTYP_PRICETYPE;
Перем GUID_ATTRTYP_GOODSPROP;
Перем GUID_ATTRTYP_GOODSCAT;
Перем GUID_ATTRTYP_QUERY;
Перем GUID_ENUM_CLIENTS_COLORS;
Перем GUID_ENUM_CLIENTS_WARNINGS;
Перем GUID_ENUM_DOC_CAT;
Перем GUID_ENUM_DOC_CAT_COLORS;
Перем GUID_ENUM_PLAN_OF_SALES_TYPES;

//////////////////
//Идентификаторы перечислений, добавляемых программистом исходя из особенностей задачи.
//Количество таких перечислений не ограничено.
Перем MY_GUID_ENUM_TPTYPE;   // перечисление "Вид торговой точки"(задействован в справочнике торговых точек)
Перем MY_GUID_ENUM_DLVTYPE;  // перечисление "Вид доставки"(задействован в документе "Заявка")
Перем MY_GUID_ENUM_VISIT;    // перечисление "Результат посещения" (задействован в документе "Посещение")
Перем MY_GUID_ENUM_GTD;		 // перечисление "Номер ГТД"
Перем MY_GUID_ENUM_STRANA;	 // перечисление "Страны-производители"

//////////////////
//Идентификаторы скриптов
Перем GUID_SCRIPT_CLIENTINFO;	//идентификатор скрипта для окна информации о клиенте
Перем GUID_SCRIPT_TPOINTINFO;	//идентификатор скрипта для окна информации о торговой точке


&НаКлиенте
Процедура НастроитьВидимостьДоступностьЭлементов()
		
	Элементы.АгентПлюсСОД.Видимость 	= Объект.СпособОбмена = АгентПлюсСОД;
	Элементы.Автообмен.Видимость    	= Объект.СпособОбмена = АгентПлюсСОД;
	Элементы.ФТП.Видимость 		    	= Объект.СпособОбмена = ФТПСервер;
	Элементы.СтартовыеНомера.Видимость  = Объект.флСтартовыеНомераДокументов;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьСлужебныеДанные()
	
	// Склад по умолчанию
	//Выборка = Справочники.Склады.Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	Если Выборка.ПометкаУдаления Тогда Продолжить; КонецЕсли;
	//	Если Выборка.ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад Тогда
	//		СкладПоУмолчанию = Выборка.Ссылка;
	//		Прервать;
	//	КонецЕсли;
	//КонецЦикла;
	
	ТаблицаАгентов.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрано подразделение на форме!", , "Подразделение");
		Возврат;	
	КонецЕсли;

	
	
	Выборка = Справочники.Агенты.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		Если (Выборка.КпкИспользует) И (Выборка.Менеджер.Подразделение = Объект.Подразделение) Тогда
			НоваяСтрока = ТаблицаАгентов.Добавить();
			Новаястрока.Агент = Выборка.Ссылка;
			НоваяСтрока.Пометка = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьтаблицуАгентовСервер()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Агент");
	Результат.Колонки.Добавить("Пометка");
	
	Выборка = Справочники.Агенты.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.КпкИспользует Тогда
			НоваяСтрока = Результат.Добавить();
			Новаястрока.Агент = Выборка.Ссылка;
			НоваяСтрока.Пометка = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат (Результат);
	
КонецФункции	

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	
	ОчиститьСообщения();
	
	//***
	//ОтветитьНаЗапросОтчета = Ложь;
	//ОтчетЗапроса = "";
	//***
	
	
	ПодготовитьСлужебныеДанные();
	
	//ТаблицаАгентов = Новый СписокЗначений;
	//ТаблицаАгентов = ПолучитьтаблицуАгентовСервер();
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.АгентПлюсСОД Тогда	
		ТаблицаАгентов = Объект.ТабАПСервер;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ФТП Тогда	
		ТаблицаАгентов = Объект.ТабФТП;
	КонецЕсли;
	
	Если ВыбАгент.Пустая() и ТаблицаАгентов.Количество() > 0 Тогда  // Если таблица агентов не пустая, то грузим по ней  				
		
		Для Каждого Стр Из ТаблицаАгентов Цикл			
			
			Если Не Стр.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			ВыбАгент = Стр.Агент;
			
			//Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.АгентПлюсСОД Тогда	
			//	ЗагрузитьДанныеСАПСервера(ПолучитьИдентификаторУстройстваАгента());
			//ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ФТП Тогда	
			//	ЗагрузитьДанныеСФТП();
			//КонецЕсли;
			
			Если Объект.СпособОбмена = ФТПСервер Тогда
				ЗагрузитьДанныеСФТП();
			КонецЕсли;
 
		КонецЦикла;				
		
		//Объект.ВыбАгент =  Справочники.Пользователи.ПустаяСсылка();	
		
	ИначеЕсли ВыбАгент.Пустая() и Объект.СпособОбмена = АгентПлюсСОД Тогда // Загружаем данные от всех агентов		
		
		//Запрос = Новый Запрос;
		//Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ Объект КАК Агент ИЗ РегистрСведений.кпкСведенияАгента УПОРЯДОЧИТЬ ПО Агент УБЫВ";
		//Выборка = Запрос.Выполнить().Выбрать();
		//
		//Пока Выборка.Следующий() Цикл
		//	Объект.ВыбАгент = Выборка.Агент;
		//	ЗагрузитьДанныеСАПСервера();		
		//КонецЦикла;  
		//
		//Объект.ВыбАгент =  Справочники.Пользователи.ПустаяСсылка();	
		
	Иначе  // Загружаем данные по указанному на форме агенту
		
		Если Не ЗначениеЗаполнено(ВыбАгент) Тогда							
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбран торговый агент на форме!", , "ВыбАгент");
			Возврат;	
        КонецЕсли;
		
		Если Объект.СпособОбмена = ПрямоеСоединение Тогда
			
			Режим = РежимДиалогаВыбораФайла.Открытие;
			Фильтр = "Файл загрузки с КПК (*.zip, *.xml, *.crp)|*.zip; *.xml; *.crp";
			ДиалогВыбораФайла = Новый ДиалогВыбораФайла(Режим);
			ДиалогВыбораФайла.Фильтр = Фильтр;
			ДиалогВыбораФайла.Каталог = "";	
			ДиалогВыбораФайла.МножественныйВыбор = Ложь;
			ДиалогВыбораФайла.Заголовок = "Выберите файл загрузки";
			Если ДиалогВыбораФайла.Выбрать() Тогда
				ПутьФайлаЗагрузки = ДиалогВыбораФайла.ПолноеИмяФайла;								
			Иначе
				Предупреждение("Файл не выбран!");
				Возврат;
			КонецЕсли;
			
			ФайлаЗагрузкиНаДиске = Новый Файл(ПутьФайлаЗагрузки);
			
			Если Не ФайлаЗагрузкиНаДиске.Существует() Тогда
				ОповеститьОСобытии("Файл загрузки по пути: " + ПутьФайлаЗагрузки + " не найден!");
				Возврат;
			КонецЕсли;
						
			ФайлЛокальный = КаталогВременныхФайловКлиент + ФайлаЗагрузкиНаДиске.Имя;
			
			Попытка 
				КопироватьФайл(ПутьФайлаЗагрузки, ФайлЛокальный);
			Исключение
				ОповеститьОСобытии("Ошибка копирования файла с устройства! Причина: " + ОписаниеОшибки());
				Возврат;   
			КонецПопытки;
			
			Результат = ВыполнитьЗагрузкуДанных(ФайлЛокальный);	
	
			Если Не Результат Тогда
				ОповеститьОСобытии("Данные для агента """ + ВыбАгент.Наименование + """ не загружены!", СтатусСообщения.Важное);		
			КонецЕсли;
			
		ИначеЕсли Объект.СпособОбмена = АгентПлюсСОД Тогда
			
			ЗагрузитьДанныеСАПСервера(ПолучитьИдентификаторУстройстваАгента());	
			
		ИначеЕсли Объект.СпособОбмена = ФТПСервер Тогда			
			
			ЗагрузитьДанныеСФТП();
			
		КонецЕсли;
		
	КонецЕсли;
	
	//почистим временные файлы
	Попытка
		УдалитьФайлы(КаталогВременныхФайловКлиент,"To1C.*");
		УдалитьФайлы(КаталогВременныхФайловСервер,"To1C.*");
		
		УдалитьФайлы(КаталогВременныхФайловКлиент,"ToCDB.*");
		УдалитьФайлы(КаталогВременныхФайловСервер,"ToCDB.*");
	Исключение
    	Сообщить(ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры //ЗагрузитьДанные

&НаСервере
//Процедура ведения лога обмена
//
Процедура ЗаписатьЛогОбмена(ТекстСообщения = "", СсылкаНаОбъект = Неопределено, ТипСобытия = Неопределено)
		
	//НоваяСтрока = ТаблицаЛогов.Добавить();
	//НоваяСтрока.ТипСобытия     = Строка(ТипСобытия);
	//НоваяСтрока.Дата           = ТекущаяДата();
	//НоваяСтрока.Событие        = ТекстСообщения;
	//НоваяСтрока.Пользователь   = ТекПользователь;
	//НоваяСтрока.Агент          = ВыбАгент;
	//НоваяСтрока.СсылкаНаОбъект = ?(СсылкаНаОбъект = Неопределено, "", СсылкаНаОбъект);
	
КонецПроцедуры      

&НаСервере
Процедура ОповеститьОСобытии(ТекстСообщения = "", Статус = "", ОтражатьВЛоге = Истина, СсылкаНаОбъект = Неопределено) Экспорт
	
	НужныйСтатус = ?(Статус = "", СтатусСообщения.Внимание, Статус);
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, СсылкаНаОбъект);
 
	Если ОтражатьВЛоге Тогда
		ЗаписатьЛогОбмена(ТекстСообщения, СсылкаНаОбъект, НужныйСтатус);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОткрытьФайлВыгрузкиМТ() Экспорт
	
	КолФотоМТ = 0;
	
	апСерверМодуль.ДополнитьСлешВПуть(КаталогВременныхФайловСервер);
	
	ФайлДанных = КаталогВременныхФайловСервер + "From1C.dat";
	
	//////ДокОбмена = Новый ЗаписьXML();
	//////
	//////Попытка
	//////	ДокОбмена.ОткрытьФайл(ФайлДанных);
	//////Исключение
	//////	ОповеститьОСобытии("Ошибка создания файла выгрузки! По причине: " + ОписаниеОшибки());		
	//////	ДокОбмена = Неопределено;
	//////КонецПопытки;
	//////
	//////ДокОбмена.ЗаписатьОбъявлениеXML();
	//////
	//////ДокОбмена.ЗаписатьНачалоЭлемента("DATA");
	//////
	//////ДокОбмена.ЗаписатьАтрибут("DBVERSION", "1977");
	
	ИмяФайла = ФайлДанных;
	
	Текст = Новый ТекстовыйДокумент;
	Текст.Вывод = ИспользованиеВывода.Разрешить;
	Текст.УстановитьТипФайла(КодировкаТекста.UTF16);
	
	стрБаза = СокрЛП("Основная");
	Если стрБаза <> "" Тогда
		стрБаза = Т_ + стрБаза;
	КонецЕсли;

	Текст.ДобавитьСтроку("agentp_data" + Т_ + "to_ppc" + стрБаза);
	Текст.ДобавитьСтроку("// Файл выгрузки для отправки в КПК");
	
	ДокОбмена = Текст;
	
	//идентификаторы констант в БД Агент+
	GUID_SYSTEM_AGENTNAME	= "FB55C4DC-885C-4D39-AB62-44FBAE50F1AC";
	GUID_SYSTEM_AGENTID		= "A2F737BD-37CD-4F08-910B-9E2A130226D4";
	GUID_SYSTEM_FIRMID		= "30AC90F6-99D2-439F-8AA2-007FF391DEA4";
	GUID_SYSTEM_MSTOREID	= "2AEBEC0B-20B0-46f1-99D9-20661AEDA77A";
	GUID_SYSTEM_SHDATEBG 	= "3935BEAE-9F40-4BA5-BA9E-03F860CC1750";
	GUID_SYSTEM_SHDATEND	= "3343E400-1577-4DDE-9A82-BF1E53267FD6";
	GUID_SYSTEM_TIMEUNLD	= "5A9D4A4C-CC7A-49F8-8C4E-6E23B964CACB";
	GUID_SYSTEM_DISCOUNTS	= "AA82CC96-4485-4351-98D8-BCF2EFFB5F7D";
	GUID_SYSTEM_AMNTPRECISION="0980573E-CA63-4C1D-941D-09218063BF40";
	GUID_SYSTEM_MONEYNAME	= "28C8F78E-61BB-4F8A-AA5E-E242B680067B";
	GUID_SYSTEM_FLAGS 		= "A44AFE59-9F8B-47D8-BB94-4CB447170EF2";
	GUID_SYSTEM_PRICECOUNT	= "8166BF59-8507-45B3-AF14-A3D111DBC61C";
	GUID_SYSTEM_VATRATE		= "EE7AE207-9BE2-4494-85C8-433DB1AEA735";
	GUID_SYSTEM_TIMEDLVDISP = "24EB38BB-DD8E-4816-9A29-9DA53EEB6BAE";
	GUID_SYSTEM_DSCNTRECISION="2841B875-1306-4DE7-BE2D-1954747BC7DA";
	GUID_SYSTEM_PRICEPACKTIME="F83718D6-C6E8-404A-AFF5-B4D3A3F9503F";
	GUID_SYSTEM_AUTHOR_TEL	= "2D9C4ED7-6CC4-4145-8721-F344BC24E1FA";
	GUID_SYSTEM_GOODS_PICT_PATH="FA6B30C2-1D7F-46EC-8EAD-0979D2965747";
	GUID_SYSTEM_WEIGHT_UNIT	= "CF527139-1867-4A66-8C44-ABD2D9AE202C";
	GUID_SYSTEM_MERCH		= "3A27217E-46BD-449E-8C95-574076DB9087";
	GUID_SYSTEM_USE_UNITS	= "E2D6F319-4907-4CA8-8B6C-85D67F106861"; 
	GUID_SYSTEM_PHOTOS_PATH = "E40BC509-0B89-4AF6-A441-A108774C9482";
	GUID_SYSTEM_GPSTRACK_TIME 	= "EDB9AF7D-5B7C-4242-B061-FE396394BA2F";	
	GUID_SYSTEM_MINPRICECODE= "E99E0731-B47A-46A0-B472-FE5DFB6C79FE";

	//идентификаторы предопределенных типов реквизитов для документов
	GUID_ATTRTYP_COMMENT	= "A1F1127E-BB91-41DE-87F5-4A00E5C4C409"; //Комментарий к документу
	GUID_ATTRTYP_PAYMNTTYPE	= "60277704-5AB1-4FC5-BF78-9B032723B8B7"; //Вид оплаты документа
	GUID_ATTRTYP_PRICETYPE	= "08449B6B-75CA-464A-8D29-42EE6E94E08F"; //Тип цен
	GUID_ATTRTYP_QUERY		= "1CABA333-1D1D-4F41-86C8-B175E9CEB6B3"; //Запросы из КПК при мобильном доступе к ЦБД
    
	GUID_SYSTEM_SAVESCRIPT      = "44E13801-92B7-412D-B6DE-B24BEA890B12";

	
	//идентификатор для реквизита "Свойство" для товаров прайс-листа
	GUID_ATTRTYP_GOODSPROP	= "4FD62396-E3F5-409F-A84E-A390D6876766";
	//идентификатор для реквизита "Категория" для товаров прайс-листа
	GUID_ATTRTYP_GOODSCAT	= "3B4E9F70-9F00-4C15-99B8-81E1DF95DC2C";
	//рацсветки клиентов в окне выбора клиентов
	GUID_ENUM_CLIENTS_COLORS= "51DA11C0-6B6A-4EE7-BB9E-CB9E5515B536";
	//предупреждения для клиентов в окне выбора клиентов
	GUID_ENUM_CLIENTS_WARNINGS="3C1B73C4-7956-4CA2-84C0-118E20847BB6";

	//идентификаторы перечислений, добавляются/задаются программистом
    MY_GUID_ENUM_TPTYPE = "5BB29DAF-6769-423A-AEAF-AEFE111736A0"; //типы торговых точек
	MY_GUID_ENUM_DLVTYPE= "1124A28B-63EE-4F01-9AFA-37594D06CCCB"; //виды доставки
	MY_GUID_ENUM_VISIT	= "FC233E4A-DA80-4481-B280-76CE1855CA9C"; //виды результатов посещений

	GUID_ENUM_DOC_CAT			= "03DE83E1-5F17-453A-AD25-AEDFE8CE4D08"; 	// категории документов
	GUID_ENUM_DOC_CAT_COLORS	= "AEFBC3B3-E5A8-4F14-BBBD-6F0D9579D518";	// цвета категорий документов
	
	GUID_ENUM_PLAN_OF_SALES_TYPES="A1E96461-4933-41EA-86DB-5EBC60B8287B";
	
	MY_GUID_ENUM_GTD	= "EA2D47CD-0E34-4176-8EBF-F4A9AAF2716D"; // перечисление "Номер ГТД"
	MY_GUID_ENUM_STRANA	= "2BA57449-AECB-4C00-BDA0-E08120251AC7"; // перечисление "Страны-производители"

    	//{ Арт 2009-07-30 
	GUID_ENUM_CLIENTS_TPOINTS_CAT = "61D57F23-197E-465D-BE1D-5213E4BF6390";  // категории клиентов (торг.точек)
	GUID_ENUM_RATINGCAT           = "5B01A7CD-C621-4D7D-A26D-8EDA16AB42BA";  // рейтинги товаров            	
	//  Арт 2009-07-30 } 
	
	//идентификаторы скриптов представления элементов справочников справочников
	GUID_SCRIPT_CLIENTINFO  = "CC56ADA6-3584-40A1-A83E-B5B1F5FA8648";
	GUID_SCRIPT_TPOINTINFO  = "5BD7E0A7-4B93-4962-8A62-1DF6F40FB56C";

	
КонецПроцедуры //ОткрытьФайлВыгрузкиМТ 

&НаСервере
Процедура ЗакрытьФайлВыгрузкиМТ() Экспорт
	
	//ДокОбмена.ЗаписатьКонецЭлемента();	// DATA
	
	ДокОбмена.Записать(ИмяФайла, КодировкаТекста.UTF16);
	
	//ДокОбмена.Закрыть();
	
КонецПроцедуры //ЗакрытьФайлВыгрузкиМТ

&НаСервере
Процедура ВыгрузитьПростойСправочник(Идентификатор, Выборка, ИмяСпр = "")
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
		ДобавитьПоле("GUID", Идентификатор);
		
		// Передаем команду на очистку справочника перед загрузкой
		Если Объект.флОчищатьСправочникиПередЗагрузкой Тогда
			ДобавитьПоле("KILLALL", "1");                	
		КонецЕсли;
		
		ДобавитьПоле("Comment", "Справочник." + ИмяСпр);
					
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	
			Пока Выборка.Следующий() Цикл				
				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Выборка);				
				ЗаписатьЭлементВДокументОбмена(СтруктураПолей);				
			КонецЦикла;
			
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента();     //CATALOG
	
КонецПроцедуры //ВыгрузитьПростойСправочник

&НаСервере
Функция ПолучитьТекстЗапросаПоПартнерам()
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Партнеры.Ссылка,
	|	апСведенияПартнеров.Статус,
	|	апСведенияПартнеров.Категория,
	|	Партнеры.ГруппаДоступа,
	|	Партнеры.Комментарий	
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.апСведенияПартнеров КАК апСведенияПартнеров
	|		ПО (апСведенияПартнеров.Объект = Партнеры.Ссылка)
	|ГДЕ
	|	Партнеры.ПометкаУдаления = ЛОЖЬ
	|	И Партнеры.Ссылка В(&СписокПартнеров)"; 		
	
	Возврат ТекстЗапроса;
	
КонецФункции //ПолучитьТекстЗапросаПоПартнерам

&НаСервере
Функция ПолучитьТекстЗапросаПоКонтрагентам()
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка,
	|	Контрагенты.Партнер,
	|	Контрагенты.ДополнительнаяИнформация
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ПометкаУдаления = ЛОЖЬ
	|	И Контрагенты.Партнер В(&СписокПартнеров)"; 		
	
	Возврат ТекстЗапроса;
	
КонецФункции //ПолучитьТекстЗапросаПоКонтрагентам

&НаСервере
// Функция получает категорию документа из справочника "апКатегорииДокументов"
//
// Параметры:
//  Док - нужный документ
//
//Возвращаемое значение:
//  Ссылка
//
Функция ПолучитьКатегориюДокумента(Док, ЭтоДолг = Ложь)
	
	Сведения = РегистрыСведений.апЗагруженныеДокументы.ПолучитьПоследнее(ТекущаяДата(), Новый Структура("Документ", Док.Ссылка));
	
	Результат = ?(ЭтоДолг, Сведения.Категория, Сведения.КатегорияДолга);
	
	Возврат Результат;
	
КонецФункции //ВернутьКодКатегорииДокумента()

&НаСервере
// Функция определения соответствия перечисления видов документов
// в 1С и Агент Плюс 2.0
//
Функция ПолучитьВидыДокументов()
	
	ВидыДокументов = Новый Соответствие;
	
	ВидыДокументов.Вставить(Перечисления.апВидыДокументов.Заказ, 			"E070D148-8C9C-4E5F-AFDA-2838D5BE6618");
	ВидыДокументов.Вставить(Перечисления.апВидыДокументов.Реализация, 		"3B95D27F-7D6F-401C-AAF3-BD3DC78A1E82");
	ВидыДокументов.Вставить(Перечисления.апВидыДокументов.ПКО,	 			"FCDD8D0B-6E35-401F-BC28-8527FD2F4D3A");
	ВидыДокументов.Вставить(Перечисления.апВидыДокументов.РКО,	 			"EE0C3171-0CA1-40E5-95A7-08CBF3391682");	
	ВидыДокументов.Вставить(Перечисления.апВидыДокументов.Мерчендайзинг, 	"411F3673-AF9E-42C9-85B8-D58038BCBE90");
	ВидыДокументов.Вставить(Перечисления.апВидыДокументов.Посещение, 		"FF01E98F-A98B-4DB9-B23E-5C556FAD1097");
	ВидыДокументов.Вставить(Перечисления.апВидыДокументов.Поступление, 		"A40EFEE6-FBEE-4651-A537-46F3DF88F212");
	ВидыДокументов.Вставить(Перечисления.апВидыДокументов.Возврат,	 		"91C46770-D349-4EE3-A2B7-90E828023E05");
	ВидыДокументов.Вставить(Перечисления.апВидыДокументов.Перемещение, 		"196E2EBB-FE7C-4FBF-9A0B-2135A090256D");
	ВидыДокументов.Вставить(Перечисления.апВидыДокументов.СчетФактура, 		"89D11CA3-C97A-4806-9FF8-FB32959802B0");
	ВидыДокументов.Вставить(Перечисления.апВидыДокументов.Долг, 			"42393782-02E2-4193-B445-B0BE91B386A1");
	ВидыДокументов.Вставить(Перечисления.апВидыДокументов.Маршрут   , 		"29472CBF-A1A4-48B7-9992-5E1AA0EA0B02");
	
	Возврат ВидыДокументов;	
	
КонецФункции //ПолучитьВидыДокументов       

////////////////////////////////////////////////////////////////////////////////
// Процедуры для Агент Плюс 2.0				 ///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ВЫГРУЗКИ ДАННЫХ
//////////////////////////////////////////////////////////

&НаКлиенте
Процедура НастроитьАвтообменАПС()
	
	// Пока устанавливаем принудительно признак автообмена через Агент Плюс СОД
	Если Объект.флАвтоОбмен Тогда   		
		Если ПустаяСтрока(ПапкаСервера) Тогда
			ТекстСообщения = "Не указана константа ""Папка обмена"" для ""Агент Плюс СОД"". Автообмен не будет производиться!";
			ОповеститьОСобытии(ТекстСообщения);
			Возврат;
		КонецЕсли;  
		//КПКОбъектServer.SetExchangeDir(ПапкаСервера);
		//КПКОбъектServer.EnableServer();
		КПКОбъектServer.АпсУстПапкуОбмена(ПапкаСервера);
		КПКОбъектServer.АпсВключитьСервер();			
	Иначе		
		//КПКОбъектServer.SetExchangeDir(ПапкаСервера);
		//КПКОбъектServer.DisableServer();
		КПКОбъектServer.АпсУстПапкуОбмена("");
		КПКОбъектServer.АпсОтключитьСервер();							
	КонецЕсли;
		
КонецПроцедуры //НастроитьАвтообменАПС  

&НаСервере
Процедура ЗаписатьЭлементВДокументОбмена(СтруктураПолей, ЗакрытьЭлемент = Истина)
	
	Если СтруктураПолей.Свойство("GUID") Тогда
		Если Не ЗначениеЗаполнено(СтруктураПолей.GUID) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДокОбмена.ЗаписатьНачалоЭлемента("ITEM");
	
	Для Каждого ТекЭлемент Из СтруктураПолей Цикл
		ДобавитьПоле(ТекЭлемент.Ключ, ТекЭлемент.Значение);
	КонецЦикла;
	
	Если ЗакрытьЭлемент Тогда
		ДокОбмена.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
КонецПроцедуры //ЗаписатьЭлементВДокументОбмена

&НаСервере
Функция ПреобразоватьЗначениеВСтрокуДляXML(Значение)
	
	Перем ПреобразованноеЗначение;
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		ПреобразованноеЗначение = XMLСтрока(Значение);
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		ПреобразованноеЗначение = XMLСтрока(апСерверМодуль.ФорматироватьЧисло(Значение));
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
		ПреобразованноеЗначение = XMLСтрока(Число(Значение));
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		ПреобразованноеЗначение = XMLСтрока(апСерверМодуль.ДатаВремяВФорматXMLИз1СМТ(Значение));
	ИначеЕсли ТипЗнч(Значение) = Тип("УникальныйИдентификатор") Тогда
		ПреобразованноеЗначение = ВРег(XMLСтрока(Значение));
	ИначеЕсли Не ЗначениеЗаполнено(Значение) Тогда
		ПреобразованноеЗначение = "";
	ИначеЕсли ЗначениеЗаполнено(Значение) Тогда
		ПреобразованноеЗначение = ВРег(XMLСтрока(Значение.Ссылка.УникальныйИдентификатор()));
	Иначе
		ПреобразованноеЗначение = XMLСтрока(Значение);
	КонецЕсли;
	
	Возврат ПреобразованноеЗначение;
	
КонецФункции //ПреобразоватьЗначениеВСтрокуДляXML()

&НаСервере
Процедура ДобавитьПоле(Имя, Значение)
	
	ЗначXML = ПреобразоватьЗначениеВСтрокуДляXML(Значение);
	
	ДокОбмена.ЗаписатьАтрибут(Имя, ЗначXML);
	
КонецПроцедуры // ДобавитьПоле()

&НаСервере
Процедура ДобавитьКонстанту(Идентификатор, Значение)
	
	ДокОбмена.ЗаписатьНачалоЭлемента("ITEM");
	
		ДобавитьПоле("GUID",  Идентификатор);
		ДобавитьПоле("VALUE", Значение);							
		
	ДокОбмена.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // ДобавитьКонстанту() 

&НаСервере
Процедура ДобавитьПустойЭлементВXML(Имя)
	
	ДокОбмена.ЗаписатьНачалоЭлемента(Имя);
	ДокОбмена.ЗаписатьКонецЭлемента();
	
КонецПроцедуры //ДобавитьПустойЭлементВXML

&НаСервере
Функция ПолучитьТекстЗапросаДляНабораДанныхПоНоменклатуре()
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Ссылка КАК Ссылка
	|{ВЫБРАТЬ
	|	Ссылка.*}
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа = ЛОЖЬ
	|{ГДЕ
	|	Номенклатура.Ссылка.* КАК Номенклатура}
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура.Родитель,
	|	Номенклатура.Наименование";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапросаДляНабораДанныхПоСкладам()
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Склады.Ссылка КАК Ссылка
	|{ВЫБРАТЬ
	|	Ссылка.*}
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.ЭтоГруппа = ЛОЖЬ
	|{ГДЕ
	|	Склады.Ссылка.* КАК Склады}
	|
	|УПОРЯДОЧИТЬ ПО	
	|	Склады.Наименование";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапросаДляНабораДанныхПоОрганизациям()
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Ссылка КАК Ссылка
	|{ВЫБРАТЬ
	|	Ссылка.*}
	|ИЗ
	|	Справочник.Организации КАК Организации
	|{ГДЕ
	|	Организации.Ссылка.* КАК Организации}
	|
	|УПОРЯДОЧИТЬ ПО	
	|	Организации.Наименование";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапросаДляНабораДанныхПоВидамЦен()
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыЦен.Ссылка КАК Ссылка
	|{ВЫБРАТЬ
	|	Ссылка.*}
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен	
	|{ГДЕ
	|	ВидыЦен.Ссылка.* КАК ВидыЦен}
	|
	|УПОРЯДОЧИТЬ ПО	
	|	ВидыЦен.Наименование";
	
	Возврат ТекстЗапроса;
	
КонецФункции   

&НаСервере
Функция ПолучитьТекстЗапросаПоНоменклатуре(ЗапросПоХарактеристикам = Ложь)

	// Обработка флага учета резерва при выгрузке номенклатуры					  
	Условие = "";
	Если Объект.флРезервы Тогда
		Условие = " - СвободныеОстаткиОстатки.ВРезервеОстаток"
	КонецЕсли;	
	
	Если Константы.апРежимВыгрузкиОстатков.Получить() = Перечисления.апРежимыВыгрузкиОстатков.ПоРегиструТоварыНаСкладах Тогда
		ИмяРегистра = "ТоварыНаСкладах";
	Иначе
		ИмяРегистра = "СвободныеОстатки";
	КонецЕсли;
	
	Если ЗапросПоХарактеристикам Тогда
		
		// Обработка флага учета нулевых остатков при выгрузке характеристик	
		Если Объект.флВыгрТоварыСНулевОст Тогда  
			
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВложенныйЗапрос.СвободныйОстаток КАК СвободныйОстаток,
			|	ВложенныйЗапрос.Склад КАК Склад,
			|	апХарактеристикиНоменклатуры.Ссылка КАК СлужебнаяХарактеристика,
			|	ВложенныйЗапрос.Ссылка КАК Ссылка,
			|	ВложенныйЗапрос.Наименование,
			|	ВложенныйЗапрос.Владелец КАК Владелец,
			|	ВложенныйЗапрос.Номенклатура КАК Номенклатура
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток" + Условие + " , 0) КАК СвободныйОстаток,
			|		СвободныеОстаткиОстатки.Склад.Ссылка КАК Склад,
			|		ВложенныйЗапрос.Ссылка КАК Ссылка,
			|		ВложенныйЗапрос.Наименование КАК Наименование,
			|		ВложенныйЗапрос.Владелец КАК Владелец,
			|		ВложенныйЗапрос.Номенклатура КАК Номенклатура
			|	ИЗ
			|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|			Спр.Ссылка КАК Ссылка,
			|			Спр.Наименование КАК Наименование,
			|			Спр.Владелец КАК Владелец,
			|			Ном.Ссылка КАК Номенклатура
			|		ИЗ
			|			Справочник.ХарактеристикиНоменклатуры КАК Спр
			|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Ном
			|				ПО (Спр.Владелец = Ном.Ссылка
			|						ИЛИ Ном.ВидНоменклатуры = Спр.Владелец)
			|		ГДЕ
			|			Ном.Ссылка ЕСТЬ НЕ NULL 
			|			И Ном.Ссылка В(&Ассортимент)
			|			И Ном.ЭтоГруппа = ЛОЖЬ) КАК ВложенныйЗапрос
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления." + ИмяРегистра + ".Остатки(&Период, Номенклатура В (&Ассортимент) и Склад В (&ДоступныеСклады)) КАК СвободныеОстаткиОстатки
			|			ПО ВложенныйЗапрос.Ссылка = СвободныеОстаткиОстатки.Характеристика
			|				И ВложенныйЗапрос.Номенклатура = СвободныеОстаткиОстатки.Номенклатура) КАК ВложенныйЗапрос
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.апХарактеристикиНоменклатуры КАК апХарактеристикиНоменклатуры
			|		ПО ВложенныйЗапрос.Ссылка = апХарактеристикиНоменклатуры.Характеристика
			|			И ВложенныйЗапрос.Номенклатура = апХарактеристикиНоменклатуры.Номенклатура
			|ИТОГИ
			|	СУММА(СвободныйОстаток),
			|	МИНИМУМ(СлужебнаяХарактеристика),
			|	МИНИМУМ(Владелец)
			|ПО
			|	Номенклатура,
			|	Ссылка,
			|	Склад
			|АВТОУПОРЯДОЧИВАНИЕ";		
						
		Иначе
			
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СвободныеОстаткиОстатки.Характеристика.Ссылка КАК Ссылка,
			|	СвободныеОстаткиОстатки.Характеристика.Владелец КАК Владелец,
			|	СвободныеОстаткиОстатки.Характеристика.Наименование КАК Наименование,
			|	ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток" + Условие + " , 0) КАК СвободныйОстаток,
			|	СвободныеОстаткиОстатки.Склад.Ссылка КАК Склад,
			|	СвободныеОстаткиОстатки.Номенклатура КАК Номенклатура,
			|	апХарактеристикиНоменклатуры.Ссылка КАК СлужебнаяХарактеристика
			|ИЗ
			|	РегистрНакопления." + ИмяРегистра + ".Остатки(
			|			&Период,
			|			Номенклатура В (&Ассортимент)
			|				И Склад В (&ДоступныеСклады)) КАК СвободныеОстаткиОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.апХарактеристикиНоменклатуры КАК апХарактеристикиНоменклатуры
			|		ПО СвободныеОстаткиОстатки.Номенклатура = апХарактеристикиНоменклатуры.Номенклатура
			|			И СвободныеОстаткиОстатки.Характеристика = апХарактеристикиНоменклатуры.Характеристика
			|ГДЕ
			|	ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток" + Условие + " , 0) > 0
			|	И СвободныеОстаткиОстатки.Характеристика.Ссылка ЕСТЬ НЕ NULL 
			|
			|УПОРЯДОЧИТЬ ПО
			|	Наименование
			|ИТОГИ
			|	МИНИМУМ(Владелец),
			|	СУММА(СвободныйОстаток),
			|	МИНИМУМ(Номенклатура),
			|	МИНИМУМ(СлужебнаяХарактеристика)
			|ПО
			|	Номенклатура,
			|	Ссылка,
			|	Склад
			|АВТОУПОРЯДОЧИВАНИЕ";
				
		КонецЕсли;
		
	Иначе
		
		// Обработка флага учета нулевых остатков при выгрузке номенклатуры	
		Если Объект.флВыгрТоварыСНулевОст Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ХарактеристикиНоменклатуры.Ссылка) КАК КолХарактеристик
			|ПОМЕСТИТЬ КолХарактеристик
			|ИЗ
			|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
			|ГДЕ
			|	ХарактеристикиНоменклатуры.ПометкаУдаления = ЛОЖЬ
			|
			|СГРУППИРОВАТЬ ПО
			|	ХарактеристикиНоменклатуры.Владелец
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Спр.Ссылка КАК Ссылка,
			|	Спр.Наименование КАК Наименование,
			|	ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток" + Условие + ", 0) КАК СвободныйОстаток,
			|	СвободныеОстаткиОстатки.Склад.Ссылка КАК Склад,
			|	ВЫБОР
			|		КОГДА Характеристики.КолХарактеристик > 0
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ЕстьХарактеристики
			|ИЗ
			|	Справочник.Номенклатура КАК Спр
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления." + ИмяРегистра + ".Остатки(
			|				&Период,
			|				Номенклатура В (&Ассортимент)
			|					И Склад В (&ДоступныеСклады)) КАК СвободныеОстаткиОстатки
			|		ПО Спр.Ссылка = СвободныеОстаткиОстатки.Номенклатура
			|		ЛЕВОЕ СОЕДИНЕНИЕ КолХарактеристик КАК Характеристики
			|		ПО (Спр.Ссылка = Характеристики.Номенклатура
			|				ИЛИ Спр.ВидНоменклатуры = Характеристики.Номенклатура.Ссылка)
			|ГДЕ
			|	(Спр.Ссылка В (&Ассортимент)
			|				И Спр.ЭтоГруппа = ЛОЖЬ
			|			ИЛИ Спр.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
			|
			|УПОРЯДОЧИТЬ ПО
			|	Наименование
			|ИТОГИ
			|	СУММА(СвободныйОстаток),
			|	МИНИМУМ(ЕстьХарактеристики)
			|ПО
			|	Ссылка,
			|	Склад
			|АВТОУПОРЯДОЧИВАНИЕ";
			
		Иначе	
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ХарактеристикиНоменклатуры.Владелец КАК Номенклатура,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ХарактеристикиНоменклатуры.Ссылка) КАК КолХарактеристик
			|ПОМЕСТИТЬ КолХарактеристик
			|ИЗ
			|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
			|ГДЕ
			|	ХарактеристикиНоменклатуры.ПометкаУдаления = ЛОЖЬ
			|
			|СГРУППИРОВАТЬ ПО
			|	ХарактеристикиНоменклатуры.Владелец
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СвободныеОстаткиОстатки.Номенклатура КАК Ссылка,
			|	ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток" + Условие + " , 0) КАК СвободныйОстаток,
			|	СвободныеОстаткиОстатки.Склад.Ссылка КАК Склад,
			|	ВЫБОР
			|		КОГДА Характеристики.КолХарактеристик > 0
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ЕстьХарактеристики,
			|	СвободныеОстаткиОстатки.Номенклатура.Наименование КАК Наименование
			|ИЗ
			|	РегистрНакопления." + ИмяРегистра + ".Остатки(
			|			&Период,
			|			Номенклатура В (&Ассортимент)
			|				И Склад В (&ДоступныеСклады)) КАК СвободныеОстаткиОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ КолХарактеристик КАК Характеристики
			|		ПО (СвободныеОстаткиОстатки.Номенклатура = Характеристики.Номенклатура.Ссылка
			|				ИЛИ СвободныеОстаткиОстатки.Номенклатура.ВидНоменклатуры = Характеристики.Номенклатура.Ссылка)
			|ГДЕ
			|	ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток" + Условие + " , 0) > 0
			|	И СвободныеОстаткиОстатки.Номенклатура.Ссылка ЕСТЬ НЕ NULL 
			|
			|УПОРЯДОЧИТЬ ПО
			|	Наименование
			|ИТОГИ
			|	СУММА(СвободныйОстаток),
			|	МИНИМУМ(ЕстьХарактеристики)
			|ПО
			|	Ссылка,
			|	Склад
			|АВТОУПОРЯДОЧИВАНИЕ";
					
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат ТекстЗапроса;
	
КонецФункции //ПолучитьТекстЗапросаПоНоменклатуре

&НаСервере
Процедура УстановитьНастройкиФормы()
	
	ПрямоеСоединение = Перечисления.апСпособыОбменаДанными.ПрямоеПодключение;
	АгентПлюсСОД     = Перечисления.апСпособыОбменаДанными.АгентСОД;
	ФТПСервер   	 = Перечисления.апСпособыОбменаДанными.ФТП;
	Т_ 				 = Символы.Таб;
	ПапкаСервера 	 = СокрЛП(Константы.апПапкаОбменаСОД.Получить());
	
	Если Не ЗначениеЗаполнено(Объект.СпособОбмена) Тогда
		Объект.СпособОбмена = Константы.апСпособОбмена.Получить();
	КонецЕсли;
	
	Объект.флАрхив 	 	= Истина;	
	Объект.флПроводить 	= Истина;
	Объект.флОбновлять	= Истина;
	Объект.флОчищатьСправочникиПередЗагрузкой = Истина;
	
//	мВалютаРегламентированногоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	
	ТаблицаКассовыхДокументов = Новый ТаблицаЗначений;	
	ТаблицаКассовыхДокументов.Колонки.Добавить("Документ");
	ТаблицаКассовыхДокументов.Колонки.Добавить("СтруктураДокумента");
	ТаблицаКассовыхДокументов.Колонки.Добавить("ЭтоНовыйОбъект");
	ТаблицаКассовыхДокументов.Колонки.Добавить("ИдОснования"); 
	
	ТаблицаДокументовПоступлений = Новый ТаблицаЗначений;	
	ТаблицаДокументовПоступлений.Колонки.Добавить("Документ");
	ТаблицаДокументовПоступлений.Колонки.Добавить("СтруктураДокумента");
	ТаблицаДокументовПоступлений.Колонки.Добавить("ЭтоНовыйОбъект");
	ТаблицаДокументовПоступлений.Колонки.Добавить("ИдОснования"); 
	
	ТабКИ = Новый ТаблицаЗначений;	
	ТабКИ.Колонки.Добавить("Объект");
	ТабКИ.Колонки.Добавить("ИдЭлемента");	
	ТабКИ.Колонки.Добавить("Тип");
	ТабКИ.Колонки.Добавить("Вид");
	ТабКИ.Колонки.Добавить("Представление");     
	
	ТабДоговоров = Новый ТаблицаЗначений;	
	ТабДоговоров.Колонки.Добавить("Объект");
	ТабДоговоров.Колонки.Добавить("Партнер");	
	
	ПапкаОбменаМУ 	     = "\Program Files\AgentP2\exchange";
	ПутьКФайлуЗапускаВМУ = "\Program Files\AgentP2\aplbrs.exe";
	
	//ЗаполнитьСписокУдаляемыхОбъектов(); //будем заполнять в процедуре ПриОткрытии(), т.к. список сохраняется и восстанавливается ПОСЛЕ заполнения на сервере
	
	//ИспользоватьУправленческуюОрганизацию = ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию");
	
	ЗадатьКаталогиВременныхФайлов();
КонецПроцедуры //УстановитьНастройкиФормы()

// Процедура задает каталоги временных файлов.
// Параметр РаздельноПоАгентам определяет,
// что необходимо при выгрузке записывать данные не в общую папку, а в отдельную папку для каждого агента
//
&НаСервере
Процедура ЗадатьКаталогиВременныхФайлов(РаздельноПоАгентам = Ложь)
	КаталогВремФайловКонстанта = Константы.апКаталогВременныхФайлов.Получить();
	 	  	     	
	Если ПустаяСтрока(КаталогВремФайловКонстанта) Тогда
		//задаем каталог ТОЛЬКО для сервера, т.к. на клиенте каталог временных файлов будет другой
		КаталогВременныхФайловСервер = КаталогВременныхФайлов();		
	Иначе		
		КаталогВременныхФайловКлиент = КаталогВремФайловКонстанта;		
		КаталогВременныхФайловСервер = КаталогВремФайловКонстанта;
		
		КаталогВременныхФайловСерверНаДиске = Новый Файл(КаталогВременныхФайловСервер);
		Если Не КаталогВременныхФайловСерверНаДиске.Существует() Тогда
			ОповеститьОСобытии("Не найден каталог: " + КаталогВременныхФайловСервер + ", указанный в качестве каталога временных файлов на сервере!");
			КаталогВременныхФайловСервер = КаталогВременныхФайлов();
		Иначе
			Если РаздельноПоАгентам Тогда
				//папка агента формируется по правилу: (имя агента в транслите)_(идентификатор устройства)
				КаталогВременныхФайловСервер = КаталогВременныхФайловСервер + "\" + апСерверМодуль.Транслит(ВыбАгент.Наименование) + "_" + СокрЛП(ПолучитьИдентификаторУстройстваАгента());
				
				ПроверяемыйКаталог = Новый Файл(КаталогВременныхФайловСервер);
				Если Не ПроверяемыйКаталог.Существует() Тогда
					СоздатьКаталог(КаталогВременныхФайловСервер);
				КонецЕсли;
				КаталогВременныхФайловКлиент = КаталогВременныхФайловСервер;
			КонецЕсли;
		КонецЕсли;                                                  		
	КонецЕсли; //Если ПустаяСтрока(КаталогВремФайловКонстанта) Тогда
	
	апСерверМодуль.ДополнитьСлешВПуть(КаталогВременныхФайловКлиент);
	апСерверМодуль.ДополнитьСлешВПуть(КаталогВременныхФайловСервер);
			
КонецПроцедуры //ЗадатьКаталогиВременныхФайлов()

//Функция ПолучитьНастройкуАгента()
//	
//	НастройкиАгента = ПланыОбмена.апМобильноеПриложениеТорговыйПредставитель.НайтиПоРеквизиту("Пользователь", Объект.ВыбАгент);	
//	
//	Возврат НастройкиАгента;
//	
//КонецФункции

&НаСервере
Функция ПолучитьЗначениеПеречисления(ЗначПараметра)
	
	СоответствиеПеречислений = Новый Соответствие;
	
	СоответствиеПеречислений.Вставить("a4d0f540-64ed-4f3e-b2bb-818da38f5ab2", Перечисления.ТипыКонтактнойИнформации.Адрес);
	СоответствиеПеречислений.Вставить("52477200-af54-405b-9888-14b8bded0e19", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	СоответствиеПеречислений.Вставить("2c2cfc86-e2a0-414d-a116-5acadac53437", Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
	СоответствиеПеречислений.Вставить("e45419b3-0cfd-47ce-8b24-7037a1e86aed", Перечисления.ТипыКонтактнойИнформации.Другое);
	СоответствиеПеречислений.Вставить("8fc8f351-14f0-48eb-952a-38bb313b28d5", Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	// Для видов оплаты использованы случайные идентификаторы, т.к. в мобильном приложении это справочник
	// Это же соответствие используется при выгрузке видов оплат в мобильное приложение в процедуре "Выгрузка дополнительной информации"
	СоответствиеПеречислений.Вставить("4a73372b-48e3-4874-8b87-b964d5782e25", Перечисления.ФормыОплаты.Наличная);
	СоответствиеПеречислений.Вставить("7e6a8955-0b5b-4a3d-9446-acce667ed741", Перечисления.ФормыОплаты.Безналичная);
	СоответствиеПеречислений.Вставить("f2cf11e4-d6cc-4986-a5a2-0a440301876c", Перечисления.ФормыОплаты.Взаимозачет);
	СоответствиеПеречислений.Вставить("bd9e3958-1e52-4d37-9685-6083e249702f", Перечисления.ФормыОплаты.ПлатежнаяКарта);
		
	ТекТип = СоответствиеПеречислений.Получить(Нрег(ЗначПараметра));
	
	Возврат ТекТип;	
	
КонецФункции //ПолучитьЗначениеПеречисления 

&НаСервере
Функция ПолучитьСтруктуруПредопределенныхПолейСправочника(ТекЭлемент, СоздаватьИдентификатор = Ложь)
	
	СтруктураПолей = Новый Структура;
	
	Если СоздаватьИдентификатор Тогда
		СтруктураПолей.Вставить("GUID",	Новый УникальныйИдентификатор());
	ИначеЕсли ЗначениеЗаполнено(ТекЭлемент) Тогда
		СтруктураПолей.Вставить("GUID",	ТекЭлемент.Ссылка.УникальныйИдентификатор());
	Иначе
		СтруктураПолей.Вставить("GUID",	"");
	КонецЕсли;
	
	СтруктураПолей.Вставить("Name", ТекЭлемент.Наименование);
	
	Возврат СтруктураПолей
	
КонецФункции //ПолучитьСтруктуруПредопределенныхПолейСправочника

&НаСервере
Функция ПолучитьСтруктуруПредопределенныхПолейДокумента(ТекДокумент, СоздаватьИдентификатор = Ложь, ВыгружатьНомер = Ложь)
	
	СтруктураПолей = Новый Структура;
	
	Если СоздаватьИдентификатор Тогда
		СтруктураПолей.Вставить("GUID",	Новый УникальныйИдентификатор());
	Иначе
		СтруктураПолей.Вставить("GUID",	ТекДокумент.Ссылка.УникальныйИдентификатор());
	КонецЕсли;
	
	СтруктураПолей.Вставить("dt", 	  ТекДокумент.Дата);	
	СтруктураПолей.Вставить("IsPost", ТекДокумент.Проведен); 
	
	Если ВыгружатьНомер Тогда       
		ВставитьНомерДокументаВСтруктуру(СтруктураПолей, ТекДокумент.Ссылка);
	КонецЕсли;
	
	//для выгрузки определнных документов в МУ
	Если Не ЭтоВыгрузкаОпределенныхДокументов = Неопределено Тогда 
		Если Не ВыгружатьНомер И ЭтоВыгрузкаОпределенныхДокументов Тогда
			ВставитьНомерДокументаВСтруктуру(СтруктураПолей, ТекДокумент.Ссылка);	
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураПолей
	
КонецФункции //ПолучитьСтруктуруПредопределенныхПолейДокумента

&НаСервере
Функция ПолучитьЦенуНоменклатуры(Номенклатура, ВидЦены , Период, Характеристика = Неопределено);
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЦеныНоменклатурыСрезПоследних.Цена,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦены,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Дата,
	|			Номенклатура = &Номенклатура
	|				И ВидЦены = &ВидЦены" + ?(Характеристика = Неопределено, "", " И Характеристика = &Характеристика")  + ") КАК ЦеныНоменклатурыСрезПоследних");
	
	Запрос.УстановитьПараметр("Номенклатура", 	Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("ВидЦены",	  	ВидЦены);
	Запрос.УстановитьПараметр("Дата", 	  	  	Период);
	
	Результат = Запрос.Выполнить().Выбрать();	
	//для каждого цена из результат Цикл
	//	Prices.Добавить(новый Структура("Товар, ТипЦены, ЗначениеЦены", 
	//	цена.Номенклатура,
	//	цена.ВидЦены,
	//	Цена.Цена));
	//КонецЦикла;
	
	Если Результат.Следующий() Тогда
		Возврат Результат.Цена;
	КонецЕсли;
	
	Возврат 0;	
	
КонецФункции

&НаСервере
Процедура ДобавитьЭлементВСписок(Список, Наименование, ИдСпр, Пометка = Истина)
	
	Если Список.НайтиПоЗначению(ИдСпр) = Неопределено Тогда
		Список.Добавить(ИдСпр, Наименование, Пометка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокУдаляемыхОбъектов()
	
	// Заполняем список удаляемых справочников                                             	
	ДобавитьЭлементВСписок(Объект.СписокУдаляемыхСпр, "Организации",     				"0E3CBAEA-5467-45CD-8C86-FB1777DA435B");
	ДобавитьЭлементВСписок(Объект.СписокУдаляемыхСпр, "Партнеры",     					"9450980F-FB59-47E3-BAE2-AA3C58441B1A");
	ДобавитьЭлементВСписок(Объект.СписокУдаляемыхСпр, "Контрагенты",  					"D3DBB02E-681E-4FC2-AD0E-8EF1234E9F48");
	ДобавитьЭлементВСписок(Объект.СписокУдаляемыхСпр, "Контактные лица", 				"CF387A58-4655-41B5-A460-85884D1F20D0");	
	ДобавитьЭлементВСписок(Объект.СписокУдаляемыхСпр, "Номенклатура",    				"D6D52ADA-0F38-4112-AF3C-2F1E425A43D1");	
	ДобавитьЭлементВСписок(Объект.СписокУдаляемыхСпр, "Характеристики номенклатуры",    "CC552C31-F7DE-4259-A6E3-66EF765D3B43");	
	ДобавитьЭлементВСписок(Объект.СписокУдаляемыхСпр, "Единицы измерения",   			"80452C60-B442-4DA9-A048-42F63270CA14");	
	ДобавитьЭлементВСписок(Объект.СписокУдаляемыхСпр, "Штрих-коды",   	   				"C156CC98-8B92-444E-B8C2-E3DE51106B66");	
	
	ДобавитьЭлементВСписок(Объект.СписокУдаляемыхСпр, "Типы цен",   	  				"00F1FFE7-E16E-4FF4-9EF1-B8D0C54BDF59");	
	ДобавитьЭлементВСписок(Объект.СписокУдаляемыхСпр, "Склады",   		  				"2516FFCE-F46F-4326-BE00-438EF0871D30");	
	ДобавитьЭлементВСписок(Объект.СписокУдаляемыхСпр, "Вопросы анкеты",  				"D2015F3B-2F65-46F7-A40D-2867FB75D930");	
	ДобавитьЭлементВСписок(Объект.СписокУдаляемыхСпр, "Ответы анкеты",   				"F3FEF961-294A-48E2-8A72-BFC950C4466B");	
	ДобавитьЭлементВСписок(Объект.СписокУдаляемыхСпр, "Запросы",   	  					"CC458719-5078-4DC8-9A0C-FA19E3904F39");	
	ДобавитьЭлементВСписок(Объект.СписокУдаляемыхСпр, "Картинки",   	  				"E01CF3A3-6765-4FD3-801C-CCDBF85C78FC");
	ДобавитьЭлементВСписок(Объект.СписокУдаляемыхСпр, "Виды задач",   	  				"A00B7107-5700-4E02-97F6-C577E707E21F");
		
	// Заполняем список удаляемых документов
	ДобавитьЭлементВСписок(Объект.СписокУдаляемыхДок, "Заказы", 	    "E01E1F5C-D6E4-46E8-B923-3758B0D79BDE", Ложь);	
	ДобавитьЭлементВСписок(Объект.СписокУдаляемыхДок, "Реализации",     "7FFB418C-73C9-4883-91C5-827FA5145A3A", Ложь);	
	ДобавитьЭлементВСписок(Объект.СписокУдаляемыхДок, "ПКО",   		 	"749BE2E0-9B00-4D7B-9D4D-88CA53327511", Ложь);	
	ДобавитьЭлементВСписок(Объект.СписокУдаляемыхДок, "РКО",   		 	"3890D435-96BA-4481-ABC0-23782E15B32F", Ложь);	
	ДобавитьЭлементВСписок(Объект.СписокУдаляемыхДок, "Мерчендайзинг",  "61DEE5FE-D0A8-4842-A6AF-A8D33F298845", Ложь);	
	ДобавитьЭлементВСписок(Объект.СписокУдаляемыхДок, "Посещения",  	"9F147C59-5EE8-4550-8289-12ECFE5D0617", Ложь);	
	ДобавитьЭлементВСписок(Объект.СписокУдаляемыхДок, "Перемещения",    "77525C87-CB2F-405E-A92E-6F373EDEECE7", Ложь);	
	ДобавитьЭлементВСписок(Объект.СписокУдаляемыхДок, "Поступления",    "C9850D61-BC15-445A-8B1A-E328CC45DDAE", Ложь);
	ДобавитьЭлементВСписок(Объект.СписокУдаляемыхДок, "Задания",      	"B49074D6-3C0C-4361-B71D-BBF446AB02B6", Ложь);
	ДобавитьЭлементВСписок(Объект.СписокУдаляемыхДок, "Возвраты",       "4971b041-beab-4fa6-b1e8-10138f04fe44", Ложь);
	ДобавитьЭлементВСписок(Объект.СписокУдаляемыхДок, "Сообщения",      "6956C79C-4310-4F71-AF66-0C2048F1344F", Истина);	
	
КонецПроцедуры //ЗаполнитьСписокУдаляемыхОбъектов

&НаСервере
Процедура ЗаполнитьСписокПередаваемыхДополнительныхДанных()
	Объект.СписокПередаваемыхДополнительныхДанных.Очистить();
	//ДобавитьЭлементВСписок(Объект.СписокПередаваемыхДополнительныхДанных, "Файл шрифта"	  	 , "ФайлШрифта"	   , Ложь);
	//ДобавитьЭлементВСписок(Объект.СписокПередаваемыхДополнительныхДанных, "Файлы онлайн-карт", "ФайлОнлайнКарт", Ложь);
	ДобавитьЭлементВСписок(Объект.СписокПередаваемыхДополнительныхДанных, "Файл настроек", "ФайлНастроек", Ложь);
	ДобавитьЭлементВСписок(Объект.СписокПередаваемыхДополнительныхДанных, "Файлы скриптов", "ФайлСкриптов", Ложь);
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакОчисткиСправочника(ИдСпр)
	
	Если Объект.флОчищатьСправочникиПередЗагрузкой Тогда
		НайдЭлемент = Объект.СписокУдаляемыхСпр.НайтиПоЗначению(ВРег(ИдСпр));
		Если Не НайдЭлемент = Неопределено Тогда
			ДобавитьПоле("KILLALL", Строка(Число(НайдЭлемент.Пометка)));                	
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры //УстановитьПризнакОчисткиСправочника  

&НаСервере
Процедура УстановитьПризнакОчисткиДокумента(ИдДок)
	
	Если Объект.флОчищатьДокументыПередЗагрузкой Тогда
		НайдЭлемент = Объект.СписокУдаляемыхДок.НайтиПоЗначению(ИдДок);
		Если Не НайдЭлемент = Неопределено Тогда
			ДобавитьПоле("KILLALL", Строка(Число(НайдЭлемент.Пометка)));                	
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры //УстановитьПризнакОчисткиДокумента  

&НаСервере
Функция ПолучитьОсновногоКонтрагентаПартнера(Партнер, СоздаватьКонтрагента = Истина)
	
	// Пытаемся найти контрагента по партнеру
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Партнер = &Партнер
	|	И Контрагенты.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		// Если нашли, то берем первый попавшийся
		Возврат Выборка.Ссылка;
	Иначе
		Если СоздаватьКонтрагента Тогда
			// Если нет, то создаем новый элемент
			ОбъектСпр = Справочники.Контрагенты.СоздатьЭлемент();
		    ОбъектСпр.Наименование 		 = Партнер.Наименование;
			ОбъектСпр.НаименованиеПолное = Партнер.Наименование;
			ОбъектСпр.ЮрФизЛицо 		 = Перечисления.ЮрФизЛицо.ЮрЛицо;
			ОбъектСпр.Партнер 		     = Партнер;
			ОбъектСпр.Записать();
			
			Возврат ОбъектСпр.Ссылка;			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Справочники.Контрагенты.ПустаяСсылка();
	
КонецФункции //ПолучитьОсновногоКонтрагентаПартнера

&НаСервере
// Функция получает остатки на передвижном складе
// и возвращает таблицу остатков
//
Функция ПолучитьОстаткиТоваровНаПередвижномСкладе()
	
	//Если АвтоСклад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
	//	Регистр = "ТоварыВНТТ";
	//ИначеЕсли АвтоСклад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
	//	Регистр = "ТоварыВРознице";
	//ИначеЕсли АвтоСклад.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
	//	Регистр = "ТоварыНаСкладах";
	//КонецЕсли;
	
	Регистр = "ТоварыНаСкладах";
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Остатки.Номенклатура КАК Номенклатура,
	|	Остатки.Характеристика,
	|	СУММА(Остатки.ВНаличииОстаток) КАК Количество,
	|	СУММА(Остатки.ВРезервеОстаток) КАК ВРезерве,
	|	Сумма(Остатки.ВРезервеОстаток - Остатки.ВРезервеОстаток) КАК КоличествоСУчетомРезерва	
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			Номенклатура В ИЕРАРХИИ (&Ассортимент)
	|				И Склад = &Склад) КАК Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.Номенклатура,
	|	Остатки.Характеристика");
	
	Запрос.УстановитьПараметр("Дата",  		 ТекущаяДата());
	Запрос.УстановитьПараметр("Ассортимент", Ассортимент);
	Запрос.УстановитьПараметр("Склад", 		 МобильныйСклад);
	
	Остатки = Запрос.Выполнить().Выгрузить();
	
	Возврат Остатки;
	
КонецФункции //ПолучитьОстаткиТоваровНаПередвижномСкладе

&НаСервере
// Функция ищет значение в таблице остаков передвижного склада
// и возвращает значение. Если значение не найдено, то 0.
// Параметры
//  <Товар>  - <СпрСсылка.Номенклатура или СпрСсылка.ХарактеристикиНоменклатуры> - объект
//                 остаток для которого будет производиться поиск значение остатка
//  <СписокОстатков>  - <ТаблицаЗначений> - Таблица остатков
//                 в которой будет искаться остаток
//
// Возвращаемое значение:
//   <Число>   - остаток на передвижном складе
//
Функция ПолучитьОстатокТовараНаПередвижномСкладе(Товар, СписокОстатков)

	ОстатокНаБорту = 0;
	
	СтрокаТЗ = СписокОстатков.Найти(Товар);
	Если СтрокаТЗ <> Неопределено Тогда
		ОстатокНаБорту = СтрокаТЗ.Количество;
	КонецЕсли;
	
	Возврат ОстатокНаБорту;
	
КонецФункции // ПолучитьОстатокТовараНаПередвижномСкладе()

&НаСервере
Функция ПолучитьЕдиницуИзСлужебногоСправочника(СтрокаТаб)
	
	апЕдиница = Справочники.апЕдиницыИзмерения.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(СтрокаТаб.Упаковка) Тогда
		
		ТекУпаковка = СтрокаТаб.Упаковка;
		
		апЕдиница = ПолучитьСсылкуИзСправочника(ТекУпаковка.УникальныйИдентификатор(), "апЕдиницыИзмерения");
		
		Если апЕдиница.Пустая() Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	апЕдиницыИзмерения.Ссылка
			|ИЗ
			|	Справочник.апЕдиницыИзмерения КАК апЕдиницыИзмерения
			|ГДЕ		
			|	апЕдиницыИзмерения.Упаковка = &Упаковка
			|	И апЕдиницыИзмерения.Номенклатура = &Номенклатура");
			
			Запрос.УстановитьПараметр("Упаковка",	  ТекУпаковка);
			Запрос.УстановитьПараметр("Номенклатура", СтрокаТаб.Номенклатура);		 
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				апЕдиница = Выборка.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе 
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	апЕдиницыИзмерения.Ссылка
		|ИЗ
		|	Справочник.апЕдиницыИзмерения КАК апЕдиницыИзмерения
		|ГДЕ		
		|	апЕдиницыИзмерения.ЕдиницаИзмерения = &ЕдиницаИзмерения
		|	И апЕдиницыИзмерения.Номенклатура = &Номенклатура");
		
		Запрос.УстановитьПараметр("ЕдиницаИзмерения", СтрокаТаб.Номенклатура.ЕдиницаИзмерения);
		Запрос.УстановитьПараметр("Номенклатура",     СтрокаТаб.Номенклатура);		 
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			апЕдиница = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;  
	
	Возврат апЕдиница;
	
КонецФункции	

&НаСервере
Процедура ВключитьДополнительныйЭлементСправочникаВМассив(Элемент)
	
	Если ТипЗнч(Элемент) = Тип("СправочникСсылка.Организации") Тогда
		НужныйМассив = МассивОрганизаций;
	ИначеЕсли ТипЗнч(Элемент) = Тип("СправочникСсылка.Партнеры") Тогда
		НужныйМассив = МассивПартнеров;
	ИначеЕсли ТипЗнч(Элемент) = Тип("СправочникСсылка.Контрагенты") Тогда
		НужныйМассив = МассивКонтрагентов;
	ИначеЕсли ТипЗнч(Элемент) = Тип("СправочникСсылка.Склады") Тогда
		НужныйМассив = МассивСкладов;
	ИначеЕсли ТипЗнч(Элемент) = Тип("СправочникСсылка.ВидыЦен") Тогда
		НужныйМассив = МассивВидовЦен;		
	ИначеЕсли ТипЗнч(Элемент) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		НужныйМассив = МассивКЛ;		
	 ИначеЕсли ТипЗнч(Элемент) = Тип("СправочникСсылка.Номенклатура") Тогда
		НужныйМассив = Ассортимент;
	КонецЕсли;
	
	Если Не НужныйМассив = Неопределено Тогда
		Если НужныйМассив.Найти(Элемент) = Неопределено Тогда
			НужныйМассив.Добавить(Элемент);
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры //ВключитьДополнительныйЭлементСправочникаВМассив

&НаСервере
// Функция предназначена для определения даты последнего
// созданного трека в ИБ 1С:Предприятия
//
// Возвращаемое значение:
//  Дата
//
// Добавлено: Арт 2007-12-26	                                                                 
//
Функция ПолучитьДатуПоследнегоТрека()	 	
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	апТрекиПередвижений.ДатаСоздания КАК ДатаСоздания,
	|	апТрекиПередвижений.ФайлТрека,
	|	апТрекиПередвижений.ИмяФайла,
	|	апТрекиПередвижений.ПутьКФайлу
	|ИЗ
	|	РегистрСведений.апТрекиПередвижений КАК апТрекиПередвижений
	|ГДЕ
	|	апТрекиПередвижений.Агент = &Агент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСоздания УБЫВ");
	
	Запрос.УстановитьПараметр("Агент", ВыбАгент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда			
		ДатаТрека = ПолучитьДатуПоследнегоТрекаИзФайла(Выборка);		
	Иначе
		ДатаТрека = "";
	КонецЕсли;	
	
	Возврат ДатаТрека;
	
КонецФункции //ПолучитьДатуПоследнегоТрека()

&НаСервере
// Функция ПолучитьДатуПоследнегоТрекаИзФайла
//
// Параметры:
//  ИмяФайлаТреков - имя файла трека, из которого нужно "вытащить" дату последнего трека
//
//Возвращаемое значение:
//  Дата
//
// Описание:
//	Функция возвращает дату последнего трека для агента
//   
Функция ПолучитьДатуПоследнегоТрекаИзФайла(Выборка) Экспорт
	
	Если Не ПустаяСтрока(Выборка.ПутьКФайлу) Тогда	// Трек хранится во внешнем файле
		
		ПутьКФайлу = Выборка.ПутьКФайлу;
		
		Если ПустаяСтрока(ПутьКФайлу) Тогда
			Возврат "";
		КонецЕсли;
		
	Иначе
		
		ПапкаТреков = КаталогВременныхФайловСервер + "_GPSTracks\";
		
		Результат = апСерверМодуль.ПроверитьСуществованиеКаталога(ПапкаТреков, Ложь, Истина);
		Если Не Результат Тогда
			Возврат "";
		КонецЕсли;
		
		ХранимыйФайл = Выборка.ФайлТрека.Получить();			
		Если ХранимыйФайл = Неопределено Тогда
			Возврат "";
		КонецЕсли;
		
		Если ТипЗнч(ХранимыйФайл) = Тип("ДвоичныеДанные") Тогда
			ПутьКФайлу = КаталогВременныхФайловСервер + Выборка.ИмяФайла;			
			ХранимыйФайл.Записать(ПутьКФайлу);			
		Иначе
			Возврат "";
		КонецЕсли;	
				
	КонецЕсли;
	
	ТекстФайла = Новый ТекстовыйДокумент();
	
	ФайлНаДиске = Новый Файл(ПутьКФайлу);   	
	Если Не ФайлНаДиске.Существует() Тогда
		Возврат "";   
	КонецЕсли; 	
	
	Попытка 		
		ТекстФайла.Прочитать(ПутьКФайлу); 						
	Исключение 						
		Возврат "";
	КонецПопытки;		                            
	
	ВсегоСтрок = ТекстФайла.КоличествоСтрок();
	
	// Будем считать, что в последней строке содержится последний записанный трек
	СтрокаПослТрека = ТекстФайла.ПолучитьСтроку(ВсегоСтрок);
	
	Если ПустаяСтрока(СтрокаПослТрека) Тогда               
		СтрокаПослТрека = ТекстФайла.ПолучитьСтроку(ВсегоСтрок-1);   
	КонецЕсли;
	
	Если ФайлНаДиске.Расширение = ".txt" Тогда   		
		ПозДаты = Найти(СтрокаПослТрека,  Символы.Таб);                                 
		
		Если ПозДаты > 0 Тогда 			
			ДатаВремяИзФайла = СокрЛП(Лев(СтрокаПослТрека, ПозДаты));			
			ДатаТрека        = ДатаВремяXMLВФормат1С(ДатаВремяИзФайла); 			
		КонецЕсли;	  		
	ИначеЕсли ФайлНаДиске.Расширение = ".plt" Тогда		
		СчЗп = 0;
		ПозЗп = Найти(СтрокаПослТрека, ",");
		// После 5-й по счету запятой следует дата
		Пока ПозЗп > 0 Цикл
			СчЗп = СчЗп + 1;			
			СтрокаПослТрека = Сред(СтрокаПослТрека, ПозЗп + 1);
			ПозЗп = Найти(СтрокаПослТрека, ",");
			Если СчЗп = 5 Тогда				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ПозЗп = Найти(СтрокаПослТрека, ",");
		Если ПозЗп > 0 Тогда
			ДатаТрека = Лев(СтрокаПослТрека, ПозЗп-1); 
			ВремяТрека = Сред(СтрокаПослТрека, ПозЗп+1, 6);
			
			Год   = Число("20" + Прав(ДатаТрека, 2));
			Месяц = Число(Сред(ДатаТрека, 3,2));
			День  = Число(Лев(ДатаТрека, 2));
			
			Часы    = Число(Лев(ВремяТрека, 2));
			Минуты  = Число(Сред(ВремяТрека, 3,2));
			Секунды = Число(Прав(ВремяТрека, 2));
			
			ДатаТрека = Дата(Год, Месяц, День, Часы, Минуты, Секунды);
		КонецЕсли; 		
	Иначе
		Возврат "";
	КонецЕсли;
	
	Возврат ДатаТрека;
		
КонецФункции //ПолучитьДатуПоследнегоТрекаИзФайла()
       
///////////////////////////////////////////
// Процедуры выгрузки данных
////////////////////////////////////////////
         
&НаСервере
Функция УпаковатьФайлОбменаВАрхив(АдресВременногоХранилищаАрхиваКартинок = "")
	        	
	Если Объект.флАрхив Тогда
		
		ПутьИмяАрхива = Лев(ИмяФайла, СтрДлина(ИмяФайла) - 3) + "zip"; //файл вида <Код агента>.zip
		
		Архив = Новый ЗаписьZipФайла(ПутьИмяАрхива, ПарольАрхива, , МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный);		
		Архив.Добавить(ИмяФайла);		
		
		Если Не ПустаяСтрока(АдресВременногоХранилищаАрхиваКартинок) Тогда
			ПолноеИмяФайлаКартинок = КаталогВременныхФайловСервер + ИмяФайлаАрхиваКартинок;
			ДвоичныеДанныеФайлаАрхиваКартинок = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаАрхиваКартинок);			
			Если ДвоичныеДанныеФайлаАрхиваКартинок = Неопределено Тогда
				ОповеститьОСобытии("Файл архива картинок для агента: " + ВыбАгент.Наименование + " не получен из временного хранилища!", СтатусСообщения.Внимание);				
			КонецЕсли;       			
			ДвоичныеДанныеФайлаАрхиваКартинок.Записать(ПолноеИмяФайлаКартинок);	
			Архив.Добавить(ПолноеИмяФайлаКартинок);
		КонецЕсли;    		
				
		//сформируем файл-манифест
		Если СписокБазДанных.Количество() > 1 Тогда
			ПутьКФайлуМанифест = КаталогВременныхФайловСервер + "manifest";
			
			Текст = Новый ЗаписьТекста(ПутьКФайлуМанифест, КодировкаТекста.ANSI);
			
			Текст.ЗаписатьСтроку("<manifest version=""1"">");
			Для Каждого ТекСтрока Из СписокБазДанных Цикл				
				Текст.ЗаписатьСтроку("<import db=" + """" + ТекСтрока + """" + " file=" + """" + "FromCDB.xml""" + " />");				
			КонецЦикла;
			Текст.ЗаписатьСтроку("</manifest>");
			Текст.Закрыть();
			
			Архив.Добавить(ПутьКФайлуМанифест);
		КонецЕсли; //Если СписокБазДанных.Количество() > 1 Тогда
		
		//добавим файл отчета по запросу
		//Если ЗначениеЗаполнено(ФайлОтчета) Тогда
		//	НайтиПодкаталогОтчетов = Найти(ФайлОтчета, "\reports");
		//	ПапкаДоКаталогов = Лев(ФайлОтчета, НайтиПодкаталогОтчетов);
		//	
		//	//ФайлНаДиске = Новый Файл(ФайлОтчета);
		//	//ИмяОтчетаВПапке = ФайлНаДиске.Имя;			
		//	
		//	Архив.Добавить(ПапкаДоКаталогов+"*.*",  РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);	
		//КонецЕсли;
		
		Если Объект.флПередаватьДополнительныеДанные Тогда
			
			// добавим файл скриптов
			НайдЭлемент = Объект.СписокПередаваемыхДополнительныхДанных.НайтиПоЗначению("ФайлСкриптов");
			Если Не НайдЭлемент = Неопределено Тогда
				Если НайдЭлемент.Пометка Тогда
					ПутьКФайлуСкрипта = КаталогВременныхФайловСервер + "scripts.zip";
					ФайлСкрипта = Обработки.апОбменДанными.ПолучитьМакет("ФайлСкриптов");
					ФайлСкрипта.Записать(ПутьКФайлуСкрипта);
					
					Архив.Добавить(ПутьКФайлуСкрипта);	
				КонецЕсли; 
			КонецЕсли;
			
			// добавим файл настроек
			НайдЭлемент = Объект.СписокПередаваемыхДополнительныхДанных.НайтиПоЗначению("ФайлНастроек");
			Если Не НайдЭлемент = Неопределено Тогда
				Если НайдЭлемент.Пометка Тогда
					ПутьКФайлуНастроек = КаталогВременныхФайловСервер + "config.reg";
					ФайлНастроек = Обработки.апОбменДанными.ПолучитьМакет("ФайлНастроек");
					ФайлНастроек.Записать(ПутьКФайлуНастроек);
					
					ФайлНастроек = Новый ТекстовыйДокумент;
					//ФайлНастроек.Прочитать(ПутьКФайлуНастроек, КодировкаТекста.UTF16);
					ФайлНастроек.Прочитать(ПутьКФайлуНастроек, КодировкаТекста.ANSI);
					Стр = СтрЗаменить(ФайлНастроек.ПолучитьСтроку(18), "___FtpFolder", СокрЛП(ВыбАгент.апПапкаФТП));
					ФайлНастроек.ЗаменитьСтроку(18, Стр);
					ФайлНастроек.Записать(ПутьКФайлуНастроек, КодировкаТекста.ANSI);
					
					
					Архив.Добавить(ПутьКФайлуНастроек);	
				КонецЕсли; 
			КонецЕсли; 
			
			//добавим файл шрифта
			НайдЭлемент = Объект.СписокПередаваемыхДополнительныхДанных.НайтиПоЗначению("ФайлШрифта");
			Если Не НайдЭлемент = Неопределено Тогда
				Если НайдЭлемент.Пометка Тогда
					ПутьКФайлуШрифта = КаталогВременныхФайловСервер + "CRR00CPO.SFS";
					ФайлШрифта = Обработки.апОбменДанными.ПолучитьМакет("ФайлШрифта");
					ФайлШрифта.Записать(ПутьКФайлуШрифта);
					
					Архив.Добавить(ПутьКФайлуШрифта);	
				КонецЕсли; //Если НайдЭлементШрифт.Пометка Тогда
			КонецЕсли; //Если Не НайдЭлементШрифт = Неопределено Тогда
			
			//добавим файл основной онлайн-карты и дополнительные иконки
			НайдЭлемент = Объект.СписокПередаваемыхДополнительныхДанных.НайтиПоЗначению("ФайлОнлайнКарт");
			Если Не НайдЭлемент = Неопределено Тогда
				Если НайдЭлемент.Пометка Тогда					
					ОсновнаяКарта = Константы.апОсновнаяОнлайнКарта.Получить();
					
					Если Не ОсновнаяКарта.Пустая() Тогда
						МакетКарты = ОсновнаяКарта.Значение.Получить();
						
						Если МакетКарты <> Неопределено Тогда
							ПолноеНазваниеФайлаКарты = КаталогВременныхФайловСервер + СокрЛП(ОсновнаяКарта.Код) + ".html";
							МакетКарты.Записать(ПолноеНазваниеФайлаКарты);
							
							Архив.Добавить(ПолноеНазваниеФайлаКарты);
							
							//дополним архив иконками							
							текИмяФайла = "partner.png";
							текПутьКФайлу = КаталогВременныхФайловСервер + текИмяФайла;
							БиблиотекаКартинок.апКонтрагент.Записать(текПутьКФайлу);							
							Архив.Добавить(текПутьКФайлу);
							     							
							текИмяФайла = "tradepoint.png";
							текПутьКФайлу = КаталогВременныхФайловСервер + текИмяФайла;
							БиблиотекаКартинок.апТорговаяТочка.Записать(текПутьКФайлу);
							Архив.Добавить(текПутьКФайлу);
							
							текИмяФайла = "partner_visited.png";
							текПутьКФайлу = КаталогВременныхФайловСервер + текИмяФайла;
							БиблиотекаКартинок.апКонтрагентПосещен.Записать(текПутьКФайлу);
							Архив.Добавить(текПутьКФайлу);
							
							текИмяФайла = "tradepoint_visited.png";
							текПутьКФайлу = КаталогВременныхФайловСервер + текИмяФайла;
							БиблиотекаКартинок.апТорговаяТочкаПосещена.Записать(текПутьКФайлу);
							Архив.Добавить(текПутьКФайлу);						
							 						
							текИмяФайла = "location_agent.png";
							текПутьКФайлу = КаталогВременныхФайловСервер + текИмяФайла;
							БиблиотекаКартинок.апТекущееПоложениеАгента.Записать(текПутьКФайлу);
							Архив.Добавить(текПутьКФайлу);
							
						КонецЕсли; //Если МакетКарты <> Неопределено Тогда
					КонецЕсли; //Если Не ОсновнаяКарта.Пустая() Тогда					
					
				КонецЕсли; //Если НайдЭлементКарты.Пометка Тогда
			КонецЕсли; //Если Не НайдЭлементКарты = Неопределено Тогда
		КонецЕсли; //Если Объект.флПередаватьДополнительныеДанные Тогда			
            		
		Архив.Записать();
		
		ИмяФайла = ПутьИмяАрхива; //архив успешно записан
		Если ЗначениеЗаполнено(ПарольАрхива) Тогда  				
			ОповеститьОСобытии("Подготовленный архив ZIP защищен паролем!", СтатусСообщения.Информация, Ложь);
		КонецЕсли;			
		
	КонецЕсли;
	
	ДанныеФайлаОбмена = Новый ДвоичныеДанные(ИмяФайла);			
	АдресФайлаОбмена = ПоместитьВоВременноеХранилище(ДанныеФайлаОбмена, ЭтаФорма.УникальныйИдентификатор);
	
	Возврат Истина;
	
КонецФункции //УпаковатьФайлОбменаВАрхив

//&НаСервере
//Процедура ВыгрузитьОтчетыПоЗапросу()
//	Если ЗначениеЗаполнено(ОтчетЗапроса) Тогда					
//		ИмяФайла = КаталогВременныхФайловСервер + "FromCDB.xml";
//		ОткрытьФайлВыгрузкиМТ();
//		ЗакрытьФайлВыгрузкиМТ();		
//		
//		ФайлОтчета = апСерверМодуль.СформироватьОтчетДляОтправки(ОтчетЗапроса, ПараметрыЗапроса); 
//					
//		ОтветитьНаЗапросОтчета = Ложь;
//		ОтчетЗапроса	 	   = Неопределено;
//	КонецЕсли;
//КонецПроцедуры

&НаСервере
Функция ПроверитьНеобходимостьВыгрузкиОтчета()
	Возврат	ОтветитьНаЗапросОтчета;
КонецФункции

&НаКлиенте 
Процедура ВыгрузитьДанныеМТ(ОтветнаяВыгрузка = Ложь)
	
	ИмяФайла = "";
	
	ТабКартинок.Очистить();
	
	СписокБазДанных.Очистить();
	
	Если ВыбАгент.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	//подменим пути каталога временных файлов
	ЗадатьКаталогиВременныхФайлов(Истина);
	
	АрхивКартинок = "";                          	
	АдресАрхиваКартинокВоВременномХранилище = "";
	
	Если КодЗапросаОтАгента <> "" Тогда  	
		ОповеститьОСобытии("Выгрузка ответа на запрос...", СтатусСообщения.Информация);
		Если ВыгрузитьЗапросы() Тогда
			КодЗапросаОтАгента = "";						
		Иначе
			Возврат;
		КонецЕсли;
		
	//ИначеЕсли ПроверитьНеобходимостьВыгрузкиОтчета() Тогда
	//	ВыгрузитьОтчетыПоЗапросу();
		
	ИначеЕсли ОтветнаяВыгрузка Тогда	
		ВыгрузитьПодтверждения(Истина);
		Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
			ОповеститьОСобытии("Не удалось выгрузить подтверждения!", СтатусСообщения.Внимание);	
			Возврат;
		КонецЕсли;
	Иначе
		Если Не СформироватьФайлВыгрузки(ОтветнаяВыгрузка) Тогда
			Возврат;
		КонецЕсли;
		
		СформироватьАрхивСКартинками(АрхивКартинок);	
		//ВыгрузитьПодтверждения(Истина);
		
	
		Если Не ПустаяСтрока(АрхивКартинок) Тогда
			ДанныеФайлаАрхива = Новый ДвоичныеДанные(АрхивКартинок);	
			АдресАрхиваКартинокВоВременномХранилище = ПоместитьВоВременноеХранилище(ДанныеФайлаАрхива);
		КонецЕсли;
	КонецЕсли;  
	
	Результат = УпаковатьФайлОбменаВАрхив(АдресАрхиваКартинокВоВременномХранилище);
	
	Если Результат Тогда  		
		Если Объект.СпособОбмена = ПрямоеСоединение Тогда
			ОтправкаФайлаНапрямуюВМобильноеУстройство(); 
		ИначеЕсли Объект.СпособОбмена = АгентПлюсСОД Тогда	
			ОтправитьФайлаОбменаЧерезАгентСОД();					
		ИначеЕсли Объект.СпособОбмена = ФТПСервер Тогда	
			ОтправитьФайлаОбменаЧерезФТПСервер();							
		КонецЕсли;		
	КонецЕсли; 	
	
	//СохранитьТаблицуЛогаВНастройкахПользователя();
	
	//почистим временные файлы
	Попытка
		УдалитьФайлы(КаталогВременныхФайловКлиент,"From1C.*");
		УдалитьФайлы(КаталогВременныхФайловСервер,"From1C.*");
		
		УдалитьФайлы(КаталогВременныхФайловКлиент,"FromCDB.*");
		УдалитьФайлы(КаталогВременныхФайловСервер,"FromCDB.*");
	Исключение
    	Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры //ВыгрузитьДанныеМТ

&НаКлиенте 
Процедура ВыгрузитьДанные() Экспорт
	
	ПодготовитьСлужебныеДанные();
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(ВыбАгент) Тогда
		
		Если Объект.СпособОбмена = ПрямоеСоединение  Тогда			
							
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбран торговый агент на форме!", , "ВыбАгент");
			Возврат;	
			
		ИначеЕсли Объект.СпособОбмена = АгентПлюсСОД Тогда
			
			ТаблицаАгентов = Объект.ТабАПСервер;
						
			Если ТаблицаАгентов.Количество() = 0 и Не ЗначениеЗаполнено(ВыбАгент) Тогда				
				
				Текст = "Выберите торгового агента на форме или заполните таблицу агентов на закладке ""Агент Плюс СОД""!";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "ВыбАгент");								
				Возврат;
				
			КонецЕсли; 			
			
			Если ТаблицаАгентов.Количество() > 0 тогда				
				Обработано = 0;    				
				Для Каждого СтрокаТаб Из ТаблицаАгентов Цикл
					Если СтрокаТаб.Пометка Тогда				
						Обработано = Обработано + 1;
						ВыбАгент = СтрокаТаб.Агент;
						Сообщить(Строка(Обработано) + ". Обработка данных агента: " + СокрЛП(ВыбАгент), СтатусСообщения.Информация);
						ВыгрузитьДанныеМТ();
					КонецЕсли;
				КонецЦикла;	
				
				ВыбАгент = "";				
			КонецЕсли;
			
		ИначеЕсли Объект.СпособОбмена = ФТПСервер Тогда
			
			//ТаблицаАгентов = Объект.ТабФТП;
						
			Если ТаблицаАгентов.Количество() = 0 и Не ЗначениеЗаполнено(ВыбАгент) Тогда								
				Текст = "Выберите торгового агента на форме или заполните таблицу агентов на закладке ""ФТП""!";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "ВыбАгент");								
				Возврат;   				
			КонецЕсли; 			
			
			Если ТаблицаАгентов.Количество() > 0 тогда				
				Обработано = 0;				
				Для Каждого СтрокаТаб Из ТаблицаАгентов Цикл
					Если СтрокаТаб.Пометка Тогда				
						Обработано = Обработано + 1;
						ВыбАгент = СтрокаТаб.Агент;
						Сообщить(Строка(Обработано) + ". Обработка данных агента: " + СокрЛП(ВыбАгент), СтатусСообщения.Информация);
						ВыгрузитьДанныеМТ();
					КонецЕсли;
				КонецЦикла;	   				
				ВыбАгент = "";
			КонецЕсли;      
			
		КонецЕсли;
		
	Иначе     		
		
		Сообщить("Обработка данных агента: " +  ВыбАгент + "...", СтатусСообщения.Информация);

		ВыгрузитьДанныеМТ();
		
	КонецЕсли;
	
	//почистим временные файлы
	Попытка
		УдалитьФайлы(КаталогВременныхФайловКлиент,"FromCDB.*");
		УдалитьФайлы(КаталогВременныхФайловСервер,"FromCDB.*");
		
		УдалитьФайлы(КаталогВременныхФайловКлиент,"From1C.*");
		УдалитьФайлы(КаталогВременныхФайловСервер,"From1C.*");
	Исключение
    	Сообщить(ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры //ВыгрузитьДанные

&НаСервере
Процедура ВыгрузкаСтруктурТаблиц()
	
	Текст = ДокОбмена;
	
	//коды поддерживаемых типов реквизитов:
	ТипЧисло	= "1";  //для этого типа в параметре Size указывается количество знаков после запятой (от 0 до 4)
	ТипСтрока	= "2";  //для этого типа в параметре Size указывается максимальный размер строки (до 255 символов)
	ТипДата		= "3";
	ТипПеречисл	= "10"; //Перечисление
	ТипБулево	= "20"; //Булево
	
	Текст.ДобавитьСтроку("<Begin>" +Т_+ "Ref_TblStruct" +Т_+ "Struct:TblCD,FormOrder,Name,Present,Type,TypeID,Size,Flags");
	
	//Параметр Flags используется для указания режимов редкатирования реквизитов пользователем.
	//Значения параметра:
	//	1 - реквизит "обязательный" (показывается при редактировании красным)
	//	2 - запрет изменения реквизита (только для существующего объекта, для создаваемого объекта изменение реквизита разрешено)

	//описание дополнительных реквизитов справочника "Фирмы": (создаются программистом исходя из задачи)
	//описанные ниже названия полей указываются в параметрах тега Ref_Firms
	Текст.ДобавитьСтроку("Firms"   +Т_+ "1" +Т_+ "FNAME" 	+Т_+ "Полн.наименование"+Т_+ ТипСтрока +Т_+ "" +Т_+ "128"+Т_+ "0");
	Текст.ДобавитьСтроку("Firms"   +Т_+ "2" +Т_+ "INN" 		+Т_+ "ИНН"  			+Т_+ ТипСтрока +Т_+ "" +Т_+ "32" +Т_+ "0");
	Текст.ДобавитьСтроку("Firms"   +Т_+ "3" +Т_+ "KPP" 		+Т_+ "КПП"  			+Т_+ ТипСтрока +Т_+ "" +Т_+ "32" +Т_+ "0");
	Текст.ДобавитьСтроку("Firms"   +Т_+ "4" +Т_+ "OKPO" 	+Т_+ "ОКПО"  			+Т_+ ТипСтрока +Т_+ "" +Т_+ "16" +Т_+ "0");
	Текст.ДобавитьСтроку("Firms"   +Т_+ "5" +Т_+ "BANK" 	+Т_+ "Банк"  			+Т_+ ТипСтрока +Т_+ "" +Т_+ "64" +Т_+ "0");
	Текст.ДобавитьСтроку("Firms"   +Т_+ "6" +Т_+ "BIK" 		+Т_+ "БИК"  			+Т_+ ТипСтрока +Т_+ "" +Т_+ "32" +Т_+ "0");
	Текст.ДобавитьСтроку("Firms"   +Т_+ "7" +Т_+ "BANKADR" 	+Т_+ "Адрес банка"  	+Т_+ ТипСтрока +Т_+ "" +Т_+ "64" +Т_+ "0");
	Текст.ДобавитьСтроку("Firms"   +Т_+ "8" +Т_+ "KSCHET" 	+Т_+ "Кор.счет"  		+Т_+ ТипСтрока +Т_+ "" +Т_+ "32" +Т_+ "0");
	Текст.ДобавитьСтроку("Firms"   +Т_+ "9" +Т_+ "RSCHET" 	+Т_+ "Расч.счет"  		+Т_+ ТипСтрока +Т_+ "" +Т_+ "32" +Т_+ "0");
	Текст.ДобавитьСтроку("Firms"   +Т_+ "10"+Т_+ "DIREKTOR" +Т_+ "Директор"  		+Т_+ ТипСтрока +Т_+ "" +Т_+ "64" +Т_+ "0");
	Текст.ДобавитьСтроку("Firms"   +Т_+ "11"+Т_+ "GLBUH" 	+Т_+ "Гл.бухгалтер"  	+Т_+ ТипСтрока +Т_+ "" +Т_+ "64" +Т_+ "0");
	// { Арт 2008-10-08
	Текст.ДобавитьСтроку("Firms"   +Т_+ "12"+Т_+ "IP" 	    +Т_+ "ИП"  			    +Т_+ ТипЧисло  +Т_+ "" +Т_+ "1"  +Т_+ "0");	
	Текст.ДобавитьСтроку("Firms"   +Т_+ "13"+Т_+ "REKV" 	+Т_+ "Реквизиты ИП"  	+Т_+ ТипСтрока +Т_+ "" +Т_+ "64" +Т_+ "0");
	//  Арт 2008-10-08 }
	
	//описание дополнительных реквизитов справочника "Клиенты": (создаются программистом исходя из задачи)
	//описанные ниже названия полей указываются в параметрах тега Ref_Clients
	Текст.ДобавитьСтроку("Clients" +Т_+ "1" +Т_+ "INN" 		+Т_+ "ИНН" 				  +Т_+ ТипСтрока +Т_+ "" +Т_+ "21" +Т_+ "1"); //Flags = 1 - обязательный реквизит
	Текст.ДобавитьСтроку("Clients" +Т_+ "2" +Т_+ "KPP" 		+Т_+ "КПП" 				  +Т_+ ТипСтрока +Т_+ "" +Т_+ "9"  +Т_+ "1"); //Flags = 1 - обязательный реквизит
	Текст.ДобавитьСтроку("Clients" +Т_+ "3" +Т_+ "FNAME" 	+Т_+ "Полн.наименование"  +Т_+ ТипСтрока +Т_+ "" +Т_+ "128"+Т_+ "0");
	Текст.ДобавитьСтроку("Clients" +Т_+ "4" +Т_+ "MSALES" 	+Т_+ "Оборот продаж" 	  +Т_+ ТипЧисло  +Т_+ "" +Т_+ "2"  +Т_+ "2");//Flags = 2 - запрет изменения
	Текст.ДобавитьСтроку("Clients" +Т_+ "5" +Т_+ "SROKDOG" 	+Т_+ "Договор до" 		  +Т_+ ТипДата   +Т_+ "" +Т_+ ""   +Т_+ "0");
	Текст.ДобавитьСтроку("Clients" +Т_+ "6" +Т_+ "VIP" 		+Т_+ "VIP-клиент" 		  +Т_+ ТипБулево +Т_+ "" +Т_+ ""   +Т_+ "0");
	Текст.ДобавитьСтроку("Clients" +Т_+ "7" +Т_+ "CLKONKUR"	+Т_+ "Клиент конкурентов" +Т_+ ТипБулево +Т_+ "" +Т_+ ""   +Т_+ "0");

	//описание дополнительных реквизитов справочника "Торговые точки": (создаются программистом исходя из задачи)
	//описанные ниже названия полей указываются в параметрах тега Ref_TPoints
	Текст.ДобавитьСтроку("TPoints" +Т_+ "1" +Т_+ "TPTYPE" 	+Т_+ "Тип точки" +Т_+ ТипПеречисл +Т_+ MY_GUID_ENUM_TPTYPE +Т_+ "" +Т_+ "0");
	Текст.ДобавитьСтроку("TPoints" +Т_+ "2" +Т_+ "WORKTIME" +Т_+ "Время работы" +Т_+ ТипСтрока +Т_+ " " +Т_+ "64" +Т_+ "0");
	
	//описание дополнительных реквизитов справочника "Номенклатура" (в КПК - "Price"): (создаются программистом исходя из задачи)
	//описанные ниже названия полей указываются в параметрах тега Ref_Price
	Текст.ДобавитьСтроку("Price"   +Т_+ "1" +Т_+ "GTD" 		+Т_+ "ГТД"				+Т_+ ТипПеречисл+Т_+ MY_GUID_ENUM_GTD 	+Т_+ ""+Т_+ "0");
	Текст.ДобавитьСтроку("Price"   +Т_+ "2" +Т_+ "STRANA" 	+Т_+ "Страна-произв."	+Т_+ ТипПеречисл+Т_+ MY_GUID_ENUM_STRANA+Т_+ ""+Т_+ "0");
	
	//описание дополнительных реквизитов справочника "Сертификаты": (создаются программистом исходя из задачи)
	//описанные ниже названия полей указываются в параметрах тега Ref_Sertif
	Текст.ДобавитьСтроку("Sertif" +Т_+ "1" +Т_+ "BLANKN" 	+Т_+ "Бланк №"			+Т_+ ТипСтрока+Т_+ "" +Т_+ "32" +Т_+ "0");
	Текст.ДобавитьСтроку("Sertif" +Т_+ "2" +Т_+ "ADRES" 	+Т_+ "Адрес"			+Т_+ ТипСтрока+Т_+ "" +Т_+ "64" +Т_+ "0");
	
	//описание дополнительных реквизитов справочника "Склады": (создаются программистом исходя из задачи)
	//описанные ниже названия полей указываются в параметрах тега Ref_Stores
	Текст.ДобавитьСтроку("Stores" +Т_+ "1" +Т_+ "AVTOSKLAD" +Т_+ "Передвижной склад"+Т_+ ТипБулево+Т_+ "" +Т_+ ""   +Т_+ "0");
	Текст.ДобавитьСтроку("Stores" +Т_+ "2" +Т_+ "TONNAJ" 	+Т_+ "Тоннаж"			+Т_+ ТипЧисло +Т_+ "" +Т_+ "3"  +Т_+ "0");
	Текст.ДобавитьСтроку("Stores" +Т_+ "3" +Т_+ "TEHOSM" 	+Т_+ "Техосмотр"		+Т_+ ТипДата  +Т_+ "" +Т_+ ""   +Т_+ "0");
	
	//описание дополнительных реквизитов документа "Заявка"
	Текст.ДобавитьСтроку("Order"  +Т_+ "1" +Т_+ "SERTIF" 	+Т_+ "Сертификаты" +Т_+ ТипБулево +Т_+ " " +Т_+ "" +Т_+ "0");
	Текст.ДобавитьСтроку("Order"  +Т_+ "2" +Т_+ "REPORT" 	+Т_+ "Отчет по взаиморасчетам" +Т_+ ТипБулево +Т_+ " " +Т_+ "" +Т_+ "0");
	Текст.ДобавитьСтроку("Order"  +Т_+ "3" +Т_+ "SROK" 		+Т_+ "Оплата до" +Т_+ ТипДата +Т_+ " " +Т_+ "" +Т_+ "0");
	Текст.ДобавитьСтроку("Order"  +Т_+ "4" +Т_+ "ADRES" 	+Т_+ "Альтерн.адрес доставки" +Т_+ ТипСтрока +Т_+ " " +Т_+ "64" +Т_+ "0");
	Текст.ДобавитьСтроку("Order"  +Т_+ "5" +Т_+ "DOSTAVKA" 	+Т_+ "Вид доставки" +Т_+ ТипПеречисл +Т_+ MY_GUID_ENUM_DLVTYPE +Т_+ "0" +Т_+ "0"); //Flags = 1 - обязательный реквизит	
	
	//описание дополнительных реквизитов документа "Реализация"
	Текст.ДобавитьСтроку("Sale"   +Т_+ "1" +Т_+ "DOSTAVKA"  +Т_+ "Вид доставки"			+Т_+ ТипПеречисл+Т_+ MY_GUID_ENUM_DLVTYPE +Т_+ "0" +Т_+ "0");
	Текст.ДобавитьСтроку("Sale"   +Т_+ "2" +Т_+ "ADRES" 	+Т_+ "Альтерн.адрес доставки"+Т_+ТипСтрока	+Т_+ " " +Т_+ "64" +Т_+ "0");
	Текст.ДобавитьСтроку("Sale"   +Т_+ "3" +Т_+ "DOSTAVLEN" +Т_+ "Товар доставлен"		+Т_+ ТипБулево 	+Т_+ " " +Т_+ "" +Т_+ "0");
	
	//описание дополнительных реквизитов документа "Мерчендайзинг"
	Текст.ДобавитьСтроку("Merch"  +Т_+ "1" +Т_+ "FKAT_A" 	+Т_+ "Фейсинг A (категория товаров ""A"")" +Т_+ ТипЧисло +Т_+ "" +Т_+ "0" +Т_+ "0"); //Flags = 1 - обязательный реквизит
	Текст.ДобавитьСтроку("Merch"  +Т_+ "2" +Т_+ "FKAT_B" 	+Т_+ "Фейсинг B (категория товаров ""B"")" +Т_+ ТипЧисло +Т_+ "" +Т_+ "0" +Т_+ "0");
	Текст.ДобавитьСтроку("Merch"  +Т_+ "3" +Т_+ "FKAT_C" 	+Т_+ "Фейсинг C (категория товаров ""C"")" +Т_+ ТипЧисло +Т_+ "" +Т_+ "0" +Т_+ "0");
	Текст.ДобавитьСтроку("Merch"  +Т_+ "4" +Т_+ "FKAT_RP"	+Т_+ "Фейсинг РП (рекламная продукция)"+Т_+ ТипЧисло +Т_+ "" +Т_+ "0" +Т_+ "0"); //Flags = 1 - обязательный реквизит
	
	//описание дополнительных реквизитов документа "Посещение"
	Текст.ДобавитьСтроку("Visit"  +Т_+ "1" +Т_+ "VISIT" +Т_+ "Результат посещения" +Т_+ ТипПеречисл +Т_+ MY_GUID_ENUM_VISIT +Т_+ "" +Т_+ "0"); //Flags = 1 - обязательный реквизит
	
	Текст.ДобавитьСтроку("<End>" +Т_+ "Ref_TblStruct");	
	
КонецПроцедуры	// ВыгрузкаСтруктурТаблиц()

&НаСервере
Процедура ВыгрузкаСкриптов()
	
	Текст = ДокОбмена;

	Текст.ДобавитьСтроку("<Begin>" +Т_+ "Ref_Scripts" +Т_+ "Struct:ObjectID,Script");
	
	//скрипт для окна "Информация о клиенте"
	Текст.ДобавитьСтроку(GUID_SCRIPT_CLIENTINFO +Т_+ "[Name]|Кредит: [Credit], Скидка: [Discount]%|Долг: [Debt]|");
	Текст.ДобавитьСтроку("*" +Т_+ "VIP: [_VIP]; Клиент конкурентов: [_CLKONKUR]|-------|");
	Текст.ДобавитьСтроку("*" +Т_+ "Тел.: [Tel]|Адрес: [Addr]|ИНН: [_INN], КПП: [_KPP]|[_FNAME]|");
	Текст.ДобавитьСтроку("*" +Т_+ "Продажи прошл. месяца: [_MSALES]|Срок договора: [_SROKDOG]");
	
	//скрипт для окна "Информация о торговой точке"
	Текст.ДобавитьСтроку(GUID_SCRIPT_TPOINTINFO +Т_+ "[Name]|Категория: [Category]|Зона: [Zone]|-------|");
	Текст.ДобавитьСтроку("*" +Т_+ "Адрес: [Addr]|Тел: [Tel]|Конт. лицо: [Contact]|-------|");
	Текст.ДобавитьСтроку("*" +Т_+ "Тип: [_TPTYPE]|Время работы: [_WORKTIME]");
	
	Текст.ДобавитьСтроку("<End>" +Т_+ "Ref_Scripts");
	
КонецПроцедуры	// ВыгрузкаСкриптов()

&НаСервере
Процедура ВыгрузкаПеречислений()
	
	Текст = ДокОбмена;
	
	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_AttrTypes" + Т_ + "Struct:AttrID,Code,Name,=DocList,=AddValue");

	//Значения параметра GUID_ATTRTYP_COMMENT ("Комментарий") название параметра (его представление в документе) можно изменять
	Текст.ДобавитьСтроку(GUID_ATTRTYP_COMMENT+ Т_ + "-1" + Т_ + "Комментарий:" + Т_ + " " + Т_ + " "); 	// для всех документов
	Текст.ДобавитьСтроку("*" + Т_ + "1" + Т_ + "СРОЧНО!"	+ Т_ + "Order" + Т_ + " "); // только для заявки
	Текст.ДобавитьСтроку("*" + Т_ + "2" + Т_ + "Самовывоз"	+ Т_ + "Order" + Т_ + " ");	// только для заявки
	Текст.ДобавитьСтроку("*" + Т_ + "3" + Т_ + "Акция"	   	+ Т_ + "Order" + Т_ + " "); // только для заявки
	
	Текст.ДобавитьСтроку("*" + Т_ + "4" + Т_ + "Факт"	   	+ Т_ + "Order" + Т_ + " "); // только для заявки
	Текст.ДобавитьСтроку("*" + Т_ + "5" + Т_ + "Без денег не отгружать"	   	+ Т_ + "Order" + Т_ + " "); // только для заявки
	
	Текст.ДобавитьСтроку("*" + Т_ + "6" + Т_ + "Брак!" 		+ Т_ + "Arrival" + Т_ + " "); // только для документа "Поступление"
	Текст.ДобавитьСтроку("*" + Т_ + "7" + Т_ + "Сроки" 		+ Т_ + "Arrival" + Т_ + " "); // только для документа "Поступление"

	//Значения параметра GUID_ATTRTYP_PRICETYPE ("Типы цен")
	ТекGUID = GUID_ATTRTYP_PRICETYPE;
	ВсегоЦен = 10;
	Для Поз = 1 По ВсегоЦен Цикл
		Текст.ДобавитьСтроку(ТекGUID + Т_ + СокрЛП(Поз) + Т_ + "Цена "+СокрЛП(Поз) + Т_ + "Order,Sale,RSale,Arrival,Inventory" + Т_ + "");			
		ТекGUID = "*";
	КонецЦикла;

	//Значения параметра GUID_ATTRTYP_PAYMNTTYPE ("Вид оплаты") название параметра (его представление в документе) можно изменять
	Текст.ДобавитьСтроку(GUID_ATTRTYP_PAYMNTTYPE	+ Т_ + "-1" + Т_ + "Вид оплаты:" + Т_ + "Order,Sale,RSale,Cash,Arrival" + Т_ + " ");// только для документов "Заявка", "Касс. ордер", "Реализация", "Реализация Розн.", "Поступление" для всех типов цен
	Текст.ДобавитьСтроку("*"	+ Т_ + "1" + Т_ + "Наличными"	+ Т_ + "Order,Sale,RSale,Cash,Arrival" + Т_ + " ");// только для заявки, реализации, реализации розничной, кассового ордера, поступления; применимы все типы цен
	Текст.ДобавитьСтроку("*"	+ Т_ + "2" + Т_ + "Безналичн."	+ Т_ + "Order,Sale,Arrival" + Т_ + "4");  // только для заявки, реализации, поступления; возможный тип цен только с кодом 4
	Текст.ДобавитьСтроку("*"	+ Т_ + "3" + Т_ + "Взаимозачет" + Т_ + "Order,Sale,Arrival" + Т_ + "2,3");// только для заявки и реализации, поступления; возможные типы цен с кодами 2 и 3
	Текст.ДобавитьСтроку("*"	+ Т_ + "4" + Т_ + "Спец.цена"   + Т_ + "Order,Sale,Cash,Arrival" + Т_ + " ");// только для заявки, реализации, кассового ордера, поступления; применимы все типы цен
	
	//выгрузка расцветок клиентов
	ТекGUID = GUID_ENUM_CLIENTS_COLORS;
	//Спр = СоздатьОбъект("Справочник.СтатусыКонтрагентов");
	//Спр.ВыбратьЭлементы();
	//Пока Спр.ПолучитьЭлемент() = 1 Цикл
	//	Если (Спр.ПометкаУдаления() = 1) Или (Число(Спр.Код) = 0) Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	Если Спр.КпкЦвет.Выбран() = 1 Тогда
	//		Цвет = Спр.КпкЦвет.Код;
	//	Иначе
	//		Цвет = "000000";
	//	КонецЕсли;
	//	Текст.ДобавитьСтроку(ТекGUID + Т_ + Строка(Спр.Код) + Т_ + СокрП(Цвет) + Т_ + "" + Т_ + "");
	//   	ТекGUID = "*";
	//КонецЦикла;
	
		Текст.ДобавитьСтроку(ТекGUID + Т_ + "2" + Т_ + СокрП("FF0000") + Т_ + "" + Т_ + "");
	   	ТекGUID = "*";

	   
	//выгрузка предупреждений для клиентов - предупреждения показываются при выборе клиента в документе
	ТекGUID = GUID_ENUM_CLIENTS_WARNINGS;
	//Спр = СоздатьОбъект("Справочник.СтатусыКонтрагентов");
	//Спр.ВыбратьЭлементы();
	//Пока Спр.ПолучитьЭлемент() = 1 Цикл
	//	Если (Спр.ПометкаУдаления() = 1) Или (Число(Спр.Код) = 0) Тогда
	//		Продолжить;
	//	ИначеЕсли ПустоеЗначение(Спр.Предупреждение) = 1 Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	Текст.ДобавитьСтроку(ТекGUID + Т_ + Строка(Спр.Код) + Т_ + СокрП(Спр.Предупреждение) + Т_ + "" + Т_ + "");
	//   	ТекGUID = "*";
	//КонецЦикла;
	
		Текст.ДобавитьСтроку(ТекGUID + Т_ + "2" + Т_ + СокрП("Отгрузка запрещена") + Т_ + "" + Т_ + "");
	   	ТекGUID = "*";

	
	//свойства номенклатуры
	ТекGUID = GUID_ATTRTYP_GOODSPROP;	
	//Спр = СоздатьОбъект("Справочник.ЗначенияСвойств");
	//Спр.ВыбратьЭлементы(0);
	//Пока Спр.ПолучитьЭлемент() = 1 Цикл
	//	Если (Спр.ПометкаУдаления() = 0) И (Спр.КпкКод > 0) И (Спр.КпкКод < 33) Тогда
	//		Текст.ДобавитьСтроку(ТекGUID + Т_ + Строка(Спр.КпкКод) + Т_ + СокрП(Спр.Наименование) + Т_ + "" + Т_ + "");
	//	   	ТекGUID = "*";
	//	КонецЕсли;
	//КонецЦикла;
	
	//запросы, которые можно отправлять из КПК при мобильном доступе к центральной БД
	ТекGUID = GUID_ATTRTYP_QUERY;
	//Спр = СоздатьОбъект("Справочник.КпкЗапросы");
	//Спр.ПорядокКодов();
	//Спр.ВыбратьЭлементы();
	//Пока Спр.ПолучитьЭлемент() = 1 Цикл
	//	Если (Спр.ПометкаУдаления() = 0) Тогда
	//		Текст.ДобавитьСтроку(ТекGUID + Т_ + Строка(Спр.Код) + Т_ + СокрП(Спр.Наименование) + Т_ + "" + Т_ + "");
	//	   	ТекGUID = "*";
	//	КонецЕсли;
	//КонецЦикла;
	
	//////////////////////////////////////////////////
	//Выгрузка перечислений (списков), задаваемых программистом исходя из задачи
	//////////////////////////////////////////////////
	
	//виды доставки
	ТекGUID = MY_GUID_ENUM_DLVTYPE;
	//Переч = Перечисление.ВидыДоставки;
	//СчетчикЦикла = 0;
	//Для Поз = 1 По Переч.КоличествоЗначений() Цикл
	//	ТекЗнач = Переч.ЗначениеПоНомеру(Поз);
	//	Текст.ДобавитьСтроку(ТекGUID + Т_ + Строка(Поз) + Т_ + СокрП(Строка(ТекЗнач)) + Т_ + "" + Т_ + "");
	//   	ТекGUID = "*";
	//КонецЦикла;
	
	//типы результатов посещений
	ТекGUID = MY_GUID_ENUM_VISIT;
	//Спр = СоздатьОбъект("Справочник.РезультатыПосещения");
	//Спр.ПорядокКодов();
	//Спр.ВыбратьЭлементы();
	//Пока Спр.ПолучитьЭлемент() = 1 Цикл
	//	Если (Спр.ПометкаУдаления() = 0) И (Число(Спр.Код) > 0) Тогда
	//		Текст.ДобавитьСтроку(ТекGUID + Т_ + Строка(Спр.Код) + Т_ + СокрП(Спр.Наименование) + Т_ + "" + Т_ + "");
	//	   	ТекGUID = "*";
	//	КонецЕсли;
	//КонецЦикла;
	
	

	//категории номенклатуры
	ТекGUID = GUID_ATTRTYP_GOODSCAT;
	//Спр = СоздатьОбъект("Справочник.КатегорииНоменклатуры");
	//Спр.ВыбратьЭлементы();
	//Пока Спр.ПолучитьЭлемент() = 1 Цикл
	//	Если (Спр.ПометкаУдаления() = 0) И (Число(Спр.Код) > 0) Тогда
	//		Текст.ДобавитьСтроку(ТекGUID + Т_ + Строка(Спр.Код) + Т_ + СокрП(Спр.Наименование) + Т_ + "" + Т_ + "#FF0000");
	//	   	ТекGUID = "*";
	//	КонецЕсли;
	//КонецЦикла;
	

	//категории документов
	ТекGUID = GUID_ENUM_DOC_CAT;
	//Спр = СоздатьОбъект("Справочник.КпкКатегорииДокументов");
	//Спр.ВыбратьЭлементы();
	//Пока Спр.ПолучитьЭлемент() = 1 Цикл
	//	Если (Спр.ПометкаУдаления() = 0) И (Число(Спр.Код) > 0) Тогда
	//		Текст.ДобавитьСтроку(ТекGUID + Т_ + Строка(Спр.Код) + Т_ + СокрП(Спр.Наименование) + Т_ + "" + Т_ + "");
	//	   	ТекGUID = "*";
	//	КонецЕсли;
	//КонецЦикла;

	//цвета категорий документов
	ТекGUID = GUID_ENUM_DOC_CAT_COLORS;
	//Спр = СоздатьОбъект("Справочник.КпкКатегорииДокументов");
	//Спр.ВыбратьЭлементы();
	//Пока Спр.ПолучитьЭлемент() = 1 Цикл
	//	Если (Спр.ПометкаУдаления() = 0) И (Число(Спр.Код) > 0) Тогда
	//		Текст.ДобавитьСтроку(ТекGUID + Т_ + Строка(Спр.Код) + Т_ + СокрЛП(Спр.Цвет.Код) + Т_ + "" + Т_ + "");
	//	   	ТекGUID = "*";
	//	КонецЕсли;
	//КонецЦикла;
	
	// названия типов планов продаж	
	//Спр = СоздатьОбъект("Справочник.кпкТипыПланаПродаж");
	//Спр.ВыбратьЭлементы();
	//Пока Спр.ПолучитьЭлемент() = 1 Цикл
	//	
	//	Если Спр.ПометкаУдаления() = 1 Тогда
	//		Продолжить;								
	//	КонецЕсли;       
	//
	//	ТекGUID = GUID_ENUM_PLAN_OF_SALES_TYPES;            
	//	Текст.ДобавитьСтроку(ТекGUID +Т_+ Строка(Число(Спр.Код)) +Т_+ СокрЛП(Спр.Наименование) + Т_ + "" + Т_ + "");
	//	ТекGUID = "*";   
	//	//   
	//КонецЦикла;
	
	// Категории клиентов (торг точек)
	ТекGUID = GUID_ENUM_CLIENTS_TPOINTS_CAT;
	//Спр = СоздатьОбъект("Справочник.кпкКатегорииТоргТочек");
	//Спр.ВыбратьЭлементы();
	//Пока Спр.ПолучитьЭлемент() = 1 Цикл
	//	Если (Спр.ПометкаУдаления() = 0) И (Число(Спр.Код) > 0) Тогда
	//		Текст.ДобавитьСтроку(ТекGUID + Т_ + Строка(Спр.Код) + Т_ + СокрП(Спр.Наименование) + Т_ + "" + Т_ + "");
	//	   	ТекGUID = "*";
	//	КонецЕсли;
	//КонецЦикла;    
	
	// Рейтинги товаров
	ТекGUID = GUID_ENUM_RATINGCAT;
	//Спр = СоздатьОбъект("Справочник.кпкРейтингиНоменклатуры");
	//Спр.ВыбратьЭлементы();
	//Пока Спр.ПолучитьЭлемент() = 1 Цикл
	//	Если (Спр.ПометкаУдаления() = 0) И (Число(Спр.Код) > 0) Тогда 
	//		Если Спр.Цвет.Выбран() = 1 Тогда
	//			Цвет = "#" + СокрЛП(Спр.Цвет.Код);     			
	//		Иначе
	//			Цвет = "";
	//		КонецЕсли;                                          			
	//		Текст.ДобавитьСтроку(ТекGUID + Т_ + Строка(Спр.Код) + Т_ + СокрП(Спр.Наименование) + Т_ + "" + Т_ + Цвет);
	//	   	ТекGUID = "*";
	//	КонецЕсли;
	//КонецЦикла;
			
	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_AttrTypes");
	
КонецПроцедуры	// ВыгрузкаПеречислений()

&НаСервере
Процедура ВыгрузитьКонстанты() Экспорт
	
	Текст = ДокОбмена;
	
	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_System" + Т_ + "Struct:ObjID,Value");
	
		Текст.ДобавитьСтроку(GUID_SYSTEM_AGENTNAME	+Т_+ СокрЛП(ВыбАгент.Наименование));
		Текст.ДобавитьСтроку(GUID_SYSTEM_AGENTID	+Т_+ СокрП(ПолучитьИдентификатор(ВыбАгент)));
		
		Текст.ДобавитьСтроку(GUID_SYSTEM_FIRMID  	+Т_+ СокрП(ПолучитьИдентификатор(ВыбАгент.Организация)));
		
		Текст.ДобавитьСтроку(GUID_SYSTEM_MSTOREID 	+Т_+ СокрП(""));//идентификатор передвижного склада, закрепленного за агентом	
		Текст.ДобавитьСтроку(GUID_SYSTEM_AMNTPRECISION+Т_+ "3");//количество знаков после запятой в количестве товара при вводе весового товара в документ
		Текст.ДобавитьСтроку(GUID_SYSTEM_MONEYNAME	+Т_+ "грн"); //название национальной валюты, если константа не указана, то по умолчанию "Руб"
		
		Текст.ДобавитьСтроку(GUID_SYSTEM_FLAGS 		+Т_+ "discount=6 fltgoods=2");	
		// Значение константы выше описывается так:
		// Параметр "discount":
		// Испрользуется стандартный алгоритм рассчета скидки, скидка используется только в заголовочной части, расчет скидки от суммы строки документа
		// Параметр "fltgoods":
		// По умолчанию для клиентов и торговых точек фильтр товаров в окне подбдора товаров устанавливается как "скрывать не отвечающие условию фильтра товары"
		// Значения параметра могут быть следующими:
		// 0 - не использовать фильтр товаров для клиентов и торговых точек
		// 1 - использовать фильтр товаров для клиентов и торговых точек - товары, отвечающие фильтру, показываются в окне подбора подчеркнутыми
		// 2 - использовать фильтр товаров для клиентов и торговых точек - товары, не отвечающие фильтру, не показываются в каталоге
		// Если требуется установить условие проверки свойств товаров в режим "Или", то к значению выше нужно прибавить число 4, иначе будет установлен режим "И"
		
		Текст.ДобавитьСтроку(GUID_SYSTEM_VATRATE	+Т_+ "20"); // ставка НДС по умолчанию, если константа не задана, то считается 18%
		Текст.ДобавитьСтроку(GUID_SYSTEM_TIMEDLVDISP+Т_+ "0"); // для документа "Заявка" - отсрочка доставки товара (в часах) от текущего времени - используется для установки в документе времени доставки товара "по умолчанию"
		Текст.ДобавитьСтроку(GUID_SYSTEM_DSCNTRECISION+Т_+ "3");//количество знаков после запятой для скидок в документах при вводе скидок в виде чисел (на точность скидок при выборе из списка значение этой константы не влияет)
		Текст.ДобавитьСтроку(GUID_SYSTEM_PRICEPACKTIME+Т_+ "60");//рекомендуемое время на упаковку прайс листа в КПК (в секундах)
		Текст.ДобавитьСтроку(GUID_SYSTEM_AUTHOR_TEL +Т_+ "+3(8000)500-66-31 (офис :-) )");//телефонные номера фирмы, внедрившей Агент+ у клиента (пример)
		ПапкаКартинок = СокрЛП("");
		Текст.ДобавитьСтроку(GUID_SYSTEM_GOODS_PICT_PATH +Т_+ ПапкаКартинок); //путь к папке с картинками товаров в КПК
		ПапкаФото = СокрЛП("");
		Текст.ДобавитьСтроку(GUID_SYSTEM_PHOTOS_PATH +Т_+ ПапкаФото); //путь к папке с фотографиями в КПК, сделанными пользователем в КПК
		Текст.ДобавитьСтроку(GUID_SYSTEM_WEIGHT_UNIT+Т_+ СокрЛП("кг"));
		Текст.ДобавитьСтроку(GUID_SYSTEM_MERCH 		+Т_+ "Мерч:"); //подпись к строке мерчендайзинга                                  		                                                                                                                                 
		
		//А+ Мубориев 2007-12-17 начало	                 
		//ПоследнийТрек = ПолучитьПоследнийТрек();
		//Если ПоследнийТрек<>0 Тогда                         
		//	ДатаСоздания =  ДатаВФорматеXML(ПоследнийТрек.ДатаСоздания); 
		//	ВремяСоздания = ВремяВФорматеXML(ПоследнийТрек.ВремяСоздания);
		//	
		//	Текст.ДобавитьСтроку(GUID_SYSTEM_GPSTRACK_TIME + Т_+ ДатаСоздания + " " +  ВремяСоздания); //дата и время последнего трека, сделанного в КПК
		//Иначе
			Текст.ДобавитьСтроку(GUID_SYSTEM_GPSTRACK_TIME + Т_+ ""); //дата и время последнего трека, сделанного в КПК
		//КонецЕсли;
		//А+ Мубориев 2007-12-17 окончание
		
		Текст.ДобавитьСтроку(GUID_SYSTEM_DISCOUNTS 	+ Т_ + "Ref_Discounts");// означает, что используются скидки из тэга Ref_Discounts
		// Возможные значения константы GUID_SYSTEM_DISCOUNTS:
		// 1. Список значений скидок через запятую (например: "0, 1.5, 3") 
		//						 - список скидок берется из значения константы и переносится в документ для выбора скидок из списка
		// 2. "" (пустая строка) - скидка проставляется агентом в КПК в документах явно в виде числового значения
		// 3. "Ref_Discounts" 	 - список скидок берется из тэга Ref_Discounts файла выгрузки, скидки в КПК выбираются в докуменете из списка как в п 1.
		//						 кроме этого доступно чтение скидок сканером штрих-кода с карт скидок клиентов
		
		Текст.ДобавитьСтроку(GUID_SYSTEM_SAVESCRIPT  + Т_ + "SaveDoc.lua:SaveDocument");// указывается название скрипта и функции языка программирования Lua, которые будут вызываться всегда при попытке записи 
																			 		  // пользователем любого документа. Например:
																			 		  // SaveDoc.lua:SaveDocument … что означает, что будет запускаться функция SaveDocument из скрипта SaveDoc.lua.
																			 		  // Если константа в файле не указана, или указано ее пустое значение, то скрипт не вызывается. Эта функция в Lua может возвращать значения:
																			 		  // 0 – запретить проведение документа;
																			 		  // 1 – разрешить проведение документа.
																			 		  // Т.о. функция может быть использована для проверки содержимого документа, но используя средства языка Lua функция может и вносить изменения 
																			 		  // документ. Одним из примеров такого применения функции является задача расчета накопительных скидок
																					  
																					  
		
	
	ВремяВыгрузки = СокрЛП(ТекущаяДата());
	ВремяВыгрузки = ДатаВФорматеXML(ТекущаяДата());
	Текст.ДобавитьСтроку(GUID_SYSTEM_TIMEUNLD 	+Т_+ ВремяВыгрузки);	//выгружаем системное время выгрузки
	
	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_System");
	
	
КонецПроцедуры //ВыгрузитьКонстанты

&НаСервереБезКонтекста
// Функция заполнения соответствия констант и дополнительных настроек в 1С:Предприятии
// и приложении Агент Плюс:Мобильная торговля
Функция ЗаполнитьСписокКонстант()
	
	СоответствиеКонстант = Новый Соответствие;
	
	//Общие настройки
	СоответствиеКонстант.Вставить("a2e1cc68-0624-45a6-8057-efd35259b9fe", "ИмяАгента");  				 	// Наименование торгового агента
	СоответствиеКонстант.Вставить("61a474b1-21d0-4047-b2d5-7213a7294050", "СписокЗакладокЖурнала");     	// Список видимых закладок	
	СоответствиеКонстант.Вставить("344436bc-3e1b-42d7-b453-496d61eae2d8", "КаталогКартинок");     		 	// Каталог хранения картинок
	
	//Справочники общие настройки
	
	//Номенклатура	
	СоответствиеКонстант.Вставить("d902c64a-9a7a-40d1-8067-e4bb6b309534", "ОтображениеКодов");              // Признак отображения кодов товаров
	
	//Контрагенты
	СоответствиеКонстант.Вставить("73355324-f463-428a-91d2-2868dd35a168", "СозданиеКлиентов");     			// Разрешить создание клиентов
	СоответствиеКонстант.Вставить("5616d1e9-bfa3-40fc-baba-852d16b5e774", "РедактированиеКлиентов");     	// Разрешить редактирование клиентов
	СоответствиеКонстант.Вставить("4c6b29d4-3d61-43c7-a063-a63823e55069", "АдресКонтрагентаВДвеСтроки");    // Отображать адрес партнера в две строки
	СоответствиеКонстант.Вставить("195bccd6-f8ea-481e-a411-1d33a52cfe49", "ОтключитьФункционалЗвонков");    // Отключить фукционал звонков
	
	//Торговые точки                                                                                           
	СоответствиеКонстант.Вставить("b69ec9a6-565f-4e3e-844f-0060c5975fed", "СозданиеТТ");     				// Разрешить создание торговых точек
	СоответствиеКонстант.Вставить("f52e3c06-48d6-4809-ae16-13c61e78eabd", "РедактированиеТТ");     	 		// Разрешить изменение торговых точек
	
	//Договоры
	СоответствиеКонстант.Вставить("abc5b73a-f477-406b-89c5-e9aab3b4f1e1", "СозданиеДоговоров");    			// Разрешить создание договоров
	СоответствиеКонстант.Вставить("36767a2e-4df5-43b5-9813-893bf6f65a7f", "РедактированиеДоговоров");    	// Разрешить редактирование договоров
	
	// Документы общие настройки
	СоответствиеКонстант.Вставить("dc63708b-9257-48dc-9f16-d9846ac7d5fe", "ПроверятьВыборФирмы");     	 	// Проверять выбор фирмы
	СоответствиеКонстант.Вставить("b8396958-7d13-4633-a6c3-c8d639cbf9e6", "ПроверятьВыборКлиента");      	// Проверять выбор клиента
	СоответствиеКонстант.Вставить("f984e263-b838-489e-a1d4-f775db7ede98", "ПроверятьВыборТТ");      		// Проверять выбор торговой точки
	СоответствиеКонстант.Вставить("56649629-21e4-4116-aec6-e794f12c62fe", "ПроверятьВыборДоговора");     	// Проверять выбор договора		
	СоответствиеКонстант.Вставить("8deb5086-fb67-436e-a5f7-5118ce0dc09e", "РедактироватьПодтвДокументы");	// Редактировать подтвержденные документы
	СоответствиеКонстант.Вставить("018dd98c-d617-4d35-b5c0-efdabf6b37a2", "СкрыватьСписокСкладов");			// Скрывать список складов при вводе количества
	СоответствиеКонстант.Вставить("6d4c184b-810d-4c23-ba6e-fb7e03b48812", "ЗапросПересчетаТипаЦены");		// Запрашивать подтверждение изменения цены
	СоответствиеКонстант.Вставить("0deef076-ff1f-4e4d-acb5-8344be0281a1", "НеИзменятьТипыЦенВДок");		 	// Редактировать тип цены документа
	СоответствиеКонстант.Вставить("16d90b81-6ba0-4e72-a471-4350213b934e", "КомментарииКФото");				// Запрашивать комментарий к фотографиям
	СоответствиеКонстант.Вставить("faf41508-ab25-4e1b-9bbd-f80634a3d264", "РедактироватьДатуДок");			// Изменять дату документа
	
	// Заказы
	СоответствиеКонстант.Вставить("690b5736-e1b9-41ef-a132-807acad31687", "РазрешитьРедактироватьЦены");    // Разрешить редактирование цен
	СоответствиеКонстант.Вставить("4a6b2c4c-445b-4985-a509-10fb1a2d57ce", "РазрешитьИзменятьСкидку");		// Разрешить изменять скидку	
	СоответствиеКонстант.Вставить("072ec906-bd0b-4b75-afa8-bece1434f1eb", "НеИзменятьОстатки");     		// Не изменять остатки
	СоответствиеКонстант.Вставить("711587ed-1589-4e69-a7f7-09ade3fb5888", "ЗапретитьОтрицательныеОстатки"); // Запретить отрицательные остатки
	СоответствиеКонстант.Вставить("0de4a49f-691b-4910-95bf-6f25a281d9e1", "ПоказыватьКолонкуВеса");         // Показывать колонку веса	
	СоответствиеКонстант.Вставить("b0fddb94-caf7-4003-b2fd-df15bd2f1f1b", "ОтсрочкаДоставки");			    // Отсрочка доставки
	
	// Маршруты
	СоответствиеКонстант.Вставить("99eeeef3-015a-4727-8166-65f2dcceab29", "ИспользоватьМаршруты");          // Использовать маршруты
	СоответствиеКонстант.Вставить("8e0a70a1-476c-4c7b-a8a7-0c9ce334fc68", "ПриоритетМаршрутов");            // Маршруты в приоритете
	
	// Касса
	СоответствиеКонстант.Вставить("ccd3f25e-a29b-419f-b8a2-d58e380efae2", "УказыватьДокументОплаты");       // Указывать документ оплаты
	СоответствиеКонстант.Вставить("ef7c73d2-d745-4e04-a5f1-afcbbcb72f05", "ПроверятьСуммуОплаты");          // Проверять сумму оплаты
	
	// Мерчендайзинг
	СоответствиеКонстант.Вставить("d2dd4509-e164-4e6c-a0b2-c46b5ca0397d", "РедактируемыйМерчендайзин");     // Редактируемы мерчендайзинг
	СоответствиеКонстант.Вставить("68524bcf-b992-4896-8a91-44ee31498831", "ИзменятьРежимПодбора");         	// Изменять режим подбора в мерчендайзинге	
	СоответствиеКонстант.Вставить("a86959b3-ed83-44d8-b457-df8dfea9efdd", "Автомерчендайизинг");          	// Создавать мерчендайзинг для заказа автоматически  	
	СоответствиеКонстант.Вставить("ec1c050f-9183-4cf8-9a40-8546c8617ebb", "ЗапрашиватьКоличество");         // Запрашивать количество
	СоответствиеКонстант.Вставить("aeddb719-eb7a-493e-b80e-ee2d63e76fe5", "ЗапрашиватьЦену");        		// Запрашивать цену
	
	// Документы продажи
	СоответствиеКонстант.Вставить("c64dac8a-2fbc-40bf-bf49-143398aaac9a", "РазрешитьИзменятьРежимПодбора"); // Разрешить изменять режим подбора
	СоответствиеКонстант.Вставить("32cd846c-cafa-4006-bc05-ef2cd135e2ea", "ЗапрашиватьКолМерч");      		// Запрашивать количество мерчендайзинга
	СоответствиеКонстант.Вставить("138f9a6c-7f96-4136-9fbc-0663476bc094", "КолМерчВОдномОкне");     		// Количество мерчендайзинга в одном окне
	
	// Настройки GPS	
	СоответствиеКонстант.Вставить("e8dca437-fa0d-4f92-b7b8-4a7a162638c5", "ИспользоватьГПС");			 // Использовать GPS	
	
	// Настройки GPS-трекинга
	СоответствиеКонстант.Вставить("6e7183cc-abf6-4b18-af75-f4d851551fd4", "ЗаписьТрека");   			 // Использовать трекинг	
	СоответствиеКонстант.Вставить("c6b9563f-947a-46c2-82dd-d375e103317d", "СинхронизироватьВремяГПС");   // Синхронизировать время по спутнику 		
	СоответствиеКонстант.Вставить("dd7cde5e-3b09-4fa5-809b-529e8bbfb929", "ЗаписыватьСкорость");   		 // Записывать скорость	
	СоответствиеКонстант.Вставить("", 									  "Schedule");   			     // Расписание
	СоответствиеКонстант.Вставить("6517da49-a145-43a7-8730-a3e9978e437b", "ФоноваяПередача");   		 // Фоновая передача треков
	СоответствиеКонстант.Вставить("54e2a0b0-4f94-499d-875a-9d2ee7634da9", "ИнтервалПередачи");   		 // Интервал фоновой передачи треков
			
	Возврат СоответствиеКонстант;
	
КонецФункции //ЗаполнитьСписокКонстант

&НаСервере
// Функция определения соответствия перечисления типов контактной информации
// в 1С и Агент Плюс 2.0
Функция ЗаполнитьПеречислениеКонтактнойИнформации()
	
	ТипыКонтактнойИнформации = Новый Соответствие;
	ТипыКонтактнойИнформации.Вставить(Перечисления.ТипыКонтактнойИнформации.Адрес, 				   "a4d0f540-64ed-4f3e-b2bb-818da38f5ab2");
	ТипыКонтактнойИнформации.Вставить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, "52477200-af54-405b-9888-14b8bded0e19");
	ТипыКонтактнойИнформации.Вставить(Перечисления.ТипыКонтактнойИнформации.ВебСтраница, 		   "2c2cfc86-e2a0-414d-a116-5acadac53437");
	ТипыКонтактнойИнформации.Вставить(Перечисления.ТипыКонтактнойИнформации.Другое, 			   "e45419b3-0cfd-47ce-8b24-7037a1e86aed");
	ТипыКонтактнойИнформации.Вставить(Перечисления.ТипыКонтактнойИнформации.Телефон, 			   "8fc8f351-14f0-48eb-952a-38bb313b28d5");
	
	Возврат ТипыКонтактнойИнформации;
	
КонецФункции

&НаСервере
Процедура ВыгрузитьОрганизации()
	
	Текст = ДокОбмена;
	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_Firms" + Т_ + "Struct:FirmID,Name,=CodesList,=Addr,=Tel,=UseVAT,=UseSF,=DocPrefix,_FNAME,_INN,_KPP,_OKPO,_BANK,_BIK,_BANKADR,_KSCHET,_RSCHET,_DIREKTOR,_GLBUH,_IP,_REKV");

	//ОснФирма = ВыбАгент.Фирма;
	//Если ОснФирма.Выбран() = 0 Тогда
	//	ОснФирма = Константа.ОсновнаяФирма;
	//КонецЕсли;
	
	Спр = Справочники.Организации.Выбрать();
	Пока Спр.Следующий() = 1 Цикл
		
		//Если ОснФирма = Спр.ТекущийЭлемент() Тогда
		//Иначе
			
		Если (Спр.ПометкаУдаления) Или (Спр.КпкВыгружать = Ложь) Тогда
		    Продолжить;
		КонецЕсли;
		
		
		ИдФирмы = ?(флИскатьПоGUI_77, СокрП(Спр.GUI_77), СокрП(Спр.Ссылка.УникальныйИдентификатор()));
		Если Не ЗначениеЗаполнено(ИдФирмы) = 1 Тогда
		    Продолжить;
		КонецЕсли;
		
		//Если Спр.Статус = Перечисление.СтатусФирмы.ЧП Тогда
		//    ВидыОплат = "1,4";
		//ИначеЕсли Спр.Статус = Перечисление.СтатусФирмы.ООО Тогда
			ВидыОплат = "1,2,4";
		//ИначеЕсли Спр.Статус = Перечисление.СтатусФирмы.Концерн Тогда
		//	ВидыОплат = "1,2,3,4";
		//КонецЕсли;
		ВидыОплат = Т_ + ВидыОплат;
		
		КрНаим	 = Т_ + СокрЛП(Спр.Наименование);
		ПолнНаим = Т_ + СокрЛП(Спр.ПолнНаименование);		
		Адр 	 = Т_ + СокрЛП(Спр.ЮрАдрес);
		Тел		 = Т_ + СокрЛП(Спр.Телефоны);
		ИспНДС	 = Т_ + Строка(0); //в справочнике фирм хранится два признака учета НДС - для опта и розницы
		ИспСФ	 = Т_ + Строка(0);
		//Префикс	 = Т_ +	СокрЛП(ВыбАгент.КпкПрефиксНомераДок) + СокрЛП(Спр.ПрефиксНомеровДокументов);
		Префикс	 = Т_ +	"";
		//Префикс	 = Т_ +	"0";
		//^^^ Префикс номеров документов в КПК образуется из двух частей - префикса для агента и префикса для фирмы.
		//	  Автонумерация документов в КПК обязательна только в случае "торговли с колес", если же отключена
		//	  автонуимерация, то номера документам присваиваиваются в ЦБД при их загрузке из КПК.
		//    Автонумерация документов заданного вида отключается, если этому виду документов присвоен нумератор
		//	  с кодом 0. Коды нумераторов видам документов присваиваются при помощи справочника 1С "КпкНумераторы".
		//	  ВНИМАНИЕ!!! Указание пустого префикса автонумерацию документов в КПК не отключает!
		
		//Счет	 = Спр.ОсновнойСчет;
		Банк	 = Т_ + СокрЛП("");
		БИК	 	 = Т_ + СокрЛП("");
		АдрБанка = Т_ + СокрЛП("");
		КСчет 	 = Т_ + СокрЛП("");
		РСчет 	 = Т_ + СокрЛП("");
		Дир		 = Т_ + СокрЛП("");
		Бух		 = Т_ + СокрЛП("");   
		
		// { Арт 2008-10-08
		//ЭтоИП  = Спр.ИндивидуальныйПредприниматель; // 0 - "Юр. лицо", 1 - "ИП"
		ЭтоИП  = 0;
		
		Если ЭтоИП  = 1 Тогда
			// Реквизиты свидетельства о гос. регистрации ИП    
			ЭтоИП 	  =	Т_ + 1; 
			Реквизиты = Т_ + "№ " + СокрЛП("") + " от " + Строка("") + " г.";                 
			ИНН		  = Т_ + СокрЛП(Спр.ИНН);
			КПП		  = Т_ + "";
			ОКПО	  = Т_ + "";
		Иначе                                                                                                                   
			ЭтоИП 	  =	Т_ + 0; 
			Реквизиты = Т_ + "";                 
			ИНН		 = Т_ + СокрЛП("");
			КПП		 = Т_ + СокрЛП("");
			ОКПО	 = Т_ + СокрЛП("");
		КонецЕсли;		
		//  Арт 2008-10-08 }

		//Struct:FirmID,Name,=CodesList,=Addr,=Tel,=UseVAT,=UseSF,=DocPrefix,
			//_FNAME,_INN,_KPP,_OKPO,_BANK,_BIK,_BANKADR,_KSCHET,_RSCHET,_DIREKTOR,_GLBUH,_IP,_REKV
		Текст.ДобавитьСтроку(ИдФирмы + КрНаим + ВидыОплат + Адр + Тел + ИспНДС + ИспСФ + Префикс
			+ ПолнНаим + ИНН + КПП + ОКПО + Банк + Бик + АдрБанка + КСчет + РСчет + Дир + Бух + ЭтоИП + Реквизиты); //  Арт 2008-10-08 }
	КонецЦикла;
	
	Текст.ДобавитьСтроку("<End>"+ Т_ + "Ref_Firms");
	
	
	
КонецПроцедуры //ВыгрузитьОрганизации

&НаСервере
Процедура ВыгрузитьПартнеров()
	
	ЗапросГруппы = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ	
	|	Партнеры.ГруппаДоступа.Наименование КАК Наименование,
	|	Партнеры.ГруппаДоступа КАК Ссылка
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.Ссылка В (&СписПартнеров)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ");
	
	ЗапросГруппы.УстановитьПараметр("СписПартнеров", МассивПартнеров);
	
	СписокГрупп = ЗапросГруппы.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
	    ИдСпр = "9450980f-fb59-47e3-bae2-aa3c58441b1a";
		ДобавитьПоле("GUID", ИдСпр);
		
		// Передаем команду на очистку клиентов перед загрузкой
		//Если Объект.флОчищатьСправочникиПередЗагрузкой Тогда
		//	ДобавитьПоле("KILLALL", "1");                	
		//КонецЕсли;
		УстановитьПризнакОчисткиСправочника(ИдСпр);
		
		ДобавитьПоле("Comment", "Справочник.Партнеры");
		
		// Выгрузка групп контрагентов	
		ДокОбмена.ЗаписатьНачалоЭлемента("GROUPS");
		
			ДокОбмена.ЗаписатьНачалоЭлемента("GROUP");
			
				ДобавитьПоле("GUID", "1e18c8db-08f6-47da-874b-100d6e109ab8");
				
				ДобавитьПоле("Comment", "Элементы группировки по группе доступа");
				
				ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");	
				
				Пока СписокГрупп.Следующий() Цикл												
					Если Не ЗначениеЗаполнено(СписокГрупп.Ссылка) Тогда Продолжить; КонецЕсли;
					СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(СписокГрупп);					
					ЗаписатьЭлементВДокументОбмена(СтруктураПолей);																			
				КонецЦикла;  				
				
				ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
				
			ДокОбмена.ЗаписатьКонецЭлемента();     //GROUP
		
		ДокОбмена.ЗаписатьКонецЭлемента(); 		   //GROUPS
		
		// Выгрузка элементов справочника
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
		ДобавитьПоле("Comment", "Элементы справочника");
		
		СчЭлементов = 0;
		
		Запрос = Новый Запрос(ПолучитьТекстЗапросаПоПартнерам());		
		Запрос.УстановитьПараметр("СписокПартнеров",  МассивПартнеров);
	
		Выборка = Запрос.Выполнить().Выбрать();
		
		ВсегоЭлементов = Выборка.Количество();
		
		Пока Выборка.Следующий() Цикл
			
			СчЭлементов = СчЭлементов + 1;
			
			ПроцентВыгрузки = Окр(СчЭлементов/ВсегоЭлементов*100, 0);		
			
			#Если Клиент Тогда
				Состояние("Выгрузка партнеров: " + ПроцентВыгрузки + "%");			
				ОбработкаПрерыванияПользователя();
			#КонецЕсли   			
			
			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Выборка.Ссылка);									
			СтруктураПолей.Вставить("A06", 	  Выборка.Статус);
			СтруктураПолей.Вставить("A011",   Выборка.Категория);
			СтруктураПолей.Вставить("GrpId0", Выборка.ГруппаДоступа);
			ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
			
		КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента();     //CATALOG
	
КонецПроцедуры //ВыгрузитьПартнеров()

&НаСервере
Процедура ВыгрузитьДоговоры()
	
	ИспользоватьСоглашения = Константы.апИспользоватьСоглашения.Получить();
	
	Если Не ИспользоватьСоглашения Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	НетиповыеСоглашения.Контрагент КАК Партнер,
	|	НетиповыеСоглашения.ИндивидуальноеСоглашение КАК Соглашение,
	|	НетиповыеСоглашения.ТиповоеСоглашение КАК ТиповоеСоглашение,
	|	НетиповыеСоглашения.Организация КАК Организация,
	|	НетиповыеСоглашения.Номер КАК Номер,
	|	НетиповыеСоглашения.Дата КАК Дата,
	|	НетиповыеСоглашения.ВидЦен КАК ВидЦен,
	|	НетиповыеСоглашения.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	НетиповыеСоглашения.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|	НетиповыеСоглашения.Наименование КАК Наименование,
	|	1 КАК Сортировка,
	|	НетиповыеСоглашения.ИндивидуальноеСоглашение КАК ИндивидуальноеСоглашение,
	|	НетиповыеСоглашения.НалогообложениеНДС КАК НалогообложениеНДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		Соглашения.Ссылка КАК ИндивидуальноеСоглашение,
	|		Соглашения.Номер КАК Номер,
	|		Соглашения.Дата КАК Дата,
	|		Соглашения.Типовое КАК Типовое,
	|		Соглашения.ВидЦен КАК ВидЦен,
	|		Соглашения.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|		Соглашения.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|		Соглашения.Наименование КАК Наименование,
	|		Соглашения.Организация КАК Организация,
	|		Партнеры.Ссылка КАК Контрагент,
	|		Соглашения.Соглашение КАК ТиповоеСоглашение,
	|		Соглашения.НалогообложениеНДС КАК НалогообложениеНДС
	|	ИЗ
	|		Справочник.Партнеры КАК Партнеры
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				СправочникСоглашенияСКлиентами.Ссылка КАК Ссылка,
	|				СправочникСоглашенияСКлиентами.Номер КАК Номер,
	|				СправочникСоглашенияСКлиентами.Дата КАК Дата,
	|				СправочникСоглашенияСКлиентами.Типовое КАК Типовое,
	|				СправочникСоглашенияСКлиентами.ВидЦен КАК ВидЦен,
	|				СправочникСоглашенияСКлиентами.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|				СправочникСоглашенияСКлиентами.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|				СправочникСоглашенияСКлиентами.Наименование КАК Наименование,
	|				СправочникСоглашенияСКлиентами.Организация КАК Организация,
	|				СправочникСоглашенияСКлиентами.Партнер КАК Партнер,
	|				СправочникСоглашенияСКлиентами.Соглашение КАК Соглашение,
	|				СправочникСоглашенияСКлиентами.НалогообложениеНДС КАК НалогообложениеНДС
	|			ИЗ
	|				Справочник.СоглашенияСКлиентами КАК СправочникСоглашенияСКлиентами
	|			ГДЕ
	|				СправочникСоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	|				И (НЕ СправочникСоглашенияСКлиентами.ПометкаУдаления)
	|				И ВЫБОР
	|						КОГДА (НЕ СправочникСоглашенияСКлиентами.Типовое)
	|								И СправочникСоглашенияСКлиентами.Партнер В (&Партнеры)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|				И СправочникСоглашенияСКлиентами.Организация В(&Организации)) КАК Соглашения
	|			ПО Партнеры.Ссылка = Соглашения.Партнер
	|	ГДЕ
	|		Партнеры.Ссылка В(&Партнеры)
	|		И Партнеры.ПометкаУдаления = ЛОЖЬ) КАК НетиповыеСоглашения
	|ГДЕ
	|	НетиповыеСоглашения.ТиповоеСоглашение ЕСТЬ НЕ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТиповыеСоглашения.Партнер,
	|	ТиповыеСоглашения.ТиповоеСоглашение,
	|	ТиповыеСоглашения.ТиповоеСоглашение,
	|	ТиповыеСоглашения.Организация,
	|	ТиповыеСоглашения.Номер,
	|	ТиповыеСоглашения.Дата,
	|	ТиповыеСоглашения.ВидЦен,
	|	ТиповыеСоглашения.ДатаНачалаДействия,
	|	ТиповыеСоглашения.ДатаОкончанияДействия,
	|	ТиповыеСоглашения.Наименование,
	|	2,
	|	NULL,
	|	ТиповыеСоглашения.НалогообложениеНДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		Партнеры.Ссылка КАК Партнер,
	|		Соглашения.Ссылка КАК ТиповоеСоглашение,
	|		Соглашения.Номер КАК Номер,
	|		Соглашения.Дата КАК Дата,
	|		Соглашения.Типовое КАК Типовое,
	|		Соглашения.ВидЦен КАК ВидЦен,
	|		Соглашения.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|		Соглашения.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|		Соглашения.Наименование КАК Наименование,
	|		Соглашения.Организация КАК Организация,
	|		ВЫБОР
	|			КОГДА Соглашения.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
	|				ТОГДА """"
	|			ИНАЧЕ Соглашения.СегментПартнеров
	|		КОНЕЦ КАК Сегмент,
	|		Соглашения.НалогообложениеНДС КАК НалогообложениеНДС
	|	ИЗ
	|		Справочник.Партнеры КАК Партнеры,
	|		(ВЫБРАТЬ
	|			СправочникСоглашенияСКлиентами.Ссылка КАК Ссылка,
	|			СправочникСоглашенияСКлиентами.Номер КАК Номер,
	|			СправочникСоглашенияСКлиентами.Дата КАК Дата,
	|			СправочникСоглашенияСКлиентами.Типовое КАК Типовое,
	|			СправочникСоглашенияСКлиентами.ВидЦен КАК ВидЦен,
	|			СправочникСоглашенияСКлиентами.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|			СправочникСоглашенияСКлиентами.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|			СправочникСоглашенияСКлиентами.Наименование КАК Наименование,
	|			СправочникСоглашенияСКлиентами.Организация КАК Организация,
	|			СправочникСоглашенияСКлиентами.Партнер КАК Партнер,
	|			СправочникСоглашенияСКлиентами.Соглашение КАК Соглашение,
	|			СправочникСоглашенияСКлиентами.СегментПартнеров КАК СегментПартнеров,
	|			СправочникСоглашенияСКлиентами.НалогообложениеНДС КАК НалогообложениеНДС
	|		ИЗ
	|			Справочник.СоглашенияСКлиентами КАК СправочникСоглашенияСКлиентами
	|		ГДЕ
	|			СправочникСоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	|			И (НЕ СправочникСоглашенияСКлиентами.ПометкаУдаления)
	|			И ВЫБОР
	|					КОГДА СправочникСоглашенияСКлиентами.Типовое
	|						ТОГДА ИСТИНА
	|				КОНЕЦ
	|			И СправочникСоглашенияСКлиентами.Организация В(&Организации)) КАК Соглашения
	|	ГДЕ
	|		Партнеры.ПометкаУдаления = ЛОЖЬ
	|		И (Соглашения.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
	|				ИЛИ Партнеры.Ссылка В
	|					(ВЫБРАТЬ
	|						ПартнерыСегмента.Партнер
	|					ИЗ
	|						РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	|					ГДЕ
	|						ПартнерыСегмента.Сегмент В (Соглашения.СегментПартнеров)))
	|		И Партнеры.Ссылка В(&Партнеры)) КАК ТиповыеСоглашения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сортировка
	|ИТОГИ ПО
	|	Партнер";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Организации", МассивОрганизаций);
	Запрос.УстановитьПараметр("Партнеры", 	 МассивПартнеров);	
		 	
	ВыборкаПартнеры = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
		ДобавитьПоле("GUID", "735a9ce5-dcc1-4d1a-8f8d-643a50a6befc");
		
		// Передаем команду на очистку договоров перед загрузкой
		Если Объект.флОчищатьСправочникиПередЗагрузкой Тогда
			ДобавитьПоле("KILLALL", "1");                	
		КонецЕсли;	
		
		ДобавитьПоле("Comment", "Справочник.СоглашенияСКлиентами");
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
		Пока ВыборкаПартнеры.Следующий() Цикл
			
			Партнер = ВыборкаПартнеры.Партнер;
			
			#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
			#КонецЕсли
			
			ВыборкаСоглашение = ВыборкаПартнеры.Выбрать();
			
			Пока ВыборкаСоглашение.Следующий() Цикл
				
				Если ЗначениеЗаполнено(ВыборкаСоглашение.ИндивидуальноеСоглашение) Тогда 
					Соглашение = ВыборкаСоглашение.ИндивидуальноеСоглашение;
				Иначе					
					// Проверим запись в служебном справочнике       							
					Соглашение = ПолучитьСлужебныйЭлементСправочникаСоглашения(Партнер, ВыборкаСоглашение.ТиповоеСоглашение);
				КонецЕсли;					
				
				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Соглашение);				
				СтруктураПолей.Вставить("A02", Партнер);
				СтруктураПолей.Вставить("A03", ВыборкаСоглашение.Дата);
				СтруктураПолей.Вставить("A04", ВыборкаСоглашение.ДатаОкончанияДействия);
				СтруктураПолей.Вставить("A05", ВыборкаСоглашение.Организация);
				СтруктураПолей.Вставить("A06", ВыборкаСоглашение.ВидЦен);
				ПризнакНДС = ВыборкаСоглашение.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
				СтруктураПолей.Вставить("A07", ПризнакНДС);				
				ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
				
			КонецЦикла;   			
			
		КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента(); // ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента();     // CATALOG
										
КонецПроцедуры // ВыгрузитьДоговоры 

&НаСервере
Процедура ВыгрузкаКлиента(Текст, СтруктураПараметров)
	
	Клиент = СтруктураПараметров.Клиент;
	Статус = СтруктураПараметров.Статус;
	
	ИдКлиента	= СокрП(ПолучитьИдентификатор(Клиент));
	Долг		= Т_ + Строка(0);
	Кредит		= Т_ + Строка(0);
	Скидка  	= Т_ + Строка(0);
	НаимКлиента = Т_ + СокрП(Клиент.Наименование);
	Адрес		= Т_ + СокрЛП(Клиент.ПочтАдрес);
	Телефон		= Т_ + СокрЛП(Клиент.Телефоны);
	
	флПерсЦены = 1;
	ДоступныВсеЦены = 0;
	
	ПерсЦены	= Т_ + Строка(флПерсЦены);
	КатегТов	= Т_ + Строка(0);
	СвойстваТов	= Т_ + Строка(0);//признак "Не использовать в фильтре свойства"
	
	//допускается выгрузка списка кодов видов оплат, перечисляемых через запятую, как это сделано при выгрузке фирм
	ВидОплаты 	= Т_ + "1";
	
	Если ДоступныВсеЦены = 1 Тогда //клиенту разрешен отпуск товаров по любым типам цен
		ТипыЦен = Т_ + " "; //означает "все возможные цены", но в этом параметре можно перечислять допустимые коды типов цен через запятую
		//Если Клиент.ИндивидуальнаяЦена.Выбран() = 1 Тогда
	    //	ИндивидЦена = Т_ + Строка(Клиент.ИндивидуальнаяЦена.КпкКод);
		//Иначе
			ИндивидЦена = Т_ + "0";
		//КонецЕсли;
	Иначе //клиенту разрешен отпуск товаров только по одной индивидуальной цене
		//Если Клиент.ИндивидуальнаяЦена.Выбран() = 1 Тогда
	    //	ИндивидЦена = Т_ + Строка(Клиент.ИндивидуальнаяЦена.КпкКод);
		//	ТипыЦен 	= ИндивидЦена;
		//Иначе
		//	ТипыЦен  	= Т_ + " "; //означает "все возможные цены", но в этом параметре можно перечислять допустимые типы цен через запятую
		//	ИндивидЦена = Т_ + "0";
		//КонецЕсли;
		
		ИндивидЦена = Т_ + Строка("1");
		//ТипыЦен 	= Т_ + Строка("1");
		ТипыЦен 	= Т_ + СтрЗаменить(СокрЛП(Клиент["ТипЦен"+?(ВыбАгент.Менеджер.НомерКоманды>1,СокрЛП(ВыбАгент.Менеджер.НомерКоманды),"")]), "Категория ", "");
		
	КонецЕсли;
	
	//Если (ОтключитьКонтрольОплаты = 1) Тогда
		//КодСтатуса = Т_ + "0";
		КодСтатуса = Т_ + Статус;
		
	//Иначе
	//	
	//	Если (КешКлиентов.НайтиЗначение(Клиент) = 0) Тогда
	//		//ОбновитьСтатусКонтрагента(Клиент, ПолучитьПустоеЗначение("Справочник.СтатусыКонтрагентов"));
	//		КодСтатуса  = Т_ + "0";
	//	Иначе
	//		КодСтатуса  = Т_ + ?(Клиент.Статус.Выбран() = 0, "0", Строка(Клиент.Статус.Код));	
	//	КонецЕсли;
	//	
	//	
	//	
	//КонецЕсли;
    	
	Если ЗначениеЗаполнено(Клиент.ОсновнаяОрганизация) И 1=2 Тогда
	    ИдФирмы = Т_ + СокрП(ПолучитьИдентификатор(Клиент.ОсновнаяОрганизация));
	Иначе
		ИдФирмы = Т_ + "";
	КонецЕсли;
	     
	//дополнительные реквизиты клиента:
	ДопРеквизиты= Т_+"1"+Т_+ СокрП(Клиент.НомерСвидетельства) +Т_+ "" +Т_+ СокрП(Лев(Клиент.ПолнНаим,128))
		+Т_+ "" +Т_+ ДатаВФорматеXML(Клиент.СрокДоговора)
		+Т_+ "" +Т_+ "";
	

    Текст.ДобавитьСтроку(ИдКлиента + НаимКлиента + Кредит + Долг + Скидка + Телефон + КодСтатуса 
		+ Адрес + ВидОплаты + ТипыЦен + ИндивидЦена + ИдФирмы +ПерсЦены + КатегТов + СвойстваТов + ДопРеквизиты);
		
КонецПроцедуры // ВыгрузкаКлиента()


&НаСервере
Процедура ВыгрузитьКонтрагентов() 	
	
	Текст = ДокОбмена;
	
	
	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_Clients" + Т_ + "Struct:ClientID,Name,Credit,Debt,Discount,Tel,=BlockSales,=Addr,=CodesList,=PriceTypes,=PriceType,=FirmID,=UsePPrices,=FltGdsCat,=FltGdsProp,=Category,_INN,_KPP,_FNAME,_MSALES,_SROKDOG,_VIP,_CLKONKUR");
	
	
	Для Индекс = 0 По СписокКлиентовДляВыгрузки.Количество()-1 Цикл
		
		ВыгрузкаКлиента(Текст, СписокКлиентовДляВыгрузки.Получить(Индекс).Значение);
		
	КонецЦикла;
	
	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_Clients");
	
	
КонецПроцедуры //ВыгрузитьКонтрагентов 

&НаСервере
Процедура ВыгрузитьКонтактныеЛица()
	
	МассивКЛ = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КонтактныеЛица.Ссылка КАК Ссылка,
	|	КонтактныеЛица.Владелец КАК Партнер,
	|	КонтактныеЛица.Наименование,
	|	КонтактныеЛица.Комментарий
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛица
	|ГДЕ
	|	КонтактныеЛица.Владелец В(&СписокПартнеров)
	|	И КонтактныеЛица.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("СписокПартнеров", МассивПартнеров);
	
	СписокЭлементов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	сзКонтактныеЛица = Новый СписокЗначений;
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
	    ИдСпр = "cf387a58-4655-41b5-a460-85884d1f20d0";
	
		ДобавитьПоле("GUID", ИдСпр);
		
		// Передаем команду на очистку КЛ перед загрузкой
		//Если Объект.флОчищатьСправочникиПередЗагрузкой Тогда
		//	ДобавитьПоле("KILLALL", "1");                	
		//КонецЕсли;
		УстановитьПризнакОчисткиСправочника(ИдСпр);
		
		ДобавитьПоле("Connect", "Справочник.КонтактныеЛица");		
		 
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		 
			Пока СписокЭлементов.Следующий() Цикл
				
				#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
				#КонецЕсли

				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(СписокЭлементов);
				
				СтруктураПолей.Вставить("A03", СписокЭлементов.Партнер);									
				СтруктураПолей.Вставить("A05", СписокЭлементов.Комментарий);
				
				ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
				
				МассивКЛ.Добавить(СписокЭлементов.Ссылка);
				
			КонецЦикла;
	
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
	
КонецПроцедуры //ВыгрузитьКонтактныеЛица

&НаСервере
Процедура ВыгрузитьВидыКонтактнойИнформации()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка,
	|	ВидыКонтактнойИнформации.Наименование,
	|	ВидыКонтактнойИнформации.Тип.Ссылка КАК ТипКИ,
	|	ВидыКонтактнойИнформации.Родитель
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.ПометкаУдаления = ЛОЖЬ
	|	И ВидыКонтактнойИнформации.ЭтоГруппа = ЛОЖЬ");
	
	СписокЭлементов = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
	ДокОбмена.ЗаписатьАтрибут("GUID", "564e0eca-c498-4d28-83d7-4bdeaec558e2");
	
	// Передаем команду на очистку видов КИ
	Если Объект.флОчищатьСправочникиПередЗагрузкой Тогда
		ДобавитьПоле("KILLALL", "1");                	
	КонецЕсли;	 
	
	ДобавитьПоле("Comment", "Справочник.ВидыКонтактнойИнформации");
	
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	
		Пока СписокЭлементов.Следующий() Цикл  				
			
			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(СписокЭлементов);				
			
			СтруктураПолей.Вставить("A02", ТипыКонтактнойИнформации.Получить(СписокЭлементов.ТипКИ));
			
			Если СписокЭлементов.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров Тогда				
				СтруктураПолей.Вставить("A03", "КонтактныеЛица");
			ИначеЕсли СписокЭлементов.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникПартнеры Тогда				
				СтруктураПолей.Вставить("A03", "Контрагенты");				
			Иначе
				Продолжить;
			КонецЕсли;
			
			ЗаписатьЭлементВДокументОбмена(СтруктураПолей);		
			
		КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
	
КонецПроцедуры // ВыгрузитьВидыКонтактнойИнформации() 

&НаСервере
Процедура ВыгрузитьКонтактнуюИнформацию()
	
	// Выгружается вся контактная информация: 
	// - по партнерам
	// - по контрагентам
	// - по контактным лицам партнеров
	
	Запрос = Новый Запрос();
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ПартнерыКонтактнаяИнформация.Ссылка,
	|	ПартнерыКонтактнаяИнформация.Тип,
	|	ПартнерыКонтактнаяИнформация.Вид,
	|	ПартнерыКонтактнаяИнформация.Представление,
	|	"""" КАК Наименование
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Ссылка В(&СписокПартнеров)";
	
	Если Константы.апВыгружатьКонтрагентов.Получить() Тогда		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КонтрагентыКонтактнаяИнформация.Ссылка,
		|	КонтрагентыКонтактнаяИнформация.Тип,
		|	КонтрагентыКонтактнаяИнформация.Вид,
		|	КонтрагентыКонтактнаяИнформация.Представление,
		|	""""
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.Ссылка В(&СписокКонтрагентов)";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление,
	|	""""
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
	|ГДЕ
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка В(&СписокКЛ)";
	
	Запрос.Текст = ТекстЗапроса;
	  		
	Запрос.УстановитьПараметр("СписокПартнеров",    МассивПартнеров);
	Запрос.УстановитьПараметр("СписокКонтрагентов", МассивКонтрагентов);
	Запрос.УстановитьПараметр("СписокКЛ",   		МассивКЛ); 	
	
	СписокЭлементов = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
		ДобавитьПоле("GUID", "85b62882-0156-4881-85ba-b8fef05c867b");
		
		// Передаем команду на удаление всех элементов перед загрузкой
		// всегда, иначе элементы будут всегда дозаписываться
		ДокОбмена.ЗаписатьАтрибут("KILLALL", "1");
		
		ДобавитьПоле("Comment", "Справочник.КонтактнаяИнформация");
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
			Пока СписокЭлементов.Следующий() Цикл
			 
				#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
				#КонецЕсли
				
				Если Не ЗначениеЗаполнено(СписокЭлементов.Тип) или Не ЗначениеЗаполнено(СписокЭлементов.Вид) Тогда 
					Продолжить;
				КонецЕсли;
 
				СтруктураПолей = Новый Структура;
				СтруктураПолей.Вставить("GUID", 	 Новый УникальныйИдентификатор());				
				
				ТекОбъект = СписокЭлементов.Ссылка;
				
				Если ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.Партнеры") Тогда  					
					СтруктураПолей.Вставить("A01",СписокЭлементов.Ссылка);				
				ИначеЕсли ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.Контрагенты") Тогда					
					СтруктураПолей.Вставить("A02",СписокЭлементов.Ссылка);						
				ИначеЕсли ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда						
					СтруктураПолей.Вставить("A03", СписокЭлементов.Ссылка);					
				Иначе
					Продолжить;
				КонецЕсли;		
				
				СтруктураПолей.Вставить("A04", ТипыКонтактнойИнформации[СписокЭлементов.Тип]);
				СтруктураПолей.Вставить("A05", СписокЭлементов.Вид);
				СтруктураПолей.Вставить("A06", СписокЭлементов.Представление);						
								
				ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
				
			КонецЦикла;
	
		ДокОбмена.ЗаписатьКонецЭлемента();  //ELEMENTS 
		
	ДокОбмена.ЗаписатьКонецЭлемента();      //CATALOG
	
КонецПроцедуры //ВыгрузитьКонтактнуюИнформацию

&НаСервере
Процедура ВыгрузитьНоменклатуру()
	
	Текст = ДокОбмена;
	
	
	Ассортимент = Новый СписокЗначений;
	Для Каждого ЭлементСправочника Из ВыбАгент.Ассортимент.Состав Цикл
		Ассортимент.Добавить(ЭлементСправочника.НоменклатурнаяГруппа);
	КонецЦикла;
	
	ТипыЦен = Новый СписокЗначений;
	ТипыЦен.Добавить(Справочники.ТипыЦен.НайтиПоНаименованию("Категория 1"));
	ТипыЦен.Добавить(Справочники.ТипыЦен.НайтиПоНаименованию("Категория 2"));
	ТипыЦен.Добавить(Справочники.ТипыЦен.НайтиПоНаименованию("Категория 3"));
	ТипыЦен.Добавить(Справочники.ТипыЦен.НайтиПоНаименованию("Категория 4"));
	ТипыЦен.Добавить(Справочники.ТипыЦен.НайтиПоНаименованию("Категория 5"));
	ТипыЦен.Добавить(Справочники.ТипыЦен.НайтиПоНаименованию("Категория 6"));
	ТипыЦен.Добавить(Справочники.ТипыЦен.НайтиПоНаименованию("Категория 7"));
	ТипыЦен.Добавить(Справочники.ТипыЦен.НайтиПоНаименованию("Категория 8"));
	ТипыЦен.Добавить(Справочники.ТипыЦен.НайтиПоНаименованию("Категория 9"));
	ТипыЦен.Добавить(Справочники.ТипыЦен.НайтиПоНаименованию("Категория 10"));
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Товар,
		|	ВЫБОР
		|		КОГДА ЦеныНоменклатурыСрезПоследних.ТипЦен = &Категория1
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
		|	КОНЕЦ КАК Цена,
		|	ЕСТЬNULL(Остатки.КоличествоОстаток, 0) КАК КонОст,
		|	ЦеныНоменклатурыСрезПоследних.ТипЦен КАК ТипЦен
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&ДатаОстатков,
		|			ТипЦен В (&ТипыЦен)
		|				И Подразделение = &Подразделение) КАК ЦеныНоменклатурыСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах.Остатки(
		|				&ДатаОстатков,
		|				Подразделение = &Подразделение
		|					И Склад <> &СкладВозвратов) КАК Остатки
		|		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = Остатки.Номенклатура
		|ГДЕ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура В ИЕРАРХИИ(&Ассортимент)
		|	И ЦеныНоменклатурыСрезПоследних.Номенклатура.НеАктуально = ЛОЖЬ
		|ИТОГИ
		|	МАКСИМУМ(КонОст)
		|ПО
		|	Товар ИЕРАРХИЯ,
		|	ТипЦен");
				   
	Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Ассортимент", Ассортимент);
	Запрос.УстановитьПараметр("ТипыЦен", ТипыЦен);
	Запрос.УстановитьПараметр("Подразделение", ВыбАгент.Менеджер.Подразделение);
	Запрос.УстановитьПараметр("СкладВозвратов", Константы.СкладВозвратов.Получить());
	
	Запрос.УстановитьПараметр("Категория1", Справочники.ТипыЦен.НайтиПоНаименованию("Категория 1"));
	
	
	//Запрос.кк();   // Выгрузить()
	//ОкноСостояние("Выгрузка остатков товаров...");
	
    ВсегоЦен = 10;
	СтрВидовЦен = "Price1,";
	Для Поз = 2 По ВсегоЦен Цикл
		СтрВидовЦен = СтрВидовЦен + "=Price" + Строка(Поз) + ",";
	КонецЦикла;
	
	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_System" + Т_ + "Struct:ObjID,Value");
	Текст.ДобавитьСтроку(GUID_SYSTEM_PRICECOUNT	+Т_+ Строка(ВсегоЦен)); //выгружаем в константе количество типов цен
	
	КодМинЦены = 0; 
	//ТипМинЦены = Константа.КпкМинЦена;
	//Если ТипМинЦены.Выбран() = 1 Тогда
	//	Если ТипМинЦены.КпкВыгружать = 1 Тогда
	//		КодМинЦены = ТипМинЦены.КпкКод;
	//	КонецЕсли;		
	//КонецЕсли;
	Текст.ДобавитьСтроку(GUID_SYSTEM_MINPRICECODE +Т_+ Строка(КодМинЦены)); //выгружаем в константе минимального типа цен
	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_System");
	
	
	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_Price" + Т_ + "Mode:Full" + Т_ 
		+ "Struct:GoodsID,FolderID,IsFolder,Name,=Code,=NameUnits,=Unit0,=MinAmount," 
		+ СтрВидовЦен + "Rest,=RDiscount,=Action,=Weight,=Weight0,=PropList,=Comment,=VAT,=Category,=SertifID,_GTD,_STRANA"); //последние два реквизита - дополнительные

	
	Кол = 0; 
	ДатаЦен = ТекущаяДата();
	
	ТекИдРодителя = "!";
	
	ВыборкаТовары = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Товар",);
	Пока ВыборкаТовары.Следующий() Цикл
		
		Товар		= ВыборкаТовары.Товар; 
		Родитель	= Товар.Родитель;
		ИдТовара	= СокрП(ПолучитьИдентификатор(Товар));
		ИдРодителя	= ?(ЗначениеЗаполнено(Родитель), СокрП(ПолучитьИдентификатор(Родитель)), "");
		
		Если ИдРодителя = ТекИдРодителя Тогда
		    ИдРодителя = "*";
		Иначе
			ТекИдРодителя = ИдРодителя;
		КонецЕсли;
		
		ПризнГруппа = Товар.ЭтоГруппа;
		НаимТовара	= СокрП(Товар.Наименование);
		КодТовара	= СокрП(Товар.Код); // <- обратите внимание - параметр "Code" относится так же и к группам товаров, включение его только для товаров вызовет ошибку!
		
		
		ВыборкаЦены = ВыборкаТовары.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"ТипЦен", "Все");

		Если ПризнГруппа = Ложь Тогда //выгружается товар, а не группа
			
			//Если (Товар.Актуально.Получить(РабочаяДата()) = 1) Тогда
			//Иначе
			//	Продолжить;
			//КонецЕсли;
			
			//СократитьНаименование(НаимТовара);
			
			ВсегоЦен = 10;
			
			СтрЦены = "";
			МассивЦен = Новый Массив(ВсегоЦен);
			
			Пока ВыборкаЦены.Следующий() Цикл
				
				ДетальныеЗаписи = ВыборкаЦены.Выбрать();
				ДетальныеЗаписи.Следующий();
				
				//Цена = ВыборкаЦены.Цена;
				
				Цена = Формат(ДетальныеЗаписи.Цена, "ЧРД=.; ЧГ=0");
				
				//Если Цена="" Тогда
				//	Цена = "0.00";
				//КонецЕсли;
				
				//СтрЦены = СтрЦены + Строка(Цена) + Т_;
				МассивЦен[Число(СтрЗаменить(ВыборкаЦены.ТипЦен, "Категория ",""))-1] = Цена;
	
			КонецЦикла;
			
			Для й = 1 По ВсегоЦен Цикл
				СтрЦены = СтрЦены + Строка(МассивЦен[й-1]) + Т_;
			КонецЦикла;
			
			//СтрЦены = СтрЗаменить(СтрЦены, ",",".");
			
			//Для Поз = 1 По ВсегоЦен Цикл
			//	
			//	//	У них пока только одна цена
			//	Цена = Товар.ПолучитьАтрибут("Цена"+СокрЛП(Поз)).Получить(ТекущаяДата());
			//	СтрЦены = СтрЦены + Строка(Цена) + Т_;
			//КонецЦикла;
			
			Вес = 0; МинКоэф = 100000;
			//
			НазванияЕд 	= "";	//строка названий единиц через запятую
			Коэффициенты= "";	//строка размерностей единиц через знак табуляции
			
			Вес			 = Товар.Вес;
			КоэффЕдиницы = 1;
			НазванияЕд 	 = НазванияЕд + СокрЛП(Товар.ЕдиницаИзмерения) + ",";
			Коэффициенты = Коэффициенты + Строка(КоэффЕдиницы) + Т_;
			
			НазванияЕд = Лев(НазванияЕд, СтрДлина(НазванияЕд) - 1); //убрали последнюю запятую
			
			//теперь в переменных НазванияЕд и Коэффициенты у нас все готово
			
			//готовим строку свойств номенклатуры
			Свойства = "";
			
			
			МинКолДок = 0; //минимальное допустимое количество в документе
			
			Акция = ?(Товар.ДатаРегистрации>=ТекущаяДата()-14*24*60*60,"1","");
			
			ДопСтрока= Т_ + НазванияЕд + Т_ + Коэффициенты + Строка(МинКолДок) + Т_
			+ СтрЦены + Формат(ВыборкаТовары.КонОст,"ЧРД=.; ЧГ=0") + Т_
			+ "" + Т_ 
			+ Акция + Т_ 
			+ "1" + Т_
			+ Строка(Вес) + Т_
			+ Свойства + Т_
			+ "" + Т_
			+ "БезНДС"+ Т_
			+ "" + Т_
			+ ""+ Т_
			+ ""+ Т_
			+ ""
			
		Иначе	//выгружается группа товаров
			ДопСтрока = "";
			
		КонецЕсли;
		
		Текст.ДобавитьСтроку(ИдТовара + Т_ + ИдРодителя + Т_ + Строка(?(ПризнГруппа,1,0))
				+ Т_ + НаимТовара + Т_ + КодТовара + ДопСтрока);
	
		Кол = Кол + 1;
		
		//Если Кол % 100 = 0 Тогда
		//	Состояние("Выгрузка прайса: " + Кол);
		//КонецЕсли;
	КонецЦикла;
	
	//Запрос.кк();
	
	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_Price");
	
	//СписокГрупп = Новый СписокЗначений;
	//
	//Для Каждого ЭлНоменклатуры Из Ассортимент Цикл
	//	Если ЭлНоменклатуры.ЭтоГруппа Тогда			
	//		СписокГрупп.Добавить(ЭлНоменклатуры);
	//	ИначеЕсли ЗначениеЗаполнено(ЭлНоменклатуры.Родитель) Тогда
	//		СписокГрупп.Добавить(ЭлНоменклатуры.Родитель);							
	//	КонецЕсли;		
	//КонецЦикла; 
	//
	//Если ЗначениеЗаполнено(МобильныйСклад) Тогда
	//	ОстаткиАвтоСклада = ПолучитьОстаткиТоваровНаПередвижномСкладе();
	//	ОстаткиАвтоСклада.Свернуть("Номенклатура", "Количество");
	//КонецЕсли;
	//
	//Запрос = Новый Запрос(
	//"ВЫБРАТЬ
	//|	Номенклатура.Ссылка КАК Ссылка,
	//|	Номенклатура.Наименование,
	//|	Номенклатура.Родитель КАК Родитель
	//|ИЗ
	//|	Справочник.Номенклатура КАК Номенклатура
	//|ГДЕ
	//|	Номенклатура.Ссылка В ИЕРАРХИИ (&СписокГрупп)
	//|	И Номенклатура.ЭтоГруппа 
	//|УПОРЯДОЧИТЬ ПО
	//|	Наименование
	//|ИТОГИ ПО
	//|	Ссылка ИЕРАРХИЯ"); 
	//
	//Запрос.УстановитьПараметр("СписокГрупп", СписокГрупп);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//СписокГрупп = РезультатЗапроса.Выбрать();
	//
	//Запрос = Новый Запрос(
	//"ВЫБРАТЬ
	//|	ВидыНоменклатуры.Ссылка КАК Ссылка,
	//|	ВидыНоменклатуры.Наименование КАК Наименование,
	//|	ВидыНоменклатуры.Родитель.Ссылка КАК Родитель
	//|ИЗ
	//|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Наименование
	//|АВТОУПОРЯДОЧИВАНИЕ");
	//
	//СписокВидов = Запрос.Выполнить().Выбрать();
	//
	//// Выгружаем справочник номенклатуры
	//ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	//
	//	ИдСпр = "d6d52ada-0f38-4112-af3c-2f1e425a43d1";
	//
	//	ДобавитьПоле("GUID", ИдСпр);
	//	
	//	// Команда на очистку всего справочника перед загрузкой данных
	//	//Если Объект.флОчищатьСправочникиПередЗагрузкой Тогда
	//	//	ДобавитьПоле("KILLALL", "1");                	
	//	//КонецЕсли;
	//	УстановитьПризнакОчисткиСправочника(ИдСпр);
	//	
	//	ДобавитьПоле("Comment", "Справочник.Номенклатура");	
	//			
	//	// Выгрузка группировок справочника номенклатура
	//	ДокОбмена.ЗаписатьНачалоЭлемента("GROUPS");
	//	
	//		// Объявление группировки по иерархии
	//		ДокОбмена.ЗаписатьНачалоЭлемента("GROUP");
	//		
	//		ДобавитьПоле("GUID", "8e502a85-8dd4-41cf-a7a4-17ab50872d36");
	//		
	//		ДобавитьПоле("Comment", "Элементы группировки по иерархии");
	//		
	//			// Элементы группировки по иерархии
	//			ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");	
	//		
	//				СпВГ = Новый СписокЗначений;
	//		 	
	//				Пока СписокГрупп.Следующий() Цикл	
	//					
	//					Если СпВГ.НайтиПоЗначению(СписокГрупп.Ссылка) = Неопределено Тогда
	//						СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(СписокГрупп);
	//						//Если ЗначениеЗаполнено(СписокГрупп.Родитель) Тогда
	//							СтруктураПолей.Вставить("ParId", СписокГрупп.Родитель);							
	//							ЗаписатьЭлементВДокументОбмена(СтруктураПолей);	
	//							СпВГ.Добавить(СписокГрупп.Ссылка);
	//						//КонецЕсли;                        							
	//					КонецЕсли;                   					
	//					
	//				КонецЦикла;
	//								
	//			ДокОбмена.ЗаписатьКонецЭлемента();  //ELEMENTS
	//					
	//		ДокОбмена.ЗаписатьКонецЭлемента();      //GROUP
	//		
	//		// Объявление группировки по видам номенклатуры
	//		ДокОбмена.ЗаписатьНачалоЭлемента("GROUP");
	//		
	//		ДобавитьПоле("GUID", "e42da5b9-e29b-43e1-b7e3-9b500879d6b7");
	//		
	//		ДобавитьПоле("Comment", "Элементы группировки по видам номенклатуры");
	//		
	//			// Элементы группировки по категориям
	//			ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");	
	//			
	//				Пока СписокВидов.Следующий() Цикл
	//					
	//					СтруктураПолей = Новый Структура;
	//					СтруктураПолей.Вставить("GUID",  СписокВидов.Ссылка.УникальныйИдентификатор());												
	//					СтруктураПолей.Вставить("ParId", СписокВидов.Родитель);
	//					СтруктураПолей.Вставить("Name",  СписокВидов.Наименование);
	//					ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
	//					
	//				КонецЦикла;
	//				
	//			ДокОбмена.ЗаписатьКонецЭлемента();  //ELEMENTS
	//			
	//		ДокОбмена.ЗаписатьКонецЭлемента();      //GROUP
	//		
	//	ДокОбмена.ЗаписатьКонецЭлемента();        	//GROUPS
	//		
	//// Ниже идет код, касающийся выгрузки непосредственно элементов справочника	
	//
	//СписокВыгруженныхГрупп = Новый СписокЗначений;  		
	//
	//Запрос = Новый Запрос(ПолучитьТекстЗапросаПоНоменклатуре());
	//
	//Запрос.УстановитьПараметр("Период",	 		 ТекущаяДата());
	//Запрос.УстановитьПараметр("Ассортимент",	 Ассортимент);
	//Запрос.УстановитьПараметр("ДоступныеСклады", МассивСкладов);
	//										
	//Результат = Запрос.Выполнить();
	//
	//Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//
	//ВсегоТиповЦен = МассивВидовЦен.Количество();	
	//ВсегоСкладов  = МассивСкладов.Количество();
	//
	//РежимВыгрузкиКодов = Константы.апРежимВыгрузкиКодов.Получить();
	//
	//// Выгрузка элементов справочника
	//ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	//
	//ДобавитьПоле("Comment", "Элементы справочника 'Номенклатура'");
	//
	//ВсегоЭлементов = Выборка.Количество();
	//
	//СчЭлементов = 0;
	//
	//Пока Выборка.Следующий() Цикл
	//	
	//	СчЭлементов = СчЭлементов + 1;
	//	
	//	ПроцентВыгрузки = Окр(СчЭлементов/ВсегоЭлементов*100, 0);		
	//	
	//	#Если Клиент Тогда
	//		Состояние("Выгрузка номенклатуры: " + ПроцентВыгрузки + "%");			
	//		ОбработкаПрерыванияПользователя();
	//	#КонецЕсли

	//	ТекНоменклатура = Выборка.Ссылка;
	//	
	//	СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Выборка);						
	//	
	//	// Что выгружать в качестве кода		
	//	Если РежимВыгрузкиКодов = Перечисления.апРежимыВыгрузкиКодов.ВыгружатьАртикулы Тогда					
	//		Код = ТекНоменклатура.Артикул;			
	//	ИначеЕсли РежимВыгрузкиКодов = Перечисления.апРежимыВыгрузкиКодов.ВыгружатьКоды Тогда		
	//		Код = ТекНоменклатура.Код;
	//	Иначе
	//		Код = ""
	//	КонецЕсли; 
	//	
	//	БазоваяЕдиница = ПолучитьЕдиницуИзмерения(ТекНоменклатура, ТекНоменклатура.ЕдиницаИзмерения);		
	//	ЕдЦены 		   = БазоваяЕдиница;
	//	
	//	ЭтоУслуга = ТекНоменклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
	//	
	//	ТекПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ТекНоменклатура.СтавкаНДС)*100;
	//	
	//	//ТекущаяСтрока.СуммаНДС = Ценообразование.РассчитатьСуммуНДС(ТекущаяСтрока.Сумма, ТекущаяСтрока.СтавкаНДС, СтруктураПараметровДействия.ЦенаВключаетНДС);
	//	
	//	ЕстьХарактеристики = "0";
	//	
	//	СтруктураПолей.Вставить("Code", Код);
	//	СтруктураПолей.Вставить("A02",  ТекНоменклатура.Родитель);
	//	СтруктураПолей.Вставить("A04",  ТекПроцентНДС);
	//	СтруктураПолей.Вставить("A05",  ТекНоменклатура.ВидНоменклатуры);
	//	СтруктураПолей.Вставить("A06",  БазоваяЕдиница);
	//	СтруктураПолей.Вставить("A08",  Выборка.ЕстьХарактеристики);
	//	СтруктураПолей.Вставить("A011", Выборка.СвободныйОстаток);
	//	СтруктураПолей.Вставить("A013", БазоваяЕдиница);
	//	СтруктураПолей.Вставить("A014", ?(ТекНоменклатура.Вес = 0, "0", "1"));
	//	СтруктураПолей.Вставить("A015", ЭтоУслуга);
	//	СтруктураПолей.Вставить("A035", ТекНоменклатура.НаименованиеПолное);
	//	ЕстьОстатки = Выборка.СвободныйОстаток > 0;
	//	СтруктураПолей.Вставить("A037", ЕстьОстатки);
	//	Если ЗначениеЗаполнено(МобильныйСклад) Тогда
	//		СтруктураПолей.Вставить("A041", ПолучитьОстатокТовараНаПередвижномСкладе(ТекНоменклатура, ОстаткиАвтоСклада));
	//	КонецЕсли;
	//	СтруктураПолей.Вставить("A042", СокрЛП(ТекНоменклатура.Описание));
	//	СтруктураПолей.Вставить("A043", ТекНоменклатура.ФайлКартинки);	
	//	СтруктураПолей.Вставить("A044", СчЭлементов);                 		
	//	
	//	// Выгружаем цены в разрезе типов цен
	//	КолВыгрТиповЦен = 0;
	//	
	//	Для Каждого ЭлМассива Из МассивВидовЦен Цикл   
	//		Если КолВыгрТиповЦен = 10 Тогда
	//			Прервать;
	//		КонецЕсли;			
	//		ТекЦена = ПолучитьЦенуНоменклатуры(ТекНоменклатура, ЭлМассива, ТекущаяДата());			
	//		СтруктураПолей.Вставить("A02" + Строка(КолВыгрТиповЦен), ТекЦена);							
	//		КолВыгрТиповЦен = КолВыгрТиповЦен + 1;			
	//	КонецЦикла;  
	//		
	//	// Выгружаем остатки по складам
	//	СписокОстатков = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//	
	//	ТабОстатков = Новый ТаблицаЗначений;
	//	ТабОстатков.Колонки.Добавить("Склад");
	//	ТабОстатков.Колонки.Добавить("Остаток");
	//	
	//	Для Каждого ЭлМассива Из МассивСкладов Цикл
	//		СписокОстатков.Сбросить();			
	//		СтрОст = ТабОстатков.Добавить();
	//		СтрОст.Склад   = ЭлМассива;
	//		СтрОст.Остаток = 0;
	//		Если СписокОстатков.НайтиСледующий(ЭлМассива) Тогда								
	//			СтрОст.Остаток = СписокОстатков.СвободныйОстаток;						
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	КолВыгрСкладов = 0;
	//	
	//	Для Каждого СтрокаОст Из ТабОстатков Цикл   
	//		Если КолВыгрСкладов = 5 Тогда
	//			Прервать;
	//		КонецЕсли;			
	//		СтруктураПолей.Вставить("A03" + Строка(КолВыгрСкладов), СтрокаОст.Остаток);							
	//		КолВыгрСкладов = КолВыгрСкладов + 1;			
	//	КонецЦикла;   

	//	///////////////////////////
	//	
	//	Если ТекНоменклатура.Родитель <> Справочники.Контрагенты.ПустаяСсылка() И ТекНоменклатура.Родитель <> Null Тогда
	//		СтруктураПолей.Вставить("GrpId0", ТекНоменклатура.Родитель);
	//	КонецЕсли;
	//	
	//	Если ТекНоменклатура.ВидНоменклатуры <> Справочники.ВидыНоменклатуры.ПустаяСсылка() И ТекНоменклатура.ВидНоменклатуры <> Null Тогда
	//		СтруктураПолей.Вставить("GrpId1", ТекНоменклатура.ВидНоменклатуры);
	//	КонецЕсли;
	//	
	//	// Во втором параметре передается Ложь - это означает,
	//	// что не закрывает тег "Item", его закрытие производится ниже
	//	//ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
	//	ЗаписатьЭлементВДокументОбмена(СтруктураПолей, Ложь);
	//	
	//	КолТиповЦен = ВсегоТиповЦен - КолВыгрТиповЦен;
	//	КолСкладов  = ВсегоСкладов  - КолВыгрСкладов;
	//	
	//	//ОтборКартинок = Новый Структура("ВладелецФайла", ТекНоменклатура);
	//	//ВыборкаКартинок = Справочники.НоменклатураПрисоединенныеФайлы.Выбрать(, , ОтборКартинок);		
	//	//СтрокаГрафическийРасширений = "bmp;gif;png;jpeg;dib;rle;tif;jpg;ico;wmf;emf";
	//	//
	//	//СписокКартинокОбъекта = Новый СписокЗначений;		
	//	//Пока ВыборкаКартинок.Следующий() Цикл
	//	//	Если Найти(СтрокаГрафическийРасширений, ВыборкаКартинок.Расширение) > 0 Тогда				
	//	//		СписокКартинокОбъекта.Добавить(ВыборкаКартинок.Ссылка);
	//	//	КонецЕсли;
	//	//КонецЦикла;
	//					
	//	ОбщееУсловие = КолТиповЦен > 0 или КолСкладов > 0; 
	//	
	//	Если ОбщееУсловие Тогда	   			
	//		
	//		//Заполняем табличные части справочника
	//		ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
	//		
	//		Если КолСкладов > 0 Тогда
	//			
	//			//Заполняем табличную часть остатков		
	//			ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
	//			
	//			ДобавитьПоле("GUID", "af0a6972-4bca-4652-a3cf-8ebc1ed1ee0d");
	//			
	//			ДобавитьПоле("Comment", "Табличная часть 'Остатки'");
	//			
	//			Цел10 = Цел(КолСкладов/5) + 1;
	//			
	//			Для СчЦел = 1 По Цел10 Цикл
	//				
	//				ОстСкладовТЧ = Мин(КолСкладов, 5);
	//				
	//				Если ОстСкладовТЧ <= 0 Тогда Продолжить; КонецЕсли;
	//				
	//				СтруктураПолей = Новый Структура;
	//				СтруктураПолей.Вставить("GUID",   Новый УникальныйИдентификатор());
	//				СтруктураПолей.Вставить("CtlgId", ТекНоменклатура);
	//				СтруктураПолей.Вставить("A06",    СчЦел);
	//				
	//				Для СчТЧ = 1 По ОстСкладовТЧ Цикл
	//					НомерСтроки = КолВыгрСкладов + СчТЧ - 1;
	//					Если НомерСтроки > ТабОстатков.Количество()-1 Тогда
	//						Прервать;
	//					КонецЕсли;
	//					СтрокаОстатка = ТабОстатков.Получить(НомерСтроки);
	//					ТекОстаток = 0;
	//					Если Не СтрокаОстатка = Неопределено Тогда
	//						ТекОстаток = СтрокаОстатка.Остаток;
	//					КонецЕсли;
	//					СтруктураПолей.Вставить("A0" + Строка(СчТЧ), ТекОстаток);							
	//				КонецЦикла;
	//				
	//				ЗаписатьЭлементВДокументОбмена(СтруктураПолей);									
	//				КолВыгрСкладов = КолВыгрСкладов + 5;
	//			КонецЦикла;				
	//			
	//			ДокОбмена.ЗаписатьКонецЭлемента(); //TABLE
	//			
	//		КонецЕсли;			
	//		
	//		Если КолТиповЦен > 0 Тогда
	//			
	//			// Заполняем табличную часть ценами
	//			ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
	//		
	//				ДобавитьПоле("GUID", "7f72aed2-94f7-4165-b112-c7a69fea70cc");
	//				
	//				ДобавитьПоле("Comment", "Табличная часть 'Цены'");
	//			
	//				Цел10 = Цел(КолТиповЦен/10) + 1;
	//				
	//				Для СчЦел = 1 По Цел10 Цикл
	//					
	//					ОстТиповЦенТЧ = Мин(КолТиповЦен, 10);
	//					
	//					Если ОстТиповЦенТЧ <= 0 Тогда Продолжить; КонецЕсли;
	//					
	//					СтруктураПолей = Новый Структура;
	//					СтруктураПолей.Вставить("GUID",   Новый УникальныйИдентификатор());
	//					СтруктураПолей.Вставить("CtlgId", ТекНоменклатура);
	//					СтруктураПолей.Вставить("A011",   СчЦел);
	//					
	//					Для СчТЧ = 1 По ОстТиповЦенТЧ Цикл   
	//						ЭлМассива = МассивВидовЦен.Получить(КолВыгрТиповЦен + СчТЧ - 1);
	//						Если Не ЭлМассива = Неопределено Тогда
	//							ТекТипЦены = ЭлМассива;
	//							ТекЦена = ПолучитьЦенуНоменклатуры(ТекНоменклатура, ЭлМассива, ТекущаяДата());			
	//						 	СтруктураПолей.Вставить("A0" + Строка(СчТЧ), ТекЦена);							
	//						КонецЕсли;
	//					КонецЦикла;
	//					
	//					ЗаписатьЭлементВДокументОбмена(СтруктураПолей);									
	//					
	//				КонецЦикла;
	//						
	//			ДокОбмена.ЗаписатьКонецЭлемента(); //TABLE			
	//		
	//		КонецЕсли;   			
	//				
	//	ДокОбмена.ЗаписатьКонецЭлемента();     //TABLES
	//	
	//	КонецЕсли;
	//	
	//	// Закрываем тег ITEM, который был открыт при вызове
	//	// процедуры "ЗаписатьЭлементВДокументОбмена"
	//	ДокОбмена.ЗаписатьКонецЭлемента();     //ITEM
	//										
	//КонецЦикла;
	//
	//ДокОбмена.ЗаписатьКонецЭлемента();          //ELEMENTS
	//
	//ДокОбмена.ЗаписатьКонецЭлемента();          // CATALOG
	//
	//РежимВыгрузкиНоменклатуры = Константы.апРежимВыгрузкиНоменклатуры.Получить();
	//
	//// Выгружаем сопутствующие данные
	//Если Константы.ИспользоватьХарактеристикиНоменклатуры.Получить() и РежимВыгрузкиНоменклатуры = Перечисления.апРежимыВыгрузкиНоменклатуры.ВРазрезеХарактеристик Тогда		
	//	#Если Клиент Тогда
	//		Состояние("Выгрузка характеристик номенклатуры...");			
	//		ОбработкаПрерыванияПользователя();
	//	#КонецЕсли      
	//	ВыгрузитьХарактеристикиНоменклатуры();
	//Иначе
	//	// Если не выгружаются характеристики, нужно передавать команду
	//	// на их очистку, если они были раньше выгружены
	//	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");		
	//		ДобавитьПоле("GUID", "cc552c31-f7de-4259-a6e3-66ef765d3b43");									
	//		ДобавитьПоле("KILLALL", "1");                	                    			
	//	ДокОбмена.ЗаписатьКонецЭлемента();	
	//КонецЕсли;
	//
	//#Если Клиент Тогда
	//	Состояние("Выгрузка единиц измерения...");			
	//	ОбработкаПрерыванияПользователя();
	//#КонецЕсли
	//
	//ВыгрузитьЕдиницыИзмерения();		
	
КонецПроцедуры // ВыгрузитьНоменклатуру()

// Выгрузка справочника Рейтинги товаров и Матриц товаров 
&НаСервере
Процедура ВыгрузитьМатрицыТоваров()

	// Выгрузка Рейтингов товаров	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	апРейтингиТоваров.Наименование,
	|	апРейтингиТоваров.Цвет,
	|	апРейтингиТоваров.Ссылка
	|ИЗ
	|	Справочник.апРейтингиТоваров КАК апРейтингиТоваров");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
	ДобавитьПоле("GUID", "F86E787D-4FBF-4E0D-8D65-4177B86A5E1B");
	
	ДобавитьПоле("Comment", "Справочник.РейтингиТоваров");	
	
	// Передаем команду на очистку справочника перед загрузкой
	ДобавитьПоле("KILLALL", "1"); 
	 
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
		Пока Выборка.Следующий() Цикл		
			Цвет = апКлиентСервер.ПреобразоватьЦветВRGBСтроку(Выборка.Цвет.Получить());
			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Выборка);
			СтруктураПолей.Вставить("A01", Цвет);
			ЗаписатьЭлементВДокументОбмена(СтруктураПолей);		
		КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента();     //CATALOG
    //////////////////////////////////////////////////
	
	// Выгрузка Матриц товаров	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	апМатрицыТоваровСостав.Номенклатура,
	|	апМатрицыТоваровСостав.Рейтинг,
	|	апМатрицыТоваровСостав.ЗначениеРейтинга,
	|	апМатрицыТоваровСостав.Ссылка.Категория КАК Категория,
	|	апМатрицыТоваровСостав.Ссылка
	|ИЗ
	|	Справочник.апМатрицыТоваров.Состав КАК апМатрицыТоваровСостав
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.апМатрицыТоваров.Агенты КАК апМатрицыТоваровАгенты
	|		ПО апМатрицыТоваровСостав.Ссылка = апМатрицыТоваровАгенты.Ссылка
	|ГДЕ
	|	апМатрицыТоваровСостав.Ссылка.НачПериода <= &ТекПериод
	|	И ВЫБОР
	|			КОГДА апМатрицыТоваровСостав.Ссылка.КонПериода <> &ПустаяДата
	|				ТОГДА апМатрицыТоваровСостав.Ссылка.КонПериода
	|			ИНАЧЕ &ТекПериод
	|		КОНЕЦ >= &ТекПериод
	|	И апМатрицыТоваровСостав.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И апМатрицыТоваровАгенты.Агент = &Агент");
	
	Запрос.УстановитьПараметр("ТекПериод",  ТекущаяДата());
	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));
	Запрос.УстановитьПараметр("Агент",      ВыбАгент);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
	ДобавитьПоле("GUID", "EFAD4C8E-C7C3-40A4-885C-9F10DF65967B");
	
	ДобавитьПоле("Comment", "Справочник.МатрицыТоваров");	
	
	// Передаем команду на очистку справочника перед загрузкой
	ДобавитьПоле("KILLALL", "1"); 
	
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	
		Пока Выборка.Следующий() Цикл
			Товар = Выборка.Номенклатура;
		
			Если Товар.ЭтоГруппа Тогда
				ДобавитьЭлементыПоМатрицеИзГруппы(Товар, Выборка.Рейтинг, Выборка.ЗначениеРейтинга, Выборка.Категория);
			Иначе
				ДобавитьЭлементыПоМатрице(Товар, Выборка.Рейтинг, Выборка.ЗначениеРейтинга, Выборка.Категория);
			КонецЕсли;		
		КонецЦикла; //Пока Выборка.Следующий() Цикл
	
		ДокОбмена.ЗаписатьКонецЭлемента();		//ELEMENTS
	ДокОбмена.ЗаписатьКонецЭлемента();      //CATALOG
	//////////////////////////////////////////////////

КонецПроцедуры // ВыгрузитьМатрицыТоваров()

&НаСервере
Процедура ДобавитьЭлементыПоМатрице(Элем, Рейтинг, ЗначениеРейтинга, Категория)
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("GUID",	Новый УникальныйИдентификатор());
	СтруктураПолей.Вставить("A01",  Категория);
	СтруктураПолей.Вставить("A02",  Элем);
	СтруктураПолей.Вставить("A03",  Рейтинг);
	СтруктураПолей.Вставить("A04",  ЗначениеРейтинга);
	ЗаписатьЭлементВДокументОбмена(СтруктураПолей);		
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыПоМатрицеИзГруппы(ГруппаЭлементов, Рейтинг, ЗначениеРейтинга, Категория)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Номенклатура.Ссылка
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.ПометкаУдаления = ЛОЖЬ
	               |	И Номенклатура.Родитель = &Родитель";
	Запрос.УстановитьПараметр("Родитель", ГруппаЭлементов);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Товар = Выборка.Ссылка;
		
		Если Товар.ЭтоГруппа Тогда
	    	ДобавитьЭлементыПоМатрицеИзГруппы(Товар, Рейтинг, ЗначениеРейтинга, Категория);
		Иначе
			ДобавитьЭлементыПоМатрице(Товар, Рейтинг, ЗначениеРейтинга, Категория);
		КонецЕсли;
	КонецЦикла; //Пока Выборка.Следующий() Цикл	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьХарактеристикиНоменклатуры()
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
	ИдСпр = "cc552c31-f7de-4259-a6e3-66ef765d3b43";
	
	ДобавитьПоле("GUID", ИдСпр);
	
	// Очищаем все характеристики перед загрузкой их в БД МУ
	//Если Объект.флОчищатьСправочникиПередЗагрузкой Тогда
	//	ДобавитьПоле("KILLALL", "1");                	
	//КонецЕсли;
	УстановитьПризнакОчисткиСправочника(ИдСпр);
	
	ДобавитьПоле("Comment", "Справочник.ХарактеристикиНоменклатуры");
	
	Если ЗначениеЗаполнено(МобильныйСклад) Тогда
		ОстаткиАвтоСклада = ПолучитьОстаткиТоваровНаПередвижномСкладе();
	КонецЕсли;		
		
	Запрос = Новый Запрос(ПолучитьТекстЗапросаПоНоменклатуре(Истина));
	
	Запрос.УстановитьПараметр("Период", 	 	 ТекущаяДата());
	Запрос.УстановитьПараметр("Ассортимент",	 Ассортимент);
	Запрос.УстановитьПараметр("ДоступныеСклады", МассивСкладов);     
											
	Результат = Запрос.Выполнить();	
	
	ВсегоТиповЦен = МассивВидовЦен.Количество();	
	ВсегоСкладов  = МассивСкладов.Количество();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	
		ВыборкаНоменклатура = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		СчЭлементов = 0;
		
		ВсегоЭлементов = ВыборкаНоменклатура.Количество();
		
		Пока ВыборкаНоменклатура.Следующий() Цикл
			
			ТекНоменклатура = ВыборкаНоменклатура.Номенклатура;			
			
			Если ТекНоменклатура = Null Тогда Продолжить; КонецЕсли;
						
			ВыборкаХарактеристика = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);		 	
			
			Пока ВыборкаХарактеристика.Следующий() Цикл
				
				КолХарактеристик = ВыборкаХарактеристика.Количество();
				
				ПроцентВыгрузки = Окр(СчЭлементов/(ВсегоЭлементов*КолХарактеристик)*100, 0);		
				
				СчЭлементов = СчЭлементов + 1;
				
				#Если Клиент Тогда
					Состояние("Выгрузка характеристик номенклатуры: " + ПроцентВыгрузки + "%");			
					ОбработкаПрерыванияПользователя();
				#КонецЕсли 				
				
				ТекВладелец     		= ВыборкаХарактеристика.Владелец;			
				ТекХарактеристика 		= ВыборкаХарактеристика.Ссылка;
				СлужебнаяХарактеристика = ВыборкаХарактеристика.СлужебнаяХарактеристика;
				
				//Если ТипЗнч(ТекХарактеристика) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
				//	Владелец = ТекХарактеристика;												
				//Иначе
				//	Владелец = ТекНоменклатура;								
				//КонецЕсли;    	
				
				НужнаяХарактеристика = ТекХарактеристика;
				
				Если ТипЗнч(ТекВладелец) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда					
					// Используется общий набор характеристик по видам номенклатуры					
					Если СлужебнаяХарактеристика = Null Тогда
						НужнаяХарактеристика = ПолучитьХарактеристикуСлужебную(ТекНоменклатура, ТекХарактеристика);
					Иначе
						НужнаяХарактеристика = СлужебнаяХарактеристика;
					КонецЕсли;    					
				Иначе // Используется индивидуальный набор характеристик
				КонецЕсли;    					
				
				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(НужнаяХарактеристика);		
				СтруктураПолей.Вставить("Name", СокрЛП(ТекХарактеристика.Наименование));
				СтруктураПолей.Вставить("A02",  ТекНоменклатура);
				СтруктураПолей.Вставить("A04",  ВыборкаХарактеристика.СвободныйОстаток);
				СтруктураПолей.Вставить("A037", (ВыборкаХарактеристика.СвободныйОстаток = 0));
				//
				//ВыборкаАкции = ВыборкаХарактеристика.Выбрать();
				//Если ВыборкаАкции.Следующий() Тогда
				//	СтруктураПолей.Вставить("A038", ?(ЗначениеЗаполнено(ВыборкаАкции.Акция), Истина, Ложь));
				//КонецЕсли;
				
				Если ЗначениеЗаполнено(МобильныйСклад) Тогда
					СтруктураПолей.Вставить("A039", ПолучитьОстатокТовараНаПередвижномСкладе(ТекХарактеристика, ОстаткиАвтоСклада));
				КонецЕсли;  			
				
				// Выгружаем цены в разрезе типов цен
				КолВыгрТиповЦен = 0;
				
				Для Каждого ЭлМассива Из МассивВидовЦен Цикл   
					Если КолВыгрТиповЦен = 10 Тогда
						Прервать;
					КонецЕсли;			
					ТекЦена = ПолучитьЦенуНоменклатуры(ТекНоменклатура, ЭлМассива, ТекущаяДата(), ТекХарактеристика);			
					СтруктураПолей.Вставить("A02" + Строка(КолВыгрТиповЦен), ТекЦена);							
					КолВыгрТиповЦен = КолВыгрТиповЦен + 1;			
				КонецЦикла;  
				
				// Выгружаем остатки по складам
				СписокОстатков = ВыборкаХарактеристика.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				ТабОстатков = Новый ТаблицаЗначений;
				ТабОстатков.Колонки.Добавить("Склад");
				ТабОстатков.Колонки.Добавить("Остаток");
				
				Для Каждого ЭлМассива Из МассивСкладов Цикл
					СписокОстатков.Сбросить();			
					СтрОст = ТабОстатков.Добавить();
					СтрОст.Склад   = ЭлМассива;
					СтрОст.Остаток = 0;
					Если СписокОстатков.НайтиСледующий(ЭлМассива) Тогда								
						СтрОст.Остаток = СписокОстатков.СвободныйОстаток;						
					КонецЕсли;
				КонецЦикла;
				
				КолВыгрСкладов = 0;
				
				Для Каждого СтрокаОст Из ТабОстатков Цикл   
					Если КолВыгрСкладов = 5 Тогда
						Прервать;
					КонецЕсли;			
					СтруктураПолей.Вставить("A03" + Строка(КолВыгрСкладов), СтрокаОст.Остаток);							
					КолВыгрСкладов = КолВыгрСкладов + 1;			
				КонецЦикла;          			
				
				// Во втором параметре передается Ложь - это означает,
				// что не закрывает тег "Item", его закрытие производится ниже		
				ЗаписатьЭлементВДокументОбмена(СтруктураПолей, Ложь);
				
				КолТиповЦен = ВсегоТиповЦен - КолВыгрТиповЦен;
				КолСкладов  = ВсегоСкладов  - КолВыгрСкладов;
				
				ОбщееУсловие = КолТиповЦен > 0 или КолСкладов > 0; 			
				
				Если ОбщееУсловие Тогда	   			
					
					//Заполняем табличные части справочника
					ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
					
					Если КолСкладов > 0 Тогда
						
						//Заполняем табличную часть остатков		
						ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
						
						ДобавитьПоле("GUID", "19481e88-8575-4720-80e6-222816c754e4");
						
						ДобавитьПоле("Comment", "Табличная часть 'Остатки'");
						
						Цел10 = Цел(КолСкладов/5) + 1;
						
						Для СчЦел = 1 По Цел10 Цикл
							
							ОстСкладовТЧ = Мин(КолСкладов, 5);
							
							Если ОстСкладовТЧ <= 0 Тогда Продолжить; КонецЕсли;
							
							СтруктураПолей = Новый Структура;
							СтруктураПолей.Вставить("GUID",   Новый УникальныйИдентификатор());
							СтруктураПолей.Вставить("CtlgId", ТекНоменклатура);
							СтруктураПолей.Вставить("A06",    СчЦел);
							
							Для СчТЧ = 1 По ОстСкладовТЧ Цикл
								НомерСтроки = КолВыгрСкладов + СчТЧ - 1;
								Если НомерСтроки > ТабОстатков.Количество()-1 Тогда
									Прервать;
								КонецЕсли;
								СтрокаОстатка = ТабОстатков.Получить(НомерСтроки);
								ТекОстаток = 0;
								Если Не СтрокаОстатка = Неопределено Тогда
									ТекОстаток = СтрокаОстатка.Остаток;
								КонецЕсли;
								СтруктураПолей.Вставить("A0" + Строка(СчТЧ), ТекОстаток);							
							КонецЦикла;
							
							ЗаписатьЭлементВДокументОбмена(СтруктураПолей);									
							КолВыгрСкладов = КолВыгрСкладов + 5;
						КонецЦикла;				
						
						ДокОбмена.ЗаписатьКонецЭлемента(); //TABLE
						
					КонецЕсли;			
					
					Если КолТиповЦен > 0 Тогда
						
						// Заполняем табличную часть ценами
						ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
						
						ДобавитьПоле("GUID", "d91732e1-d4d8-4566-9f4f-bb1b0a043e6f");
						
						ДобавитьПоле("Comment", "Табличная часть 'Цены'");
						
						Цел10 = Цел(КолТиповЦен/10) + 1;
						
						Для СчЦел = 1 По Цел10 Цикл
							
							ОстТиповЦенТЧ = Мин(КолТиповЦен, 10);
							
							Если ОстТиповЦенТЧ <= 0 Тогда Продолжить; КонецЕсли;
							
							СтруктураПолей = Новый Структура;
							СтруктураПолей.Вставить("GUID",   Новый УникальныйИдентификатор());
							СтруктураПолей.Вставить("CtlgId", ТекНоменклатура);
							СтруктураПолей.Вставить("A011",   СчЦел);
							
							Для СчТЧ = 1 По ОстТиповЦенТЧ Цикл   
								Для СчТЧ = 1 По ОстТиповЦенТЧ Цикл   
									ЭлМассива = МассивВидовЦен.Получить(КолВыгрТиповЦен + СчТЧ - 1);
									Если Не ЭлМассива = Неопределено Тогда
										ТекТипЦены = ЭлМассива;
										ТекЦена = ПолучитьЦенуНоменклатуры(ТекНоменклатура, ЭлМассива, ТекущаяДата(), ТекХарактеристика);			
										СтруктураПолей.Вставить("A0" + Строка(СчТЧ), ТекЦена);							
									КонецЕсли;
								КонецЦикла;      
							КонецЦикла;
							
							ЗаписатьЭлементВДокументОбмена(СтруктураПолей);									
							
						КонецЦикла;
						
						ДокОбмена.ЗаписатьКонецЭлемента(); //TABLE			
						
					КонецЕсли; 
					
					ДокОбмена.ЗаписатьКонецЭлемента();     //TABLES			
					
				КонецЕсли;			
				
				// Закрыаем тег ITEM, который был открыт при вызове
				// процедуры "ЗаписатьЭлементВДокументОбмена"
				ДокОбмена.ЗаписатьКонецЭлемента();     //ITEM
				
			КонецЦикла;
			
		КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента();         //ELEMENTS
	
	ДокОбмена.ЗаписатьКонецЭлемента();         //CATALOG
	
КонецПроцедуры //ВыгрузитьХарактеристикиНоменклатуры

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаПоИзображениям()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлы.ХранимыйФайл,
	|	ФайлыСправочников.Ссылка,
	|	ФайлыСправочников.ВладелецФайла,
	|	ФайлыСправочников.Наименование,
	|	ФайлыСправочников.Расширение,
	|	ФайлыСправочников.Описание
	|ИЗ
	|	(ВЫБРАТЬ
	|		НоменклатураПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|		НоменклатураПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла,
	|		НоменклатураПрисоединенныеФайлы.Наименование КАК Наименование,
	|		НоменклатураПрисоединенныеФайлы.Расширение КАК Расширение,
	|		НоменклатураПрисоединенныеФайлы.Описание КАК Описание,
	|		НоменклатураПрисоединенныеФайлы.ФайлХранилище КАК ФайлХранилище
	|	ИЗ
	|		Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
	|	ГДЕ
	|		НоменклатураПрисоединенныеФайлы.ВладелецФайла В(&Ассортимент)
	|		И НоменклатураПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ
	|		И НоменклатураПрисоединенныеФайлы.Зашифрован = ЛОЖЬ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПартнерыПрисоединенныеФайлы.Ссылка,
	|		ПартнерыПрисоединенныеФайлы.ВладелецФайла,
	|		ПартнерыПрисоединенныеФайлы.Наименование,
	|		ПартнерыПрисоединенныеФайлы.Расширение,
	|		ПартнерыПрисоединенныеФайлы.Описание,
	|		ПартнерыПрисоединенныеФайлы.ФайлХранилище
	|	ИЗ
	|		Справочник.ПартнерыПрисоединенныеФайлы КАК ПартнерыПрисоединенныеФайлы
	|	ГДЕ
	|		ПартнерыПрисоединенныеФайлы.ВладелецФайла В(&СписокПартнеров)
	|		И ПартнерыПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ
	|		И ПартнерыПрисоединенныеФайлы.Зашифрован = ЛОЖЬ) КАК ФайлыСправочников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|		ПО ФайлыСправочников.Ссылка = ПрисоединенныеФайлы.ПрисоединенныйФайл";
	
	Возврат ТекстЗапроса;
	
КонецФункции //ПолучитьТекстЗапросаПоИзображениям	

&НаСервере
Процедура ВыгрузитьИзображения()

	Если Не Объект.флВыгружатьКартинки Тогда		
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ПолучитьТекстЗапросаПоИзображениям();
	
	Запрос = Новый Запрос(ТекстЗапроса);
		
	Запрос.УстановитьПараметр("Ассортимент", 		Ассортимент);
	Запрос.УстановитьПараметр("СписокПартнеров", 	МассивПартнеров);
	Запрос.УстановитьПараметр("СтрокаРасширений", 	"bmp;gif;png;jpeg;dib;rle;tif;jpg;ico;wmf;emf");
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	
	СтрокаРасширений = "bmp;gif;png;jpeg;dib;rle;tif;jpg;ico;wmf;emf";
	
	ИмяКаталога = КаталогВременныхФайловСервер + "PhotosFrom1C\";
	
	Пока Выборка.Следующий() Цикл
		
		ИдФото = ВРег(Выборка.Ссылка.УникальныйИдентификатор());		
			
		Если ПустаяСтрока(ИдФото) Тогда Продолжить; КонецЕсли;		
		
		Если ТипЗнч(Выборка.ХранимыйФайл) = Тип("ХранилищеЗначения") Тогда
			Картинка = Выборка.ХранимыйФайл.Получить();
		Иначе
			Картинка = Неопределено;
		КонецЕсли;
		
		Расширение = Выборка.Расширение;
		Тома       = Выборка.Ссылка.Том;
			
		Если Найти(СтрокаРасширений, Расширение) = 0 или (Картинка = Неопределено и Тома.Пустая()) Тогда Продолжить; КонецЕсли;
				
		СтруктураПолей = Новый Структура;
		СтруктураПолей.Вставить("GUID", 		ИдФото);
		СтруктураПолей.Вставить("FileName", 	ВРЕГ(ИдФото)+ ".png");
		СтруктураПолей.Вставить("Description",  Выборка.Описание);
		ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
		
		СтрокаТаб = ТабКартинок.Добавить();
		СтрокаТаб.Ссылка	    = Выборка.Ссылка;
		СтрокаТаб.Идентификатор = Выборка.Ссылка.УникальныйИдентификатор();
		
	КонецЦикла;
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
	
КонецПроцедуры // ВыгрузитьИзображения()

&НаКлиенте
Процедура СформироватьАрхивСКартинками(ПолноеИмяАрхиваКартинок)
	
	Если Не Объект.флВыгружатьКартинки Тогда		
		Возврат;
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда			
		Если ТабКартинок.Количество() > 0 Тогда
					
			Если ПодключитьРасширениеРаботыСФайлами()Тогда				
				ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();			
				КаталогКартинок = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;			
				Если КаталогКартинок = Неопределено Тогда
					КаталогКартинок = КаталогВременныхФайловКлиент + "APGoodsPictures";
				КонецЕсли;                                                                                                             			
			Иначе                                                                                                                      			
				Возврат;
			КонецЕсли;
			
			апСерверМодуль.ПроверитьСуществованиеКаталога(КаталогКартинок, Ложь, Истина);
			
			//СтрокаАрхива = "";
			
			ИмяФайлаАрхиваКартинок = "GoodsPhotosFromCDB.zip";
			
			ПолноеИмяАрхиваКартинок = КаталогКартинок + ИмяФайлаАрхиваКартинок;
			
			АрхивКартинок = Новый ЗаписьZipФайла(ПолноеИмяАрхиваКартинок, , , МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный);		
			
			Для Каждого ЭлементТаб Из ТабКартинок Цикл
				
				Файл 	   = ЭлементТаб.Ссылка; 
				ИдКартинки = ЭлементТаб.Идентификатор; 
				
				ИмяФайлаКартинки   = ВРег(ИдКартинки) + ".png";
							
				ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(Файл, УникальныйИдентификатор);	
				
				ПолноеИмяФайла = КаталогКартинок + ДанныеФайла.ОтносительныйПуть + ИмяФайлаКартинки; 
				
				апКлиент.ОткрытьФайл(ДанныеФайла, Ложь, ИмяФайлаКартинки, Ложь);
				
				АрхивКартинок.Добавить(ПолноеИмяФайла);
							
				//СтрокаАрхива = СтрокаАрхива + ИмяФайлаКартинки + Символы.Таб + ПолноеИмяФайла + Символы.Таб;			
									
			КонецЦикла;	
			
			// Убираем последний табулятор
			//СтрокаАрхива = Лев(СтрокаАрхива, СтрДлина(СтрокаАрхива)-1);	
			
			АрхивКартинок.Записать();
			
			//КПКОбъектServer.АрхУпаковать(ПолныйПутьКАрхиву, СтрокаАрхива);	
			
			//КПКОбъектZip.Pack(ПолныйПутьКАрхиву, СтрокаАрхива);			
			
			// Проверяем существование созданного файла
			//НужныйФайлАрхиваНаДиске = Новый Файл(ПолныйПутьКАрхиву);
			//Если НужныйФайлАрхиваНаДиске.Существует() Тогда
			//	СтрАрхивКартинок = Т_+ "GoodsPhotosFromCDB.zip" + Символы.Таб + ПолныйПутьКАрхиву
			//КонецЕсли; 
			
		КонецЕсли;     	
			
		//Возврат ПолноеИмяФайла;
	#Иначе
		Возврат;	
	#КонецЕсли 
КонецПроцедуры //СформироватьАрхивСКартинками

&НаСервере
Функция ПолучитьЕдиницуИзмерения(Номенклатура, ЕдиницаИзмерения)
	
	Выборка = Справочники.апЕдиницыИзмерения.Выбрать(,,Новый Структура("Номенклатура", Номенклатура));
	
	ЕстьЭлемент = Ложь;    	
	Пока Выборка.Следующий() Цикл		
		Если Выборка.ПометкаУдаления или Выборка.НеВыгружать Тогда Продолжить; КонецЕсли;		
		Если Выборка.ЕдиницаИзмерения = ЕдиницаИзмерения Тогда 			
			ЕстьЭлемент = Истина;   			
			Возврат Выборка.Ссылка; 			
		КонецЕсли; 		
	КонецЦикла;
	
	Если Не ЕстьЭлемент Тогда		
		НовЭлемент = Справочники.апЕдиницыИзмерения.СоздатьЭлемент();
		НовЭлемент.Номенклатура = Номенклатура;
		НовЭлемент.ЕдиницаИзмерения = ЕдиницаИзмерения;
		НовЭлемент.Наименование     = ЕдиницаИзмерения.Наименование;		
		НовЭлемент.Записать(); 	
		ОповеститьОСобытии("Записан новый элемент в служебный справочник ""Единицы измерения"" для элемента: " + Строка(ЕдиницаИзмерения), СтатусСообщения.Информация, Истина, НовЭлемент.Ссылка);				
		Возврат НовЭлемент.Ссылка;		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьХарактеристикуСлужебную(Номенклатура, Характеристика)
	
	Выборка = Справочники.апХарактеристикиНоменклатуры.Выбрать(,,Новый Структура("Номенклатура", Номенклатура));
	
	ЕстьЭлемент = Ложь;    	
	Пока Выборка.Следующий() Цикл		
		Если Выборка.ПометкаУдаления или Выборка.НеВыгружать Тогда Продолжить; КонецЕсли;		
		Если Выборка.Характеристика = Характеристика Тогда 			
			ЕстьЭлемент = Истина;   			
			Возврат Выборка.Ссылка; 			
		КонецЕсли; 		
	КонецЦикла;
	
	Если Не ЕстьЭлемент Тогда		
		НовЭлемент = Справочники.апХарактеристикиНоменклатуры.СоздатьЭлемент();
		НовЭлемент.Номенклатура 	= Номенклатура;
		НовЭлемент.Характеристика   = Характеристика;
		НовЭлемент.Наименование     = Характеристика.Наименование;		
		НовЭлемент.Записать(); 	
		ОповеститьОСобытии("Записан новый элемент в служебный справочник ""Характеристики номенклатуры"" для элемента: " + Строка(Характеристика), СтатусСообщения.Информация, Истина, НовЭлемент.Ссылка);				
		Возврат НовЭлемент.Ссылка;		
	КонецЕсли;
	
КонецФункции //ПолучитьХарактеристикуСлужебную

&НаСервере
Функция ПолучитьСлужебныйЭлементСправочникаСоглашения(Партнер, Соглашение)
	
	Если Не ЗначениеЗаполнено(Соглашение) Тогда
		Возврат Соглашение;		
	КонецЕсли;
	
	Выборка = Справочники.апСоглашенияСКлиентами.Выбрать(,,Новый Структура("Партнер", Партнер));
	
	ЕстьЭлемент = Ложь; 	
	Пока Выборка.Следующий() Цикл   		
		Если Выборка.ПометкаУдаления или Выборка.НеВыгружать Тогда Продолжить; КонецЕсли;		
		Если Выборка.Соглашение = Соглашение Тогда 			
			ЕстьЭлемент = Истина;      			
			Возврат Выборка.Ссылка;   			
		КонецЕсли;  		
	КонецЦикла;
	
	Если Не ЕстьЭлемент Тогда		
		НовЭлемент = Справочники.апСоглашенияСКлиентами.СоздатьЭлемент();
		НовЭлемент.Наименование = Соглашение.Наименование;
		НовЭлемент.Партнер 		= Партнер;
		НовЭлемент.Соглашение 	= Соглашение;		
		НовЭлемент.Записать(); 		
		ОповеститьОСобытии("Записан новый элемент в служебный справочник ""Соглашения с клиентами"" для элемента: " + Строка(Соглашение), СтатусСообщения.Информация, Истина, НовЭлемент.Ссылка);		
		Возврат НовЭлемент.Ссылка;		
	КонецЕсли;
	
КонецФункции //ПолучитьСлужебныйЭлементСправочникаСоглашения

&НаСервере
Процедура ВыгрузитьЕдиницыИзмерения()
	
	//Первый запрос - выборка из подчиненного для номенклатуры справочника "Упаковки номенклатуры"
	//Второй запрос - выборка из справочника "Наборы упаковок"
	//Третий запрос - единица измерения, указанная в спр. "Номенклатура" с коэффициентом 1
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Упаковки.ЕдИзм,
	|	Упаковки.Коэффициент,
	|	Упаковки.Вес,
	|	Упаковки.Номенклатура,
	|	Упаковки.Ссылка,
	|	Упаковки.ВидЗапроса
	|ПОМЕСТИТЬ Упаковки
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		УпаковкиНоменклатуры.ЕдиницаИзмерения.Ссылка КАК ЕдИзм,
	|		УпаковкиНоменклатуры.Коэффициент КАК Коэффициент,
	|		УпаковкиНоменклатуры.Вес КАК Вес,
	|		УпаковкиНоменклатуры.Владелец.Ссылка КАК Номенклатура,
	|		УпаковкиНоменклатуры.Ссылка КАК Ссылка,
	|		1 КАК ВидЗапроса
	|	ИЗ
	|		Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|	ГДЕ
	|		УпаковкиНоменклатуры.Владелец.ЭтоГруппа = ЛОЖЬ
	|		И УпаковкиНоменклатуры.Владелец.НаборУпаковок = &НаборУпаковок
	|		И УпаковкиНоменклатуры.Владелец.Ссылка В(&Ассортимент)
	|		И УпаковкиНоменклатуры.Владелец.ВидНоменклатуры <> &ВидНоменклатуры
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		УпаковкиНоменклатуры.ЕдиницаИзмерения,
	|		УпаковкиНоменклатуры.Коэффициент,
	|		УпаковкиНоменклатуры.Вес,
	|		Наборы.Номенклатура,
	|		УпаковкиНоменклатуры.Ссылка,
	|		2
	|	ИЗ
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			НаборыУпаковок.Ссылка КАК Набор,
	|			Номенклатура.Ссылка КАК Номенклатура
	|		ИЗ
	|			Справочник.Номенклатура КАК Номенклатура
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаборыУпаковок КАК НаборыУпаковок
	|				ПО Номенклатура.НаборУпаковок = НаборыУпаковок.Ссылка
	|		ГДЕ
	|			Номенклатура.ЭтоГруппа = ЛОЖЬ
	|			И Номенклатура.ВидНоменклатуры <> &ВидНоменклатуры
	|			И Номенклатура.Ссылка В(&Ассортимент)
	|			И Номенклатура.НаборУпаковок <> &НаборУпаковок) КАК Наборы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|			ПО Наборы.Набор.Ссылка = УпаковкиНоменклатуры.Владелец.Ссылка
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Номенклатура.ЕдиницаИзмерения.Ссылка,
	|		1,
	|		Номенклатура.Вес,
	|		Номенклатура.Ссылка,
	|		NULL,
	|		3
	|	ИЗ
	|		Справочник.Номенклатура КАК Номенклатура
	|	ГДЕ
	|		Номенклатура.ЭтоГруппа = ЛОЖЬ
	|		И Номенклатура.Ссылка В(&Ассортимент)
	|		И Номенклатура.ВидНоменклатуры <> &ВидНоменклатуры) КАК Упаковки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Упаковки.ЕдИзм КАК ЕдИзм,
	|	Упаковки.Коэффициент КАК Коэффициент,
	|	Упаковки.Вес,
	|	Упаковки.Номенклатура КАК Номенклатура,
	|	Упаковки.Ссылка КАК Ссылка,
	|	Упаковки.ВидЗапроса КАК ВидЗапроса,
	|	апЕдиницыИзмерения.Ссылка КАК ЕдиницаАП
	|ИЗ
	|	Упаковки КАК Упаковки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.апЕдиницыИзмерения КАК апЕдиницыИзмерения
	|		ПО Упаковки.ЕдИзм = апЕдиницыИзмерения.ЕдиницаИзмерения
	|			И Упаковки.Номенклатура = апЕдиницыИзмерения.Номенклатура
	|ГДЕ
	|	(НЕ Упаковки.ЕдИзм ЕСТЬ NULL)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЕдИзм,
	|	Коэффициент,
	|	ВидЗапроса
	|ИТОГИ
	|	МИНИМУМ(Ссылка),
	|	МИНИМУМ(ЕдиницаАП)
	|ПО
	|	Номенклатура,
	|	ЕдИзм";	
					
	Запрос.УстановитьПараметр("Ассортимент", 	 Ассортимент);
	Запрос.УстановитьПараметр("ВидНоменклатуры", Перечисления.ТипыНоменклатуры.Услуга);
	Запрос.УстановитьПараметр("НаборУпаковок",   Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры);
		
	ВыборкаНоменклатура = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
	    ИдСпр = "80452c60-b442-4da9-a048-42f63270ca14";
	
		ДобавитьПоле("GUID", ИдСпр);
		
		УстановитьПризнакОчисткиСправочника(ИдСпр);
		
		ДобавитьПоле("Comment", "Справочник.ЕдиницыИзмерения");

		ДобавитьПустойЭлементВXML("GROUPS");
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
		Пока ВыборкаНоменклатура.Следующий() Цикл
			
			ТекНоменклатура = ВыборкаНоменклатура.Номенклатура;
			
			ВыборкаЕдиниц = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаЕдиниц.Следующий() Цикл
				
				Если ВыборкаЕдиниц.ЕдиницаАП = Null Тогда				
					ЕдиницаИзмерения = Справочники.апЕдиницыИзмерения.СоздатьЭлемент();
					ЕдиницаИзмерения.Номенклатура 	  = ТекНоменклатура;
					ЕдиницаИзмерения.ЕдиницаИзмерения = ВыборкаЕдиниц.ЕдИзм;
					ЕдиницаИзмерения.Наименование     = ВыборкаЕдиниц.ЕдИзм.Наименование;
					ЕдиницаИзмерения.Упаковка    	  = ВыборкаЕдиниц.Ссылка;
					ЕдиницаИзмерения.Записать(); 				
				ИначеЕсли Не ЗначениеЗаполнено(ВыборкаЕдиниц.ЕдиницаАП.Упаковка) Тогда
					ЕдиницаОбъект = ВыборкаЕдиниц.ЕдиницаАП.Ссылка.ПолучитьОбъект();
					ЕдиницаОбъект.Упаковка = ВыборкаЕдиниц.Ссылка;
					ЕдиницаОбъект.Записать();
					ЕдиницаИзмерения = ЕдиницаОбъект.Ссылка;				
				Иначе					
					ЕдиницаИзмерения = ВыборкаЕдиниц.ЕдиницаАП;				
				КонецЕсли;				
				
				#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
				#КонецЕсли
				
				ВыборкаДетали = ВыборкаЕдиниц.Выбрать();
				
				Если ВыборкаДетали.Следующий() Тогда    					
					СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(ЕдиницаИзмерения.Ссылка);					
					СтруктураПолей.Вставить("A02", 		 ВыборкаДетали.Коэффициент);
					СтруктураПолей.Вставить("A03", 		 ТекНоменклатура);   				
					СтруктураПолей.Вставить("A04", 		 ВыборкаДетали.Вес);
					ЗаписатьЭлементВДокументОбмена(СтруктураПолей);	 					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		 			
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
		
КонецПроцедуры //ВыгрузитьЕдиницыИзмерения

&НаСервере
Процедура ВыгрузитьИсториюПродаж()
	
	ГлубинаИстории = Константы.апГлубинаИсторииПродаж.Получить();
	КолИнтервалов  = Константы.апКоличествоИнтерваловИстории.Получить();
	Периодичность  = Константы.апПериодичностьИсторииПродаж.Получить();
	
	Если ГлубинаИстории = 0 Тогда
		Возврат;
	КонецЕсли; 	
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПродажиОбороты.Контрагент КАК Контрагент,
	               |	ПродажиОбороты.Номенклатура КАК Номенклатура,
	               |	ПродажиОбороты.КоличествоОборот КАК КоличествоОборот
	               |ИЗ
	               |	РегистрНакопления.Продажи.Обороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			,
	               |			Менеджер = &Менеджер
	               |				И Подразделение = &Подразделение) КАК ПродажиОбороты
	               |ИТОГИ
	               |	СУММА(КоличествоОборот)
	               |ПО
	               |	Контрагент,
	               |	Номенклатура";
	
	Запрос = Новый Запрос(ТекстЗапроса);  
	
	КонПериода = ТекущаяДата();
	
	//Если Периодичность = Перечисления.Периодичность.День Тогда		
		НачПериода = КонПериода - ГлубинаИстории*86400;		
	//ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
	//	НачПериода = КонПериода - ГлубинаИстории*7*86400;				
	//ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда		
	//	НачПериода = КонПериода - ГлубинаИстории*10*86400;		
	//ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
	//	НачПериода = ДобавитьМесяц(КонПериода, -ГлубинаИстории);		
	//ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
	//	НачПериода = ДобавитьМесяц(КонПериода, -ГлубинаИстории*3);
	//ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
	//	НачПериода = ДобавитьМесяц(КонПериода, -ГлубинаИстории*6);
	//ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
	//	НачПериода = ДобавитьМесяц(КонПериода, -ГлубинаИстории*12);	
	//Иначе
	//	НачПериода = КонПериода - ГлубинаИстории*86400;
	//КонецЕсли;		
	
	ДлинаИнтервала = Окр(ГлубинаИстории/?(КолИнтервалов = 0, 1, КолИнтервалов));
	
	Дата1 = НачПериода;
	
	
	Запрос.УстановитьПараметр("Менеджер", ВыбАгент.Менеджер);
	Запрос.УстановитьПараметр("Ассортимент",     Ассортимент);		
	Запрос.УстановитьПараметр("НачПериода",		 НачПериода);
	Запрос.УстановитьПараметр("КонПериода",		 КонПериода);
	Запрос.УстановитьПараметр("Подразделение",	 ВыбАгент.Менеджер.Подразделение);
	
	Текст = ДокОбмена;
	
	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Ref_Sales" + Т_ + "Struct:TPointID,GoodsID,Sales");
	
	ВыборкаКлиенты = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,);
	
	Пока ВыборкаКлиенты.Следующий() Цикл //цикл перебора торговых точек
		
		ИдКлиента 	= СокрП(ПолучитьИдентификатор(ВыборкаКлиенты.Контрагент));
		ИдТоргТочки	= ИдКлиента;
		
		
		ВыборкаТовары = ВыборкаКлиенты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, );
		Пока ВыборкаТовары.Следующий() Цикл //цикл перебора истории продаж
			
			Стр = ИдТоргТочки + Т_ + СокрП(ПолучитьИдентификатор(ВыборкаТовары.Номенклатура)) + Т_;
			ИдТоргТочки = "*";
			
			Стр = Стр + "0 ";
			
			Текст.ДобавитьСтроку(СокрП(Стр));
			
		КонецЦикла;
		
	КонецЦикла;
	
	Текст.ДобавитьСтроку("<End>" + Т_ + "Ref_Sales");

	
КонецПроцедуры //ВыгрузитьИсториюПродаж

&НаСервере
// Процедура выгрузки документов Реализация товаров и услуг в МУ
//
Процедура ВыгрузитьПродажи()

	Текст = ДокОбмена;
	
	ДопРеквизиты = 	",_DOSTAVKA,_ADRES,_DOSTAVLEN";
	
	Текст.ДобавитьСтроку("<Begin>" +Т_+ "Doc_Sale" + Т_
		+ "Struct:DocID,DocState,DocFlags,TimeCrt,DocNumber,FirmID,ClientID,=TPointID,DocSum,=DocVAT,=Discount,Comment,=PaymntType,=PriceType,=PayDate,MDocID,=SFNumber,=UseVAT"
		+ ДопРеквизиты);
		
		
	//Описание структуры вложенных тэгов Lines (табличная часть документа):
	Текст.ДобавитьСтроку("<Sub>" +Т_+ "Lines" +Т_+ "Struct:GoodsID,Amount,Price,Sum,=VAT,=Weight,=Discount");		

	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходнаяНакладнаяЗапасы.Ссылка КАК Ссылка,
	|	РасходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
	|	РасходнаяНакладнаяЗапасы.Количество КАК Количество,
	|	РасходнаяНакладнаяЗапасы.ПроцентСкидки КАК ПроцентСкидки,
	|	РасходнаяНакладнаяЗапасы.Цена КАК Цена,
	|	РасходнаяНакладнаяЗапасы.Сумма КАК Сумма
	|ИЗ
	|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
	|ГДЕ
	|	РасходнаяНакладнаяЗапасы.Ссылка.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И РасходнаяНакладнаяЗапасы.Ссылка.Менеджер = &Менеджер
	|ИТОГИ
	|	СУММА(Количество),
	|	МАКСИМУМ(ПроцентСкидки),
	|	МАКСИМУМ(Цена),
	|	СУММА(Сумма)
	|ПО
	|	Ссылка,
	|	Номенклатура";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ТекущаяДата() - Константы.апИнтервалВыгрузкиПеремещений.Получить()*24*60*60));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Менеджер", ВыбАгент.Менеджер);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		
		Ссылка = Выборка.Ссылка;
		
		ИдДок 			= ПолучитьИдентификатор(Ссылка);
		СостДок 		= Т_+ Строка(ВернутьСостояниеДок(Ссылка));
		СостДокВЦБД 	= Т_+ Строка(ВернутьСостояниеДок(Ссылка) + 8 + 512); //Документ будет запрещен для редактирования и не изменяет остатки
		ДатаВремяДок	= Т_+ ДатаВФорматеXML(Ссылка.Дата); // + " " + СтрЗаменить(Док.ПолучитьВремя(),":","-");
		НомерДок		= Т_+ СокрЛП(Ссылка.Номер);
		ИдФирмы			= Т_+ ПолучитьИдентификатор(Ссылка.Организация);
		ИдКлиента		= Т_+ ПолучитьИдентификатор(Ссылка.Контрагент);
		ИдТоргТочки		= ИдКлиента;
		СуммаДок		= Т_+ СтрЗаменить(Формат(Ссылка.СуммаДокумента, "ЧДЦ=2; ЧГ="), ",",".");
		СуммаНДС		= Т_+ "0";
		Скидка			= Т_+ "";
		Комментарий		= Т_+ СокрЛП(Ссылка.Комментарий);
		ВидОплаты		= Т_+ "1";
		ТипЦен			= Т_+ "";
		ДатаОплаты		= Т_+ "";
		ИдДокЗв			= Т_+ "";
		НомерСФ			= Т_+ "";
		УчетНДС			= Т_+ "0";
		
		
		// (18+3)
		ДопРеквизиты = Т_+ "" + Т_+ "" +Т_+ "1";
		
		Текст.ДобавитьСтроку(ИдДок + СостДок + СостДокВЦБД + ДатаВремяДок
			+ НомерДок + ИдФирмы + ИдКлиента + ИдТоргТочки + СуммаДок + СуммаНДС
			+ Скидка + Комментарий + ВидОплаты + ТипЦен + ДатаОплаты + ИдДокЗв 
			+ НомерСФ + УчетНДС
			+ ДопРеквизиты);
		
		// выборка строк документа....
		
		Текст.ДобавитьСтроку("<Begin>" + Т_ + "Lines");
		
		ВыборкаСтрокиДокумента = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСтрокиДокумента.Следующий() Цикл
			ИдТовара = ПолучитьИдентификатор(ВыборкаСтрокиДокумента.Номенклатура);
			Кол		 = Формат(ВыборкаСтрокиДокумента.Количество, "ЧРД=.; ЧГ=");
			Цена 	 = Формат(ВыборкаСтрокиДокумента.Цена, "ЧРД=.; ЧГ=");
			Сумма	 = Формат(ВыборкаСтрокиДокумента.Сумма, "ЧРД=.; ЧГ=");
			НДС 	 = "0";
			
			//"Struct:GoodsID,Amount,Price,Sum,=VAT"
			Текст.ДобавитьСтроку(ИдТовара  + Т_ + Кол + Т_ + Цена + Т_ + Сумма + Т_ + НДС+ Т_ +""+ Т_ +Формат(-1*ВыборкаСтрокиДокумента.ПроцентСкидки, "ЧРД=.; ЧГ="));
			
		КонецЦикла;
		
		Текст.ДобавитьСтроку("<End>" + Т_ + "Lines");
		
	КонецЦикла;
	
	
	Текст.ДобавитьСтроку("<End>" + Т_ + "Doc_Sale");
	
КонецПроцедуры

&НаСервере
// Выгрузка дополнительной информации
// В данной процедуре выгружаются следующие справочники:
// 		1. Типы цен
//      2. Склады
//      3. Категории документов
//      4. Категории номенклатуры
//      5. Статусы контрагентов
//      6. Категории партнеров
//      7. Типы торговых точек
//      8. и другие справочники
//
Процедура ВыгрузитьДополнительнуюИнформацию(ТолькоНужныеСправочники = Ложь, ВыгрузитьСправочникиДляЗаданий = Ложь, ВыгрузитьСправочникиДляПосещений = Ложь)
	
	// Выгрузка видов цен
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
		ИдСпр = "00f1ffe7-e16e-4ff4-9ef1-b8d0c54bdf59";
		
		ДобавитьПоле("GUID", ИдСпр);
		
		// Передаем команду на очистку справочника перед загрузкой
		//ДобавитьПоле("KILLALL", "1");
		УстановитьПризнакОчисткиСправочника(ИдСпр);
		
		ДобавитьПоле("Comment", "Справочник.ВидыЦен");
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
			Сч = 0;
			Для Каждого ВидЦены Из МассивВидовЦен Цикл				
				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(ВидЦены);		
				СтруктураПолей.Вставить("Code", Сч);
				СтруктураПолей.Вставить("A02",  ВидЦены.ЦенаВключаетНДС);
				ЗаписатьЭлементВДокументОбмена(СтруктураПолей);		
				Сч = Сч + 1;
			КонецЦикла;
			
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
	//////////////////////////////////////////////////
	
	// Выгрузка складов		
	
	ВыгружаемыеСклады = Новый СписокЗначений;	
	ВыгружаемыеСклады.ЗагрузитьЗначения(МассивСкладов);
		
	// Добавляем также в список выгружаемых складов мобильный склад, если он выбран
	Если ЗначениеЗаполнено(МобильныйСклад) Тогда
		Если ВыгружаемыеСклады.НайтиПоЗначению(МобильныйСклад) = Неопределено Тогда
			ВыгружаемыеСклады.Добавить(МобильныйСклад);
		КонецЕсли;
	КонецЕсли;
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
	ИдСпр = "2516ffce-f46f-4326-be00-438ef0871d30";
	
	ДобавитьПоле("GUID", ИдСпр);
		
	// Передаем команду на очистку справочника перед загрузкой
	//ДобавитьПоле("KILLALL", "1");
	УстановитьПризнакОчисткиСправочника(ИдСпр);
	
	ДобавитьПоле("Comment", "Справочник.Склады");
	 
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
		Сч = 0;
		Для Каждого Склад Из МассивСкладов Цикл			
			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Склад);
			СтруктураПолей.Вставить("Code", Сч);
			ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
			Сч = Сч + 1;
		КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента();     //CATALOG
	
	//////////////////////////////////////////////////
	
    // Выгрузка категорий документов	
    Запрос = Новый Запрос(
    "ВЫБРАТЬ
    |	КатегорииДокументов.Ссылка,
    |	КатегорииДокументов.Код,
    |	КатегорииДокументов.Наименование,
    |	КатегорииДокументов.Цвет,
    |	КатегорииДокументов.ВидыДокументов
    |ИЗ
    |	Справочник.апКатегорииДокументов КАК КатегорииДокументов
    |ГДЕ
    |	(НЕ КатегорииДокументов.ПометкаУдаления)");
    
    Выборка = Запрос.Выполнить().Выбрать();
   	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
	ДобавитьПоле("GUID", "F997F837-8721-4896-8FE8-3497C6C38206");
	
	// Передаем команду на очистку справочника перед загрузкой
	ДобавитьПоле("KILLALL", "1"); 
	
	ДобавитьПоле("Comment", "Справочник.КатегорииДокументов");	
	 
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
		Пока Выборка.Следующий() Цикл		
			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Выборка);
			СтруктураПолей.Вставить("A02", апКлиентСервер.ПреобразоватьЦветВRGBСтроку(Выборка.Цвет.Получить()));
			СтруктураПолей.Вставить("A03", Выборка.ВидыДокументов);
			ЗаписатьЭлементВДокументОбмена(СтруктураПолей);		
		КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента();     //CATALOG
    //////////////////////////////////////////////////  
	
    // Выгрузка статусов партнеров	
    Запрос = Новый Запрос(
    "ВЫБРАТЬ
    |	апСтатусыПартнеров.Ссылка,
    |	апСтатусыПартнеров.Наименование,
    |	апСтатусыПартнеров.Предупреждение,
    |	апСтатусыПартнеров.Цвет
    |ИЗ
    |	Справочник.апСтатусыПартнеров КАК апСтатусыПартнеров");
    
    Выборка = Запрос.Выполнить().Выбрать();
    
    ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
    
    ДобавитьПоле("GUID", "74046d94-b25d-4f3a-b553-27b7fdd3c60c");
   	
	// Передаем команду на очистку справочника перед загрузкой
	ДобавитьПоле("KILLALL", "1"); 
	
	ДобавитьПоле("Comment", "Справочник.СтатусыПартнеров");	
	 
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
		Пока Выборка.Следующий() Цикл		
			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Выборка);
			СтруктураПолей.Вставить("A02", Выборка.Предупреждение);
			СтруктураПолей.Вставить("A03", апКлиентСервер.ПреобразоватьЦветВRGBСтроку(Выборка.Цвет.Получить()));
			ЗаписатьЭлементВДокументОбмена(СтруктураПолей);		
		КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента();     //CATALOG
 
    //////////////////////////////////////////////////
	
	// Выгрузка категорий партнеров
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	апКатегорииПартнеров.Ссылка,
	|	апКатегорииПартнеров.ПометкаУдаления,
	|	апКатегорииПартнеров.Наименование,
	|	апКатегорииПартнеров.Комментарий
	|ИЗ
	|	Справочник.апКатегорииПартнеров КАК апКатегорииПартнеров");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
		ДобавитьПоле("GUID", "C75131A9-F98E-4443-B790-3ADA6137440B");
		
		ДобавитьПоле("Comment", "Справочник.КатегорииПартнеров");
		 		
		// Передаем команду на очистку справочника перед загрузкой
		ДобавитьПоле("KILLALL", "1"); 
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
		Пока Выборка.Следующий() Цикл
			
			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Выборка);
			СтруктураПолей.Вставить("A01", Выборка.Комментарий);
			ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
			
		КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента();     //CATALOG
	 	
	//////////////////////////////////////////////////
	Если Не ТолькоНужныеСправочники Или ВыгрузитьСправочникиДляПосещений Тогда
	
		// Выгрузка результатов посещений
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	апРезультатыПосещений.Ссылка,
		|	апРезультатыПосещений.ПометкаУдаления,
		|	апРезультатыПосещений.Наименование
		|ИЗ
		|	Справочник.апРезультатыПосещений КАК апРезультатыПосещений");
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ВыгрузитьПростойСправочник("FFD68F37-4BDD-4692-8AB2-A22964F602B1", Выборка, "РезультатыПосещений");

		//////////////////////////////////////////////////
		
		// Выгрузка Вопросов анкеты
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	апВопросыАнкеты.Ссылка,
		|	апВопросыАнкеты.ПометкаУдаления,
		|	апВопросыАнкеты.Наименование,
		|	апВопросыАнкеты.Обязательный КАК Обязательный
		|ИЗ
		|	Справочник.апВопросыАнкеты КАК апВопросыАнкеты
		|ГДЕ
		|	апВопросыАнкеты.Выгружать = ИСТИНА");
		
		Выборка = Запрос.Выполнить().Выбрать();

		ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
		
		ИдСпр = "D2015F3B-2F65-46F7-A40D-2867FB75D930";
		
		ДобавитьПоле("GUID", ИдСпр);
		
		УстановитьПризнакОчисткиСправочника(ИдСпр);

		ДобавитьПоле("Comment", "Справочник.ВопросыАнкеты");
		 		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
			Пока Выборка.Следующий() Цикл 				
				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Выборка);
				СтруктураПолей.Вставить("A01", Выборка.Обязательный);
				ЗаписатьЭлементВДокументОбмена(СтруктураПолей);				
			КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
		
		//////////////////////////////////////////////////
		
		// Выгрузка Ответов анкеты
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	апОтветыАнкеты.Ссылка,
		|	апОтветыАнкеты.ПометкаУдаления,
		|	апОтветыАнкеты.Наименование,
		|	апОтветыАнкеты.Владелец.Ссылка КАК Вопрос
		|ИЗ
		|	Справочник.апОтветыАнкеты КАК апОтветыАнкеты");
		
		ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
		
		ИдСпр = "F3FEF961-294A-48E2-8A72-BFC950C4466B";
		
		ДобавитьПоле("GUID", ИдСпр);
		
		УстановитьПризнакОчисткиСправочника(ИдСпр);
		
		ДобавитьПоле("Comment", "Справочник.ОтветыАнкеты");
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
			Пока Выборка.Следующий() Цикл 				
				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Выборка);
				СтруктураПолей.Вставить("A01", Выборка.Вопрос);
				ЗаписатьЭлементВДокументОбмена(СтруктураПолей);				
			КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
	КонецЕсли; //Если Не ТолькоНужныеСправочники Или ВыгрузитьСправочникиДляПосещений Тогда

	//////////////////////////////////////////////////
	Если Не ТолькоНужныеСправочники Тогда    
	    // Выгрузка запросов
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Запросы.Наименование,
		|	Запросы.Код,
		|	Запросы.Ссылка	
		|ИЗ
		|	Справочник.апЗапросы КАК Запросы
		|ГДЕ
		|	Запросы.ПометкаУдаления = ЛОЖЬ");
			
		ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
		
		ИдСпр = "CC458719-5078-4DC8-9A0C-FA19E3904F39";
		
		ДобавитьПоле("GUID", ИдСпр);
		
		// Передаем команду на очистку запросов перед загрузкой
		//Если Объект.флОчищатьСправочникиПередЗагрузкой Тогда
		//	ДобавитьПоле("KILLALL", "1");                	
		//КонецЕсли;	
		
		ДобавитьПоле("Comment", "Справочник.Запросы");

		Выборка = Запрос.Выполнить().Выбрать();
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
			Пока Выборка.Следующий() Цикл 				
				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Выборка);
				СтруктураПолей.Вставить("Code", Выборка.Код);
				ЗаписатьЭлементВДокументОбмена(СтруктураПолей);				
			КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG	
	
		////выгрузка html-отчетов
		//Запрос = Новый Запрос(
		//"ВЫБРАТЬ
		//|	апОтчетыДляМобильныхУстройств.Ссылка КАК Ссылка,
		//|	апОтчетыДляМобильныхУстройств.Наименование КАК Наименование,
		//|	апОтчетыДляМобильныхУстройств.ИмяФайла
		//|ИЗ
		//|	Справочник.апОтчетыДляМобильныхУстройств КАК апОтчетыДляМобильныхУстройств
		//|ГДЕ
		//|	апОтчетыДляМобильныхУстройств.ПометкаУдаления = ЛОЖЬ");
		//
		//ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
		//
		//ИдСпр = "B3DFD675-23F8-45ED-86C2-8981F549FDB7";
		//
		//ДобавитьПоле("GUID", ИдСпр);
		//
		//ДобавитьПоле("Comment", "Справочник.Отчеты");
		//
		//УстановитьПризнакОчисткиСправочника(ИдСпр);		

		//Результат = Запрос.Выполнить();
		//
		//Выборка = Результат.Выбрать();
		//
		//ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		//
		//	Пока Выборка.Следующий() Цикл 				
		//		
		//		СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Выборка.Ссылка);
		//		
		//		СтруктураПолей.Вставить("A01", Выборка.ИмяФайла);
		//					
		//		ЗаписатьЭлементВДокументОбмена(СтруктураПолей, Ложь);
		//										
		//		//Заполняем табличные части справочника
		//		ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
		//		
		//			//Заполняем табличную часть параметров
		//			ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
		//			
		//			ДобавитьПоле("GUID", "1242BAC5-4BC6-4B29-8B4F-78F87E49F4EB");
		//			
		//			ДобавитьПоле("Comment", "Табличная часть 'Параметры'");
		//			
		//			Для Каждого ТекПараметр Из Выборка.Ссылка.Параметры Цикл
		//				//преобразует тип параметра в определенное строковое значение для МУ
		//				Если ТекПараметр.ТипПараметра = Перечисления.апТипыПараметровОтчета.СправочникОрганизации Тогда
		//					ТипПараметра = "СправочникСсылка.Организации";
		//				ИначеЕсли ТекПараметр.ТипПараметра = Перечисления.апТипыПараметровОтчета.СправочникПартнеры Тогда
		//					ТипПараметра = "СправочникСсылка.Контрагенты";
		//				ИначеЕсли ТекПараметр.ТипПараметра = Перечисления.апТипыПараметровОтчета.СправочникКонтрагенты Тогда
		//					ТипПараметра = "СправочникСсылка.ТорговыеТочки";
		//				ИначеЕсли ТекПараметр.ТипПараметра = Перечисления.апТипыПараметровОтчета.СправочникСоглашения Тогда
		//					ТипПараметра = "СправочникСсылка.Договоры";
		//				ИначеЕсли ТекПараметр.ТипПараметра = Перечисления.апТипыПараметровОтчета.СправочникНоменклатура Тогда
		//					ТипПараметра = "СправочникСсылка.Номенклатура";
		//				ИначеЕсли ТекПараметр.ТипПараметра = Перечисления.апТипыПараметровОтчета.СправочникВидыЦен Тогда
		//					ТипПараметра = "СправочникСсылка.ТипыЦен";
		//				ИначеЕсли ТекПараметр.ТипПараметра = Перечисления.апТипыПараметровОтчета.Булево Тогда
		//					ТипПараметра = "Логический";
		//				ИначеЕсли ТекПараметр.ТипПараметра = Перечисления.апТипыПараметровОтчета.Дата Тогда
		//					ТипПараметра = "ДатаВремя";
		//				ИначеЕсли ТекПараметр.ТипПараметра = Перечисления.апТипыПараметровОтчета.Число Тогда
		//					ТипПараметра = "Число";
		//				ИначеЕсли ТекПараметр.ТипПараметра = Перечисления.апТипыПараметровОтчета.Строка Тогда
		//					ТипПараметра = "Строка";
		//				Иначе
		//					ТипПараметра = "";
		//				КонецЕсли;
		//				
		//				СтруктураПолей = Новый Структура;
		//				СтруктураПолей.Вставить("GUID",   Новый УникальныйИдентификатор());
		//				СтруктураПолей.Вставить("CtlgId", Выборка.Ссылка);
		//				СтруктураПолей.Вставить("A01",    ТекПараметр.ИмяПараметра);
		//				СтруктураПолей.Вставить("A02",    ТипПараметра);
		//				СтруктураПолей.Вставить("A03",    ТекПараметр.Обязательный);
		//				ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
		//			КонецЦикла;
		//			
		//			ДокОбмена.ЗаписатьКонецЭлемента(); //TABLE
		//			
		//			ДокОбмена.ЗаписатьКонецЭлемента(); //TABLES
		//			
		//		ДокОбмена.ЗаписатьКонецЭлемента(); //ITEM
		//		
		//	КонецЦикла;
		//	
		//ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		//
		//ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG 
	
	КонецЕсли; //Если Не ТолькоНужныеСправочники Тогда
	
	// Выгрузка видов оплат	
	СписокВидовОплат  = Новый СписокЗначений;
	
	// Наличная
	СтрВидаОплаты = Новый Структура("Идентификатор, Наименование, Документы");	
	СтрВидаОплаты.Идентификатор = "4A73372B-48E3-4874-8B87-B964D5782E25";
	СтрВидаОплаты.Наименование  = "Наличная";
	СтрВидаОплаты.Документы     = "Заказ,Реализация,ПКО,РКО,Возврат,Поступление";
	
	СписокВидовОплат.Добавить(СтрВидаОплаты);
	
	// Безналичная
	СтрВидаОплаты = Новый Структура("Идентификатор, Наименование, Документы");	
	СтрВидаОплаты.Идентификатор = "7E6A8955-0B5B-4A3D-9446-ACCE667ED741";
	СтрВидаОплаты.Наименование  = "Безналичная";
	СтрВидаОплаты.Документы     = "Заказ,Реализация,Возврат,Поступление";
	
	СписокВидовОплат.Добавить(СтрВидаОплаты);
	
	// Взаимозачет
	СтрВидаОплаты = Новый Структура("Идентификатор, Наименование, Документы");	
	СтрВидаОплаты.Идентификатор = "F2CF11E4-D6CC-4986-A5A2-0A440301876C";
	СтрВидаОплаты.Наименование  = "Взаимозачет";
	СтрВидаОплаты.Документы     = "";
	
	СписокВидовОплат.Добавить(СтрВидаОплаты);
	 	
	// Платежная карта
	СтрВидаОплаты = Новый Структура("Идентификатор, Наименование, Документы");	
	СтрВидаОплаты.Идентификатор = "BD9E3958-1E52-4D37-9685-6083E249702F";
	СтрВидаОплаты.Наименование  = "Платежная карта";
	СтрВидаОплаты.Документы     = "Заказ,Реализация,Возврат,Поступление";
	
	СписокВидовОплат.Добавить(СтрВидаОплаты);
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	            	 
	ДобавитьПоле("GUID", "04977681-EBAF-4589-B6E7-93E883333DB7");
	
	ДобавитьПоле("Comment", "Справочник.ВидыОплат");
	
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	
		СтруктураПолей = Новый Структура;
		
		Для Каждого СтрокаСписка Из СписокВидовОплат Цикл
			СтрВидаОплаты = СтрокаСписка.Значение;
			СтруктураПолей.Вставить("GUID", СтрВидаОплаты.Идентификатор);
			СтруктураПолей.Вставить("Name", СтрВидаОплаты.Наименование);
			СтруктураПолей.Вставить("A01",  СтрВидаОплаты.Документы);
			ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
		КонецЦикла;
		
	ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
	
	//////////////////////////////////////////////////
	
	// Выгрузка видов оплат в разрезе организаций	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");

	ДобавитьПоле("GUID", "1362EC92-F3F9-43AF-94CD-6937CEBA0AEE");
	
	ДобавитьПоле("Comment", "Справочник.ВидыОплатОрганизаций");
	
	ДобавитьПоле("KILLALL", "1");
	
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	
	Для Каждого Организация Из МассивОрганизаций Цикл 
			
		Если Не ЗначениеЗаполнено(Организация) Тогда Продолжить; КонецЕсли;
		
		СтруктураПолей = Новый Структура;
		
		Для Каждого СтрокаСписка Из СписокВидовОплат Цикл
			СтрВидаОплаты = СтрокаСписка.Значение;
			СтруктураПолей.Вставить("GUID", Новый УникальныйИдентификатор());			
			СтруктураПолей.Вставить("A01",  Организация);
			СтруктураПолей.Вставить("A02",  СтрВидаОплаты.Идентификатор);
			ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
		КонецЦикла;
		
	КонецЦикла;
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
		
    //////////////////////////////////////////////////
	Если Не ТолькоНужныеСправочники Тогда
		// Выгрузка справочника "Печатные формы документов"		
		
		ВидыДокументов = ПолучитьВидыДокументов();
		
		МенеджерВТ = Новый МенеджерВременныхТаблиц;
		
		ЗапросВТ = Новый Запрос;	
		ЗапросВТ.МенеджерВременныхТаблиц = МенеджерВТ;
		ЗапросВТ.Текст = "ВЫБРАТЬ
		|	апПечатныеФормыДокументов.Ссылка,
		|	апПечатныеФормыДокументов.Код,
		|	апПечатныеФормыДокументов.Наименование,
		|	апПечатныеФормыДокументов.ВидДокумента,
		|	апПечатныеФормыДокументов.ЧислоКопий
		|ПОМЕСТИТЬ ПечатныеФормы
		|ИЗ
		|	Справочник.апПечатныеФормыДокументов КАК апПечатныеФормыДокументов
		|ГДЕ
		|	апПечатныеФормыДокументов.ПометкаУдаления = ЛОЖЬ
		|	И апПечатныеФормыДокументов.ЭтоГруппа = ЛОЖЬ";
		
		ЗапросВТ.Выполнить();
		
		Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ ПечатныеФормы");
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
		
		ИдСпр = "17B09C65-5B6C-40D1-8616-3A655B99DA8D";
		
		ДобавитьПоле("GUID", ИдСпр);
		
		ДобавитьПоле("Comment", "Справочник.ПечатныеФормыДокументов");	
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
			Пока Выборка.Следующий() Цикл 				
			
				ИдВидДок = ВидыДокументов.Получить(Выборка.ВидДокумента);
				
				Если ИдВидДок = Неопределено Тогда Продолжить; КонецЕсли;
				
				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Выборка);
				
				СтруктураПолей.Вставить("Code", СокрЛП(Выборка.Код));
				СтруктураПолей.Вставить("A01",  ИдВидДок);
				СтруктураПолей.Вставить("A02",  Выборка.ЧислоКопий);
				
				ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
				
			КонецЦикла;
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG		
		
		ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
		
		// Выгрузка справочника "Печатные формы организаций"
		
		ИдСпр = "C7B2883C-D872-4D19-8B32-E7CEFAACEACA";
		
		ДобавитьПоле("GUID", ИдСпр);
		
		ДобавитьПоле("KILLALL", "1");    // всегда очищаем, т.к. идентификаторы генерируются "налету"            	
		
		ДобавитьПоле("Comment", "Справочник.ПечатныеФормыОрганизаций");
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ПечатныеФормы.Ссылка КАК ПечатнаяФорма,
		|	Организации.Ссылка КАК Организация
		|ИЗ
		|	Справочник.апПечатныеФормыДокументов КАК ПечатныеФормы,
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ПометкаУдаления = ЛОЖЬ
		|	И ПечатныеФормы.ЭтоГруппа = ЛОЖЬ
		|	И ПечатныеФормы.ПометкаУдаления = ЛОЖЬ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
			Пока Выборка.Следующий() Цикл 				
				СтруктураПолей = Новый Структура;
				СтруктураПолей.Вставить("GUID", Новый УникальныйИдентификатор());
				СтруктураПолей.Вставить("A01", Выборка.Организация);
				СтруктураПолей.Вставить("A02", Выборка.ПечатнаяФорма);
				ЗаписатьЭлементВДокументОбмена(СтруктураПолей);										
			КонецЦикла;		
				
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG 
	КонецЕсли; //Если Не ТолькоНужныеСправочники Тогда
	  	 	
	//////////////////////////////////////////////////
	Если Не ТолькоНужныеСправочники Или ВыгрузитьСправочникиДляЗаданий Тогда
	
		// Выгрузка справочника "Виды задач"
		ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
		
			ИдСпр = "A00B7107-5700-4E02-97F6-C577E707E21F";
		
			ДобавитьПоле("GUID", ИдСпр);
			
			ДобавитьПоле("Comment", "Справочник.ВидыЗадач");
			
			УстановитьПризнакОчисткиСправочника(ИдСпр);
			
			// Выгрузка групп видов задач	
			ДокОбмена.ЗаписатьНачалоЭлемента("GROUPS");
			
				ДокОбмена.ЗаписатьНачалоЭлемента("GROUP");
				
					ДобавитьПоле("GUID", "BEB1F064-F717-46F7-9426-8A82B81D9A6C");
					
					ДобавитьПоле("Comment", "Элементы группировки по иерархии");
			
			        ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
					
						Запрос = Новый Запрос;
						Запрос.Текст = 
						"ВЫБРАТЬ
						|	апВидыЗадач.Ссылка
						|ИЗ
						|	Справочник.апВидыЗадач КАК апВидыЗадач
						|ГДЕ
						|	апВидыЗадач.ЭтоГруппа = ИСТИНА"; 
						
						Результат = Запрос.Выполнить();
						
						Выборка = Результат.Выбрать();
							
						Пока Выборка.Следующий() Цикл
					    	СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Выборка.Ссылка);
							СтруктураПолей.Вставить("ParId", "");
							ЗаписатьЭлементВДокументОбмена(СтруктураПолей);						
					    КонецЦикла; //Пока Выборка.Следующий() Цикл
					
					ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
				
				ДокОбмена.ЗаписатьКонецЭлемента();     //GROUP
			
			ДокОбмена.ЗаписатьКонецЭлемента(); 		   //GROUPS
			
			// Выгрузка элементов справочника
			ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
			
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	апВидыЗадач.Ссылка,
				|	апВидыЗадач.Родитель,
				|	апВидыЗадач.Наименование,
				|	апВидыЗадач.Тип
				|ИЗ
				|	Справочник.апВидыЗадач КАК апВидыЗадач
				|ГДЕ
				|	апВидыЗадач.ЭтоГруппа = ЛОЖЬ"; 
				
				Результат = Запрос.Выполнить();
				
				Выборка = Результат.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					//задачи без принадлежности к группе пропускаем
					Если Выборка.Родитель = Справочники.апВидыЗадач.ПустаяСсылка() Тогда
						Продолжить;
					КонецЕсли;
					
					ИдТипаЗадачи = "";
					
					ТипЗадания = Выборка.Тип;
					
					//задачи типа "Создать документ"
					Если ТипЗадания = Перечисления.апТипыЗадач.СоздатьДокументЗаявка Тогда
						ИдТипаЗадачи = "eaded006-5271-4497-9222-79541d23e3fa";	
					ИначеЕсли ТипЗадания = Перечисления.апТипыЗадач.СоздатьДокументМерчендайзинг Тогда
						ИдТипаЗадачи = "544b81fd-49da-453e-9b9c-eec549cbef10";
					ИначеЕсли ТипЗадания = Перечисления.апТипыЗадач.СоздатьДокументПеремещение Тогда
						ИдТипаЗадачи = "57ec9bd4-c2ec-47e0-86c1-b06211735f32";
					ИначеЕсли ТипЗадания = Перечисления.апТипыЗадач.СоздатьДокументПосещение Тогда
						ИдТипаЗадачи = "2f7826f4-2665-49fa-95e7-e7c8cc6ebf0e";
					ИначеЕсли ТипЗадания = Перечисления.апТипыЗадач.СоздатьДокументПоступление Тогда
						ИдТипаЗадачи = "79e5b0f6-b019-41fe-9214-c7a204e05974";
					ИначеЕсли ТипЗадания = Перечисления.апТипыЗадач.СоздатьДокументВозвратТоваров Тогда
						ИдТипаЗадачи = "ec84ce42-a9c3-4936-94fb-595ec1e84aef";
					ИначеЕсли ТипЗадания = Перечисления.апТипыЗадач.СоздатьДокументРеализация Тогда
						ИдТипаЗадачи = "d6176c16-130d-40d8-ad70-13a39c957927";
					ИначеЕсли ТипЗадания = Перечисления.апТипыЗадач.СоздатьДокументПКО Тогда
						ИдТипаЗадачи = "2ec90b5a-56ff-4338-aeaa-2416b8923bf8";
					ИначеЕсли ТипЗадания = Перечисления.апТипыЗадач.СоздатьДокументРКО Тогда
						ИдТипаЗадачи = "8bed83c4-4428-4206-89d1-a31790130937";
					//прочие типы задач
					ИначеЕсли ТипЗадания = Перечисления.апТипыЗадач.СделатьФотографию Тогда
						ИдТипаЗадачи = "b483e5f9-95e6-4e2d-b6b2-d5954fcc25ae";
					ИначеЕсли ТипЗадания = Перечисления.апТипыЗадач.ОбменятьсяДанными Тогда
						ИдТипаЗадачи = "061879d3-e400-4cc8-b4f9-999c3399f47c"; 
					//задачи типа "Выбрать значение из списка"
					ИначеЕсли ТипЗадания = Перечисления.апТипыЗадач.ВыбратьЗначениеИзСписка Тогда
						ИдТипаЗадачи = "fddc6586-fc43-4de2-9f8a-0f1efdce4b31";
					//задачи типа "Ввести число", "Ввести строку", "Ввести дату"	
					ИначеЕсли ТипЗадания = Перечисления.апТипыЗадач.ВвестиЧисло Тогда
						ИдТипаЗадачи = "19661470-75a6-4eb4-be94-44924664b3d1";
					ИначеЕсли ТипЗадания = Перечисления.апТипыЗадач.ВвестиДату Тогда
						ИдТипаЗадачи = "23d6533f-f121-4939-9a40-27257371ac26";
					ИначеЕсли ТипЗадания = Перечисления.апТипыЗадач.ВвестиСтроку Тогда
						ИдТипаЗадачи = "a429fb60-a01b-4282-ba56-85721e24257d";
					ИначеЕсли ТипЗадания = Перечисления.апТипыЗадач.ИсполненоНеисполнено Тогда			
						ИдТипаЗадачи = "b65c3f4c-6cbe-4675-9685-9f3c62be199e";		
					КонецЕсли; //Если ТипЗадания = Перечисления.апТипыЗадач.СоздатьДокументЗаявка Тогда
					                    				
					СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Выборка.Ссылка);
					СтруктураПолей.Вставить("ParId", "");
					СтруктураПолей.Вставить("A01", 	 ИдТипаЗадачи);
					
					//для задачи с типом "Выбрать значение из списка" передаем ссылку на вопрос
					Если ТипЗадания = Перечисления.апТипыЗадач.ВыбратьЗначениеИзСписка Тогда 
						СтруктураПолей.Вставить("A02", Выборка.Ссылка.Вопрос);
					КонецЕсли;
					
					СтруктураПолей.Вставить("GrpId0", 	 Выборка.Родитель);
					
					ЗаписатьЭлементВДокументОбмена(СтруктураПолей);						
				КонецЦикла; //Пока Выборка.Следующий() Цикл 		
			
			ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
			
		ДокОбмена.ЗаписатьКонецЭлемента();     //CATALOG		
	КонецЕсли; //Если Не ТолькоНужныеСправочники Или ВыгрузитьСправочникиДляЗаданий Тогда	
    //////////////////////////////////////////////////
		
КонецПроцедуры //ВыгрузитьДополнительнуюИнформацию

&НаСервере
Процедура ВыгрузитьСправочникИзображений()
	
	Если Не Объект.флВыгружатьКартинки Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ПолучитьТекстЗапросаПоИзображениям();
	
	Запрос = Новый Запрос(ТекстЗапроса);
		
	Запрос.УстановитьПараметр("Ассортимент", 		Ассортимент);
	Запрос.УстановитьПараметр("СписокПартнеров", 	МассивПартнеров);
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
	ДобавитьПоле("GUID", "E01CF3A3-6765-4FD3-801C-CCDBF85C78FC");
	
	ДобавитьПоле("Comment", "Справочник.ФотоСправочников");
	
	// Передаем команду на очистку запросов перед загрузкой
	Если Объект.флОчищатьСправочникиПередЗагрузкой Тогда
		ДобавитьПоле("KILLALL", "1");                	
	КонецЕсли;	
	
	СтрокаРасширений = "bmp;gif;png;jpeg;dib;rle;tif;jpg;ico;wmf;emf";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	
	Пока Выборка.Следующий() Цикл 				
		
		Если ТипЗнч(Выборка.ХранимыйФайл) = Тип("ХранилищеЗначения") Тогда
			Картинка = Выборка.ХранимыйФайл.Получить();
		Иначе
			Картинка = Неопределено;
		КонецЕсли;
		
		Расширение = Выборка.Расширение;
		Тома       = Выборка.Ссылка.Том;
			
		Если Найти(СтрокаРасширений, Расширение) = 0 или (Картинка = Неопределено и Тома.Пустая()) Тогда Продолжить; КонецЕсли;	
		
		ВладелецФайла = Выборка.ВладелецФайла;
		
		СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Выборка.Ссылка);			
		
		СтруктураПолей.Вставить("A01",  Выборка.Ссылка);			
		
		Если ТипЗнч(ВладелецФайла) = Тип("СправочникСсылка.Номенклатура") Тогда
			ЗначащийРеквизит = "A02";
		ИначеЕсли ТипЗнч(ВладелецФайла) = Тип("СправочникСсылка.Партнеры") Тогда
			ЗначащийРеквизит = "A03";		
		КонецЕсли;
		
		СтруктураПолей.Вставить(ЗначащийРеквизит, ВладелецФайла);
		
		ЗаписатьЭлементВДокументОбмена(СтруктураПолей);	
		
	КонецЦикла;
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
	
КонецПроцедуры //ВыгрузитьСправочникИзображений

&НаСервере
Функция ПолучитьТекстЗапросПоВзаиморасчетам(ПолеГруппировки, ВыгружатьТолькоПросроченные)
	            	
	ТекстУсловия = "";
	
	Если ВыгружатьТолькоПросроченные Тогда
		ТекстУсловия = 
		" И
		|	ВЫБОР
		|			КОГДА (НЕ Границы.РасчетыНеактуальны ЕСТЬ NULL )
		|				ТОГДА 0
		|			КОГДА (НЕ РазностиДат.КоличествоДней ЕСТЬ NULL )
		|				ТОГДА ВЫБОР
		|						КОГДА РазностиДат.КоличествоДней > 0
		|							ТОГДА РазностиДат.КоличествоДней
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ТаблицаЗадолженностей.ДатаПлатежа = ДАТАВРЕМЯ(1, 1, 1)
		|						ТОГДА 0
		|					ИНАЧЕ ВЫБОР
		|							КОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлатежа, &ДатаОтчета, ДЕНЬ) > 0
		|								ТОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлатежа, &ДатаОтчета, ДЕНЬ)
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|				КОНЕЦ
		|		КОНЕЦ > &КолПросроченныхДней";		
	КонецЕсли;
	
	ТекстУсловияКонтрагенты = "";
	Если Константы.апВыгружатьКонтрагентов.Получить() Тогда	
		ТекстУсловияКонтрагенты = " И АналитикаУчетаПоПартнерам.Контрагент В (&СписокКонтрагентов)";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПроведениеПоРасчетамСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	МИНИМУМ(ПроведениеПоРасчетамСКлиентами.Период) КАК Период
	|ПОМЕСТИТЬ НачальныеДвижения
	|ИЗ
	|	Последовательность.ПроведениеПоРасчетамСКлиентами КАК ПроведениеПоРасчетамСКлиентами
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроведениеПоРасчетамСКлиентами.АналитикаУчетаПоПартнерам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Границы.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	МАКСИМУМ(ДОБАВИТЬКДАТЕ(Границы.АктуальныйПериод, ДЕНЬ, -1)) КАК АктуальныйПериод,
	|	ИСТИНА КАК РасчетыНеактуальны
	|ПОМЕСТИТЬ Границы
	|ИЗ
	|	(ВЫБРАТЬ
	|		НачальныеДвижения.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		ЕСТЬNULL(ПроведениеПоРасчетамСКлиентамиГраницы.Период, НачальныеДвижения.Период) КАК АктуальныйПериод
	|	ИЗ
	|		НачальныеДвижения КАК НачальныеДвижения
	|			ЛЕВОЕ СОЕДИНЕНИЕ Последовательность.ПроведениеПоРасчетамСКлиентами.Границы КАК ПроведениеПоРасчетамСКлиентамиГраницы
	|			ПО НачальныеДвижения.АналитикаУчетаПоПартнерам = ПроведениеПоРасчетамСКлиентамиГраницы.АналитикаУчетаПоПартнерам) КАК Границы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|		ПО Границы.АналитикаУчетаПоПартнерам = РасчетыСКлиентами.АналитикаУчетаПоПартнерам
	|
	|СГРУППИРОВАТЬ ПО
	|	Границы.АналитикаУчетаПоПартнерам
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(Границы.АктуальныйПериод) <= МАКСИМУМ(РасчетыСКлиентами.Период)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентами.ЗаказКлиента,
	|	РасчетыСКлиентами.ЗаказКлиента.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	РасчетыСКлиентами.Валюта,
	|	РасчетыСКлиентамиПоДокументам.РасчетныйДокумент,
	|	РасчетыСКлиентамиПоДокументам.ДатаПлатежа,
	|	ВЫБОР
	|		КОГДА (НЕ Границы.РасчетыНеактуальны ЕСТЬ NULL )
	|			ТОГДА ВЫБОР
	|					КОГДА РасчетыСКлиентами.СуммаОстаток < 0
	|						ТОГДА -РасчетыСКлиентами.СуммаОстаток
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ -(РасчетыСКлиентамиПоДокументам.КВозвратуОстаток + РасчетыСКлиентамиПоДокументам.ПредоплатаОстаток)
	|	КОНЕЦ КАК НашДолг,
	|	ВЫБОР
	|		КОГДА (НЕ Границы.РасчетыНеактуальны ЕСТЬ NULL )
	|			ТОГДА ВЫБОР
	|					КОГДА РасчетыСКлиентами.СуммаОстаток > 0
	|						ТОГДА РасчетыСКлиентами.СуммаОстаток
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ РасчетыСКлиентамиПоДокументам.ДолгОстаток
	|	КОНЕЦ КАК ДолгКлиента,
	|	АналитикаУчета.Партнер,
	|	АналитикаУчета.Организация,
	|	АналитикаУчета.Контрагент
	|ПОМЕСТИТЬ ТаблицаЗадолженностей
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(
	|			{(&ДатаОтчета)},
	|			АналитикаУчетаПоПартнерам.Партнер В (&СписокПартнеров)
	|				И АналитикаУчетаПоПартнерам.Организация В (&СписокОрганизаций)" + ТекстУсловияКонтрагенты + ") КАК РасчетыСКлиентами
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(
	|				{(&ДатаОтчета)},
	|				АналитикаУчетаПоПартнерам.Партнер В (&СписокПартнеров)
	|					И АналитикаУчетаПоПартнерам.Организация В (&СписокОрганизаций)" + ТекстУсловияКонтрагенты + ") КАК РасчетыСКлиентамиПоДокументам
	|		ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = РасчетыСКлиентамиПоДокументам.АналитикаУчетаПоПартнерам
	|			И РасчетыСКлиентами.ЗаказКлиента = РасчетыСКлиентамиПоДокументам.ЗаказКлиента
	|			И РасчетыСКлиентами.Валюта = РасчетыСКлиентамиПоДокументам.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ Границы КАК Границы
	|		ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = Границы.АналитикаУчетаПоПартнерам
	|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчета
	|		ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = АналитикаУчета.КлючАналитики}
	|ГДЕ
	|	АналитикаУчета.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаЗадолженностей.ДатаПлатежа КАК ДатаНачала,
	|	ГрафикиРаботы.ДатаГрафика КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА ГрафикиРаботы.ДеньВключенВГрафик
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РабочийДень
	|ПОМЕСТИТЬ Графики
	|ИЗ
	|	ТаблицаЗадолженностей КАК ТаблицаЗадолженностей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ГрафикиРаботы
	|		ПО (ГрафикиРаботы.Календарь = &Календарь)
	|ГДЕ
	|	ГрафикиРаботы.ДатаГрафика МЕЖДУ ТаблицаЗадолженностей.ДатаПлатежа И &ДатаОтчета
	|	И ТаблицаЗадолженностей.ДатаПлатежа <> ДАТАВРЕМЯ(1, 1, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ДатаНачала КАК ДатаНачала,
	|	ВложенныйЗапрос.ДатаОкончания КАК ДатаОкончания,
	|	ЕСТЬNULL(СУММА(Графики.РабочийДень), 0) КАК КоличествоДней
	|ПОМЕСТИТЬ РазностиДат
	|ИЗ
	|	Графики КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ Графики КАК Графики
	|		ПО ВложенныйЗапрос.ДатаНачала = Графики.ДатаНачала
	|			И ВложенныйЗапрос.ДатаОкончания > Графики.ДатаОкончания
	|ГДЕ
	|	ВложенныйЗапрос.ДатаОкончания = НАЧАЛОПЕРИОДА(&ДатаОтчета, ДЕНЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ДатаНачала,
	|	ВложенныйЗапрос.ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЗадолженностей.Организация КАК Организация,
	|	ТаблицаЗадолженностей.Партнер КАК Партнер,
	|	ВЫБОР
	|		КОГДА ТаблицаЗадолженностей.ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ТаблицаЗадолженностей.ЗаказКлиента
	|		ИНАЧЕ ТаблицаЗадолженностей.ЗаказКлиента.Договор
	|	КОНЕЦ КАК Договор,
	|	ТаблицаЗадолженностей.ЗаказКлиента КАК ЗаказКлиента,
	|	ТаблицаЗадолженностей.ДолгКлиента КАК ДолгКлиента,
	|	ВЫБОР
	|		КОГДА (НЕ Границы.РасчетыНеактуальны ЕСТЬ NULL )
	|			ТОГДА 0
	|		КОГДА ВЫБОР
	|				КОГДА (НЕ РазностиДат.КоличествоДней ЕСТЬ NULL )
	|					ТОГДА ВЫБОР
	|							КОГДА РазностиДат.КоличествоДней > 0
	|								ТОГДА РазностиДат.КоличествоДней
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ТаблицаЗадолженностей.ДатаПлатежа = ДАТАВРЕМЯ(1, 1, 1)
	|							ТОГДА 0
	|						ИНАЧЕ ВЫБОР
	|								КОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлатежа, &ДатаОтчета, ДЕНЬ) > 0
	|									ТОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлатежа, &ДатаОтчета, ДЕНЬ)
	|								ИНАЧЕ 0
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ = 0
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаЗадолженностей.ДолгКлиента
	|	КОНЕЦ КАК ДолгКлиентаПросрочено,
	|	ВЫБОР
	|		КОГДА Границы.РасчетыНеактуальны ЕСТЬ NULL 
	|			ТОГДА ТаблицаЗадолженностей.РасчетныйДокумент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК РасчетныйДокумент,
	|	ТаблицаЗадолженностей.Контрагент КАК Контрагент,
	|	ТаблицаЗадолженностей.Валюта,
	|	ЕСТЬNULL(Границы.АктуальныйПериод, НЕОПРЕДЕЛЕНО) КАК ДатаАктуальностиРасчетов,
	|	ВЫБОР
	|		КОГДА Границы.РасчетыНеактуальны ЕСТЬ NULL 
	|			ТОГДА ТаблицаЗадолженностей.ДатаПлатежа
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДатаПлатежа,
	|	ТаблицаЗадолженностей.НашДолг,
	|	ВЫБОР
	|		КОГДА (НЕ Границы.РасчетыНеактуальны ЕСТЬ NULL )
	|			ТОГДА 0
	|		КОГДА (НЕ РазностиДат.КоличествоДней ЕСТЬ NULL )
	|			ТОГДА ВЫБОР
	|					КОГДА РазностиДат.КоличествоДней > 0
	|						ТОГДА РазностиДат.КоличествоДней
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаЗадолженностей.ДатаПлатежа = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА 0
	|				ИНАЧЕ ВЫБОР
	|						КОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлатежа, &ДатаОтчета, ДЕНЬ) > 0
	|							ТОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлатежа, &ДатаОтчета, ДЕНЬ)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоДней,
	|	ТаблицаЗадолженностей.ЗаказКлиента.Соглашение КАК ЗаказКлиентаСоглашение,
	|	ТаблицаЗадолженностей.РасчетныйДокумент.Соглашение,
	|	Границы.РасчетыНеактуальны
	|ИЗ
	|	ТаблицаЗадолженностей КАК ТаблицаЗадолженностей
	|		ЛЕВОЕ СОЕДИНЕНИЕ Границы КАК Границы
	|		ПО ТаблицаЗадолженностей.АналитикаУчетаПоПартнерам = Границы.АналитикаУчетаПоПартнерам
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РазностиДат КАК РазностиДат
	|		ПО (РазностиДат.ДатаНачала = ТаблицаЗадолженностей.ДатаПлатежа)}
	|ГДЕ
	|	ДолгКлиента > 0" + ТекстУсловия + "	
	|ИТОГИ
	|	СУММА(ДолгКлиента),
	|	СУММА(ДолгКлиентаПросрочено),
	|	СУММА(КоличествоДней)
	|ПО
	|	Партнер
	|	" + ПолеГруппировки;
	
	Возврат ТекстЗапроса;
	
КонецФункции //ПолучитьТекстЗапросПоВзаиморасчетам

&НаСервере   
Процедура ЗаписатьВПротоколЗагрузкуЭлемСпр(Спр, ЭтоНовый)
	
	Наим 		  = Спр.Наименование;
	Представление = Спр.Ссылка.ПолучитьОбъект().Метаданные().Представление();
	ИмяСпр 	      = Спр.Ссылка.ПолучитьОбъект().Метаданные().Имя;
	
	Если ЭтоНовый Тогда
		ТекстСообщения = "Записан новый элемент справочника: """ + Представление + """ (""" + Наим + """)";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Истина, Спр.Ссылка);
	Иначе
		ТекстСообщения = "Обновлен элемент справочника: """ + Представление + """ (""" + Наим + """)";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Истина, Спр.Ссылка);
	КонецЕсли;  
	
	ИдСпр = Строка(Спр.Ссылка.УникальныйИдентификатор());
	Если СписЗагруженныхОбъектовСпр.НайтиПоЗначению(ИдСпр) = Неопределено Тогда
    	СписЗагруженныхОбъектовСпр.Добавить(ИдСпр, ИмяСпр);
	КонецЕсли;                                          	
	
КонецПроцедуры //ЗаписатьВПротоколЗагрузкуЭлемСпр

&НаСервере
// Процедура проверяет корректность номера документа для выгрузки. В номере документа недопустимо
// наличие пробелов в конце.
// Параметры
//  <СтруктураПолей>  - <Тип.Структура> - структура полей документа, которую добавляется реквизит номера
//
//  <НомерДокумента>  - <Тип.Строка> - номер документа который проверяется
//
//  <СсылкаДокумента> - <Тип.ДокументСсылка> - ссылка которая покажет пользователю где проблема
Процедура ВставитьНомерДокументаВСтруктуру(СтруктураПолей, Док)
	
	НомерДокумента = Док.Номер;

	НомерДляXML = НомерДокумента;
	// Проверка на пробелы в конце номера
	Если Прав(НомерДокумента, 1) = " " Или Прав(НомерДокумента, 1) = Символы.НПП Тогда		
		НомерДляXML = СокрП(НомерДляXML);
		ОповеститьОСобытии("В номере документа '" + Строка(Док) + "' сокращены конечные пробелы.", СтатусСообщения.Важное, Истина, Док);		
	КонецЕсли;
	
	// Проверка последнего элемента номера
	СписокЦифр = "0123456789";
	ПоследнийЭлемент = Прав(НомерДляXML, 1);
	Если Найти(СписокЦифр, ПоследнийЭлемент) = 0 Тогда
		ОповеститьОСобытии("В номере документа '" + Строка(Док) + "' последний символ не цифра.", СтатусСообщения.Важное, Истина, Док);
	КонецЕсли;
	
	СтруктураПолей.Вставить("DocNumber", НомерДляXML);

КонецПроцедуры // ВтавитьНомерДокументаВСтруктуру

&НаСервере
Процедура ВыгрузитьВзаиморасчеты()
	
	Текст = ДокОбмена;
	
	СписокКлиентовДляВыгрузки = Новый СписокЗначений;
	
	// получим дату последней ведомости по торговому
	ТекстЗапроса = "ВЫБРАТЬ
	               |	МАКСИМУМ(ПоступлениеДенегВедомость.Дата) КАК Дата
	               |ИЗ
	               |	Документ.ПоступлениеДенегВедомость КАК ПоступлениеДенегВедомость
	               |ГДЕ
	               |	ПоступлениеДенегВедомость.Маршрут = &Менеджер
	               |	И ПоступлениеДенегВедомость.Проведен = ИСТИНА";
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Менеджер", ВыбАгент.Менеджер);
	Результат = Запрос.Выполнить();
	Попытка
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ДатаПоследнейВедомости = КонецДня(Выборка.Дата) + 1;
	Исключение
		ДатаПоследнейВедомости = НачалоМесяца(ТекущаяДата());
	КонецПопытки;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВложенныйЗапрос.Контрагент КАК Контрагент,
	               |	ВложенныйЗапрос.КредДокумент КАК КредДокумент,
	               |	ВложенныйЗапрос.Долг КАК Долг
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Контрагенты.Ссылка КАК Контрагент,
	               |		ЗНАЧЕНИЕ(Документ.РасходнаяНакладная.ПустаяСсылка) КАК КредДокумент,
	               |		0 КАК Долг
	               |	ИЗ
	               |		Справочник.Контрагенты КАК Контрагенты
	               |	ГДЕ
	               |		ВЫБОР
	               |				КОГДА &НомерКоманды = 3
	               |					ТОГДА Контрагенты.Менеджер3 = &Менеджер
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА &НомерКоманды = 2
	               |							ТОГДА Контрагенты.Менеджер2 = &Менеджер
	               |						ИНАЧЕ Контрагенты.Менеджер = &Менеджер
	               |					КОНЕЦ
	               |			КОНЕЦ
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ВзаиморасчетыСПокупателямиОстатки.Контрагент,
	               |		ВзаиморасчетыСПокупателямиОстатки.КредитныйДокумент,
	               |		ВзаиморасчетыСПокупателямиОстатки.СуммаОстаток
	               |	ИЗ
	               |		РегистрНакопления.ВзаиморасчетыСПокупателями.Остатки(
	               |				,
	               |				Менеджер = &Менеджер
	               |					И Подразделение = &Подразделение) КАК ВзаиморасчетыСПокупателямиОстатки
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		КпкКасса.Контрагент,
	               |		КпкКасса.Сделка,
	               |		-1 * КпкКасса.СуммаДокумента
	               |	ИЗ
	               |		Документ.КпкКасса КАК КпкКасса
	               |	ГДЕ
	               |		КпкКасса.Проведен = ИСТИНА
	               |		И КпкКасса.Дата >= &ДатаПоследнейВедомости
	               |		И КпкКасса.Агент = &Агент) КАК ВложенныйЗапрос
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВложенныйЗапрос.Контрагент.Наименование,
	               |	КредДокумент
	               |ИТОГИ
	               |	СУММА(Долг)
	               |ПО
	               |	Контрагент,
	               |	КредДокумент";
	
		
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Менеджер", ВыбАгент.Менеджер);
	Запрос.УстановитьПараметр("Агент", ВыбАгент);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("НомерКоманды", ВыбАгент.Менеджер.НомерКоманды);
	Запрос.УстановитьПараметр("ДатаПоследнейВедомости", ДатаПоследнейВедомости);
	
	Текст.ДобавитьСтроку("<Begin>" + Т_ + "Doc_Debt" + Т_ + "Struct:DocID,DocState,DocFlags,TimeCrt,DocNumber,=Category,FirmID,ClientID,=TPointID,DocSum,Comment,=DocDescr,FullSum,PayDate");
	//Кол = 0;
	
	//СрокОплаты = ТекущаяДата() + 3*24*60*60;  //выгружаем только те долги, которые уже просрочены или будут просрочены в ближайшие три дня
	
	ВыборкаКлиенты = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаКлиенты.Следующий() Цикл
		
		Клиент 		= ВыборкаКлиенты.Контрагент;
		
		Если Клиент["Менеджер"+?(ВыбАгент.Менеджер.НомерКоманды>1,СокрЛП(ВыбАгент.Менеджер.НомерКоманды),"")] <> ВыбАгент.Менеджер Тогда
			Продолжить;
		КонецЕсли;
		
		КолвоПросроченоНакладных 	= 0;
		ПревышенСрокКредита 		= 0;
		СтатусКлиента 				= "0";
		
		Выборка = ВыборкаКлиенты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			
			КредДок = Выборка.КредДокумент;
			
			Если НЕ ЗначениеЗаполнено(КредДок) Тогда
			    Продолжить;
			ИначеЕсли Выборка.Долг = 0 Тогда	
				// будем выгружать нулевой долг....это -кпкКасса
			ИначеЕсли Выборка.Долг < 10 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрВозвраты = "Возвраты: ";
			СтрОплаты = "Оплаты: ";

			ИдКлиента	= СокрП(ПолучитьИдентификатор(Клиент));
			СуммаДолга = Выборка.Долг;
			
			// проверим, а может есть не подтвержденная оплата
				
			    ___ДатаОплаты = КредДок.Дата + Клиент.СрокОплаты *24*60*60 ;
				
				Если (___ДатаОплаты <= ТекущаяДата() ) И НЕ(Выборка.Долг = 0) Тогда
					КолвоПросроченоНакладных = КолвоПросроченоНакладных + 1;
				КонецЕсли;
				
				Если (___ДатаОплаты + 7*24*60*60 <= ТекущаяДата() ) И НЕ(Выборка.Долг = 0) Тогда
					ПревышенСрокКредита = 1;
				КонецЕсли;
				
				// поищем возвраты...
				//////ПодчиненныеДокументы.ВыбратьПодчиненныеДокументы(,,КредДок);
				//////Пока ПодчиненныеДокументы.ПолучитьДокумент() = 1 Цикл
				//////	Если (ПодчиненныеДокументы.Вид() = "ВозвратОтПокупателя") Тогда
				//////		СуммаВозврата = Формат(ПодчиненныеДокументы.Итог("СуммаОтп")-Окр(ПодчиненныеДокументы.Итог("СуммаОтп")*ПодчиненныеДокументы.Скидка/100,2),"Ч08.2");
				//////		СтрВозвраты = СтрВозвраты + Шаблон("[ПодчиненныеДокументы.ДатаДок]-[СуммаВозврата]; ");	
				//////	ИначеЕсли (ПодчиненныеДокументы.Вид() = "ПоступлениеДенегВедомость") Тогда
				//////		СуммаОплаты = 0;
				//////		ПодчиненныеДокументы.ВыбратьСтроки();
				//////		Пока ПодчиненныеДокументы.ПолучитьСтроку() = 1 Цикл
				//////			Если НЕ(ПодчиненныеДокументы.Док = КредДок) Тогда
				//////				Продолжить;
				//////			КонецЕсли;
				//////			
				//////			СуммаОплаты = СуммаОплаты + ПодчиненныеДокументы.Сумма;	
				//////		КонецЦикла;
				//////		СуммаОплаты = Формат(СуммаОплаты,"Ч08.2");
				//////		СтрОплаты = СтрОплаты + Шаблон("[ПодчиненныеДокументы.ДатаДок]-[СуммаОплаты]; ");
				//////	КонецЕсли;
				//////КонецЦикла;
				
			//КонецЕсли;
			
			//А+ (релиз 15, 26.11.04) добавлено:
			ВысокаяВажность = 0; //?((КредДок.ДатаОплаты + 100) < СрокОплаты, 64, 0); //если равно 64, то документ в КПК будет выделен красным цветом, НО ...
			//^^^ ... Но обратите внимание, если Вы в КПК используете категории документов, то выделение документов 
			// крансым цветом становится возможным только при помощи соответствующей цветовой категории
			// документа, выгружаемой в параметре Category тэга, если же режим использования цветовых 
			// категорий в КПК отключен, то документы с флагом 64 (как приведено в строке кода выше) будут
			// выделяться красным цветом.

			Если ВысокаяВажность <> 0 Тогда
				КодКатегории = "5"; // код категории "Документ требует срочной оплаты"
			Иначе
				КодКатегории = "5";//?(КредДок.Категория.Выбран() = 1, Строка(КредДок.Категория.Код), "0");
			КонецЕсли;
			
			ИдФирмы = СокрП(ПолучитьИдентификатор(КредДок.Организация));
			
			ИдТоргТочки  = "";
			
			//Проверяем идентификатор документа, если идентификатора нет, то идентификатор создаем
			ИдДолга = ПолучитьИдентификатор(КредДок);
			
			НомерДок	= СокрЛП(КредДок.Номер);
			
			ДатаВремяДок= ДатаВФорматеXML(КредДок.Дата); // + " " + СтрЗаменить(КредДок.ПолучитьВремя(),":","-");
			Долг		= Формат(СуммаДолга, "ЧДЦ=2; ЧРД=.; ЧГ=0");
			Комментарий = СтрВозвраты + " " + СтрОплаты;//СтрЗаменить(СокрЛП(КредДок.Комментарий),"""","'");
			СостДок 	= ?(КредДок.Проведен, "1", "2");
			
			СуммаДок	= СокрЛП(КредДок.СуммаДокумента);
			СрокДок		= ДатаВФорматеXML(КредДок.Дата+Клиент.СрокОплаты*24*60*60);
			
			СостДокВЦБД = Строка(ВернутьСостояниеДок(КредДок) + 8 + ВысокаяВажность);// +8 означает, что документ будет запрещен для редактирования
			
			Текст.ДобавитьСтроку(ИдДолга +Т_+ СостДок +Т_+ СостДокВЦБД +
				Т_+ ДатаВремяДок +
				Т_+ НомерДок +
				Т_+ КодКатегории +
				Т_+ ИдФирмы +
				Т_+ ИдКлиента +
				Т_+ ИдТоргТочки +
				Т_+ Долг +
				Т_+ Комментарий +
				Т_+ "Расх. накл." +
				Т_+ СуммаДок +
				Т_+ СрокДок);
			
			Стр = "";
			
		КонецЦикла;
		
		Если 1=1 Тогда
			СтатусКлиента = ?((КолвоПросроченоНакладных>=10) или (ПревышенСрокКредита=1),"2","0");
		Иначе
			СтатусКлиента = "0";
		КонецЕсли;
		
		СписокКлиентовДляВыгрузки.Добавить(Новый Структура("Клиент, Статус", Клиент, СтатусКлиента ));
		
	КонецЦикла;
	
	Текст.ДобавитьСтроку("<End>" + Т_ + "Doc_Debt");
	
КонецПроцедуры //ВыгрузитьВзаиморасчеты()  
 
&НаСервере
Процедура ВыгрузитьМаршруты()
	
КонецПроцедуры //ВыгрузитьМаршруты()


&НаСервере
Функция ПолучитьСписокПодчиненныхДокументовДляЗаказов(СписокЗаказов)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.ЗаказКлиента
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.ПометкаУдаления = ЛОЖЬ
	|	И РеализацияТоваровУслуг.Проведен = ИСТИНА
	|	И РеализацияТоваровУслуг.ЗаказКлиента В(&СписокЗаказов)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("СписокЗаказов", СписокЗаказов);
	
	Результат = Запрос.Выполнить();                        
	      	
	МассивРеализаций = Результат.Выгрузить().ВыгрузитьКолонку("ЗаказКлиента");
	
	Возврат МассивРеализаций;
	
КонецФункции //ПолучитьСписокПодчиненныхДокументовДляЗаказов

&НаСервере
Процедура ВыгрузитьЗаказыПокупателей(СписокСсылок = Неопределено)
	
	//Если СписокСсылок = Неопределено Тогда
	//	ТекстЗапроса = 
	//	"ВЫБРАТЬ
	//	|	ЗаказКлиента.Ссылка
	//	|ПОМЕСТИТЬ Документы
	//	|ИЗ
	//	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	//	|ГДЕ
	//	|	ЗаказКлиента.ПометкаУдаления = ЛОЖЬ
	//	|	И ЗаказКлиента.Проведен = ИСТИНА
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	апЗагруженныеДокументыСрезПоследних.Агент,
	//	|	апЗагруженныеДокументыСрезПоследних.ДатаСоздания,
	//	|	апЗагруженныеДокументыСрезПоследних.Категория,
	//	|	апЗагруженныеДокументыСрезПоследних.Широта,
	//	|	апЗагруженныеДокументыСрезПоследних.Долгота,
	//	|	Документы.Ссылка
	//	|ИЗ
	//	|	РегистрСведений.апЗагруженныеДокументы.СрезПоследних(
	//	|			&КонПериода,
	//	|			Агент = &Агент
	//	|				И (ДатаСоздания МЕЖДУ &НачПериода И &КонПериода)) КАК апЗагруженныеДокументыСрезПоследних
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документы КАК Документы
	//	|		ПО апЗагруженныеДокументыСрезПоследних.Документ = Документы.Ссылка
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	апЗагруженныеДокументыСрезПоследних.Документ.МоментВремени
	//	|АВТОУПОРЯДОЧИВАНИЕ";
	//	
	//	Интервал = Константы.апИнтервалВыгрузкиДокументов.Получить();
	//	
	//	Запрос = Новый Запрос(ТекстЗапроса);
	//	
	//	Запрос.УстановитьПараметр("НачПериода", ?(Интервал = 0, ТекущаяДата(), НачалоДня(ТекущаяДата() - (86400 * Интервал))));
	//	Запрос.УстановитьПараметр("КонПериода", ?(Интервал = 0, ТекущаяДата(), КонецДня(ТекущаяДата())));	
	//	Запрос.УстановитьПараметр("Агент",      ВыбАгент);
	//	
	//	Результат = Запрос.Выполнить();
	//	
	//	ВыборкаДок = Результат.Выбрать();
	//	
	//	МассивПодчиненныхДокументов = ПолучитьСписокПодчиненныхДокументовДляЗаказов(Результат.Выгрузить().ВыгрузитьКолонку("Ссылка"));
	//Иначе 
	//	ВыборкаДок = СписокСсылок;
	//	
	//	МассивПодчиненныхДокументов = ПолучитьСписокПодчиненныхДокументовДляЗаказов(СписокСсылок);
	//КонецЕсли;
	//
	//ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENT");
	//
	//	ИдДок = "E01E1F5C-D6E4-46E8-B923-3758B0D79BDE";
	//	
	//	ДобавитьПоле("GUID", ИдДок);
	//	
	//	ДобавитьПоле("Comment", "Документ.ЗаказКлиента");
	//	
	//	УстановитьПризнакОчисткиДокумента(ИдДок);
	//	
	//	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	//	
	//		Пока ВыборкаДок.Следующий() Цикл  
	//			
	//			#Если Клиент Тогда
	//				ОбработкаПрерыванияПользователя();
	//			#КонецЕсли
	//			
	//			Док = ВыборкаДок.Ссылка;
	//			
	//			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейДокумента(Док);
	//			
	//			ОбщийВес = 0;
	//			Для Каждого СтрокаТаб Из Док.Товары Цикл 
	//				ОбщийВес = ОбщийВес + СтрокаТаб.Упаковка.Вес*СтрокаТаб.КоличествоУпаковок;
	//			КонецЦикла;
	//			
	//			Организация   = Док.Организация;
	//			Партнер 	  = Док.Партнер;
	//			Контрагент    = Док.Контрагент;
	//			ДокСоглашение = Док.Соглашение;
	//			
	//			СтруктураПолей.Вставить("A02", Организация);
	//			СтруктураПолей.Вставить("A03", Партнер);
	//			СтруктураПолей.Вставить("A04", Контрагент);
	//			
	//			ТекСоглашение = ПолучитьСсылкуИзСправочника(ДокСоглашение.УникальныйИдентификатор(), "апСоглашенияСКлиентами");				
	//			Если Не ЗначениеЗаполнено(ТекСоглашение) Тогда 
	//				ТекСоглашение = ПолучитьСлужебныйЭлементСправочникаСоглашения(Док.Партнер, ДокСоглашение);
	//			КонецЕсли;					
	//			
	//			СтруктураПолей.Вставить("A05",  	 ТекСоглашение);
	//			//СтруктураПолей.Вставить("A07", 		 Док.ВидЦен);
	//			СтруктураПолей.Вставить("A08",  	 Док.СуммаДокумента);
	//			СтруктураПолей.Вставить("A09",  	 ОбщийВес);
	//			СтруктураПолей.Вставить("A010",  	 Док.ЖелаемаяДатаОтгрузки);
	//			СтруктураПолей.Вставить("A011",  	 Док.Комментарий);
	//			Если СписокСсылок = Неопределено Тогда
	//				СтруктураПолей.Вставить("A012",  	 ВыборкаДок.Категория);
	//				СтруктураПолей.Вставить("A014",  	 ВыборкаДок.Широта);
	//				СтруктураПолей.Вставить("A015",  	 ВыборкаДок.Долгота);
	//			Иначе
	//				ДанныеДок = ВернутьДанныеДокументаИзРегистра(Док);
	//				Если Не ДанныеДок = Неопределено Тогда
	//					СтруктураПолей.Вставить("A012",  	 ДанныеДок.Категория);
	//					СтруктураПолей.Вставить("A014",  	 ДанныеДок.Широта);
	//					СтруктураПолей.Вставить("A015",  	 ДанныеДок.Долгота);	
	//				КонецЕсли;
	//			КонецЕсли;
	//			
	//			Если МассивПодчиненныхДокументов.Найти(Док) <> Неопределено Тогда
	//				СтруктураПолей.Вставить("A016", "1");
	//			Иначе
	//				СтруктураПолей.Вставить("A016", "0");
	//			КонецЕсли;
	//			
	//			ВключитьДополнительныйЭлементСправочникаВМассив(Организация);
	//			ВключитьДополнительныйЭлементСправочникаВМассив(Партнер);
	//			ВключитьДополнительныйЭлементСправочникаВМассив(Контрагент);
	//											
	//			Если Док.Товары.Количество() > 0 Тогда 
	//			
	//				// Во втором параметре передается Ложь - это означает,
	//				// что не закрывает тег "Item", его закрытие производится ниже		
	//				ЗаписатьЭлементВДокументОбмена(СтруктураПолей, Ложь);
	//				
	//				ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
	//					
	//					ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
	//				
	//					ДобавитьПоле("GUID", "0738E61B-F06F-464A-8483-4249E0254819");
	//					
	//					ДобавитьПоле("Comment", "Табличная часть 'Товары'");
	//					
	//					Для Каждого СтрокаТаб Из Док.Товары	Цикл
	//											  							
	//						Номенклатура  = СтрокаТаб.Номенклатура;
	//						Упаковка	  = СтрокаТаб.Упаковка;
	//						КолУпаковок   = СтрокаТаб.КоличествоУпаковок;
	//						СуммаСтрокиТЧ = СтрокаТаб.Сумма;
	//						Цена		  = СтрокаТаб.Цена;
	//						 							
	//						СтруктураПолей = Новый Структура;
	//						СтруктураПолей.Вставить("GUID",  Новый УникальныйИдентификатор());
	//						СтруктураПолей.Вставить("DocId", Док);
	//						СтруктураПолей.Вставить("A01",   Номенклатура);
	//						СтруктураПолей.Вставить("A02",   СтрокаТаб.Характеристика);
	//						СтруктураПолей.Вставить("A03",   ПолучитьЕдиницуИзСлужебногоСправочника(СтрокаТаб));
	//						СтруктураПолей.Вставить("A04",   КолУпаковок);
	//						СтруктураПолей.Вставить("A05",   Цена);
	//						СтруктураПолей.Вставить("A06",   СуммаСтрокиТЧ);
	//						СтруктураПолей.Вставить("A09",   СтрокаТаб.ПроцентРучнойСкидки);
	//						СтруктураПолей.Вставить("A07",   СтрокаТаб.СуммаНДС);
	//						СтруктураПолей.Вставить("A08",   Упаковка.Вес*КолУпаковок);
	//						СтруктураПолей.Вставить("A010",  ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтрокаТаб.СтавкаНДС)*100);							
	//						СтруктураПолей.Вставить("A011",  СтрокаТаб.Склад);
	//						СтруктураПолей.Вставить("A012",  (КолУпаковок*Цена) - СуммаСтрокиТЧ); //Сумма скидки
	//						СтруктураПолей.Вставить("A015",  СтрокаТаб.ВидЦены);
	//						
	//						ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
	//						
	//						ВключитьДополнительныйЭлементСправочникаВМассив(Номенклатура);
	//						
	//					КонецЦикла;
	//											
	//					ДокОбмена.ЗаписатьКонецЭлемента();  //TABLE
	//								
	//				ДокОбмена.ЗаписатьКонецЭлемента();  //TABLES
	//			
	//				// Закрываем тег ITEM, который был открыт при вызове
	//				// процедуры "ЗаписатьЭлементВДокументОбмена"
	//				ДокОбмена.ЗаписатьКонецЭлемента();  //ITEM
	//				
	//			Иначе
	//				
	//				ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
	//				
	//			КонецЕсли;
	//		
	//		КонецЦикла;
	//		
	//	ДокОбмена.ЗаписатьКонецЭлемента();  // ELEMENTS
	//	
	//ДокОбмена.ЗаписатьКонецЭлемента();      // DOCUMENT
	
КонецПроцедуры //ВыгрузитьЗаказыПокупателей
  
&НаСервере
Процедура ВыгрузитьПеремещения(СписокСсылок = Неопределено)
	
	//Если СписокСсылок = Неопределено Тогда
	//	ТекстЗапроса = 
	//	"ВЫБРАТЬ
	//	|	ПеремещениеТоваров.Ссылка
	//	|ПОМЕСТИТЬ Документы
	//	|ИЗ
	//	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	//	|ГДЕ
	//	|	ПеремещениеТоваров.ПометкаУдаления = ЛОЖЬ
	//	|	И ПеремещениеТоваров.Проведен = ИСТИНА
	//	|	И ПеремещениеТоваров.Дата МЕЖДУ &НачПериода И &КонПериода
	//	|	И (ПеремещениеТоваров.СкладПолучатель = &Склад
	//	|			ИЛИ ПеремещениеТоваров.СкладОтправитель = &Склад)
	//	|	И ПеремещениеТоваров.Статус = &Статус
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	апЗагруженныеДокументыСрезПоследних.Агент,
	//	|	апЗагруженныеДокументыСрезПоследних.ДатаСоздания,
	//	|	апЗагруженныеДокументыСрезПоследних.Категория,
	//	|	апЗагруженныеДокументыСрезПоследних.Широта,
	//	|	апЗагруженныеДокументыСрезПоследних.Долгота,
	//	|	Документы.Ссылка
	//	|ИЗ
	//	|	Документы КАК Документы
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.апЗагруженныеДокументы.СрезПоследних(&КонПериода, Агент = &Агент) КАК апЗагруженныеДокументыСрезПоследних
	//	|		ПО (апЗагруженныеДокументыСрезПоследних.Документ = Документы.Ссылка)
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	Документы.Ссылка.МоментВремени
	//	|АВТОУПОРЯДОЧИВАНИЕ";
	//	
	//	Интервал = Константы.апИнтервалВыгрузкиПеремещений.Получить();
	//	
	//	Запрос = Новый Запрос(ТекстЗапроса);
	//	
	//	Запрос.УстановитьПараметр("НачПериода", ?(Интервал = 0, ТекущаяДата(), НачалоДня(ТекущаяДата() - (86400 * Интервал))));
	//	Запрос.УстановитьПараметр("КонПериода", ?(Интервал = 0, ТекущаяДата(), КонецДня(ТекущаяДата())));		
	//	Запрос.УстановитьПараметр("Агент",      ВыбАгент);
	//	Запрос.УстановитьПараметр("Склад",      МобильныйСклад);
	//	Запрос.УстановитьПараметр("Статус",     Перечисления.СтатусыПеремещенийТоваров.Принято);
	//	
	//	Выборка = Запрос.Выполнить().Выбрать();
	//Иначе
	//	Выборка = СписокСсылок;	
	//КонецЕсли;
	//
	//ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENT");
	//
	//	ИдДок = "77525C87-CB2F-405E-A92E-6F373EDEECE7";
	//
	//	ДобавитьПоле("GUID", ИдДок);
	//	
	//	ДобавитьПоле("Comment", "Документ.Перемещение");
	//	
	//	УстановитьПризнакОчисткиДокумента(ИдДок);
	//	
	//	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	//
	//		Пока Выборка.Следующий() Цикл

	//			Док = Выборка.Ссылка;
	//			
	//			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейДокумента(Док);
	//			
	//			СуммаДокумента = 0;
	//			
	//			Организация   	 = Док.Организация;
	//			СкладОтправитель = Док.СкладОтправитель;
	//			СкладПолучатель  = Док.СкладПолучатель;
	//			
	//			СтруктураПолей.Вставить("A01", Организация);
	//			СтруктураПолей.Вставить("A03", СкладОтправитель);
	//			СтруктураПолей.Вставить("A04", СкладПолучатель);				
	//			СтруктураПолей.Вставить("A05", СуммаДокумента);
	//			СтруктураПолей.Вставить("A06", Док.Комментарий);
	//			Если СписокСсылок = Неопределено Тогда 
	//				СтруктураПолей.Вставить("A02", Выборка.Категория);
	//				СтруктураПолей.Вставить("A07", Выборка.Широта);
	//				СтруктураПолей.Вставить("A08", Выборка.Долгота);
	//			Иначе
	//				ДанныеДок = ВернутьДанныеДокументаИзРегистра(Док);
	//				Если Не ДанныеДок = Неопределено Тогда
	//					СтруктураПолей.Вставить("A02",  	 ДанныеДок.Категория);
	//					СтруктураПолей.Вставить("A07",  	 ДанныеДок.Широта);
	//					СтруктураПолей.Вставить("A08",  	 ДанныеДок.Долгота);	
	//				КонецЕсли;
	//			КонецЕсли;
	//			СтруктураПолей.Вставить("A09", Док.ВидЦены);
	//			
	//			ВключитьДополнительныйЭлементСправочникаВМассив(Организация);
	//			ВключитьДополнительныйЭлементСправочникаВМассив(СкладОтправитель);
	//			ВключитьДополнительныйЭлементСправочникаВМассив(СкладПолучатель);
	//			
	//			Если Док.Товары.Количество() > 0 Тогда 
	//			
	//				// Во втором параметре передается Ложь - это означает,
	//				// что не закрывает тег "Item", его закрытие производится ниже		
	//				ЗаписатьЭлементВДокументОбмена(СтруктураПолей, Ложь);
	//				
	//				ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
	//					
	//					ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
	//				
	//					ДобавитьПоле("GUID", "3097F10A-BEE6-4A76-AD7A-D4663C9B73EC");
	//					
	//					ДобавитьПоле("Comment", "Табличная часть 'Товары'");
	//					
	//					Для Каждого СтрокаТаб Из Док.Товары	Цикл		
	//						
	//						Номенклатура = СтрокаТаб.Номенклатура;
	//						КолУпаковок	 = СтрокаТаб.КоличествоУпаковок;
	//						
	//						СтруктураПолей = Новый Структура;
	//						СтруктураПолей.Вставить("GUID",  Новый УникальныйИдентификатор());
	//						СтруктураПолей.Вставить("DocId", Док);
	//						СтруктураПолей.Вставить("A01",   Номенклатура);
	//						СтруктураПолей.Вставить("A02",   СтрокаТаб.Характеристика);
	//						СтруктураПолей.Вставить("A03",   ПолучитьЕдиницуИзСлужебногоСправочника(СтрокаТаб));
	//						СтруктураПолей.Вставить("A04",   КолУпаковок);
	//						
	//						Цена = ПолучитьЦенуНоменклатуры(Номенклатура, Док.ВидЦены, ТекущаяДата());			
	//						
	//						СтруктураПолей.Вставить("A05",   Цена);
	//						СтруктураПолей.Вставить("A06",   КолУпаковок*Цена);
	//						
	//						ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
	//						
	//						ВключитьДополнительныйЭлементСправочникаВМассив(Номенклатура);
	//						
	//					КонецЦикла;
	//											
	//					ДокОбмена.ЗаписатьКонецЭлемента();  //TABLE
	//								
	//				ДокОбмена.ЗаписатьКонецЭлемента();  //TABLES
	//			
	//				// Закрыаем тег ITEM, который был открыт при вызове
	//				// процедуры "ЗаписатьЭлементВДокументОбмена"
	//				ДокОбмена.ЗаписатьКонецЭлемента();  //ITEM
	//				
	//			Иначе
	//				
	//				ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
	//				
	//			КонецЕсли;
	//			
	//		КонецЦикла;
	//
	//		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
	//	
	//ДокОбмена.ЗаписатьКонецЭлемента();     //DOCUMENT
		
КонецПроцедуры //ВыгрузитьПеремещения

&НаСервере
Процедура ВыгрузитьЗадания(СписокСсылок = Неопределено)
	
	//Если СписокСсылок = Неопределено Тогда
	//	ТекстЗапроса =
	//	"ВЫБРАТЬ
	//	|	Задачи.Ссылка КАК Док,
	//	|	Задачи.Задача,
	//	|	Задачи.Комментарий,
	//	|	Задачи.Обязательная,
	//	|	Задачи.Результат,
	//	|	Задачи.НомерСтроки,
	//	|	Задачи.РезультатДляФото
	//	|ИЗ
	//	|	(ВЫБРАТЬ
	//	|		апЗадание.Ссылка КАК Ссылка
	//	|	ИЗ
	//	|		Документ.апЗадание КАК апЗадание) КАК Задания
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//	|			апЗаданиеЗадачи.Задача КАК Задача,
	//	|			апЗаданиеЗадачи.Комментарий КАК Комментарий,
	//	|			апЗаданиеЗадачи.Обязательная КАК Обязательная,
	//	|			апЗаданиеЗадачи.Результат КАК Результат,
	//	|			апЗаданиеЗадачи.Ссылка КАК Ссылка,
	//	|			апЗаданиеЗадачи.НомерСтроки КАК НомерСтроки,
	//	|			апЗаданиеЗадачи.РезультатДляФото КАК РезультатДляФото
	//	|		ИЗ
	//	|			Документ.апЗадание.Задачи КАК апЗаданиеЗадачи
	//	|		ГДЕ
	//	|			апЗаданиеЗадачи.Задача.ЭтоГруппа = ЛОЖЬ) КАК Задачи
	//	|		ПО Задания.Ссылка = Задачи.Ссылка
	//	|ГДЕ
	//	|	Задачи.Ссылка.Дата МЕЖДУ &НачДата И &КонДата
	//	|	И Задачи.Ссылка.Агент = &Агент
	//	|	И Задачи.Ссылка.ПометкаУдаления = ЛОЖЬ
	//	|	И Задачи.Ссылка.Проведен = ИСТИНА
	//	|	И (НЕ Задачи.Задача ЕСТЬ NULL )
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	Задачи.Ссылка.Дата
	//	//|	,ЭтоГруппа
	//	|ИТОГИ ПО
	//	|	Док";
	//	
	//	Интервал = Константы.апИнтервалВыгрузкиДокументов.Получить();
	//	
	//	Запрос = Новый Запрос(ТекстЗапроса);
	//		   		
	//	Запрос.УстановитьПараметр("Агент",    ВыбАгент);	
	//	Запрос.УстановитьПараметр("НачДата",  НачалоДня(Объект.НачДатаВыгрузкиЗаданий));
	//	Запрос.УстановитьПараметр("КонДата",  КонецДня(Объект.КонДатаВыгрузкиЗаданий));
	//	Запрос.УстановитьПараметр("Родитель", Справочники.апВидыЗадач.ПустаяСсылка());
	//	
	//	ВыборкаДок = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//Иначе
	//	ВыборкаДок = СписокСсылок;	
	//КонецЕсли;
	//
	//ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENT");
	//
	//	ИдДок = "B49074D6-3C0C-4361-B71D-BBF446AB02B6";
	//
	//	ДобавитьПоле("GUID", ИдДок);
	//	
	//	ДобавитьПоле("Comment", "Документ.Задание");
	//	
	//	УстановитьПризнакОчисткиДокумента(ИдДок);
	//	
	//	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	//
	//		Пока ВыборкаДок.Следующий() Цикл
	//			Док = ВыборкаДок.Док;
	//			
	//			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейДокумента(Док);
	//			СтруктураПолей.Вставить("A01", Док.Организация);
	//			СтруктураПолей.Вставить("A02", ПолучитьКонтрагентаПоПартнеру(Док.Партнер));
	//			СтруктураПолей.Вставить("A03", Док.Партнер);
	//			СтруктураПолей.Вставить("A04", Док.Соглашение);
	//			СтруктураПолей.Вставить("A05", Док.Комментарий);
	//			СтруктураПолей.Вставить("A06", Док.Категория);
	//			СтруктураПолей.Вставить("A07", ПреобразоватьЗначениеВСтрокуДляXML(Док.ДатаНачала));
	//			СтруктураПолей.Вставить("A08", ПреобразоватьЗначениеВСтрокуДляXML(Док.ДатаОкончания));
	//			СтруктураПолей.Вставить("A09", ?(Док.НеИзменятьВМУ = Истина, 1,0));
	//			СтруктураПолей.Вставить("A010", ?(Док.СозданВЦБД = Истина,1,0));
	//			
	//			//если дата окончания пустая, то с документом еще не работали, выгрузим его непроведенным
	//			Если Док.ДатаОкончания = Дата(1,1,1) Тогда
	//				СтруктураПолей.Вставить("IsPost", Ложь); //документ будем выгружать непроведенным, т.к. агенту нужно будет выполнить задачи и провести его в МУ
	//			КонецЕсли;	
	//			
	//			ВключитьДополнительныйЭлементСправочникаВМассив(Док.Организация);
	//			ВключитьДополнительныйЭлементСправочникаВМассив(Док.Партнер);
	//			//ВключитьДополнительныйЭлементСправочникаВМассив(Контрагент);
	//			
	//			Если Док.Задачи.Количество() > 0 Тогда
	//				// Во втором параметре передается Ложь - это означает,
	//				// что не закрывает тег "Item", его закрытие производится ниже		
	//				ЗаписатьЭлементВДокументОбмена(СтруктураПолей, Ложь);
	//				
	//				ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
	//					
	//					ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
	//				
	//					ДобавитьПоле("GUID", "DF5A99C3-4778-4CFB-B5F2-877449E05D3B");
	//					
	//					ДобавитьПоле("Comment", "Табличная часть 'Задачи'");
	//					
	//					ВыборкаЗаданий = ВыборкаДок.Выбрать();
	//	
	//					Пока ВыборкаЗаданий.Следующий() Цикл
	//						
	//						Результат 			 = "";
	//						РезультатДляВыгрузки = "";
	//						
	//						ТипЗадания = ВыборкаЗаданий.Задача.Тип;
	//						Результат  = ВыборкаЗаданий.Результат;
	//						
	//						Если СокрЛП(Результат) <> "" Тогда							
	//							Если ТипЗадания = Перечисления.апТипыЗадач.ВвестиЧисло Или ТипЗадания = Перечисления.апТипыЗадач.ВвестиСтроку Тогда
	//								РезультатДляВыгрузки = Строка(Результат);
	//							ИначеЕсли ТипЗадания = Перечисления.апТипыЗадач.ВвестиДату Тогда
	//								Если Результат = Дата(1,1,1) Или Результат = "" Тогда
	//									РезультатДляВыгрузки = "";
	//								Иначе								
	//									РезультатДляВыгрузки = Строка(Формат(Результат,"ДФ=dd.MM.yyyy"));
	//								КонецЕсли;
	//							ИначеЕсли ТипЗадания = Перечисления.апТипыЗадач.ИсполненоНеисполнено Тогда
	//								Если Результат = "Исполнено" Тогда
	//									РезультатДляВыгрузки = "Исполнено";
	//								ИначеЕсли Результат = "Неисполнено" Тогда
	//									РезультатДляВыгрузки = "Неисполнено";
	//								Иначе
	//									РезультатДляВыгрузки = "";
	//								КонецЕсли;	
	//							ИначеЕсли ТипЗадания = Перечисления.апТипыЗадач.ОбменятьсяДанными Тогда
	//								РезультатДляВыгрузки = Строка(Результат);
	//							ИначеЕсли ТипЗадания = Перечисления.апТипыЗадач.СделатьФотографию Тогда
	//								РезультатДляВыгрузки = Строка(ВыборкаЗаданий.РезультатДляФото); //***
	//							ИначеЕсли ТипЗадания = Перечисления.апТипыЗадач.ВыбратьЗначениеИзСписка Тогда
	//								Если Не Результат = Справочники.апОтветыАнкеты.ПустаяСсылка() Тогда
	//									РезультатДляВыгрузки = Результат.УникальныйИдентификатор(); //ссылка
	//								КонецЕсли;
	//							ИначеЕсли Найти(ТипЗадания, "Создать документ")>0 Тогда
	//								Если Результат.Дата = Дата(1,1,1) Тогда //если это пустая ссылка. 
	//									РезультатДляВыгрузки = "";
	//								Иначе
	//									РезультатДляВыгрузки =  Результат.УникальныйИдентификатор(); //ссылка
	//								КонецЕсли;
	//							КонецЕсли;
	//						КонецЕсли; //Если Результат <> "" Тогда
	//														
	//						СтруктураПолей = Новый Структура;
	//						СтруктураПолей.Вставить("GUID",  Новый УникальныйИдентификатор());
	//						СтруктураПолей.Вставить("DocId", Док);
	//						СтруктураПолей.Вставить("A01",   ВыборкаЗаданий.Задача);
	//						СтруктураПолей.Вставить("A02",   ВыборкаЗаданий.Комментарий);
	//						СтруктураПолей.Вставить("A03",   ВыборкаЗаданий.Обязательная);
	//						СтруктураПолей.Вставить("A04",   РезультатДляВыгрузки);							
	//					
	//						ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
	//					КонецЦикла; //Пока ВыборкаЗаданий.Следующий() Цикл
	//											
	//					ДокОбмена.ЗаписатьКонецЭлемента();  //TABLE
	//								
	//				ДокОбмена.ЗаписатьКонецЭлемента();  //TABLES
	//			
	//				// Закрываем тег ITEM, который был открыт при вызове
	//				// процедуры "ЗаписатьЭлементВДокументОбмена"
	//				ДокОбмена.ЗаписатьКонецЭлемента();  //ITEM
	//				
	//			Иначе
	//				
	//				ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
	//				
	//			КонецЕсли; 				
	//			
	//		КонецЦикла; //Пока Выборка.Следующий() Цикл
	//
	//	ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
	//	
	//ДокОбмена.ЗаписатьКонецЭлемента();     //CATALOG
	
КонецПроцедуры // ВыгрузитьЗаданияАгента()

&НаСервере
Процедура ВыгрузитьОстальныеДокументы()
	
	//// ПКО
	//ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENT");
	//
	//	ИдДок = "749BE2E0-9B00-4D7B-9D4D-88CA53327511";
	//
	//	ДобавитьПоле("GUID", ИдДок);
	//	
	//	ДобавитьПоле("Comment", "Документ.ПКО");
	//	
	//	УстановитьПризнакОчисткиДокумента(ИдДок);
	//			
	//ДокОбмена.ЗаписатьКонецЭлемента();     //DOCUMENT
	//
	//// РКО
	//ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENT");
	//
	//	ИдДок = "3890D435-96BA-4481-ABC0-23782E15B32F";
	//
	//	ДобавитьПоле("GUID", ИдДок);
	//	
	//	ДобавитьПоле("Comment", "Документ.РКО");
	//	
	//	УстановитьПризнакОчисткиДокумента(ИдДок);
	//			
	//ДокОбмена.ЗаписатьКонецЭлемента();     //DOCUMENT
	//
	//// Мерчендайзинг
	//ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENT");
	//
	//	ИдДок = "61DEE5FE-D0A8-4842-A6AF-A8D33F298845";
	//
	//	ДобавитьПоле("GUID", ИдДок);
	//	
	//	ДобавитьПоле("Comment", "Документ.Мерчендайзинг");
	//	
	//	УстановитьПризнакОчисткиДокумента(ИдДок);
	//			
	//ДокОбмена.ЗаписатьКонецЭлемента();     //DOCUMENT
	//			
	//// Посещения
	//ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENT");
	//
	//	ИдДок = "9F147C59-5EE8-4550-8289-12ECFE5D0617";
	//
	//	ДобавитьПоле("GUID", ИдДок);
	//	
	//	ДобавитьПоле("Comment", "Документ.Посещение");
	//	
	//	УстановитьПризнакОчисткиДокумента(ИдДок);
	//			
	//ДокОбмена.ЗаписатьКонецЭлемента();     //DOCUMENT
	//
	//// Поступления
	//ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENT");
	//
	//	ИдДок = "C9850D61-BC15-445A-8B1A-E328CC45DDAE";
	//
	//	ДобавитьПоле("GUID", ИдДок);
	//	
	//	ДобавитьПоле("Comment", "Документ.Поступление");
	//	
	//	УстановитьПризнакОчисткиДокумента(ИдДок);
	//			
	//ДокОбмена.ЗаписатьКонецЭлемента();     //DOCUMENT
	//
	//// Возвраты
	//ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENT");
	//
	//	ИдДок = "4971b041-beab-4fa6-b1e8-10138f04fe44";
	//
	//	ДобавитьПоле("GUID", ИдДок);
	//	
	//	ДобавитьПоле("Comment", "Документ.Возврат товаров");
	//	
	//	УстановитьПризнакОчисткиДокумента(ИдДок);
	//			
	//ДокОбмена.ЗаписатьКонецЭлемента();     //DOCUMENT
	//
	//// Сообщения
	//ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENT");
	//
	//	ИдДок = "6956C79C-4310-4F71-AF66-0C2048F1344F";
	//
	//	ДобавитьПоле("GUID", ИдДок);
	//	
	//	ДобавитьПоле("Comment", "Документ.Сообщение");
	//	
	//	УстановитьПризнакОчисткиДокумента(ИдДок);
	//			
	//ДокОбмена.ЗаписатьКонецЭлемента();     //DOCUMENT
 
КонецПроцедуры //ВыгрузитьОстальныеДокументы

&НаСервере 
Процедура ДобавитьЗаписиПоПодтверждениямДокументов(Результат, ИдДокумента, СтрДок)
	
	ВидыДок = "КпкЗаявка,Мерчендайзинг,Посещение,КпкКасса,Посещение,ВозвратОтПокупателя,ЗаказПокупателя,";
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли

		Док = Выборка.Ссылка;
		
		ИдДок = СокрП(ПолучитьИдентификатор(Док));
		
		Попытка
			СостДок = ВернутьСостояниеДок(Док);
		Исключение
			ОповеститьОСобытии("Ошибка получения состояние документа - ("+СокрЛП(Выборка.Ссылка)+")! Причина: " + ОписаниеОшибки(), СтатусСообщения.Внимание);
			Продолжить;
		КонецПопытки;
		
		Если Док.Проведен Тогда
		    СостДок = СостДок + 8;//запрещаем изменение документа в КПК
		КонецЕсли;
		
		КатегорияДок = "0";
		
		Текст = ДокОбмена;
		Текст.ДобавитьСтроку(ИдДок +Т_+ Строка(СостДок) +Т_+ СокрЛП(Док.Номер) +Т_+ КатегорияДок);
		
	КонецЦикла;
	 		
КонецПроцедуры //ДобавитьЗаписиПоПодтверждениямДокументов 

&НаСервере
Процедура ВыгрузитьПодтвержденияЗаказовПокупателей()
	
	ТекстЗапроса = 
    "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	апЗагруженныеДокументыСрезПоследних.Документ КАК Ссылка,
	|	апЗагруженныеДокументыСрезПоследних.Агент,
	|	апЗагруженныеДокументыСрезПоследних.Период,
	|	апЗагруженныеДокументыСрезПоследних.ДатаСоздания
	|ИЗ
	|	РегистрСведений.апЗагруженныеДокументы.СрезПоследних(
	|			,
	|			Агент = &Агент
	|				И (ДатаСоздания МЕЖДУ &НачПериода И &КонПериода)
	|				И (Документ ССЫЛКА Документ.ЗаказПокупателя ИЛИ Документ ССЫЛКА Документ.КпкЗаявка) ) КАК апЗагруженныеДокументыСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	апЗагруженныеДокументыСрезПоследних.Документ.МоментВремени
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(ТекущаяДата() - (86400 * ИнтервалВыгрузкиПодтверждений)));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(ТекущаяДата()));	
	Запрос.УстановитьПараметр("Агент",      ВыбАгент);
	
	Результат = Запрос.Выполнить();
	
	
	ДобавитьЗаписиПоПодтверждениямДокументов(Результат, "E01E1F5C-D6E4-46E8-B923-3758B0D79BDE", "'ЗаказПокупателя'");
		
КонецПроцедуры //ВыгрузитьПодтвержденияЗаказовПокупателей

&НаСервере
Процедура ВыгрузитьПодтвержденияКассы()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	апЗагруженныеДокументыСрезПоследних.Документ КАК Ссылка,
	|	апЗагруженныеДокументыСрезПоследних.Агент,
	|	апЗагруженныеДокументыСрезПоследних.Период,
	|	апЗагруженныеДокументыСрезПоследних.ДатаСоздания
	|ИЗ
	|	РегистрСведений.апЗагруженныеДокументы.СрезПоследних(
	|			,
	|			Агент = &Агент
	|				И (ДатаСоздания МЕЖДУ &НачПериода И &КонПериода)
	|				И Документ ССЫЛКА Документ.КпкКасса) КАК апЗагруженныеДокументыСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	апЗагруженныеДокументыСрезПоследних.Документ.МоментВремени
	|АВТОУПОРЯДОЧИВАНИЕ"; 
	
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(ТекущаяДата() - (86400 * ИнтервалВыгрузкиПодтверждений)));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(ТекущаяДата()));	
	Запрос.УстановитьПараметр("Агент",      ВыбАгент);
	
	Результат = Запрос.Выполнить();
												
	ДобавитьЗаписиПоПодтверждениямДокументов(Результат, "749BE2E0-9B00-4D7B-9D4D-88CA53327511", "'Касса'");
				
КонецПроцедуры //ВыгрузитьПодтвержденияКассы  

&НаСервере  
Процедура ВыгрузитьПодтвержденияМерчендайзинга()
	
	//ТекстЗапроса = 
	//"ВЫБРАТЬ
	//|	апМерчендайзинг.Ссылка
	//|ПОМЕСТИТЬ Документы
	//|ИЗ
	//|	Документ.апМерчендайзинг КАК апМерчендайзинг
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	апЗагруженныеДокументыСрезПоследних.Документ КАК Ссылка,
	//|	апЗагруженныеДокументыСрезПоследних.Агент,
	//|	апЗагруженныеДокументыСрезПоследних.Период,
	//|	апЗагруженныеДокументыСрезПоследних.ДатаСоздания
	//|ИЗ
	//|	РегистрСведений.апЗагруженныеДокументы.СрезПоследних(
	//|			,
	//|			Агент = &Агент
	//|				И (ДатаСоздания МЕЖДУ &НачПериода И &КонПериода)) КАК апЗагруженныеДокументыСрезПоследних
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документы КАК Документы
	//|		ПО апЗагруженныеДокументыСрезПоследних.Документ = Документы.Ссылка
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	апЗагруженныеДокументыСрезПоследних.Документ.МоментВремени
	//|АВТОУПОРЯДОЧИВАНИЕ";   
	//
	//Запрос = Новый Запрос(ТекстЗапроса);
	//
	//Запрос.УстановитьПараметр("НачПериода", НачалоДня(ТекущаяДата() - (86400 * ИнтервалВыгрузкиПодтверждений)));
	//Запрос.УстановитьПараметр("КонПериода", КонецДня(ТекущаяДата()));	
	//Запрос.УстановитьПараметр("Агент",      ВыбАгент);
	//
	//Результат = Запрос.Выполнить();
	//
	//ДобавитьЗаписиПоПодтверждениямДокументов(Результат, "61DEE5FE-D0A8-4842-A6AF-A8D33F298845", "'Мерчендайзинг'");
			
КонецПроцедуры //ВыгрузитьПодтвержденияМерчендайзинга   

&НаСервере  
Процедура ВыгрузитьПодтвержденияПосещений()
	
	//ТекстЗапроса = 
	//"ВЫБРАТЬ
	//|	апПосещение.Ссылка
	//|ПОМЕСТИТЬ Документы
	//|ИЗ
	//|	Документ.апПосещение КАК апПосещение
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	апЗагруженныеДокументыСрезПоследних.Документ КАК Ссылка,
	//|	апЗагруженныеДокументыСрезПоследних.Агент,
	//|	апЗагруженныеДокументыСрезПоследних.Период,
	//|	апЗагруженныеДокументыСрезПоследних.ДатаСоздания
	//|ИЗ
	//|	РегистрСведений.апЗагруженныеДокументы.СрезПоследних(
	//|			,
	//|			Агент = &Агент
	//|				И (ДатаСоздания МЕЖДУ &НачПериода И &КонПериода)) КАК апЗагруженныеДокументыСрезПоследних
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документы КАК Документы
	//|		ПО апЗагруженныеДокументыСрезПоследних.Документ = Документы.Ссылка
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	апЗагруженныеДокументыСрезПоследних.Документ.МоментВремени
	//|АВТОУПОРЯДОЧИВАНИЕ";   
	//
	//Запрос = Новый Запрос(ТекстЗапроса);
	//
	//Запрос.УстановитьПараметр("НачПериода", НачалоДня(ТекущаяДата() - (86400 * ИнтервалВыгрузкиПодтверждений)));
	//Запрос.УстановитьПараметр("КонПериода", КонецДня(ТекущаяДата()));	
	//Запрос.УстановитьПараметр("Агент",      ВыбАгент);
	//
	//Результат = Запрос.Выполнить();
	//
	//ДобавитьЗаписиПоПодтверждениямДокументов(Результат, "9F147C59-5EE8-4550-8289-12ECFE5D0617", "'Посещение'");
	
КонецПроцедуры //ВыгрузитьПодтвержденияМерчендайзинга   
   
&НаСервере
Процедура ВыгрузитьПодтвержденияРеализаций()
	
	//ТекстЗапроса = 
	//"ВЫБРАТЬ
	//|	РеализацияТоваровУслуг.Ссылка
	//|ПОМЕСТИТЬ РеализацияТоваровУслуг
	//|ИЗ
	//|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	апЗагруженныеДокументыСрезПоследних.Документ КАК Ссылка,
	//|	апЗагруженныеДокументыСрезПоследних.Агент,
	//|	апЗагруженныеДокументыСрезПоследних.Период,
	//|	апЗагруженныеДокументыСрезПоследних.ДатаСоздания
	//|ИЗ
	//|	РегистрСведений.апЗагруженныеДокументы.СрезПоследних(
	//|			,
	//|			Агент = &Агент
	//|				И (ДатаСоздания МЕЖДУ &НачПериода И &КонПериода)) КАК апЗагруженныеДокументыСрезПоследних
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//|		ПО апЗагруженныеДокументыСрезПоследних.Документ = РеализацияТоваровУслуг.Ссылка
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	апЗагруженныеДокументыСрезПоследних.Документ.МоментВремени
	//|АВТОУПОРЯДОЧИВАНИЕ";
	//
	//Запрос = Новый Запрос(ТекстЗапроса);
	//
	//Запрос.УстановитьПараметр("НачПериода", НачалоДня(ТекущаяДата() - (86400 * ИнтервалВыгрузкиПодтверждений)));
	//Запрос.УстановитьПараметр("КонПериода", КонецДня(ТекущаяДата()));	
	//Запрос.УстановитьПараметр("Агент",      ВыбАгент);
	//
	//Результат = Запрос.Выполнить();
	//
	//ДобавитьЗаписиПоПодтверждениямДокументов(Результат, "7FFB418C-73C9-4883-91C5-827FA5145A3A", "'Реализация'");
		
КонецПроцедуры //ВыгрузитьПодтвержденияПеремещений

&НаСервере
Процедура ВыгрузитьПодтвержденияПоступлений()
	
	//ТекстЗапроса = 
	//"ВЫБРАТЬ
	//|	ПоступлениеТоваровУслуг.Ссылка
	//|ПОМЕСТИТЬ Документы
	//|ИЗ
	//|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	апЗагруженныеДокументыСрезПоследних.Документ КАК Ссылка,
	//|	апЗагруженныеДокументыСрезПоследних.Агент,
	//|	апЗагруженныеДокументыСрезПоследних.Период,
	//|	апЗагруженныеДокументыСрезПоследних.ДатаСоздания
	//|ИЗ
	//|	РегистрСведений.апЗагруженныеДокументы.СрезПоследних(
	//|			,
	//|			Агент = &Агент
	//|				И (ДатаСоздания МЕЖДУ &НачПериода И &КонПериода)) КАК апЗагруженныеДокументыСрезПоследних
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документы КАК Документы
	//|		ПО апЗагруженныеДокументыСрезПоследних.Документ = Документы.Ссылка
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	апЗагруженныеДокументыСрезПоследних.Документ.МоментВремени
	//|АВТОУПОРЯДОЧИВАНИЕ";             
	//
	//Запрос = Новый Запрос(ТекстЗапроса);
	//
	//Запрос.УстановитьПараметр("НачПериода", НачалоДня(ТекущаяДата() - (86400 * ИнтервалВыгрузкиПодтверждений)));
	//Запрос.УстановитьПараметр("КонПериода", КонецДня(ТекущаяДата()));	
	//Запрос.УстановитьПараметр("Агент",      ВыбАгент);
	//
	//Результат = Запрос.Выполнить();
	//
	//ДобавитьЗаписиПоПодтверждениямДокументов(Результат, "C9850D61-BC15-445A-8B1A-E328CC45DDAE", "'Поступления'");
		
КонецПроцедуры //ВыгрузитьПодтвержденияПоступлений

&НаСервере  
Процедура ВыгрузитьПодтвержденияВозвратов()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	апЗагруженныеДокументыСрезПоследних.Документ КАК Ссылка,
	|	апЗагруженныеДокументыСрезПоследних.Агент,
	|	апЗагруженныеДокументыСрезПоследних.Период,
	|	апЗагруженныеДокументыСрезПоследних.ДатаСоздания
	|ИЗ
	|	РегистрСведений.апЗагруженныеДокументы.СрезПоследних(
	|			,
	|			Агент = &Агент
	|				И (ДатаСоздания МЕЖДУ &НачПериода И &КонПериода)
	|				И Документ ССЫЛКА Документ.ВозвратОтПокупателя) КАК апЗагруженныеДокументыСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	апЗагруженныеДокументыСрезПоследних.Документ.МоментВремени
	|АВТОУПОРЯДОЧИВАНИЕ"; 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(ТекущаяДата() - (86400 * ИнтервалВыгрузкиПодтверждений)));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(ТекущаяДата()));	
	Запрос.УстановитьПараметр("Агент",      ВыбАгент);
	
	Результат = Запрос.Выполнить();
	
	ДобавитьЗаписиПоПодтверждениямДокументов(Результат, "4971b041-beab-4fa6-b1e8-10138f04fe44", "'Возврат товаров'");
		
КонецПроцедуры //ВыгрузитьПодтвержденияВозвратов

&НаСервере
Процедура ВыгрузитьПодтвержденияПеремещений()
	
	//ТекстЗапроса = 
	//"ВЫБРАТЬ
	//|	ПеремещениеТоваров.Ссылка
	//|ПОМЕСТИТЬ ПеремещениеТоваров
	//|ИЗ
	//|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	апЗагруженныеДокументыСрезПоследних.Документ КАК Ссылка,
	//|	апЗагруженныеДокументыСрезПоследних.Агент,
	//|	апЗагруженныеДокументыСрезПоследних.Период,
	//|	апЗагруженныеДокументыСрезПоследних.ДатаСоздания
	//|ИЗ
	//|	РегистрСведений.апЗагруженныеДокументы.СрезПоследних(
	//|			,
	//|			Агент = &Агент
	//|				И (ДатаСоздания МЕЖДУ &НачПериода И &КонПериода)) КАК апЗагруженныеДокументыСрезПоследних
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПеремещениеТоваров КАК ПеремещениеТоваров
	//|		ПО апЗагруженныеДокументыСрезПоследних.Документ = ПеремещениеТоваров.Ссылка
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	апЗагруженныеДокументыСрезПоследних.Документ.МоментВремени
	//|АВТОУПОРЯДОЧИВАНИЕ";
	//
	//Запрос = Новый Запрос(ТекстЗапроса);
	//
	//Запрос.УстановитьПараметр("НачПериода", НачалоДня(ТекущаяДата() - (86400 * ИнтервалВыгрузкиПодтверждений)));
	//Запрос.УстановитьПараметр("КонПериода", КонецДня(ТекущаяДата()));	
	//Запрос.УстановитьПараметр("Агент",      ВыбАгент);
	//
	//Результат = Запрос.Выполнить();
	//
	//ДобавитьЗаписиПоПодтверждениямДокументов(Результат, "77525C87-CB2F-405E-A92E-6F373EDEECE7", "'Перемещение'");
		
КонецПроцедуры //ВыгрузитьПодтвержденияПеремещений

&НаСервере
Процедура ВыгрузитьПодтвержденияСчетФактур()
	
	//ТекстЗапроса = 
	//"ВЫБРАТЬ
	//|	СчетФактураВыданный.Ссылка
	//|ПОМЕСТИТЬ СчетФактураВыданный
	//|ИЗ
	//|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	апЗагруженныеДокументыСрезПоследних.Документ КАК Ссылка,
	//|	апЗагруженныеДокументыСрезПоследних.Агент,
	//|	апЗагруженныеДокументыСрезПоследних.Период,
	//|	апЗагруженныеДокументыСрезПоследних.ДатаСоздания
	//|ИЗ
	//|	РегистрСведений.апЗагруженныеДокументы.СрезПоследних(
	//|			,
	//|			Агент = &Агент
	//|				И (ДатаСоздания МЕЖДУ &НачПериода И &КонПериода)) КАК апЗагруженныеДокументыСрезПоследних
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетФактураВыданный КАК СчетФактураВыданный
	//|		ПО апЗагруженныеДокументыСрезПоследних.Документ = СчетФактураВыданный.Ссылка
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	апЗагруженныеДокументыСрезПоследних.Документ.МоментВремени
	//|АВТОУПОРЯДОЧИВАНИЕ";
	//
	//Запрос = Новый Запрос(ТекстЗапроса);
	//
	//Запрос.УстановитьПараметр("НачПериода", НачалоДня(ТекущаяДата() - (86400 * ИнтервалВыгрузкиПодтверждений)));
	//Запрос.УстановитьПараметр("КонПериода", КонецДня(ТекущаяДата()));	
	//Запрос.УстановитьПараметр("Агент",      ВыбАгент);
	//
	//Результат = Запрос.Выполнить();
	//
	//ДобавитьЗаписиПоПодтверждениямДокументов(Результат, "D7D70DE1-4F98-4153-82F1-12C84EBF81A5", "'Счет-фактура'");
		
КонецПроцедуры //ВыгрузитьПодтвержденияСчетФактур

&НаСервере
Процедура ВыгрузитьПодтвержденияДокументов()
	
	Текст = ДокОбмена;
	Текст.ДобавитьСтроку("<Begin>" +Т_+ "Ref_Confirm" +Т_+ "Struct:DocID,DocState,DocNumber,=Category");

	
	ИнтервалВыгрузкиПодтверждений = Константы.апИнтервалПодтверждений.Получить();
	           	
	
	   	ВыгрузитьПодтвержденияЗаказовПокупателей();
		
		ВыгрузитьПодтвержденияКассы();
		
		ВыгрузитьПодтвержденияВозвратов();
		
		//ВыгрузитьПодтвержденияМерчендайзинга();
		//
		//ВыгрузитьПодтвержденияПосещений();
		//
		//ВыгрузитьПодтвержденияПеремещений();
		//
		//ВыгрузитьПодтвержденияРеализаций();
		//
		//ВыгрузитьПодтвержденияПоступлений();
		//
		//ВыгрузитьПодтвержденияСчетФактур();
				
	Текст.ДобавитьСтроку("<End>"+Т_+ "Ref_Confirm");
	
КонецПроцедуры //ВыгрузитьПодтвержденияДокументов

&НаСервере
Процедура ВыгрузитьПодтвержденияСправочников()
	
	//СоответствиеСпрЗагр = Новый Соответствие();
	//
	//СоответствиеСпрЗагр.Вставить("9450980f-fb59-47e3-bae2-aa3c58441b1a", "Партнеры");	
	//СоответствиеСпрЗагр.Вставить("735a9ce5-dcc1-4d1a-8f8d-643a50a6befc", "СоглашенияСКлиентами");
	//СоответствиеСпрЗагр.Вставить("d3dbb02e-681e-4fc2-ad0e-8ef1234e9f48", "Контрагенты");
	//СоответствиеСпрЗагр.Вставить("cf387a58-4655-41b5-a460-85884d1f20d0", "КонтактныеЛицаПартнеров");     	
	//СоответствиеСпрЗагр.Вставить("05ea7926-febb-4d82-97fc-19294dd5dd29", "апФотографииДокументов");
	//СоответствиеСпрЗагр.Вставить("e01cf3a3-6765-4fd3-801c-ccdbf85c78fc", "ФотоСправочников");
	//
	//ТабСпр = Новый ТаблицаЗначений;
	//ТабСпр.Колонки.Добавить("ВидСпр");
	//ТабСпр.Колонки.Добавить("Объект");  
	//
	//Для Каждого ЭлементСписка Из СписЗагруженныхОбъектовСпр Цикл		
	//	ОбъектСпр     = ЭлементСписка.Значение;
	//	Представление = ЭлементСписка.Представление;
	//	
	//	СтрокаТаб = ТабСпр.Добавить();		
	//	СтрокаТаб.Объект = ОбъектСпр;
	//	СтрокаТаб.ВидСпр = Представление;		        		
	//КонецЦикла;
	//
	//ТабСпр.Сортировать("ВидСпр");
	//
	//ДокОбмена.ЗаписатьНачалоЭлемента("CATALOGS");
	//
	//ДобавитьПоле("Comment", "Подтверждения справочников");	
	//
	//ТекВидСпр = "";
	//НужноЗакрытьТег = Ложь;
	//
	//Для Каждого СтрокаТаб Из ТабСпр Цикл 
	//	 		
	//	#Если Клиент Тогда
	//		ОбработкаПрерыванияПользователя();
	//	#КонецЕсли   
	//	
	//	ИдСпр = "";
	//	Для Каждого ЭлемСоотв Из СоответствиеСпрЗагр Цикл			
	//		Если (ЭлемСоотв.Значение = "ФотоСправочников" и СтрокаТаб.ВидСпр = "ПартнерыПрисоединенныеФайлы") или
	//			 (ЭлемСоотв.Значение = "ФотоСправочников" и СтрокаТаб.ВидСпр = "НоменклатураПрисоединенныеФайлы") или 
	//			 (ЭлемСоотв.Значение = СтрокаТаб.ВидСпр) Тогда
	//			ИдСпр = ЭлемСоотв.Ключ;
	//			Прервать;			
	//	   Иначе
	//		   Продолжить;
	//	   КонецЕсли;		
	//	КонецЦикла;
	//	
	//	Если ПустаяСтрока(ИдСпр) Тогда Продолжить; КонецЕсли;
	//			
	//	Если ТекВидСпр <> СтрокаТаб.ВидСпр Тогда 
	//		
	//		Если ТекВидСпр <> "" Тогда		
	//			НужноЗакрытьТег = Ложь;
	//			ДокОбмена.ЗаписатьКонецЭлемента(); //CONFIRMATIONS			
	//			ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG      				
	//		КонецЕсли;	
	//		
	//		ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	//				
	//		ДобавитьПоле("GUID", ИдСпр);
	//		
	//		ДобавитьПоле("Comment", "Подтверждения справочника '" + СтрокаТаб.ВидСпр + "'");	
	//		
	//		ДокОбмена.ЗаписатьНачалоЭлемента("CONFIRMATIONS");	
	//		
	//		НужноЗакрытьТег = Истина;
	//		
	//	КонецЕсли;
	//	
	//	ТекЭлемент = СтрокаТаб.Объект;
	//	
	//	ЗаписатьЭлементВДокументОбмена(Новый Структура("GUID", ТекЭлемент));
	//	
	//	ТекВидСпр = СтрокаТаб.ВидСпр;
	//	
	//КонецЦикла;	
	//
	//Если НужноЗакрытьТег Тогда 
	//	
	//	ДокОбмена.ЗаписатьКонецЭлемента(); //CONFIRMATIONS
	//	
	//	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
	//	
	//КонецЕсли;
	//
	//ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOGS   	
	
КонецПроцедуры //ВыгрузитьПодтвержденияСправочников

&НаСервере
Процедура ВыгрузитьПодтвержденияФотографий()
	
	//ДокОбмена.ЗаписатьНачалоЭлемента("PICTURES");
	//
	//	ДобавитьПоле("Comment", "Подтверждения фотографий");	
	//	
	//	ДокОбмена.ЗаписатьНачалоЭлемента("CONFIRMATIONS");	
	//	
	//	Для Каждого СтрокаТаб Из ТабЗагруженныхФото Цикл 
	//		
	//		#Если Клиент Тогда
	//			ОбработкаПрерыванияПользователя();
	//		#КонецЕсли   	
	//	
	//		ЗаписатьЭлементВДокументОбмена(Новый Структура("GUID", СтрокаТаб.ИдФото));
	//	
	//	КонецЦикла;
	//		
	//	ДокОбмена.ЗаписатьКонецЭлемента(); //CONFIRMATIONS  		
	//
	//ДокОбмена.ЗаписатьКонецЭлемента(); //PICTURES   	
	
КонецПроцедуры //ВыгрузитьПодтвержденияФотографий

&НаСервере
Процедура ВыгрузитьПодтверждения(ЗаписатьОбъявление = Ложь) Экспорт
	
	ВыгрузитьПодтвержденияДокументов(); 
	
	//ВыгрузитьПодтвержденияСправочников();
	
	//ВыгрузитьПодтвержденияФотографий();
	
КонецПроцедуры //ВыгрузитьПодтверждения 

&НаСервере
Функция ПолучитьТаблицуНумераторов()
	
	ТаблНумераторов = Новый ТаблицаЗначений;
	ТаблНумераторов.Колонки.Добавить("Нумератор");
	ТаблНумераторов.Колонки.Добавить("ИмяДокумента");
	ТаблНумераторов.Колонки.Добавить("ИдНумератора");
	ТаблНумераторов.Колонки.Добавить("ИдОбъекта");
	
	СтрокаНумераторов = ТаблНумераторов.Добавить();
	СтрокаНумераторов.Нумератор 	= Перечисления.апВидыДокументов.Заказ;
	СтрокаНумераторов.ИмяДокумента	= "ЗаказКлиента";
	СтрокаНумераторов.ИдНумератора 	= "293ff118-c039-4977-bc7b-1a73764237e0";
	СтрокаНумераторов.ИдОбъекта		= "e01e1f5c-d6e4-46e8-b923-3758b0d79bde";
	
	СтрокаНумераторов = ТаблНумераторов.Добавить();
	СтрокаНумераторов.Нумератор 	= Перечисления.апВидыДокументов.Реализация;
	СтрокаНумераторов.ИмяДокумента	= "РеализацияТоваровУслуг";
	СтрокаНумераторов.ИдНумератора 	= "bd6460d1-5b99-41fe-b86d-34fdd8ce98c0";
	СтрокаНумераторов.ИдОбъекта		= "7ffb418c-73c9-4883-91c5-827fa5145a3a";
	
	СтрокаНумераторов = ТаблНумераторов.Добавить();
	СтрокаНумераторов.Нумератор 	= Перечисления.апВидыДокументов.СчетФактура;
	СтрокаНумераторов.ИмяДокумента	= "СчетФактураВыданный";
	СтрокаНумераторов.ИдНумератора 	= "d0ff140d-de46-4894-86f4-f1296ba35cc1";
	СтрокаНумераторов.ИдОбъекта		= "d7d70de1-4f98-4153-82f1-12c84ebf81a5";
	
	СтрокаНумераторов = ТаблНумераторов.Добавить();
	СтрокаНумераторов.Нумератор 	= Перечисления.апВидыДокументов.ПКО;
	СтрокаНумераторов.ИмяДокумента	= "ПриходныйКассовыйОрдер";
	СтрокаНумераторов.ИдНумератора 	= "b04b9dde-1868-4a80-9507-d66ecfeae942";
	СтрокаНумераторов.ИдОбъекта		= "749be2e0-9b00-4d7b-9d4d-88ca53327511";
	
	СтрокаНумераторов = ТаблНумераторов.Добавить();
	СтрокаНумераторов.Нумератор 	= Перечисления.апВидыДокументов.РКО;
	СтрокаНумераторов.ИмяДокумента	= "РасходныйКассовыйОрдер";
	СтрокаНумераторов.ИдНумератора 	= "a695650b-7c77-4426-a33f-84d336a5c476";
	СтрокаНумераторов.ИдОбъекта		= "3890d435-96ba-4481-abc0-23782e15b32f";
	
	СтрокаНумераторов = ТаблНумераторов.Добавить();
	СтрокаНумераторов.Нумератор 	= Перечисления.апВидыДокументов.Мерчендайзинг;
	СтрокаНумераторов.ИмяДокумента	= "апМерчендайзинг";
	СтрокаНумераторов.ИдНумератора 	= "46f4a039-ebe4-4830-97a7-482b1ac1dfbe";
	СтрокаНумераторов.ИдОбъекта		= "61dee5fe-d0a8-4842-a6af-a8d33f298845";
	
	СтрокаНумераторов = ТаблНумераторов.Добавить();
	СтрокаНумераторов.Нумератор 	= Перечисления.апВидыДокументов.Посещение;
	СтрокаНумераторов.ИмяДокумента	= "апПосещение";
	СтрокаНумераторов.ИдНумератора 	= "d8d7b95b-6160-4aaf-a20d-7fb7fe4561d9";
	СтрокаНумераторов.ИдОбъекта		= "9f147c59-5ee8-4550-8289-12ecfe5d0617";
	
	СтрокаНумераторов = ТаблНумераторов.Добавить();
	СтрокаНумераторов.Нумератор 	= Перечисления.апВидыДокументов.Перемещение;
	СтрокаНумераторов.ИмяДокумента	= "ПеремещениеТоваров";
	СтрокаНумераторов.ИдНумератора 	= "577289c4-3526-4e6e-8506-50d45ad3066c";
	СтрокаНумераторов.ИдОбъекта		= "77525c87-cb2f-405e-a92e-6f373edeece7";
	
	СтрокаНумераторов = ТаблНумераторов.Добавить();
	СтрокаНумераторов.Нумератор 	= Перечисления.апВидыДокументов.Поступление;
	СтрокаНумераторов.ИмяДокумента	= "ПоступлениеТоваровУслуг";
	СтрокаНумераторов.ИдНумератора 	= "ad10c572-3439-49b7-8986-7dc61e267309";
	СтрокаНумераторов.ИдОбъекта		= "c9850d61-bc15-445a-8b1a-e328cc45ddae";
	
	СтрокаНумераторов = ТаблНумераторов.Добавить();
	СтрокаНумераторов.Нумератор 	= Перечисления.апВидыДокументов.Возврат;
	СтрокаНумераторов.ИмяДокумента	= "ВозвратТоваровОтКлиента";
	СтрокаНумераторов.ИдНумератора 	= "ad10c572-3439-49b7-8986-7dc61e267309";
	СтрокаНумераторов.ИдОбъекта		= "c9850d61-bc15-445a-8b1a-e328cc45ddae";
	
	СтрокаНумераторов = ТаблНумераторов.Добавить();
	СтрокаНумераторов.Нумератор 	= Перечисления.апВидыДокументов.Задание;
	СтрокаНумераторов.ИмяДокумента	= "апЗадание";
	СтрокаНумераторов.ИдНумератора 	= "631876e0-d36a-4009-8a1d-105355ea56fa";
	СтрокаНумераторов.ИдОбъекта		= "b49074d6-3c0c-4361-b71d-bbf446ab02b6";
	
	Возврат ТаблНумераторов;
	
КонецФункции //ПолучитьТаблицуНумераторов

&НаСервере    
// Процедура выгрузки стартовых номеров документов
//
Процедура ВыгрузитьСтартовыеНомераДокументов()

	ТаблНумераторов = ПолучитьТаблицуНумераторов();
		
	Если Объект.ТабСтартовыеНомера.Количество() > 0 Тогда
		
		ДокОбмена.ЗаписатьНачалоЭлемента("NUMERATORS");
		
		ДокОбмена.ЗаписатьАтрибут("KILLALL", "1");
			
			ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
			
				Для Каждого ТекСтрока Из Объект.ТабСтартовыеНомера Цикл
					СтрокаНумератора = ТаблНумераторов.Найти(ТекСтрока.Нумератор);
					Если СтрокаНумератора <> Неопределено Тогда
						Если ТекСтрока.Пометка Тогда
							ДокОбмена.ЗаписатьНачалоЭлемента("ITEM");
								ДобавитьПоле("GUID", 		 Новый УникальныйИдентификатор());
								ДобавитьПоле("NumeratorId",  СтрокаНумератора.ИдНумератора);
								ДобавитьПоле("TypeId", 		 СтрокаНумератора.ИдОбъекта);
								ДобавитьПоле("BegPeriod", 	 Дата("19000101"));
								ДобавитьПоле("Prefix", 		 ТекСтрока.Префикс);
								ДобавитьПоле("Number", 		 ТекСтрока.СтартовыйНомер);
							ДокОбмена.ЗаписатьКонецЭлемента();  //ITEM
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			
			ДокОбмена.ЗаписатьКонецЭлемента();  //ELEMENTS
		
		ДокОбмена.ЗаписатьКонецЭлемента();  //NUMERATORS
	КонецЕсли;

КонецПроцедуры // ВыгрузитьСтартовыеНомераДокументов()

//&НаСервере
//// Процедура загружает параметры для формирования отчетов
////
//// Получаем значения переменных ОтчетЗапроса и ПараметрыЗапроса
//Процедура ЗагрузитьОтчеты(ТекстXML, ОбъектСпр)

//	//Если ОтчетЗапроса = Неопределено Тогда  
//	// 	Возврат; 
//	// КонецЕсли;
//	
//	Пока ТекстXML.ПрочитатьАтрибут() Цикл		
//		Если ТекстXML.Имя = "GUID" Тогда
//			ИдОтчета = СокрЛП(ТекстXML.Значение);
//			
//			СсылкаОтчета = ПолучитьСсылкуИзСправочника(ИдОтчета, "апОтчетыДляМобильныхУстройств");
//			
//			ОтчетЗапроса = СсылкаОтчета;
//			ОтветитьНаЗапросОтчета = Истина;
//		КонецЕсли;	
//		
//		//Если ОтчетЗапроса.Ссылка <> СсылкаОтчета Тогда
//		//	Возврат;
//		//КонецЕсли;		
//	КонецЦикла;
//		
//	ТекстXML.Прочитать();
//	// Заполнение табличной части
//	Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
//		
//		ТекстXML.Прочитать();
//		
//		Если СокрЛП(ТекстXML.ПолучитьАтрибут("GUID")) = "1242BAC5-4BC6-4B29-8B4F-78F87E49F4EB" Тогда
//			
//			ПараметрыЗапроса = Новый Структура;
//			Пока ТекстXML.Прочитать() Цикл
//				
//				Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
//					ТекстXML.Пропустить();
//					Прервать;
//				КонецЕсли;
//				
//				Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
//					Продолжить;
//				КонецЕсли;
//				
//				ИмяПараметра = ТекстXML.ПолучитьАтрибут("A01");
//				ТипПараметра = ТекстXML.ПолучитьАтрибут("A02");
//				
//				Если ТипПараметра = "ДатаВремя" Тогда
//					ЗначениеПараметра = Дата(ТекстXML.ПолучитьАтрибут("A04"));
//				ИначеЕсли ТипПараметра = "Логический" Тогда
//					ЗначениеПараметра = Булево(Число(ТекстXML.ПолучитьАтрибут("A04")));
//				ИначеЕсли Найти(ТипПараметра, "СправочникСсылка") > 0 Тогда
//					ИдПараметра = ТекстXML.ПолучитьАтрибут("A04");
//					ЗначениеПараметра = "";
//					
//					Если ТипПараметра = "СправочникСсылка.Организации" Тогда
//						ЗначениеПараметра = ПолучитьСсылкуИзСправочника(ИдПараметра, "Организации");
//					ИначеЕсли ТипПараметра = "СправочникСсылка.Контрагенты" Тогда
//						ЗначениеПараметра = ПолучитьСсылкуИзСправочника(ИдПараметра, "Партнеры");
//					ИначеЕсли ТипПараметра = "СправочникСсылка.Договоры" Тогда
//						ЗначениеПараметра = ПолучитьСсылкуИзСправочника(ИдПараметра, "ДоговорыКонтрагентов");	
//					ИначеЕсли ТипПараметра = "СправочникСсылка.Номенклатура" Тогда
//						ЗначениеПараметра = ПолучитьСсылкуИзСправочника(ИдПараметра, "Номенклатура");
//					ИначеЕсли ТипПараметра = "СправочникСсылка.ТипыЦен" Тогда
//						ЗначениеПараметра = ПолучитьСсылкуИзСправочника(ИдПараметра, "ВидыЦен");
//					КонецЕсли;
//				КонецЕсли;
//				
//				КлючСтруктуры = СтрЗаменить(ИмяПараметра, " ", "");
//				ПараметрыЗапроса.Вставить(КлючСтруктуры, ЗначениеПараметра);				
//			КонецЦикла;
//			
//			//добавим в параметры ссылку на агента
//			ПараметрыЗапроса.Вставить("Агент", ВыбАгент.Ссылка);
//		КонецЕсли;
//	КонецЕсли;

//КонецПроцедуры // ЗагрузитьОтчеты(ТекстXML, ОбъектСпр, ЭтоНовыйОбъект)()

////////////////////////////////////
/////////////////////////////////////
&НаСервере
Процедура ОбойтиСтрокуДерева(СтрокаДерева) 
	
	Для Каждого ВеткаДерева Из СтрокаДерева.Строки Цикл
			
		Идентификатор     = ВеткаДерева.Идентификатор;
		ЗначениеКонстанты = ВеткаДерева.Значение;
		Ключ			  = ВеткаДерева.Ключ;
		
		Если ЗначениеКонстанты = Неопределено  Тогда 
			ОбойтиСтрокуДерева(ВеткаДерева);
			Продолжить; 
		КонецЕсли;
		 		
		Если ПустаяСтрока(Идентификатор) И ВеткаДерева.Строки.Количество()>0 Тогда
			ОбойтиСтрокуДерева(ВеткаДерева);
			Продолжить;
		КонецЕсли;
		
		Если Ключ = "ОтображениеКодов" Тогда							
			ЗначениеКонстанты = ?(ЗначениеКонстанты = 0, Ложь, Истина);												
		ИначеЕсли Ключ = "ИмяАгента" Тогда							
			ЗначениеКонстанты = Строка(ЗначениеКонстанты);											
		ИначеЕсли Ключ = "Расписание" Тогда
			Если ЗначениеЗаполнено(ЗначениеКонстанты) Тогда
				Если ТипЗнч(ЗначениеКонстанты) = Тип("СправочникСсылка.апНастройкиТрекинга") Тогда //иногда в значении константы сохранялась строка вместо ссылки
					РабочееВремя = Формат(ЗначениеКонстанты.ВремяНачала, "ДФ=HH:mm") + "-" + Формат(ЗначениеКонстанты.ВремяОкончания, "ДФ=HH:mm");							
					ДобавитьКонстанту("e38fe34e-f36a-44c9-9dbd-a29f7c925940", ЗначениеКонстанты.ПериодПовтораВТечениеДня);
					ДобавитьКонстанту("1de1dae1-a088-4c5b-a68e-4d233b49683a", РабочееВремя);							
					ДобавитьКонстанту("428f867c-0bf1-45b2-b812-ef1d284d3e3f", ЗначениеКонстанты.ДниНедели);
				Иначе
					ЗначениеКонстанты = "";
				КонецЕсли;
			КонецЕсли; 										
		ИначеЕсли Ключ = "СписокЗакладокЖурнала" Тогда    						
			ЗначениеКонстанты = Строка(ЗначениеКонстанты);
			ЗначениеКонстанты = СтрЗаменить(ЗначениеКонстанты, ";", ",");
			ЗначениеКонстанты = СтрЗаменить(ЗначениеКонстанты, " ", "");
		//эту константу не выгружаем, а формируем отдельный файл	
		ИначеЕсли Ключ = "СписокБазДанных" Тогда
			МассивПодстрок = РазложитьСтрокуНаМассивПодстрок(ЗначениеКонстанты, ";");
			Для Сч = 0 По МассивПодстрок.Количество()-1 Цикл
				СписокБазДанных.Добавить(МассивПодстрок[Сч]);	
			КонецЦикла;
			
			ЗначениеКонстанты = "";
		ИначеЕсли Ключ = "РежимСортировки" Тогда
			//если константа задана неверно, то передаем значение по умолчанию
			Если СокрЛП(ЗначениеКонстанты)="Код" Или СокрЛП(ЗначениеКонстанты)="Наименование" Или СокрЛП(ЗначениеКонстанты)="Остаток" Или СокрЛП(ЗначениеКонстанты)="ПорядокВФайлеВыгрузки" Тогда
			Иначе
				ЗначениеКонстанты = "";
			КонецЕсли;	
		КонецЕсли;
		
		//для "пустого" пароля доступа к настройкам агента
		Если Ключ = "ПарольНастроек" И Не ЗначениеЗаполнено(ЗначениеКонстанты) Тогда
			ДобавитьКонстанту(Идентификатор, ЗначениеКонстанты);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Идентификатор) И ЗначениеЗаполнено(ЗначениеКонстанты) Тогда							
			ДобавитьКонстанту(Идентификатор, ЗначениеКонстанты);															
		КонецЕсли; 		
				
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьЗапросы() Экспорт
	
	Возврат Истина;
	
КонецФункции //ВыгрузитьЗапросы()
 
&НаСервере
Функция СформироватьФайлВыгрузки(ОтветнаяВыгрузка = Ложь)
	
	УстановитьНастройкиАгента();
	
	//ДопНастройкиАгента = ВыбАгент.апНастройкиПриложения.Настройки.Получить();
	
	//Если ДопНастройкиАгента = Неопределено Тогда
	//	ОповеститьОСобытии("Не сформированы настройки мобильного приложения для торгового агента: """ + ВыбАгент, СтатусСообщения.Внимание);
	//	Возврат Ложь;
	//КонецЕсли;
	
	//ТипыКонтактнойИнформации = ЗаполнитьПеречислениеКонтактнойИнформации();
	//СписокКонстант 			 = ЗаполнитьСписокКонстант();
	
	ОткрытьФайлВыгрузкиМТ();
	
	Если ДокОбмена = Неопределено Тогда		
		Возврат Ложь;
	КонецЕсли;
	
	ВыгрузитьПодтвержденияДокументов();
	
	#Если Клиент Тогда
		Состояние("Выгрузка структуры таблиц...");
	#КонецЕсли
	ВыгрузкаСтруктурТаблиц();
	
	#Если Клиент Тогда
		Состояние("Выгрузка скриптов...");
	#КонецЕсли
	ВыгрузкаСкриптов();
	
	#Если Клиент Тогда
		Состояние("Выгрузка перечислений...");
	#КонецЕсли
	ВыгрузкаПеречислений();
	
	// Выгружаем список констант				
	#Если Клиент Тогда
		Состояние("Выгрузка констант...");
	#КонецЕсли
	ВыгрузитьКонстанты();		
		
	#Если Клиент Тогда
		Состояние("Заполнение списка клиентов...");
	#КонецЕсли
	
	//апСерверМодуль.СформироватьСписокКлиентовАгентов(ВыбАгент, ПланПосещений, МассивКонтрагентов, МассивПартнеров);
	
	//Ассортимент    		= апСерверМодуль.СформироватьМассивВыгружаемыхОбъектов("Справочники", "Номенклатура",  ПолучитьТекстЗапросаДляНабораДанныхПоНоменклатуре(), ВыбАгент);	
	//МассивСкладов  		= апСерверМодуль.СформироватьМассивВыгружаемыхОбъектов("Справочники", "Склады", 		 ПолучитьТекстЗапросаДляНабораДанныхПоСкладам(), 	  ВыбАгент);
	//МассивВидовЦен 		= апСерверМодуль.СформироватьМассивВыгружаемыхОбъектов("Справочники", "ВидыЦен", 		 ПолучитьТекстЗапросаДляНабораДанныхПоВидамЦен(), 	  ВыбАгент);
	//МассивОрганизаций 	= апСерверМодуль.СформироватьМассивВыгружаемыхОбъектов("Справочники", "Организации",   ПолучитьТекстЗапросаДляНабораДанныхПоОрганизациям(), ВыбАгент);	
	
	// Выгружаем документы	
	#Если Клиент Тогда
		Состояние("Выгрузка документов...");
	#КонецЕсли 	

	//ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENTS");
	
		//ДобавитьПоле("Comment", "Документы");	
	
		// Если нет необходимости выгружать целиком документы, 		
		// то можно включить в выгрузку просто выгрузку подтверждений.
		// Чтобы не выгружать документы заказов, нужно закомментировать 
		// нижестоящую процедуру "ВыгрузитьЗаказыПокупателей"
		#Если Клиент Тогда
			Состояние("Выгрузка заказов...");
		#КонецЕсли					
		//ВыгрузитьЗаказыПокупателей();
		
		#Если Клиент Тогда
			Состояние("Выгрузка взаиморасчетов...");
		#КонецЕсли	
		ВыгрузитьВзаиморасчеты();
		
		#Если Клиент Тогда
			Состояние("Выгрузка маршрутов...");
		#КонецЕсли
		//ВыгрузитьМаршруты();
		
		#Если Клиент Тогда
			Состояние("Выгрузка реализаций...");
		#КонецЕсли			
		//ВыгрузитьПродажи();		
				
		#Если Клиент Тогда
			Состояние("Выгрузка заданий...");
		#КонецЕсли
		//Если Объект.флВыгружатьЗадания Тогда
		//	Если Объект.НачДатаВыгрузкиЗаданий <= Объект.КонДатаВыгрузкиЗаданий Тогда
		//		ВыгрузитьЗадания();
		//	Иначе
		//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Даты выгрузки заданий указаны неверно. Документы не выгружены",, "НачДатаВыгрузкиЗаданий", "Объект");
		//	КонецЕсли;
		//КонецЕсли;
		
		//ВыгрузитьОстальныеДокументы();
		
	//ДокОбмена.ЗаписатьКонецЭлемента();  // DOCUMENTS;
	
	#Если Клиент Тогда
		Состояние("Выгрузка стартовых номеров документов...");
	#КонецЕсли  	
	
	//Если Объект.флСтартовыеНомераДокументов Тогда
	//	ВыгрузитьСтартовыеНомераДокументов();
	//КонецЕсли; 	
	
	// Выгружаем справочные данные	
	#Если Клиент Тогда
		Состояние("Выгрузка справочников...");
	#КонецЕсли   				
	
	//ДокОбмена.ЗаписатьНачалоЭлемента("CATALOGS");
	
	//ДобавитьПоле("Comment", "Справочники");	
	 
		#Если Клиент Тогда
			Состояние("Выгрузка организаций...");
		#КонецЕсли 		
		ВыгрузитьОрганизации();
		
		#Если Клиент Тогда
			Состояние("Выгрузка договоров...");
		#КонецЕсли    
		//ВыгрузитьДоговоры(); 				
		
		//#Если Клиент Тогда
		//	Состояние("Выгрузка партнеров...");
		//#КонецЕсли   		
		//ВыгрузитьПартнеров();	
		
		//Если Константы.апВыгружатьКонтрагентов.Получить() Тогда
			#Если Клиент Тогда
				Состояние("Выгрузка контрагентов...");
			#КонецЕсли  
			ВыгрузитьКонтрагентов();	
		//КонецЕсли;
				
		#Если Клиент Тогда
			Состояние("Выгрузка контактной информации...");
		#КонецЕсли				
		//ВыгрузитьКонтактныеЛица();		
		//ВыгрузитьВидыКонтактнойИнформации();
		//ВыгрузитьКонтактнуюИнформацию();
		
		#Если Клиент Тогда
			Состояние("Выгрузка номенклатуры...");			
		#КонецЕсли  		
		ВыгрузитьНоменклатуру();
		
		#Если Клиент Тогда
			Состояние("Выгрузка матриц товаров...");			
		#КонецЕсли  		
		//ВыгрузитьМатрицыТоваров();
				
		#Если Клиент Тогда
			Состояние("Выгрузка истории продаж...");			
		#КонецЕсли  		
		ВыгрузитьИсториюПродаж();
				
		#Если Клиент Тогда
			Состояние("Выгрузка продаж...");			
		#КонецЕсли  		
		ВыгрузитьПродажи();
				
		#Если Клиент Тогда
			Состояние("Выгрузка дополнительной информации...");
		#КонецЕсли  
		//ВыгрузитьДополнительнуюИнформацию();
		
		#Если Клиент Тогда
			Состояние("Выгрузка справочника изображений...");
		#КонецЕсли  
		//ВыгрузитьСправочникИзображений();
				
	//ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOGS
		
	// Выгружаем картинки	
	#Если Клиент Тогда
		Состояние("Выгрузка картинок...");
	#КонецЕсли
	
	//ДокОбмена.ЗаписатьНачалоЭлемента("PICTURES");
	//
	//	ДобавитьПоле("KILLALL", "1");	
	//
	//	ДобавитьПоле("Comment", "Картинки");	
	//	
	//	СтрокаАрхива = "";
	//	
	//	ВыгрузитьИзображения();
	//
	//ДокОбмена.ЗаписатьКонецЭлемента();  // PICTURES;
	
	#Если Клиент Тогда
		Состояние("Выгрузка подтверждений...");
	#КонецЕсли
	ВыгрузитьПодтверждения();
 
	// Закрываем теги файла выгрузки
	ЗакрытьФайлВыгрузкиМТ();
			
	Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
		Возврат Ложь;
	КонецЕсли; 		
	
	#Если Клиент Тогда
		Состояние("");
	#КонецЕсли
	
	Возврат Истина;
	
КонецФункции //СформироватьФайлВыгрузки

&НаСервере
Функция ПолучитьПапкуОбменаВМУ() Экспорт
	
	ПапкаОбмена = "";
	
	Если ЗначениеЗаполнено(ВыбАгент) Тогда	
		
		ДопНастройкиАгента = ВыбАгент.апНастройкиПриложения.Настройки.Получить();
		
		Если Не ДопНастройкиАгента = Неопределено Тогда			
			НайдСтрока = ДопНастройкиАгента.Строки.Найти("ПапкаОбмена", "Ключ", Истина);										
			Если Не НайдСтрока = Неопределено Тогда	
				ПапкаОбмена = НайдСтрока.Значение; 			
			КонецЕсли;                                 			
		КонецЕсли;   	
		
		Если Не ЗначениеЗаполнено(ПапкаОбмена) Тогда
			ПапкаОбмена = ПапкаОбменаМУ;
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат ПапкаОбмена;	
	
КонецФункции //ПолучитьПапкуОбменаВМУ

&НаКлиенте
Функция ОтправкаФайлаНапрямуюВМобильноеУстройство() Экспорт
	
	РезультатВыгрузки = 0;
	
	ОповеститьОСобытии("Отправка данных в мобильное устройство...", СтатусСообщения.Информация);
	
	КаталогОбменаКПК = ПолучитьПапкуОбменаВМУ();
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(Режим);			
	ДиалогСохраненияФайла.Заголовок = "Укажите каталог сохранения файла выгрузки";
	ДиалогСохраненияФайла.Каталог = КаталогОбменаКПК;
	
	Если ДиалогСохраненияФайла.Выбрать() Тогда
		
		ВыбКаталог = ДиалогСохраненияФайла.Каталог;		
		
		Если Не ПустаяСтрока(АдресФайлаОбмена) Тогда
			ПолноеИмяФайлаОбмена = КаталогВременныхФайловКлиент + ?(Объект.флАрхив, "FromCDB.zip", "FromCDB.xml");
			// Получаем файл выгрузки из временного хранилища и сохраняем его локально на клиенте
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайлаОбмена);	
			Если ДвоичныеДанныеФайла = Неопределено Тогда
				ОповеститьОСобытии("Файл выгрузки для агента: " + ВыбАгент + " не получен из временного хранилища!", СтатусСообщения.Внимание);
				Возврат Ложь;
			КонецЕсли;   						
			ФайлОбменаНаДиске = Новый Файл(ПолноеИмяФайлаОбмена);
			Если ФайлОбменаНаДиске.Существует() Тогда
				УдалитьФайлы(ПолноеИмяФайлаОбмена);
			КонецЕсли;
			ДвоичныеДанныеФайла.Записать(ПолноеИмяФайлаОбмена);
		КонецЕсли;
		
		ФайлОбменаНаДиске = Новый Файл(ПолноеИмяФайлаОбмена);
		Если ФайлОбменаНаДиске.Существует() Тогда
			ИмяНовогоФайла = "From1C" + ФайлОбменаНаДиске.Расширение;
			КопироватьФайл(ИмяФайла, ВыбКаталог + "\" + ИмяНовогоФайла);
			ОповеститьОСобытии("Файл " + ИмяНовогоФайла + " успешно сохранен!", СтатусСообщения.Информация);
		Иначе
			ОповеститьОСобытии("Не найден файл выгрузки агента: " + ВыбАгент  + " по пути: " + ПолноеИмяФайлаОбмена + " на клиенте!", СтатусСообщения.Внимание);	
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Предупреждение("Каталог не выбран!");
		Возврат Ложь;
	КонецЕсли;
	
	Ответ = Вопрос("Открыть каталог с файлом выгрузки?", РежимДиалогаВопрос.ДаНет); 
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗапуститьПриложение(ВыбКаталог);
	КонецЕсли;
	
	ОповеститьОСобытии("Отправка данных в мобильное устройство успешно завершена!", СтатусСообщения.Информация);
	
	Возврат Истина;
	
КонецФункции // ОтправкаФайлаНапрямуюВМобильноеУстройство()

&НаСервере
Процедура ОтправитьФайлОбмена()
	 
	
			//КонецЕсли;
	
КонецПроцедуры //ОтправитьФайлОбмена()  

&НаСервере
// Функция СоздатьПодключениеКФТП
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//	ПодключениеКФТП
//
// Описание:
// 	Функция формирует новое подключениек ФТП-серверу по заданным настройка в системе
// 
Функция СоздатьПодключениеКФТП() Экспорт
	
	Сервер 			= СокрЛП(Константы.апФТПСервер.Получить());
	Логин 			= СокрЛП(Константы.апФТППользователь.Получить());
	Пароль 			= СокрЛП(Константы.апФТППароль.Получить());
	ПассивныйРежим 	= Константы.апФТППассивныйРежим.Получить();
	
	Если ПустаяСтрока(Сервер) Или ПустаяСтрока(Логин) Тогда
		ТекстСообщения = "В константах выставлены не все параметры соединения с FTP-сервером! Работа с FTP невозможна!";
		ОповеститьОСобытии(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ОповеститьОСобытии("Подключение к FTP-серверу...", СтатусСообщения.Информация, Ложь);
	
	Попытка
		ПодключениеКФТП = Новый FTPСоединение(Сервер, , Логин, Пароль, , ПассивныйРежим, 0);		
	Исключение
		ОповеститьОСобытии("Ошибка подключения. Причина: " + ОписаниеОшибки());			
		Возврат Неопределено;
	КонецПопытки;
	
	ОповеститьОСобытии("К FTP-серверу подключился...", СтатусСообщения.Информация);
	       	
	Возврат ПодключениеКФТП;  
	
КонецФункции // СоздатьПодключениеКФТП()
        
&НаСервере
Функция ОтправитьФайлаОбменаЧерезФТПСервер()
	
	ПодключениеКФТП = СоздатьПодключениеКФТП(); 
	
	Если ПодключениеКФТП = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	ФТППапка = ПапкаАгентаФТП;
	
	НаимАгента = СокрЛП(ВыбАгент.Наименование);
	Если ПустаяСтрока(ФТППапка) Тогда
		ОповеститьОСобытии("У агента: """ + НаимАгента + """ не указана папка обмена на FTP-сервере!");		
		Возврат Ложь;
	КонецЕсли;
	
	Если (Прав(ФтпПапка,1) <> "\") Или (Прав(ФтпПапка,1) <> "/") Тогда
		ФтпПапка = ФтпПапка + "/";
	КонецЕсли;
	
	ИмяФайлаБезПути = ИмяФайла;
	
	ФайлНаДиске = Новый Файл(ИмяФайла);    
	Если Не ФайлНаДиске.Существует() Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	// Берем расширение и меняем имя файла на From1C.X (X - прежнее расширение)
	Расширение = ФайлНаДиске.Расширение; 
	// Регистр файла важно соблюдать, т.к. на UNIX-FTP серверах регистр в имени файла имеет значение!!!
	ИмяФайлаНаСервере = "From1C" + Расширение; 
	
	ИмяФайлаФТП = ФтпПапка + ИмяФайлаНаСервере;
	
	Попытка     		
		ПодключениеКФТП.Записать(ИмяФайла, ИмяФайлаФТП);
		ТекстСообщения = "Данные для торгового агента: """ + НаимАгента + """ успешно выгружены на FTP-сервер!";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация);
		Возврат Истина;		
	Исключение	
		Если ПодключениеКФТП.НайтиФайлы(ФтпПапка).Количество() = 0 Тогда
			ОповеститьОСобытии("Данные для торгового агента: """ + НаимАгента + """ не отправлены!" +
							   " Причина: не существует папки на FTP-сервере " + ФтпПапка, СтатусСообщения.Важное);				
		Иначе
			ОповеститьОСобытии("Данные для торгового агента: """ + НаимАгента + """ не отправлены!" +  
							   " Причина: " + ОписаниеОшибки(), СтатусСообщения.Важное);				
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки;	
	
КонецФункции // ВыгрузитьДанныеНаФТП()

&НаСервере                                 
Процедура ОтправитьФайлаОбменаЧерезАгентСОД()
	
	#Если Клиент Тогда		
		Состояние("Отправка данных через Агент Плюс СОД...");
	#КонецЕсли
	Результат = ОтправитьДанныеЧерезАгентПлюсСОД();
	Если Результат Тогда
		ОповеститьОСобытии("Данные для торгового агента: """ + ВыбАгент + """ успешно выгружены на Агент Плюс СОД!", СтатусСообщения.Информация);
	Иначе
		ОповеститьОСобытии("Данные для торгового агента: """ + ВыбАгент + """ не выгружены на Агент Плюс СОД!", СтатусСообщения.Важное);
	КонецЕсли;
	
	#Если Клиент Тогда	
		Состояние("");
	#КонецЕсли     
	
КонецПроцедуры //ОтправитьФайлаОбменаЧерезАгентСОД()  

&НаСервере
Функция ОтправитьДанныеЧерезАгентПлюсСОД()
	
	апСерверМодуль.ДополнитьСлешВПуть(ПапкаАгентаСОД);		
	
	ПапкаОбменаАПС = Константы.апПапкаОбменаСОД.Получить();
	Если ПустаяСтрока(ПапкаОбменаАПС) Тогда
		ОповеститьОСобытии("Не указан каталог обмена для Агент Плюс СОД!");
		Возврат Ложь;
	КонецЕсли;
	
	апСерверМодуль.ДополнитьСлешВПуть(ПапкаОбменаАПС);		
	
	Если Не апСерверМодуль.ПроверитьСуществованиеКаталога(ПапкаОбменаАПС, Истина) Тогда		
		ОповеститьОСобытии("Не существует каталога """ + ПапкаОбменаАПС + """, указанного в качестве папки обмена для Агент Плюс СОД!");
		Возврат Ложь;
	КонецЕсли;
	
	ПолныйПутьПапкиАгента = ПапкаОбменаАПС + ПапкаАгентаСОД;
	
	апСерверМодуль.ДополнитьСлешВПуть(ПолныйПутьПапкиАгента);		
	
	Если Не апСерверМодуль.ПроверитьСуществованиеКаталога(ПолныйПутьПапкиАгента, Истина) Тогда
		ОповеститьОСобытии("Не существует каталога """ + ПолныйПутьПапкиАгента + """, указанного в качестве каталога обмена для агента: " + ВыбАгент);
		Возврат Ложь;
	КонецЕсли;
	
	ФайлНаДиске = Новый Файл(ИмяФайла);  	
	ИмяФайлаНаСервере = "From1C" + ФайлНаДиске.Расширение;
	
	ИмяФайлаАПС = ПолныйПутьПапкиАгента + ИмяФайлаНаСервере;	
	
	ВременныйФайлНаДиске = Новый Файл(ИмяФайла);
	Если ВременныйФайлНаДиске.Существует() Тогда  
		КопироватьФайл(ИмяФайла, ИмяФайлаАПС); //просто копируем файл из временной папки в папку обмена для Агент Плюс СОД
	КонецЕсли;
	
	Возврат Истина;	
	
КонецФункции // ОтправитьДанныеЧерезАгентПлюсСОД()

//////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ЗАГРУЗКИ ДАННЫХ
//////////////////////////////////////////////////////////

&НаСервере    
// Процедура предназначена для загрузки данных по трекам передвижения агента
// из текстового файла, который находится внутри архива, передаваемого с КПК
//
// Параметры:
//  ФайтТрека - текстовый файл, из которого нужно прочитать информацию по трекам
//
// Добавлено: Арт 2007-12-26
//
Процедура ЗагрузитьТреки(ФайлТрека) 
	
 	ХранитьФайлыТрековВоВнешнихФайлах = Константы.апХранитьФайлыТрековВоВнешнихФайлах.Получить();
	
	Если ХранитьФайлыТрековВоВнешнихФайлах Тогда	
		// Проверка папки хранения треков
		ПапкаТреков = СокрЛП(Константы.апПапкаХраненияТреков.Получить()); 		
		Если ПустаяСтрока(ПапкаТреков) Тогда
			ТекстСообщения = "Укажите значение константы ""Папка треков"" на форме настройки констант!";
			ОповеститьОСобытии(ТекстСообщения);
			Возврат;
		КонецЕсли;             			
		Если Не апСерверМодуль.ПроверитьСуществованиеКаталога(ПапкаТреков) Тогда		
			ТекстСообщения = "Не найден каталог, указанный в константе ""Папка хранения треков""!";
			ОповеститьОСобытии(ТекстСообщения);
			Возврат;   
		КонецЕсли;
	Иначе
		ПапкаТреков = КаталогВременныхФайловСервер + "_GPSTracks\";
		Результат = апСерверМодуль.ПроверитьСуществованиеКаталога(ПапкаТреков, Ложь, Истина);
		Если Не Результат Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ИмяФ = "Track_" + Формат(ТекущаяДата(), "ДФ=yyyyMMddhhmmss") + "_" + Строка(ВыбАгент.УникальныйИдентификатор()) + ".txt";
		апСерверМодуль.ДополнитьСлешВПуть(ПапкаТреков);		
		ПутьКФайлуТрека = ПапкаТреков + ИмяФ;
		КопироватьФайл(ФайлТрека, ПутьКФайлуТрека);			
	Исключение							
		ОповеститьОСобытии("Не удалось скопировать файл трека! Причина: " + ОписаниеОшибки(), СтатусСообщения.Внимание);
		Возврат;
	КонецПопытки;   		
	
	НаборЗаписей = РегистрыСведений.апТрекиПередвижений.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Агент.Установить(ВыбАгент);
	НаборЗаписей.Прочитать();
	
	НоваяЗапись = НаборЗаписей.Добавить();			
	НоваяЗапись.ДатаСоздания    = ТекущаяДата();		
	НоваяЗапись.Агент 		    = ВыбАгент;
	НоваяЗапись.Ключ 		    = Строка(Новый УникальныйИдентификатор());
	НоваяЗапись.ИмяФайла  		= ИмяФ;
	Если ХранитьФайлыТрековВоВнешнихФайлах Тогда
		НоваяЗапись.ПутьКФайлу = ПутьКФайлуТрека;
	Иначе		
		ФайлНаДиске  = Новый Файл(ПутьКФайлуТрека);          				
		ХранимыйФайл = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ФайлНаДиске.ПолноеИмя), Новый СжатиеДанных(9));
		НоваяЗапись.ФайлТрека = ХранимыйФайл;
	КонецЕсли;  		
	
	Если ВыполнитьОперациюДляОбъекта(НаборЗаписей, "запись") Тогда			
		ОповеститьОСобытии("Загружены новые данные трека передвижений", СтатусСообщения.Информация);
	Иначе					
		ОповеститьОСобытии("Не удалось записать новые данные трека передвижений в информационную базу!", СтатусСообщения.Важное);
		Возврат;			
	КонецЕсли; 	
		
КонецПроцедуры //ЗагрузитьТреки()

&НаКлиенте
Функция ЗагрузитьДанныеСАПСервера(ИдКПК = "") Экспорт
    
	Если ПустаяСтрока(ПапкаСервера) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КПКОбъектServer.АпсУстПапкуОбмена(ПапкаСервера);		
	
	//КПКОбъектServer.SetExchangeDir(ПапкаСервера);
	
	апСерверМодуль.ДополнитьСлешВПуть(ПапкаСервера);
	
	НаимАгента = Строка(ВыбАгент);
	
	Спис = Новый СписокЗначений;
	
	СтрИнфо = "";
	// Получаем данные на основе идентификатора КПК
	СтрИнфо = КПКОбъектServer.АпсПолучитьКПКИнфо(ИдКПК);
	//СтрИнфо = КПКОбъектServer.GetPPCInfo(ИдКПК);
	Если ПустаяСтрока(СтрИнфо) Тогда
		Текст = "Данные для агента: """ + НаимАгента + """ не загружены! Возможно, некорректно сформированы настройки для Агент Плюс СОД";
		ОповеститьОСобытии(Текст);
		Возврат Ложь;
	КонецЕсли;
	
	Спис = апСерверМодуль.ИзСтрокиВСписок(СтрИнфо, """,""");
	// В списке следующие значения:
	//0-й - идентификатор КПК
	//1-й - псевдоним торгового агента (владельца КПК)
	//2-й - директория обмена данными 
	//3-й - имя полученного с КПК файла с директорией
	//4-й - время сеанса
	//5-й - контрольная сумма полученного файла
	
	ИмяФайла = СокрЛП(Спис.Получить(3)); 
	
	Если ПустаяСтрока(ИмяФайла) Тогда				
		ОповеститьОСобытии("Не найден файл обмена от агента: """ + НаимАгента + """ на сервере.", СтатусСообщения.Информация);
		Возврат Ложь;
	КонецЕсли; 
	
	ФайлАгента = ПапкаСервера + ИмяФайла;
	ФайлЗагрузки = Новый Файл(ФайлАгента);
	Если НЕ ФайлЗагрузки.Существует() Тогда
		ТекстСообщения = "Данные от агента: """ + НаимАгента + """ на сервере отсутствуют.";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация);
		Возврат Ложь;
	КонецЕсли; 		
	
	Если ФайлЗагрузки = Неопределено Тогда
		ТекстСообщения = "Данные от агента: """ + НаимАгента + """ на сервере отсутствуют.";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация);
		Возврат Ложь;
	КонецЕсли;  
	
	// Копируем файл обмена
	ФайлЛокальный = КаталогВременныхФайловКлиент + ФайлЗагрузки.Имя;
	
	КопироватьФайл(ФайлАгента, ФайлЛокальный);
	
	// Если файл с треком перемещений, то нужно удалить временный файл
	Если ВРЕГ(ФайлЗагрузки.Расширение) = ".TXT" Тогда
		Попытка
			УдалитьФайлы(СокрЛП(ФайлЗагрузки.ПолноеИмя) + ".clt");			
		Исключение
			ТекстСообщения = "Не удалось удалить файл: " + ФайлЗагрузки.ПолноеИмя + " по причине: " + ОписаниеОшибки();																				
			ОповеститьОСобытии(ТекстСообщения);			
		КонецПопытки;		
	КонецЕсли;
   	
	// Обязательно оповещаем сервер о получении файла загрузки 1С:Предприятием!!!
	// Оповещение всегда проходит на основании идентификатора КПК!
	//КПКОбъектServer.АпсПроцессЗавершен(ИдКПК);
	
	Результат = ВыполнитьЗагрузкуДанных(ФайлЛокальный);	
	
	Если Не Результат Тогда
		ОповеститьОСобытии("Данные для агента """ + НаимАгента + """ не загружены!", СтатусСообщения.Важное);		
	КонецЕсли;
	
	//удаляем файл с данными
	ФайлАгентаДляУдаления = Новый Файл(ФайлАгента);
	Если ФайлАгентаДляУдаления.Существует() Тогда
		Попытка
			УдалитьФайлы(ФайлАгента);
		Исключение
			ТекстСообщения = "Не удалось удалить файл загрузки: " + ФайлАгента + " по причине: " + ОписаниеОшибки();							
			ОповеститьОСобытии(ТекстСообщения);			
		КонецПопытки;			
	КонецЕсли;
	  	
	//// Может быть что вместе с файлом трека пришел и файл выгрузки	
	//// Тогда проверяем также на наличие файла выгрузки To1C.zip
	//ИмяФайла   = "To1C.zip";
	//ФайлАгента = ПапкаСервера + ИмяФайла;	
	//ФайлАгентаНаДиске = Новый Файл(ФайлАгента);
	//Если ФайлАгентаНаДиске.Существует() Тогда
	//	ФайлЛокальный = КаталогВременныхФайловКлиент + ИмяФайла;	
	//	КопироватьФайл(ФайлАгента, ФайлЛокальный);	
	//	Результат = ВыполнитьЗагрузкуДанных(ФайлЛокальный);		
	//	Если Не Результат Тогда
	//		ОповеститьОСобытии("Данные для агента """ + НаимАгента + """ не загружены!", СтатусСообщения.Важное);		
	//	КонецЕсли;
	//КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ЗагрузитьДанныеСАПСервера()

&НаСервере
Функция ПолучитьФайлОбменаСФТПСервера()
	
	ПодключениеКФТП = СоздатьПодключениеКФТП();
	
	Если ПодключениеКФТП = Неопределено Тогда
		Возврат "";
	КонецЕсли;	
	
	ИмяФайла = "To1C.zip";
	
	НаимАгента = СокрЛП(ВыбАгент.Наименование);
	
	Путь = КаталогВременныхФайловСервер;
	
	ФтпПапка = ВыбАгент.апПапкаФТП;
	
	Если ПустаяСтрока(ФтпПапка) Тогда		
		ОповеститьОСобытии("У агента: """ + НаимАгента + """ не указана папка обмена на FTP-сервере!");		
		Возврат "";
	КонецЕсли;
	
	Если (Прав(ФтпПапка,1) <> "\") Или (Прав(ФтпПапка,1) <> "/") Тогда
		ФтпПапка = ФтпПапка + "/";
	КонецЕсли;
	
	ИмяФайлаФТП   = ФтпПапка + ИмяФайла;
	ФайлЛокальный = Путь + ИмяФайла;
	
	Попытка    		
		Если ПодключениеКФТП.НайтиФайлы(ФтпПапка, "To1C.*").Количество() = 0 Тогда
			ОповеститьОСобытии("Нет данных на FTP-сервере!");
			Возврат "";			
		Иначе
			ПодключениеКФТП.Получить(ИмяФайлаФТП, ФайлЛокальный);				
		КонецЕсли;  		
	Исключение             
		ТекстСообщения = "Ошибка при копировании файла с FTP-сервера: " + ОписаниеОшибки() + 
						 ". Данные от агента: """ + НаимАгента + """ не загружены!";
		ОповеститьОСобытии();			
		Возврат "";
	КонецПопытки;   	
	
	Попытка
		ПодключениеКФТП.Удалить(ФтпПапка, "To1C.*");
		//ОповеститьОСобытии("!");
	Исключение
		ТекстСообщения = "Не удалось удалить файл ""To1C.zip"" на FTP-сервере для агента: """ + НаимАгента + "!" + 
						 "Причина: " + ОписаниеОшибки();
		ОповеститьОСобытии(ТекстСообщения);		
	КонецПопытки; 
	
	Возврат ФайлЛокальный;
	
КонецФункции

&НаКлиенте
// Функция ЗагрузитьДанныеСФТП
//
// Параметры:
//  Число - результат загрузки
//
// Описание:
// 	Функция загружает данные от агента с ФТП-сервера и возвращает результат загрузки
// 
Функция ЗагрузитьДанныеСФТП() Экспорт
	
	ЗадатьКаталогиВременныхФайлов(Истина);
	
	ФайлЛокальный = ПолучитьФайлОбменаСФТПСервера();
	
	Если ПустаяСтрока(ФайлЛокальный) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Результат = ВыполнитьЗагрузкуДанных(ФайлЛокальный);
	
	Если Результат Тогда		
		ОповеститьОСобытии("Данные с FTP-сервера для агента: """ + ВыбАгент + """ успешно загружены!",
		СтатусСообщения.Информация);						
	Иначе				
		ОповеститьОСобытии("Данные с FTP-сервера для агента: """ + ВыбАгент + """ не загружены!", 
		СтатусСообщения.Важное);			
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ЗагрузитьДанныеСФТП()

//////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
//////////////////////////////////////////////////////////

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьНастройкиФормы();
	
	ОбработатьПереданныеПараметры(Параметры);
	
	#Если ВебКлиент Тогда
    	Объект.флАвтоОбмен = Ложь;
	#КонецЕсли
	
	Объект.Подразделение = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ОбщегоНазначения.ТекущийПользователь(), "ОсновноеПодразделение");
	
КонецПроцедуры

&НаСервере
//Процедура обрабатывает передаваемые параметры, например, из команд в регламентных заданиях
//
Процедура ОбработатьПереданныеПараметры(Параметры)
	Если Параметры.Свойство("флАвтоОбмен") Тогда
		Объект.флАвтоОбмен = Параметры.флАвтоОбмен;
	КонецЕсли;
	
	Если Параметры.Свойство("СпособОбмена") Тогда
		Объект.СпособОбмена = Параметры.СпособОбмена;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ) Экспорт
	//в вебклиенте не подключается внешняя компонента  APPlus.dll
	#Если ВебКлиент Тогда
		Предупреждение("В режиме вебклиента доступна только выгрузка данных");
		ЭтаФорма.Элементы.Загрузить.Доступность 	= Ложь;
		ЭтаФорма.Элементы.АгентПлюсСОД.Доступность 	= Ложь;
		ЭтаФорма.Элементы.ФТП.Доступность		  	= Ложь;
		ЭтаФорма.Элементы.Автообмен.Доступность		= Ложь;
	#КонецЕсли
	
	#Если Не ВебКлиент Тогда
		КПКОбъектServer = апКлиент.ЗагрузитьВнешнююКомпонентуАП();
	
		Если СокрЛП(КПКОбъектServer) = "" Тогда
			//Предупреждение("Не удалось загрузить компоненту!");
			//Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		НастроитьФормуПриИзмененииСпособаОбмена();
	#Иначе
		НастроитьВидимостьДоступностьЭлементов();
	#КонецЕсли
	
	#Если ВебКлиент Тогда
		Если апСерверМодуль.ПолучитьКаталогВременныхФайлов(Ложь) = "" Тогда
			Предупреждение("Не задан каталог временных файлов. Продолжение работы невозможно!");
			ЭтаФорма.Закрыть();
			Возврат;
		КонецЕсли;
	#Иначе	  	
		//КаталогВременныхФайловКлиент = апСерверМодуль.ПолучитьКаталогВременныхФайлов(); //здесь не вызываем СЕРВЕРНУЮ процедуру, т.к. каталог нужно получить именно на клиенте
		Если ПустаяСтрока(КаталогВременныхФайловКлиент) Тогда
			КаталогВременныхФайловКлиент = КаталогВременныхФайлов();		
		Иначе
			КаталогВременныхФайловКлиентНаДиске = Новый Файл(КаталогВременныхФайловКлиент);
			Если Не КаталогВременныхФайловКлиентНаДиске.Существует() Тогда
				ОповеститьОСобытии("Не найден каталог: " + КаталогВременныхФайловКлиент + ", указанный в качестве каталога временных файлов на клиенте!");
				КаталогВременныхФайловКлиент = КаталогВременныхФайлов();
			КонецЕсли;                                                  		
		КонецЕсли;
	#КонецЕсли
	
	апСерверМодуль.ДополнитьСлешВПуть(КаталогВременныхФайловКлиент);
	
	ЗаполнитьСписокУдаляемыхОбъектов();
	ЗаполнитьСписокПередаваемыхДополнительныхДанных();
КонецПроцедуры

//////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДАННЫХ ФОРМЫ
//////////////////////////////////////////////////////////

&НаСервере
Функция ПолучитьИдентификаторУстройстваАгента()
	
	//ИдентификаторУстройства = ВыбАгент.МобильныйКомпьютер.СерийныйНомер;
	ИдентификаторУстройства = ВыбАгент.Код;
	
	Возврат ИдентификаторУстройства;
	
КонецФункции

&НаСервере
Функция ПолучитьМобильноеУстройствоПоИдентификатору(ИдКПК)
	
	МобильноеУстройство = Справочники.апМобильныеКомпьютеры.НайтиПоРеквизиту("СерийныйНомер", СокрЛП(ИдКПК));
	
	Возврат МобильноеУстройство;
	
КонецФункции

&НаСервере
Функция ПолучитьНастройкиАгентаПоУстройству(Устройство, ВывестиНаФорму = Истина)
	
	НайдАгент = ПланыОбмена.апМобильноеПриложениеТорговыйПредставитель.НайтиПоРеквизиту("МобильныйКомпьютер", Устройство);	
	
	Если ВывестиНаФорму Тогда
		ВыбАгент = НайдАгент;
	КонецЕсли;
	
	Возврат НайдАгент;
	
КонецФункции

&НаСервере
Процедура УстановитьНастройкиАгента() Экспорт
	
	ПапкаАгентаСОД = ВыбАгент.ИмяПользователя;
	ПапкаАгентаФТП = ВыбАгент.апПапкаФТП;	
	ПарольАрхива   = СокрЛП(ВыбАгент.Пароль);
	//МобильныйСклад = ВыбАгент.апМобильныйСклад;
	
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьЗагрузкуДанных(ФайлЗагрузки)
	
	ПапкаРаспаковки = КаталогВременныхФайловКлиент;
	
	УстановитьНастройкиАгента();
	
	//Если ВРег(Прав(ФайлЗагрузки,3)) = "CRP" Тогда //зашифрованный файл
	//	//расшифровываем файл
	//	РасшифрованныйФайл = Лев(ФайлЗагрузки, СтрДлина(ФайлЗагрузки) - 4);
	//	
	//	КПКОбъект.ШифрУстПароль(СокрЛП(Константы.кпкКриптоПароль.Получить()));
	//	Результат = КПКОбъект.РасшифроватьФайл(ФайлЗагрузки, РасшифрованныйФайл);			
	//	
	//	Если Результат <> 0 Тогда
	//		РасшифровкаОшибки = КПКОбъект.ErrDescription(Результат);				
	//		ОповеститьОСобытии(РасшифровкаОшибки);
	//		Возврат 0;
	//	Иначе
	//		Попытка
	//			УдалитьФайлы(ФайлЗагрузки);
	//		Исключение
	//			ОповеститьОСобытии("Не удалось удалить файл загрузки: " + ФайлЗагрузки + " по причине: " + ОписаниеОшибки());					
	//		КонецПопытки;					
	//		ФайлЗагрузки = РасшифрованныйФайл; //файл успешно расшифрован
	//	КонецЕсли;
	//КонецЕсли;   
	
	Если ВРег(Прав(ФайлЗагрузки,3)) = "ZIP" Тогда
		
		// Удаляем архив с фотографиями во временной папке, если он там уже есть
		ИмяАрхиваФотоИзМУ = "PhotosToCDB";
		
		АрхивФото = ПапкаРаспаковки + ИмяАрхиваФотоИзМУ + ".zip";
		ФайлФото = Новый Файл(АрхивФото);
		Если ФайлФото.Существует() Тогда  
			Попытка
				УдалитьФайлы(ФайлФото.ПолноеИмя);
			Исключение
				ТекстСообщения = "Не удалось удалить файл фото: " + ФайлФото + " по причине: " + ОписаниеОшибки();																
				ОповеститьОСобытии(ТекстСообщения);			
			КонецПопытки;							
		КонецЕсли;
		
		#Если Клиент Тогда
			Состояние("Распаковка полученных данных...");
		#КонецЕсли    
		
		Попытка			
			Архиватор = Новый ЧтениеZipФайла(ФайлЗагрузки, ПарольАрхива);			
		Исключение			
			ОповеститьОСобытии(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), СтатусСообщения.Важное);
			Возврат Ложь;			
		КонецПопытки;    
		
		Попытка
			#Если Не ВебКлиент Тогда
				Архиватор.ИзвлечьВсе(ПапкаРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
			#Иначе
				Архиватор.ИзвлечьВсе(ПапкаРаспаковки);
			#КонецЕсли
		Исключение                                                                                          			
			СтрокаСообщения = НСтр("ru = 'Ошибка при распаковке архива из мобильного устройства!'");			
			ОповеститьОСобытии(СтрокаСообщения, СтатусСообщения.Важное);                             			
			Возврат Ложь;
		КонецПопытки;
		
		Архиватор.Закрыть();
		
		апСерверМодуль.ДополнитьСлешВПуть(ПапкаРаспаковки);
		
		ФайлЗагрузки = ПапкаРаспаковки + "To1C.xml";
		ФайлXML = Новый Файл(ФайлЗагрузки);
		
		Если НЕ ФайлXML.Существует() Тогда
			ФайлЗагрузки = ПапкаРаспаковки + "To1C.xml";
			ФайлXML = Новый Файл(ФайлЗагрузки);
		КонецЕсли;
		
		Если НЕ ФайлXML.Существует() Тогда
			ОповеститьОСобытии("В файле архива мобильного устройства не найдено файлов для загрузки в требуемом формате!");
			//СохранитьТаблицуЛогаВНастройкахПользователя();
			Возврат Ложь;
		КонецЕсли;
		
		//АрхивФото = ПапкаРаспаковки + ИмяАрхиваФотоИзМУ + ".zip";
		//ФайлФото = Новый Файл(АрхивФото);
		//Если ФайлФото.Существует() Тогда  
		////	Попытка
		//		УдалитьФайлы(ФайлФото.ПолноеИмя);
		//	Исключение
		//		ТекстСообщения = "Не удалось удалить файл фото: " + ФайлФото + " по причине: " + ОписаниеОшибки();																
		//		ОповеститьОСобытии(ТекстСообщения);			
		//	КонецПопытки;							
		//КонецЕсли;     
			
		//ПапкаВремФото = ПапкаРаспаковки + "PhotosToCDB\";
		//
		//Если Не апСерверМодуль.ПроверитьСуществованиеКаталога(ПапкаВремФото) Тогда
		//	СоздатьКаталог(ПапкаВремФото);			
		//КонецЕсли;
		
		//ОчиститьПапкуВременныхФото();
		
		//Если ФайлФото.Существует() Тогда // значит в архиве с файлом загрузки был и архив фотографий
			
			//ОповеститьОСобытии("Файл загрузки содержит архив фотографий", СтатусСообщения.Информация);
			//
			//КПКОбъектServer.АрхУстПароль("");
			//
			//#Если Клиент Тогда
			//	Состояние("Распаковка архива с фотографиями...");
			//#КонецЕсли  
			//Результат = КПКОбъектServer.АрхРаспаковать(АрхивФото, ПапкаВремФото);				
			//
			//Если Результат <> 0 Тогда
			//	КПКОбъектServer.АрхУстПароль(ПарольАрхива);
			//	Результат = КПКОбъектServer.АрхРаспаковать(АрхивФото, ПапкаВремФото);				
			//	Если Результат <> 0 Тогда
			//		ОповеститьОСобытии("Ошибка распаковки архива фотографий: " + АрхивФото, СтатусСообщения.Важное);
			//	КонецЕсли;				
			//КонецЕсли;
			
		//КонецЕсли;
		
	КонецЕсли;
	
	ОтветнаяВыгрузка = Истина;
		
	АрхивТрека = Новый Файл(ПапкаРаспаковки + "gpstrack.zip");
	
	ФайлЗагрузкиНаДиске = Новый Файл(ФайлЗагрузки);
	Если ФайлЗагрузкиНаДиске.Существует() Тогда
		// Если поступили новые данные только по треку перемещения
		Если ФайлЗагрузкиНаДиске.Имя = "gpstrack.txt" Тогда
			ФайлТрека = ФайлЗагрузкиНаДиске;
			// При загрузке треков не нужно отвечать
			ОтветнаяВыгрузка = Ложь;
			Перейти ~М1;
		КонецЕсли;
	Иначе
		ОповеститьОСобытии("Не найдено файлов загрузки от мобильного устройства в папке " + ПапкаРаспаковки + "!", СтатусСообщения.Важное);
		//СохранитьТаблицуЛогаВНастройкахПользователя();
		Возврат Ложь;
	КонецЕсли;		
	
	ФайлТрека =  Новый Файл(ПапкаРаспаковки + "gpstrack.txt"); 
	
	Если АрхивТрека.Существует() Тогда // Найден архив с файлом трека перемещений		
		ИмяАрхива = АрхивТрека.ПолноеИмя;
		РезультатТрека = КПКОбъектServer.АрхРаспаковать(ИмяАрхива, ПапкаРаспаковки);					
		Если РезультатТрека <> 0 Тогда
			ОповеститьОСобытии("Ошибка распаковки архива с треками: " + ИмяАрхива, СтатусСообщения.Важное);
		Иначе
			Попытка
				УдалитьФайлы(АрхивТрека.ПолноеИмя);
			Исключение
				ТекстСообщения = "Не удалось удалить файл трека: " + АрхивТрека.ПолноеИмя + " по причине: " + ОписаниеОшибки();												
				ОповеститьОСобытии(ТекстСообщения);			
			КонецПопытки;							
		КонецЕсли;	
		
		Если Не ФайлТрека.Существует() Тогда			
			ОповеститьОСобытии("В архиве с треками не найден файл для загрузки!", СтатусСообщения.Важное);
		КонецЕсли; 		
	КонецЕсли; 
	
	#Если Клиент Тогда
		Состояние("Загрузка данных...");
	#КонецЕсли    
	
	ДанныеФайла = Новый ДвоичныеДанные(ФайлЗагрузки);                       	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДанныеФайла);
	
	АдресАрхиваФотоВоВременномХранилище = "";
	АрхивФото = ПапкаРаспаковки + ИмяАрхиваФотоИзМУ + ".zip";
	ФайлФото = Новый Файл(АрхивФото);
	Если ФайлФото.Существует() Тогда // значит в архиве с файлом загрузки был и архив фотографий
		ДанныеФайлаФото = Новый ДвоичныеДанные(АрхивФото);                       	
		АдресАрхиваФотоВоВременномХранилище = ПоместитьВоВременноеХранилище(ДанныеФайлаФото);
	КонецЕсли;
	
	XMLЗагрузитьДанные(АдресВоВременномХранилище, АдресАрхиваФотоВоВременномХранилище, ФайлЗагрузкиНаДиске.Имя);  
	
	// Уведомляем динамические списки на клиенте об изменении одного объекта базы данных или одной записи регистра. 
	//ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.апЗагруженныеДокументы"));
	//ОповеститьОбИзменении(Тип("ДокументСсылка.ЗаказКлиента"));
	//ОповеститьОбИзменении(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	//ОповеститьОбИзменении(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	//ОповеститьОбИзменении(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	//ОповеститьОбИзменении(Тип("ДокументСсылка.ВозвратТоваровОтКлиента"));
	//ОповеститьОбИзменении(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
	//ОповеститьОбИзменении(Тип("ДокументСсылка.ПеремещениеТоваров"));
	//ОповеститьОбИзменении(Тип("ДокументСсылка.апПосещение"));
	//ОповеститьОбИзменении(Тип("ДокументСсылка.апМерчендайзинг"));
	
	ФайлЗагрузкиНаДиске = Новый Файл(ФайлЗагрузки);
	Если ФайлЗагрузкиНаДиске.Существует() Тогда
		Попытка
			УдалитьФайлы(ФайлЗагрузки);
		Исключение
			ТекстСообщения = "Не удалось удалить файл загрузки: " + ФайлЗагрузки + " по причине: " + ОписаниеОшибки();							
			ОповеститьОСобытии(ТекстСообщения);			
		КонецПопытки;			
	КонецЕсли;    	
	
	~М1:
	
	Если ФайлТрека.Существует() И (1=2) Тогда
		#Если Клиент Тогда
			Состояние("Загрузка данных трека перемещений....");
		#КонецЕсли	
		ЗагрузитьТреки(ФайлТрека.ПолноеИмя); 		
		// Уведомляем динамические списки на клиенте об изменении одного объекта базы данных или одной записи регистра. 
		ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.апТрекиПередвижений"));	
		Попытка
			УдалитьФайлы(ФайлТрека.ПолноеИмя);
		Исключение
			ТекстСообщения = "Не удалось удалить файл трека: " + ФайлТрека.ПолноеИмя + " по причине: " + ОписаниеОшибки();				
			ОповеститьОСобытии(ТекстСообщения);			
		КонецПопытки;				
	КонецЕсли;
	
	Если АрхивТрека.Существует() И (1=2) Тогда
		Попытка
			УдалитьФайлы(АрхивТрека.ПолноеИмя);
		Исключение
			ТекстСообщения = "Не удалось удалить файл трека: " + АрхивТрека.ПолноеИмя + " по причине: " + ОписаниеОшибки();
			ОповеститьОСобытии(ТекстСообщения);			
		КонецПопытки;							
	КонецЕсли;
	
	// Всегда формируем ответную выгрузку	
	Если ОтветнаяВыгрузка И (1=2) Тогда
		#Если Клиент Тогда
			Состояние("Выгрузка ответных данных...");	
		#КонецЕсли
		ОповеститьОСобытии("Выгрузка ответных данных...", СтатусСообщения.Информация);
		ВыгрузитьДанныеМТ(ОтветнаяВыгрузка);		
	КонецЕсли;
	
	#Если Клиент Тогда	
		Состояние("");
	#КонецЕсли
	
	//СохранитьТаблицуЛогаВНастройкахПользователя();
	
	Возврат Истина;
	
КонецФункции //ВыполнитьЗагрузкуДанных()  

&НаСервереБезКонтекста
Функция ПолучитьНастройкиАгентаПоИдентификатору(Идентификатор)
	
	Если Идентификатор = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Идентификатор = ВРег(Идентификатор);
	
	Менеджер = ПланыОбмена.апМобильноеПриложениеТорговыйПредставитель;
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда  		
		ГуидЭлемента = Новый УникальныйИдентификатор(Идентификатор);		
		Ссылка = Менеджер.ПолучитьСсылку(ГуидЭлемента);		
	Иначе
		Ссылка = Неопределено;
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции //ПолучитьНастойкиАгентаПоИдентификатору	
			
&НаСервере
// Функция создает каталог временных файлов для фото, если его не существует
// а если каталог существует, то очищает его
//
Процедура ОчиститьПапкуВременныхФото(КаталогФайлов)
	
	ПапкаВремФото = КаталогФайлов + ИмяАрхиваФотоИзМУ + "\";
	
	апСерверМодуль.ПроверитьСуществованиеКаталога(ПапкаВремФото, Ложь, Истина);
	
	НайденныеФайлы = НайтиФайлы(ПапкаВремФото, "*.*");	
	
	Если НайденныеФайлы.Количество() > 0 Тогда
		#Если Клиент Тогда
			Состояние("Удаление временных файлов фото ...");
		#КонецЕсли  
		УдалитьФайлы(ПапкаВремФото, "*.*");
		#Если Клиент Тогда
			Состояние("");
		#КонецЕсли  
	КонецЕсли;
	
КонецПроцедуры //ОчиститьПапкуВременныхФото 

&НаСервере
Процедура XMLЗагрузитьДанные(АдресВременногоХранилища, АдресАрхиваФотоВременногоХранилища, ИмяФайла)
	
	апСерверМодуль.ДополнитьСлешВПуть(КаталогВременныхФайловСервер);	
	
	// Получаем файл загрузки из временного хранилища и сохраняем его локально на сервере
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);	
	Если ДвоичныеДанныеФайла = Неопределено Тогда
		ОповеститьОСобытии("Файл загрузки для агента: " + ВыбАгент.Наименование + " не получен из временного хранилища!", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	ФайлЗагрузки = КаталогВременныхФайловСервер + ИмяФайла;   	
	ДвоичныеДанныеФайла.Записать(ФайлЗагрузки);	
	
	Если Не ПустаяСтрока(АдресАрхиваФотоВременногоХранилища) Тогда // значит в архиве с файлом загрузки был и архив фотографий
		
		// Удаляем архив с фотографиями во временной папке, если он там уже есть
		ФайлАрхиваФото = КаталогВременныхФайловСервер + ИмяАрхиваФотоИзМУ + ".zip";
		ФайлАрхиваФотоНаДиске = Новый Файл(ФайлАрхиваФото);
		Если ФайлАрхиваФотоНаДиске.Существует() Тогда  
			Попытка
				УдалитьФайлы(ФайлАрхиваФотоНаДиске.ПолноеИмя);
			Исключение
				ТекстСообщения = "Не удалось удалить файл с архивом фото: " + ФайлАрхиваФото + " по причине: " + ОписаниеОшибки();																
				ОповеститьОСобытии(ТекстСообщения);			
			КонецПопытки;							
		КонецЕсли;
		
		// Получаем архив фото из временного хранилища и сохраняем его локально на сервере	
		ДвоичныеДанныеАрхиваФото = ПолучитьИзВременногоХранилища(АдресАрхиваФотоВременногоХранилища);	
		Если ДвоичныеДанныеАрхиваФото = Неопределено Тогда
			ОповеститьОСобытии("Файл архива фотографий для агента: " + ВыбАгент.Наименование + " не получен из временного хранилища!", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;   	
		
		ДвоичныеДанныеАрхиваФото.Записать(ФайлАрхиваФото);	
		
		ОповеститьОСобытии("Файл загрузки содержит архив фотографий", СтатусСообщения.Информация);
				
		ОчиститьПапкуВременныхФото(КаталогВременныхФайловСервер);
		
		// Распаковка архива с фото
		Попытка			
			Архиватор = Новый ЧтениеZipФайла(ФайлАрхиваФото);
		Исключение			
			ОповеститьОСобытии(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), СтатусСообщения.Важное);
		КонецПопытки;    
		
		Попытка   			
			Архиватор.ИзвлечьВсе(КаталогВременныхФайловСервер + ИмяАрхиваФотоИзМУ + "\", РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		Исключение                                                                                          			
			СтрокаСообщения = НСтр("ru = 'Ошибка при распаковке архива с фотографиями из мобильного устройства!'");			
			ОповеститьОСобытии(СтрокаСообщения, СтатусСообщения.Важное);			
		КонецПопытки;
		
		Архиватор.Закрыть();
     		
	КонецЕсли;   	
	
	ТекстXML = Новый ЧтениеXML;
	
	ТекстXML.ОткрытьФайл(ФайлЗагрузки);
	
	ОповеститьОСобытии("Начало загрузки данных от агента: " + ВыбАгент.Наименование, СтатусСообщения.Информация);
	
	ПрерватьЗагрузку = Ложь;
	
	XML_Документ = ТекстXML;
	
	Пока XML_Документ.Прочитать() Цикл
		
		Если XML_Документ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда      			
					
			Если XML_Документ.Имя = "Ref" Тогда
				//Операция = XML_Документ.ПолучитьАтрибут("RefType");
				//Если Операция = "Client" Тогда
				//	#Если Клиент Тогда
				//	Состояние("Загрузка клиентов...");
				//	#КонецЕсли
				//	ЗагрузкаСпрКлиента(XML_Документ);
				//ИначеЕсли Операция = "TPoint" Тогда
				//	Если ИспТочек Тогда
				//		#Если Клиент Тогда
				//		Состояние("Загрузка торговых точек...");
				//		#КонецЕсли
				//		ЗагрузкаСпрТоргТочки(XML_Документ);
				//	КонецЕсли;
				//ИначеЕсли Операция = "Price" Тогда
				//	#Если Клиент Тогда
				//	Состояние("Загрузка номенклатуры...");
				//	#КонецЕсли
				//	ЗагрузкаСпрНоменклатуры(XML_Документ);
				//ИначеЕсли Операция = "BarCode" Тогда
				//	#Если Клиент Тогда
				//	Состояние("Загрузка штрих-кодов...");
				//	#КонецЕсли
				//	ЗагрузкаШтрихКодов(XML_Документ);			
				//КонецЕсли;
			ИначеЕсли XML_Документ.Имя = "Doc" Тогда
				
				DocState = XML_Документ.ПолучитьАтрибут("DocState");
				Если Число(DocState) <> 1 Тогда
					Продолжить;
				КонецЕсли;
				
				Операция = XML_Документ.ПолучитьАтрибут("DocType");
				
				СтруктураПараметровДокумента = ПолучитьСтруктуруПараметровДокументаВКПК(XML_Документ);
				
				//СформироватьТаблицуВыгружаемыхТиповЦен();
				
				Если Операция = "Order" Тогда
					#Если Клиент Тогда
					Состояние("Загрузка заявок...");	
					#КонецЕсли
					Если ЗагрузкаЗаявок(XML_Документ, СтруктураПараметровДокумента) = 2 Тогда						
						Продолжить;					
					КонецЕсли;					
				ИначеЕсли Операция = "Arrival" Тогда
					#Если Клиент Тогда
					Состояние("Загрузка поступлений...");	
					#КонецЕсли
					Если ЗагрузкаПоступлений(XML_Документ, СтруктураПараметровДокумента) = 2 Тогда						
						Продолжить;					
					КонецЕсли;					
					
				//////ИначеЕсли Операция = "Visit" Тогда
				//////	#Если Клиент Тогда
				//////	Состояние("Загрузка посещений...");
				//////	#КонецЕсли
				//////	Если ЗагрузкаПосещений(XML_Документ, СтруктураПараметровДокумента) = 2 Тогда						
				//////		Продолжить;
				//////	КонецЕсли;
				ИначеЕсли Операция = "Cash" Тогда
					#Если Клиент Тогда
					Состояние("Загрузка ордеров...");
					#КонецЕсли
					Если ЗагрузкаОрдеров(XML_Документ,СтруктураПараметровДокумента) = 2 Тогда						
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 	
	
	ТекстXML.Закрыть();
	
	ЗакончитьЗагрузкуОрдеровИПоступлений();
	
	ЗакончитьЗагрузкуКонтактнойИнформации();
	
	ЗакончитьЗагрузкуДоговоров();
	
	ОповеститьОСобытии("Данные от агента: " + ВыбАгент.Наименование + " успешно загружены!", СтатусСообщения.Информация);
	
	//выгрузка html-отчетов
	Если ЗначениеЗаполнено(ОтчетЗапроса) Тогда		
		ОтветитьНаЗапрос = Истина;		
	КонецЕсли;
	
КонецПроцедуры //XMLЗагрузитьДанные

&НаСервере
Функция ЗагрузитьДокумент(ТекстXML, Док)
	
	РежимЗагрузкиЗаказов = Константы.апРежимЗагрузкиЗаказов.Получить();
	ИспользоватьЗаказы   = Константы.ИспользоватьЗаказыКлиентов.Получить();
	
	Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		Возврат Ложь;
	ИначеЕсли ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДокМенеджер = Документы[Док];
		
	Проведен 	     = Булево(Число(ТекстXML.ЗначениеАтрибута("IsPost")));					
	Дата     		 = Строка(ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt")));
	Номер    	     = СокрЛП(ТекстXML.ПолучитьАтрибут("DocNumber"));
	ПредставлениеДок = ДокМенеджер.ПустаяСсылка().Метаданные().Синоним;
	
	Если Не Проведен Тогда
		ОповеститьОСобытии("Пропущена загрузка документа: " + ПредставлениеДок + " №: " + Номер + " от: " + Дата + ". Документ не проведен в мобильном приложении!");						
		ТекстXML.Пропустить();
		Возврат ЗагрузитьДокумент(ТекстXML, Док);		
	КонецЕсли;
		
	ЭтоНовыйОбъект = Истина;
	
	ИдОбъекта = Новый УникальныйИдентификатор(ТекстXML.ЗначениеАтрибута("GUID"));
	
	СсылкаОбъекта = ДокМенеджер.ПолучитьСсылку(ИдОбъекта);
	ДокОбъект = СсылкаОбъекта.ПолучитьОбъект();
	
	НайденаСсылка = Истина;
	
	Если ДокОбъект = Неопределено Тогда		
		СсылкаОбъектаЗаказ 	    = СсылкаОбъекта;
		СсылкаОбъектаРеализация = Документы.РеализацияТоваровУслуг.ПустаяСсылка();	
		НайденаСсылка = Ложь;
		// Пытаемся также найти среди документов "Реализация"
		Если Док = "ЗаказКлиента" Тогда
			ДокМенеджер   = Документы.РеализацияТоваровУслуг;	
			СсылкаОбъекта = ДокМенеджер.ПолучитьСсылку(ИдОбъекта);
			СсылкаОбъектаРеализация = СсылкаОбъекта;
			ДокОбъект = СсылкаОбъекта.ПолучитьОбъект();
			Если ДокОбъект <> Неопределено Тогда			
				НайденаСсылка = Истина;
			КонецЕсли;			
		КонецЕсли;                     		
	КонецЕсли;
	
	Если Не НайденаСсылка Тогда
		
		Если Док = "ЗаказКлиента" Тогда 
			ОбычныйСпособ 		 			= Перечисления.апРежимыЗагрузкиЗаказов.ОбычныйСпособЗагрузки;
			ЗагружатьВРеализацию 			= Перечисления.апРежимыЗагрузкиЗаказов.ЗагружатьВРеализацию;
			СоздаватьНаОснованииРеализацию 	= Перечисления.апРежимыЗагрузкиЗаказов.СоздаватьНаОснованииРеализацию;
			
			Если ИспользоватьЗаказы и (РежимЗагрузкиЗаказов = ОбычныйСпособ	или РежимЗагрузкиЗаказов = СоздаватьНаОснованииРеализацию) Тогда		
				ДокМенеджер = Документы.ЗаказКлиента;		
				СсылкаОбъекта = СсылкаОбъектаЗаказ;
			Иначе 
				ДокМенеджер = Документы.РеализацияТоваровУслуг;						
				СсылкаОбъекта = СсылкаОбъектаРеализация;
			КонецЕсли;  		
		КонецЕсли;
		
		ОбъектДок = ДокМенеджер.СоздатьДокумент();						
		ОбъектДок.УстановитьСсылкуНового(СсылкаОбъекта);
		
		ЭтоНовыйОбъект = Истина;	
		
	Иначе
		
		Если Не Объект.флОбновлять Тогда	
			СтруктураПараметров = Новый Структура("ВидДокумента, Номер, Дата", ПредставлениеДок, Номер, Дата);			
			СообщитьОПропускеДокумента(СтруктураПараметров);			
			ТекстXML.Пропустить();
			Возврат ЗагрузитьДокумент(ТекстXML, Док);		
		КонецЕсли;  		
		
		ОбъектДок = СсылкаОбъекта.ПолучитьОбъект();
		ОбъектДок.Разблокировать();
		
		ЭтоНовыйОбъект = Ложь;
		
	КонецЕсли;
	
	Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		Возврат Ложь;
	ИначеЕсли ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Док = "ЗаказКлиента" Тогда
		
		ЗагрузитьДокументЗаказ(ТекстXML, ОбъектДок, ЭтоНовыйОбъект);
		
	ИначеЕсли Док = "ПриходныйКассовыйОрдер" Или Док = "РасходныйКассовыйОрдер" Тогда 
		
		ЗагрузитьДокументОрдера(ТекстXML, ОбъектДок, ЭтоНовыйОбъект);
		
		ТекстXML.Прочитать();
		
	ИначеЕсли Док = "апМерчендайзинг" Тогда
		
		ЗагрузитьДокументМерчендайзинг(ТекстXML, ОбъектДок, ЭтоНовыйОбъект);
		
	ИначеЕсли Док = "апПосещение" Тогда
		
		ЗагрузитьДокументПосещение(ТекстXML, ОбъектДок, ЭтоНовыйОбъект);
		
	ИначеЕсли Док = "РеализацияТоваровУслуг" Тогда
		
		ЗагрузитьДокументРеализация(ТекстXML, ОбъектДок, ЭтоНовыйОбъект);
		
	ИначеЕсли Док = "СчетФактураВыданный" Тогда
		
		ЗагрузитьДокументСчетФактура(ТекстXML, ОбъектДок, ЭтоНовыйОбъект);
		
	ИначеЕсли Док = "ПеремещениеТоваров" Тогда
		
		ЗагрузитьДокументПеремещение(ТекстXML, ОбъектДок, ЭтоНовыйОбъект);

	ИначеЕсли Док = "ВозвратТоваровОтКлиента" Или Док = "ПоступлениеТоваровУслуг" Тогда
		
		ЗагрузитьДокументПоступление(ТекстXML, ОбъектДок, ЭтоНовыйОбъект);
		
		ТекстXML.Прочитать();
		
	ИначеЕсли Док = "апЗадание" Тогда
		
		ЗагрузитьДокументЗадание(ТекстXML, ОбъектДок, ЭтоНовыйОбъект);
		
	Иначе	
		
		ТекстXML.Пропустить();
		
		Возврат ЗагрузитьДокумент(ТекстXML, Док);
		
	КонецЕсли;	
	
	Возврат Истина;

КонецФункции //ЗагрузитьДокумент

&НаСервере
// Функция проверяет переданное значение идентификатора на пустой
//
// Параметры:
//  ИД - идентификатор
//
//Возвращаемое значение:
//  Булево
//
// Добавлена 14.06.2007
//
Функция ЭтоПустойИдентификатор(ИД)
	Если (СокрЛП(ИД) = "00000000-0000-0000-0000-000000000000") ИЛИ (СокрЛП(ИД) = "") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции //ЭтоПустойИдентификатор()

&НаСервере
Процедура ____ЗаполнитьОсновныеПараметрыДокумента(Док, СтруктураДокКПК, Менеджер, СтруктураПолей)
	
	ИдФирмы   	  = СтруктураДокКПК.ИдФирмы;
	ИдПартнера	  = СтруктураДокКПК.ИдПартнера;
	ИдКонтрагента = СтруктураДокКПК.ИдКонтрагента;
	ИдДоговора    = СтруктураДокКПК.ИдДоговора;
	ВидДок 		  = СтруктураДокКПК.ВидДокумента;
	НомерДок      = Строка(СтруктураДокКПК.Номер);  
	ДатаДок 	  = СтруктураДокКПК.Дата;
	Комментарий   = СтруктураДокКПК.Комментарий;
	
	ПредставлениеДокВКПК = ВидДок + " № " + НомерДок + " от " + ДатаДок;
		
	//Если СтруктураПолей.Свойство("Организация") Тогда
	//	// Получаем организацию из документа
	//	Если ЭтоПустойИдентификатор(ИдФирмы) Тогда			
	//		ОповеститьОСобытии("В документе: " + ПредставлениеДокВКПК + " не указана организация!");      
	//	Иначе		
	//		Организация = ПолучитьСсылкуИзСправочника(ИдФирмы, "Организации");			
	//		Если Док.Метаданные().Реквизиты.Найти("Организация") <> Неопределено Тогда
	//			Док.Организация = Организация;
	//		КонецЕсли;
	//	КонецЕсли;    		
	//КонецЕсли;
	//
	//Если СтруктураПолей.Свойство("Партнер") Тогда		
	//	// Получаем партнера из документа
	//	Если ЭтоПустойИдентификатор(ИдПартнера) Тогда			
	//		ОповеститьОСобытии("В документе: " + ПредставлениеДокВКПК + " не указан партнер!", СтатусСообщения.Внимание);
	//	Иначе	
	//		Партнер = ПолучитьСсылкуИзСправочника(ИдПартнера, "Партнеры");
	//		Если Док.Метаданные().Реквизиты.Найти("Партнер") <> Неопределено Тогда
	//			Док.Партнер = Партнер;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;     	
	//
	//Если СтруктураПолей.Свойство("Соглашение") Тогда			
	//	Если Константы.апИспользоватьСоглашения.Получить() Тогда
	//		// Получаем соглашение из документа
	//		Если ЭтоПустойИдентификатор(ИдДоговора) Тогда			
	//			ОповеститьОСобытии("В документе: " + ПредставлениеДокВКПК + " не указан договор! Будет проставлено соглашение по умолчанию!", СтатусСообщения.Внимание);				
	//		Иначе	
	//			Если Док.Метаданные().Реквизиты.Найти("Соглашение") <> Неопределено Тогда
	//				Если ТипЗнч(Док) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
	//					Соглашение = ПолучитьСсылкуИзСправочника(ИдДоговора, "СоглашенияСПоставщиками");				
	//				Иначе
	//					Соглашение = ПолучитьСсылкуИзСправочника(ИдДоговора, "СоглашенияСКлиентами");				
	//				КонецЕсли;
	//				Если Не ЗначениеЗаполнено(Соглашение) Тогда 
	//					апСоглашение = ПолучитьСсылкуИзСправочника(ИдДоговора, "апСоглашенияСКлиентами");				
	//					Соглашение = апСоглашение.Соглашение;
	//				КонецЕсли; 					
	//				Док.Соглашение = Соглашение;
	//			КонецЕсли;
	//		КонецЕсли;                                         
	//	КонецЕсли;	 				
	//КонецЕсли;  	
	//
	//// Получаем контрагента из документа 	
	//Если СтруктураПолей.Свойство("Контрагент") 				
	//	И Док.Метаданные().Реквизиты.Найти("Контрагент") <> Неопределено Тогда
	//	Если ЭтоПустойИдентификатор(ИдКонтрагента) Тогда			
	//		Если Константы.апВыгружатьКонтрагентов.Получить() Тогда
	//			ОповеститьОСобытии("В документе: " + ПредставлениеДокВКПК + " не указана контрагент!", СтатусСообщения.Внимание);
	//		КонецЕсли;			
	//		//Если не заполенен контрагент, пытаемся установить по умолчанию
	//		Если Не ЗначениеЗаполнено(Док.Контрагент) Тогда
	//			Если Док.Метаданные().Реквизиты.Найти("Партнер") = Неопределено И ЗначениеЗаполнено(Партнер) Тогда
	//				Док.Контрагент = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(Партнер);
	//			Иначе				
	//				ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Док.Партнер, Док.Контрагент);
	//			КонецЕсли;
	//		КонецЕсли;				
	//	Иначе				
	//		Док.Контрагент = ПолучитьСсылкуИзСправочника(ИдКонтрагента, "Контрагенты");												
	//	КонецЕсли;			
	//КонецЕсли;  
	//
	//Если Док.Метаданные().Реквизиты.Найти("Менеджер") <> Неопределено Тогда
	//	Если ЗначениеЗаполнено(Док.Менеджер) Тогда			
	//		Док.Менеджер = ПараметрыСеанса.ТекущийПользователь;
	//	КонецЕсли;		
	//	Если Док.Метаданные().Реквизиты.Найти("Подразделение") <> Неопределено Тогда
	//		Док.Подразделение = Док.Менеджер.ТекущееПодразделение;
	//	КонецЕсли;
	//КонецЕсли;
	//	
	//Если Док.Метаданные().Реквизиты.Найти("Комментарий") <> Неопределено Тогда
	//	Док.Комментарий = Комментарий;
	//КонецЕсли;
	//
	//Если Не Док.Проведен Тогда
	//	Док.Дата = ТекущаяДата();
	//КонецЕсли;
	//
	//ИспАвтонумерациюЦБД	= Константы.апИспользоватьНумерациюЦБД.Получить();
	//
	//Если ЗначениеЗаполнено(НомерДок) И (Не ИспАвтонумерациюЦБД) Тогда
	//	Если Менеджер.НайтиПоНомеру(НомерДок, ТекущаяДата()) = Менеджер.ПустаяСсылка() Тогда	
	//		Док.Номер = НомерДок;	
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если СтруктураДокКПК.Свойство("СуммаДокумента") Тогда
	//	Если Док.Метаданные().Реквизиты.Найти("СуммаДокумента") <> Неопределено Тогда
	//		Док.СуммаДокумента 	= СтруктураДокКПК.СуммаДокумента;
	//	КонецЕсли;
	//КонецЕсли;
		
КонецПроцедуры //ЗаполнитьОсновныеПараметрыДокумента()

&НаСервере
Функция ПолучитьУсловияПродажПоУмолчанию(Знач Партнер,
	                                     Знач ДатаДокумента,
	                                     Знач ТолькоТиповые=Ложь,
	                                     Знач ТолькоИспользуемыеВРаботеТП=Ложь,
	                                     Знач ТолькоКредитные=Ложь,
	                                     Знач УчитыватьГруппыСкладов=Ложь,
	                                     Знач ИсключитьГруппыСкладовДоступныеВЗаказах=Ложь,
										 Знач ХозяйственнаяОперация=Неопределено) Экспорт
										 
	Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = НачалоДня(ТекущаяДата());
	Иначе 
		ДатаДокумента = НачалоДня(ДатаДокумента);
	КонецЕсли;
     	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	СоглашениеСКлиентом.Ссылка                                      КАК Соглашение,
		|	СоглашениеСКлиентом.Типовое                                     КАК Типовое,
		|	СоглашениеСКлиентом.Партнер                                     КАК Партнер,
		|	СоглашениеСКлиентом.Контрагент                                  КАК Контрагент,
		|	СоглашениеСКлиентом.Организация                                 КАК Организация,
		|	СоглашениеСКлиентом.Валюта                                      КАК Валюта,
		|	СоглашениеСКлиентом.ГрафикОплаты                                КАК ГрафикОплаты,
		|	СоглашениеСКлиентом.ГрафикОплаты.ФормаОплаты                    КАК ФормаОплаты,
		|	СоглашениеСКлиентом.СуммаДокумента                              КАК СуммаДокумента,
		|	СоглашениеСКлиентом.Регулярное                                  КАК Регулярное,
		|	СоглашениеСКлиентом.Период                                      КАК Период,
		|	СоглашениеСКлиентом.КоличествоПериодов                          КАК КоличествоПериодов,
		|	СоглашениеСКлиентом.СрокПоставки                                КАК СрокПоставки,
		|	СоглашениеСКлиентом.ВидЦен                                      КАК ВидЦен,
		|	СоглашениеСКлиентом.ЦенаВключаетНДС                             КАК ЦенаВключаетНДС,
		|	СоглашениеСКлиентом.НалогообложениеНДС                          КАК НалогообложениеНДС,
		|	СоглашениеСКлиентом.ИспользуетсяВРаботеТорговыхПредставителей   КАК ИспользуетсяВРаботеТорговыхПредставителей,
		|	ВЫБОР
		|		КОГДА
		|			НЕ СоглашениеСКлиентом.Склад.ЭтоГруппа
		|		ТОГДА
		|			СоглашениеСКлиентом.Склад
		|		КОГДА
		|			СоглашениеСКлиентом.Склад.ЭтоГруппа
		|			И &УчитыватьГруппыСкладов
		|			И СоглашениеСКлиентом.Склад.ВыборГруппы В (&ВыборГруппыСкладов)
		|		ТОГДА
		|			СоглашениеСКлиентом.Склад
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	КОНЕЦ КАК Склад,
		|	СоглашениеСКлиентом.СегментНоменклатуры                         КАК СегментНоменклатуры,
		|	СоглашениеСКлиентом.ДатаНачалаДействия                          КАК ДатаНачалаДействия,
		|	СоглашениеСКлиентом.ДатаОкончанияДействия                       КАК ДатаОкончанияДействия,
		|	СоглашениеСКлиентом.ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
		|	СоглашениеСКлиентом.ПроцентРучнойСкидки                         КАК ПроцентРучнойСкидки,
		|	СоглашениеСКлиентом.ПроцентРучнойНаценки                        КАК ПроцентРучнойНаценки,
		|	СоглашениеСКлиентом.СпособРасчетаВознаграждения                 КАК СпособРасчетаВознаграждения,
		|	СоглашениеСКлиентом.ПроцентВознаграждения                       КАК ПроцентВознаграждения,
		|	СоглашениеСКлиентом.УдержатьВознаграждение                      КАК УдержатьВознаграждение,
		|	СоглашениеСКлиентом.ИспользуютсяДоговорыКонтрагентов            КАК ИспользуютсяДоговорыКонтрагентов,
		|	СоглашениеСКлиентом.ДоступноВнешнимПользователям                КАК ДоступноВнешнимПользователям
		|ИЗ
		|	Справочник.СоглашенияСКлиентами КАК СоглашениеСКлиентом
		|ГДЕ
		|	НЕ СоглашениеСКлиентом.ПометкаУдаления И
		|	СоглашениеСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует) И
		|	СоглашениеСКлиентом.Типовое И
		|" + ?(ТолькоИспользуемыеВРаботеТП," СоглашениеСКлиентом.ИспользуетсяВРаботеТорговыхПредставителей И ","") + "
		|" + ?(ЗначениеЗаполнено(ХозяйственнаяОперация)," СоглашениеСКлиентом.ХозяйственнаяОперация=ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации."+ХозяйственнаяОперация+") И ","") + "
		|" + ?(ТолькоКредитные,"(СоглашениеСКлиентом.ГрафикОплаты.ТолькоКредитныеЭтапы ИЛИ СоглашениеСКлиентом.ГрафикОплаты = ЗНАЧЕНИЕ(Справочник.ГрафикиОплаты.ПустаяСсылка)) И","") + "
		|	(СоглашениеСКлиентом.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
		|	ИЛИ СоглашениеСКлиентом.СегментПартнеров В
		|		(ВЫБРАТЬ
		|			ПартнерыСегмента.Сегмент
		|		ИЗ
		|			РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
		|		ГДЕ
		|			ПартнерыСегмента.Партнер = &Партнер))
		|
		|" + ?(ТолькоТиповые,"","
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 2
		|	СоглашениеСКлиентом.Ссылка                                      КАК Соглашение,
		|	СоглашениеСКлиентом.Типовое                                     КАК Типовое,
		|	СоглашениеСКлиентом.Партнер                                     КАК Партнер,
		|	СоглашениеСКлиентом.Контрагент                                  КАК Контрагент,
		|	СоглашениеСКлиентом.Организация                                 КАК Организация,
		|	СоглашениеСКлиентом.Валюта                                      КАК Валюта,
		|	СоглашениеСКлиентом.ГрафикОплаты                                КАК ГрафикОплаты,
		|	СоглашениеСКлиентом.ГрафикОплаты.ФормаОплаты                    КАК ФормаОплаты,
		|	СоглашениеСКлиентом.СуммаДокумента                              КАК СуммаДокумента,
		|	СоглашениеСКлиентом.Регулярное                                  КАК Регулярное,
		|	СоглашениеСКлиентом.Период                                      КАК Период,
		|	СоглашениеСКлиентом.КоличествоПериодов                          КАК КоличествоПериодов,
		|	СоглашениеСКлиентом.СрокПоставки                                КАК СрокПоставки,
		|	СоглашениеСКлиентом.ВидЦен                                      КАК ВидЦен,
		|	СоглашениеСКлиентом.ЦенаВключаетНДС                             КАК ЦенаВключаетНДС,
		|	СоглашениеСКлиентом.НалогообложениеНДС                          КАК НалогообложениеНДС,
		|	СоглашениеСКлиентом.ИспользуетсяВРаботеТорговыхПредставителей   КАК ИспользуетсяВРаботеТорговыхПредставителей,
		|	ВЫБОР
		|		КОГДА
		|			НЕ СоглашениеСКлиентом.Склад.ЭтоГруппа
		|		ТОГДА
		|			СоглашениеСКлиентом.Склад
		|		КОГДА
		|			СоглашениеСКлиентом.Склад.ЭтоГруппа
		|			И &УчитыватьГруппыСкладов
		|			И СоглашениеСКлиентом.Склад.ВыборГруппы В (&ВыборГруппыСкладов)
		|		ТОГДА
		|			СоглашениеСКлиентом.Склад
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	КОНЕЦ КАК Склад,
		|	СоглашениеСКлиентом.СегментНоменклатуры                         КАК СегментНоменклатуры,
		|	СоглашениеСКлиентом.ДатаНачалаДействия                          КАК ДатаНачалаДействия,
		|	СоглашениеСКлиентом.ДатаОкончанияДействия                       КАК ДатаОкончанияДействия,
		|	СоглашениеСКлиентом.ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
		|	СоглашениеСКлиентом.ПроцентРучнойСкидки                         КАК ПроцентРучнойСкидки,
		|	СоглашениеСКлиентом.ПроцентРучнойНаценки                        КАК ПроцентРучнойНаценки,
		|	СоглашениеСКлиентом.СпособРасчетаВознаграждения                 КАК СпособРасчетаВознаграждения,
		|	СоглашениеСКлиентом.ПроцентВознаграждения                       КАК ПроцентВознаграждения,
		|	СоглашениеСКлиентом.УдержатьВознаграждение                      КАК УдержатьВознаграждение,
		|	СоглашениеСКлиентом.ИспользуютсяДоговорыКонтрагентов            КАК ИспользуютсяДоговорыКонтрагентов,
		|	СоглашениеСКлиентом.ДоступноВнешнимПользователям                КАК ДоступноВнешнимПользователям
		|ИЗ
		|	Справочник.СоглашенияСКлиентами КАК СоглашениеСКлиентом
		|ГДЕ
		|	НЕ СоглашениеСКлиентом.ПометкаУдаления
		|	И СоглашениеСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует) И
		|	НЕ СоглашениеСКлиентом.Типовое И 
		|" + ?(ТолькоИспользуемыеВРаботеТП," СоглашениеСКлиентом.ИспользуетсяВРаботеТорговыхПредставителей И ","") + "
		|" + ?(ЗначениеЗаполнено(ХозяйственнаяОперация)," СоглашениеСКлиентом.ХозяйственнаяОперация=ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации."+ХозяйственнаяОперация+") И ","") + "
		|" + ?(ТолькоКредитные,"(СоглашениеСКлиентом.ГрафикОплаты.ТолькоКредитныеЭтапы ИЛИ СоглашениеСКлиентом.ГрафикОплаты = ЗНАЧЕНИЕ(Справочник.ГрафикиОплаты.ПустаяСсылка)) И","") + "
		|	СоглашениеСКлиентом.Партнер = &Партнер
		|УПОРЯДОЧИТЬ ПО
		|	Типовое ВОЗР
		|"));
	
	Запрос.УстановитьПараметр("Партнер",                Партнер);
	Запрос.УстановитьПараметр("ДатаДокумента",          ДатаДокумента);
	Запрос.УстановитьПараметр("ВыборГруппыСкладов",     Справочники.Склады.ВариантыВыбораГруппыСкладов(ИсключитьГруппыСкладовДоступныеВЗаказах));
	Запрос.УстановитьПараметр("УчитыватьГруппыСкладов", УчитыватьГруппыСкладов);

	РезультатЗапроса = Запрос.Выполнить();

	// Если не найдено ни одного соглашения - возвращаем Неопределено 
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();

	НайденноеСоглашение = Неопределено;

	// Если в выборке одно соглашение - используем его
	Если Выборка.Количество() = 1 Тогда
		
		Выборка.Следующий();
		НайденноеСоглашение = Выборка.Соглашение;
		
	КонецЕсли;

	// Если необходимы только типовые соглашения - дальнейшие проверки не имеют смысла
	Если НайденноеСоглашение = Неопределено И Не ТолькоТиповые Тогда
		
		// В выборке два или более соглашений
		Выборка.Следующий();
		
		ПервоеСоглашение        = Выборка.Соглашение;
		ПервоеСоглашениеТиповое = Выборка.Типовое;

		Выборка.Следующий();
		
		ВтороеСоглашениеТиповое = Выборка.Типовое;
		
		Выборка.Сбросить();
		Выборка.Следующий();
	
		// Если в выборке два соглашения разного типа - используем индивидуальное
		Если ПервоеСоглашениеТиповое <> ВтороеСоглашениеТиповое Тогда
			НайденноеСоглашение = ПервоеСоглашение;
		КонецЕсли;

	КонецЕсли;

	Если НайденноеСоглашение = Неопределено Тогда
		НайденноеСоглашение = ПервоеСоглашение;
	КонецЕсли;

	СтруктураРеквизитов = ПолучитьСтруктуруУсловийПродаж();
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Выборка);
	
	Возврат СтруктураРеквизитов;

КонецФункции // ПолучитьУсловияПродажПоУмолчанию()  

&НаСервере
Функция ПолучитьСтруктуруУсловийПродаж()
	
	Возврат Новый Структура("
		|Партнер,
		|Контрагент,
		|Соглашение,
		|Организация,
		|Валюта,
		|Период,
		|ГрафикОплаты,
		|ФормаОплаты,
		|ПорядокОплаты,
		|ГруппаФинансовогоУчета,
		|СуммаДокумента,
		|Регулярное,
		|КоличествоПериодов,
		|СрокПоставки,
		|ВидЦен,
		|ЦенаВключаетНДС,
		|НалогообложениеНДС,
		|ИспользуетсяВРаботеТорговыхПредставителей,
		|Склад,
		|СегментНоменклатуры,
		|Типовое,
		|ДатаНачалаДействия,
		|ДатаОкончанияДействия,
		|ХозяйственнаяОперация,
		|ПроцентРучнойСкидки,
		|ПроцентРучнойНаценки,
		|СпособРасчетаВознаграждения,
		|ПроцентВознаграждения,
		|УдержатьВознаграждение,
		|ИспользуютсяДоговорыКонтрагентов,
		|ДоступноВнешнимПользователям
		|");
		
КонецФункции // ПолучитьСтруктуруУсловийПродаж()

&НаСервере
Процедура ПриИзмененииСкладаСервер(ОбъектДок, СкладГруппа)
	
	Склад = ОбъектДок.Склад;
	
	//СтруктураОтветственного = ПродажиСервер.ПолучитьОтветственногоПоСкладу(ОбъектДок.Склад, ОбъектДок.Менеджер);
	//Если СтруктураОтветственного <> Неопределено Тогда
	//	ОбъектДок.Отпустил 		    = СтруктураОтветственного.Ответственный;
	//	ОбъектДок.ОтпустилДолжность = СтруктураОтветственного.ОтветственныйДолжность;
	//КонецЕсли;
	//
	//Если Не ОбъектДок.РеализацияПоЗаказам Тогда
	//	
	//	//Элементы.ТоварыЗаполнитьСкладВВыделенныхСтроках.Доступность = СкладГруппа;
	//	ОбработкаТабличнойЧастиСервер.ЗаполнитьСкладыВТабличнойЧасти(ОбъектДок.Склад, СкладГруппа, ОбъектДок.Товары, Истина);
	//	
	//КонецЕсли;
	
КонецПроцедуры // ПриИзмененииСкладаСервер()

// Заполняет реквизит "договор" значением по-умолчанию
//
&НаСервере
Процедура ЗаполнитьДоговорПоУмолчанию(ОбъектДок)
	
	//ХозяйственнаяОперацияДоговора = ?(
	//	ОбъектДок.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет"),
	//	ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту"),
	//	ОбъектДок.ХозяйственнаяОперация
	//);
	//	
	//Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
	//	ОбъектДок.Договор,
	//	ОбъектДок.Партнер,
	//	ОбъектДок.Контрагент,
	//	ОбъектДок.Организация,
	//	ХозяйственнаяОперацияДоговора,
	//	ОбъектДок.ВалютаВзаиморасчетов,
	//	ОбъектДок.Соглашение
	//);
	//
	//Если Договор <> ОбъектДок.Договор Тогда
	//	
	//	ОбъектДок.Договор = Договор;
	//	ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(ОбъектДок.Договор, ОбъектДок.БанковскийСчетОрганизации, ОбъектДок.БанковскийСчетКонтрагента);
	//			
	//КонецЕсли;
	
	//ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	
КонецПроцедуры // ЗаполнитьДоговорПоУмолчанию()

&НаСервере
Процедура ПриИзмененииХозяйственнойОперацииСервер(ОбъектДок)
	
	//ЗаполнитьДоговорПоУмолчанию(ОбъектДок);
	//
	//Если ОбъектДок.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
	//	
	//	СкидкиНаценкиСервер.ОтменитьСкидки(Объект, "Товары", Истина, Истина);
	//	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(ОбъектДок, Элементы.ПоказатьСообщения, Ложь);
	//	
	//	Если ОбъектДок.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
	//		ОбъектДок.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка();
	//	КонецЕсли; 
	//	
	//КонецЕсли;
	//
	//ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.РеализацияТоваровУслуг.ПараметрыУказанияСерий(ОбъектДок));
	//ОбработкаТабличнойЧастиСервер.ЗаполнитьСтатусыУказанияСерий(ОбъектДок,ПараметрыУказанияСерий);	
	
КонецПроцедуры // ПриИзмененииХозяйственнойОперацииСервер()
 
// Функция определяет партнера, соответствующего выбранному контрагенту.
//
// Возвращает ссылку котрагента, если найден один контрагент.
// Возвращает Неопределено, если контрагенты не найдены или контрагентов больше одного
//
// Параметры
//  Партнер		- ссылка на партнера, контрагента которого нужно найти
//
Функция ПолучитьКонтрагентаПоПартнеру(Партнер)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Партнер = &Партнер
	|	И Контрагенты.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Контрагент = Выборка.Ссылка;
	Иначе
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Контрагент;

КонецФункции // ПолучитьКонтрагентаПоПартнеру()  

&НаСервереБезКонтекста
Функция ПолучитьСтруктурыРеквизитовКассыИКассыККМ(Касса, КассаККМ)
	
	Возврат Новый Структура("РеквизитыКассы, РеквизитыКассыККМ", 
	              "",
	              ""
	);
	
КонецФункции
       
&НаСервере
// Процедура создает новый документ "РеализацияТоваровИУслуг",на основании документа "ЗаказаПокупателя",
// используя стандартный метод "Заполнить()"                                                            
//
// Добавлена 29.06.2007
//   
Процедура ВвестиРеализациюНаОснованииЗаявки(ДокЗаявка)
	
	// Ищем среди подчиненных документов данной заявки реализацию
	ДокРеализация = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка	
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.ЗаказКлиента.Ссылка = &ЗаказКлиента";
	
	Запрос.УстановитьПараметр("ЗаказКлиента", ДокЗаявка.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		ДокРеализация = Выборка.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	   		
	ЭтоНовыйДок = Ложь;
	Если Не ДокРеализация.Ссылка.Пустая() Тогда // Нашли документ, созданный на основании заявки
		Если Не Объект.флОбновлять Тогда
			Возврат;
		КонецЕсли;		
		ДокРеализация.Товары.Очистить();		
		ДокРеализация.Дата = ТекущаяДата();
	Иначе  
		ЭтоНовыйДок = Истина;
		ДокРеализация = Документы.РеализацияТоваровУслуг;		
		Если Не ВыполнитьОперациюДляОбъекта(ДокРеализация, "создание") Тогда 			
			ТекстСообщения = "Не удалось создать новый документ ""Реализация товаров и услуг""!";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное);
			Возврат;			
		КонецЕсли;  		
		ДокРеализация.Дата = ТекущаяДата();
	КонецЕсли;
	
	// Сначала запишем реализацию
	Если Не ВыполнитьОперациюДляОбъекта(ДокРеализация, "запись") Тогда 						
		ОповеститьОСобытии("Не удалось записать документ: " + Строка(ДокРеализация.Ссылка), СтатусСообщения.Важное, Истина, ДокРеализация.Ссылка);
		Возврат;
	КонецЕсли;	
	
	// Прежде чем заполнять реализацию, нужно провести заказ
	// Попытаемся провести заказ  	
	ОповеститьОСобытии("Попытка проведения документа: " + Строка(ДокЗаявка.Ссылка), СтатусСообщения.Информация);
	
	ОбъектДокЗаявка = ДокЗаявка.Ссылка.ПолучитьОбъект();
	
	Если Не ОбъектДокЗаявка.Проведен Тогда
		Если Не ВыполнитьОперациюДляОбъекта(ОбъектДокЗаявка, "проведение") Тогда 						
			ОповеститьОСобытии("Не удалось провести документ: " + Строка(ДокЗаявка.Ссылка), СтатусСообщения.Важное, Истина, ДокЗаявка.Ссылка);
			ОповеститьОСобытии("Ввод реализации на основании документа: " + Строка(ДокЗаявка.Ссылка) + " не будет произведен!", СтатусСообщения.Информация);

			//ОповеститьОСобытии("Ввод реализации на основании документа: " + Строка(ДокЗаявка.Ссылка) + " не будет произведен! Будет произведена " + 
			//				   "попытка заполнения документа реализации в ручном режиме!", СтатусСообщения.Информация);
			
			
			//Документы.РеализацияТоваровУслуг.запол
			// Нужно прописать ручное заполнение реализации.				   
			Возврат;
		Иначе
			ДокРеализация.Заполнить(ДокЗаявка.Ссылка); 
		КонецЕсли;
	Иначе
		ДокРеализация.Заполнить(ДокЗаявка.Ссылка);
	КонецЕсли;		             	              	
	
	СтруктураДок = Новый Структура("Дата, Широта, Долгота, Категория", ДокРеализация.Дата, 0, 0, Справочники.апКатегорииДокументов.ПустаяСсылка());
	
	ЗаписьДокумента(ДокРеализация, СтруктураДок, ЭтоНовыйДок, Ложь)
	
КонецПроцедуры //ВвестиРеализациюНаОснованииЗаявки()

//////////////////////////////////////////////////////////////////////////
////////// ЗАГРУЗКА ДОКУМЕНТОВ////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ЗагрузитьДокументЗаказ(ТекстXML, ОбъектДок, ЭтоНовыйОбъект)
	
 //   СтруктураПараметров = Новый Структура("ВидДокумента, Номер, Дата, ТипЦен, ИдФирмы, ИдПартнера, ИдДоговора," +
 //   									  "ИдКонтрагента, СуммаДокумента, Комментарий, ВидОплаты, ИдДокОсн," + 
 //   									  "Широта, Долгота, Категория, СпособСоздания, ДатаНачала, ДатаОкончания");										  
 //   
 //   СтруктураПараметров.ВидДокумента       = "Заказ";
 //   СтруктураПараметров.Номер     	   	   = ТекстXML.ПолучитьАтрибут("DocNumber");
 //   СтруктураПараметров.Дата     	   	   = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt"));    	
 //   СтруктураПараметров.ИдФирмы 	   	   = ТекстXML.ПолучитьАтрибут("A02");
 //   СтруктураПараметров.ИдПартнера	   	   = ТекстXML.ПолучитьАтрибут("A03");
 //   СтруктураПараметров.ИдКонтрагента  	   = ТекстXML.ПолучитьАтрибут("A04");	
 //   СтруктураПараметров.ИдДоговора 		   = ТекстXML.ПолучитьАтрибут("A05");	
 //   ОбщаяСкидка 					       = Число(ТекстXML.ПолучитьАтрибут("A06"));
 //   СтруктураПараметров.ТипЦен 	           = ПолучитьСсылкуИзСправочника(ТекстXML.ПолучитьАтрибут("A07"), "ВидыЦен");
 //   СтруктураПараметров.СуммаДокумента	   = Число(ТекстXML.ПолучитьАтрибут("A08"));
 //   ОбщийВес							   = Число(ТекстXML.ПолучитьАтрибут("A09"));	
 //   ДатаДоставки 						   = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A010"));
 //   СтруктураПараметров.Комментарий    	   = ТекстXML.ПолучитьАтрибут("A011");			
 //   СтруктураПараметров.Категория 	       = ПолучитьСсылкуИзСправочника(ТекстXML.ПолучитьАтрибут("A012"), "апКатегорииДокументов");
 //   ИдМерчендайзинга					   = ТекстXML.ПолучитьАтрибут("A013");			
 //   СтруктураПараметров.Широта	    	   = ТекстXML.ПолучитьАтрибут("A014");
 //   СтруктураПараметров.Долгота	    	   = ТекстXML.ПолучитьАтрибут("A015");           	
 //   СтруктураПараметров.ДатаНачала 		   = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A017"));
 //   СтруктураПараметров.ДатаОкончания	   = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A018"));
 //   СтруктураПараметров.ВидОплаты		   = ПолучитьЗначениеПеречисления(ТекстXML.ПолучитьАтрибут("A019"));             	
 //   СтруктураПараметров.СпособСоздания 	   = "User";
 //   
 //   ОбычныйСпособ 					= Перечисления.апРежимыЗагрузкиЗаказов.ОбычныйСпособЗагрузки;
 //   ЗагружатьВРеализацию 			= Перечисления.апРежимыЗагрузкиЗаказов.ЗагружатьВРеализацию;
 //   СоздаватьНаОснованииРеализацию 	= Перечисления.апРежимыЗагрузкиЗаказов.СоздаватьНаОснованииРеализацию;
 //   
 //   РезервированиеЗаказа = Константы.апРезервированиеЗаказов.Получить();
 //   РежимЗагрузкиЗаказов = Константы.апРежимЗагрузкиЗаказов.Получить();
 //   ИспользоватьЗаказы   = Константы.ИспользоватьЗаказыКлиентов.Получить();
 //   
 //   ЭтоЗаказ = Истина;
 //   Если Не ОбъектДок.ЭтоНовый() Тогда
 //   	Если ТипЗнч(ОбъектДок.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
 //   		ЭтоЗаказ = Ложь;
 //	   КонецЕсли;			
 //   Иначе
 //   	ЭтоЗаказ = Истина;
 //   	Если Не (ИспользоватьЗаказы и (РежимЗагрузкиЗаказов = ОбычныйСпособ
 //   		или РежимЗагрузкиЗаказов = СоздаватьНаОснованииРеализацию)) Тогда					
 //   		ЭтоЗаказ = Ложь;
 //   	КонецЕсли;  		
 //   КонецЕсли;
 //   
 //   Если ЭтоЗаказ Тогда
 //   	ДокМенеджер = Документы.ЗаказКлиента;
 //   Иначе
 //   	ДокМенеджер = Документы.РеализацияТоваровУслуг;	
 //   КонецЕсли;	
 //   
 //   ОбъектДок.Заполнить(Неопределено);
 //   
 //   СтруктураОбязательныхПолей = Новый Структура("Организация, Партнер, Контрагент, Соглашение");
 //   
 //   ЗаполнитьОсновныеПараметрыДокумента(ОбъектДок, СтруктураПараметров, ДокМенеджер, СтруктураОбязательныхПолей);
 //   
 //   ОснСклад = ВыбАгент.апОсновнойСклад;	
 //   
 //   Если ОснСклад.Пустая() Тогда		
 //   	ТекстСообщения = "Для агента: " + ВыбАгент + " не указана настройка ""Основной склад""." +
 //   	" В документе " + Строка(ОбъектДок) + " в качестве склада будет склад из соглашения";
 //   	ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Истина, ОбъектДок);  				
 //   КонецЕсли;
 //   
 //   ОбъектДок.Склад = ОснСклад;
 //   
 //   ОбъектДок.Менеджер = ПараметрыСеанса.ТекущийПользователь;
 //   
 //   Соглашение = ОбъектДок.Соглашение;
 //   
 //   Если ЭтоЗаказ Тогда	
 //   	СтатусЗаказа = Перечисления.СтатусыЗаказовКлиентов.Согласован;
 //   	Если РезервированиеЗаказа Тогда
 //   		СтатусЗаказа = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке;
 //   	КонецЕсли;			
 //   	ОбъектДок.Приоритет			   = Перечисления.Приоритеты.Средний;                  		
 //   	ОбъектДок.Статус 			   = СтатусЗаказа;	
 //   	ОбъектДок.ЖелаемаяДатаОтгрузки = ДатаДоставки;
 //   Иначе
 //   	ОбъектДок.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.КОтгрузке;			
 //   КонецЕсли;
 //   
 //   ОбъектДок.ФормаОплаты 		   = СтруктураПараметров.ВидОплаты;
 //   
 //   Если ЗначениеЗаполнено(Соглашение) Тогда
 //   	
 //   	Если Не ЗначениеЗаполнено(ОбъектДок.Склад) Тогда
 //   		ОбъектДок.Склад = Соглашение.Склад;
 //   	КонецЕсли;
 //   	
 //   	ВалютаВзаиморасчетов = Соглашение.Валюта;
 //   	
 //   	ОбъектДок.Валюта 				= ВалютаВзаиморасчетов;
 //   	ОбъектДок.ХозяйственнаяОперация = Соглашение.ХозяйственнаяОперация;   		
 //   	
 //   	Если ЭтоЗаказ Тогда			
 //   		
 //   		Если ЗначениеЗаполнено(Соглашение.ГрафикОплаты) Тогда
 //   			ОбъектДок.ГрафикОплаты = Соглашение.ГрафикОплаты;
 //   			Если Не ЗначениеЗаполнено(ОбъектДок.ФормаОплаты) Тогда
 //   				ОбъектДок.ФормаОплаты  = Соглашение.ГрафикОплаты.ФормаОплаты;
 //   			КонецЕсли;
 //   		КонецЕсли;   		
 //   		
 //   		ОбъектДок.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ОбъектДок.Организация);
 //   		
 //   	Иначе
 //   		
 //   		ОбъектДок.БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ОбъектДок.Организация, , ОбъектДок.БанковскийСчетОрганизации);			 		 				
 //   		ОбъектДок.СрокДоставки   			= ДатаДоставки;		
 //   		ОбъектДок.АдресДоставки 			= ФормированиеПечатныхФорм.ПолучитьАдресИзКонтактнойИнформации(ОбъектДок.Партнер);
 //   		ОбъектДок.ВалютаВзаиморасчетов  	= ВалютаВзаиморасчетов;  			
 //   		ОбъектДок.Подразделение         	= ОбъектДок.Менеджер.ТекущееПодразделение;  			
 //   		
 //   		Если ЗначениеЗаполнено(Соглашение.ГрафикОплаты) Тогда		
 //   			Если Не ЗначениеЗаполнено(ОбъектДок.ФормаОплаты) Тогда
 //   				ОбъектДок.ФормаОплаты  = Соглашение.ГрафикОплаты.ФормаОплаты;
 //   			КонецЕсли;
 //   		КонецЕсли;
 //   		
 //   		Если ЗначениеЗаполнено(ОбъектДок.Склад) Тогда				
 //   			СтруктураОтветственного = ПродажиСервер.ПолучитьОтветственногоПоСкладу(ОбъектДок.Склад, ОбъектДок.Менеджер);
 //   			Если СтруктураОтветственного <> Неопределено Тогда
 //   				ОбъектДок.Отпустил = СтруктураОтветственного.Ответственный;
 //   				ОбъектДок.ОтпустилДолжность = СтруктураОтветственного.ОтветственныйДолжность;
 //   			КонецЕсли;
 //   		КонецЕсли;  			
 //   		
 //   		Если ЗначениеЗаполнено(Соглашение.ГрафикОплаты) Тогда				
 //   			Если ОбъектДок.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту
 //   				ИЛИ ОбъектДок.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет
 //   				ИЛИ Не ЗначениеЗаполнено(ОбъектДок.ХозяйственнаяОперация) Тогда
 //   				ОбъектДок.ДатаПлатежа = ПродажиСервер.ПолучитьПоследнююДатуПоГрафику(ОбъектДок.Дата, Соглашение.ГрафикОплаты);
 //   			КонецЕсли;
 //   		КонецЕсли; 	
 //   		
 //   	КонецЕсли;
 //   	
 //   	ОбъектДок.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(ОбъектДок.Контрагент, , ОбъектДок.БанковскийСчетКонтрагента);		
 //   	ОбъектДок.НалогообложениеНДС   	 = Соглашение.НалогообложениеНДС;
 //   	ОбъектДок.ЦенаВключаетНДС      	 = Соглашение.ЦенаВключаетНДС;  		
 //   	ОбъектДок.ГруппаФинансовогоУчета = Соглашение.ГруппаФинансовогоУчета;	
 //   	ОбъектДок.Касса 		 	  	 = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(ОбъектДок.Организация, ОбъектДок.ФормаОплаты);		
 //   	
 //   	Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
 //   	ОбъектДок.Договор,
 //   	ОбъектДок.Партнер,
 //   	ОбъектДок.Контрагент,
 //   	ОбъектДок.Организация,
 //   	ОбъектДок.ХозяйственнаяОперация,
 //   	ВалютаВзаиморасчетов,
 //   	ОбъектДок.Соглашение
 //   	);
 //   	
 //   	Если ЭтоЗаказ Тогда
 //   		ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(ОбъектДок.Договор, ОбъектДок.БанковскийСчет, ОбъектДок.БанковскийСчетКонтрагента);
 //   	Иначе
 //   		ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(ОбъектДок.Договор, ОбъектДок.БанковскийСчетОрганизации, ОбъектДок.БанковскийСчетКонтрагента);
 //   	КонецЕсли;
 //   	
 //   Иначе
 //   	
 //   	ОбъектДок.ЗаполнитьУсловияПродажПоУмолчанию();		
 //   			
 //   КонецЕсли;
 //   			
 //   Если Не ОбъектДок.ЭтоНовый() Тогда
 //   	ОбъектДок.Товары.Очистить();		
 //   КонецЕсли;
 //   
 //   ВидЦены = СтруктураПараметров.ТипЦен;
 //   
 //   ТекстXML.Прочитать();
 //   // Заполнение табличной части
 //   Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
 //   	
 //   	ТекстXML.Прочитать();
 //   	
 //   	Если СокрЛП(ТекстXML.ПолучитьАтрибут("GUID")) = "0738E61B-F06F-464A-8483-4249E0254819" Тогда
 //   		
 //   		Пока ТекстXML.Прочитать() Цикл
 //   			
 //   			Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
 //   				ТекстXML.Пропустить();
 //   				Прервать;
 //   			КонецЕсли;
 //   			
 //   			Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
 //   				Продолжить;
 //   			КонецЕсли;
 //   			
 //   			ИдНоменклатуры   = ТекстXML.ПолучитьАтрибут("A01");
 //   			ИдХарактеристики = ТекстXML.ПолучитьАтрибут("A02");
 //   			ИдЕдиницыИзм	 = ТекстXML.ПолучитьАтрибут("A03");
 //   			Количество		 = Число(ТекстXML.ПолучитьАтрибут("A04"));
 //   			Цена			 = Число(ТекстXML.ПолучитьАтрибут("A05"));
 //   			Сумма			 = Число(ТекстXML.ПолучитьАтрибут("A06"));
 //   			СуммаНДС		 = Число(ТекстXML.ПолучитьАтрибут("A07"));
 //   			Вес				 = Число(ТекстXML.ПолучитьАтрибут("A08"));
 //   			СкидкаТЧ		 = Число(ТекстXML.ПолучитьАтрибут("A09")); 				
 //   			СтавкаНДС		 = Число(ТекстXML.ПолучитьАтрибут("A010"));				
 //   			ИдСклад			 = ТекстXML.ПолучитьАтрибут("A011");
 //   			ИдВидЦены		 = ТекстXML.ПолучитьАтрибут("A015");
 //   							
 //   			ТекНоменклатура   = ПолучитьСсылкуИзСправочника(ИдНоменклатуры, "Номенклатура");				
 //   			
 //   			ТекХарактеристика = ПолучитьСсылкуИзСправочника(ИдХарактеристики, "ХарактеристикиНоменклатуры");
 //   			Если Не ЗначениеЗаполнено(ТекХарактеристика) Тогда
 //   				апХарактеристика = ПолучитьСсылкуИзСправочника(ИдХарактеристики, "апХарактеристикиНоменклатуры");
 //   				ТекХарактеристика = апХарактеристика.Характеристика;
 //   			КонецЕсли;
 //   			
 //   			ТекЕдиница = ПолучитьСсылкуИзСправочника(ИдЕдиницыИзм, "УпаковкиНоменклатуры");
 //   			Если Не ЗначениеЗаполнено(ТекЕдиница) Тогда
 //   				апЕдиница = ПолучитьСсылкуИзСправочника(ИдЕдиницыИзм, "апЕдиницыИзмерения");
 //   				ТекЕдиница = апЕдиница.Упаковка;					
 //   			КонецЕсли;
 //   			
 //   			ТекВидЦены = ПолучитьСсылкуИзСправочника(ИдВидЦены, "ВидыЦен");     	
 //   			ТекВидЦены = ?(ТекВидЦены.Пустая(), ВидЦены, ТекВидЦены);
 //   			
 //   			ИспСкладыЦБД = Константы.ИспользоватьСкладыВТабличнойЧастиДокументовПродажи.Получить();
 //   			ИспСкладыТП  = ВыбАгент.апИспользоватьСкладыВТабличнойЧастиДокументовПродажи;
 //   			
 //   			ТекСклад = Справочники.Склады.ПустаяСсылка();
 //   			
 //   			Если ИспСкладыЦБД и ИспСкладыТП Тогда					
 //   				ТекСклад = ПолучитьСсылкуИзСправочника(ИдСклад, "Склады");
 //   			КонецЕсли;
 //   			
 //   			Если ТекСклад.Пустая() Тогда
 //   				ТекСклад = ОбъектДок.Склад;
 //   			КонецЕсли;				
 //   			
 //   			НоваяСтрока = ОбъектДок.Товары.Добавить();
 //
 //   			ПроцентРучнойСкидки	= ?(СкидкаТЧ = 0, ОбщаяСкидка, СкидкаТЧ);				
 //   			//НоваяСтрока.СуммаРучнойСкидки = Сумма * СкидкаТЧ/100;	
 //   			
 //   			РежимВыгрузкиНоменклатуры = Константы.апРежимВыгрузкиНоменклатуры.Получить();
 //   			
 //   			ИспХарактеристики = Константы.ИспользоватьХарактеристикиНоменклатуры.Получить() и РежимВыгрузкиНоменклатуры = Перечисления.апРежимыВыгрузкиНоменклатуры.ВРазрезеХарактеристик;
 //   							
 //   			Если ЭтоЗаказ Тогда 					
 //   				ПоляСтруктуры = "Номенклатура, Характеристика, Упаковка, Склад, ВидЦены, Цена, КоличествоУпаковок, ПроцентРучнойСкидки, СрокПоставки, ДатаОтгрузки";
 //   				
 //   				ДопПоля = "Количество, Сумма, СтавкаНДС, СуммаНДС, СуммаСНДС, СуммаРучнойСкидки, СуммаАвтоматическойСкидки," + 
 //   						  "ПроцентАвтоматическойСкидки, СтатусУказанияСерий, ПричинаОтмены, Содержание, СтатусУказанияСерий, УказыватьСерии";					
 //   						  
 //   				ВспомогательныеПоля = "ХарактеристикиИспользуются, Отменено, ТипНоменклатуры, ВариантОформленияПродажи, СуммаОтменено, СуммаНДСОтменено," +
 //   									  "СуммаСНДСОтменено, СуммаАвтоматическойСкидкиОтменено, СуммаРучнойСкидкиОтменено";
 //   			
 //   				ИтоговыеПоляСтруктуры = ПоляСтруктуры + "," + ВспомогательныеПоля + "," + ДопПоля;				
 //   				
 //   				СтруктураЗаполнения = Новый Структура(ИтоговыеПоляСтруктуры, ТекНоменклатура, ТекХарактеристика, ТекЕдиница, ТекСклад, ТекВидЦены, Цена, 
 //   													  Количество, ПроцентРучнойСкидки, ОбъектДок.Соглашение.СрокПоставки, ДатаДоставки, ИспХарактеристики, Ложь);					
 //   			Иначе               														  
 //   				ПоляСтруктуры = "Номенклатура, Характеристика, Упаковка, Склад, ВидЦены, Цена, КоличествоУпаковок, ПроцентРучнойСкидки, СрокПоставки";
 //   				
 //   				ДопПоля = "Количество, Сумма, СтавкаНДС, СуммаНДС, СуммаСНДС, СуммаРучнойСкидки, СуммаАвтоматическойСкидки," + 
 //   						  "ПроцентАвтоматическойСкидки, СтатусУказанияСерий, СуммаВзаиморасчетов, ЗаказКлиента, ДокументРезерваСерий";
 //   				
 //   				ВспомогательныеПоля = "ХарактеристикиИспользуются, ТипНоменклатуры";
 //   				
 //   				ИтоговыеПоляСтруктуры = ПоляСтруктуры + "," + ВспомогательныеПоля + "," + ДопПоля;
 //   				
 //   				СтруктураЗаполнения = Новый Структура(ИтоговыеПоляСтруктуры, ТекНоменклатура, ТекХарактеристика, ТекЕдиница, ТекСклад, ТекВидЦены, Цена, 
 //   												  	  Количество, ПроцентРучнойСкидки, ОбъектДок.Соглашение.СрокПоставки, ИспХарактеристики);					
 //   			КонецЕсли;
 //   			
 //   			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ОбъектДок);
 //   			
 //   			СкладГруппа = ЗначениеНастроекПовтИсп.ПолучитьПризнакСкладГруппаВПродажах(ОбъектДок.Склад);
 //   					
 //   			СтруктураДействий = Новый Структура;   	
 //   			
 //   			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",    ТекХарактеристика);
 //   			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекЕдиница);
 //   			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
 //   			//СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(ОбъектДок, СкладГруппа));
 //   			Если ЗначениеЗаполнено(ОбъектДок.Соглашение) Тогда
 //   				//СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(ОбъектДок));
 //   			Иначе
 //   				СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(ОбъектДок));
 //   			КонецЕсли;												
 //   			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",   ОбъектДок.НалогообложениеНДС);				
 //   			СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
 //   			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);				
 //   			СтруктураДействий.Вставить("ПересчитатьСумму");
 //   			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));				
 //   			//СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
 //   			СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
 //   			
 //   			Если ЭтоЗаказ Тогда          					
 //   				СтруктураЗависимыхРеквизитов = Новый Структура("Отменено", "Сумма, СуммаНДС, СуммаСНДС, СуммаАвтоматическойСкидки, СуммаРучнойСкидки");
 //   				СтруктураДействий.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", Новый Структура("Номенклатура", "ВариантОформленияПродажи"));
 //   				СтруктураДействий.Вставить("ЗаполнитьСодержание",  ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(ОбъектДок, Ложь));
 //   				СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", СтруктураЗависимыхРеквизитов);				
 //   			Иначе
 //   				СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");					
 //   			КонецЕсли;
 //   			
 //   			КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
 //   			
 //   			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтруктураЗаполнения, СтруктураДействий, КэшированныеЗначения);
 //   			
 //   			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураЗаполнения, ПоляСтруктуры + "," + ДопПоля);
 //   														
 //   		КонецЦикла;
 //   		
 //   	КонецЕсли;
 //   	
 //   КонецЕсли; 							
 //   
 //   Если ЭтоЗаказ Тогда
 //   	ОбъектДок.ЗаполнитьЭтапыГрафикаОплаты();
 //   КонецЕсли;
 //   
 //   Результат = ЗаписьДокумента(ОбъектДок, СтруктураПараметров, ЭтоНовыйОбъект);
 //   
 //   Если Результат Тогда
 //   	
 //   	Если ОбъектДок.ПометкаУдаления Тогда
 //   		ТекстСообщения = "На основании документа: " + Строка(ОбъектДок.Ссылка) + " не будет создан документ ""Реализация товаров и услуг"", потому что он помечен на удаление";
 //   		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное, Истина, ОбъектДок.Ссылка);
 //   	Иначе
 //   		Если РежимЗагрузкиЗаказов = СоздаватьНаОснованииРеализацию Тогда
 //   			ВвестиРеализациюНаОснованииЗаявки(ОбъектДок);			
 //   		КонецЕсли;	
 //   	КонецЕсли;	
 //   	
 //   КонецЕсли;
	
КонецПроцедуры // ЗагрузитьДокументЗаказ

&НаСервере
Процедура ЗагрузитьДокументМерчендайзинг(ТекстXML, ОбъектДок, ЭтоНовыйОбъект)
	
	//СтруктураПараметров = Новый Структура("ВидДокумента, Номер, Дата, ТипЦен, ИдФирмы, ИдПартнера, ИдДоговора," +
	//									  "ИдКонтрагента, СуммаДокумента, Комментарий, ВидОплаты, ИдДокОсн," + 
	//									  "Широта, Долгота, Категория, СпособСоздания, ДатаНачала, ДатаОкончания");										  
	//
	//ПометкаУдаления = Булево(Число(ТекстXML.ПолучитьАтрибут("IsDeleted")));
	//
	//СтруктураПараметров.ВидДокумента       = "Мерчендайзинг";
	//СтруктураПараметров.Номер     	   	   = ТекстXML.ПолучитьАтрибут("DocNumber");
	//СтруктураПараметров.Дата     	   	   = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt"));    	
	//СтруктураПараметров.ИдФирмы 	   	   = ТекстXML.ПолучитьАтрибут("A01");
	//СтруктураПараметров.ИдПартнера	   	   = ТекстXML.ПолучитьАтрибут("A02");	
	//СтруктураПараметров.ИдКонтрагента 	   = ТекстXML.ПолучитьАтрибут("A03");
	//СтруктураПараметров.ТипЦен   	       = ТекстXML.ПолучитьАтрибут("A05");	
	//СтруктураПараметров.Комментарий    	   = ТекстXML.ПолучитьАтрибут("A07");		
	//СтруктураПараметров.Категория 	       = ПолучитьСсылкуИзСправочника(ТекстXML.ПолучитьАтрибут("A08"), "апКатегорииДокументов");
	//СтруктураПараметров.Широта	    	   = ТекстXML.ПолучитьАтрибут("A09");
	//СтруктураПараметров.Долгота	    	   = ТекстXML.ПолучитьАтрибут("A010");		
	//ИдДокОснования						   = ТекстXML.ПолучитьАтрибут("A011");		
	//СтруктураПараметров.ДатаНачала	       = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A013"));
	//СтруктураПараметров.ДатаОкончания	   = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A014"));
	//СтруктураПараметров.СпособСоздания 	   = "User";
	//
	//ДокМенеджер = Документы.апМерчендайзинг;
	//
	//СтруктураОбязательныхПолей = Новый Структура("Организация, Партнер");
	//
	//ЗаполнитьОсновныеПараметрыДокумента(ОбъектДок, СтруктураПараметров, ДокМенеджер, СтруктураОбязательныхПолей);
	//
	//ОбъектДок.Ответственный = ПараметрыСеанса.ТекущийПользователь;	
	//ОбъектДок.Агент 		= ВыбАгент;
	//ОбъектДок.Основание     = ПолучитьСсылкуИзДокумента(ИдДокОснования, "ЗаказКлиента");
	//Если Не ЗначениеЗаполнено(ОбъектДок.Основание) Тогда
	//	ОбъектДок.Основание = ПолучитьСсылкуИзДокумента(ИдДокОснования, "РеализацияТоваровУслуг");		
	//КонецЕсли;
	//	
	//Если Не ОбъектДок.ЭтоНовый() Тогда
	//	ОбъектДок.Товары.Очистить();
	//КонецЕсли;
	//
	//ТекстXML.Прочитать();
	//// Заполнение табличной части
	//Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
	//	
	//	ТекстXML.Прочитать();
	//	
	//	Если НРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = "a9c8662f-9554-4deb-a78a-fb66dc757060" Тогда
	//		
	//		Пока ТекстXML.Прочитать() Цикл
	//			
	//			Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
	//				Прервать;
	//			КонецЕсли;
	//			
	//			Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
	//				Продолжить;
	//			КонецЕсли;
	//			
	//			ИдНоменклатуры   = ТекстXML.ПолучитьАтрибут("A01");
	//			ИдХарактеристики = ТекстXML.ПолучитьАтрибут("A02");
	//			ИдЕдиницыИзм	 = ТекстXML.ПолучитьАтрибут("A03");
	//			Количество		 = ТекстXML.ПолучитьАтрибут("A04");
	//			Цена			 = ТекстXML.ПолучитьАтрибут("A05");
	//			Сумма			 = ТекстXML.ПолучитьАтрибут("A07");
	//			
	//			НоваяСтрока      = ОбъектДок.Товары.Добавить();
	//			
	//			ТекНоменклатура   = ПолучитьСсылкуИзСправочника(ИдНоменклатуры, 	"Номенклатура");				
	//			ТекХарактеристика = ПолучитьСсылкуИзСправочника(ИдХарактеристики, 	"ХарактеристикиНоменклатуры");
	//			Если Не ЗначениеЗаполнено(ТекХарактеристика) Тогда
	//				апХарактеристика = ПолучитьСсылкуИзСправочника(ИдХарактеристики, "апХарактеристикиНоменклатуры");
	//				ТекХарактеристика = апХарактеристика.Характеристика;
	//			КонецЕсли;
	//			ТекЕдиница        = ПолучитьСсылкуИзСправочника(ИдЕдиницыИзм, 		"УпаковкиНоменклатуры");
	//			Если Не ЗначениеЗаполнено(ТекЕдиница) Или ТекЕдиница.Пустая() Тогда
	//				апЕдиница = ПолучитьСсылкуИзСправочника(ИдЕдиницыИзм, "апЕдиницыИзмерения");
	//				ТекЕдиница = апЕдиница.Упаковка;					
	//			КонецЕсли;
	//			
	//			НоваяСтрока.Упаковка			= ТекЕдиница;				
	//			НоваяСтрока.Номенклатура		= ТекНоменклатура;
	//			НоваяСтрока.Характеристика		= ТекХарактеристика;
	//			НоваяСтрока.КоличествоУпаковок  = Число(Количество);
	//			НоваяСтрока.Цена      			= Число(Цена);
	//			НоваяСтрока.Сумма     			= Число(Сумма);
	//			
	//		КонецЦикла;
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли; 							
	//
	//Результат = ЗаписьДокумента(ОбъектДок, СтруктураПараметров, ЭтоНовыйОбъект);
	//
	//Если Не Результат Тогда
	//	
	//	СообщитьОПропускеДокумента(СтруктураПараметров)
	//	
	//КонецЕсли;
	
КонецПроцедуры // ЗагрузитьДокументМерчендазинг

&НаСервере
Процедура ЗагрузитьДокументПосещение(ТекстXML, ОбъектДок, ЭтоНовыйОбъект)
	
	//СтруктураПараметров = Новый Структура("ВидДокумента, Номер, Дата, ТипЦен, ИдФирмы, ИдПартнера, ИдДоговора," +
	//									  "ИдКонтрагента, СуммаДокумента, Комментарий, ВидОплаты, ИдДокОсн," + 
	//									  "Широта, Долгота, Категория, СпособСоздания, ДатаНачала, ДатаОкончания");										  
	//
	//ПометкаУдаления = Булево(Число(ТекстXML.ПолучитьАтрибут("IsDeleted")));
	//
	//СтруктураПараметров.ВидДокумента       = "Посещение";
	//СтруктураПараметров.Номер     	   	   = ТекстXML.ПолучитьАтрибут("DocNumber");
	//СтруктураПараметров.Дата     	   	   = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt"));    	
	//СтруктураПараметров.ИдФирмы 	   	   = ТекстXML.ПолучитьАтрибут("A01");
	//СтруктураПараметров.ИдПартнера	   	   = ТекстXML.ПолучитьАтрибут("A02");
	//СтруктураПараметров.ИдКонтрагента  	   = ТекстXML.ПолучитьАтрибут("A03");	
	//ИдРезультата 						   = ТекстXML.ПолучитьАтрибут("A04");
	//СтруктураПараметров.Комментарий    	   = ТекстXML.ПолучитьАтрибут("A05");	
	//СтруктураПараметров.Категория 	       = ПолучитьСсылкуИзСправочника(ТекстXML.ПолучитьАтрибут("A06"), "апКатегорииДокументов");
	//СтруктураПараметров.Широта	    	   = ТекстXML.ПолучитьАтрибут("A07");
	//СтруктураПараметров.Долгота	    	   = ТекстXML.ПолучитьАтрибут("A08");
	//СтруктураПараметров.ДатаНачала	       = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A09"));
	//СтруктураПараметров.ДатаОкончания	   = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A010"));
	//СтруктураПараметров.СпособСоздания 	   = "User";
	//
	//ДокМенеджер = Документы.апПосещение;
	//
	//СтруктураОбязательныхПолей = Новый Структура("Организация, Партнер");
	//
	//ЗаполнитьОсновныеПараметрыДокумента(ОбъектДок, СтруктураПараметров, ДокМенеджер, СтруктураОбязательныхПолей);
	//
	//ОбъектДок.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	//ОбъектДок.Агент 		= ВыбАгент;
	//ОбъектДок.Результат     = ПолучитьСсылкуИзСправочника(ИдРезультата, "апРезультатыПосещений");
	//
	//Если Не ОбъектДок.ЭтоНовый() Тогда
	//	ОбъектДок.Вопросы.Очистить();		
	//КонецЕсли;
	//
	//ТекстXML.Прочитать();
	//// Заполнение табличной части Вопросов
	//Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
	//	
	//	ТекстXML.Прочитать();
	//	
	//	Если НРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = "99f6a8ce-3046-4782-ab5e-557f40243749" Тогда
	//		
	//		Пока ТекстXML.Прочитать() Цикл
	//			
	//			Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
	//				ТекстXML.Пропустить();
	//				Прервать;
	//			КонецЕсли;
	//			
	//			Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
	//				Продолжить;
	//			КонецЕсли;
	//			
	//			ИдВопрос = ТекстXML.ПолучитьАтрибут("A01");
	//			ИдОтвет  = ТекстXML.ПолучитьАтрибут("A02");
	//			
	//			ТекВопрос  = ПолучитьСсылкуИзСправочника(ИдВопрос, "апВопросыАнкеты");
	//			ТекОтвет   = ПолучитьСсылкуИзСправочника(ИдОтвет,  "апОтветыАнкеты");
	//			
	//			Если ЗначениеЗаполнено(ТекВопрос) и ЗначениеЗаполнено(ТекОтвет) Тогда				
	//				НоваяСтрока 	   = ОбъектДок.Вопросы.Добавить();
	//				НоваяСтрока.Вопрос = ТекВопрос;
	//				НоваяСтрока.Ответ  = ТекОтвет;	
	//			КонецЕсли;
	//			
	//		КонецЦикла;
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли; 
	//
	//Результат = ЗаписьДокумента(ОбъектДок, СтруктураПараметров, ЭтоНовыйОбъект);
	//
	//Если Не Результат Тогда		
	//	СообщитьОПропускеДокумента(СтруктураПараметров)		
	//КонецЕсли;
	
КонецПроцедуры // ЗагрузитьДокументМПосещение

&НаСервере
Процедура ЗагрузитьДокументРеализация(ТекстXML, ОбъектДок, ЭтоНовыйОбъект)
	
	//СтруктураПараметров = Новый Структура("ВидДокумента, Номер, Дата, ТипЦен, ИдФирмы, ИдПартнера, ИдДоговора," +
	//									  "ИдКонтрагента, СуммаДокумента, Комментарий, ВидОплаты, ИдДокОсн," + 
	//									  "Широта, Долгота, Категория, СпособСоздания, ДатаНачала, ДатаОкончания");										  
	//
	//СтруктураПараметров.ВидДокумента       = "Реализация";
	//СтруктураПараметров.Номер     	   	   = ТекстXML.ПолучитьАтрибут("DocNumber");
	//СтруктураПараметров.Дата     	   	   = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt"));    	
	//СтруктураПараметров.ИдФирмы 	   	   = ТекстXML.ПолучитьАтрибут("A01");
	//СтруктураПараметров.ИдПартнера	   	   = ТекстXML.ПолучитьАтрибут("A02");	
	//СтруктураПараметров.ИдКонтрагента  	   = ТекстXML.ПолучитьАтрибут("A03");
	//СтруктураПараметров.ИдДоговора 		   = ТекстXML.ПолучитьАтрибут("A04");
	//ОбщаяСкидка							   = ТекстXML.ПолучитьАтрибут("A05");
	//СтруктураПараметров.ТипЦен 	           = ПолучитьСсылкуИзСправочника(ТекстXML.ПолучитьАтрибут("A06"), "ВидыЦен");     	
	//СтруктураПараметров.СуммаДокумента	   = Число(ТекстXML.ПолучитьАтрибут("A07"));
	//ОбщийВес							   = Число(ТекстXML.ПолучитьАтрибут("A08"));
	//СтруктураПараметров.Комментарий    	   = ТекстXML.ПолучитьАтрибут("A09");	
	//СтруктураПараметров.Категория 	       = ПолучитьСсылкуИзСправочника(ТекстXML.ПолучитьАтрибут("A010"), "апКатегорииДокументов");
	//СтруктураПараметров.ИдДокОсн 	 	   = ТекстXML.ПолучитьАтрибут("A011");	
	//СтруктураПараметров.Широта	    	   = ТекстXML.ПолучитьАтрибут("A012");
	//СтруктураПараметров.Долгота	    	   = ТекстXML.ПолучитьАтрибут("A013");	
	//ИдМерчендайзинга					   = ТекстXML.ПолучитьАтрибут("A015");	
	//СтруктураПараметров.ДатаНачала 		   = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A016"));
	//СтруктураПараметров.ДатаОкончания 	   = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A017"));
	//СтруктураПараметров.ВидОплаты 	   	   = ПолучитьЗначениеПеречисления(ТекстXML.ПолучитьАтрибут("A018"));
	//СтруктураПараметров.СпособСоздания 	   = "User";
	//
	//ДокМенеджер = Документы.РеализацияТоваровУслуг;	
	//
	//ОбъектДок.Заполнить(Неопределено);
	//
	//СтруктураОбязательныхПолей = Новый Структура("Организация, Партнер, Контрагент, Соглашение");
	//
	//ЗаполнитьОсновныеПараметрыДокумента(ОбъектДок, СтруктураПараметров, ДокМенеджер, СтруктураОбязательныхПолей);
	//
	////заполним основание
	//ОснованиеЗаказ = Документы.ЗаказКлиента.ПустаяСсылка();
	//ОснованиеЗаказ = ПолучитьСсылкуИзДокумента(СтруктураПараметров.ИдДокОсн, "ЗаказКлиента");
	//Если  Не ОснованиеЗаказ.Пустая() Тогда
	//	ОбъектДок.ЗаказКлиента = ОснованиеЗаказ;
	//	ОбъектДок.РеализацияПоЗаказам = Истина;
	//КонецЕсли;
	//
	//ОбъектДок.Склад = МобильныйСклад;
	//Если МобильныйСклад.Пустая() Тогда		
	//	ТекстСообщения = "Для агента: " + ВыбАгент + " не указана настройка ""Мобильный склад""." +
	//	" В документе " + Строка(ОбъектДок) + " в качестве склада будет указан склад из настроек текущего пользователя";
	//	ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Истина, ОбъектДок);  					
	//	ОбъектДок.Склад = МобильныйСклад;
	//КонецЕсли;	
	//
	//Если Не ЗначениеЗаполнено(ОбъектДок.Склад) Тогда
	//	ОбъектДок.Склад = ВыбАгент.апОсновнойСклад;
	//КонецЕсли;  		
	//
	//Соглашение = ОбъектДок.Соглашение;
	//
	//СкладГруппа = ЗначениеНастроекПовтИсп.ПолучитьПризнакСкладГруппаВПродажах(ОбъектДок.Склад);	
	//
	//Если ЗначениеЗаполнено(Соглашение) Тогда
	//	
	//	ОбъектДок.ЗаполнитьУсловияПродажПоCоглашению();
	//	
	//	ПриИзмененииСкладаСервер(ОбъектДок, СкладГруппа);
	//	
	//	ПриИзмененииХозяйственнойОперацииСервер(ОбъектДок);
	//			
	//	////////////////
	//	
	//	//ВалютаВзаиморасчетов = Соглашение.Валюта;
	//	//
	//	//ОбъектДок.Валюта 				= ВалютаВзаиморасчетов;
	//	//ОбъектДок.ХозяйственнаяОперация = Соглашение.ХозяйственнаяОперация;   		
	//	//
	//	//ОбъектДок.БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ОбъектДок.Организация, , ОбъектДок.БанковскийСчетОрганизации);			 		 	
	//	
	//	//ОбъектДок.АдресДоставки 			= ФормированиеПечатныхФорм.ПолучитьАдресИзКонтактнойИнформации(ОбъектДок.Партнер);
	//	//ОбъектДок.ВалютаВзаиморасчетов  	= ВалютаВзаиморасчетов;  			
	//	//ОбъектДок.Подразделение         	= ОбъектДок.Менеджер.ТекущееПодразделение;  			
	//	//
	//	//Если ЗначениеЗаполнено(Соглашение.ГрафикОплаты) Тогда	
	//	//	Если Не ЗначениеЗаполнено(ОбъектДок.ФормаОплаты) Тогда
	//	//		ОбъектДок.ФормаОплаты  = Соглашение.ГрафикОплаты.ФормаОплаты;
	//	//	КонецЕсли;
	//	//КонецЕсли;
	//	//
	//	//Если ЗначениеЗаполнено(ОбъектДок.Склад) Тогда				
	//	//	СтруктураОтветственного = ПродажиСервер.ПолучитьОтветственногоПоСкладу(ОбъектДок.Склад, ВыбАгент.Пользователь);
	//	//	Если СтруктураОтветственного <> Неопределено Тогда
	//	//		ОбъектДок.Отпустил 			= СтруктураОтветственного.Ответственный;
	//	//		ОбъектДок.ОтпустилДолжность = СтруктураОтветственного.ОтветственныйДолжность;
	//	//	КонецЕсли;
	//	//КонецЕсли;  			
	//	//
	//	//Если ЗначениеЗаполнено(Соглашение.ГрафикОплаты) Тогда				
	//	//	Если ОбъектДок.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту
	//	//		ИЛИ ОбъектДок.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет
	//	//		ИЛИ Не ЗначениеЗаполнено(ОбъектДок.ХозяйственнаяОперация) Тогда
	//	//		ОбъектДок.ДатаПлатежа = ПродажиСервер.ПолучитьПоследнююДатуПоГрафику(ОбъектДок.Дата, Соглашение.ГрафикОплаты);
	//	//	КонецЕсли;
	//	//КонецЕсли; 	
	//	//
	//	//ОбъектДок.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(ОбъектДок.Контрагент, , ОбъектДок.БанковскийСчетКонтрагента);		
	//	//ОбъектДок.НалогообложениеНДС   	 = Соглашение.НалогообложениеНДС;
	//	//ОбъектДок.ЦенаВключаетНДС      	 = Соглашение.ЦенаВключаетНДС;  		
	//	//ОбъектДок.ГруппаФинансовогоУчета = Соглашение.ГруппаФинансовогоУчета;	
	//	//ОбъектДок.Касса 		 	  	 = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(ОбъектДок.Организация, ОбъектДок.ФормаОплаты);		
	//	//
	//	//Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
	//	//ОбъектДок.Договор,
	//	//ОбъектДок.Партнер,
	//	//ОбъектДок.Контрагент,
	//	//ОбъектДок.Организация,
	//	//ОбъектДок.ХозяйственнаяОперация,
	//	//ВалютаВзаиморасчетов,
	//	//ОбъектДок.Соглашение
	//	//);
	//	//
	//	//ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(ОбъектДок.Договор, ОбъектДок.БанковскийСчетОрганизации, ОбъектДок.БанковскийСчетКонтрагента);
	//	
	//Иначе
	//	
	//	ОбъектДок.ЗаполнитьУсловияПродажПоУмолчанию();	 		
	//					
	//КонецЕсли;
	//
	//ПриИзмененииСкладаСервер(ОбъектДок, СкладГруппа);
	//
	//ОбъектДок.Основание     = Документы.РеализацияТоваровУслуг.ПолучитьТекстОснованияДляПечати(ОбъектДок);		
	//ОбъектДок.ФормаОплаты 	= СтруктураПараметров.ВидОплаты;
	//ОбъектДок.Статус		= Перечисления.СтатусыРеализацийТоваровУслуг.КОтгрузке;	
	//			
	//Если Не ОбъектДок.ЭтоНовый() Тогда
	//	ОбъектДок.Товары.Очистить();		
	//КонецЕсли;
	//
	//ВидЦены = СтруктураПараметров.ТипЦен;
	//
	//ТекстXML.Прочитать();
	//// Заполнение табличной части
	//Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
	//	
	//	ТекстXML.Прочитать();
	//	
	//	Если СокрЛП(ТекстXML.ПолучитьАтрибут("GUID")) = "E4D61E0A-1D62-48D7-B70C-BCBA935D377A" Тогда
	//		
	//		Пока ТекстXML.Прочитать() Цикл
	//			
	//			Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
	//				ТекстXML.Пропустить();
	//				Прервать;
	//			КонецЕсли;
	//			
	//			Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
	//				Продолжить;
	//			КонецЕсли;
	//			
	//			ИдНоменклатуры   = ТекстXML.ПолучитьАтрибут("A01");
	//			ИдХарактеристики = ТекстXML.ПолучитьАтрибут("A02");
	//			ИдЕдиницыИзм	 = ТекстXML.ПолучитьАтрибут("A03");
	//			Количество		 = Число(ТекстXML.ПолучитьАтрибут("A04"));
	//			Цена			 = Число(ТекстXML.ПолучитьАтрибут("A05"));
	//			Сумма			 = Число(ТекстXML.ПолучитьАтрибут("A06"));
	//			СуммаНДС		 = Число(ТекстXML.ПолучитьАтрибут("A07"));				
	//			Вес				 = Число(ТекстXML.ПолучитьАтрибут("A08"));
	//			СкидкаТЧ		 = Число(ТекстXML.ПолучитьАтрибут("A09"));
	//			СтавкаНДС		 = Число(ТекстXML.ПолучитьАтрибут("A010"));
	//			ИдСклад			 = ТекстXML.ПолучитьАтрибут("A011");
	//			ИдВидЦены		 = ТекстXML.ПолучитьАтрибут("A015");
	//							
	//			ТекНоменклатура   = ПолучитьСсылкуИзСправочника(ИдНоменклатуры, 	"Номенклатура");
	//			ТекХарактеристика = ПолучитьСсылкуИзСправочника(ИдХарактеристики, 	"ХарактеристикиНоменклатуры");				
	//			ТекХарактеристика = ПолучитьСсылкуИзСправочника(ИдХарактеристики, 	"ХарактеристикиНоменклатуры");
	//			Если Не ЗначениеЗаполнено(ТекХарактеристика) Тогда
	//				апХарактеристика = ПолучитьСсылкуИзСправочника(ИдХарактеристики, "апХарактеристикиНоменклатуры");
	//				ТекХарактеристика = апХарактеристика.Характеристика;
	//			КонецЕсли;
	//			ТекЕдиница        = ПолучитьСсылкуИзСправочника(ИдЕдиницыИзм, 		"УпаковкиНоменклатуры");
	//			Если Не ЗначениеЗаполнено(ТекЕдиница) Тогда
	//				апЕдиница = ПолучитьСсылкуИзСправочника(ИдЕдиницыИзм, "апЕдиницыИзмерения");
	//				ТекЕдиница = апЕдиница.Упаковка;					
	//			КонецЕсли;
	//			ТекВидЦены = ПолучитьСсылкуИзСправочника(ИдВидЦены, "ВидыЦен");     	
	//			ТекВидЦены = ?(ТекВидЦены.Пустая(), ВидЦены, ТекВидЦены);
	//			
	//			ИспСкладыЦБД = Константы.ИспользоватьСкладыВТабличнойЧастиДокументовПродажи.Получить();
	//			ИспСкладыТП  = ВыбАгент.апИспользоватьСкладыВТабличнойЧастиДокументовПродажи;
	//			
	//			ТекСклад = Справочники.Склады.ПустаяСсылка();
	//			Если ИспСкладыЦБД И ИспСкладыТП Тогда					
	//				ТекСклад  = ПолучитьСсылкуИзСправочника(ИдСклад, "Склады");
	//			КонецЕсли;
	//			
	//			Если ТекСклад.Пустая() Тогда
	//				ТекСклад = ОбъектДок.Склад;
	//			КонецЕсли;
	//							
	//			НоваяСтрока = ОбъектДок.Товары.Добавить();

	//			ПроцентРучнойСкидки	= ?(СкидкаТЧ = 0, ОбщаяСкидка, СкидкаТЧ);				
	//			//НоваяСтрока.СуммаРучнойСкидки 			= Сумма * СкидкаТЧ/100;	
	//			
	//			РежимВыгрузкиНоменклатуры = Константы.апРежимВыгрузкиНоменклатуры.Получить();
	//			
	//			ИспХарактеристики = Константы.ИспользоватьХарактеристикиНоменклатуры.Получить() и РежимВыгрузкиНоменклатуры = Перечисления.апРежимыВыгрузкиНоменклатуры.ВРазрезеХарактеристик;
	//			
	//			ПоляСтруктуры = "Номенклатура, Характеристика, Упаковка, Склад, ВидЦены, Цена, КоличествоУпаковок, ПроцентРучнойСкидки, СрокПоставки";
	//			
	//			ДопПоля = "Количество, Сумма, СтавкаНДС, СуммаНДС, СуммаСНДС, СуммаРучнойСкидки, СуммаАвтоматическойСкидки," + 
	//					  "ПроцентАвтоматическойСкидки, СтатусУказанияСерий, СуммаВзаиморасчетов, ЗаказКлиента, ДокументРезерваСерий";
	//			
	//			ВспомогательныеПоля = "ХарактеристикиИспользуются, ТипНоменклатуры";
	//			
	//			ИтоговыеПоляСтруктуры = ПоляСтруктуры + "," + ВспомогательныеПоля + "," + ДопПоля;
	//			
	//			СтруктураЗаполнения = Новый Структура(ИтоговыеПоляСтруктуры, ТекНоменклатура, ТекХарактеристика, ТекЕдиница, ТекСклад, ТекВидЦены, Цена, 
	//											  	  Количество, ПроцентРучнойСкидки, ОбъектДок.Соглашение.СрокПоставки, ИспХарактеристики);				
	//			
	//			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ОбъектДок);
	//			
	//			СкладГруппа = ЗначениеНастроекПовтИсп.ПолучитьПризнакСкладГруппаВПродажах(ОбъектДок.Склад);
	//					
	//			СтруктураДействий = Новый Структура;
	//			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",    ТекХарактеристика);
	//			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекЕдиница);				
	//			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");				
	//			//СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(ОбъектДок, СкладГруппа));
	//			Если ЗначениеЗаполнено(ОбъектДок.Соглашение) Тогда
	//				//СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(ОбъектДок));
	//			Иначе
	//				СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(ОбъектДок));
	//			КонецЕсли;
	//			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", 	ОбъектДок.НалогообложениеНДС);
	//			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", 	СтруктураПересчетаСуммы);
	//			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", 	СтруктураПересчетаСуммы);
	//			СтруктураДействий.Вставить("ПересчитатьСумму");
	//			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));				
	//			СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	//			
	//			КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	//			
	//			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтруктураЗаполнения, СтруктураДействий, КэшированныеЗначения);
	//			
	//			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураЗаполнения, ПоляСтруктуры + "," + ДопПоля);
	//																		
	//		КонецЦикла;
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли; 							
	//
	//Результат = ЗаписьДокумента(ОбъектДок, СтруктураПараметров, ЭтоНовыйОбъект);
	//
	//Если Результат Тогда
	//	
	//	Если ОбъектДок.ПометкаУдаления Тогда
	//		ТекстСообщения = "На основании документа: " + Строка(ОбъектДок.Ссылка) + " не будет создан документ ""Реализация товаров и услуг"", потому что он помечен на удаление";
	//		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное, Истина, ОбъектДок.Ссылка);		
	//	КонецЕсли;	
	//	
	//КонецЕсли;
	
КонецПроцедуры // ЗагрузитьДокументРеализация
     
&НаСервере
Процедура ЗагрузитьДокументСчетФактура(ТекстXML, ОбъектДок, ЭтоНовыйОбъект)
	
	//СтруктураПараметров = Новый Структура("ВидДокумента, Номер, Дата, ТипЦен, ИдФирмы, ИдПартнера, ИдДоговора," +
	//									  "ИдКонтрагента, СуммаДокумента, Комментарий, ВидОплаты, ИдДокОсн," + 
	//									  "Широта, Долгота, Категория, СпособСоздания, ДатаНачала, ДатаОкончания");										  
	//
	//СтруктураПараметров.ВидДокумента  = "СчетФактура";
	//СтруктураПараметров.Номер     	  = ТекстXML.ПолучитьАтрибут("DocNumber");
	//СтруктураПараметров.Дата     	  = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt"));    	
	//СтруктураПараметров.ИдДокОсн	  = ТекстXML.ПолучитьАтрибут("A01");
	//СтруктураПараметров.Широта     	  = 0;    	
	//СтруктураПараметров.Долгота   	  = 0;
	//СтруктураПараметров.Категория     = Справочники.апКатегорииДокументов.ПустаяСсылка();	
	//
	//ДокМенеджер = Документы.СчетФактураВыданный;
	//
	//ДокОснование = ПолучитьСсылкуИзДокумента(СтруктураПараметров.ИдДокОсн, "РеализацияТоваровУслуг");
	//
	//Если ЗначениеЗаполнено(ДокОснование) Тогда
	//	
	//	ОбъектОснования = ДокОснование.ПолучитьОбъект();
	//	
	//	Если ОбъектОснования <> Неопределено Тогда	 				
	//				
	//		СсылкаОснования = ОбъектОснования.Ссылка; 
	//		
	//		ОбъектДок.Организация 	  = СсылкаОснования.Организация;
	//		ОбъектДок.ДатаВыставления = СтруктураПараметров.Дата ;
	//		
	//		ДанныеЗаполнения = Новый Структура("ДокументОснование, Дата, КодВидаОперации, Исправление", 
	//		СсылкаОснования, СсылкаОснования.Дата, 0, Ложь);
	//		
	//		ОбъектДок.Заполнить(ДанныеЗаполнения);
	//					
	//		Результат = ЗаписьДокумента(ОбъектДок, СтруктураПараметров, ЭтоНовыйОбъект);
	//		
	//		Если Не Результат Тогда
	//			
	//			СообщитьОПропускеДокумента(СтруктураПараметров)
	//			
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//		
	//КонецЕсли;		
		
КонецПроцедуры // ЗагрузитьДокументСчетФактура

&НаСервере
Процедура ЗагрузитьДокументПеремещение(ТекстXML, ОбъектДок, ЭтоНовыйОбъект)

	//СтруктураПараметров = Новый Структура("ВидДокумента, Номер, Дата, ТипЦен, ИдФирмы, ИдПартнера, ИдДоговора," +
	//									  "ИдКонтрагента, СуммаДокумента, Комментарий, ВидОплаты, ИдДокОсн," + 
	//									  "Широта, Долгота, Категория, СпособСоздания, ДатаНачала, ДатаОкончания," +
	//									  "СкладОтправитель, СкладПолучатель");										  
	//									  
	//КатегорияСсылка = ПолучитьСсылкуИзСправочника(ТекстXML.ПолучитьАтрибут("A02"), "апКатегорииДокументов");
	//									  
	//СтруктураПараметров.ВидДокумента       = "ПеремещениеТоваров";	
	//СтруктураПараметров.Номер     	   	   = ТекстXML.ПолучитьАтрибут("DocNumberPrefix") + ТекстXML.ПолучитьАтрибут("DocNumber");
	//СтруктураПараметров.Дата     	   	   = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt"));    		
	//СтруктураПараметров.ИдФирмы 	   	   = ТекстXML.ПолучитьАтрибут("A01");	
	//СтруктураПараметров.Категория 	       = КатегорияСсылка;
	//СтруктураПараметров.СкладОтправитель   = ТекстXML.ПолучитьАтрибут("A03");	
	//СтруктураПараметров.СкладПолучатель	   = ТекстXML.ПолучитьАтрибут("A04");		
	//СтруктураПараметров.Комментарий    	   = ТекстXML.ПолучитьАтрибут("A06");		
	//СтруктураПараметров.Широта	    	   = ТекстXML.ПолучитьАтрибут("A07");
	//СтруктураПараметров.Долгота	    	   = ТекстXML.ПолучитьАтрибут("A08");		
	//СтруктураПараметров.ТипЦен	    	   = ПолучитьСсылкуИзСправочника(ТекстXML.ПолучитьАтрибут("A09"), "ВидыЦен");
	//СтруктураПараметров.ДатаНачала 		   = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A010"));
	//СтруктураПараметров.ДатаОкончания 	   = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A011"));
	//СтруктураПараметров.СпособСоздания 	   = "User";
	//
	//Менеджер = Документы.ПеремещениеТоваров;
	//
	//СтруктураОбязательныхПолей = Новый Структура("Организация");
	//
	//ЗаполнитьОсновныеПараметрыДокумента(ОбъектДок, СтруктураПараметров, Менеджер, СтруктураОбязательныхПолей);	

	//ПредставлениеДокВКПК = СтруктураПараметров.ВидДокумента + " № " + 
	//					   СтруктураПараметров.Номер + " от " + СтруктураПараметров.Дата;
	//
	//// Получаем склад-отправитель из документа
	//Если ЭтоПустойИдентификатор(СтруктураПараметров.СкладОтправитель) Тогда			
	//	ОповеститьОСобытии("В документе: " + ПредставлениеДокВКПК + " не указан склад-отправитель!", СтатусСообщения.Внимание);      
	//Иначе		
	//	СкладОтправитель = ПолучитьСсылкуИзСправочника(СтруктураПараметров.СкладОтправитель, "Склады");					
	//	ОбъектДок.СкладОтправитель = СкладОтправитель;
	//КонецЕсли;    		
	//
	//// Получаем склад-получатель из документа
	//Если ЭтоПустойИдентификатор(СтруктураПараметров.СкладПолучатель) Тогда			
	//	ОповеститьОСобытии("В документе: " + ПредставлениеДокВКПК + " не указан склад-получатель!", СтатусСообщения.Внимание);      
	//Иначе		
	//	СкладПолучатель = ПолучитьСсылкуИзСправочника(СтруктураПараметров.СкладПолучатель, "Склады");					
	//	ОбъектДок.СкладПолучатель = СкладПолучатель;
	//КонецЕсли; 
	//
	//ОбъектДок.Статус   = Перечисления.СтатусыПеремещенийТоваров.Принято;
	//ОбъектДок.ВидЦены  = СтруктураПараметров.ТипЦен;
	//ОбъектДок.Водитель = ВыбАгент.Пользователь.ФизическоеЛицо;
	//
	//Если Не ОбъектДок.ЭтоНовый() Тогда		
	//	ОбъектДок.Товары.Очистить();		
	//КонецЕсли;
	//
	//ОбъектДок.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	//
	//ТекстXML.Прочитать();
	//// Заполнение табличной части
	//Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
	//	
	//	ТекстXML.Прочитать();
	//	
	//	Если НРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = "3097f10a-bee6-4a76-ad7a-d4663c9b73ec" Тогда
	//		
	//		Пока ТекстXML.Прочитать() Цикл
	//			
	//			Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
	//				Прервать;
	//			КонецЕсли;
	//			
	//			Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
	//				Продолжить;
	//			КонецЕсли;
	//			
	//			ИдНоменклатуры   = ТекстXML.ПолучитьАтрибут("A01");
	//			ИдХарактеристики = ТекстXML.ПолучитьАтрибут("A02");
	//			ИдЕдиницыИзм	 = ТекстXML.ПолучитьАтрибут("A03");
	//			Количество		 = ТекстXML.ПолучитьАтрибут("A04");
	//			Цена			 = ТекстXML.ПолучитьАтрибут("A05");
	//			
	//			НоваяСтрока      = ОбъектДок.Товары.Добавить();
	//			
	//			ТекНоменклатура   = ПолучитьСсылкуИзСправочника(ИдНоменклатуры,   "Номенклатура");
	//			ТекХарактеристика = ПолучитьСсылкуИзСправочника(ИдХарактеристики, "ХарактеристикиНоменклатуры");
	//			ТекХарактеристика = ПолучитьСсылкуИзСправочника(ИдХарактеристики, 	"ХарактеристикиНоменклатуры");
	//			Если Не ЗначениеЗаполнено(ТекХарактеристика) Тогда
	//				апХарактеристика = ПолучитьСсылкуИзСправочника(ИдХарактеристики, "апХарактеристикиНоменклатуры");
	//				ТекХарактеристика = апХарактеристика.Характеристика;
	//			КонецЕсли;
	//			ТекЕдиница        = ПолучитьСсылкуИзСправочника(ИдЕдиницыИзм, 	  "УпаковкиНоменклатуры");
	//			Если Не ЗначениеЗаполнено(ТекЕдиница) Тогда
	//				апЕдиница = ПолучитьСсылкуИзСправочника(ИдЕдиницыИзм, "апЕдиницыИзмерения");
	//				ТекЕдиница = апЕдиница.Упаковка;					
	//			КонецЕсли;                                                        				
	//			
	//			ПоляСтруктуры = "Номенклатура, Характеристика, Упаковка, КоличествоУпаковок";
	//			СтруктураЗаполнения = Новый Структура(ПоляСтруктуры, ТекНоменклатура, ТекХарактеристика, ТекЕдиница, Количество);
	//			
	//			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураЗаполнения, ПоляСтруктуры);			
	//			
	//			СтруктураДействий = Новый Структура;   				
	//			
	//			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекЕдиница);
	//			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	//			
	//			КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	//			
	//			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);				
	//			
	//		КонецЦикла;
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли; 							
	//
	//Результат = ЗаписьДокумента(ОбъектДок, СтруктураПараметров, ЭтоНовыйОбъект);
	//
	//Если Результат = 2 Тогда
	//	
	//	СообщитьОПропускеДокумента(СтруктураПараметров)
	//	
	//КонецЕсли;
	
КонецПроцедуры // ЗагрузитьДокументПеремещение

&НаСервере
Процедура ЗагрузитьДокументПоступление(ТекстXML, ОбъектДок, ЭтоНовыйОбъект)
	
	//СтруктураПараметров = Новый Структура("ВидДокумента, Номер, Дата, ТипЦен, ИдФирмы, ИдПартнера, ИдДоговора," +
	//									  "ИдКонтрагента, СуммаДокумента, Комментарий, ВидОплаты, ИдДокОсн," + 
	//									  "Широта, Долгота, Категория, СпособСоздания, ДатаНачала, ДатаОкончания");
	//
	//СтруктураПараметров.ВидДокумента       = ОбъектДок.Метаданные().Имя;	
	//СтруктураПараметров.Номер     	   	   = ТекстXML.ПолучитьАтрибут("DocNumberPrefix") + ТекстXML.ПолучитьАтрибут("DocNumber");
	//СтруктураПараметров.Дата     	   	   = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt"));    		
	//СтруктураПараметров.ИдФирмы 	   	   = ТекстXML.ПолучитьАтрибут("A01");	
	//СтруктураПараметров.ИдПартнера 	   	   = ТекстXML.ПолучитьАтрибут("A02");	
	//СтруктураПараметров.ИдКонтрагента      = ТекстXML.ПолучитьАтрибут("A03");	
	//СтруктураПараметров.ИдДоговора	   	   = ТекстXML.ПолучитьАтрибут("A04");
	//СтруктураПараметров.СуммаДокумента	   = ТекстXML.ПолучитьАтрибут("A07");		
	//СтруктураПараметров.Комментарий    	   = ТекстXML.ПолучитьАтрибут("A09");	
	//СтруктураПараметров.Категория 	       = ПолучитьСсылкуИзСправочника(ТекстXML.ПолучитьАтрибут("A010"), "апКатегорииДокументов");		
	//СтруктураПараметров.ИдДокОсн		   = ТекстXML.ПолучитьАтрибут("A011");
	//СтруктураПараметров.Широта	    	   = ТекстXML.ПолучитьАтрибут("A013");
	//СтруктураПараметров.Долгота	    	   = ТекстXML.ПолучитьАтрибут("A014");		
	//ИдСклада	    	   				   = ТекстXML.ПолучитьАтрибут("A016");
	//СтруктураПараметров.ДатаНачала	       = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A017"));
	//СтруктураПараметров.ДатаОкончания      = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A018"));
	//СтруктураПараметров.ВидОплаты          = ТекстXML.ПолучитьАтрибут("A019");	
	//СтруктураПараметров.СпособСоздания 	   = "User";
	//	
	//ПредставлениеДокВКПК = СтруктураПараметров.ВидДокумента + " № " + 
	//					   СтруктураПараметров.Номер + " от " + СтруктураПараметров.Дата;
	//
	//ДокМенеджер = Документы[СтруктураПараметров.ВидДокумента];
	//
	//ОбъектДок.Заполнить(Неопределено);
	//
	//ЭтоВозврат = Истина;
	//Если ТипЗнч(ОбъектДок) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда		
	//	ЭтоВозврат = Ложь;
	//КонецЕсли;	
	//
	//СтруктураОбязательныхПолей = Новый Структура("Организация, Партнер, Контрагент, Соглашение");
	//
	//ЗаполнитьОсновныеПараметрыДокумента(ОбъектДок, СтруктураПараметров, ДокМенеджер, СтруктураОбязательныхПолей);
	//
	//Склад = ПолучитьСсылкуИзСправочника(ИдСклада, "Склады");
	//
	//// Если склад в документе оказался не заполненнным
	//Если Склад.Пустая() Тогда		
	//	Если МобильныйСклад.Пустая() Тогда
	//		Склад = ВыбАгент.апОсновнойСклад;
	//	Иначе
	//		Склад = МобильныйСклад;
	//	КонецЕсли;	
	//КонецЕсли;
	//
	//ОбъектДок.Склад = Склад;
	//
	//Если ЭтоВозврат Тогда	
	//	ОбъектДок.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента;		
	//Иначе
	//	ОбъектДок.ДатаПлатежа   = ОбъектДок.Дата;
	//	
	//	СтруктураОтветственного = ЗакупкиСервер.ПолучитьОтветственногоПоСкладу(ОбъектДок.Склад, ОбъектДок.Менеджер);
	//	Если СтруктураОтветственного <> Неопределено Тогда
	//		ОбъектДок.Принял 		  = СтруктураОтветственного.Ответственный;
	//		ОбъектДок.ПринялДолжность = СтруктураОтветственного.ОтветственныйДолжность;
	//	КонецЕсли;
	//	
	//	ФормаОплаты = ПолучитьЗначениеПеречисления(СтруктураПараметров.ВидОплаты); 
	//	Если ФормаОплаты = Неопределено Тогда
	//		ОбъектДок.ФормаОплаты = Перечисления.ФормыОплаты.Наличная;
	//	Иначе
	//		ОбъектДок.ФормаОплаты = ФормаОплаты;
	//	КонецЕсли;                              	
	//КонецЕсли;
	//
	//Соглашение = ОбъектДок.Соглашение;
	//
	//Если ЗначениеЗаполнено(Соглашение) Тогда
	//	
	//	Если Не ЗначениеЗаполнено(ОбъектДок.Склад) Тогда
	//		ОбъектДок.Склад = Соглашение.Склад;
	//	КонецЕсли;
	//	
	//	Если Не ЭтоВозврат Тогда	
	//		ОбъектДок.ХозяйственнаяОперация = Соглашение.ХозяйственнаяОперация;
	//		Если Не ЗначениеЗаполнено(ОбъектДок.ХозяйственнаяОперация) Тогда
	//			ОбъектДок.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	//		КонецЕсли;
	//		Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(
	//		ОбъектДок.Договор,
	//		ОбъектДок.Партнер,
	//		ОбъектДок.Контрагент,
	//		ОбъектДок.Организация,
	//		ОбъектДок.ХозяйственнаяОперация,,
	//		ОбъектДок.ВалютаВзаиморасчетов,
	//		ОбъектДок.Соглашение
	//		);
	//		Если Договор <> Объект.Договор Тогда
	//			ОбъектДок.Договор = Договор;
	//			ЗакупкиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(ОбъектДок.Договор, ОбъектДок.БанковскийСчетОрганизации, ОбъектДок.БанковскийСчетКонтрагента);
	//		КонецЕсли;	
	//	КонецЕсли;
	//	
	//	ВалютаВзаиморасчетов = Соглашение.Валюта;		
	//	
	//	ОбъектДок.Валюта 				= ВалютаВзаиморасчетов;				
	//	ОбъектДок.НалогообложениеНДС    = Соглашение.НалогообложениеНДС;
	//	ОбъектДок.ЦенаВключаетНДС       = Соглашение.ЦенаВключаетНДС;  		
	//	
	//КонецЕсли;
	//
	//Если Не ОбъектДок.ЭтоНовый() Тогда		
	//	ОбъектДок.Товары.Очистить();				
	//КонецЕсли;
	//
	//Если ЭтоВозврат Тогда
	//	ИмяТЧ = "235dc1ea-5963-4dcd-95e1-e8cef487a2ae";
	//Иначе
	//	ИмяТЧ = "a10221fa-5ac6-4e8c-80d8-d40d8dfc7779";
	//КонецЕсли;
	//
	//ТекстXML.Прочитать();
	//// Заполнение табличной части
	//Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
	//	
	//	ТекстXML.Прочитать();
	//	
	//	Если НРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = ИмяТЧ Тогда
	//		
	//		Пока ТекстXML.Прочитать() Цикл
	//			
	//			Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
	//				Прервать;
	//			КонецЕсли;
	//			
	//			Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
	//				Продолжить;
	//			КонецЕсли;
	//			
	//			ИдНоменклатуры   = ТекстXML.ПолучитьАтрибут("A01");
	//			ИдХарактеристики = ТекстXML.ПолучитьАтрибут("A02");
	//			ИдЕдиницыИзм	 = ТекстXML.ПолучитьАтрибут("A03");
	//			Количество		 = ТекстXML.ПолучитьАтрибут("A04");
	//			Цена			 = ТекстXML.ПолучитьАтрибут("A05");
	//			Сумма			 = Число(ТекстXML.ПолучитьАтрибут("A06"));				
	//			СуммаНДС		 = Число(ТекстXML.ПолучитьАтрибут("A07"));
	//			Скидка			 = Число(ТекстXML.ПолучитьАтрибут("A09"));
	//			СтавкаНДС		 = Число(ТекстXML.ПолучитьАтрибут("A010"));								
	//			
	//			ТекНоменклатура   = ПолучитьСсылкуИзСправочника(ИдНоменклатуры,	  "Номенклатура");
	//			ТекХарактеристика = ПолучитьСсылкуИзСправочника(ИдХарактеристики, "ХарактеристикиНоменклатуры");				
	//			ТекХарактеристика = ПолучитьСсылкуИзСправочника(ИдХарактеристики, 	"ХарактеристикиНоменклатуры");
	//			Если Не ЗначениеЗаполнено(ТекХарактеристика) Тогда
	//				апХарактеристика = ПолучитьСсылкуИзСправочника(ИдХарактеристики, "апХарактеристикиНоменклатуры");
	//				ТекХарактеристика = апХарактеристика.Характеристика;
	//			КонецЕсли;
	//			ТекЕдиница        = ПолучитьСсылкуИзСправочника(ИдЕдиницыИзм, 	  "УпаковкиНоменклатуры");
	//			Если Не ЗначениеЗаполнено(ТекЕдиница) Тогда
	//				апЕдиница = ПолучитьСсылкуИзСправочника(ИдЕдиницыИзм, "апЕдиницыИзмерения");
	//				ТекЕдиница = апЕдиница.Упаковка;					
	//			КонецЕсли;                                              
	//			
	//			НоваяСтрока = ОбъектДок.Товары.Добавить();
	//						
	//			Если ЭтоВозврат Тогда
	//				ПоляСтруктуры = "Номенклатура, Характеристика, Упаковка, Цена, КоличествоУпаковок";
	//				СтруктураЗаполнения = Новый Структура(ПоляСтруктуры, ТекНоменклатура, ТекХарактеристика, ТекЕдиница, 
	//				Цена, Количество);				
	//			Иначе
	//				ПоляСтруктуры = "Номенклатура, Характеристика, Упаковка, Цена, КоличествоУпаковок, Склад";
	//				СтруктураЗаполнения = Новый Структура(ПоляСтруктуры, ТекНоменклатура, ТекХарактеристика, ТекЕдиница, 
	//				Цена, Количество, ОбъектДок.Склад);				
	//			КонецЕсли;
	//			
	//			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураЗаполнения, ПоляСтруктуры);			
	//			
	//			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ОбъектДок);
	//					
	//			СтруктураДействий = Новый Структура;   		
	//			
	//			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", НоваяСтрока.Упаковка);
	//			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	//			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",   ОбъектДок.НалогообложениеНДС);				
	//			СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);				
	//			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);				
	//			СтруктураДействий.Вставить("ПересчитатьСумму");
	//			
	//			Если Не ЭтоВозврат Тогда
	//				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	//			КонецЕсли;
	//			
	//			КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	//			
	//			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
	// 							
	//		КонецЦикла;
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли; 				
	//
	//
	//Если ЭтоВозврат Тогда						
	//	
	//	Если ТаблицаДокументовПоступлений = Неопределено Тогда
	//		ТаблицаДокументовПоступлений = Новый ТаблицаЗначений;	
	//		ТаблицаДокументовПоступлений.Колонки.Добавить("Документ");
	//		ТаблицаДокументовПоступлений.Колонки.Добавить("СтруктураДокумента");
	//		ТаблицаДокументовПоступлений.Колонки.Добавить("ЭтоНовыйОбъект");
	//		ТаблицаДокументовПоступлений.Колонки.Добавить("ИдОснования");  
	//	КонецЕсли;
	//	
	//	// Добавляем запись во вспомогательную таблицу
	//	НоваяЗапись = ТаблицаДокументовПоступлений.Добавить();
	//	НоваяЗапись.Документ 		 	= ОбъектДок;
	//	НоваяЗапись.СтруктураДокумента  = СтруктураПараметров;
	//	НоваяЗапись.ЭтоНовыйОбъект   	= ЭтоНовыйОбъект;
	//	НоваяЗапись.ИдОснования	    	= СтруктураПараметров.ИдДокОсн;
	//	
	//Иначе
	//	
	//	Результат = ЗаписьДокумента(ОбъектДок, СтруктураПараметров, ЭтоНовыйОбъект);
	//	
	//КонецЕсли;
	
КонецПроцедуры // ЗагрузитьДокументПоступление

&НаСервере
Процедура ЗагрузитьДокументОрдера(ТекстXML, ОбъектДок, ЭтоНовыйОбъект)
	
 //   СтруктураПараметров = Новый Структура("ВидДокумента, Номер, Дата, ТипЦен, ИдФирмы, ИдПартнера, ИдДоговора," +
 //   									  "ИдКонтрагента, СуммаДокумента, Комментарий, ВидОплаты, ИдДокОсн," + 
 //   									  "Широта, Долгота, Категория, СпособСоздания, ДатаНачала, ДатаОкончания");
 //   
 //   ПометкаУдаления = Булево(Число(ТекстXML.ПолучитьАтрибут("IsDeleted")));
 //   
 //   СтруктураПараметров.ВидДокумента       = "Касса";
 //   СтруктураПараметров.Номер     	   	   = ТекстXML.ПолучитьАтрибут("DocNumber");
 //   СтруктураПараметров.Дата     	   	   = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt"));    	
 //   СтруктураПараметров.ИдФирмы 	   	   = ТекстXML.ПолучитьАтрибут("A01");
 //   СтруктураПараметров.ИдПартнера	   	   = ТекстXML.ПолучитьАтрибут("A02");	
 //   СтруктураПараметров.ИдКонтрагента	   = ТекстXML.ПолучитьАтрибут("A03");
 //   СтруктураПараметров.ИдДоговора 		   = ТекстXML.ПолучитьАтрибут("A04");
 //   СтруктураПараметров.Комментарий    	   = ТекстXML.ПолучитьАтрибут("A06");	
 //   СтруктураПараметров.СуммаДокумента	   = Число(ТекстXML.ПолучитьАтрибут("A07"));	
 //   СтруктураПараметров.ИдДокОсн 		   = ТекстXML.ПолучитьАтрибут("A09"); 
 //   СтруктураПараметров.Категория 	       = ПолучитьСсылкуИзСправочника(ТекстXML.ПолучитьАтрибут("A011"), "апКатегорииДокументов");
 //   СтруктураПараметров.Широта	    	   = ТекстXML.ПолучитьАтрибут("A012");
 //   СтруктураПараметров.Долгота	    	   = ТекстXML.ПолучитьАтрибут("A013");
 //   СтруктураПараметров.ДатаНачала	       = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A014"));
 //   СтруктураПараметров.ДатаОкончания      = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A015"));
 //   СтруктураПараметров.ВидОплаты          = ТекстXML.ПолучитьАтрибут("A016");
 //   
 //   Если ТипЗнч(ОбъектДок.Ссылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
 //   	Менеджер = Документы.ПриходныйКассовыйОрдер;
 //   Иначе
 //   	Менеджер = Документы.РасходныйКассовыйОрдер;
 //   КонецЕсли;
 //   
 //   СтруктураОбязательныхПолей = Новый Структура("Организация, Партнер, Контрагент, Соглашение");
 //   
 //   ЗаполнитьОсновныеПараметрыДокумента(ОбъектДок, СтруктураПараметров, Менеджер, СтруктураОбязательныхПолей);
 //   
 //   //////////
 //   
 //   СписокКасс = ВыбАгент.апСписокКасс.Получить();
 //   Если Не СписокКасс = Неопределено Тогда
 //   	Для Каждого СтрокаСписка Из СписокКасс Цикл
 //   		ТекКасса = СтрокаСписка.Значение;
 //   		Если ТекКасса.Владелец = ОбъектДок.Организация Тогда				
 //   			ОбъектДок.Касса = ТекКасса;
 //   			Прервать;
 //   		КонецЕсли;		
 //   	КонецЦикла;
 //   КонецЕсли;    	
 //   
 //   Если Не ЗначениеЗаполнено(ОбъектДок.Касса) Тогда
 //   	ОповеститьОСобытии("В списке касс, закрепленных за агентом: " + Строка(ВыбАгент) + " не найдена касса для организации: " +
 //   					   ОбъектДок.Организация + ". В документ будет проставлена первая попавшаяся касса для организации!", СтатусСообщения.Важное, Истина, ОбъектДок.Ссылка);
 //   	Выборка = Справочники.Кассы.Выбрать(, ОбъектДок.Организация);				
 //   	Пока Выборка.Следующий() Цикл
 //   		Если Выборка.ПометкаУдаления Тогда Продолжить; КонецЕсли;
 //   		ОбъектДок.Касса = Выборка.Ссылка;                              			
 //   		Прервать;			
 //   	КонецЦикла;
 //   КонецЕсли;

 //   Если Не ЗначениеЗаполнено(ОбъектДок.Касса) Тогда
 //   	ОповеститьОСобытии("Не найдено ни одной кассы для организации: " + ОбъектДок.Организация + ". Выберите кассу в документе вручную!", СтатусСообщения.Важное, Истина, ОбъектДок.Ссылка);
 //   КонецЕсли;
 //   
 //   ОбъектДок.Валюта = ОбъектДок.Касса.ВалютаДенежныхСредств;
 //   
 //   Партнер    = ПолучитьСсылкуИзСправочника(СтруктураПараметров.ИдПартнера, "Партнеры");
 //   Соглашение = ПолучитьСсылкуИзСправочника(СтруктураПараметров.ИдДоговора, "СоглашенияСКлиентами");
 //   
 //   ОбъектДок.УдалитьПартнер = Партнер; 
 //   
 //   Если Не ЗначениеЗаполнено(ОбъектДок.Контрагент) Тогда
 //   	ОбъектДок.Контрагент = ПолучитьКонтрагентаПоПартнеру(Партнер);		
 //   КонецЕсли;
 //   
 //   СтруктурыРеквизитов = ПолучитьСтруктурыРеквизитовКассыИКассыККМ(ОбъектДок.Касса, ОбъектДок.КассаККМ);
 //   СтруктураРеквизитовКассы = СтруктурыРеквизитов.РеквизитыКассы;
 //   
 //   ВалютаВзаиморасчетов = СтруктураРеквизитовКассы.Валюта;
 //   
 //   ОбъектДок.Валюта = ВалютаВзаиморасчетов;
 //   
 //   ХозяйственнаяОперацияДоговора = Новый Массив;
 //   
 //   Если ОбъектДок.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента Тогда
 //   	ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
 //   	ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
 //   ИначеЕсли ОбъектДок.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика Тогда
 //   	ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
 //   	ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
 //   КонецЕсли;
 //   
 //   ДоговорКонтрагента = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
 //   	ДоговорКонтрагента,
 //   	Партнер,
 //   	ОбъектДок.Контрагент,
 //   	ОбъектДок.Организация,
 //   	ХозяйственнаяОперацияДоговора);
 //   	
 //   Если ТипЗнч(ОбъектДок.Ссылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда		
 //   	ОбъектДок.ПринятоОт = Справочники.Контрагенты.НаименованиеКонтрагента(ОбъектДок.Контрагент);		
 //   	ОбъектДок.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
 //   	ОбъектДок.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;				
 //   Иначе		
 //   	ОбъектДок.Выдать = Справочники.Контрагенты.НаименованиеКонтрагента(ОбъектДок.Контрагент);		
 //   	ОбъектДок.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту;
 //   	НайдСтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоРеквизиту("ХозяйственнаяОперация", ОбъектДок.ХозяйственнаяОперация);		
 //   	ОбъектДок.СтатьяДвиженияДенежныхСредств = НайдСтатьяДДС;
 //   КонецЕсли; 	
 //
 //   ОбъектДок.Кассир      	 = ПараметрыСеанса.ТекущийПользователь;	
 //   ОбъектДок.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ОбъектДок.Организация);	
 //   ОбъектДок.Комментарий 	 = СтруктураПараметров.Комментарий;
 //   				   	
 //   // Заполняем строку табличной части "Расшифровка платежа"
 //   Если ОбъектДок.РасшифровкаПлатежа.Количество() > 0 Тогда
 //   	СтрокаПлатеж = ОбъектДок.РасшифровкаПлатежа[0];
 //   Иначе
 //   	СтрокаПлатеж = ОбъектДок.РасшифровкаПлатежа.Добавить();
 //   КонецЕсли;
 //   
 //   СтрокаПлатеж.Партнер							  = ОбъектДок.УдалитьПартнер;
 //   СтрокаПлатеж.УдалитьСтатьяДвиженияДенежныхСредств = ОбъектДок.СтатьяДвиженияДенежныхСредств;
 //   СтрокаПлатеж.УдалитьСоглашение 					  = Соглашение;
 //   
 //   СтрокаПлатеж.Сумма 					= ОбъектДок.СуммаДокумента;	
 //   СтрокаПлатеж.ВалютаВзаиморасчетов 	= ВалютаВзаиморасчетов;   	
 //   СтрокаПлатеж.СуммаВзаиморасчетов 	= ОбъектДок.СуммаДокумента;		
 //   СтрокаПлатеж.Подразделение         	= ОбъектДок.Кассир.ТекущееПодразделение; 
 //   
 //   Если ТаблицаКассовыхДокументов = Неопределено Тогда
 //   	ТаблицаКассовыхДокументов = Новый ТаблицаЗначений;	
 //   	ТаблицаКассовыхДокументов.Колонки.Добавить("Документ");
 //   	ТаблицаКассовыхДокументов.Колонки.Добавить("СтруктураДокумента");
 //   	ТаблицаКассовыхДокументов.Колонки.Добавить("ЭтоНовыйОбъект");
 //   	ТаблицаКассовыхДокументов.Колонки.Добавить("ИдОснования");  
 //   КонецЕсли;
 //   
 //   НоваяЗапись = ТаблицаКассовыхДокументов.Добавить();
 //   НоваяЗапись.Документ 		 	= ОбъектДок;
 //   НоваяЗапись.СтруктураДокумента  = СтруктураПараметров;
 //   НоваяЗапись.ЭтоНовыйОбъект   	= ЭтоНовыйОбъект;
 //   НоваяЗапись.ИдОснования	    	= СтруктураПараметров.ИдДокОсн;
	
КонецПроцедуры //ЗагрузитьДокументОрдера

&НаСервере
Процедура ЗакончитьЗагрузкуОрдеровИПоступлений()
	                                                      	
	//Если Не ТаблицаКассовыхДокументов = Неопределено Тогда
	//	
	//	СписокОснованийДляОрдера = Новый СписокЗначений;
	//	СписокОснованийДляОрдера.Добавить("ЗаказКлиента");
	//	СписокОснованийДляОрдера.Добавить("РеализацияТоваровУслуг");
	//	СписокОснованийДляОрдера.Добавить("ВозвратТоваровОтКлиента");
	//	СписокОснованийДляОрдера.Добавить("ПоступлениеТоваровУслуг");			
	//	
	//	Для Каждого СтрокаТаб Из ТаблицаКассовыхДокументов Цикл
	//		
	//		ОбъектДок = СтрокаТаб.Документ;
	//		СтрокаПлатеж = ОбъектДок.РасшифровкаПлатежа[0];
	//		
	//		Для Каждого ТекВидОснования Из СписокОснованийДляОрдера Цикл
	//			ДокОснования = ПолучитьСсылкуИзДокумента(СтрокаТаб.ИдОснования, ТекВидОснования.Значение);
	//			Если ЗначениеЗаполнено(ДокОснования) Тогда
	//				ОбъектОснования = ДокОснования.ПолучитьОбъект();
	//				Если ОбъектОснования <> Неопределено Тогда	
	//					
	//					СсылкаОснования = ОбъектОснования.Ссылка; 
	//					
	//					ОбъектДок.ДокументОснование = СсылкаОснования;
	//					СтрокаПлатеж.Заказ   	    = СсылкаОснования;						
	//					
	//					Если ТипЗнч(ОбъектДок) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда
	//						
	//						СтрокаПлатеж.ОснованиеПлатежа = СсылкаОснования;
	//						
	//						// Заполняем поле "ВТомЧислеНДС"
	//						МассивДокументов = ОбъектДок.РасшифровкаПлатежа.Выгрузить(,"Заказ").ВыгрузитьКолонку("Заказ");
	//						МассивДокументов.Добавить(ОбъектДок.ДокументОснование);
	//						ОбъектДок.ВТомЧислеНДС = ДенежныеСредстваСервер.ТекстСуммаНДСПлатежа(ОбъектДок.СуммаДокумента,
	//						ОбъектДок.Валюта, МассивДокументов, 
	//						Ложь,  // ДобавлятьТекстВТомЧисле 	
	//						Истина // ОплатаОтКлиента
	//						);    					
	//						
	//					КонецЕсли;
	//					
	//					Прервать;
	//					
	//				КонецЕсли;
	//			КонецЕсли;
	//		КонецЦикла;
	//		
	//		Результат = ЗаписьДокумента(ОбъектДок, СтрокаТаб.СтруктураДокумента, СтрокаТаб.ЭтоНовыйОбъект);
	//		
	//		Если Не Результат Тогда
	//			
	//			СообщитьОПропускеДокумента(СтрокаТаб.СтруктураДокумента)
	//			
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//	ТаблицаКассовыхДокументов.Очистить();
	//	
	//КонецЕсли; 	
	//
	///////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////
	//
	//Если Не ТаблицаДокументовПоступлений = Неопределено Тогда
	//	
	//	СписокОснованийДляПоступлений = Новый СписокЗначений;	
	//	
	//	СписокОснованийДляПоступлений.Добавить("ОтчетОРозничныхПродажах");
	//	СписокОснованийДляПоступлений.Добавить("РеализацияТоваровУслуг");
	//	
	//	Для Каждого СтрокаТаб Из ТаблицаДокументовПоступлений Цикл
	//		
	//		ОбъектДок = СтрокаТаб.Документ;
	//		
	//		Для Каждого ТекВидОснования Из СписокОснованийДляПоступлений Цикл
	//			ДокОснования = ПолучитьСсылкуИзДокумента(СтрокаТаб.ИдОснования, ТекВидОснования.Значение);
	//			Если ЗначениеЗаполнено(ДокОснования) Тогда
	//				ОбъектОснования = ДокОснования.ПолучитьОбъект();
	//				Если ОбъектОснования <> Неопределено Тогда						
	//					Если ТипЗнч(ОбъектДок) = Тип("ДокументОбъект.ВозвратТоваровОтКлиента") Тогда						
	//						СсылкаОснования = ОбъектОснования.Ссылка;                               					
	//						ОбъектДок.ДокументРеализации = СсылкаОснования;                          						
	//					КонецЕсли;					
	//					Прервать; 					
	//				КонецЕсли;
	//			КонецЕсли;
	//		КонецЦикла;
	//		
	//		Результат = ЗаписьДокумента(ОбъектДок, СтрокаТаб.СтруктураДокумента, СтрокаТаб.ЭтоНовыйОбъект);
	//		
	//		Если Не Результат Тогда
	//			
	//			СообщитьОПропускеДокумента(СтрокаТаб.СтруктураДокумента)
	//			
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//	ТаблицаДокументовПоступлений.Очистить();
	//	
	//КонецЕсли;
	
КонецПроцедуры //ЗакончитьЗагрузкуОрдеровИПоступлений     

&НаСервере
Процедура ЗагрузитьДокументЗадание(ТекстXML, ОбъектДок, ЭтоНовыйОбъект)
	
//	СтруктураПараметров = Новый Структура("ВидДокумента, Номер, Дата, ИдДок, " + 
//										  "ИдФирмы, ИдКонтрагента, ИдПартнера, ИдДоговора, Широта, Долгота," + 
//										  "Комментарий, Категория, СпособСоздания, ДатаНачала, ДатаОкончания");
//	
//	ПометкаУдаления = Булево(Число(ТекстXML.ПолучитьАтрибут("IsDeleted")));
//	ИдДокумента = Строка(ТекстXML.ПолучитьАтрибут("GUID"));
//	
//	КатегорияСсылка = ПолучитьСсылкуИзСправочника(ТекстXML.ПолучитьАтрибут("A06"), "апКатегорииДокументов");
//	
//	СтруктураПараметров.ВидДокумента       = "апЗадание";
//	СтруктураПараметров.Номер     	   	   = ТекстXML.ПолучитьАтрибут("DocNumberPrefix") + ТекстXML.ПолучитьАтрибут("DocNumber");
//	СтруктураПараметров.Дата     	   	   = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt"));    	
//	СтруктураПараметров.ИдФирмы 	   	   = ТекстXML.ПолучитьАтрибут("A01");
//	СтруктураПараметров.ИдКонтрагента  	   = ТекстXML.ПолучитьАтрибут("A02");
//	СтруктураПараметров.ИдПартнера   	   = ТекстXML.ПолучитьАтрибут("A03");
//	СтруктураПараметров.ИдДоговора 		   = ТекстXML.ПолучитьАтрибут("A04");
//	СтруктураПараметров.Комментарий    	   = ТекстXML.ПолучитьАтрибут("A05");
//	СтруктураПараметров.Категория 	       = КатегорияСсылка;
//	СтруктураПараметров.СпособСоздания 	   = "User";
//	
//	СтруктураПараметров.Широта	    	   = ТекстXML.ПолучитьАтрибут("A011");
//	СтруктураПараметров.Долгота	    	   = ТекстXML.ПолучитьАтрибут("A012");
//		
//	СтруктураОбязательныхПолей = Новый Структура("Организация, Партнер");
//	
//	Менеджер = Документы.апЗадание;
//	
//	ЗаполнитьОсновныеПараметрыДокумента(ОбъектДок, СтруктураПараметров, Менеджер, СтруктураОбязательныхПолей);
//	
////	ОбъектДок.ПоказыватьРезультаты = Истина;
//	ОбъектДок.ДатаНачала    	   = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A07"));
//	ОбъектДок.ДатаОкончания 	   = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A08"));
//	ОбъектДок.Агент				   = ВыбАгент;
//	
//	ОбъектДок.Задачи.Очистить();
//	
//	ТекстXML.Прочитать();
//	// Заполнение табличной части
//	Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
//		
//		ТекстXML.Прочитать();
//		
//		Если СокрЛП(ТекстXML.ПолучитьАтрибут("GUID")) = "DF5A99C3-4778-4CFB-B5F2-877449E05D3B" Тогда
//			
//			Пока ТекстXML.Прочитать() Цикл
//				
//				Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
//					ТекстXML.Пропустить();
//					Прервать;
//				КонецЕсли;
//				
//				Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
//					Продолжить;
//				КонецЕсли;
//				
//				ИдЗадачи   		= ТекстXML.ПолучитьАтрибут("A01");
//				Комментарий 	= ТекстXML.ПолучитьАтрибут("A02");
//				Обязательная 	= Число(ТекстXML.ПолучитьАтрибут("A03"));
//				Результат 		= СокрЛП(ТекстXML.ПолучитьАтрибут("A04"));
//				
//				Задача  	= ПолучитьСсылкуИзСправочника(ИдЗадачи, "апВидыЗадач");
//				ТипЗадания  = Задача.Тип;
//				
//				//Если Не ОбъектДок.ЭтоНовый() Тогда
//				//	НайденнаяСтрока = ОбъектДок.ПереченьЗаданий.Найти(Задача, "Задание");
//				//	Если НайденнаяСтрока = Неопределено Тогда
//				//		ТекстСообщения = "Не найдено задание: """ + Задача.Наименование + """ в документе: " + Строка(ОбъектДок);
//				//		ОповеститьОСобытии(ТекстСообщения);
//				//		Продолжить;
//				//	КонецЕсли;
//				//КонецЕсли;
//									
//				РезультатДляЗагрузки = "";
//				
//				Если ТипЗадания = Перечисления.апТипыЗадач.ВвестиЧисло Тогда
//					РезультатДляЗагрузки = Число(Результат);	
//				ИначеЕсли ТипЗадания = Перечисления.апТипыЗадач.ВвестиСтроку Тогда
//					РезультатДляЗагрузки = Строка(Результат);
//				ИначеЕсли ТипЗадания = Перечисления.апТипыЗадач.ВвестиДату Тогда
//					РезультатДляЗагрузки = Результат; //дата
//				ИначеЕсли ТипЗадания = Перечисления.апТипыЗадач.ИсполненоНеисполнено Тогда
//					РезультатДляЗагрузки = Результат; //Исполнено, неисполнено, пустая строка (задачу вообще не выполнялась)	
//				ИначеЕсли ТипЗадания = Перечисления.апТипыЗадач.ОбменятьсяДанными Тогда
//					РезультатДляЗагрузки = Строка(Результат); //т.к. у реквизита в документе тип "Дата"
//				ИначеЕсли ТипЗадания = Перечисления.апТипыЗадач.СделатьФотографию Тогда
//					Если Результат <> "" Тогда
//						РезультатДляЗагрузки = Результат; //строка с Ид
//					КонецЕсли;
//				ИначеЕсли ТипЗадания = Перечисления.апТипыЗадач.ВыбратьЗначениеИзСписка Тогда
//					РезультатДляЗагрузки = ПолучитьСсылкуИзСправочника(Результат, "апОтветыАнкеты");
//				ИначеЕсли ТипЗадания = Перечисления.апТипыЗадач.СоздатьДокументВозвратТоваров Тогда
//					РезультатДляЗагрузки =  ПолучитьСсылкуИзДокумента(Результат, "ВозвратТоваровОтКлиента");
//				ИначеЕсли ТипЗадания = Перечисления.апТипыЗадач.СоздатьДокументЗаявка Тогда
//					РезультатДляЗагрузки =  ПолучитьСсылкуИзДокумента(Результат, "ЗаказКлиента");
//				ИначеЕсли ТипЗадания = Перечисления.апТипыЗадач.СоздатьДокументМерчендайзинг Тогда
//					РезультатДляЗагрузки =  ПолучитьСсылкуИзДокумента(Результат, "апМерчендайзинг");
//				ИначеЕсли ТипЗадания = Перечисления.апТипыЗадач.СоздатьДокументПеремещение Тогда
//					РезультатДляЗагрузки =  ПолучитьСсылкуИзДокумента(Результат, "ПеремещениеТоваров");
//				ИначеЕсли ТипЗадания = Перечисления.апТипыЗадач.СоздатьДокументПКО Тогда
//					РезультатДляЗагрузки =  ПолучитьСсылкуИзДокумента(Результат, "ПриходныйКассовыйОрдер");
//				ИначеЕсли ТипЗадания = Перечисления.апТипыЗадач.СоздатьДокументРКО Тогда
//					РезультатДляЗагрузки =  ПолучитьСсылкуИзДокумента(Результат, "РасходныйКассовыйОрдер");
//				ИначеЕсли ТипЗадания = Перечисления.апТипыЗадач.СоздатьДокументПосещение Тогда
//					РезультатДляЗагрузки =  ПолучитьСсылкуИзДокумента(Результат, "апПосещение");
//				ИначеЕсли ТипЗадания = Перечисления.апТипыЗадач.СоздатьДокументПоступление Тогда
//					РезультатДляЗагрузки =  ПолучитьСсылкуИзДокумента(Результат, "ПоступлениеТоваровУслуг");
//				ИначеЕсли ТипЗадания = Перечисления.апТипыЗадач.СоздатьДокументРеализация Тогда
//					РезультатДляЗагрузки =  ПолучитьСсылкуИзДокумента(Результат, "РеализацияТоваровУслуг"); 				
//				КонецЕсли; 
//				
//				//Если ОбъектДок.ЭтоНовый() Тогда
//					НоваяСтрока 			 = ОбъектДок.Задачи.Добавить();
//					НоваяСтрока.Задача	 	 = Задача;
//					НоваяСтрока.Комментарий  = Комментарий;
//					НоваяСтрока.Обязательная = ?(Обязательная = 1, Истина, Ложь);
//					НоваяСтрока.Результат	 = РезультатДляЗагрузки;
//				//Иначе
//				
//				Если ТипЗадания = Перечисления.апТипыЗадач.СделатьФотографию И Результат <> "" Тогда
//					//подсчитаем, сколько фоток в результате
//					МассивФото = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Результат, ",");
//					КолвоФото = МассивФото.Количество(); 					
//					Если КолвоФото > 0 Тогда
//						НоваяСтрока.Результат = Строка(КолвоФото)+" шт.";	
//					Иначе
//						НоваяСтрока.Результат = "";
//					КонецЕсли;
//					
//					НоваяСтрока.РезультатДляФото = РезультатДляЗагрузки;				
//					
//				КонецЕсли; //Если ТипЗадания = Перечисления.апТипыЗадач.СделатьФотографию И Результат <> "" Тогда
//				   					
//			КонецЦикла; //Пока ТекстXML.Прочитать() Цикл
//			
//		КонецЕсли; //Если СокрЛП(ТекстXML.ПолучитьАтрибут("GUID")) = "DF5A99C3-4778-4CFB-B5F2-877449E05D3B" Тогда
//		
//	КонецЕсли;
//	
//	Результат = ЗаписьДокумента(ОбъектДок, СтруктураПараметров, ЭтоНовыйОбъект);
//	
//	Если Результат = 1 Тогда
//		 		
//	ИначеЕсли Результат = 2 Тогда
//		
//		СообщитьОПропускеДокумента(СтруктураПараметров);
//		
//	КонецЕсли;	
	
КонецПроцедуры //ЗагрузитьДокументЗаданиеАгента(ТекстXML, ОбъектДок, ЭтоНовыйОбъект)

&НаСервере
// Функция осуществляет запись документа в ИБ 1С: Предприятия
//
//Возвращаемое значение:
//  Число: 1 - если документ записан, 0 - если при записи произошла ошибка
//
// Добавлена 14.06.2007
//      
Функция ЗаписьДокумента(Док, СтруктураДокКПК, НовыйДок = Истина, ДобавлятьЗаписьвРегистр = Истина)	
	
	МожноПроводить = Истина;
	
	МетаданныеДок = Док.Метаданные();
	
	Объект.флПроводить = Истина;
	
	Если Объект.флПроводить Тогда
		Если МетаданныеДок.Реквизиты.Найти("Партнер") <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(Док.Партнер) Тогда
				ОповеститьОСобытии("В документе " + Строка(Док) + " не указан партнер. Документ не будет проведен!", СтатусСообщения.Важное, Истина, Док.Ссылка);
				МожноПроводить = Ложь;
			КонецЕсли;
		КонецЕсли;	
		
		Если МетаданныеДок.Реквизиты.Найти("Контрагент") <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(Док.Контрагент) Тогда
				ОповеститьОСобытии("В документе " + Строка(Док) + " не указан контрагент. Документ не будет проведен!", СтатусСообщения.Важное, Истина, Док.Ссылка);
				МожноПроводить = Ложь;
			КонецЕсли;
		КонецЕсли;	
		
		Если МетаданныеДок.Реквизиты.Найти("Соглашение") <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(Док.Соглашение) Тогда
				ОповеститьОСобытии("В документе " + Строка(Док) + " не указано соглашение. Документ не будет проведен!", СтатусСообщения.Важное, Истина, Док.Ссылка);
				МожноПроводить = Ложь;
			КонецЕсли;
		КонецЕсли;	
		Если МетаданныеДок.Реквизиты.Найти("СуммаДокумента") <> Неопределено Тогда
			//Если Док.СуммаДокумента = 0 Тогда
			//	ОповеститьОСобытии("Сумма документа " + Строка(Док) + " равна 0. Документ не будет проведен!", СтатусСообщения.Важное, Истина, Док.Ссылка);
			//	МожноПроводить = Ложь;
			//КонецЕсли;
		КонецЕсли;
		
		// Возвраты не проводим
		Если МетаданныеДок.Имя = "ВозвратОтПокупателя" Тогда
			ОповеститьОСобытии("Нужно проводить вручную " + Строка(Док) + ". Документ не будет проведен!", СтатусСообщения.Важное, Истина, Док.Ссылка);
			МожноПроводить = Ложь;
		КонецЕсли;
	Иначе
		МожноПроводить = Ложь
	КонецЕсли;
	
	//Попытка
	//	Док.Записать(РежимЗаписиДокумента.Запись);
	//Исключение
	//	сообщить("ОШИБКА записи документа: " + СокрЛП(Док));
	//Конецпопытки;
		
	
	Если Не ВыполнитьОперациюДляОбъекта(Док, "запись") Тогда 							
		ОповеститьОСобытии("Не удалось записать документ " + Строка(Док) + " в базу!", СтатусСообщения.Важное, Истина, Док.Ссылка);
		Возврат Ложь;			
	КонецЕсли;	
	
	Если ДобавлятьЗаписьвРегистр Тогда
		
		ЗаписьЖурналаРегистрации("Загружен документ из мобильного устройства", УровеньЖурналаРегистрации.Информация, МетаданныеДок, Док.Ссылка, "Запись документа");
					
		НаборЗаписей = РегистрыСведений.апЗагруженныеДокументы.СоздатьНаборЗаписей();		
		НаборЗаписей.Отбор.Документ.Установить(Док.Ссылка);
		НаборЗаписей.Отбор.Агент.Установить(ВыбАгент);		
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			НоваяЗапись = НаборЗаписей.Добавить();			
		Иначе
			НоваяЗапись = НаборЗаписей[0];
		КонецЕсли;
		
		НоваяЗапись.Документ    	= Док.Ссылка;		
		НоваяЗапись.Агент 			= ВыбАгент;
		НоваяЗапись.Период 			= ТекущаяДата();		
		НоваяЗапись.ДатаСоздания  	= СтруктураДокКПК.Дата;
		НоваяЗапись.Широта 			= СтруктураДокКПК.Широта;
		НоваяЗапись.Долгота 	 	= СтруктураДокКПК.Долгота;	
		//НоваяЗапись.ДатаНачала 		= СтруктураДокКПК.ДатаНачала;
		//НоваяЗапись.ДатаОкончания 	= СтруктураДокКПК.ДатаОкончания;	
		
		//Если СтруктураДокКПК.Свойство("Категория") Тогда
		//	НоваяЗапись.Категория	= СтруктураДокКПК.Категория;
		//КонецЕсли;		
		
		Если ТипЗнч(Док.Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя") ИЛИ ТипЗнч(Док.Ссылка) = Тип("ДокументСсылка.КпкЗаявка") Тогда
			НоваяЗапись.ВидДокумента = Перечисления.апВидыДокументов.Заказ;
		ИначеЕсли ТипЗнч(Док.Ссылка) = Тип("ДокументСсылка.ВозвратОтПокупателя") Тогда
			НоваяЗапись.ВидДокумента = Перечисления.апВидыДокументов.Возврат;
		//ИначеЕсли ТипЗнч(Док.Ссылка) = Тип("ДокументСсылка.апМерчендайзинг") Тогда
		//	НоваяЗапись.ВидДокумента = Перечисления.апВидыДокументов.Мерчендайзинг;
		//ИначеЕсли ТипЗнч(Док.Ссылка) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		//	НоваяЗапись.ВидДокумента = Перечисления.апВидыДокументов.Перемещение;
		ИначеЕсли ТипЗнч(Док.Ссылка) = Тип("ДокументСсылка.КпкКасса") Тогда
			НоваяЗапись.ВидДокумента = Перечисления.апВидыДокументов.ПКО;
		//ИначеЕсли ТипЗнч(Док.Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		//	НоваяЗапись.ВидДокумента = Перечисления.апВидыДокументов.РКО;
		//ИначеЕсли ТипЗнч(Док.Ссылка) = Тип("ДокументСсылка.апПосещение") Тогда
		//	НоваяЗапись.ВидДокумента = Перечисления.апВидыДокументов.Посещение;
		//ИначеЕсли ТипЗнч(Док.Ссылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		//	НоваяЗапись.ВидДокумента = Перечисления.апВидыДокументов.Поступление;
		//ИначеЕсли ТипЗнч(Док.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		//	НоваяЗапись.ВидДокумента = Перечисления.апВидыДокументов.Реализация;
		//ИначеЕсли ТипЗнч(Док.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		//	НоваяЗапись.ВидДокумента = Перечисления.апВидыДокументов.СчетФактура;
		КонецЕсли;
			
		Если Не ВыполнитьОперациюДляОбъекта(НаборЗаписей, "запись") Тогда 						
			ТекстСообщения = "Не удалось записать сведения по документу: " + Строка(Док) + " в базу!";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное);
			Возврат Ложь;		
		КонецЕсли; 
		
	КонецЕсли;
	
	Если МетаданныеДок.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить и Объект.флПроводить и МожноПроводить Тогда		
		Если Не ВыполнитьОперациюДляОбъекта(Док, "проведение") Тогда 						
			ОповеститьОСобытии("Не удалось провести документ: " + Строка(Док), СтатусСообщения.Важное, Истина, Док.Ссылка);
			Возврат Ложь;			
		КонецЕсли;				
	КонецЕсли;
	
	ТекстСообщения = ?(НовыйДок, "Создан", "Перезаписан") + " документ " + Строка(Док);
	ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Истина, Док.Ссылка);
	
	Возврат Истина;
	
КонецФункции //ЗаписьДокумента()

&НаСервере
Процедура ЗагрузитьДокументы(ТекстXML)
		
	СоответствиеДокЗагр = Новый Соответствие();

	СоответствиеДокЗагр.Вставить("e01e1f5c-d6e4-46e8-b923-3758b0d79bde", "ЗаказКлиента");
	СоответствиеДокЗагр.Вставить("749be2e0-9b00-4d7b-9d4d-88ca53327511", "ПриходныйКассовыйОрдер");
	СоответствиеДокЗагр.Вставить("3890d435-96ba-4481-abc0-23782e15b32f", "РасходныйКассовыйОрдер");
	СоответствиеДокЗагр.Вставить("61dee5fe-d0a8-4842-a6af-a8d33f298845", "апМерчендайзинг");
	СоответствиеДокЗагр.Вставить("9f147c59-5ee8-4550-8289-12ecfe5d0617", "апПосещение");		
	СоответствиеДокЗагр.Вставить("7ffb418c-73c9-4883-91c5-827fa5145a3a", "РеализацияТоваровУслуг");
	СоответствиеДокЗагр.Вставить("77525c87-cb2f-405e-a92e-6f373edeece7", "ПеремещениеТоваров");
	СоответствиеДокЗагр.Вставить("c9850d61-bc15-445a-8b1a-e328cc45ddae", "ПоступлениеТоваровУслуг");
	СоответствиеДокЗагр.Вставить("4971b041-beab-4fa6-b1e8-10138f04fe44", "ВозвратТоваровОтКлиента");
	СоответствиеДокЗагр.Вставить("d7d70de1-4f98-4153-82f1-12c84ebf81a5", "СчетФактураВыданный");
	СоответствиеДокЗагр.Вставить("b49074d6-3c0c-4361-b71d-bbf446ab02b6", "апЗадание");
	
	Пока ТекстXML.Прочитать() Цикл
		
		Если ТекстXML.Имя = "KILLEDS" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ТекстXML.Пропустить();
			Продолжить;
		КонецЕсли; 
		
		Если ТекстXML.Имя = "DOCUMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		КонецЕсли;
 		
		Если ТекстXML.Имя = "DOCUMENT" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Продолжить;
		КонецЕсли;		
					
		ИдДокXML = ТекстXML.ЗначениеАтрибута("GUID");
		Если ИдДокXML <> Неопределено Тогда
			ИдДокумента = ИдДокXML;  												
		КонецЕсли;  
        		
		Док = СоответствиеДокЗагр.Получить(НРег(ИдДокумента));
		
		Если Док = Неопределено Тогда 
			ТекстXML.Пропустить();
			Если ТекстXML.Имя = "DOCUMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;			
			КонецЕсли;   			
			Продолжить;
		КонецЕсли;
	        		
		Пока ТекстXML.Прочитать() Цикл
			
			Если ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;
			ИначеЕсли ТекстXML.Имя = "DOCUMENT" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;			
			ИначеЕсли ТекстXML.Имя = "KILLEDS" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ТекстXML.Пропустить();
				Прервать;
			КонецЕсли;
 			
			Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		    				
				ЗагрузитьДокумент(ТекстXML, Док); 
			
			КонецЕсли;
					
		КонецЦикла;   	 
		
	КонецЦикла;  
		
КонецПроцедуры //ЗагрузитьДокументы

&НаСервере
Процедура ЗагрузитьПартнера(ТекстXML, ОбъектСпр, ЭтоНовый)
	
	Пока ТекстXML.ПрочитатьАтрибут() Цикл
		
		ИмяПараметра  = ТекстXML.Имя;
		ЗначПараметра = ТекстXML.Значение;
		
		Если Не ЗначениеЗаполнено(ЗначПараметра) Тогда Продолжить; КонецЕсли;
		
		Если ИмяПараметра = "IsDeleted" Тогда
			ПометкаУдаления = Булево(Число(ТекстXML.Значение));							
		ИначеЕсли ИмяПараметра = "Name" Тогда
			ОбъектСпр.Наименование = СокрЛП(ТекстXML.Значение);
		ИначеЕсли ИмяПараметра = "GrpId0" Тогда 			
			ОбъектСпр.ГруппаДоступа = ПолучитьСсылкуИзСправочника(ЗначПараметра, "ГруппыДоступаПартнеров");
		ИначеЕсли ИмяПараметра = "A08" Тогда
			ТекДоговор = Новый УникальныйИдентификатор(ЗначПараметра);
		ИначеЕсли ИмяПараметра = "A06" Тогда
			ТекСтатус = ЗначПараметра;
		КонецЕсли; 						
		
	КонецЦикла;
	
	ОбъектСпр.ОбменДанными.Загрузка = Ложь;
		
	Если Не ОбъектСпр.ЭтоГруппа Тогда 
		ОбъектСпр.Клиент = Истина;		
	КонецЕсли;
	
	Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпр, "запись") Тогда 	
		ТекстСообщения = "Не удалось записать элемент справочника: " + Строка(ОбъектСпр) + " в базу!";				
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, ОбъектСпр);				
		Возврат;							
	КонецЕсли;	
		
	ЗаписатьВПротоколЗагрузкуЭлемСпр(ОбъектСпр, ЭтоНовый);	
	
	Если Не ПустаяСтрока(ТекСтатус) Тогда
		СведенияПартнера = РегистрыСведений.апСведенияПартнеров.СоздатьМенеджерЗаписи();
		СведенияПартнера.Объект = ОбъектСпр.Ссылка;
		СведенияПартнера.Прочитать();
		Если СведенияПартнера.Выбран() Тогда
			СведенияПартнера.Статус = ПолучитьСсылкуИзСправочника(ТекСтатус, "апСтатусыПартнеров");
		Иначе
			СведенияПартнера.Объект = ОбъектСпр.Ссылка;
			СведенияПартнера.Статус = ПолучитьСсылкуИзСправочника(ТекСтатус, "апСтатусыПартнеров");							
		КонецЕсли;
		
		Если Не ВыполнитьОперациюДляОбъекта(СведенияПартнера, "запись") Тогда 	
			ТекстСообщения = "Не удалось записать сведения для объекта: " + Строка(СведенияПартнера.Объект) + " в базу!";				
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, СведенияПартнера.Объект);		
			ТекстXML.Пропустить();	
		Иначе
			ТекстСообщения = ?(ЭтоНовый , "Записаны", "Обновлены") + " сведения для объекта: " + Строка(СведенияПартнера.Объект);				
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Истина, СведенияПартнера.Объект);									
		КонецЕсли;	
	КонецЕсли;     
	
КонецПроцедуры //ЗагрузитьПартнера

&НаСервере
Процедура ЗагрузитьКонтактноеЛицо(ТекстXML, ОбъектСпр, ЭтоНовый)
	
	Пока ТекстXML.ПрочитатьАтрибут() Цикл
		
		ИмяПараметра  = ТекстXML.Имя;
		ЗначПараметра = ТекстXML.Значение;
		
		Если Не ЗначениеЗаполнено(ЗначПараметра) Тогда Продолжить; КонецЕсли;
		
		Если ИмяПараметра = "IsDeleted" Тогда
			ПометкаУдаления = Булево(Число(ТекстXML.Значение));							
		ИначеЕсли ИмяПараметра = "Name" Тогда
			Наименование = СокрЛП(ТекстXML.Значение);
		ИначеЕсли ИмяПараметра = "A02" Тогда 			
			ДатаРождения = ДатаВремяXMLВФормат1С(ЗначПараметра);
		ИначеЕсли ИмяПараметра = "A03" Тогда 			
			ИдПартнера = ЗначПараметра;
		ИначеЕсли ИмяПараметра = "A04" Тогда 			
			ТорговаяТочка = ЗначПараметра;
		ИначеЕсли ИмяПараметра = "A05" Тогда 			
			Комментарий = ЗначПараметра;
		КонецЕсли; 						
		
	КонецЦикла;    						
	
	ТекВладелец = ПолучитьСсылкуИзСправочника(ИдПартнера, "Партнеры");
	
	// Значит, скорее всего, объект контактной информации еще не был загружен. 
	// Получим ссылку пока не существующего объекта по идентификатору 	
	Если Не ЗначениеЗаполнено(ТекВладелец) Тогда    
		ТекВладелец = ПолучитьСсылкуОбъектаПоИдентификатору(ИдПартнера, "Партнеры");				
	КонецЕсли;   
	
	Если Не ЗначениеЗаполнено(ТекВладелец) Тогда	
		ТекстСообщения = "Не найден владелец контактного лица: " + Строка(Наименование) + ". Загрузка не будет выполнена!";				
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина);				
		Возврат;
	КонецЕсли;
	
	ОбъектСпр.Владелец 				= ТекВладелец;	
	ОбъектСпр.Наименование 		 	= Наименование;
	ОбъектСпр.ДатаРегистрацииСвязи  = ТекущаяДата();
	ОбъектСпр.Автор  				= ВыбАгент.Пользователь;
	ОбъектСпр.Комментарий   		= Комментарий;
	ОбъектСпр.ОбменДанными.Загрузка = Истина;
	
	Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпр, "запись") Тогда 	
		ТекстСообщения = "Не удалось записать элемент справочника: " + Строка(ОбъектСпр) + " в базу!";				
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, ОбъектСпр);				
		Возврат;
	КонецЕсли;
	
	ЗаписатьВПротоколЗагрузкуЭлемСпр(ОбъектСпр, ЭтоНовый);
	
КонецПроцедуры //ЗагрузитьКонтактноеЛицо

&НаСервере
Процедура ЗагрузитьДоговор(ТекстXML, ОбъектСпр, ЭтоНовый)
	
	//Если ТабДоговоров = Неопределено Тогда
	//	ТабДоговоров = Новый ТаблицаЗначений;	
	//	ТабДоговоров.Колонки.Добавить("Объект");
	//	ТабДоговоров.Колонки.Добавить("Партнер");		
	//КонецЕсли;
	//
	//ИдПартнера = "";
	//
	//Пока ТекстXML.ПрочитатьАтрибут() Цикл
	//	
	//	ИмяПараметра  = ТекстXML.Имя;
	//	ЗначПараметра = ТекстXML.Значение;
	//	
	//	Если Не ЗначениеЗаполнено(ЗначПараметра) Тогда Продолжить; КонецЕсли;
	//	
	//	Если ИмяПараметра = "IsDeleted" Тогда
	//		ПометкаУдаления = Булево(Число(ТекстXML.Значение));							
	//	ИначеЕсли ИмяПараметра = "Name" Тогда
	//		ОбъектСпр.Наименование = СокрЛП(ТекстXML.Значение);
	//	ИначеЕсли ИмяПараметра = "A02" Тогда 			
	//		ИдПартнера = ЗначПараметра;
	//	ИначеЕсли ИмяПараметра = "A03" Тогда
	//		ДатаЗаключения = ДатаВремяXMLВФормат1С(ЗначПараметра);
	//	ИначеЕсли ИмяПараметра = "A04" Тогда
	//		СрокДействия = ДатаВремяXMLВФормат1С(ЗначПараметра);
	//	ИначеЕсли ИмяПараметра = "A05" Тогда
	//		Организация = ПолучитьСсылкуИзСправочника(ЗначПараметра, "Организации");
	//	ИначеЕсли ИмяПараметра = "A06" Тогда
	//		ТипЦен = ПолучитьСсылкуИзСправочника(ЗначПараметра, "ВидыЦен");
	//	КонецЕсли; 						
	//	
	//КонецЦикла;
	//
	//Партнер = ПолучитьСсылкуИзСправочника(ИдПартнера, "Партнеры");
	//
	//Если ЗначениеЗаполнено(Партнер) Тогда
	//	Контрагент = ПолучитьОсновногоКонтрагентаПартнера(Партнер);
	//КонецЕсли;
	//
	////// Значит, скорее всего, объект контрагента еще не был загружен. 
	////// Получим ссылку пока не существующего объекта по идентификатору 	
	////Если Не ЗначениеЗаполнено(Контрагент) Тогда
	//////	ТекстСообщения = "Не найден контрагент для партнера: " + Строка(Партнер) + ". Загрузка договора не будет выполнена!";				
	//////	ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, Партнер);		
	//////	Возврат;
	////КонецЕсли;
	//
	//Склад              		= ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад, ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи"));
	//НалогообложениеНДС 		= ЗначениеНастроекПовтИсп.ПолучитьНалогообложениеНДС(Организация, , ТекущаяДата());
	//ПорядокОплаты     		= Перечисления.ПорядокОплатыПоСоглашениям.ПолучитьПорядокОплатыПоУмолчанию(мВалютаРегламентированногоУчета, НалогообложениеНДС);
	//ГруппаФинансовогоУчета  = Справочники.ГруппыФинансовогоУчетаРасчетов.ПолучитьГруппуФинансовогоУчетаПоУмолчанию(ПорядокОплаты);
	//
	//ОбъектСпр.Организация            = Организация;
	//ОбъектСпр.Партнер 				 = Партнер;	   	
	//ОбъектСпр.Контрагент 		     = Контрагент;
	//ОбъектСпр.Дата 					 = ДатаЗаключения;	
	//ОбъектСпр.ДатаНачалаДействия 	 = ДатаЗаключения;	
	//ОбъектСпр.ДатаОкончанияДействия  = ?(ДатаЗаключения > СрокДействия, ДатаЗаключения, СрокДействия);
	//
	//Если ЗначениеЗаполнено(Партнер) Тогда
	//	ОбъектСпр.ЗаполнитьУсловияПродажПоУмолчанию();
	//КонецЕсли;
	//
	//ОбъектСпр.ХозяйственнаяОперация  = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;	
	//ОбъектСпр.Статус 	    		 = Перечисления.СтатусыСоглашенийСКлиентами.Действует;  	
	//ОбъектСпр.Валюта 			     = мВалютаРегламентированногоУчета;
	//ОбъектСпр.Менеджер 	    		 = ВыбАгент.Пользователь;
	//ОбъектСпр.ВидЦен 	    		 = ТипЦен;
	//ОбъектСпр.ПорядокОплаты		     = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
	//ОбъектСпр.Склад		    		 = Склад;
	//ОбъектСпр.НалогообложениеНДС	 = НалогообложениеНДС;
	//ОбъектСпр.ПорядокОплаты		     = ПорядокОплаты;
	//ОбъектСпр.ГруппаФинансовогоУчета = ГруппаФинансовогоУчета;
	//	
	//ОбъектСпр.Типовое 		     						= Ложь;
	//ОбъектСпр.ИспользуетсяВРаботеТорговыхПредставителей = Истина;       
	//	
	////ОбъектСпр.ПорядокРасчетов 	    = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
	////ОбъектСпр.ПорядокОплаты 	    = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
	////ОбъектСпр.ВалютаВзаиморасчетов 	= мВалютаРегламентированногоУчета;
	////ОбъектСпр.Статус 	    		= Перечисления.СтатусыДоговоровКонтрагентов.НеСогласован;
	//	
	//ОбъектСпр.ОбменДанными.Загрузка = Истина;
	//
	//Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпр, "запись") Тогда 	
	//	ТекстСообщения = "Не удалось записать элемент справочника: " + Строка(ОбъектСпр) + " в базу!";				
	//	ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, ОбъектСпр);		
	//	Возврат;
	//КонецЕсли;	
	//
	//// Значит, скорее всего, объект партнера еще не был загружен. 
	//// Получим ссылку пока не существующего объекта по идентификатору 	
	//Если Не ЗначениеЗаполнено(Партнер) Тогда
	//	СтрокаТаб = ТабДоговоров.Добавить();
	//	СтрокаТаб.Объект  = ОбъектСпр.Ссылка;	
	//	СтрокаТаб.Партнер = ПолучитьСсылкуОбъектаПоИдентификатору(ИдПартнера, "Партнеры");	    		
	//КонецЕсли;	
	//
	//ЗаписатьВПротоколЗагрузкуЭлемСпр(ОбъектСпр, ЭтоНовый);   	
	
КонецПроцедуры //ЗагрузитьДоговор

&НаСервере
Процедура ЗагрузитьКонтактнуюИнформацию(ТекстXML, Спр)
	
	//Если ТабКИ = Неопределено Тогда
	//	ТабКИ = Новый ТаблицаЗначений;	
	//	ТабКИ.Колонки.Добавить("Объект");
	//	ТабКИ.Колонки.Добавить("ИдЭлемента");
	//	ТабКИ.Колонки.Добавить("Тип");
	//	ТабКИ.Колонки.Добавить("Вид");
	//	ТабКИ.Колонки.Добавить("Представление");  
	//КонецЕсли;
	//
	//ИдЭлемента       = ТекстXML.ПолучитьАтрибут("GUID");
	//ИдКонтрагент     = ТекстXML.ПолучитьАтрибут("A01");
	//ИдТорговаяТочка  = ТекстXML.ПолучитьАтрибут("A02");
	//ИдКонтактноеЛицо = ТекстXML.ПолучитьАтрибут("A03");
	//ИдТип 		     = ТекстXML.ПолучитьАтрибут("A04");
	//ИдВид 		     = ТекстXML.ПолучитьАтрибут("A05");
	//Представление    = ТекстXML.ПолучитьАтрибут("A06");
	//
	//Если Не ИдКонтактноеЛицо = Неопределено Тогда
	//	ТекОбъект = ПолучитьСсылкуИзСправочника(ИдКонтактноеЛицо, "КонтактныеЛицаПартнеров");		
	//ИначеЕсли Не ИдКонтрагент = Неопределено Тогда
	//	ТекОбъект = ПолучитьСсылкуИзСправочника(ИдКонтрагент, "Партнеры");		
	//ИначеЕсли Не ИдТорговаяТочка = Неопределено Тогда
	//	ТекОбъект = ПолучитьСсылкуИзСправочника(ИдТорговаяТочка, "Контрагенты");		
	//Иначе
	//	Возврат;
	//КонецЕсли;	                                                                	
	//
	//Тип = ПолучитьЗначениеПеречисления(ИдТип); 
	//Если Тип = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Вид = ПолучитьСсылкуИзСправочника(ИдВид, "ВидыКонтактнойИнформации");
	//Если Вид = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//// Значит, скорее всего, объект контактной информации еще не был загружен. 
	//// Получим ссылку пока не существующего объекта по идентификатору 	
	//Если Не ЗначениеЗаполнено(ТекОбъект) Тогда    
	//	Если Не ИдКонтактноеЛицо = Неопределено Тогда
	//		ТекОбъект = ПолучитьСсылкуОбъектаПоИдентификатору(ИдКонтактноеЛицо, "КонтактныеЛицаПартнеров");		
	//	ИначеЕсли Не ИдКонтрагент = Неопределено Тогда
	//		ТекОбъект = ПолучитьСсылкуОбъектаПоИдентификатору(ИдКонтрагент, "Партнеры");		
	//	ИначеЕсли Не ИдТорговаяТочка = Неопределено Тогда
	//		ТекОбъект = ПолучитьСсылкуОбъектаПоИдентификатору(ИдТорговаяТочка, "Контрагенты");							
	//	КонецЕсли;	    
	//	СтрокаТаб = ТабКИ.Добавить();
	//	СтрокаТаб.Объект 		= ТекОбъект;	
	//	СтрокаТаб.ИдЭлемента 	= ИдЭлемента;	
	//	СтрокаТаб.Тип 	 		= Тип;	
	//	СтрокаТаб.Вид			= Вид;	
	//	СтрокаТаб.Представление = Представление;	
	//КонецЕсли;     	                 	
	//
	//ОбъектСпр = ТекОбъект.ПолучитьОбъект();
	//
	//Если ОбъектСпр = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ТабЧасть = ОбъектСпр.КонтактнаяИнформация;  		
	//Отбор = Новый Структура("Тип, Вид", Тип, Вид);
	//
	//НайденныеСтроки = ТабЧасть.НайтиСтроки(Отбор); 
	//
	//Если НайденныеСтроки.Количество() = 0 Тогда
	//	ЗаписьКИ = ТабЧасть.Добавить();						
	//Иначе  						
	//	ЗаписьКИ = НайденныеСтроки[0];
	//КонецЕсли;
	//
	//ЗаписьКИ.Тип		   = Тип;	
	//ЗаписьКИ.Вид 		   = Вид;	
	//ЗаписьКИ.Представление = Представление;	  
	//
	//Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпр, "запись") Тогда 	
	//	ТекстСообщения = "Не удалось записать элемент справочника: " + Строка(ОбъектСпр) + " в базу!";				
	//	ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, ОбъектСпр);		
	//	Возврат;
	//КонецЕсли;	
	//
	//ТекстСообщения = "Записана контактная информация для объекта: " + ОбъектСпр;				
	//ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Истина, ОбъектСпр);	
	//
	//Если СписЗагруженныхОбъектовСпр.НайтиПоЗначению(ИдЭлемента) = Неопределено Тогда
	//	СписЗагруженныхОбъектовСпр.Добавить(ИдЭлемента, "КонтактнаяИнформация");
	//КонецЕсли;   					
			 	
КонецПроцедуры //ЗагрузитьКонтактнуюИнформацию

&НаСервере
Процедура ЗакончитьЗагрузкуКонтактнойИнформации()
	
	//Если Не ТабКИ = Неопределено Тогда
	//	
	//	Для Каждого СтрокаТаб Из ТабКИ Цикл
	//		
	//		ОбъектСпр = СтрокаТаб.Объект.ПолучитьОбъект();
	//		
	//		Если ОбъектСпр = Неопределено Тогда
	//			Продолжить;
	//		КонецЕсли;          
	//		
	//		Тип 		  = СтрокаТаб.Тип;
	//		Вид 		  = СтрокаТаб.Вид;
	//		Представление = СтрокаТаб.Представление;
	//		ИдЭлемента 	  = СтрокаТаб.ИдЭлемента;
	//		  				
	//		ТабЧасть = ОбъектСпр.КонтактнаяИнформация;  		
	//		Отбор = Новый Структура("Тип, Вид", Тип, Вид);
	//		
	//		НайденныеСтроки = ТабЧасть.НайтиСтроки(Отбор); 
	//		
	//		Если НайденныеСтроки.Количество() = 0 Тогда
	//			ЗаписьКИ = ТабЧасть.Добавить();						
	//		Иначе  						
	//			ЗаписьКИ = НайденныеСтроки[0];
	//		КонецЕсли;
	//		
	//		ЗаписьКИ.Тип		   = Тип;	
	//		ЗаписьКИ.Вид 		   = Вид;	
	//		ЗаписьКИ.Представление = Представление;	  
	//		
	//		Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпр, "запись") Тогда 	
	//			ТекстСообщения = "Не удалось записать элемент справочника: " + Строка(ОбъектСпр) + " в базу!";				
	//			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, ОбъектСпр);		
	//			Возврат;
	//		КонецЕсли;	
	//		
	//		ТекстСообщения = "Записана контактная информация для объекта: " + ОбъектСпр;				
	//		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Истина, ОбъектСпр);	
	//		
	//		Если СписЗагруженныхОбъектовСпр.НайтиПоЗначению(ИдЭлемента) = Неопределено Тогда
	//			СписЗагруженныхОбъектовСпр.Добавить(ИдЭлемента, "КонтактнаяИнформация");
	//		КонецЕсли;   		
	//		
	//	КонецЦикла;
	//	
	//КонецЕсли;
	
КонецПроцедуры //ЗакончитьЗагрузкуКонтактнойИнформации

&НаСервере
Процедура ЗакончитьЗагрузкуДоговоров()
	
	//Если Не ТабДоговоров = Неопределено Тогда
	//	
	//	Для Каждого СтрокаТаб Из ТабДоговоров Цикл
	//		
	//		Партнер = СтрокаТаб.Партнер;
	//		
	//		ОбъектПартнер = Партнер.ПолучитьОбъект();			
	//		ОбъектСпр 	  = СтрокаТаб.Объект.ПолучитьОбъект(); // Договор
	//		
	//		Если ОбъектПартнер = Неопределено Тогда
	//			Продолжить;
	//		КонецЕсли; 
	//		
	//		Контрагент = ПолучитьОсновногоКонтрагентаПартнера(Партнер);
	//		
	//		ОбъектСпр.Партнер    = Партнер;
	//		ОбъектСпр.Контрагент = Контрагент;		
	//						
	//		Если ЗначениеЗаполнено(Партнер) Тогда
	//			ОбъектСпр.ЗаполнитьУсловияПродажПоУмолчанию();
	//		КонецЕсли;
	//				   			
	//		Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпр, "запись") Тогда 	
	//			ТекстСообщения = "Не удалось записать элемент справочника ""Соглашение с клиентами"": " + Строка(ОбъектСпр) + " в базу!";				
	//			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, ОбъектСпр);		
	//			Возврат;
	//		КонецЕсли;	
	//		
	//		ТекстСообщения = "Дозаписана информация для справочника ""Соглашение с клиентами"" для объекта: " + ОбъектСпр;				
	//		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Истина, ОбъектСпр);	
	//					
	//	КонецЦикла;
	//	
	//КонецЕсли;
	
КонецПроцедуры //ЗакончитьЗагрузкуДоговоров

Процедура ЗагрузитьВидыЗадач(ТекстXML, ОбъектСпр, ЭтоНовый)
	
	//Пока ТекстXML.ПрочитатьАтрибут() Цикл
	//	
	//	ИмяПараметра  = ТекстXML.Имя;
	//	ЗначПараметра = ТекстXML.Значение;
	//	
	//	Если Не ЗначениеЗаполнено(ЗначПараметра) Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Если ИмяПараметра = "IsDeleted" Тогда
	//		ПометкаУдаления = Булево(Число(ЗначПараметра));							
	//	ИначеЕсли ИмяПараметра = "Name" Тогда
	//		ОбъектСпр.Наименование = СокрЛП(ЗначПараметра);
	//	ИначеЕсли ИмяПараметра = "GrpId0" Тогда			
	//		ОбъектСпр.Родитель = ПолучитьСсылкуИзСправочника(ЗначПараметра, "апВидызадач");		
	//	ИначеЕсли ИмяПараметра = "A01" Тогда
	//		ИдТипаЗадачи = НРег(СокрЛП(ЗначПараметра));
	//		
	//		Если ИдТипаЗадачи = "eaded006-5271-4497-9222-79541d23e3fa" Тогда
	//			ТипЗадания = Перечисления.апТипыЗадач.СоздатьДокументЗаявка;
	//		ИначеЕсли ИдТипаЗадачи = "544b81fd-49da-453e-9b9c-eec549cbef10" Тогда
	//			ТипЗадания = Перечисления.апТипыЗадач.СоздатьДокументМерчендайзинг;
	//		ИначеЕсли ИдТипаЗадачи = "57ec9bd4-c2ec-47e0-86c1-b06211735f32" Тогда
	//			ТипЗадания = Перечисления.апТипыЗадач.СоздатьДокументПеремещение;
	//		ИначеЕсли ИдТипаЗадачи = "2f7826f4-2665-49fa-95e7-e7c8cc6ebf0e" Тогда
	//			ТипЗадания = Перечисления.апТипыЗадач.СоздатьДокументПосещение 
	//		ИначеЕсли ИдТипаЗадачи = "79e5b0f6-b019-41fe-9214-c7a204e05974" Тогда		
	//			ТипЗадания = Перечисления.апТипыЗадач.СоздатьДокументПоступление; 
	//		ИначеЕсли ИдТипаЗадачи = "ec84ce42-a9c3-4936-94fb-595ec1e84aef"	Тогда	
	//			 ТипЗадания = Перечисления.апТипыЗадач.СоздатьДокументВозвратТоваров;
	//		ИначеЕсли ИдТипаЗадачи = "d6176c16-130d-40d8-ad70-13a39c957927" Тогда
	//			ТипЗадания = Перечисления.апТипыЗадач.СоздатьДокументРеализация;
	//		ИначеЕсли ИдТипаЗадачи = "2ec90b5a-56ff-4338-aeaa-2416b8923bf8" Тогда
	//			ТипЗадания = Перечисления.апТипыЗадач.СоздатьДокументПКО;
	//		ИначеЕсли ИдТипаЗадачи = "8bed83c4-4428-4206-89d1-a31790130937" Тогда
	//			ТипЗадания = Перечисления.апТипыЗадач.СоздатьДокументРКО;
	//		//прочие типы задач
	//		ИначеЕсли ИдТипаЗадачи = "b483e5f9-95e6-4e2d-b6b2-d5954fcc25ae" Тогда
	//			ТипЗадания = Перечисления.апТипыЗадач.СделатьФотографию;
	//		ИначеЕсли ИдТипаЗадачи = "061879d3-e400-4cc8-b4f9-999c3399f47c" Тогда		
	//			ТипЗадания = Перечисления.апТипыЗадач.ОбменятьсяДанными;
	//		//задачи типа "Выбрать значение из списка"
	//		ИначеЕсли ИдТипаЗадачи = "fddc6586-fc43-4de2-9f8a-0f1efdce4b31" Тогда
	//			ТипЗадания = Перечисления.апТипыЗадач.ВыбратьЗначениеИзСписка;
	//		//задачи типа "Ввести число", "Ввести строку", "Ввести дату"
	//		ИначеЕсли ИдТипаЗадачи = "19661470-75a6-4eb4-be94-44924664b3d1" Тогда			
	//			ТипЗадания = Перечисления.апТипыЗадач.ВвестиЧисло;
	//		ИначеЕсли ИдТипаЗадачи = "23d6533f-f121-4939-9a40-27257371ac26" Тогда
	//			ТипЗадания = Перечисления.апТипыЗадач.ВвестиДату;
	//		ИначеЕсли ИдТипаЗадачи = "a429fb60-a01b-4282-ba56-85721e24257d"	Тогда	
	//			ТипЗадания = Перечисления.апТипыЗадач.ВвестиСтроку;
	//		//задачи типа "Исполнено/Неисполнено"
	//		ИначеЕсли ИдТипаЗадачи = "b65c3f4c-6cbe-4675-9685-9f3c62be199e" Тогда		
	//			ТипЗадания = Перечисления.апТипыЗадач.ИсполненоНеисполнено;
	//		КонецЕсли; //Если ТипЗадания = Перечисления.апТипыЗадач.СоздатьДокументЗаявка Тогда			 						
	//		
	//		ОбъектСпр.Тип = ТипЗадания;
	//	ИначеЕсли ИмяПараметра = "A02" Тогда
	//		ИдВопроса = СокрЛП(ТекстXML.Значение);
	//		Вопрос = ПолучитьСсылкуИзСправочника(ИдВопроса, "апВопросыАнкеты");
	//		
	//		ОбъектСпр.Вопрос = Вопрос;
	//	КонецЕсли; 						
	//	
	//КонецЦикла;
	//
	//ОбъектСпр.ОбменДанными.Загрузка = Ложь;
	//	 		  	
	//Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпр, "запись") Тогда 	
	//	ТекстСообщения = "Не удалось записать элемент справочника: " + Строка(ОбъектСпр) + " в базу!";				
	//	ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, ОбъектСпр);				
	//	Возврат;							
	//КонецЕсли;	
	//	
	//ЗаписатьВПротоколЗагрузкуЭлемСпр(ОбъектСпр, ЭтоНовый);	 	     
	
КонецПроцедуры //ЗагрузитьПартнера

&НаСервере
Процедура ЗагрузитьСправочник(ТекстXML, Спр)
	
	//СпрМенеджер = Справочники[Спр];
	//
	////Если Спр <> "ХранилищеДополнительнойИнформации" Тогда
	//	
	//	ИдОбъекта = Новый УникальныйИдентификатор(ТекстXML.ЗначениеАтрибута("GUID"));
	//	
	//	СсылкаОбъекта = СпрМенеджер.ПолучитьСсылку(ИдОбъекта);
	//	
	//	ЭтоНовыйОбъект = Истина;
	//	
	//	Если СсылкаОбъекта.ПолучитьОбъект() = Неопределено Тогда			
	//		ОбъектСпр = СпрМенеджер.СоздатьЭлемент();						
	//		ОбъектСпр.УстановитьСсылкуНового(СсылкаОбъекта);
	//		ОбъектСпр.ОбменДанными.Загрузка = Истина;
	//		ОбъектСпр.УстановитьНовыйКод();
	//	Иначе						
	//		ОбъектСпр = СсылкаОбъекта.ПолучитьОбъект();
	//		ОбъектСпр.Разблокировать();
	//		ЭтоНовыйОбъект = Ложь;
	//	КонецЕсли; 
	//	
	//	// Записываем предварительно, если справочник не подчиненный
	//	//Если СсылкаОбъекта.Метаданные().Владельцы.Количество() = 0 Тогда
	//	//	Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпр, "запись") Тогда 	
	//	//		ТекстСообщения = "Не удалось записать элемент справочника: " + Строка(ОбъектСпр) + " в базу!";				
	//	//		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, ОбъектСпр);		
	//	//		ТекстXML.Пропустить();
	//	//		Возврат;
	//	//	КонецЕсли;									
	//	//КонецЕсли;					
	//	
	//	Если Спр = "Партнеры" Тогда   		
	//		ЗагрузитьПартнера(ТекстXML, ОбъектСпр, ЭтоНовыйОбъект);	
	//		ТекстXML.Прочитать();
	//	ИначеЕсли Спр = "СоглашенияСКлиентами" Тогда
	//		ЗагрузитьДоговор(ТекстXML, ОбъектСпр, ЭтоНовыйОбъект);
	//		ТекстXML.Прочитать();
	//	ИначеЕсли Спр = "КонтактныеЛицаПартнеров" Тогда
	//		ЗагрузитьКонтактноеЛицо(ТекстXML, ОбъектСпр, ЭтоНовыйОбъект);
	//		ТекстXML.Прочитать();
	//	ИначеЕсли Спр = "апФотографииДокументов" Тогда
	//		ЗагрузитьФотографиюДокумента(ТекстXML, ОбъектСпр, ЭтоНовыйОбъект);
	//		ТекстXML.Прочитать();
	//	ИначеЕсли Спр = "апВидыЗадач" Тогда
	//		ЗагрузитьВидыЗадач(ТекстXML, ОбъектСпр, ЭтоНовыйОбъект);
	//		ТекстXML.Прочитать();		
	//	КонецЕсли;
	////Иначе
	////	//ЗагрузитьФотографиюСправочника(ТекстXML);		
	////КонецЕсли;

КонецПроцедуры //ЗагрузитьСправочник
      
&НаСервере
Процедура ЗагрузитьСправочники(ТекстXML)
	
	//СоответствиеСпрЗагр = Новый Соответствие();
	//
	//СоответствиеСпрЗагр.Вставить("9450980f-fb59-47e3-bae2-aa3c58441b1a", "Партнеры");	
	//СоответствиеСпрЗагр.Вставить("735a9ce5-dcc1-4d1a-8f8d-643a50a6befc", "СоглашенияСКлиентами");
	//СоответствиеСпрЗагр.Вставить("d3dbb02e-681e-4fc2-ad0e-8ef1234e9f48", "Контрагенты");
	//СоответствиеСпрЗагр.Вставить("cf387a58-4655-41b5-a460-85884d1f20d0", "КонтактныеЛицаПартнеров");     	
	//СоответствиеСпрЗагр.Вставить("05ea7926-febb-4d82-97fc-19294dd5dd29", "апФотографииДокументов");
	//СоответствиеСпрЗагр.Вставить("85b62882-0156-4881-85ba-b8fef05c867b", "КонтактнаяИнформация");	
	//СоответствиеСпрЗагр.Вставить("e01cf3a3-6765-4fd3-801c-ccdbf85c78fc", "ФотоСправочников");
	//СоответствиеСпрЗагр.Вставить("a00b7107-5700-4e02-97f6-c577e707e21f", "апВидыЗадач");
	//СоответствиеСпрЗагр.Вставить("b3dfd675-23f8-45ed-86c2-8981f549fdb7", "апОтчетыДляМобильныхУстройств");
	//
	//СписЗагруженныхОбъектовСпр.Очистить();
	//
	//ТабЗагруженныхФото.Очистить();		
	//
	//Пока ТекстXML.Прочитать() Цикл
	//	
	//	Если ТекстXML.Имя = "KILLEDS" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
	//		ТекстXML.Пропустить();
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Если ТекстXML.Имя = "CATALOGS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
	//		Прервать;
	//	КонецЕсли;
	// 	
	//	Если ТекстXML.Имя = "CATALOG" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	ИдСпрXML = ТекстXML.ЗначениеАтрибута("GUID");
	//	Если ИдСпрXML <> Неопределено Тогда
	//		ИдСправочника = ИдСпрXML;  												
	//	КонецЕсли;
	//	
	//	Спр = СоответствиеСпрЗагр.Получить(НРег(ИдСправочника));
	//	
	//	Если Спр = Неопределено Тогда
	//		ТекстXML.Пропустить();			
	//		Если ТекстXML.Имя = "CATALOGS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
	//			Прервать;
	//		Иначе
	//			ИдСпрXML = ТекстXML.ЗначениеАтрибута("GUID");
	//			Если ИдСпрXML <> Неопределено Тогда
	//				ИдСправочника = ИдСпрXML;
	//			КонецЕсли;
	//			Продолжить;
	//		КонецЕсли;
	//	КонецЕсли;
	//		
	//	Пока ТекстXML.Прочитать() Цикл
	//		
	//		Если ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
	//			Прервать;
	//		КонецЕсли;
	//		
	//		Если ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
	//			Прервать;
	//		ИначеЕсли ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
	//			ТекстXML.Прочитать();
	//		ИначеЕсли ТекстXML.Имя = "KILLEDS" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
	//			ТекстXML.Пропустить();
	//			Прервать;
	//		КонецЕсли;
	//		
	//		Если Спр = "КонтактнаяИнформация" Тогда
	//			ЗагрузитьКонтактнуюИнформацию(ТекстXML, Спр);
	//			ТекстXML.Прочитать();	
	//		ИначеЕсли Спр = "ФотоСправочников" Тогда
	//			ЗагрузитьФотографиюСправочника(ТекстXML);						
	//			ТекстXML.Прочитать();
	//		//ИначеЕсли Спр = "апОтчетыДляМобильныхУстройств" Тогда   		
	//		//	ЗагрузитьОтчеты(ТекстXML, Спр);	
	//		//	ТекстXML.Прочитать();
	//		//Иначе
	//		//	ЗагрузитьСправочник(ТекстXML, Спр);
	//		КонецЕсли;  											
	//	КонецЦикла;   	 
	//	
	//КонецЦикла;   
		
КонецПроцедуры //ЗагрузитьСправочники

&НаСервере
// Записывает двоичные данные файла в информационную базу
//
// Параметры
// ПрисоединенныйФайлСсылка - ссылка на присоединенный файл
// ДвоичныеДанные - двоичные данные, которые требуется записать
//
Процедура ЗаписатьФайлВИнформационнуюБазу(ПрисоединенныйФайлСсылка, ДвоичныеДанные) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.ПрисоединенныеФайлы.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ПрисоединенныйФайл = ПрисоединенныйФайлСсылка;
	МенеджерЗаписи.ХранимыйФайл = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

&НаСервере   
Функция ИзвлечьТекст(ДвоичныеДанные, Расширение, ИзвлеченныйТекст)
	
	Перем Отказ;
	
	Если ФайловыеФункции.ЭтоПлатформаWindows() И ФайловыеФункции.ФоновоеИзвлечениеТекстовФайловНаСервере() Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		ИзвлеченныйТекст = ФайловыеФункцииКлиентСервер.ИзвлечьТекстВоВременноеХранилище(ИмяВременногоФайла, , Отказ);
		УдалитьФайлы(ИмяВременногоФайла);
		
		Если Отказ Тогда
			Возврат Перечисления.СтатусыИзвлеченияТекстаФайлов.ИзвлечьНеУдалось;
		Иначе
			Возврат Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
		КонецЕсли;
	Иначе
		ИзвлеченныйТекст = "";
		Возврат Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
	КонецЕсли;
	
КонецФункции    

&НаСервере
Функция ЗагрузитьФотографии(ТекстXML, КаталогФайлов)
	
	// В этой папке у нас уже содержатся распакованные фото из файла выгрузки
	ПапкаВремФото = КаталогФайлов + ИмяАрхиваФотоИзМУ + "\";
	
	//ТЗ картинок     	
	тзКартинок = Новый ТаблицаЗначений;
	тзКартинок.Колонки.Добавить("GUID");
	тзКартинок.Колонки.Добавить("FileName");
	тзКартинок.Колонки.Добавить("Format");
	тзКартинок.Колонки.Добавить("Description");
   	
	Пока ТекстXML.Прочитать() Цикл
		
		Если ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		КонецЕсли;
		
		Если ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Пока ТекстXML.Прочитать() Цикл
				
				Если ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Прервать;
				КонецЕсли;
				
				Если ТекстXML.Имя = "ITEM" И Не ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда					
					
					ФотоКонтрагента = Ложь;
					ФотоТоргТочки	= Ложь;
					
					ИдФото = ТекстXML.ЗначениеАтрибута("GUID");
					ИмяФайлаФото = ТекстXML.ЗначениеАтрибута("FileName");
					ФорматФайла  = ТекстXML.ЗначениеАтрибута("Format");
					Комментарий  = ТекстXML.ЗначениеАтрибута("Description");
					
					СтрокаКартинки = тзКартинок.Добавить();
					СтрокаКартинки.GUID		   = ТекстXML.ЗначениеАтрибута("GUID");
					СтрокаКартинки.FileName    = ИмяФайлаФото;
					СтрокаКартинки.Format	   = ФорматФайла;
					СтрокаКартинки.Description = Комментарий;
					
					НайдСтроки = ТабЗагруженныхФото.НайтиСтроки(Новый Структура("ИдФото", НРег(ИдФото))); 
											
						Если НайдСтроки.Количество() = 0 Тогда
							
							// Фото, не привязанное к документу
							НовСтрока = ТабЗагруженныхФото.Добавить();
							НовСтрока.Ссылка = Неопределено;
							НовСтрока.ИдФото = ИдФото;     						
							
						Иначе
							
							Для Каждого НайдСтрока Из НайдСтроки Цикл
								
								ОбъектСпрФото = НайдСтрока.Ссылка.ПолучитьОбъект();
								
								Если ОбъектСпрФото = Неопределено Тогда Продолжить; КонецЕсли;
								
								Если ТипЗнч(ОбъектСпрФото) = Тип("СправочникОбъект.ПартнерыПрисоединенныеФайлы") или  
									ТипЗнч(ОбъектСпрФото) = Тип("СправочникОбъект.НоменклатураПрисоединенныеФайлы") Тогда
									
									ПрикрепленныйФайл = ОбъектСпрФото; 
									
									ПутьИскомогоФайла = ПапкаВремФото + ИдФото;
									
									НайденныеФайлы = НайтиФайлы(ПапкаВремФото, Строка(ИдФото) + "*");
									
									Если НайденныеФайлы.Количество() = 0 Тогда 									
										ОповеститьОСобытии("Не найден файл фотографии по пути: """ + ПутьИскомогоФайла + """! Возможно в мобильном устройстве отключен режим выгрузки фотографий!");
										ОповеститьОСобытии("Пропущена загрузка фотографии: """ + ИмяФайлаФото + """!", СтатусСообщения.Важное);
										Продолжить;																	
									КонецЕсли;
									
									ФайлФотоНаДиске = НайденныеФайлы[0];
									
									ПолныйПутьФото = ФайлФотоНаДиске.ПолноеИмя;
									
									ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПутьФото);
									
									Расширение 		   = ФайлФотоНаДиске.Расширение;
									ИмяБезРасширения   = ФайлФотоНаДиске.ИмяБезРасширения;
									РасширениеБезТочки = ФайловыеФункцииКлиентСервер.РасширениеБезТочки(Расширение);
									
									ВремяИзмененияУниверсальное = ФайлФотоНаДиске.ПолучитьУниверсальноеВремяИзменения();
																											
									ПрикрепленныйФайл.Наименование 			 		= ИмяФайлаФото;
									ПрикрепленныйФайл.Автор			 		 		= ВыбАгент.Пользователь;									
									ПрикрепленныйФайл.ДатаСоздания 			 		= ОбъектСпрФото.ДатаСоздания;
									ПрикрепленныйФайл.Описание 				 		= СокрЛП(Комментарий);
									ПрикрепленныйФайл.Размер 				 		= ФайлФотоНаДиске.Размер();
									ПрикрепленныйФайл.Расширение 			 		= Расширение;
									ПрикрепленныйФайл.ДатаМодификацииУниверсальная  = ВремяИзмененияУниверсальное;
									ПрикрепленныйФайл.СтатусИзвлеченияТекста 		= Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;								
									ПрикрепленныйФайл.ТипХраненияФайла 	     		= ФайловыеФункции.ПолучитьТипХраненияФайлов();
									
									Попытка
										Если ПрикрепленныйФайл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
											НачатьТранзакцию();
											ТранзакцияАктивна = Истина;
											ЗаписатьФайлВИнформационнуюБазу(ПрикрепленныйФайл.Ссылка, ДвоичныеДанные);
											ПрикрепленныйФайл.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
											ПрикрепленныйФайл.ПутьКФайлу = "";
										Иначе											
											// добавить в один из томов (где есть свободное место)																						
											ФайловыеФункции.ДобавитьНаДиск(ДвоичныеДанные, ПрикрепленныйФайл.ПутьКФайлу, ПрикрепленныйФайл.Том, ТекущаяДата(), "",
											ИмяБезРасширения, РасширениеБезТочки, ПрикрепленныйФайл.Размер, ПрикрепленныйФайл.Зашифрован);											
										КонецЕсли;
										
										ИзвлеченныйТекст = "";
										
										СтатусИзвлеченияТекста = ИзвлечьТекст(ДвоичныеДанные, ПрикрепленныйФайл.Расширение, ИзвлеченныйТекст);
										
										ПрикрепленныйФайл.СтатусИзвлеченияТекста = СтатусИзвлеченияТекста;
										ПрикрепленныйФайл.ТекстХранилище = Новый ХранилищеЗначения(ИзвлеченныйТекст);
										
										Попытка    																				
											Если Не ВыполнитьОперациюДляОбъекта(ПрикрепленныйФайл, "запись") Тогда 						
												ОповеститьОСобытии("Не удалось записать элемент справочника ""Прикрепленные файлы""", СтатусСообщения.Важное);
												Продолжить;			
											КонецЕсли;  
										Исключение   											
											ОповеститьОСобытии("Не удалось записать элемент справочника ""Прикрепленные файлы""", СтатусСообщения.Важное);											
											Если ТранзакцияАктивна Тогда
												ОтменитьТранзакцию();
											КонецЕсли;     											
											Возврат Неопределено;
										КонецПопытки;
										
										Если ТранзакцияАктивна Тогда
											ЗафиксироватьТранзакцию();
										КонецЕсли;
										
									Исключение
										Если ТранзакцияАктивна Тогда
											ОтменитьТранзакцию();
										КонецЕсли;
										ОповеститьОСобытии("Не удалось записать элемент справочника ""Прикрепленные файлы""", СтатусСообщения.Важное);
									КонецПопытки;
																								
								ИначеЕсли ТипЗнч(ОбъектСпрФото) = Тип("СправочникОбъект.апФотографииДокументов") Тогда
									
									ДокФото = ОбъектСпрФото.Документ;
									
									Если Не ЗначениеЗаполнено(ДокФото) Тогда
										Продолжить;
									КонецЕсли;
									
									Запрос = Новый Запрос("ВЫБРАТЬ
									|	Док.Документ
									|ИЗ
									|	РегистрСведений.апЗагруженныеДокументы.СрезПоследних(&Дата, Документ = &Документ) КАК Док");    							
									
									Запрос.УстановитьПараметр("Документ", ДокФото);
									Запрос.УстановитьПараметр("Дата",     ТекущаяДата());
									
									ПустойЗапрос = Запрос.Выполнить().Пустой();
									
									Если ПустойЗапрос Тогда
										ТекстСообщения = "Документ, на который ссылается фотография """ + ИмяФайлаФото + """ не был загружен в ЦБД (идентификатор документа: " + ДокФото.УникальныйИдентификатор() + """)!";
										ОповеститьОСобытии(ТекстСообщения);
										ОповеститьОСобытии("Пропущена загрузка фотографии: """ + ИмяФайлаФото + """!", СтатусСообщения.Важное);
										Продолжить;
									КонецЕсли; 	
									
									ПутьИскомогоФайла = ПапкаВремФото + ИдФото;
									
									НайденныеФайлы = НайтиФайлы(ПапкаВремФото, Строка(ИдФото) + "*");
									
									Если НайденныеФайлы.Количество() = 0 Тогда 									
										ОповеститьОСобытии("Не найден файл фотографии по пути: """ + ПутьИскомогоФайла + """! Возможно в мобильном устройстве отключен режим выгрузки фотографий!");
										ОповеститьОСобытии("Пропущена загрузка фотографии: """ + ИмяФайлаФото + """!", СтатусСообщения.Важное);
										Продолжить;																	
									КонецЕсли;
									
									ФайлФотоНаДиске = НайденныеФайлы[0];
									
									ПолныйПутьФото = ФайлФотоНаДиске.ПолноеИмя;
									
									ФотоСКПК 		  = Новый Картинка(ПолныйПутьФото, Ложь);
									НоваяКартинка	  = ФотоСКПК.Преобразовать(ФорматКартинки.PNG);
									ХранилищеКартинки = Новый ХранилищеЗначения(НоваяКартинка, Новый СжатиеДанных);
									
									Если ПустаяСтрока(ОбъектСпрФото.Наименование) Тогда
										ОбъектСпрФото.Наименование  = ИмяФайлаФото;
									КонецЕсли;			
									
									ОбъектСпрФото.Описание = СокрЛП(Комментарий);								
									ОбъектСпрФото.Документ = ДокФото;	
									ОбъектСпрФото.Автор    = ВыбАгент;	
									
									Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпрФото, "запись") Тогда 						
										ОповеститьОСобытии("Не удалось записать элемент справочника ""Фотографии документов""", СтатусСообщения.Важное);
										Продолжить;			
									КонецЕсли;    							
									
									// Создаем элемент справочника "апПрикрепленныеФайлы"
									Если ЗначениеЗаполнено(ОбъектСпрФото.ФайлФото) Тогда
										ПрикрепленныйФайл = ОбъектСпрФото.ФайлФото.Ссылка.ПолучитьОбъект(); 
									Иначе
										ПрикрепленныйФайл = Справочники.апПрикрепленныеФайлы.СоздатьЭлемент();
										ПрикрепленныйФайл.ВладелецФайла = ИмяФайлаФото;
									КонецЕсли;
									
									ПрикрепленныйФайл.Наименование 			 = ИмяФайлаФото;
									ПрикрепленныйФайл.Автор			 		 = ВыбАгент;
									ПрикрепленныйФайл.ВладелецФайла 		 = ОбъектСпрФото.Ссылка;
									ПрикрепленныйФайл.ДатаСоздания 			 = ОбъектСпрФото.ДатаСоздания;
									ПрикрепленныйФайл.Описание 				 = СокрЛП(Комментарий);
									ПрикрепленныйФайл.Размер 				 = ФайлФотоНаДиске.Размер();
									ПрикрепленныйФайл.Расширение 			 = ФайлФотоНаДиске.Расширение;
									ПрикрепленныйФайл.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;								
									ПрикрепленныйФайл.ТипХраненияФайла 	     = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
									ПрикрепленныйФайл.ХранимыйФайл 			 = ХранилищеКартинки;
									
									Если Не ВыполнитьОперациюДляОбъекта(ПрикрепленныйФайл, "запись") Тогда 						
										ОповеститьОСобытии("Не удалось записать элемент справочника ""Прикрепленные файлы""", СтатусСообщения.Важное);
										Продолжить;			
									КонецЕсли;  
									
									// Нужно записать объект справочника апФотографииДокументов
									Если Не ЗначениеЗаполнено(ОбъектСпрФото.ФайлФото) Тогда
										ОбъектСпрФото.ФайлФото = ПрикрепленныйФайл.Ссылка; 									
										Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпрФото, "запись") Тогда 						
											ОповеститьОСобытии("Не удалось записать элемент справочника ""Фотографии документов""", СтатусСообщения.Важное);
											Продолжить;			
										КонецЕсли;   									
									КонецЕсли;
									
								КонецЕсли;
								
							КонецЦикла;				
							
						//КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
					
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции //ЗагрузитьФотографии()    

&НаСервере 
Процедура ЗагрузитьФотографиюДокумента(ТекстXML, ОбъектСпр, ЭтоНовый)
	
	Пока ТекстXML.ПрочитатьАтрибут() Цикл
		
		ИмяПараметра  = ТекстXML.Имя;
		ЗначПараметра = ТекстXML.Значение;
		
		Если Не ЗначениеЗаполнено(ЗначПараметра) Тогда Продолжить; КонецЕсли;
		
		Если ИмяПараметра = "IsDeleted" Тогда
			ПометкаУдаления = Булево(Число(ТекстXML.Значение));							
		ИначеЕсли ИмяПараметра = "Name" Тогда
			ОбъектСпр.Наименование = СокрЛП(ТекстXML.Значение);
		ИначеЕсли ИмяПараметра = "A01" Тогда 			
			ОбъектСпр.Документ = ПолучитьСсылкуИзДокумента(ЗначПараметра, "ЗаказКлиента");
		ИначеЕсли ИмяПараметра = "A02" Тогда 											
			ОбъектСпр.Документ = ПолучитьСсылкуИзДокумента(ЗначПараметра, "ПриходныйКассовыйОрдер");			
		ИначеЕсли ИмяПараметра = "A03" Тогда 											
			ОбъектСпр.Документ = ПолучитьСсылкуИзДокумента(ЗначПараметра, "апМерчендайзинг");
			ОбъектСпр.Документ = "";
		ИначеЕсли ИмяПараметра = "A06" Тогда 											
			ОбъектСпр.Документ = ПолучитьСсылкуИзДокумента(ЗначПараметра, "апПосещение");		
		ИначеЕсли ИмяПараметра = "A07" Тогда 											
			ОбъектСпр.Документ = ПолучитьСсылкуИзДокумента(ЗначПараметра, "РеализацияТоваровУслуг");		
		ИначеЕсли ИмяПараметра = "A08" Тогда 											
			ОбъектСпр.Документ = ПолучитьСсылкуИзДокумента(ЗначПараметра, "ПеремещениеТоваров");		
		ИначеЕсли ИмяПараметра = "A09" Тогда 											
			ОбъектСпр.Документ = ПолучитьСсылкуИзДокумента(ЗначПараметра, "РасходныйКассовыйОрдер");		
		ИначеЕсли ИмяПараметра = "A010" Тогда 											
			ОбъектСпр.Документ = ПолучитьСсылкуИзДокумента(ЗначПараметра, "ПоступлениеТоваровУслуг");		
		ИначеЕсли ИмяПараметра = "A011" Тогда 											
			ОбъектСпр.Документ = ПолучитьСсылкуИзДокумента(ЗначПараметра, "ВозвратТоваровОтКлиента");
		ИначеЕсли ИмяПараметра = "A012" Тогда 											
			ОбъектСпр.Документ = ПолучитьСсылкуИзДокумента(ЗначПараметра, "апЗадание");
		ИначеЕсли ИмяПараметра = "A04" Тогда 											
			ИдФото = ЗначПараметра;								
		ИначеЕсли ИмяПараметра = "A05" Тогда 																			
			ОбъектСпр.ДатаСоздания = ДатаВремяXMLВФормат1С(ЗначПараметра);
		КонецЕсли; 		
				
	КонецЦикла;
	
	Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпр, "запись") Тогда 	
		ТекстСообщения = "Не удалось записать элемент справочника: " + Строка(ОбъектСпр) + " в базу!";				
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, ОбъектСпр);				
		Возврат;
	КонецЕсли;
	
	НовСтрока = ТабЗагруженныхФото.Добавить();
	НовСтрока.Ссылка = ОбъектСпр.Ссылка;
	НовСтрока.ИдФото = НРег(ИдФото);
	
	ЗаписатьВПротоколЗагрузкуЭлемСпр(ОбъектСпр, ЭтоНовый);	
	
КонецПроцедуры //ЗагрузитьФотографиюДокумента

&НаСервере
Процедура ЗагрузитьФотографиюСправочника(ТекстXML)
	
	Перем ИдПартнера;
	Перем ИдКонтрагента;
	Перем ИдНоменклатуры;
	Перем ИдФото;
	
	СтруктураОбъекта = Новый Структура;
	Пока ТекстXML.ПрочитатьАтрибут() Цикл
		
		ИмяПараметра  = ТекстXML.Имя;
		ЗначПараметра = ТекстXML.Значение;
		
		Если Не ЗначениеЗаполнено(ЗначПараметра) Тогда Продолжить; КонецЕсли;
		
		СтруктураОбъекта.Вставить(ИмяПараметра, ЗначПараметра);
		
	КонецЦикла;
	
	СтруктураОбъекта.Свойство("A01", ИдФото);
	СтруктураОбъекта.Свойство("A02", ИдНоменклатуры);
	СтруктураОбъекта.Свойство("A03", ИдПартнера);
	СтруктураОбъекта.Свойство("A04", ИдКонтрагента);
	
	Если ЗначениеЗаполнено(ИдКонтрагента) Тогда	
		ТекстXML.Пропустить();
		Возврат;
	ИначеЕсли ЗначениеЗаполнено(ИдПартнера) Тогда
		СсылкаВладельца  = Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдПартнера));
		СпрМенеджер = Справочники.ПартнерыПрисоединенныеФайлы;
	ИначеЕсли ЗначениеЗаполнено(ИдНоменклатуры) Тогда
		СсылкаВладельца  = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдНоменклатуры));
		СпрМенеджер = Справочники.НоменклатураПрисоединенныеФайлы;
	Иначе
		ТекстXML.Прочитать();
		Возврат;   
	КонецЕсли;
	
	Если СсылкаВладельца.ПолучитьОбъект() = Неопределено Тогда		
		ТекстXML.Прочитать();
		Возврат;
	КонецЕсли;
	
	ЭтоНовыйОбъект = Истина;
	
	ПрисоединенныйФайлСсылка = СпрМенеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдФото));
	Если ПрисоединенныйФайлСсылка.ПолучитьОбъект() = Неопределено Тогда			
		ПрисоединенныйФайл = СпрМенеджер.СоздатьЭлемент();						
		ПрисоединенныйФайл.УстановитьСсылкуНового(ПрисоединенныйФайлСсылка);
		ПрисоединенныйФайл.ОбменДанными.Загрузка = Истина;
		ПрисоединенныйФайл.УстановитьНовыйКод();
	Иначе						
		ПрисоединенныйФайл = ПрисоединенныйФайлСсылка.ПолучитьОбъект();
		ПрисоединенныйФайл.Разблокировать();
		ЭтоНовыйОбъект = Ложь;
	КонецЕсли;
	ПрисоединенныйФайл.ВладелецФайла = СсылкаВладельца;
	ПрисоединенныйФайл.ДатаСоздания  = ТекущаяДата();		
	ПрисоединенныйФайл.Наименование  = "";		
	
	Если Не ВыполнитьОперациюДляОбъекта(ПрисоединенныйФайл, "запись") Тогда
		ТекстСообщения = "Не удалось записать элемент справочника: " + Строка(ПрисоединенныйФайл) + " в базу!";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, ПрисоединенныйФайл);
		ТекстXML.Прочитать();
		Возврат;
	КонецЕсли;    	
	
	НовСтрока = ТабЗагруженныхФото.Добавить();
	НовСтрока.Ссылка = ПрисоединенныйФайл.Ссылка;
	НовСтрока.ИдФото = НРег(ИдФото);
	
	ЗаписатьВПротоколЗагрузкуЭлемСпр(ПрисоединенныйФайл, ЭтоНовыйОбъект);
	//ТекстXML.Прочитать();
	
КонецПроцедуры
  
&НаСервере
// Процедура сообщает о документе, который уже был загружен
//
// Добавлена 14.06.2007
//    
Процедура СообщитьОПропускеДокумента(СтруктураПараметров) Экспорт
 	
	ТекстСообщения = "Пропущена загрузка документа """ + СтруктураПараметров.ВидДокумента +
					 """ № " + Строка(СтруктураПараметров.Номер) + " от " + Строка(СтруктураПараметров.Дата) + 
					 " - документ был загружен ранее.";
					 
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры //СообщитьОПропускеДокумента() 

&НаСервереБезКонтекста
// Функция возвращает ссылку на элемент по полученному из XML уникальному идентификатору
// Параметры:
// ИдДокумента - Строка Уникального идентификатора
// Док - Имя документа, в котором необходимо найти элемент
// Возвращаемое значение:
// Найденная ссылка или пустая ссылка на документ, если искомого элеимента нет или неправильный идентификатор
Функция ПолучитьСсылкуИзДокумента(ИдДокумента, Док)
	
	Перем СсылкаДокумента;
	
	Если ИдДокумента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдДокумента = НРег(ИдДокумента);
	
	ДокМенеджер = Документы[Док];
	
	Если ЗначениеЗаполнено(ИдДокумента) Тогда 		
		ГуидДокумента = Новый УникальныйИдентификатор(ИдДокумента);
		СсылкаДокумента = ДокМенеджер.ПолучитьСсылку(ГуидДокумента); 		
	КонецЕсли;
	
	Если СсылкаДокумента = Неопределено Тогда
		СсылкаДокумента = ДокМенеджер.ПустаяСсылка();
	КонецЕсли;
	
	Возврат СсылкаДокумента;
	
КонецФункции //ПолучитьСсылкуИзДокумента

&НаСервере
Функция ПолучитьСсылкуОбъектаПоИдентификатору(ИдЭлемента, Спр, СоздаватьЭлемент = Ложь)
	
	СпрМенеджер = Справочники[Спр];
	
	СсылкаЭлемента = СпрМенеджер.ПустаяСсылка();
	
	Если ИдЭлемента = Неопределено или ЭтоПустойИдентификатор(ИдЭлемента) Тогда
		Возврат СсылкаЭлемента;
	КонецЕсли;
	
	ИдЭлемента = НРег(ИдЭлемента);
	
	Если ЗначениеЗаполнено(ИдЭлемента) Тогда		
		ГуидЭлемента = Новый УникальныйИдентификатор(ИдЭлемента);
		СсылкаЭлемента = СпрМенеджер.ПолучитьСсылку(ГуидЭлемента);		
		Возврат СсылкаЭлемента;                                   	
	КонецЕсли;
	
	Возврат СсылкаЭлемента;
	
КонецФункции //ПолучитьСсылкуОбъектаПоИдентификатору

&НаСервере
Функция ПолучитьСсылкуИзСправочника(ИдЭлемента, Спр, СоздаватьЭлемент = Ложь)
	
	Перем СсылкаЭлемента;
	
	Если ИдЭлемента = Неопределено Или ИдЭлемента = "" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдЭлемента = НРег(ИдЭлемента);
	
	СпрМенеджер = Справочники[Спр];
	
	СсылкаЭлемента = СпрМенеджер.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ИдЭлемента) Тогда
		
		ГуидЭлемента = Новый УникальныйИдентификатор(ИдЭлемента);
		СсылкаЭлемента = СпрМенеджер.ПолучитьСсылку(ГуидЭлемента);
		
		Если флИскатьПоGUI_77 Тогда
			СсылкаЭлемента = СпрМенеджер.НайтиПоРеквизиту("GUI_77", ИдЭлемента) ;
		КонецЕсли;
		
		Попытка
			ОбъектСпр = СсылкаЭлемента.ПолучитьОбъект();
		Исключение
			ОбъектСпр = Неопределено;
		КонецПопытки;
		
		Если ОбъектСпр = Неопределено Тогда
			
			Если СоздаватьЭлемент Тогда
				
				ЭлементОбъект = СпрМенеджер.СоздатьЭлемент();
				СсылкаОбъекта = СпрМенеджер.ПолучитьСсылку(ГуидЭлемента);
				ЭлементОбъект.УстановитьСсылкуНового(СсылкаОбъекта);
				ЭлементОбъект.ОбменДанными.Загрузка = Истина;
				
				Если Не ВыполнитьОперациюДляОбъекта(ЭлементОбъект, "запись") Тогда 			
					ТекстСообщения = "Не удалось записать элемент справочника: " + ЭлементОбъект;
					ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Истина, ЭлементОбъект);		
					Возврат СсылкаЭлемента;			
				КонецЕсли;
				
				СсылкаЭлемента = ЭлементОбъект.Ссылка;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;  	
	
	Возврат СсылкаЭлемента;
		
КонецФункции //ПолучитьСсылкуИзСправочника

&НаСервере
Функция ВыполнитьОперациюДляОбъекта(Объект, ВидОперации) Экспорт
	
	флОперацияВыполнена = Ложь;
	
	ПаузаМеждуПопытками = 10;
	КоличествоПопыток = 2;
		
	Для Сч = 1 По КоличествоПопыток Цикл
		
		Попытка
			
			Если ВидОперации = "запись" Тогда				
				Объект.Записать();
			ИначеЕсли ВидОперации = "проведение" Тогда 				
				Если Объект.ПометкаУдаления Тогда					
					ОповеститьОСобытии("Документ помечен на удаление - проведение отменено!", СтатусСообщения.Важное, Истина, Объект);					
					Возврат Ложь;					
				Иначе            					
					Объект.Записать(РежимЗаписиДокумента.Проведение);                                                   					
				КонецЕсли;				
			ИначеЕсли ВидОперации = "создание" Тогда
				Если Найти(Строка(Объект), "Справочник")>0 Тогда    
					Объект = Объект.СоздатьЭлемент();
				ИначеЕсли Найти(Строка(Объект), "Документ")>0 Тогда
					Объект = Объект.СоздатьДокумент();
				ИначеЕсли Найти(Строка(Объект), "Регистр")>0 Тогда
					Объект = Объект.СоздатьМенеджерЗаписи();      
				Иначе
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			
			флОперацияВыполнена = Истина;
			
			Прервать;
			
		Исключение
			
			Сообщить("------------------------------------------------------" + Символы.ПС + ОписаниеОшибки());
			
			// Пауза снизит нагрузку на сервер и позволит другим пользователям закончить операции,
			// которые идут в транзакции.
			#Если Клиент Тогда
			Предупреждение("В данный момент нет возможности выполнить " + ВидОперации + " для объекта: " + Строка(Объект) +
							Символы.ПС + "Повторная попытка будет произведена через " + ПаузаМеждуПопытками + " секунд",
							ПаузаМеждуПопытками, "Пауза"); 
			#КонецЕсли
			
			ТекстСообщения = "Не удалось выполнить " + ВидОперации + " для объекта: """ + Строка(Объект) + """";
			
			Если Найти(Строка(ТипЗнч(Объект)), "Регистр") > 0 Тогда			
				ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное, Истина);
			Иначе
				ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное, Истина, Объект);
			КонецЕсли;
			
		КонецПопытки; 
		
	КонецЦикла;        		
		
	Возврат флОперацияВыполнена;
			
КонецФункции //ВыполнитьОперациюДляОбъекта()

&НаСервере
// Функция преобразовывает дату и время из формата XML в дату формата 1С
//
//Возвращаемое значение:
//  Дата
//
// Добавлена Арт 2007-12-26
//
Функция ДатаВремяXMLВФормат1С(ДатаВремя) Экспорт
	
	СимвРазделителяА15 = " ";		
	СимвРазделителяМТ  = "T";
			
	Поз = Найти(ДатаВремя, "-");
	
	Если Поз <> 0 Тогда	 
    	Год   = Число(Лев(ДатаВремя,  Поз - 1));
		Месяц = Число(Сред(ДатаВремя, Поз + 1,2));
		День  = Число(Сред(ДатаВремя, Поз + 4,2));
	Иначе
		Возврат '00010101';
	КонецЕсли;
	
	ПозПробела = Найти(ДатаВремя, СимвРазделителяА15);
	
	Часы    = 0;
	Минуты  = 0;
	Секунды = 0;
	
	Если ПозПробела = 0 Тогда
		ПозПробела = Найти(ДатаВремя, СимвРазделителяМТ);
	КонецЕсли;
	    
	Если ПозПробела > 0 Тогда
		Часы    = Число(Сред(ДатаВремя, ПозПробела + 1, 2));
		Минуты  = Число(Сред(ДатаВремя, ПозПробела + 4, 2));
		Секунды = Число(Сред(ДатаВремя, ПозПробела + 7, 2));
	КонецЕсли;
	
	Возврат Дата(Год, Месяц, День, Часы, Минуты, Секунды);
	
КонецФункции //ДатаВремяXMLВФормат1С()
           
&НаКлиенте
Процедура ОбработатьВнешнееСобытиеОтАПС(ИдКПК)
	
	//УстановитьНастройкиФормы();
	
	МобильноеУстройство = ПолучитьМобильноеУстройствоПоИдентификатору(ИдКПК); 
	
	Если Не ЗначениеЗаполнено(МобильноеУстройство) Тогда
		ОповеститьОСобытии("В справочнике ""Мобильные устройства"" не найдено мобильное устройство с идентификатором: """ + СокрЛП(ИдКПК) + """!");				
		Возврат;
	КонецЕсли;
	
	ПолучитьНастройкиАгентаПоУстройству(МобильноеУстройство);
	
	Если Не ЗначениеЗаполнено(ВыбАгент) Тогда
		ОповеститьОСобытии("Не найден торговый агент, привязанный к устройству: """ + СокрЛП(МобильноеУстройство.Наименование) + """ (идентификатор моб. устройства: """ + СокрЛП(ИдКПК) + """) !");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыбАгент) Тогда
		ОповеститьОСобытии("В справочнике ""Настройки торговых предствителей"" не найден владелец мобильного устройства: """ + СокрЛП(МобильноеУстройство.Наименование) + """ (идентификатор моб. устройства: """ + СокрЛП(ИдКПК) + """) !");
		Возврат;
	КонецЕсли;
	
	Объект.СпособОбмена = АгентПлюсСОД;
	
	Если ЗагрузитьДанныеСАПСервера(ИдКПК) Тогда
		ОповеститьОСобытии("Данные от агента: " + ВыбАгент + " успешно загружены");	
	КонецЕсли;      	
	
КонецПроцедуры //ОбработатьВнешнееСобытиеОтАПС

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Источник <> "APServer" Тогда
		Возврат;
	КонецЕсли;
	 
	// Поступило оповещение от Агент Плюс СОД
	
	Если Событие = "NewDataFromServer" Тогда //пришли данные от пользователя КПК на сервер
		
		Спис = Новый СписокЗначений;
		Стр = Сред(Данные, 2) + ",""";
		Спис = апСерверМодуль.ИзСтрокиВСписок(Стр, """,""");
		
		// В списке следующие значения:
		//0-й - идентификатор КПК
		//1-й - псевдоним торгвого агента (владельца КПК)
		//2-й - директория обмена данными 
		//3-й - имя полученного с КПК файла с директорией
		//4-й - время сеанса
		//5-й - контрольная сумма полученного файла
		
		ИдКПК = Спис.Получить(0);
		Псевдоним = Спис.Получить(1);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("**************************************************************************");
		ТекстСообщения = Строка(ТекущаяДата()) + ": поступили данные от агента: """ + СокрЛП(Псевдоним) + """ (Идентификатор моб. устройства: " + СокрЛП(ИдКПК) + ")";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ОбработатьВнешнееСобытиеОтАПС(ИдКПК.Значение);
		
		КПКОбъектServer.АпсПроцессЗавершен(ИдКПК.Значение)
				
	КонецЕсли;

КонецПроцедуры //ВнешнееСобытие

&НаКлиенте
Процедура АвтообменПриИзменении(Элемент)
	
	НастроитьАвтообменАПС();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокЗагруженныхДокументовНажатие(Элемент)

	ПараметрыФормы = Новый Структура("Агент, День", ВыбАгент, ТекущаяДата());
	ФормаСписка = ПолучитьФорму("РегистрСведений.апЗагруженныеДокументы.ФормаСписка", ПараметрыФормы, ЭтаФорма, "апЗагруженныеДокументы");
	ФормаСписка.Открыть();	
	
КонецПроцедуры

&НаКлиенте   
// Процедура заполняет таблицу Агент Плюс СОД
//
Процедура ЗаполнитьТаблицуАгентПлюсСОД() Экспорт
	
	Объект.ТабАПСервер.Очистить();
	
	#Если Не Клиент Тогда
	//	ПапкаОбмена = КПКОбъектServer.GetExchangeDir();			
		ПапкаОбмена = "";
	#Иначе
		ПапкаОбмена = КПКОбъектServer.АпсПапкаОбмена();			
	#КонецЕсли
	
	Если Не ЗначениеЗаполнено(ПапкаОбмена) Тогда	    		
		Если Не ЗначениеЗаполнено(ПапкаСервера) Тогда
		    ТекстСообщения = "Не установлена константа ""Папка обмена"" для Агент Плюс СОД! Получение данных от агента невозможно!";
			ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Внимание, Ложь);
			Возврат;
		Иначе
			ПапкаОбмена = ПапкаСервера;
		КонецЕсли;
	КонецЕсли;	
	
	//	КПКОбъектServer.SetExchangeDir(ПапкаОбмена);				
	КПКОбъектServer.АпсУстПапкуОбмена(ПапкаОбмена);												
	
	Спис = Новый СписокЗначений;
	
	ГотовоАгентов = 0;
	
	//	КолКПК = КПКОбъектServer.GetPPCCount();	
	КолКПК = КПКОбъектServer.АпсПолучитьКоличествоКПК();				
	
	СчетчикЦикла = 0;
	Для Поз = 0 По КолКПК - 1 Цикл
		
		//	СтрИнфо = КПКОбъектServer.GetPPCInfoByIndex(Поз);	
		СтрИнфо = КПКОбъектServer.АпсПолучитьКПКИнфо(Поз);						
		
		Если Не ЗначениеЗаполнено(СтрИнфо) Тогда
			Продолжить;
		КонецЕсли;
		
		Стр = Сред(СтрИнфо, 2) + ",""";
		Спис = апСерверМодуль.ИзСтрокиВСписок(Стр, """,""");
		// В списке следующие значения:
		//0-й - иденифмкато КПК
		//1-й - псевдоним торгвого агента (владельца КПК)
		//2-й - директория обмена данными 
		//3-й - имя полученного с КПК файла с директорией
		//4-й - время сеанса
		//5-й - контрольная сумма полученного файла
		ИдКПК = Спис.Получить(0).Значение;		
		
		МобильноеУстройство = ПолучитьМобильноеУстройствоПоИдентификатору(ИдКПК); 
		
		Если Не ЗначениеЗаполнено(МобильноеУстройство) Тогда
			ОповеститьОСобытии("В справочнике ""Мобильные устройства"" не найдено мобильное устройство с идентификатором: """ + СокрЛП(ИдКПК) + """!");				
			Продолжить;
		КонецЕсли;
		
		НайденныйАгент = ПолучитьНастройкиАгентаПоУстройству(МобильноеУстройство);
		
		Если Не ЗначениеЗаполнено(НайденныйАгент) Тогда
			ОповеститьОСобытии("В справочнике ""Настройки торговых представителей"" не найден агент для мобильного устройства: """ + СокрЛП(МобильноеУстройство) + """!");				
			Продолжить;
		КонецЕсли;
       		
		СтрокаТаб = Объект.ТабАПСервер.Добавить();
		СтрокаТаб.Агент = НайденныйАгент;
		СтрокаТаб.Папка	= Спис.Получить(2).Значение;
		ФайлДанных 	    = Спис.Получить(3).Значение;
		
		Сч = 0;
		Если ЗначениеЗаполнено(ФайлДанных) Тогда   
			ВремяСеансаXML = Спис.Получить(4).Значение;
			СтрокаТаб.ЕстьДанные    = Истина;
			СтрокаТаб.Пометка       = Истина;						
			СтрокаТаб.ДатаПолучения = ДатаВремяXMLВФормат1С(ВремяСеансаXML);   			
			Сч = Сч + 1;
		Иначе
			СтрокаТаб.Пометка   	 = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Сч = 0 Тогда
	    ТекстСообщения = "Таблица обновлена. Новых данных от агентов не поступило";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Ложь);
	Иначе		
		ТекстСообщения = "Таблица обновлена. Готов к загрузке данных от " + Строка(Сч) + " агентов";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Ложь);
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьТаблицуАгентПлюсСОД()

&НаКлиенте
Процедура ЗаполнитьТаблицуАПС(Команда)
	
	ЗаполнитьТаблицуАгентПлюсСОД();
	
КонецПроцедуры

&НаСервере 	
Функция ПолучитьСтруктуруНастроек()
	
	ПапкаОбмена  = СокрЛП(Константы.апПапкаОбменаСОД.Получить());
	АдресСервера = СокрЛП(Константы.апАдресСервера.Получить());	
	НомерПорта   = Константы.апПортАгентПлюсСОД.Получить();
	
	СтруктураНастроек = Новый Структура("Адрес, Порт, Папка", АдресСервера, НомерПорта, ПапкаОбмена);
	
	Возврат СтруктураНастроек;
	
КонецФункции  

&НаКлиенте
Процедура ГенерацияФайлаНастроек(Команда)
	
	СтруктураНастроек = ПолучитьСтруктуруНастроек();
	
	ФайлНастроек = апСерверМодуль.СгенерироватьФайлаНастроекАгентПлюсСОД(СтруктураНастроек);	
	
	Если Не ПустаяСтрока(ФайлНастроек) Тогда
		апКлиент.ЗадатьВопросПерезапускаАгентПлюсСОД(ФайлНастроек);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОбменаПриИзменении(Элемент)
	
	НастроитьФормуПриИзмененииСпособаОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуПриИзмененииСпособаОбмена()
	
	Если Объект.СпособОбмена = АгентПлюсСОД Тогда		
		НастроитьАвтообменАПС();
	Иначе
		Если Объект.флАвтоОбмен Тогда
			Объект.флАвтоОбмен = Ложь;
			НастроитьАвтообменАПС();
		КонецЕсли;					
	КонецЕсли;    	
	
	НастроитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаДокументовНажатие(Элемент)
	
	Объект.СписокУдаляемыхДок.СортироватьПоПредставлению();
	Объект.СписокУдаляемыхДок.ОтметитьЭлементы("Очищаемые документы");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСправочниковНажатие(Элемент)
	
	Объект.СписокУдаляемыхСпр.СортироватьПоПредставлению();
	Объект.СписокУдаляемыхСпр.ОтметитьЭлементы("Очищаемые справочники"); 
		
 КонецПроцедуры
 
 &НаКлиенте
Процедура НастройкаДополнительныеДанныеНажатие(Элемент)
	//Объект.СписокПередаваемыхДополнительныхДанных.СортироватьПоПредставлению();
	Объект.СписокПередаваемыхДополнительныхДанных.ОтметитьЭлементы("Передаваемые данные");
КонецПроцедуры

 
&НаСервере
Функция ПолучитьСписокАгентовДляФТП()
	
	СписокАгентов = Новый СписокЗначений;
	
	Выборка = ПланыОбмена.апМобильноеПриложениеТорговыйПредставитель.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПометкаУдаления или Не ЗначениеЗаполнено(Выборка.Пользователь) или Не ЗначениеЗаполнено(Выборка.апПапкаФТП) Тогда			
			Продолжить; 
		КонецЕсли;
				
		Стр = Новый Структура("Агент, Папка", Выборка.Ссылка, СокрЛП(Выборка.апПапкаФТП));
		
		СписокАгентов.Добавить(Стр);
		
	КонецЦикла;
	
	Возврат СписокАгентов;
	
КонецФункции //ПолучитьСписокАгентовДляФТП()    

&НаСервере
Процедура СформироватьТаблицуФТП() Экспорт
	 
	Объект.ТабФТП.Очистить();
	
	ПодключениеКФТП = СоздатьПодключениеКФТП();
	
	Если ПодключениеКФТП = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Объект.флАрхив Тогда
	    ИмяФайла = "To1C.zip";
	Иначе
		ИмяФайла = "To1C.xml";
	КонецЕсли;

	Обработано = 0;
	ГотовоАгентов = 0;
	
	СписокАгентов = ПолучитьСписокАгентовДляФТП();	
	
	Для Каждого СтрокаСписка Из СписокАгентов Цикл
		
		Стр = СтрокаСписка.Значение;
		
		ТекАгент = Стр.Агент;
		Папка    = Стр.Папка;
		
		ИмяФайла = "To1C.zip";
		
		НовСтр =  Объект.ТабФТП.Добавить();
		НовСтр.Агент = ТекАгент;
		НовСтр.Папка = Папка;
		
		Если (Прав(Папка,1) <> "\") Или (Прав(Папка,1) <> "/") Тогда
		    Папка = Папка + "/";
		КонецЕсли;
		
		ИмяФайла = Папка + ИмяФайла; // регистр важно соблюдать, т.к. на UNIX-FTP серверах регистр 
									 // в имени файла имеет значение!!!
		
		Обработано = Обработано + 1;
		
		// Проверяем существование каталога
		МассивНайденныхФайлов = ПодключениеКФТП.НайтиФайлы(Папка);						
		Если МассивНайденныхФайлов.Количество() = 0 Тогда
			НовСтр.Пометка = Ложь;
			Продолжить;
		КонецЕсли;
		
		// Ищем нужный файл
		МассивНайденныхФайлов = ПодключениеКФТП.НайтиФайлы(Папка, "To1C.*");								
		Если МассивНайденныхФайлов.Количество() = 0 Тогда
			НовСтр.Пометка    = Ложь;
			Продолжить;			
		Иначе
			НовСтр.ЕстьДанные 	 = Истина;
			НовСтр.Пометка    	 = Истина;
			НовСтр.ДатаПолучения = ТекущаяДата();
			ГотовоАгентов     	 = ГотовоАгентов + 1;			
		КонецЕсли;		
	КонецЦикла;    	
	
	Если ГотовоАгентов = 0 Тогда
		ТекстСообщения = "Таблица обновлена. Новых данных от агентов не поступило.";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Ложь);		
	Иначе
		ВыбАгент = 0;
		ТекстСообщения = "Таблица обновлена. Готов к загрузке данных от " + Строка(ГотовоАгентов) + " агентов.";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Информация, Ложь);		
	КонецЕсли;

 КонецПроцедуры
 
&НаКлиенте
Процедура ЗаполнитьТаблицуФТП(Команда)
	 
	СформироватьТаблицуФТП();

 КонецПроцедуры

&НаКлиенте
Процедура ВыбАгентПриИзменении(Элемент)
	
	УстановитьНастройкиАгента();
	 
КонецПроцедуры

&НаКлиенте
Процедура Флажки(ТипДействия = "Установить", Таблица)
	
	Для Каждого СтрокаТаб Из Объект[Таблица] Цикл
		Если ТипДействия = "Установить" Тогда
			СтрокаТаб.Пометка = Истина;
		Иначе
			СтрокаТаб.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;	
	 
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиСОД(Команда)
	
	Флажки("Установить", "ТабАПСервер");
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьФлажкиСОД(Команда)
	
	Флажки("Снять", "ТабАПСервер");

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиФТП(Команда)
	
	Флажки("Установить", "ТабФТП");
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьФлажкиФТП(Команда)
	
	Флажки("Снять", "ТабФТП");
	
КонецПроцедуры

&НаКлиенте
Процедура флСтартовыеНомераДокументовПриИзменении(Элемент)
	НастроитьВидимостьДоступностьЭлементов();
КонецПроцедуры
              
&НаСервере
Процедура ДополнитьСтрокуНулямиСлева(Строка, ДлинаСтроки)
	
	Строка = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Строка, ДлинаСтроки, "0", "Слева");
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтрокуНулямиСправа(Строка, ДлинаСтроки)
	
	Строка = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Строка, ДлинаСтроки, "0", "Справа");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПрефикс(Источник, Префикс, УстановитьПрефиксИнформационнойБазы, УстановитьПрефиксОрганизации)
	
	ПрефиксИнформационнойБазы = "";
	ПрефиксОрганизации        = "";
	
 //   Если УстановитьПрефиксИнформационнойБазы
 //   	И ПрефиксацияОбъектовПовтИсп.ЕстьФункциональнаяОпцияПрефиксИнформационнойБазы() Тогда
 //   	
 //   	ПрефиксИнформационнойБазы = ПолучитьФункциональнуюОпцию("ПрефиксИнформационнойБазы");
 //   	
 //   	ДополнитьСтрокуНулямиСлева(ПрефиксИнформационнойБазы, 2);
 //   	
 //   КонецЕсли;
 //   
 //   Если УстановитьПрефиксОрганизации
 //   	И ПрефиксацияОбъектовПовтИсп.ЕстьФункциональнаяОпцияПрефиксыОрганизаций() Тогда
 //   	
 //   	ПрефиксОрганизации = ПолучитьФункциональнуюОпцию("ПрефиксыОрганизаций", Новый Структура("Организация", Источник.Организация));
 //   	
 //   	// если задана пустая ссылка на организацию
 //   	Если ПрефиксОрганизации = Ложь Тогда
 //   		
 //   		ПрефиксОрганизации = "";
 //   		
 //   	КонецЕсли;
 //   	
 //   	ДополнитьСтрокуНулямиСлева(ПрефиксОрганизации, 2);
 //   	
 //   КонецЕсли;
 //
 //   ОсновнойПрефикс = ПрефиксОрганизации + ПрефиксИнформационнойБазы;
 //   
 //   Разделитель = ?(ПустаяСтрока(ОсновнойПрефикс), "", "-");
 //   
 //   Префикс = ОсновнойПрефикс + Разделитель + Префикс;
	
	// если префикс не задан, то устанавливаем значение по умолчанию
	Если ПустаяСтрока(Префикс) Тогда		
		Префикс = "0";              		
	КонецЕсли;
	
	Возврат Префикс;
	
КонецФункции                     

&НаСервере
//Процедура скопирована из общего модуля ПрефиксацияОбъектовСобытия и преобразована в функцию 
Функция УстановитьПрефикс(Источник, Префикс, УстановитьПрефиксИнформационнойБазы, УстановитьПрефиксОрганизации)
	
	ПрефиксИнформационнойБазы = "";
	ПрефиксОрганизации        = "";
	
	//Если УстановитьПрефиксИнформационнойБазы
	//	И ПрефиксацияОбъектовПовтИсп.ЕстьФункциональнаяОпцияПрефиксИнформационнойБазы() Тогда
	//	
	//	ПрефиксИнформационнойБазы = ПолучитьФункциональнуюОпцию("ПрефиксИнформационнойБазы");
	//	
	//	ДополнитьСтрокуНулямиСлева(ПрефиксИнформационнойБазы, 2);
	//	
	//КонецЕсли;
	//
	//Если УстановитьПрефиксОрганизации
	//	И ПрефиксацияОбъектовПовтИсп.ЕстьФункциональнаяОпцияПрефиксыОрганизаций() Тогда
	//	
	//	//Если РеквизитОрганизацияДоступен(Источник) Тогда
	//		
	//		ПрефиксОрганизации = ПолучитьФункциональнуюОпцию("ПрефиксыОрганизаций", Новый Структура("Организация", Источник.Организация));
	//		
	//		// если задана пустая ссылка на организацию
	//		Если ПрефиксОрганизации = Ложь Тогда
	//			
	//			ПрефиксОрганизации = "";
	//			
	//		КонецЕсли;
	//		
	//	//КонецЕсли;		
	//	
	//	ПрефиксОрганизации = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ПрефиксОрганизации, 2, "0", "Слева")
	//	
	//КонецЕсли;
	//
	ОсновнойПрефикс = ПрефиксОрганизации + ПрефиксИнформационнойБазы;
	
	Разделитель = "-";
	
	Префикс = ОсновнойПрефикс + Разделитель + Префикс;
	
	Возврат Префикс; 
КонецФункции

&НаСервере
// Предназначена для заполнения таблицы стартовых номеров 
// нумераторов в закладке "Стартовые номера". Значения этой
// таблицы выгружаются в файле выгрузки в процедуре 
// ВыгрузкаСтартовыхНомеровНумераторов()    
//  Стартовый номер для каждого нумератора автоматически определяется путем
//	имитации создания нового документа в ЦБД, к которому прикреплен нумератор.
//
Процедура ЗаполнитьТаблицуСтартовыхНомеров()
	
	Перем ВидДок1С;
	
	СпрОрганизации = Справочники.Организации;
	
	Объект.ТабСтартовыеНомера.Очистить();
	
	Если ВыбАгент.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбран торговый агент на форме!", , "ВыбАгент");
		Возврат;	
	КонецЕсли;
	
	ТабНумераторов = ПолучитьТаблицуНумераторов();
	
	Для Каждого СтрокаТаб Из ТабНумераторов Цикл
		
		Док = Документы[СтрокаТаб.ИмяДокумента].СоздатьДокумент();
		Док.Дата = ТекущаяДата();
		
		НомерУстановлен = Ложь;
		
		//в цикле ниже определяем первый свободный номер в ЦБД с префиксом для каждой фирмы
		//все полученные свободные номера заносятся в таблицу значений
		ВыборкаОрганизации = СпрОрганизации.Выбрать();
		
		Пока ВыборкаОрганизации.Следующий() Цикл
			
			Если ВыборкаОрганизации.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ИспользоватьУправленческуюОрганизацию И ВыборкаОрганизации.Ссылка = Справочники.Организации.УправленческаяОрганизация Тогда
				Продолжить;
			КонецЕсли;			
			
			НужныйПрефикс = СокрЛП(ВыбАгент.апПрефиксНомеров);						
			
			                   			
			Док.Организация = ВыборкаОрганизации.Ссылка;
			
			лПрефикс = "";
			 			
			Док.УстановитьНовыйНомер(НужныйПрефикс); 	
			 					
			//НужныйНомер = СтрЗаменить(Док.Номер, лПрефикс, НужныйПрефикс);
			    						 						
			СтартНомерДок = Док.Номер;
			
			//Получили стартовый номер документа для нумератора с учетом префикса организации			
			Стр 			   = Объект.ТабСтартовыеНомера.Добавить();
			Стр.Нумератор 	   = СтрокаТаб.Нумератор;			
			Стр.Организация    = ВыборкаОрганизации.Ссылка;
			Стр.СтартовыйНомер = СтартНомерДок;
			
			Префикс = Лев(СтартНомерДок, 7);
			Стр.Префикс = Префикс;
			Стр.СтартовыйНомер = Прав(СтартНомерДок, СтрДлина(СтартНомерДок)-СтрДлина(Префикс));
			
			
			//префикс и номер поместим в отдельные колонки
			//ОкончательныйПрефикс = УстановитьПрефикс(Док, НужныйПрефикс, Истина, Истина);			
			//Стр.СтартовыйНомер = Прав(СтартНомерДок, СтрДлина(СтартНомерДок)-СтрДлина(ОкончательныйПрефикс));
			//Стр.Префикс		   = ОкончательныйПрефикс; 			
			
			НомерУстановлен = Истина;
			
		КонецЦикла;
		
		Если Не НомерУстановлен Тогда
			Док.УстановитьНовыйНомер();
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуСтартовыхНомеров()

&НаКлиенте
Процедура ОбновитьНумераторы(Команда)
	ЗаполнитьТаблицуСтартовыхНомеров();
КонецПроцедуры

&НаКлиенте
Процедура НумераторыСНачала(Команда)
		
	Если Вопрос("Установить все стартовые номера в начало отсчета?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого Стр Из Объект.ТабСтартовыеНомера Цикл
		//СтартНом = Стр.СтартовыйНомер;
		СтартНом = СокрЛП(Стр.Префикс) + СокрЛП(Стр.СтартовыйНомер);
		ДлинаНом = СтрДлина(СтартНом);
		НовыйНомер = "";
		
		//Просматриваем номер справа налево	и заменяем все цифры на знак "0" (кроме последней цифры)
		Для Поз = 0 По ДлинаНом - 1  Цикл
			ПозСимв = ДлинаНом - Поз;
			КодС = КодСимвола(Сред(СтартНом,ПозСимв,1));
			Если (КодС < 48) Или (КодС > 57) Тогда
				Прервать; //номерная часть закончилась
			КонецЕсли;
			Если Поз = 0 Тогда
				НовыйНомер = "1";
			Иначе
				НовыйНомер = "0" + НовыйНомер;
			КонецЕсли;
		КонецЦикла; //Для Поз = 0 По ДлинаНом - 1  Цикл
		
		Если ПозСимв <> 0 Тогда
			НовыйНомер = Лев(СтартНом,ПозСимв) + НовыйНомер;
		КонецЕсли;
		
		Стр.СтартовыйНомер = Прав(НовыйНомер, СтрДлина(НовыйНомер) - СтрДлина(Стр.Префикс));
	КонецЦикла;	//Для Каждого Стр Из Объект.ТабСтартовыеНомера Цикл	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиСтартовыеНомера(Команда)
	
	Флажки("Установить", "ТабСтартовыеНомера");
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьФлажкиСтартовыеНомера(Команда)
	
	Флажки("Снять", "ТабСтартовыеНомера");

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьРеквизитовДляВыгрузкиЗаданий()
	Элементы.НачДатаВыгрузкиЗаданий.Видимость 				= Объект.флВыгружатьЗадания;
	Элементы.КонДатаВыгрузкиЗаданий.Видимость 				= Объект.флВыгружатьЗадания;
	Элементы.КнопкаУстановитьИнтервалДляЗаданий.Видимость 	= Объект.флВыгружатьЗадания;
	
	Если Объект.НачДатаВыгрузкиЗаданий = Дата(1,1,1) Тогда
		Объект.НачДатаВыгрузкиЗаданий = ТекущаяДата();
	КонецЕсли;
	
	Если Объект.КонДатаВыгрузкиЗаданий = Дата(1,1,1) Тогда
		Объект.КонДатаВыгрузкиЗаданий = ТекущаяДата();
	КонецЕсли;
	
	Элементы.флВыгружатьЗадания.Заголовок = ?(Объект.флВыгружатьЗадания, "Выгружать задания за период с:", "Выгружать задания");	
КонецПроцедуры

&НаКлиенте
Процедура флВыгружатьЗаданияПриИзменении(Элемент)
	УстановитьВидимостьРеквизитовДляВыгрузкиЗаданий();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервалВыгрузкиЗаданий(Команда)
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	
	Диалог.Период.ДатаНачала    = Объект.НачДатаВыгрузкиЗаданий;
	Диалог.Период.ДатаОкончания = Объект.КонДатаВыгрузкиЗаданий;
	
	Если Диалог.Редактировать() Тогда 		
		Объект.НачДатаВыгрузкиЗаданий = Диалог.Период.ДатаНачала;
		Объект.КонДатаВыгрузкиЗаданий = Диалог.Период.ДатаОкончания;		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция РазложитьСтрокуНаМассивПодстрок(Знач Строка, Разделитель = ";", ПропускатьПустыеСтроки = Истина)
	
	Результат = Новый Массив;
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПустаяСтрока(Подстрока) или не ПропускатьПустыеСтроки Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Результат.Добавить(Строка);
	
	Возврат Результат;
		
КонецФункции


//ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ВЫГРУЗКИ ОПРЕДЕЛЕННОГО СПИСКА ДОКУМЕНТОВ В МУ

&НаСервере
Функция ВернутьДанныеДокументаИзРегистра(Док)
	
	СтОтбор = Новый Структура("Документ", Док.Ссылка);
	
	СведДок = РегистрыСведений.апЗагруженныеДокументы.ПолучитьПоследнее(ТекущаяДата(), СтОтбор);
	
	Возврат СведДок; 	
КонецФункции //ВернутьКПКДанныеДокумента()

&НаСервере
Функция ПреобразоватьТаблицуЗначенийВРезультатЗапроса(ТЗ)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СписокСсылок.Док
	               |ПОМЕСТИТЬ ВТТЗ
	               |ИЗ
	               |	&СписокСсылок КАК СписокСсылок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТТЗ.Док КАК Ссылка
	               |ИЗ
	               |	ВТТЗ КАК ВТТЗ";
	
	Запрос.УстановитьПараметр("СписокСсылок", ТЗ); 
	
	ВыборкаДок = Запрос.Выполнить().Выбрать();
	
	Возврат ВыборкаДок; 
КонецФункции

&НаСервере
Процедура ВыгрузитьКассовыеДокументы(ВидДокументов, СписокСсылок)
	ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENT");
	
	Если ВидДокументов = "ПКО" Тогда
		ИдДок = "749be2e0-9b00-4d7b-9d4d-88ca53327511";	
	
		ДобавитьПоле("GUID", ИдДок);
		
		ДобавитьПоле("Comment", "Документ.ПКО");
	ИначеЕсли ВидДокументов = "РКО" Тогда
		ИдДок = "3890d435-96ba-4481-abc0-23782e15b32f";	
	
		ДобавитьПоле("GUID", ИдДок);
		
		ДобавитьПоле("Comment", "Документ.РКО");	
	КонецЕсли;
		
	УстановитьПризнакОчисткиДокумента(ИдДок);
	
	ВыборкаДок = СписокСсылок;
	
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
			Пока ВыборкаДок.Следующий() Цикл
	
	        	#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
				#КонецЕсли
				
				Док = ВыборкаДок.Ссылка;
				
				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейДокумента(Док);
				
				СтруктураПолей.Вставить("A01",  	 Док.Организация);
				СтруктураПолей.Вставить("A02",  	 Док.Контрагент.Партнер);
				СтруктураПолей.Вставить("A03",  	 Док.Контрагент);
				//СтруктураПолей.Вставить("A04",  	 Док.ДоговорКонтрагента);
				СтруктураПолей.Вставить("A06",  	 Док.Комментарий);
				СтруктураПолей.Вставить("A07",  	 Док.СуммаДокумента);  	
				СтруктураПолей.Вставить("A09",  	 Док.ДокументОснование);
	             	            
				ДанныеДок = ВернутьДанныеДокументаИзРегистра(Док);
				Если Не ДанныеДок = Неопределено Тогда
					СтруктураПолей.Вставить("A011",  	 ДанныеДок.Категория);
					СтруктураПолей.Вставить("A012",  	 ДанныеДок.Широта);
					СтруктураПолей.Вставить("A013",  	 ДанныеДок.Долгота);
				КонецЕсли;
				
				ВключитьДополнительныйЭлементСправочникаВМассив(Док.Организация);
				ВключитьДополнительныйЭлементСправочникаВМассив(Док.Контрагент.Партнер);
				ВключитьДополнительныйЭлементСправочникаВМассив(Док.Контрагент);
				
				ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
	  				
			КонецЦикла;
			
	    ДокОбмена.ЗаписатьКонецЭлемента();  // ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента();      // DOCUMENT
КонецПроцедуры

// Процедура производит заполенение одинаковых реквизитов шапки для документов
//
// Добавлена 14.06.2007
//
Процедура ЗаполнитьОсновныеПараметрыДокумента(Док, СтруктураДокКПК, Менеджер, СтруктураПолей, ТипОперации) Экспорт
	
	ИдФирмы   	= СтруктураДокКПК.ИдФирмы;
	ИдКлиента 	= СтруктураДокКПК.ИдКлиента;
	ИдТоргТочки = СтруктураДокКПК.ИдТоргТочки;
	ИдДоговора  = СтруктураДокКПК.ИдДоговора;
	ВидДок 		= СтруктураДокКПК.ВидДокумента;
	НомерДок    = Строка(СтруктураДокКПК.Номер);  
	ДатаДок 	= СтруктураДокКПК.Дата;
	Комментарий = СтруктураДокКПК.Комментарий;
	
	ПредставлениеДокВКПК = ВидДок + " № " + НомерДок + " от " + ДатаДок;
		
	//ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Док, ТекПользователь, мВалютаРегламентированногоУчета, ТипОперации);
		
	Если СтруктураПолей.Свойство("Организация") Тогда
		// Получаем организацию из документа
		Если ЭтоПустойИдентификатор(ИдФирмы) Тогда			
			ОповеститьОСобытии("В документе: " + ПредставлениеДокВКПК + " не указана фирма!", СтатусСообщения.Внимание);      
		Иначе		
			Организация = ПолучитьСсылкуИзСправочника(ИдФирмы, "Организации");			
			Если Док.Метаданные().Реквизиты.Найти("Организация") <> Неопределено Тогда
				Док.Организация = Организация;
			КонецЕсли;
		КонецЕсли;    		
	КонецЕсли;
	
	Если СтруктураПолей.Свойство("МаршрутРазвоза") Тогда
		Если Док.Метаданные().Реквизиты.Найти("МаршрутРазвоза") <> Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(Док.МаршрутРазвоза) Тогда
				Док.МаршрутРазвоза = Справочники.МаршрутыРазвоза.ПустойМаршрут;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПолей.Свойство("Подразделение") Тогда
		
		Если Док.Метаданные().Реквизиты.Найти("Подразделение") <> Неопределено Тогда
			Док.Подразделение = ВыбАгент.Менеджер.Подразделение;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураПолей.Свойство("Контрагент") Тогда		
		// Получаем контрагента из документа
		Если ЭтоПустойИдентификатор(ИдКлиента) Тогда			
			ОповеститьОСобытии("В документе: " + ПредставлениеДокВКПК + " не указан контрагент!", СтатусСообщения.Внимание);
		Иначе	
			Контрагент = ПолучитьСсылкуИзСправочника(ИдКлиента, "Контрагенты");
			Если Док.Метаданные().Реквизиты.Найти("Контрагент") <> Неопределено Тогда
				Док.Контрагент = Контрагент;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;     	
	
	Если СтруктураПолей.Свойство("Менеджер") Тогда	
		Если Док.Метаданные().Реквизиты.Найти("Менеджер") <> Неопределено Тогда
			Док.Менеджер = ВыбАгент.Менеджер;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПолей.Свойство("ТипЦен") Тогда	
		Если Док.Метаданные().Реквизиты.Найти("ТипЦен") <> Неопределено Тогда
			Док.ТипЦен = Док.Контрагент.ТипЦен;
		КонецЕсли;
	КонецЕсли;

	
	//Если СтруктураПолей.Свойство("ДоговорКонтрагента") Тогда			
	//	Если Константы.кпкИспользоватьДоговоры.Получить() Тогда
	//		// Получаем договор из документа
	//		Если ЭтоПустойИдентификатор(ИдДоговора) Тогда			
	//			ОповеститьОСобытии("В документе: " + ПредставлениеДокВКПК + " не указан договор! Будет проставлен договор по умолчанию!", СтатусСообщения.Внимание);				
	//		Иначе	
	//			ДоговорКонтрагента = ПолучитьСсылкуИзСправочника(ИдДоговора, "ДоговорыКонтрагентов");				
	//			Если Док.Метаданные().Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено Тогда
	//				Док.ДоговорКонтрагента = ДоговорКонтрагента;
	//			КонецЕсли;
	//		КонецЕсли;                                         
	//	Иначе
	//		Док.ДоговорКонтрагента = Док.Контрагент.ОсновнойДоговорКонтрагента;
	//	КонецЕсли;	 				
	//КонецЕсли;  	
	
	    	
	
	Если Док.Метаданные().Реквизиты.Найти("Агент") <> Неопределено Тогда
		Док.Агент = ВыбАгент;
	КонецЕсли; 	
	
	Если Док.Метаданные().Реквизиты.Найти("Комментарий") <> Неопределено Тогда
		Док.Комментарий = Комментарий;
	КонецЕсли;
	
	Если Не Док.Проведен Тогда
		Док.Дата = ТекущаяДата();
	КонецЕсли;
	
	Если Док.Метаданные().Реквизиты.Найти("Комментарий") <> Неопределено Тогда
		Док.Комментарий = Комментарий;
	КонецЕсли;
	
	//ИспАвтонумерациюЦБД	= Константы.кпкИспользоватьАвтонумерациюДокументовВЦБД.Получить();
	
	//Если ЗначениеЗаполнено(НомерДок) И (Не ИспАвтонумерациюЦБД) Тогда
	//	Если Менеджер.НайтиПоНомеру(НомерДок, ТекущаяДата()) = Менеджер.ПустаяСсылка() Тогда	
	//		Док.Номер = НомерДок;	
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если СтруктураДокКПК.Свойство("ТипЦен") Тогда
	//	Если Док.Метаданные().Реквизиты.Найти("ТипЦен") <> Неопределено Тогда
	//		ТипЦены = ПолучитьСсылкуИзСправочника(СтруктураДокКПК.ТипЦен, "ТипыЦенНоменклатуры");								
	//		Док.ТипЦен 	= ТипЦены;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если СтруктураДокКПК.Свойство("СуммаДокумента") Тогда
	//	Если Док.Метаданные().Реквизиты.Найти("СуммаДокумента") <> Неопределено Тогда
	//		Док.СуммаДокумента 	= СтруктураДокКПК.СуммаДокумента;
	//	КонецЕсли;
	//КонецЕсли;
		
КонецПроцедуры //ЗаполнитьОсновныеПараметрыДокумента()

// Функция преобразовывает дату из формата XML в дату формата 1С
// для переданного элемента таблицы XML
// Параметры:
//  Эл - элемент XML-таблицы
//  Рекв - название реквизита, который нужно преобразовать
//
//Возвращаемое значение:
//  Дата
//
// Добавлена 14.06.2007
//      
Функция ДатаИзXML(Эл, Рекв) Экспорт
	
	_Дата = Эл.ПолучитьАтрибут(Рекв);
	_Дата = СтрЗаменить(_Дата, "-", "");
	_Дата = СтрЗаменить(_Дата, " ", "");
	
	Возврат Дата(_Дата);
	
КонецФункции //ДатаИзXML()

// Функция определяет соответствие видов документа в КПК и ИБ
//
//Возвращаемое значение:
//  Строка с названием вида документа
//
// Добавлена 14.06.2007
// 
Функция ВернутьВидДокументаДляКПК(Вид) Экспорт
	
	Если Вид = "Order" Тогда
		Возврат "Заявка";
	////////ИначеЕсли Вид = "Sale" Тогда
	////////	Возврат "Реализация";
	//////ИначеЕсли Вид = "RSale" Тогда
	//////	Возврат "Реализация розничная";
	ИначеЕсли Вид = "Cash" Тогда
		Возврат "Кассовый ордер";
	//////ИначеЕсли Вид = "Merch" Тогда
	//////	Возврат "Мерчендайзинг";
	//////ИначеЕсли Вид = "Visit" Тогда
	//////	Возврат "Посещение";
	ИначеЕсли Вид = "Arrival" Тогда
		Возврат "Поступление";
	//////ИначеЕсли Вид = "Inventory" Тогда
	//////	Возврат "Инвентаризация";
	//////ИначеЕсли Вид = "Task" Тогда
	//////	Возврат "Задание агента";
	КонецЕсли;
	
	Возврат "<Неопределен>";
	
КонецФункции //ВернутьВидДокументаДляКПК()



// Функция возвращает структуру параметров документа в КПК.
// Элементы структуры содержит общие параметры документов в КПК.
//
Функция ПолучитьСтруктуруПараметровДокументаВКПК(XMLДок)
	
	СтруктураПараметров = Новый Структура("ВидДокумента, Номер, Дата, ДатаФорма, ИдДок, СостДок, СпособСоздания," + 
										  "ИдФирмы, ИдКлиента, ИдТоргТочки, ИдДоговора, ИдМаршрута, СуммаДок, Комментарий," + 
										  "ВидОплаты, ИдДокОсн, Широта, Долгота");
	  		
	ВидДок    = ВернутьВидДокументаДляКПК(XMLДок.ПолучитьАтрибут("DocType"));	
	
	Дата      = ДатаИзXML(XMLДок, "TimeCrt");
	ДатаФорма = ДатаИзXML(XMLДок, "TimeCrtForm");
	
	Попытка
		Широта  = Число(XMLДок.ПолучитьАтрибут("GPSLatitude")); 
		Долгота = Число(XMLДок.ПолучитьАтрибут("GPSLongitude"));		
	Исключение
		Широта  = 0; 
		Долгота = 0; 		
	КонецПопытки; 	
	
	СтруктураПараметров.ВидДокумента   = ВидДок;
	СтруктураПараметров.Дата	 	   = Дата;
	СтруктураПараметров.ДатаФорма	   = ДатаФорма; 	
	СтруктураПараметров.Широта	   	   = Широта; 	
	СтруктураПараметров.Долгота	   	   = Долгота; 		
	
	СтруктураПараметров.Номер 	 	   = XMLДок.ПолучитьАтрибут("Num");	
	СтруктураПараметров.ИдДок 		   = СокрЛП(XMLДок.ПолучитьАтрибут("DocID"));
	СтруктураПараметров.СостДок	 	   = Число(XMLДок.ПолучитьАтрибут("DocState"));
	СтруктураПараметров.СпособСоздания = СокрЛП(XMLДок.ПолучитьАтрибут("ModeCrt"));	
	СтруктураПараметров.ИдФирмы 	   = СокрЛП(XMLДок.ПолучитьАтрибут("FirmID"));
	СтруктураПараметров.ИдКлиента	   = СокрЛП(XMLДок.ПолучитьАтрибут("ClientID"));
	СтруктураПараметров.ИдТоргТочки    = СокрЛП(XMLДок.ПолучитьАтрибут("TPointID"));
	СтруктураПараметров.ИдДоговора     = СокрЛП(XMLДок.ПолучитьАтрибут("AgreementID"));
	СтруктураПараметров.ИдМаршрута 	   = СокрЛП(XMLДок.ПолучитьАтрибут("RouteID"));
	СтруктураПараметров.СуммаДок	   = Число(XMLДок.ПолучитьАтрибут("Sum"));
	СтруктураПараметров.Комментарий    = СокрЛП(XMLДок.ПолучитьАтрибут("Comment"));
	СтруктураПараметров.ВидОплаты	   = Число(XMLДок.ПолучитьАтрибут("PmntType"));
	СтруктураПараметров.ИдДокОсн 	   = СокрЛП(XMLДок.ПолучитьАтрибут("MDocID"));
	
	Возврат СтруктураПараметров;
	
КонецФункции //ПолучитьСтруктуруПараметровДокументаВКПК()

Функция СоздатьНовыйДокумент(МенеджерДок, Док, СтруктураДокКПК, ПропуститьЗагрузку)
		
	DocID     = Новый УникальныйИдентификатор(СтруктураДокКПК.ИдДок);
	ДокСсылка = МенеджерДок.ПолучитьСсылку(DocID);
	
	Попытка
		Док 	  = ДокСсылка.ПолучитьОбъект();
	Исключение
		//!"№
		Док = Неопределено;
	КонецПопытки;
	
	Если Док = Неопределено Тогда
		
	//	Если ТипЗнч(МенеджерДок) = Тип("ДокументМенеджер.кпкЗаданиеАгента") Тогда
	//		ТекстСообщения = "Документ ""Задание агента"" с номером " + СтруктураДокКПК.Номер +  
	//						 " от " + Формат(СтруктураДокКПК.Дата, "ДФ=dd.MM.yyyy") + " не найден в базе!";
	//		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное);
	//		ПропуститьЗагрузку = Истина;
	//	Иначе
			
			Док = МенеджерДок;
			
			Синоним = МенеджерДок.ПустаяСсылка().Метаданные().Синоним;
			
			Если Не ВыполнитьОперациюДляОбъекта(Док, "создание") Тогда 									
				ТекстСообщения = "Не удалось создать новый документ """ + Синоним + """!";
				ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное);
				ПропуститьЗагрузку = Истина;			
			КонецЕсли;
			
			Док.УстановитьСсылкуНового(ДокСсылка);	
			
			Возврат Истина;
			
		//КонецЕсли;
		
	Иначе  
		
		//Если Не флОбновлять и ТипЗнч(МенеджерДок) <> Тип("ДокументМенеджер.кпкЗаданиеАгента") Тогда
		Если Не флОбновлять Тогда
			ПропуститьЗагрузку = Истина;			
		КонецЕсли;
		
		Док.Разблокировать();
		
	КонецЕсли;  
	
	Возврат Ложь;
		
КонецФункции // СоздатьНовыйДокумент()

&НаСервере
Функция ЗагрузкаЗаявок(Эл, СтруктураДокКПК)   
	
	
	//Если (ВыбАгент.СоздаватьЗаказыПокупателей = Да) Тогда

	Если ВыбАгент.СоздаватьЗаказыПокупателей Тогда
		Менеджер		= Документы.ЗаказПокупателя;
	Иначе
    	Менеджер 	    = Документы.КпкЗаявка;	
	КонецЕсли;
	
    Док 			   = Неопределено;	
    ПропуститьЗагрузку = Ложь;	
    
    ЭтоНовыйДок = СоздатьНовыйДокумент(Менеджер, Док, СтруктураДокКПК, ПропуститьЗагрузку);
	
	Если ЭтоНовыйДок Тогда
		Док.МаршрутРазвоза = Справочники.МаршрутыРазвоза.ПустойМаршрут;
	КонецЕсли;
    
    Если ПропуститьЗагрузку Тогда
    	Возврат 2;
    КонецЕсли;
    
    СтруктураОбязательныхПолей = Новый Структура("Организация, Подразделение, Контрагент, Договор, Менеджер, ТипЦен, МаршрутРазвоза");
    
    ЗаполнитьОсновныеПараметрыДокумента(Док, СтруктураДокКПК, Менеджер, СтруктураОбязательныхПолей, "Продажа");
    
   	
    Если Не ЭтоНовыйДок Тогда
    	Док.Запасы.Очистить();
	КонецЕсли;
	
	Док.GUI_77 = Эл.ПолучитьАтрибут("DocID");
	
	Док.ДатаДоставки = ИзвлечьДатуИзXML(Эл.ПолучитьАтрибут("TimeDlv"));
	

 //   
 //   РежимВыгрузкиОстатков = Константы.кпкРежимВыгрузкиОстатков.Получить();      
 //   
    Пока Эл.Прочитать() Цикл
    	Если Эл.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
    		Если Эл.Имя = "Line" Тогда
    			СтОтбор = Новый Структура();
    			ИдТовара = Новый УникальныйИдентификатор(СокрЛП(Эл.ПолучитьАтрибут("GdsID")));
    			
 
    			Товар = Справочники.Номенклатура.ПолучитьСсылку(ИдТовара);
				Товар = ПолучитьСсылкуИзСправочника(ИдТовара, "Номенклатура");
    			
    		
    			Если Товар.Пустая() Тогда					
    				ОповеститьОСобытии("Товар с идентификатором: " + СокрЛП(ИдТовара) + " не найден в текущей базе!");
    				Продолжить;
    			КонецЕсли;
    						
    			// Если пересчет не требуется, уберите комментарии с этих строк:
    			Цена 	   = Эл.ПолучитьАтрибут("Price");
    			Стоимость  = Эл.ПолучитьАтрибут("Sum");
    			Количество = Эл.ПолучитьАтрибут("Amnt");
    			Стоимость  = Цена * Количество;
    			Скидка 	   = Эл.ПолучитьАтрибут("Dscnt");
    			СуммаНДС   = Эл.ПолучитьАтрибут("VAT");
    			
				
				// Цены надо заполнять в соответствии с категорией... и учитывать Автоматические скидки
    			Стр = Док.Запасы.Добавить();   			
    			
    			Стр.Номенклатура 	= Товар;
    			Стр.Количество      = Количество;
				Стр.Единица			= Товар.ЕдиницаИзмерения;
				
				СтруктураПараметров = Новый Структура("Номенклатура, ТипЦен, Подразделение, ДатаСреза", Товар, Док.ТипЦен, Док.Подразделение, Док.Дата);
				Стр.Цена      			 = ЦенообразованиеСервер.ВернутьЦенуНоменклатуры(СтруктураПараметров);
				
				Стр.Сумма		 = Стр.Цена*Стр.Количество;
				//Стр.СуммаБезСкидки		 = Стр.Цена*Стр.Количество;
				//Стр.Скидка				= Стр.СуммаБезСкидки * Стр.ПроцентСкидки / 100;
				//Стр.Сумма				= Стр.СуммаБезСкидки - Стр.Скидка;
    			
    			//ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(Стр, Док);				
    			
    			// Заполняем реквизиты табличной части.				
    			//ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(Стр, Док, "ЗаказПокупателя");
    			
    			// Пересчитываем суммы табличных частей
    			//ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(Стр, Док);
    			//ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(Стр, Док);
    			
    	
    			
    		КонецЕсли;
    		
    	ИначеЕсли Эл.Имя = "Doc" Тогда				
    		Прервать;
    	КонецЕсли;
    	
    КонецЦикла;
    
 //   Док.СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(Док, "Товары") + УчетНДС.ПолучитьСуммуДокументаСНДС(Док, "Услуги");
  
    Результат = ЗаписьДокумента(Док, СтруктураДокКПК, ЭтоНовыйДок);
    
    Если Результат = 1 Тогда
 //   	Если РеализацияПоЗаявкам = 2 Тогда
 //   		ВвестиРеализациюНаОснованииЗаявки(Док);
 //   	ИначеЕсли РеализацияПоЗаявкам = 3 Тогда
 //   		ВвестиРеализациюНаОснованииЗаявкиПоРегиструСсылок(Док);
 //   	КонецЕсли;	
    ИначеЕсли Результат = 2 Тогда
    	СообщитьОПропускеДокумента(СтруктураДокКПК)
    КонецЕсли;
    
    Возврат Результат;
	
КонецФункции //ЗагрузкаЗаявок()

&НаСервере
Функция ЗагрузкаПоступлений(Эл, СтруктураДокКПК)   
	
	
	//Если (ВыбАгент.СоздаватьЗаказыПокупателей = Да) Тогда

	Менеджер		= Документы.ВозвратОтПокупателя;
	
    Док 			   = Неопределено;	
    ПропуститьЗагрузку = Ложь;	
    
    ЭтоНовыйДок = СоздатьНовыйДокумент(Менеджер, Док, СтруктураДокКПК, ПропуститьЗагрузку);
	
	
    Если ПропуститьЗагрузку Тогда
    	Возврат 2;
    КонецЕсли;
    
	СтруктураОбязательныхПолей = Новый Структура("Организация, Подразделение, Контрагент, Договор, Менеджер, ТипЦен");

    ЗаполнитьОсновныеПараметрыДокумента(Док, СтруктураДокКПК, Менеджер, СтруктураОбязательныхПолей, "Продажа");
    
   	
	Если ЭтоНовыйДок Тогда
		Док.ДатаСоздания = ТекущаяДата();
	ИначеЕсли Док.Проведен Тогда
		Возврат 2;
	Иначе
    	Док.Запасы.Очистить();
	КонецЕсли;
	
	Док.Дата = КонецДня(ТекущаяДата()) + 60*60;
	
	Док.GUI_77 = Эл.ПолучитьАтрибут("DocID");
	
	ИДДокОсн = СтруктураДокКПК.ИдДокОсн;
	Если НЕ ПустаяСтрока(ИДДокОсн) Тогда
		
		MDocID = Новый УникальныйИдентификатор(ИДДокОсн);
		ДокОсн = Документы.РасходнаяНакладная.ПолучитьСсылку(MDocID);
		
		Если ДокОсн.ПолучитьОбъект() <> Неопределено Тогда
			ДокОсн = ДокОсн.ПолучитьОбъект();
			ДокОсн.Разблокировать();
		КонецЕсли;
		
		Док.ДокОсн = ДокОсн.Ссылка;
		
	КонецЕсли;

	
	//Док.ДатаДоставки = ИзвлечьДатуИзXML(Эл.ПолучитьАтрибут("TimeDlv"));

 //   
 //   РежимВыгрузкиОстатков = Константы.кпкРежимВыгрузкиОстатков.Получить();      
 //   
    СоответствиеСкидок = ЦенообразованиеСервер.ВернутьАвтоматическиеСкидки(Новый Структура("Контрагент", Док.Контрагент));
 
    Пока Эл.Прочитать() Цикл
    	Если Эл.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
    		Если Эл.Имя = "Line" Тогда
    			СтОтбор = Новый Структура();
    			ИдТовара = Новый УникальныйИдентификатор(СокрЛП(Эл.ПолучитьАтрибут("GdsID")));
    			
 
    			Товар = Справочники.Номенклатура.ПолучитьСсылку(ИдТовара);
				Товар = ПолучитьСсылкуИзСправочника(ИдТовара, "Номенклатура");
    			
    		
    			Если Товар.Пустая() Тогда					
    				ОповеститьОСобытии("Товар с идентификатором: " + СокрЛП(ИдТовара) + " не найден в текущей базе!");
    				Продолжить;
    			КонецЕсли;
    						
    			// Если пересчет не требуется, уберите комментарии с этих строк:
    			Цена 	   = Эл.ПолучитьАтрибут("Price");
    			Стоимость  = Эл.ПолучитьАтрибут("Sum");
    			Количество = Эл.ПолучитьАтрибут("Amnt");
    			Стоимость  = Цена * Количество;
    			Скидка 	   = Эл.ПолучитьАтрибут("Dscnt");
    			СуммаНДС   = Эл.ПолучитьАтрибут("VAT");
    			
    			// Цены будем заполнять в соответствии с категорией цен
    			Стр = Док.Запасы.Добавить();   			
    			
    			Стр.Номенклатура 		= Товар;
    			Стр.Количество          = Количество;
				Стр.СтруктурнаяЕдиница	= Константы.СкладВозвратов.Получить();
				
				СтруктураПараметров = Новый Структура("Номенклатура, ТипЦен, Подразделение, ДатаСреза", Товар, Док.ТипЦен, Док.Подразделение, Док.Дата);
				Стр.Цена      			 = ЦенообразованиеСервер.ВернутьЦенуНоменклатуры(СтруктураПараметров);
				//Стр.ПроцентСкидки		= СоответствиеСкидок.Получить(СокрЛП(Стр.Номенклатура.Родитель.Код) +" / "+СокрЛП(Стр.Номенклатура.ЦеноваяГруппа.Код));
				Стр.ПроцентСкидки		= СоответствиеСкидок.Получить(СокрЛП(Стр.Номенклатура.Родитель.Код) +" / "+СокрЛП(Справочники.ЦеновыеГруппы.ПустаяСсылка().Код));
				
				Стр.СуммаБезСкидки		 = Стр.Цена*Стр.Количество;
				Стр.Скидка				= Стр.СуммаБезСкидки * Стр.ПроцентСкидки / 100;
				Стр.Сумма				= Стр.СуммаБезСкидки - Стр.Скидка;
				
				//Стр.ПроцентСкидкиНаценки = Скидка;
    			//Стр.СтавкаНДС 		     = Товар.СтавкаНДС;
    			//Стр.СуммаНДС 		     = СуммаНДС;
    			
    			//ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(Стр, Док);				
    			
    			// Заполняем реквизиты табличной части.				
    			//ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(Стр, Док, "ЗаказПокупателя");
    			
    			// Пересчитываем суммы табличных частей
    			//ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(Стр, Док);
    			//ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(Стр, Док);
    			
    	
    			
    		КонецЕсли;
    		
    	ИначеЕсли Эл.Имя = "Doc" Тогда				
    		Прервать;
    	КонецЕсли;
    	
    КонецЦикла;
    
 //   Док.СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(Док, "Товары") + УчетНДС.ПолучитьСуммуДокументаСНДС(Док, "Услуги");
  
    Результат = ЗаписьДокумента(Док, СтруктураДокКПК, ЭтоНовыйДок);
    
    Если Результат = 1 Тогда
 //   	Если РеализацияПоЗаявкам = 2 Тогда
 //   		ВвестиРеализациюНаОснованииЗаявки(Док);
 //   	ИначеЕсли РеализацияПоЗаявкам = 3 Тогда
 //   		ВвестиРеализациюНаОснованииЗаявкиПоРегиструСсылок(Док);
 //   	КонецЕсли;	
    ИначеЕсли Результат = 2 Тогда
    	СообщитьОПропускеДокумента(СтруктураДокКПК)
    КонецЕсли;
    
    Возврат Результат;
	
КонецФункции //ЗагрузкаПоступлений()


Функция ЗагрузкаОрдеров(Эл, СтруктураДокКПК)
	
	СуммаДок = СтруктураДокКПК.СуммаДок;	
	Тип 	 = ?(СуммаДок > 0 , "ПКО", "РКО");
	
	Менеджер		   = ?(Тип = "ПКО", Документы.кпкКасса, Документы.КпкКасса);
	Док 			   = Неопределено;	
	ПропуститьЗагрузку = Ложь;	
	
	ЭтоНовыйДок = СоздатьНовыйДокумент(Менеджер, Док, СтруктураДокКПК, ПропуститьЗагрузку);
	
	Если ПропуститьЗагрузку Тогда
		Возврат 2;
	КонецЕсли;
	
	СтруктураОбязательныхПолей = Новый Структура("Контрагент, Подразделение");
	
	ЗаполнитьОсновныеПараметрыДокумента(Док, СтруктураДокКПК, ?(Тип = "ПКО" , Документы.кпкКасса, 
										Документы.кпкКасса), СтруктураОбязательныхПолей, "");
	
	
	Док.ЭтоРасход  				  = ?(Тип = "ПКО", Ложь, 
										Истина);
	Док.СуммаДокумента				  = ?(СуммаДок > 0 , СуммаДок, -СуммаДок);
		
	
	
	ИДДокОсн = СтруктураДокКПК.ИдДокОсн;
	Если НЕ ПустаяСтрока(ИДДокОсн) Тогда
		
		MDocID = Новый УникальныйИдентификатор(ИДДокОсн);
		ДокОсн = Документы.РасходнаяНакладная.ПолучитьСсылку(MDocID);
		
		Если ДокОсн.ПолучитьОбъект() <> Неопределено Тогда
			ДокОсн = ДокОсн.ПолучитьОбъект();
			ДокОсн.Разблокировать();
		КонецЕсли;
		
		Док.Сделка = ДокОсн.Ссылка;
		
	КонецЕсли;
	
	Результат = ЗаписьДокумента(Док, СтруктураДокКПК, ЭтоНовыйДок);
	
	Если Результат = 2 Тогда
		СообщитьОПропускеДокумента(СтруктураДокКПК)			 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ЗагрузкаОрдеров()

&НаСервере
Функция ПолучитьИдентификатор(Ссылка)
	
	Возврат 		?(флИскатьПоGUI_77, СокрП(Ссылка.GUI_77), СокрП(Ссылка.УникальныйИдентификатор()));

Конецфункции	// ПолучитьИдентификатор()

&НаСервере
//Преобразует значение типа "Дата" в строку формата XML в виде "ГГГГ-ММ-ДД"
Функция ДатаВФорматеXML(Знач Дата_)
    Перем ПромДата;
	
	//Если Число(Дата_) < 1 Тогда
	//	Дата_ = "01.01.2000";
	//КонецЕсли;
	
	Попытка
		ПромДата=Формат(Дата_,"ДФ=yyyyMMdd");
	Исключение
		ПромДата="20000101";
	КонецПопытки;
	
	Возврат Лев(ПромДата,4)+"-"+Сред(ПромДата,5,2)+"-"+Прав(ПромДата,2);
	
КонецФункции

&НаСервере
//Возвращает код состояния (статуса) документа: 1 - проведен, 2 - записан, 3 - помечен на удаление
Функция ВернутьСостояниеДок(Док)
	
	Если Док.Проведен Тогда
		Возврат 1;
	ИначеЕсли Док.ПометкаУдаления Тогда
		Возврат 3;
	Иначе
		Возврат 2;
	КонецЕсли;
	
КонецФункции // ВернутьСостояниеДок()

Функция ИзвлечьДатуИзXML(Дата_)
	Поз = Найти(Дата_,"-");
	Если Поз = 0 Тогда
	    Возврат "";
	Иначе
    	Возврат Дата( Число(Лев(Дата_,Поз-1)), Число(Сред(Дата_,Поз+1,2)), Число(Сред(Дата_,Поз+4,2)) );
	КонецЕсли;
КонецФункции
флОбновлять = 1;
флИскатьПоGUI_77 = Ложь;
