#Область ДополнительныеПроцедурыИФункции

&НаСервере
Функция ЗагрузкаМаршрутовНаСервере()
	
	ANTLOGISTICSОбъект = Обработки.ANTLOGISTICS.Создать();
	
	//менеджерЗаписи = РегистрыСведений.ПараметрыАвторизацииМуравьинойЛогистики.СоздатьМенеджерЗаписи();
	//менеджерЗаписи.Подразделение = Подразделение;
	//менеджерЗаписи.Прочитать();
	
	узелОбмена = ПланыОбмена.ОбменСМуравьинойЛогистикой.НайтиПоРеквизиту("Подразделение", Подразделение);

	ANTLOGISTICSОбъект.ANT_LOGIN 		= узелОбмена.ИмяПользователя;
	ANTLOGISTICSОбъект.ANT_PASSWORD 	= узелОбмена.ПарольПользователя;
	ANTLOGISTICSОбъект.ANT_DEBUG		= узелОбмена.РежимОтладки;
	ANTLOGISTICSОбъект.ДатаМаршрутов 	= Дата;
	
	ответ = ANTLOGISTICSОбъект.ПолучитьМаршруты(узелОбмена);
	
	// ПЕРЕДЕЛАТЬ!!! Проверку поставить в модуле обработки и возвращать код ошибки
	// проверим наличие маршрутов
	Если ответ.Comps.Свойства().Получить("DEX_Comps") = Неопределено Тогда
		текстСообщения = СтрШаблон(НСтр("ru = 'Не найдено не одного маршрута за %1, по подразделению: %2 (проверьте наличие ОСНОВНОГО варианта планирования маршрутов)'"), Дата, Подразделение);
		сообщить(текстСообщения);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	таблицаМаршрутов = Новый ТаблицаЗначений;
	
	#Область таблицаМаршрутовКолонки
	таблицаМаршрутов.Колонки.Добавить("Auto_Id", 			Новый ОписаниеТипов("Строка"));
	таблицаМаршрутов.Колонки.Добавить("Count_Comps", 		Новый ОписаниеТипов("Число"));
	таблицаМаршрутов.Колонки.Добавить("Dispatcher_Id", 		Новый ОписаниеТипов("Число"));
	таблицаМаршрутов.Колонки.Добавить("Driver_Id", 			Новый ОписаниеТипов("Число"));
	//таблицаМаршрутов.Колонки.Добавить("Ext_Ident");
	таблицаМаршрутов.Колонки.Добавить("RouteTime_B", 		Новый ОписаниеТипов("Дата"));
	таблицаМаршрутов.Колонки.Добавить("RouteTime_E", 		Новый ОписаниеТипов("Дата"));
	таблицаМаршрутов.Колонки.Добавить("Route_Num", 			Новый ОписаниеТипов("Число"));
	таблицаМаршрутов.Колонки.Добавить("Travel_Duration", 	Новый ОписаниеТипов("Число"));
	таблицаМаршрутов.Колонки.Добавить("Trip_Num", 			Новый ОписаниеТипов("Число"));
	таблицаМаршрутов.Колонки.Добавить("distance", 			Новый ОписаниеТипов("Число"));
	#КонецОбласти
	
	Если ответ.Route.Последовательность().Количество() = 1 Тогда
		новаяСтрока = таблицаМаршрутов.Добавить();
		ЗаполнитьЗначенияСвойств(новаяСтрока, ответ.Route.DEX_Routes);
		новаяСтрока.Auto_Id = Прав("000000000" + СокрЛП(новаяСтрока.Auto_Id), 9);
	Иначе
		Для Каждого текМаршрут Из ответ.Route.DEX_Routes Цикл
			
			новаяСтрока = таблицаМаршрутов.Добавить();
			ЗаполнитьЗначенияСвойств(новаяСтрока, текМаршрут);
			новаяСтрока.Auto_Id = Прав("000000000" + СокрЛП(новаяСтрока.Auto_Id), 9);
			
		КонецЦикла;
	КонецЕсли;
	
	таблицаТочекМаршрута = Новый ТаблицаЗначений;
	
	#Область таблицаТочекМаршрутаКолонки
	//таблицаТочекМаршрута.Колонки.Добавить("Address");
	таблицаТочекМаршрута.Колонки.Добавить("CompType_Id", 	Новый ОписаниеТипов("Число"));
	таблицаТочекМаршрута.Колонки.Добавить("Comp_Code", 		Новый ОписаниеТипов("Строка"));
	таблицаТочекМаршрута.Колонки.Добавить("Comp_Id", 		Новый ОписаниеТипов("Число"));
	//таблицаТочекМаршрута.Колонки.Добавить("Comp_Name");
	//таблицаТочекМаршрута.Колонки.Добавить("Ext_Ident");
	таблицаТочекМаршрута.Колонки.Добавить("PosType_Id", 	Новый ОписаниеТипов("Число"));
	таблицаТочекМаршрута.Колонки.Добавить("Pos_Id", 		Новый ОписаниеТипов("Число"));
	таблицаТочекМаршрута.Колонки.Добавить("Qty", 			Новый ОписаниеТипов("Число"));
	таблицаТочекМаршрута.Колонки.Добавить("QtyV", 			Новый ОписаниеТипов("Число"));
	таблицаТочекМаршрута.Колонки.Добавить("QtyW", 			Новый ОписаниеТипов("Число"));
	таблицаТочекМаршрута.Колонки.Добавить("Request_Num", 	Новый ОписаниеТипов("Строка"));
	таблицаТочекМаршрута.Колонки.Добавить("Route_Num", 		Новый ОписаниеТипов("Число"));
	таблицаТочекМаршрута.Колонки.Добавить("Time_Arrival", 	Новый ОписаниеТипов("Строка"));
	таблицаТочекМаршрута.Колонки.Добавить("Travel_Time", 	Новый ОписаниеТипов("Число"));
	таблицаТочекМаршрута.Колонки.Добавить("Unload_Time", 	Новый ОписаниеТипов("Число"));
	таблицаТочекМаршрута.Колонки.Добавить("Wait_Time", 		Новый ОписаниеТипов("Число"));
	таблицаТочекМаршрута.Колонки.Добавить("Delay_Time", 	Новый ОписаниеТипов("Число"));
	таблицаТочекМаршрута.Колонки.Добавить("distance", 		Новый ОписаниеТипов("Число"));
	таблицаТочекМаршрута.Колонки.Добавить("lat", 			Новый ОписаниеТипов("Число"));
	таблицаТочекМаршрута.Колонки.Добавить("lng", 			Новый ОписаниеТипов("Число"));
	#КонецОбласти
	
	Для Каждого текТочкаМаршрута Из ответ.Comps.DEX_Comps Цикл
		
		новаяСтрока = таблицаТочекМаршрута.Добавить();
		ЗаполнитьЗначенияСвойств(новаяСтрока, текТочкаМаршрута);
		новаяСтрока.Request_Num = Прав("00000000000" + СокрЛП(новаяСтрока.Request_Num), 11);
		
	КонецЦикла;
	
	запрос = Новый Запрос;
	запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	#Область ТекстЗапроса
	запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	таблицаМаршрутов.Auto_Id КАК КодАвтомобиля,
	|	таблицаМаршрутов.Driver_Id КАК КодВодителя,
	|	таблицаМаршрутов.distance КАК Пробег,
	|	таблицаМаршрутов.Count_Comps КАК КоличествоТочекВМаршруте,
	|	таблицаМаршрутов.Route_Num КАК НомерМаршрута,
	|	таблицаМаршрутов.RouteTime_B КАК НачалоМаршрута,
	|	таблицаМаршрутов.RouteTime_E КАК КонецМаршрута,
	|	таблицаМаршрутов.Trip_Num КАК НомерРейса,
	|	таблицаМаршрутов.Dispatcher_Id КАК КодЭкспедитора,
	|	таблицаМаршрутов.Travel_Duration КАК ВремяДвиженияВМин
	|ПОМЕСТИТЬ таблицаМаршрутов
	|ИЗ
	|	&таблицаМаршрутов КАК таблицаМаршрутов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	таблицаТочекМаршрута.Route_Num КАК НомерМаршрута,
	|	таблицаТочекМаршрута.CompType_Id КАК ТипТорговойТочки,
	|	таблицаТочекМаршрута.Comp_Id КАК ИдентификаторТорговойТочки,
	|	таблицаТочекМаршрута.PosType_Id КАК ТипПозицииВМаршруте,
	|	таблицаТочекМаршрута.Pos_Id КАК ПозицияВМаршруте,
	|	таблицаТочекМаршрута.Time_Arrival КАК ВремяПрибытияВТочку,
	|	таблицаТочекМаршрута.Travel_Time КАК ВремяДвижения,
	|	таблицаТочекМаршрута.distance КАК Пробег,
	|	таблицаТочекМаршрута.Unload_Time КАК ВремяВыгрузкиТовара,
	|	таблицаТочекМаршрута.Wait_Time КАК ВремяРазгрузки,
	|	таблицаТочекМаршрута.Delay_Time КАК ОпозданиеВТочку,
	|	таблицаТочекМаршрута.lat КАК Широта,
	|	таблицаТочекМаршрута.lng КАК Долгота,
	|	таблицаТочекМаршрута.Request_Num КАК НомерЗаявки,
	|	таблицаТочекМаршрута.Comp_Code КАК КодТорговойТочки,
	|	таблицаТочекМаршрута.Qty КАК Количество,
	|	таблицаТочекМаршрута.QtyW КАК Вес,
	|	таблицаТочекМаршрута.QtyV КАК Объем
	|ПОМЕСТИТЬ таблицаТочекМаршрута
	|ИЗ
	|	&таблицаТочекМаршрута КАК таблицаТочекМаршрута
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.НомерМаршрута,
	|	ВложенныйЗапрос.Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		таблицаМаршрутов.НомерМаршрута КАК НомерМаршрута,
	|		ЕСТЬNULL(ЗаданиеВодителю.Ссылка, ЗНАЧЕНИЕ(Документ.ЗаданиеВодителю.ПустаяСсылка)) КАК Ссылка
	|	ИЗ
	|		таблицаМаршрутов КАК таблицаМаршрутов
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаданиеВодителю КАК ЗаданиеВодителю
	|			ПО таблицаМаршрутов.НомерМаршрута = ЗаданиеВодителю.НомерМаршрута
	|				И (ЗаданиеВодителю.Подразделение = &Подразделение)
	|				И (ЗаданиеВодителю.ПометкаУдаления = ЛОЖЬ)
	|				И (ЗаданиеВодителю.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.Ссылка <> ЗНАЧЕНИЕ(Документ.ЗаданиеВодителю.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	таблицаМаршрутов.КодАвтомобиля КАК КодАвтомобиля,
	|	таблицаМаршрутов.КодВодителя КАК КодВодителя,
	|	таблицаМаршрутов.Пробег КАК ПробегПоМаршруту,
	|	таблицаМаршрутов.КоличествоТочекВМаршруте КАК КоличествоТочекВМаршруте,
	|	таблицаМаршрутов.НомерМаршрута КАК НомерМаршрута,
	|	таблицаМаршрутов.НачалоМаршрута КАК НачалоМаршрута,
	|	таблицаМаршрутов.КонецМаршрута КАК КонецМаршрута,
	|	таблицаМаршрутов.НомерРейса КАК НомерРейса,
	|	таблицаМаршрутов.КодЭкспедитора КАК КодЭкспедитора,
	|	таблицаМаршрутов.ВремяДвиженияВМин КАК ВремяДвиженияВМин,
	|	&Подразделение КАК Подразделение,
	|	&Автор КАК Автор,
	|	&ДатаЗаданияВодителю КАК Дата,
	|	ЕСТЬNULL(ЗаданиеВодителю.Ссылка, ЗНАЧЕНИЕ(Документ.ЗаданиеВодителю.ПустаяСсылка)) КАК Документ,
	|	ЕСТЬNULL(Машины.Ссылка, ЗНАЧЕНИЕ(Справочник.Машины.ПустаяСсылка)) КАК Автомобиль,
	|	ЕСТЬNULL(ДоступностьТранспортаСрезПоследних.Водитель, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК Водитель,
	|	ЕСТЬNULL(ДоступностьТранспортаСрезПоследних.МаршрутРазвоза, ЗНАЧЕНИЕ(Справочник.МаршрутыРазвоза.ПустаяСсылка)) КАК МаршрутРазвоза
	|ИЗ
	|	таблицаМаршрутов КАК таблицаМаршрутов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаданиеВодителю КАК ЗаданиеВодителю
	|		ПО таблицаМаршрутов.НомерМаршрута = ЗаданиеВодителю.НомерМаршрута
	|			И (ЗаданиеВодителю.Подразделение = &Подразделение)
	|			И (ЗаданиеВодителю.ПометкаУдаления = ЛОЖЬ)
	|			И (ЗаданиеВодителю.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Машины КАК Машины
	|		ПО (ПОДСТРОКА(таблицаМаршрутов.КодАвтомобиля, 1, 9) = Машины.Код)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоступностьТранспорта.СрезПоследних(&ДатаОкончания, ) КАК ДоступностьТранспортаСрезПоследних
	|		ПО (ПОДСТРОКА(таблицаМаршрутов.КодАвтомобиля, 1, 11) = ДоступностьТранспортаСрезПоследних.ТранспортноеСредство.Код)
	|			И (ДоступностьТранспортаСрезПоследних.Подразделение = &Подразделение)
	|			И (ДоступностьТранспортаСрезПоследних.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыТранспортныхСредств.Доступно))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерМаршрута";
	
	#КонецОбласти
	
	запрос.УстановитьПараметр("таблицаМаршрутов", таблицаМаршрутов); 
	запрос.УстановитьПараметр("таблицаТочекМаршрута", таблицаТочекМаршрута);
	запрос.УстановитьПараметр("Подразделение", Подразделение);
	запрос.УстановитьПараметр("Автор", ПараметрыСеанса.ТекущийПользователь);
	запрос.УстановитьПараметр("ДатаНачала", НачалоДня(Дата));
	запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Дата));
	запрос.УстановитьПараметр("ДатаЗаданияВодителю", КонецДня(Дата));
	
	
	результатЗапроса = запрос.ВыполнитьПакет();
	
	#Область ТекстЗапросаВременныеТаблицы
	запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ таблицаМаршрутов";
	запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ таблицаТочекМаршрута";
	#КонецОбласти
	
	НачатьТранзакцию();
	
	блокировкаДанных = Новый БлокировкаДанных;
	
	элементБлокировки = блокировкаДанных.Добавить("Документ.ЗаданиеВодителю");
	элементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	элементБлокировки.ИсточникДанных = результатЗапроса[2].Выгрузить();
	элементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
	
	блокировкаДанных.Заблокировать();
	
	выборка = результатЗапроса[3].Выбрать();
	Пока выборка.Следующий() Цикл
		
		//Если выборка.Документ = Документы.ЗаданиеВодителю.ПустаяСсылка() Тогда
		Если выборка.Документ.Пустая() Тогда
			докЗаданиеВодителю = Документы.ЗаданиеВодителю.СоздатьДокумент();
		Иначе
			докЗаданиеВодителю = выборка.Документ.ПолучитьОбъект();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(докЗаданиеВодителю, выборка);
		
		#Область ТекстЗапросаЗаполненияТабличнойЧасти
		запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	таблицаТочекМаршрута.НомерМаршрута,
		|	таблицаТочекМаршрута.ТипТорговойТочки,
		|	таблицаТочекМаршрута.ИдентификаторТорговойТочки,
		|	таблицаТочекМаршрута.ТипПозицииВМаршруте,
		|	таблицаТочекМаршрута.ПозицияВМаршруте КАК ПозицияВМаршруте,
		|	таблицаТочекМаршрута.ВремяПрибытияВТочку,
		|	таблицаТочекМаршрута.ВремяДвижения,
		|	таблицаТочекМаршрута.Пробег КАК Пробег,
		|	таблицаТочекМаршрута.ВремяВыгрузкиТовара,
		|	таблицаТочекМаршрута.ВремяРазгрузки,
		|	таблицаТочекМаршрута.ОпозданиеВТочку,
		|	таблицаТочекМаршрута.Широта,
		|	таблицаТочекМаршрута.Долгота,
		|	таблицаТочекМаршрута.НомерЗаявки,
		|	таблицаТочекМаршрута.КодТорговойТочки,
		|	таблицаТочекМаршрута.Количество,
		|	таблицаТочекМаршрута.Вес,
		|	таблицаТочекМаршрута.Объем,
		|	ЕСТЬNULL(КпкЗаявка.Ссылка, ЗНАЧЕНИЕ(Документ.кпкЗаявка.ПустаяСсылка)) КАК Заявка,
		|	ЕСТЬNULL(КпкЗаявка.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Контрагент
		|ИЗ
		|	таблицаТочекМаршрута КАК таблицаТочекМаршрута
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КпкЗаявка КАК КпкЗаявка
		|		ПО (ПОДСТРОКА(таблицаТочекМаршрута.НомерЗаявки, 1, 11) = КпкЗаявка.Номер)
		|			И (КпкЗаявка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
		|ГДЕ
		|	таблицаТочекМаршрута.НомерМаршрута = &НомерМаршрута
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПозицияВМаршруте";
		#КонецОбласти
		
		запрос.УстановитьПараметр("НомерМаршрута", выборка.НомерМаршрута);
		
		докЗаданиеВодителю.ТочкиМаршрута.Загрузить(запрос.Выполнить().Выгрузить());
		
		докЗаданиеВодителю.Записать(РежимЗаписиДокумента.Проведение);
		
		//Прервать;
		
	КонецЦикла;

	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура СообщитьОбОшибке(текстСообщения, реквизитФормы)
	
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = текстСообщения;
	Сообщение.Поле = реквизитФормы;
	Сообщение.УстановитьДанные(ЭтотОбъект);
	Сообщение.Сообщить();
	
КонецПроцедуры

#КонецОбласти

#Область ДействияКоманд

&НаКлиенте
Процедура ЗагрузитьМаршруты(Команда)
	
	Если Дата = '00010101' Тогда
		СообщитьОбОшибке(НСтр("ru = 'Необходимо указать дату'"), "Дата");
		Возврат;
	КонецЕсли;
	
	Если Подразделение.Пустая() Тогда
		СообщитьОбОшибке(НСтр("ru = 'Необходимо указать подразделение'"), "Подразделение");
		Возврат;
	КонецЕсли;
	
	Если ЗагрузкаМаршрутовНаСервере() Тогда
		
		Оповестить("ОбновлениеСпискаЗаданийВодителя");
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Дата = ТекущаяДата();
	Подразделение = ПользователиСервер.ПолучитьЗначениеНастройки("ОсновноеПодразделение");
	
КонецПроцедуры

#КонецОбласти