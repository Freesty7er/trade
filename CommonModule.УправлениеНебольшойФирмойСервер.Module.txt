
// Удаляет элемент отбора динамического списка
//
//Параметры:
//Список  - обрабатываемый динамический список,
//ИмяПоля - имя поля компоновки, отбор по которому нужно удалить
//
Процедура УдалитьЭлементОтбораСписка(Список, ИмяПоля) Экспорт
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Счетчик = 1;
	Пока Счетчик <= Список.Отбор.Элементы.Количество() Цикл
		ЭлементОтбора = Список.Отбор.Элементы[Счетчик - 1];
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			Список.Отбор.Элементы.Удалить(ЭлементОтбора);
		Иначе
			Счетчик = Счетчик + 1;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры // УдалитьЭлементОтбораСписка()

// Устанавливает элемент отбор динамического списка
//
//Параметры:
//Список			- обрабатываемый динамический список,
//ИмяПоля			- имя поля компоновки, отбор по которому нужно установить,
//ВидСравнения		- вид сравнения отбора, по умолчанию - Равно,
//ПравоеЗначение 	- значение отбора
//
Процедура УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения = Неопределено, БыстрыйДоступ = Ложь) Экспорт
	
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ЭлементОтбора.ВидСравнения     = ?(ВидСравнения = Неопределено, ВидСравненияКомпоновкиДанных.Равно, ВидСравнения);
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.ПравоеЗначение   = ПравоеЗначение;
	ЭлементОтбора.РежимОтображения = ?(БыстрыйДоступ, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
КонецПроцедуры // УстановитьЭлементОтбораСписка()

// Изменяет элемент отбора динамического списка
//
//Параметры:
//Список         - обрабатываемый динамический список,
//ИмяПоля        - имя поля компоновки, отбор по которому нужно установить,
//ВидСравнения   - вид сравнения отбора, по умолчанию - Равно,
//ПравоеЗначение - значение отбора,
//Установить     - признак необходимости установить отбор
//
Процедура ИзменитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение = Неопределено, Установить = Ложь, ВидСравнения = Неопределено, ОтборПоПериоду = Ложь, БыстрыйДоступ = Ложь) Экспорт
	
	УдалитьЭлементОтбораСписка(Список, ИмяПоля);
	
	Если Установить Тогда
		Если ОтборПоПериоду Тогда
			УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение.ДатаНачала, ВидСравненияКомпоновкиДанных.БольшеИлиРавно, БыстрыйДоступ);
			УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение.ДатаОкончания, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, БыстрыйДоступ);
		Иначе
			УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения, БыстрыйДоступ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЭлементОтбораСписка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЕНИЯ ШАПКИ ДОКУМЕНТА

// Процедура предназначена для заполнения общих реквизитов документов,
// вызывается в обработчиках событий "ПриСозданииНаСервере" в модулях форм всех документов.
//
// Параметры:
//  ДокументОбъект                 - объект редактируемого документа,
//  ВидОперации                    - необязаетельный, строка вида операции ("Покупка" или "Продажа"),
//                                   если не передан, то реквизиты, зависящие от вида операции, не заполняются
//  ПараметрОбъектКопирования 	   - указывает что документ создан копированием
//  ПараметрОснование 			   - ссылка на документ основание
Процедура ЗаполнитьШапкуДокумента(Объект,
	ВидОперации = "",
	ПараметрЗначениеКопирования = Неопределено,
	ПараметрОснование = Неопределено,
	СостояниеДокумента,
	КартинкаСостоянияДокумента,
	РазрешеноПроведение,
	ЗначенияЗаполнения = Неопределено) Экспорт
	
	Пользователь = ОбщегоНазначения.ТекущийПользователь();
	МетаданныеДокумента = Объект.Ссылка.Метаданные();
	РазрешеноПроведение = МетаданныеДокумента.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить;

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Автор = Пользователь;
		СостояниеДокумента = "Новый";
		КартинкаСостоянияДокумента = 0;
	Иначе
		Если Объект.Проведен Тогда
			СостояниеДокумента = "Проведен";
			КартинкаСостоянияДокумента = 1;
		ИначеЕсли РазрешеноПроведение Тогда
			СостояниеДокумента = "Не проведен";
			КартинкаСостоянияДокумента = 0;
		Иначе
			СостояниеДокумента = "Записан";
			КартинкаСостоянияДокумента = 3;
		КонецЕсли;
		
	КонецЕсли;

	//:::Заполнение
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если ЕстьРеквизитДокумента("Подразделение", МетаданныеДокумента) 
			И НЕ (ЗначенияЗаполнения <> Неопределено И ЗначенияЗаполнения.Свойство("Подразделение") И ЗначениеЗаполнено(ЗначенияЗаполнения.Подразделение))
			И НЕ (ЗначениеЗаполнено(ПараметрОснование) И ЗначениеЗаполнено(Объект.Подразделение)) Тогда
			ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновноеПодразделение");
			Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
				Если Объект.Подразделение <> ЗначениеНастройки Тогда
					Объект.Подразделение = ЗначениеНастройки;
				КонецЕсли;
			Иначе
				//Объект.Подразделение = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;	
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента)
			И НЕ (ЗначенияЗаполнения <> Неопределено И ЗначенияЗаполнения.Свойство("Ответственный") И ЗначениеЗаполнено(ЗначенияЗаполнения.Ответственный))
			И НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
			Объект.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойОтветственный");
		КонецЕсли;
		
		Если ЕстьРеквизитДокумента("Организация", МетаданныеДокумента)
			И НЕ (ЗначенияЗаполнения <> Неопределено И ЗначенияЗаполнения.Свойство("Организация") И ЗначениеЗаполнено(ЗначенияЗаполнения.Организация))
			И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнаяОрганизация");
		КонецЕсли;
		
		//Если ЕстьРеквизитДокумента("Менеджер", МетаданныеДокумента)
		//	И НЕ (ЗначенияЗаполнения <> Неопределено И ЗначенияЗаполнения.Свойство("Менеджер") И ЗначениеЗаполнено(ЗначенияЗаполнения.Менеджер))
		//	И НЕ ЗначениеЗаполнено(Объект.Менеджер) Тогда
		//	Объект.Менеджер = Справочники.Менеджеры.БезМенеджера;
		//КонецЕсли;


		
	КонецЕсли;
	
КонецПроцедуры	// ЗаполнитьШапкуДокумента()

//////////////////////////////////////////////////////////////////////////////// 
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 

// Выводит сообщение об ошибке заполнения поля.
//
Процедура СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения, ИмяТабличнойЧасти = Неопределено, НомерСтроки = Неопределено, Поле = Неопределено, Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = ТекстСообщения;
	
	Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		
		// Платформа 8.2.15
		
	Иначе
		
		Если ИмяТабличнойЧасти <> Неопределено Тогда
			Сообщение.Поле = ИмяТабличнойЧасти + "[" + (НомерСтроки - 1) + "]." + Поле;
		ИначеЕсли ЗначениеЗаполнено(Поле) Тогда
			Сообщение.Поле = Поле;
		КонецЕсли;
		
		Сообщение.УстановитьДанные(ЭтотОбъект);
		
	КонецЕсли;
	
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры // СообщитьОбОшибке()

// Позволяет определить есть ли среди реквизитов шапки документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт

	Возврат НЕ (МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

КонецФункции // ЕстьРеквизитДокумента()

// Процедура удаляет проверяемый реквизит из массива проверяемых реквизитов.
Процедура УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, ПроверяемыйРеквизит) Экспорт
	
	НайденныйРеквизит = ПроверяемыеРеквизиты.Найти(ПроверяемыйРеквизит);
	Если ЗначениеЗаполнено(НайденныйРеквизит) Тогда
		ПроверяемыеРеквизиты.Удалить(НайденныйРеквизит);
	КонецЕсли;
	
КонецПроцедуры // УдалитьПроверяемыйРеквизит()

//////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ 

// Процедура определяет ситуацию, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в это м случае
// присваивает документу новый уникальный номер.
//
// Параметры:
//  ДокументСсылка - ссылка на документ,из которого вызвана процедура 
//  НоваяДатаДокумента - новая дата документа 
//  НачальнаяДатаДокумента - начальная дата документа 
//
// Возвращаемое значение:
//  Число - разность дат.
//
Функция ПроверитьНомерДокумента(ДокументСсылка, НоваяДатаДокумента, НачальнаяДатаДокумента) Экспорт
	
	// Определяем назначенную для данного вида документов периодичность смены номера
	ПериодСменыНомера = ДокументСсылка.Метаданные().ПериодичностьНомера;
	
	//В зависимости от установленной периодичности смены номеров,
	//определяем разность старой и новой датами документа.
	Если ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		РазностьДат = НачалоГода(НачальнаяДатаДокумента) - НачалоГода(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		РазностьДат = НачалоКвартала(НачальнаяДатаДокумента) - НачалоКвартала(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		РазностьДат = НачалоМесяца(НачальнаяДатаДокумента) - НачалоМесяца(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
		РазностьДат = НачальнаяДатаДокумента - НоваяДатаДокумента;
	Иначе
		Возврат 0;
	КонецЕсли;
	
	Возврат РазностьДат;
	
КонецФункции // ПроверитьНомерДокумента()

////////////////////////////////////////////////////////////////////////////////
//	УПРАВЛЕНИЕ ПРОВЕДЕНИЕМ

// Выполняет инициализацию дополнительных свойств для проведения документа.
//
Процедура ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	// В структуре "ДополнительныеСвойства" создаются свойства с ключами "ТаблицыДляДвижений", "ДляПроведения", "УчетнаяПолитика".
	
	// "ТаблицыДляДвижений" - структура, которая будет содержать таблицы значений с данными для выполнения движений.
	СтруктураДополнительныеСвойства.Вставить("ТаблицыДляДвижений", Новый Структура);
	
	// "ДляПроведения" - структура, содержащая свойства и реквизиты документа, необходимые для проведения.
	СтруктураДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
	
	// Структура, содержащая ключ с именем "МенеджерВременныхТаблиц", в значении которого хранится менеджер временных таблиц.
	// Содержит для каждой временной таблицы ключ (имя временной таблицы) и значение (признак наличия записей во временной таблице).
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы", Новый Структура("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц));
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("МетаданныеДокумента", ДокументСсылка.Метаданные());
	
	// "УчетнаяПолитика" - структура, содержащая значения всех параметров учетной политики на момент времени документа
	// и по выбранной в документе организации или по компании (в случае ведения учета по компании).
	СтруктураДополнительныеСвойства.Вставить("УчетнаяПолитика", Новый Структура);
	
	// Запрос, получающий данные документа.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	_Документ_.Ссылка КАК Ссылка,
	|	_Документ_.Номер КАК Номер,
	|	_Документ_.Дата КАК Дата,
	|   " + ?(СтруктураДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Реквизиты.Найти("Подразделение") <> Неопределено, "_Документ_.Подразделение" , "ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)") + " КАК Подразделение,
	|	_Документ_.МоментВремени КАК МоментВремени,
	|	_Документ_.Представление КАК Представление
	|ИЗ
	|	Документ." + СтруктураДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Имя + " КАК _Документ_
	|ГДЕ
	|	_Документ_.Ссылка = &ДокументСсылка");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Формирование ключей, содержащих данные документа.
	Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
		
		СтруктураДополнительныеСвойства.ДляПроведения.Вставить(Колонка.Имя);
		
	КонецЦикла;
	
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаИзРезультатаЗапроса.Следующий();
	
	// Заполнение значений для ключей, содержащих данные документа.
	ЗаполнитьЗначенияСвойств(СтруктураДополнительныеСвойства.ДляПроведения, ВыборкаИзРезультатаЗапроса);
	
	// Определение и установка значения момента, на который должен быть выполнен контроль документа.
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("МоментКонтроля", Дата('00010101'));
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("ПериодКонтроля", Дата("39991231"));
		
	// Установка организации в случае ведения учета по компании.
	//СтруктураДополнительныеСвойства.ДляПроведения.Организация = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	СтруктураДополнительныеСвойства.ДляПроведения.Подразделение = ?(СтруктураДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Реквизиты.Найти("Подразделение") <> Неопределено, ДокументСсылка.Подразделение , Справочники.СтруктурныеЕдиницы.ПустаяСсылка);
	
	// Установка склада "возвратов"
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("СкладВозвратов", Константы.СкладВозвратов.Получить());
	
	// Запрос, получающий данные учетной политики.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПараметрыУчетаПоПодразделениямСрезПоследних.ЕстьСкладВозвратов,
	|	ПараметрыУчетаПоПодразделениямСрезПоследних.ЕстьСкидкаНаВес,
	|	ПараметрыУчетаПоПодразделениямСрезПоследних.Контрагент,
	|	ПараметрыУчетаПоПодразделениямСрезПоследних.УправляющаяКомпания,
	|	ПараметрыУчетаПоПодразделениямСрезПоследних.ЦенаСклада,
	|	ПараметрыУчетаПоПодразделениямСрезПоследних.АвтоУчетРозницы,
	|	ПараметрыУчетаПоПодразделениямСрезПоследних.ЕстьУчетЗатратПоОбъектам,
	|	ПараметрыУчетаПоПодразделениямСрезПоследних.АвтоСозданиеВозвратаПокупателяПриВозвратепоставщику,
	|	ПараметрыУчетаПоПодразделениямСрезПоследних.АвтоСозданиеПриходнойНакладнойПриРеализации,
	|	ПараметрыУчетаПоПодразделениямСрезПоследних.АвтоСозданиеНалоговыхДокументов,
	|	ПараметрыУчетаПоПодразделениямСрезПоследних.АвтоСозданиеПоступленияДенегПриРасходе
	|ИЗ
	|	РегистрСведений.ПараметрыУчетаПоПодразделениям.СрезПоследних(&МоментВремени, СтруктурнаяЕдиница = &Подразделение) КАК ПараметрыУчетаПоПодразделениямСрезПоследних");
	
	Запрос.УстановитьПараметр("МоментВремени", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени);
	Запрос.УстановитьПараметр("Подразделение", СтруктураДополнительныеСвойства.ДляПроведения.Подразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Формирование ключей, содержащих данные учетной политики.
	Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
		
		СтруктураДополнительныеСвойства.УчетнаяПолитика.Вставить(Колонка.Имя);
		
	КонецЦикла;
	
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаИзРезультатаЗапроса.Следующий();
	
	// Заполнение значений для ключей, содержащих данные учетной политики.
	ЗаполнитьЗначенияСвойств(СтруктураДополнительныеСвойства.УчетнаяПолитика, ВыборкаИзРезультатаЗапроса);
	
КонецПроцедуры // ИнициализироватьДополнительныеСвойстваДляПроведения()

// Формирует массив имен регистров, по которым есть движения документа.
//
Функция ПолучитьМассивИменИспользуемыхРегистров(Регистратор, МетаданныеДокумента)
	
	МассивРегистров = Новый Массив;
	ТекстЗапроса = "";
	СчетчикТаблиц = 0;
	СчетчикЦикла = 0;
	ВсегоРегистров = МетаданныеДокумента.Движения.Количество();
	
	Для каждого Движение из МетаданныеДокумента.Движения Цикл
		
		Если СчетчикТаблиц > 0 Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|";
			
		КонецЕсли;
		
		СчетчикТаблиц = СчетчикТаблиц + 1;
		СчетчикЦикла = СчетчикЦикла + 1;
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|""" + Движение.Имя + """ КАК ИмяРегистра
		|
		|ИЗ " + Движение.ПолноеИмя() + "
		|
		|ГДЕ Регистратор = &Регистратор
		|";
		
		Если СчетчикТаблиц = 256 ИЛИ СчетчикЦикла = ВсегоРегистров Тогда
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			
			ТекстЗапроса  = "";
			СчетчикТаблиц = 0;
			
			Если МассивРегистров.Количество() = 0 Тогда
				
				МассивРегистров = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра");
				
			Иначе
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					МассивРегистров.Добавить(Выборка.ИмяРегистра);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивРегистров;
	
КонецФункции // ПолучитьМассивИменИспользуемыхРегистров()

// Выполняет подготовку наборов записей документа.
//
Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(СтруктураОбъект) Экспорт
	
	Для каждого НаборЗаписей из СтруктураОбъект.Движения Цикл
		
		Если ТипЗнч(НаборЗаписей) = Тип("КлючИЗначение") Тогда
			
			НаборЗаписей = НаборЗаписей.Значение;
			
		КонецЕсли;
		
		Если НаборЗаписей.Количество() > 0 Тогда
			
			НаборЗаписей.Очистить();
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивИменРегистров = ПолучитьМассивИменИспользуемыхРегистров(СтруктураОбъект.Ссылка, СтруктураОбъект.ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента);
	
	Для каждого ИмяРегистра из МассивИменРегистров Цикл
		
		СтруктураОбъект.Движения[ИмяРегистра].Записывать = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

// Записывает наборы записей документа.
//
Процедура ЗаписатьНаборыЗаписей(СтруктураОбъект) Экспорт
	
	Для каждого НаборЗаписей из СтруктураОбъект.Движения Цикл
		
		Если ТипЗнч(НаборЗаписей) = Тип("КлючИЗначение") Тогда
			
			НаборЗаписей = НаборЗаписей.Значение;
			
		КонецЕсли;
		
		Если НаборЗаписей.Записывать Тогда
			
			Если НЕ НаборЗаписей.ДополнительныеСвойства.Свойство("ДляПроведения") Тогда
				
				НаборЗаписей.ДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
				
			КонецЕсли;
			
			Если НЕ НаборЗаписей.ДополнительныеСвойства.ДляПроведения.Свойство("СтруктураВременныеТаблицы") Тогда
				
				НаборЗаписей.ДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы", СтруктураОбъект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы);
				
			КонецЕсли;
			
			НаборЗаписей.Записать();
			НаборЗаписей.Записывать = Ложь;
			
		Иначе
				
			Если Метаданные.РегистрыНакопления.Содержит(НаборЗаписей.Метаданные()) Тогда
				
				Попытка
					РегистрыНакопления[НаборЗаписей.Метаданные().Имя].СоздатьПустуюВременнуюТаблицуИзменение(СтруктураОбъект.ДополнительныеСвойства);
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
	
	
//////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ РЕГИСТРОВ

// Выполняет движения регистра накопления ДенежныеСредства.
//
Процедура ОтразитьДенежныеСредства(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.Таблица_ДенежныеСредства;
	
	Если Отказ
	 ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредства;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры

// Выполняет движения регистра накопления РасчетыСКонтрагентами.
//
Процедура ОтразитьВзаиморасчетыСПокупателями(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаВзаиморасчетыСПокупателями = ДополнительныеСвойства.ТаблицыДляДвижений.Таблица_ВзаиморасчетыСПокупателями;
	
	Если Отказ
	 ИЛИ ТаблицаВзаиморасчетыСПокупателями.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияРасчетыСПокупателями = Движения.ВзаиморасчетыСПокупателями;
	ДвиженияРасчетыСПокупателями.Записывать = Истина;
	ДвиженияРасчетыСПокупателями.Загрузить(ТаблицаВзаиморасчетыСПокупателями);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
//	

// Функция возвращает текст запроса для расчета курсовых разниц.
//
Функция ПолучитьТекстЗапросаКурсовыеРазницыРасчетыСПокупателями(МенеджерВременныхТаблиц, СЗачетомАванса, НомерЗапроса) Экспорт
	
	РассчитыватьКурсовыеРазницы = Ложь;
	
	Если НЕ РассчитыватьКурсовыеРазницы Тогда
		
		НомерЗапроса = 1;
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	1 КАК НомерСтроки,
		|	&ПериодКонтроля КАК Дата,
		|	ТаблицаРасчеты.ВидДвижения КАК ВидДвижения,
		|	ТаблицаРасчеты.Подразделение КАК Подразделение,
		|	ТаблицаРасчеты.Контрагент КАК Контрагент,
		|	ТаблицаРасчеты.Менеджер КАК Менеджер,
		|	ТаблицаРасчеты.КредитныйДокумент КАК КредитныйДокумент,
		|	ТаблицаРасчеты.Сумма КАК Сумма
		|ПОМЕСТИТЬ ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями
		|ИЗ
		|	ВременнаяТаблицаВзаиморасчетыСПокупателями КАК ТаблицаРасчеты
		|//ГДЕ
		|//	ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Дата КАК Период,
		|	ТаблицаДокумента.ВидДвижения КАК ВидДвижения,
		|	ТаблицаДокумента.Подразделение КАК Подразделение,
		|	ТаблицаДокумента.Контрагент КАК Контрагент,
		|	ТаблицаДокумента.Менеджер КАК Менеджер,
		|	ТаблицаДокумента.КредитныйДокумент КАК КредитныйДокумент,
		|	ТаблицаДокумента.Сумма КАК Сумма
		|ИЗ
		|	ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями КАК ТаблицаДокумента";
	
	
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаКурсовыеРазницыРасчетыСПокупателями()


///////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ВЫДАЧИ СООБЩЕНИЙ ОБ ОШИБКАХ ПРОВЕДЕНИЯ.

// Процедура сообщает об ошибках проведения по регистру Запасы на складах.
//
Процедура СообщитьОбОшибкахПроведенияПоРегиструПартииТоваровНаСкладах(ДокОбъект, ВыборкаЗаписей, Отказ) Экспорт
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка:'");
	ШаблонЗаголовкаСообщения = ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Не хватает запасов %ПодразделениеПредставление% %СкладПредставление%'");
	
	ШаблонСообщения = НСтр("ru = 'Номенклатура: %НоменклатураХарактеристикаПартия%,
		|остаток %КоличествоОстаток% %ЕдиницаИзмерения%,
		|недостаточно %Количество% %ЕдиницаИзмерения%'");
		
	ВыводитьВЗаголовокРасшифровку = Истина;
	
	Пока ВыборкаЗаписей.Следующий() Цикл
		
		Если ВыводитьВЗаголовокРасшифровку Тогда
			
			ТекстЗаголовкаСообщения = СтрЗаменить(ШаблонЗаголовкаСообщения, "%СкладПредставление%", ВыборкаЗаписей.СкладПредставление);
			ТекстЗаголовкаСообщения = СтрЗаменить(ТекстЗаголовкаСообщения, "%ПодразделениеПредставление%", ВыборкаЗаписей.ПодразделениеПредставление);
			
			СообщитьОбОшибке(ДокОбъект, ТекстЗаголовкаСообщения, , , , Отказ);
			
			ВыводитьВЗаголовокРасшифровку = Ложь;
			
		КонецЕсли;
		
		ПредставлениеНоменклатуры = ВыборкаЗаписей.НоменклатураПредставление;
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристикаПартия%", ПредставлениеНоменклатуры);
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(ВыборкаЗаписей.ОстатокПартииТоваровНаСкладах));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОстаток%", Строка(-ВыборкаЗаписей.КоличествоОстатокПартииТоваровНаСкладах));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаИзмерения%", ВыборкаЗаписей.ЕдиницаИзмеренияПредставление);
		
		СообщитьОбОшибке(ДокОбъект, ТекстСообщения, , , , Отказ);
		
	КонецЦикла;
	
КонецПроцедуры // СообщитьОбОшибкахПроведенияПоРегиструЗапасыНаСкладах()


// Функция формирует сведения об указанном ЮрФизЛице. К сведениям относятся -
// наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  ЮрФизЛицо    - организация или физическое лицо, о котором собираются
//                 сведения
//  ДатаПериода  - дата, на которую выбираются сведения о ЮрФизЛице
//  ДляФизЛицаТолькоИнициалы - Для физ. лица выводить только инициалы имени и
//                 отчества.
//
// Возвращаемое значение:
//  Сведения - собранные сведения.
//
Функция СведенияОЮрФизЛице(КодЯзыка = "ru", ЮрФизЛицо, ДатаПериода, ДляФизЛицаТолькоИнициалы = Истина, БанковскийСчет = Неопределено) Экспорт

	Сведения = Новый Структура("Представление, КодПоЕДРПОУ, НомерСвидетельства, Телефоны, Факс, Банк, МФО, КоррСчет, НомерСчета, АдресБанка, ПлательщикНалогаНаПрибыль, КПП");
	Запрос   = Новый Запрос;
	Данные   = Неопределено;
	
	Сведения.Вставить("ФактическийАдрес", "");
	
	Попытка
		Сведения.Вставить("ПолноеНаименование", ЮрФизЛицо.ПолнНаим);
	Исключение
		Сведения.Вставить("ПолноеНаименование", ЮрФизЛицо.ПолнНаименование);
	КонецПопытки;
	
	Сведения.Вставить("ЮридическийАдрес", 	ЮрФизЛицо.ЮрАдрес);
	Сведения.Вставить("ИНН", 				ЮрФизЛицо.ИНН);

	Возврат Сведения;

КонецФункции // СведенияОЮрФизЛице

// Возвращает структуру данных со сводным описанием контрагента.
//
// Параметры: 
//  СписокСведений - список значений со значениями параметров организации
//   СписокСведений формируется функцией СведенияОЮрФизЛице
//  Список         - список запрашиваемых параметров организации
//  СПрефиксом     - Признак выводить или нет префикс параметра организации
//
// Возвращаемое значение:
//  Строка - описатель организации / контрагента / физ.лица.
//
Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина) Экспорт

	Если ПустаяСтрока(Список) Тогда
		Список = "ПолноеНаименование,ИНН,КодПоЕДРПОУ,НомерСвидетельства,ЮридическийАдрес,Телефоны,Факс,НомерСчета,Банк,МФО,КоррСчет,ПлательщикНалогаНаПрибыль";
	КонецЕсли; 

	Результат = "";

	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить("ПолноеНаименование",		 " ");
	СоответствиеПараметров.Вставить("ИНН",						 " ІПН ");
	СоответствиеПараметров.Вставить("КодПоЕДРПОУ",				 " ЄДРПОУ ");
	СоответствиеПараметров.Вставить("НомерСвидетельства",		 Символы.ПС + " № свід. ");
	СоответствиеПараметров.Вставить("СвидетельствоДатаВыдачи",	 " от ");
	СоответствиеПараметров.Вставить("ЮридическийАдрес",			 Символы.ПС + " ");
	СоответствиеПараметров.Вставить("Телефоны",					 " тел.: ");
	СоответствиеПараметров.Вставить("Факс",						 " факс: ");
	СоответствиеПараметров.Вставить("НомерСчета",				 " р/р ");
	СоответствиеПараметров.Вставить("Банк",						 " у банку ");
	СоответствиеПараметров.Вставить("МФО",						 " МФО ");
	СоответствиеПараметров.Вставить("КоррСчет",					 " к/р ");
    СоответствиеПараметров.Вставить("ПлательщикНалогаНаПрибыль", Символы.ПС + " ");

	Список          = Список + ?(Прав(Список, 1) = ",", "", ",");
	ЧислоПараметров = СтрЧислоВхождений(Список, ",");

	Для Счетчик = 1 по ЧислоПараметров Цикл

		ПозЗапятой = Найти(Список, ",");

		Если ПозЗапятой > 0  Тогда
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));

			Попытка
				СтрокаДополнения = "";
				СписокСведений.Свойство(ИмяПараметра, СтрокаДополнения);

				Если ПустаяСтрока(СтрокаДополнения) Тогда
					Продолжить;
				КонецЕсли;

				Префикс = СоответствиеПараметров[ИмяПараметра];
				Если Не ПустаяСтрока(Результат)  Тогда
					Результат = Результат + ", ";
				КонецЕсли; 

				Результат = Результат + ?(СПрефиксом = Истина, Префикс, "") + СтрокаДополнения;

			Исключение

				Сообщение = Новый СообщениеПользователю();
		        Сообщение.Текст = НСтр("ru = 'Не удалось определить значение параметра организации: '") + ИмяПараметра;
				Сообщение.Сообщить();

			КонецПопытки;

		КонецЕсли; 

	КонецЦикла;

	Возврат Результат;

КонецФункции // ОписаниеОрганизации()
