
Процедура УстановитьНомерДокумента(ДокументОбъект) Экспорт
	
	ЭтоБолванка = Ложь;
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РасходнаяНакладная") Тогда
		
		Если ДокументОбъект.Запасы.Количество() = 0 Тогда
			ЭтоБолванка = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ПрефиксНомера = ДокументОбъект.Организация.ПрефиксНомеровДокументов;
	Если НЕ(Лев(ДокументОбъект.Номер, 3) = ПрефиксНомера) И НЕ ЭтоБолванка Тогда
		ДокументОбъект.УстановитьНовыйНомер(ПрефиксНомера);
	КонецЕсли;
	
	Если (СокрЛП(ДокументОбъект.GUI_77) = "") Тогда
		ДокументОбъект.GUI_77 = ДокументОбъект.Ссылка.УникальныйИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

// Формирует представление суммы прописью в указанной валюте
//
// Параметры:
//  Сумма - Число - сумма, которую надо представить прописью. 
//  Валюта - СправочникСсылка.Валюты - валюта, в которой нужно представить сумму.
//  ВыводитьСуммуБезКопеек - Булево - флаг представления суммы без копеек.
//
// Возвращаемое значение:
//  Строка - сумма прописью
//
Функция СформироватьСуммуПрописью(Знач Сумма, Валюта = "грн", ВыводитьСуммуБезКопеек = Ложь) Экспорт
	
	Результат         = ?(Сумма < 0, -Сумма, Сумма);
	ЦелаяЧасть        = Цел(Результат);
	ФорматСтрока      = "Л=uk_UK;ДП=Ложь";
	
	ПараметрыПредмета = Новый Структура("ПараметрыПрописиНаРусском", "грн, грн, грн, м, коп, коп, коп, ж, 2", );
	
	Если Результат = ЦелаяЧасть Тогда
		
		Если ВыводитьСуммуБезКопеек Тогда
			
			Результат = ЧислоПрописью(Результат, ФорматСтрока, ПараметрыПредмета.ПараметрыПрописиНаРусском);
			Результат = Лев(Результат, Найти(Результат, "0") - 1);
			
		Иначе
			
			Результат = ЧислоПрописью(Результат, ФорматСтрока, ПараметрыПредмета.ПараметрыПрописиНаРусском);
			
		КонецЕсли;
		
	Иначе
		
		Результат = ЧислоПрописью(Результат, ФорматСтрока, ПараметрыПредмета.ПараметрыПрописиНаРусском);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Позволяет определить есть ли среди реквизитов шапки документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт

	Возврат НЕ (МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

КонецФункции // ЕстьРеквизитДокумента()

// Позволяет определить есть ли табличная часть документа с переданным именем.
//
// Параметры: 
//  ИмяТабЧасти - строковое имя искомой табличной части,
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьТабЧастьДокумента(ИмяТабЧасти, МетаданныеДокумента) Экспорт

	Если МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабЧасти) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 

КонецФункции // ЕстьТабЧастьДокумента()

// Позволяет определить есть ли среди реквизитов табличной части документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//  ИмяТабЧасти  - строковое имя табличной части документа, среди реквизитов которого производится поиск
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитТабЧастиДокумента(ИмяРеквизита, МетаданныеДокумента, ИмяТабЧасти) Экспорт

	ТабЧасть = МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабЧасти);

	Если ТабЧасть = Неопределено Тогда // Нет такой таб. части в документе
		Возврат Ложь;

	Иначе
		Возврат НЕ (ТабЧасть.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

	КонецЕсли;

КонецФункции // ЕстьРеквизитТабЧастиДокумента()

#Область ДополнительныеПроцедурыИФункции

// Проверяет переданный объект или массив объектов на соответствие определённому отбору и типу данных.
//
// Параметры
//  ПроверяемыйОбъект  - Массив, Произвольный - Значение или массив значений, которые будут проверены на
//                 соответствие указанному отбору.
//  Отбор  - Структура, Неопределено - Описание отбора. В качестве ключа элементов структуры указываются имена
//                 реквизитов проверяемых объектов, а в значениях элементов - значения, которым должен
//                 соответствовать реквизит объекта. В качестве значений структуры допускается использовать
//                 массив значений. Отбор может отсутствовать, тогда проверка на соответствие проводиться
//                 не будет.
//  ТипДанных  - Тип, Неопределено - Если параметр указан, то объекты дополнительно будут проверяться на
//                 соответствие указанному типу.
//
// Возвращаемое значение:
//   Булево   - Истина - объект полностью соответствует отбору; Ложь - в противном случае.
//
Функция ПроверитьСоответствиеОбъектаОтбору(Знач ПроверяемыйОбъект, Знач Отбор = Неопределено, Знач ТипДанных = Неопределено) Экспорт
	
	Если ТипЗнч(ПроверяемыйОбъект) = Тип("Массив") Тогда
		мОбъекты = ПроверяемыйОбъект;
	Иначе
		
		мОбъекты = Новый Массив(1);
		мОбъекты[0] = ПроверяемыйОбъект;
		
	КонецЕсли;
	
	РезультатСравнения = Истина;
	
	// Проверяем объекты.
	Для каждого Объект Из мОбъекты Цикл
		
		Если Не РезультатСравнения Тогда
			Прервать;
		КонецЕсли; 
		
		// Проверка на равенство каждого объекта требуемому типу.
		Если ТипДанных <> Неопределено И ТипЗнч(Объект) <> ТипДанных Тогда
			
			РезультатСравнения = Ложь;
			Прервать;
			
		КонецЕсли; 
		
		// Проверка по элементам отбора.
		Если Отбор <> Неопределено Тогда
			
			Для каждого ЭлементОтбора Из Отбор Цикл
				
				КлючОтбора = ЭлементОтбора.Ключ;
				ЗначениеОтбора = ЭлементОтбора.Значение;
				
				ЗначениеРеквизита = Объект[КлючОтбора];
				
				Если ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
					
					Если ЗначениеОтбора.Найти(ЗначениеРеквизита) = Неопределено Тогда
						
						РезультатСравнения = Ложь;
						Прервать;
						
					КонецЕсли; 
					
				Иначе
					
					Если ЗначениеРеквизита <> ЗначениеОтбора Тогда
						
						РезультатСравнения = Ложь;
						Прервать;
						
					КонецЕсли; 
					
				КонецЕсли; 
				
			КонецЦикла; 
		
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат РезультатСравнения;
	
КонецФункции // ПроверитьСоответствиеОбъектаОтбору()

// Возвращает сумму документа как сумму итоговых значений по табличным частям документа.
// Имеется возможность указать табличные части, которые будут задействованы при расчёте
// суммы, а также табличные части, которые следует исключить из расчёта.
//
// Параметры
//  Документ  - ДокументОбъект.<Имя документа> - Документ, для которого будет возвращена
//                 сумма документа.
//  ТабличныеЧасти  - Строка - Список имён табличных частей, разделённых запятыми, по которым
//                 будет рассчитана сумма документа. Если список пуст, будут обработаны все
//                 табличные части документа.
//  ИсключитьТабличныеЧасти  - Строка - Список имён табличных частей, разделённых запятыми,
//                 исключаемые из расчёта.
//  ИменаРеквизитовСумма  - Строка - Список реквизитов табличной части, разделённых запятыми,
//                 которые составляют общую сумму документа.
//
// Возвращаемое значение:
//   Число   - Сумма документа, расчитанная по табличным частям документа.
//
Функция ПолучитьСуммуДокумента(Документ, ТабличныеЧасти = Неопределено, ИсключитьТабличныеЧасти = Неопределено, ИменаРеквизитовСумма = "Сумма") Экспорт

	Если ТабличныеЧасти <> Неопределено Тогда
		мТабличныеЧасти = СтрРазделить(ТабличныеЧасти, ",");
	КонецЕсли;
	Если ИсключитьТабличныеЧасти <> Неопределено Тогда
		мИсключитьТабличныеЧасти = СтрРазделить(ИсключитьТабличныеЧасти, ",");
	Иначе
		мИсключитьТабличныеЧасти = Новый Массив;
	КонецЕсли;
	мРеквизитыСумма = СтрРазделить(ИменаРеквизитовСумма, ",");
	
	СуммаДокумента = 0;
	Если ТабличныеЧасти <> Неопределено И мТабличныеЧасти.Количество() = 1 Тогда
	
		ТабличнаяЧасть = Документ[мТабличныеЧасти[0]];
		
		Если ТабличнаяЧасть.Количество() > 0 Тогда
		
			Для каждого РеквизитСумма Из мРеквизитыСумма Цикл
				СуммаДокумента = СуммаДокумента + ТабличнаяЧасть.Итог(РеквизитСумма);
			КонецЦикла;
		
		КонецЕсли; 
	
	Иначе
	
		Для каждого ТабличнаяЧастьМетаданные Из Документ.Метаданные().ТабличныеЧасти Цикл
			
			ИмяТабличнойЧасти = ТабличнаяЧастьМетаданные.Имя;
			ТабличнаяЧасть = Документ[ИмяТабличнойЧасти];
			
			Если ТабличнаяЧасть.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			Если ТабличныеЧасти = Неопределено Или мТабличныеЧасти.Найти(ИмяТабличнойЧасти) <> Неопределено Тогда
				
				Для каждого РеквизитСумма Из мРеквизитыСумма Цикл
					СуммаДокумента = СуммаДокумента + ТабличнаяЧасть.Итог(РеквизитСумма);
				КонецЦикла;
				
			ИначеЕсли мИсключитьТабличныеЧасти.Найти(ИмяТабличнойЧасти) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
		
		КонецЦикла; 
	
	КонецЕсли; 
	
	Возврат СуммаДокумента;

КонецФункции // ПолучитьСуммуДокумента()

// Возвращает текст сообщений пользователю, которые могли быть сформированы на стороне сервера при
// проверке заполнения объектов.
//
// Возвращаемое значение:
//   Строка   - Текст сформированных сообщений пользователю.
//
Функция ПолучитьТекстСообщенийПользователю() Экспорт
	
	текстСообщений = "";

	мСообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
	Для каждого сообщениеПользователю Из мСообщенияПользователю Цикл
	
		Если Не ПустаяСтрока(текстСообщений) Тогда
			текстСообщений = текстСообщений + Символы.ПС;
		КонецЕсли; 
		
		текстСообщений = текстСообщений + "	" + сообщениеПользователю.Текст;
	
	КонецЦикла; 
	
	Возврат текстСообщений;

КонецФункции // ПолучитьТекстСообщенийПользователю()

// Определяет наличие у переданного объекта реквизита с указанным именем. Объект обязательно должен
// иметь свойство "Реквизиты".
//
// Параметры
//  Объект  - Произвольный - Объект, для которого определяется наличие реквизита.
//  ИмяРеквизита  - Строка - Имя определяемого реквизита.
//
// Возвращаемое значение:
//   Булево   - Истина - объект содержит искомый реквизит; Ложь - в противном случае.
//
Функция ОпределитьНаличиеРеквизита(Объект, ИмяРеквизита) Экспорт
	
	Возврат Метаданные.НайтиПоТипу(ТипЗнч(Объект)).Реквизиты.Найти(ИмяРеквизита) <> Неопределено;
	
КонецФункции // ОпределитьНаличиеРеквизита()

// Формирует форматную строку для числа на основании объекта метаданных числового типа.
//
// Параметры
//  Объект  - КоллекцияОбъектовМетаданных, Произвольный - Коллекция объектов метаданных либо любой объект,
//                 для которого возможно получение его метаданных и имещий свойство "Реквизиты". По полю
//                 этого объекта будет сформирована форматная строка.
//  ИмяПоля  - Строка - Имя поля объекта.
//
// Возвращаемое значение:
//   Строка   - Сформированная форматная строка.
//
Функция СформироватьФорматЧислаПоОбъектуМетаданных(Объект, ИмяПоля) Экспорт

	Если ТипЗнч(Объект) = Тип("КоллекцияОбъектовМетаданных") Тогда
		КвалификаторЧисла = Объект[ИмяПоля].Тип.КвалификаторыЧисла;
	Иначе
		КвалификаторЧисла = Метаданные.НайтиПоТипу(ТипЗнч(Объект)).Реквизиты[ИмяПоля].Тип.КвалификаторыЧисла;
	КонецЕсли; 
	
	Возврат "ЧДЦ=" + КвалификаторЧисла.РазрядностьДробнойЧасти;

КонецФункции // СформироватьФорматЧислаПоОбъектуМетаданных()

// Формирует префикс номера документа в зависимости от реквизитов документа. Имеет смысл
// использовать только в документах с текстовым типом номера.
//
// Параметры
//  Объект  - ДокументОбъект.<Имя документа> - Документ, для которого устанавливается
//                 новый номер.
//  Префикс  - Строка - Через этот параметр будет возвращён полученный префикс номера.
//
Процедура УстановитьПрефиксНомераДокумента(Объект, Префикс) Экспорт
	
	ОбъектМетаданные = Объект.Метаданные();
	Если ОбъектМетаданные.ТипНомера = Метаданные.СвойстваОбъектов.ТипНомераДокумента.Строка Тогда
		
		ПрефиксКодовОбъектов = "";
		
		Если ОбъектМетаданные.Реквизиты.Найти("Организация") <> Неопределено Тогда
			
			Организация = Объект.Организация;
			Если ЗначениеЗаполнено(Организация) Тогда
				ПрефиксКодовОбъектов = СокрЛП(Организация.ПрефиксНомеровДокументов);
			КонецЕсли; 
			
		КонецЕсли;
		
		Префикс = ПрефиксКодовОбъектов;	// Префикс организации уже может быть с дефисом, поэтому ничего не добавляем.
		
	КонецЕсли; 
	
КонецПроцедуры // УстановитьПрефиксНомераДокумента()

// Определяет факт изменения данных документа, влияющих на формирование префикса
// номера документа.
//
// Параметры
//  ДокументОбъект  - ДокументОбъект.<Имя документа> - Документ, для которого проверяются
//                 изменения данных.
//
// Возвращаемое значение:
//   Булево   - Истина - Данные, влияющие на формирование префикса номера, изменились;
//					Ложь - в противном случае.
//
Функция ОпределитьИзменениеНомерообразующихДанныхДокумента(ДокументОбъект) Экспорт
	
	Если ДокументОбъект.ЭтоНовый() Тогда
		Возврат Истина;
	КонецЕсли; 
	
	ДокументОбъектМетаданные = ДокументОбъект.Метаданные();
	ДокументСсылка = ДокументОбъект.Ссылка;
	НачальнаяДата = ДокументСсылка.Дата;
	
	// Определим, изменилась ли организация.
	ОрганизацияИзменилась = ДокументОбъектМетаданные.Реквизиты.Найти("Организация") <> Неопределено И ДокументСсылка.Организация <> ДокументОбъект.Организация;
	
	ПериодСменыНомера = ДокументОбъект.Метаданные().ПериодичностьНомера;
	
	// В зависимости от установленной периодичности смены номеров определяем разницу
	// между старой и новой датами документа.
	Если ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		РазностьДат = НачалоГода(НачальнаяДата) - НачалоГода(ДокументОбъект.Дата);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		РазностьДат = НачалоКвартала(НачальнаяДата) - НачалоКвартала(ДокументОбъект.Дата);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		РазностьДат = НачалоМесяца(НачальнаяДата) - НачалоМесяца(ДокументОбъект.Дата);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
		РазностьДат = НачальнаяДата - ДокументОбъект.Дата;
	Иначе
		РазностьДат = Неопределено;
	КонецЕсли;
	
	Возврат Не (РазностьДат = 0 И Не ОрганизацияИзменилась);
	
КонецФункции // ОпределитьИзменениеНомерообразующихДанныхДокумента()

// Устанавливает основное значение подчинённых данных, например, основное соглашение с клиентом
// и т.п. Если во время вызова процедуры переданное значение уже являлось основным, запись об
// основном значении очищается.
// Процедура является вспомогательной для ОбщегоНазначенияКлиент.УстановитьОсновноеЗначениеПодчинённыхДанных().
//
// Параметры
//  Значение  - СправочникСсылка.<Имя справочника> - Значение подчинённого справочника, которое
//                 будет установлено основным для указанного вида.
//  Вид  - ПеречислениеСсылка.ВидыОсновныхЗначенийПодчинённыхДанных - Вид основных значений
//                 подчинённых данных.
//
Процедура УстановитьОсновноеЗначениеПодчинённыхДанных(значение, вид) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	менеджерЗаписи = РегистрыСведений.ОсновныеЗначенияПодчинённыхДанных.СоздатьМенеджерЗаписи();
	
	менеджерЗаписиОбъект = значение.Владелец;
	менеджерЗаписиПодразделение = Неопределено;
		
	Если ТипЗнч(значение) = Тип("СправочникСсылка.РасчетныеСчета") Тогда
		менеджерЗаписиОбъект = значение.Организация;
		менеджерЗаписиПодразделение = значение.Подразделение;
	ИначеЕсли ТипЗнч(значение) = Тип("СправочникСсылка.РасчетныеСчетаКонтрагентов") Тогда
		менеджерЗаписиПодразделение = значение.Подразделение;
	КонецЕсли;
	
	
	менеджерЗаписи.Объект = менеджерЗаписиОбъект;
	менеджерЗаписи.Подразделение = менеджерЗаписиПодразделение;
	менеджерЗаписи.Вид = Вид;
	менеджерЗаписи.Прочитать();
	
	создаватьНовуюЗапись = Истина;
	
	Если менеджерЗаписи.Выбран() И менеджерЗаписи.ОсновноеЗначение = значение Тогда
		
		менеджерЗаписи.Удалить();
		создаватьНовуюЗапись = Ложь;
		
	КонецЕсли; 
	
	Если создаватьНовуюЗапись Тогда
		
		менеджерЗаписи.Объект = менеджерЗаписиОбъект;
		менеджерЗаписи.Подразделение = менеджерЗаписиПодразделение;
		менеджерЗаписи.Вид = вид;
		менеджерЗаписи.ОсновноеЗначение = значение;
		
		менеджерЗаписи.Записать();
		
	КонецЕсли; 
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // УстановитьОсновноеЗначениеПодчинённыхДанных()

// Возвращает основное значение подчинённых данных, например, основное соглашение с клиентом и т.п.
// Процедура является вспомогательной для ОбщегоНазначенияКлиент.ПолучитьОсновноеЗначениеПодчинённыхДанных().
//
// Параметры
//  Объект  - Произвольный - Любое значение, для которого возвращается основное значение подчинённых данных.
//  Вид  - ПеречислениеСсылка.ВидыОсновныхЗначенийПодчинённыхДанных - Вид основных значений подчинённых
//                 данных.
//
// Возвращаемое значение:
//   Произвольный   - Основное значение подчинённых данных переданного объекта. Если для объекта не задано
//                 основное значение указанного вида, будет возвращено значение Неопределено.
//
Функция ПолучитьОсновноеЗначениеПодчинённыхДанных(Объект, Вид) Экспорт
	
	Если Не ЗначениеЗаполнено(Объект) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОсновныеЗначенияПодчинённыхДанных.ОсновноеЗначение
	|ИЗ
	|	РегистрСведений.ОсновныеЗначенияПодчинённыхДанных КАК ОсновныеЗначенияПодчинённыхДанных
	|ГДЕ
	|	ОсновныеЗначенияПодчинённыхДанных.Объект = &Объект
	|	И ОсновныеЗначенияПодчинённыхДанных.Вид = &Вид
	|	И (НЕ ОсновныеЗначенияПодчинённыхДанных.ОсновноеЗначение.ПометкаУдаления)";
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Вид", Вид);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ОсновноеЗначение;
		
	КонецЕсли; 
	
КонецФункции // ПолучитьОсновноеЗначениеПодчинённыхДанных()

#КонецОбласти

#Область УправлениеПроведением

// Выполняет инициализацию дополнительных свойств для проведения документа.
//
Процедура ИнициализироватьДополнительныеСвойстваДляПроведения(документСсылка, структураДополнительныеСвойства) Экспорт
	
	дляПроведения = Неопределено;
	Если Не структураДополнительныеСвойства.Свойство("ДляПроведения", дляПроведения) Тогда
		дляПроведения = Новый Структура;
	КонецЕсли;
	
	Если Не дляПроведения.Свойство("МетаданныеДокумента") Тогда
		дляПроведения.Вставить("МетаданныеДокумента", документСсылка.Метаданные());
	КонецЕсли;
	
	Если Не дляПроведения.Свойство("СтруктураВременныеТаблицы") Тогда
		дляПроведения.Вставить("СтруктураВременныеТаблицы", Новый Структура("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц));
	КонецЕсли;
	
	Если Не дляПроведения.Свойство("МоментВремени") Тогда
		дляПроведения.Вставить("МоментВремени", документСсылка.МоментВремени());
	КонецЕсли;

	
	структураДополнительныеСвойства.Вставить("ДляПроведения", дляПроведения);
	структураДополнительныеСвойства.Вставить("ТаблицыДляДвижений", Новый Структура);
	
КонецПроцедуры

// Формирует массив имен регистров, по которым есть движения документа.
//
Функция ПолучитьМассивИменИспользуемыхРегистров(регистратор, метаданныеДокумента)
	
	массивРегистров = Новый Массив;
	текстЗапроса = "";
	счетчикТаблиц = 0;
	счетчикЦикла = 0;
	всегоРегистров = метаданныеДокумента.Движения.Количество();
	
	Для каждого движение из метаданныеДокумента.Движения Цикл
		
		массивРегистров.Добавить(движение.Имя);
		Продолжить;
		
		Если СчетчикТаблиц > 0 Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|";
			
		КонецЕсли;
		
		СчетчикТаблиц = СчетчикТаблиц + 1;
		СчетчикЦикла = СчетчикЦикла + 1;
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|""" + Движение.Имя + """ КАК ИмяРегистра
		|
		|ИЗ " + Движение.ПолноеИмя() + "
		|
		|ГДЕ Регистратор = &Регистратор
		|";
		
		Если СчетчикТаблиц = 256 ИЛИ СчетчикЦикла = ВсегоРегистров Тогда
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			
			ТекстЗапроса  = "";
			СчетчикТаблиц = 0;
			
			Если МассивРегистров.Количество() = 0 Тогда
				
				МассивРегистров = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра");
				
			Иначе
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					МассивРегистров.Добавить(Выборка.ИмяРегистра);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат массивРегистров;
	
КонецФункции // ПолучитьМассивИменИспользуемыхРегистров()

// Выполняет подготовку наборов записей документа.
//
Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(структураОбъект) Экспорт
	
	Для каждого наборЗаписей из структураОбъект.Движения Цикл
		
		Если ТипЗнч(наборЗаписей) = Тип("КлючИЗначение") Тогда
			
			наборЗаписей = наборЗаписей.Значение;
			
		КонецЕсли;
		
		Если наборЗаписей.Количество() > 0 Тогда
			
			наборЗаписей.Очистить();
			
		КонецЕсли;
		
	КонецЦикла;
	
	массивИменРегистров = ПолучитьМассивИменИспользуемыхРегистров(структураОбъект.Ссылка, структураОбъект.ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента);
	
	Для каждого имяРегистра из массивИменРегистров Цикл
		
		структураОбъект.Движения[имяРегистра].Записывать = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыФормированияДвиженийРегистров

// Выполняет движения регистра накопления имяРегистра.
//
Процедура ОтразитьДвиженияПоРегистрамНакопления(дополнительныеСвойства, движения, отказ) Экспорт
	
	запрос = Новый Запрос;
	запрос.МенеджерВременныхТаблиц = дополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Для каждого наборЗаписей из движения Цикл
		
		имяВременнойТаблицы = "ВременнаяТаблица" + наборЗаписей.ЭтотОбъект.Метаданные().Имя;
		
		Если дополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Таблицы.Найти(имяВременнойТаблицы) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		запрос.Текст =
		"ВЫБРАТЬ *
		|ИЗ
		|	ВременнаяТаблицаСДвижениями КАК ВременнаяТаблица";
		
		запрос.Текст = СтрЗаменить(запрос.Текст, "ВременнаяТаблицаСДвижениями", имяВременнойТаблицы);
		
		таблицаДвижений = запрос.Выполнить().Выгрузить();
		
		Если отказ
			Или таблицаДвижений.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		наборЗаписей.Записывать = Истина;
		наборЗаписей.Загрузить(таблицаДвижений);
		
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти
