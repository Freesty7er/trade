
#Область УстановкаАвторстваИНомераДокумента

Процедура УстановкаАвторстваДокументаПередЗаписью(источник, отказ, режимЗаписи, режимПроведения) Экспорт
	
	#Если Не ВнешнееСоединение Тогда
		
		// СДЕЛАТЬ: Источником для события должен являться ДокументОбъект, а не отдельно выбранные документы.
		// Нужно для всех документов внедрить общие реквизиты авторства и установить правильный источник
		// в свойствах подписки на событие.
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если источник.ОбменДанными.Загрузка Тогда
			Возврат;
		КонецЕсли; 
		
		этоНовыйОбъект = источник.ЭтоНовый();
		источник.ДополнительныеСвойства.Вставить("ЭтоНовый", этоНовыйОбъект);
		
		// При массовой обработке документов редактора документа не изменяем.
		обработкаДокументов = Неопределено;
		Если источник.ДополнительныеСвойства.Свойство("ОбработкаДокументов", обработкаДокументов)
			И обработкаДокументов Тогда
			
			Возврат;
		КонецЕсли; 
		
		// Если документ записывается для регистрации редактора документа - повторно ничего не делаем.
		//изменениеРедактораДокумента = Неопределено;
		//Если источник.ДополнительныеСвойства.Свойство("ИзменениеРедактораДокумента", изменениеРедактораДокумента)
		//	И изменениеРедактораДокумента Тогда
		//	
		//	Возврат;
		//КонецЕсли; 
		
		// Автора документа установим перед записью документа дабы избежать лишней записи документа.
		Если этоНовыйОбъект Тогда
			источник.Автор = ПараметрыСеанса.ТекущийПользователь;
			
			Если Метаданные.ОбщиеРеквизиты.ДатаСозданияДокумента.Состав.Найти(источник.Метаданные()).Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать Тогда
				источник.ДатаСозданияДокумента = ТекущаяДатаСеанса();
				источник.ДатаРедактированияДокумента = Неопределено;
			КонецЕсли;
			
		Иначе
			объектИзменён = ПроверкаДанныхСервер.ОбъектИзменён(источник);
			
			Если объектИзменён Тогда
				источник.Редактор = ПараметрыСеанса.ТекущийПользователь;
				
				Если Метаданные.ОбщиеРеквизиты.ДатаРедактированияДокумента.Состав.Найти(источник.Метаданные()).Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать Тогда
					источник.ДатаРедактированияДокумента = ТекущаяДатаСеанса();
				КонецЕсли;
				
			КонецЕсли;
			
			источник.ДополнительныеСвойства.Вставить("ОбъектИзменён", объектИзменён);
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

Процедура УстановкаАвторстваДокументаПриЗаписи(источник, отказ) Экспорт
	
	// СДЕЛАТЬ: Источником для события должен являться ДокументОбъект, а не отдельно выбранные документы.
	// Нужно для всех документов внедрить общие реквизиты авторства и установить правильный источник
	// в свойствах подписки на событие.
	
	Если источник.ОбменДанными.Загрузка Или 1=1 Тогда
		Возврат;
	КонецЕсли; 
	
	этоНовыйОбъект = Ложь;
	источник.ДополнительныеСвойства.Свойство("ЭтоНовый", этоНовыйОбъект);
	
	// При массовой обработке документов редактора документа не изменяем.
	обработкаДокументов = Неопределено;
	Если источник.ДополнительныеСвойства.Свойство("ОбработкаДокументов", обработкаДокументов)
		И обработкаДокументов
		И Не этоНовыйОбъект Тогда
		
		Возврат;
	КонецЕсли; 
	
	// Если документ записывается для регистрации редактора документа - повторно ничего не делаем.
	изменениеРедактораДокумента = Неопределено;
	Если источник.ДополнительныеСвойства.Свойство("ИзменениеРедактораДокумента", изменениеРедактораДокумента)
		И изменениеРедактораДокумента Тогда
		
		источник.ДополнительныеСвойства.ИзменениеРедактораДокумента = Ложь;
		Возврат;
		
	КонецЕсли; 
	
	Если Не этоНовыйОбъект Тогда
		
		Если ПроверкаДанныхСервер.ОбъектИзменён(источник) Тогда
			
			источник.Редактор = ПараметрыСеанса.ТекущийПользователь;
			источник.ДополнительныеСвойства.Вставить("ИзменениеРедактораДокумента", Истина);
			источник.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура УстановкаНовогоНомераДокументаПриУстановкеНовогоНомера(Источник, СтандартнаяОбработка, Префикс) Экспорт
	
	// СДЕЛАТЬ: После внедрения механизма нумерации для всех документов источник в подписке на
	// событие нужно изменить на ДокументОбъект.
	
	Если Источник.ЭтоНовый() Или ОбщегоНазначенияСервер.ОпределитьИзменениеНомерообразующихДанныхДокумента(Источник) Тогда
		ОбщегоНазначенияСервер.УстановитьПрефиксНомераДокумента(Источник, Префикс);
	Иначе
		
		СтандартнаяОбработка = Ложь;
		Источник.Номер = Источник.Ссылка.Номер;
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаАвтораИРедактораСправочника

Процедура УстановкаАвторстваСправочникаПередЗаписью(источник, отказ) Экспорт
	
	// СДЕЛАТЬ: Источником для события должен являться СправочникОбъект, а не отдельно выбранные справочники.
	// Нужно для всех справочников внедрить общие реквизиты авторства и установить правильный источник
	// в свойствах подписки на событие.
	
	Если источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли; 
	
	этоНовыйОбъект = источник.ЭтоНовый();
	источник.ДополнительныеСвойства.Вставить("ЭтоНовый", этоНовыйОбъект);
	
	// При массовой обработке справочника, редактора не меняем.
	обработкаСправочников = Неопределено;
	Если источник.ДополнительныеСвойства.Свойство("ОбработкаСправочников", обработкаСправочников)
		И обработкаСправочников Тогда
		
		Возврат;
	КонецЕсли; 
	
	Если этоНовыйОбъект Тогда
		источник.Автор = ПараметрыСеанса.ТекущийПользователь;
		источник.Редактор = ПараметрыСеанса.ТекущийПользователь;
	Иначе
		Если ПроверкаДанныхСервер.ОбъектИзменён(источник) Тогда
			источник.Редактор = ПараметрыСеанса.ТекущийПользователь;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры


#КонецОбласти 

#Область РегистрацияИзмененийДляПОС

Процедура РегистрацияИзмененийОбъектаПриЗаписиПОС(источник, отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.Контрагенты") Тогда
		Р_ПОСПриЗаписиСправочникаКонтрагенты(Источник);
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.Номенклатура") Тогда
		Р_ПОСПриЗаписиСправочникаНоменклатуры(Источник);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.УстановкаЦенНоменклатуры") Тогда
		Р_ПОСПриЗаписиУстановкиЦенНоменклатуры(Источник);	
	КонецЕсли;
	
КонецПроцедуры

//	Р_ПОСПриЗаписиСправочникаКонтрагенты()
//
Процедура Р_ПОСПриЗаписиСправочникаКонтрагенты(справочникОбъект)
	
	Если Не СправочникОбъект.ЭтоГруппа Тогда
		
		Если СправочникОбъект.Поставщик И Не СправочникОбъект.ЭтоСотрудник Тогда
			// регистрация изменений для всех узлов ... "ПланыОбмена.Р_POS"
			
			массивУзлов = Новый Массив;
			
			Выборка = ПланыОбмена.Р_POS.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.Ссылка = ПланыОбмена.Р_POS.ЭтотУзел() Тогда
					Продолжить;
				КонецЕсли;
				
				массивУзлов.Добавить(Выборка.Ссылка);
				
			КонецЦикла;
			
			Если Не массивУзлов.Количество() = 0 Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(массивУзлов, СправочникОбъект.Ссылка);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//	Р_ПОСПриЗаписиСправочникаНоменклатуры()
//
Процедура Р_ПОСПриЗаписиСправочникаНоменклатуры(справочникОбъект)
	
	Если Не СправочникОбъект.ЭтоГруппа Тогда
		
		Если СправочникОбъект.Родитель.СчетУчета = ПланыСчетов.Внутренний.Товары Тогда
			// регистрация изменений для всех узлов ... "ПланыОбмена.Р_POS"
			
			массивУзлов = Новый Массив;
			
			Выборка = ПланыОбмена.Р_POS.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.Ссылка = ПланыОбмена.Р_POS.ЭтотУзел() Тогда
					Продолжить;
				КонецЕсли;
				
				массивУзлов.Добавить(Выборка.Ссылка);
				
			КонецЦикла;
			
			Если Не массивУзлов.Количество() = 0 Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(массивУзлов, СправочникОбъект.Ссылка);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура Р_ПОСПриЗаписиУстановкиЦенНоменклатуры(документОбъект)
	
	// проверим, чтобы это было по рознице.
	параметрыПодразделения = РегистрыСведений.ПараметрыУчетаПоПодразделениям
	.ПолучитьПоследнее(ТекущаяДатаСеанса(), Новый Структура("СтруктурнаяЕдиница", документОбъект.Подразделение));
	
	Если (Не параметрыПодразделения.ЭтоРозница) Тогда
		Возврат;
	КонецЕсли;
	
	Если документОбъект.Дата > КонецДня(ТекущаяДатаСеанса()) Тогда
		// отложим регистрацию
		менеджерЗаписи = РегистрыСведений.ОтложеннаяРегистрацияИзменений.СоздатьМенеджерЗаписи();
		менеджерЗаписи.Заполнить(Неопределено);
		
		менеджерЗаписи.Подразделение = документОбъект.Подразделение;
		менеджерЗаписи.Документ = документОбъект.Ссылка;
		менеджерЗаписи.Записать();
	Иначе
		запрос = Новый Запрос;
		
		#Область ТекстЗапроса
		
		запрос.Текст =
		"ВЫБРАТЬ
		|	Р_POS.Ссылка
		|ИЗ
		|	ПланОбмена.Р_POS КАК Р_POS
		|ГДЕ
		|	Р_POS.ПОС.Подразделение = &Подразделение";
		
		#КонецОбласти
		
		запрос.УстановитьПараметр("Подразделение", документОбъект.Подразделение);
		
		результатЗапроса = запрос.Выполнить();
		
		Если Не результатЗапроса.Пустой() Тогда
			
			массивУзлов = Новый Массив;
			
			выборка = результатЗапроса.Выбрать();
			Пока выборка.Следующий() Цикл
				
				массивУзлов.Добавить(выборка.Ссылка);
				
			КонецЦикла;
			
			Если Не массивУзлов.Количество() = 0 Тогда
				
				ПланыОбмена.ЗарегистрироватьИзменения(массивУзлов, документОбъект);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры // Р_ПОСПриЗаписиУстановкиЦенНоменклатуры()

#КонецОбласти

#Область РегистрацияИзмененийДляМуравьинойЛогистики

Процедура РегистрацияДляМуравьинойЛогистикиПриЗаписи(источник, отказ) Экспорт
	
	Если источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(источник) = Тип("ДокументОбъект.КпкЗаявка") Тогда
		
		Если источник.Проведен Тогда
			
			узел = ПланыОбмена.ОбменСМуравьинойЛогистикой.НайтиПоРеквизиту("Подразделение", источник.Подразделение);
			
			// регистрация с заполненным маршрутом выполняется только в режиме отладки
			// ИнтервалВыгрузки = -1, означает что выгрузка отключена
			Если  (ЗначениеЗаполнено(источник.МаршрутРазвоза) И Не узел.РежимОтладки И Не источник.МаршрутРазвоза = Справочники.МаршрутыРазвоза.ПустойМаршрут) Или узел.Пустая() Или узел.ИнтервалВыгрузки = -1 Тогда
				Возврат;
			КонецЕсли;
			
			
			ПланыОбмена.ЗарегистрироватьИзменения(узел, источник.Ссылка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СвязанныеДокументы

Процедура СвязанныеДокументыПередЗаписью(источник, отказ, режимЗаписи, режимПроведения) Экспорт
	
	#Если Не ВнешнееСоединение Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если источник.ОбменДанными.Загрузка Тогда
			Возврат;
		КонецЕсли; 
		
		Если Не ПолучитьФункциональнуюОпцию("ЗапретУдаленияСвязанныхДокументов", Новый Структура("Период, Подразделение", источник.Дата, источник.Подразделение)) Тогда
			Возврат;
		КонецЕсли;
		
		этоНовыйОбъект = источник.ЭтоНовый();
		источник.ДополнительныеСвойства.Вставить("ЭтоНовый", этоНовыйОбъект);
		
		// При массовой обработке документов пропускаем
		обработкаСвязанныхДокументов = Неопределено;
		Если источник.ДополнительныеСвойства.Свойство("ОбработкаСвязанныхДокументов", обработкаСвязанныхДокументов)
			И обработкаСвязанныхДокументов Тогда
			
			Возврат;
		КонецЕсли; 
		
		//источник.ПринадлежностьПоследовательностям.СвязанныеДокументы.Очистить();
		
		// выполним регистрацию в последовательности для новых документов
		Если этоНовыйОбъект Тогда
			
			запрос = Новый Запрос;
			
			#Область ТекстЗапроса
			
			запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	СвязанныеДокументы.КлючСвязи
			|ИЗ
			|	Последовательность.СвязанныеДокументы КАК СвязанныеДокументы
			|ГДЕ
			|	СвязанныеДокументы.Регистратор.Ссылка = &ДокументОснование
			|
			|УПОРЯДОЧИТЬ ПО
			|	СвязанныеДокументы.МоментВремени";
			
			#КонецОбласти
			
			//Если источник.созданАвтоматически Тогда
			//	запрос.УстановитьПараметр("ДокументОснование", источник.ДокументОснование.ДокументОснование);
			//Иначе
				запрос.УстановитьПараметр("ДокументОснование", источник.ДокументОснование);
			//КонецЕсли;
			
			результатЗапроса = запрос.Выполнить();
			
			Если Не результатЗапроса.Пустой() Тогда
				
				ключСвязи = результатЗапроса.Выгрузить()[0].КлючСвязи;
				
			Иначе
				
				ключСвязи = Новый УникальныйИдентификатор();
				
				источник.УстановитьСсылкуНового(Документы[источник.Метаданные().Имя].ПолучитьСсылку(ключСвязи));
				
			КонецЕсли;
			
			//последовательностьЗапись = источник.ПринадлежностьПоследовательностям.СвязанныеДокументы.Добавить();
			последовательностьЗапись = источник.ПринадлежностьПоследовательностям.СвязанныеДокументы[0];
			последовательностьЗапись.Период = источник.Дата;
			последовательностьЗапись.КлючСвязи = ключСвязи;
			
		ИначеЕсли (источник.ПометкаУдаления <> источник.Ссылка.ПометкаУдаления 
			Или режимЗаписи = РежимЗаписиДокумента.Проведение И Не источник.Ссылка.Проведен
			Или режимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И источник.Ссылка.Проведен) Тогда
			
			запрос = Новый Запрос;
			
			#Область ТекстЗапроса
			
			запрос.Текст = 
			"ВЫБРАТЬ
			|	СвязанныеДокументы.Регистратор
			|ИЗ
			|	Последовательность.СвязанныеДокументы КАК СвязанныеДокументы
			|ГДЕ
			|	СвязанныеДокументы.КлючСвязи ПОДОБНО &КлючСвязи
			|	И НЕ СвязанныеДокументы.Регистратор.СозданАвтоматически";
			
			#КонецОбласти
			
			запрос.УстановитьПараметр("КлючСвязи", "%"+источник.Ссылка.УникальныйИдентификатор()+"%");
			
			результатЗапроса = запрос.Выполнить();
			
			Если результатЗапроса.Пустой() И источник.ПринадлежностьПоследовательностям.СвязанныеДокументы.Количество() > 0 Тогда
				
				Если Не режимЗаписи = РежимЗаписиДокумента.Проведение Тогда
					Сообщить("Не удалось записать " + источник + ", документ не является первым в цепочке связанных документов.");
					отказ = истина;
				КонецЕсли;
				
			Иначе
				
				выборка = результатЗапроса.Выбрать();
				
				Пока выборка.Следующий() Цикл
					
					Если Не выборка.Регистратор = источник.Ссылка Тогда
						
						документОбъект = выборка.Регистратор.ПолучитьОбъект();
						
						документОбъект.ДополнительныеСвойства.Вставить("ОбработкаСвязанныхДокументов", Истина);
						
						документОбъект.ПометкаУдаления = источник.ПометкаУдаления;
						
						документОбъект.Записать(режимЗаписи);
						
						Если документОбъект.ПометкаУдаления Тогда
							текстСообщения = НСтр("ru = ' помечен на удаление'");
						Иначе
							текстСообщения = НСтр("ru = ' снята пометка на удаление'");
						КонецЕсли;
						
						Сообщить("" + документОбъект + текстСообщения);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
		
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

Процедура СвязанныеДокументыПриЗаписи(источник, отказ) Экспорт
	
	// удалить_вместе с подпиской на событие
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаДатыДокумента

Процедура ПроверкаДатыДокументаОбработкаПроведенияОбработкаПроведения(источник, отказ, режимПроведения) Экспорт
	
	#Если Не ВнешнееСоединение Тогда
		
		// Проверка выполняется только при интерактивной записи документа
		интерактивнаяЗаписьДокумента = Неопределено;
		Если источник.ДополнительныеСвойства.Свойство("ИнтерактивнаяЗаписьДокумента", интерактивнаяЗаписьДокумента)
			И интерактивнаяЗаписьДокумента Тогда
			
			// проверка "даты документа"
			Если КонецДня(источник.Дата) > КонецДня(ТекущаяДатаСеанса()) Тогда
				текстСообщения = НСтр("ru = 'Проведение документа невозможно будущей датой.'");
				ПроверкаДанныхКлиентСервер.СообщитьОбОшибке(отказ, текстСообщения, источник, "Дата");
			КонецЕсли;
			
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаПодразделенияДокумента

Процедура ПроверкаПодразделенияПередЗаписьюПередЗаписью(источник, отказ, режимЗаписи, режимПроведения) Экспорт
	
	#Если Не ВнешнееСоединение Тогда
		
		Если источник.ОбменДанными.Загрузка Тогда
			Возврат;
		КонецЕсли;
		
		// для документво "созданных автоматически" не нужно выполнять проверку
		Если Не источник.Метаданные().Реквизиты.Найти("СозданАвтоматически") = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Не источник.Метаданные().Реквизиты.Найти("Подразделение") = Неопределено Тогда
			
			Если ПараметрыСеанса.ДоступныеПодразделения.Найти(источник.Подразделение) = Неопределено Тогда
				
				ПроверкаДанныхКлиентСервер.СообщитьОбОшибке(отказ, "Неверно указано ""Подразделение""", источник, "Подразделение");				
				
			КонецЕсли;
		КонецЕсли;
		
				
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область РазделительУчёта

Процедура УстановкаРазделителяУчётаПриПроведенииОбработкаПроведения(источник, отказ, режимПроведения) Экспорт
	
	Если источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	параметрыПоискаРазделителяУчёта = РазделительУчётаСервер.ПараметрыПоискаРазделителяУчёта();
	
	Для Каждого наборЗаписей Из источник.Движения Цикл
		
		Если наборЗаписей.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		значенияПараметровПоискаРазделителяУчёта = параметрыПоискаРазделителяУчёта.Получить(ТипЗнч(наборЗаписей));
		
		Если Не значенияПараметровПоискаРазделителяУчёта = Неопределено Тогда
			наборЗаписей.Записывать = Истина;
		КонецЕсли;
		
		Если ТипЗнч(значенияПараметровПоискаРазделителяУчёта) = Тип("Структура") Тогда
			
			РазделительУчётаСервер.ЗаполнитьРазделительУчёта(наборЗаписей, значенияПараметровПоискаРазделителяУчёта);
			
		ИначеЕсли ТипЗнч(значенияПараметровПоискаРазделителяУчёта) = Тип("Массив") Тогда
			
			заполненПоУмолчанию = Истина;
			
			Для индекс = 1 По значенияПараметровПоискаРазделителяУчёта.Количество() Цикл
				
				РазделительУчётаСервер.ЗаполнитьРазделительУчёта(наборЗаписей, значенияПараметровПоискаРазделителяУчёта[индекс-1], заполненПоУмолчанию);
				
				Если Не заполненПоУмолчанию Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		
		
	КонецЦикла;
	
	
КонецПроцедуры

#КонецОбласти

#Область ПоследовательностьЗапасы

Процедура ОбработкаПоследовательностиЗапасыПриПроведенииОбработкаПроведения(источник, отказ, режимПроведения) Экспорт
	
	возврат;
	
	Если Не отказ Тогда
		
		// ПЕРЕДЕЛАТЬ: "структура полей" тоже должна быть, т.к. склад в некоторых документах в табличной части
		// а вообще за подобные вещи должен отвечать менеджер документа (как абстракция)
		параметрыЗапросаПоТипуДокумента = Новый Соответствие;
		параметрыЗапросаПоТипуДокумента.Вставить(Тип("ДокументОбъект.РасходнаяНакладная"), "Документ.РасходнаяНакладная.Запасы");
		параметрыЗапросаПоТипуДокумента.Вставить(Тип("ДокументОбъект.АктСписания"), "Документ.АктСписания.Запасы");
		
		запрос = Новый Запрос;
		
		#Область ТекстЗапроса
		
		запрос.Текст =
		"ВЫБРАТЬ
		|	СоставДокумента.Ссылка.Подразделение,
		|	СоставДокумента.Номенклатура.Родитель.Склад КАК МестоХранения,
		|	СоставДокумента.Номенклатура.Родитель.СчетУчета КАК СчетУчета
		|ИЗ
		|	&СоставДокумента КАК СоставДокумента
		|ГДЕ
		|	СоставДокумента.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	СоставДокумента.Номенклатура.Родитель.СчетУчета,
		|	СоставДокумента.Ссылка.Подразделение,
		|	СоставДокумента.Номенклатура.Родитель.Склад";
		
		запрос.Текст = СтрЗаменить(запрос.Текст, "&СоставДокумента", параметрыЗапросаПоТипуДокумента.Получить(ТипЗнч(источник)));
		
		#КонецОбласти 
		
		запрос.УстановитьПараметр("Ссылка", источник.Ссылка);
		
		результатЗапроса = запрос.Выполнить();
		
		источник.ПринадлежностьПоследовательностям.Запасы.Загрузить(результатЗапроса.Выгрузить());
		
		отбор = Новый Структура ("Подразделение, МестоХранения, СчетУчета");
		
		выборка = результатЗапроса.Выбрать();
		Пока выборка.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(отбор, выборка);
			
			Последовательности.Запасы.УстановитьГраницу(источник.МоментВремени(), отбор);
			
		КонецЦикла;
		
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти
