функция ПолучитьСтруктуруПараметровПоискаРазделителяУчёта()
	Возврат Новый Структура("НаименованиеТаблицыКлюча, РеквизитКлюча, НаименованиеКолонкиНабора");
КонецФункции

функция ПараметрыПоискаРазделителяУчёта() Экспорт
	
	результат = Новый Соответствие;
	
	структураПараметров = ПолучитьСтруктуруПараметровПоискаРазделителяУчёта();
	
	структураПараметров.Вставить("НаименованиеТаблицыКлюча", "КонтрагентыПоставщики");
	структураПараметров.Вставить("РеквизитКлюча", "Контрагент");
	структураПараметров.Вставить("НаименованиеКолонкиНабора", "Контрагент");
	
	результат.Вставить(Тип("РегистрНакопленияНаборЗаписей.ВзаиморасчетыСПоставщиками"), структураПараметров);
	
	структураПараметров = ПолучитьСтруктуруПараметровПоискаРазделителяУчёта();
	
	структураПараметров.Вставить("НаименованиеТаблицыКлюча", "Склады");
	структураПараметров.Вставить("РеквизитКлюча", "Склад");
	структураПараметров.Вставить("НаименованиеКолонкиНабора", "Склад");
	
	результат.Вставить(Тип("РегистрНакопленияНаборЗаписей.ПартииТоваровНаСкладах"), структураПараметров);
	
	структураПараметров = ПолучитьСтруктуруПараметровПоискаРазделителяУчёта();
	
	структураПараметров.Вставить("НаименованиеТаблицыКлюча", "ДенежныеСчета");
	структураПараметров.Вставить("РеквизитКлюча", "ДенежныйСчет");
	структураПараметров.Вставить("НаименованиеКолонкиНабора", "ДенежныйСчет");
	
	результат.Вставить(Тип("РегистрНакопленияНаборЗаписей.ДенежныеСредства"), структураПараметров);
	
	// РегистрНакопленияНаборЗаписей.ВзаиморасчетыСПокупателями
	массивСтруктурыПараметров = Новый Массив;
	
	структураПараметров = ПолучитьСтруктуруПараметровПоискаРазделителяУчёта();
	
	структураПараметров.Вставить("НаименованиеТаблицыКлюча", "КонтрагентыПокупатели");
	структураПараметров.Вставить("РеквизитКлюча", "Контрагент");
	структураПараметров.Вставить("НаименованиеКолонкиНабора", "Контрагент");
	
	массивСтруктурыПараметров.Добавить(структураПараметров);
	
	структураПараметров = ПолучитьСтруктуруПараметровПоискаРазделителяУчёта();
	
	структураПараметров.Вставить("НаименованиеТаблицыКлюча", "Менеджеры");
	структураПараметров.Вставить("РеквизитКлюча", "Менеджер");
	структураПараметров.Вставить("НаименованиеКолонкиНабора", "Менеджер");
	
	массивСтруктурыПараметров.Добавить(структураПараметров);
	
	результат.Вставить(Тип("РегистрНакопленияНаборЗаписей.ВзаиморасчетыСПокупателями"), массивСтруктурыПараметров);
	
	структураПараметров = ПолучитьСтруктуруПараметровПоискаРазделителяУчёта();
	
	структураПараметров.Вставить("НаименованиеТаблицыКлюча", "Менеджеры");
	структураПараметров.Вставить("РеквизитКлюча", "Менеджер");
	структураПараметров.Вставить("НаименованиеКолонкиНабора", "Менеджер");
	
	результат.Вставить(Тип("РегистрНакопленияНаборЗаписей.ЗаказыПокупателей"), структураПараметров);
	
	// РегистрНакопленияНаборЗаписей.Продажи
	массивСтруктурыПараметров = Новый Массив;
	
	структураПараметров = ПолучитьСтруктуруПараметровПоискаРазделителяУчёта();
	
	структураПараметров.Вставить("НаименованиеТаблицыКлюча", "КонтрагентыПокупатели");
	структураПараметров.Вставить("РеквизитКлюча", "Контрагент");
	структураПараметров.Вставить("НаименованиеКолонкиНабора", "Контрагент");
	
	массивСтруктурыПараметров.Добавить(структураПараметров);
	
	структураПараметров = ПолучитьСтруктуруПараметровПоискаРазделителяУчёта();
	
	структураПараметров.Вставить("НаименованиеТаблицыКлюча", "Менеджеры");
	структураПараметров.Вставить("РеквизитКлюча", "Менеджер");
	структураПараметров.Вставить("НаименованиеКолонкиНабора", "Менеджер");
	
	массивСтруктурыПараметров.Добавить(структураПараметров);
	
	результат.Вставить(Тип("РегистрНакопленияНаборЗаписей.Продажи"), массивСтруктурыПараметров);
	
	Возврат результат;
	
КонецФункции

Процедура ЗаполнитьРазделительУчёта(наборЗаписей, значенияПараметровПоискаРазделителяУчёта = Неопределено, заполненПоУмолчанию = Неопределено) Экспорт
	
	заполненПоУмолчанию = Истина;
	
	Если наборЗаписей.Метаданные().Измерения.Найти("РазделительУчёта") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	разделительУчётаПоУмолчанию = Константы.РазделительУчётаПоУмолчанию.Получить();
	
	соответствияКлючей = Новый Соответствие;
	
	Если Не значенияПараметровПоискаРазделителяУчёта = Неопределено Тогда
		// получим соответсвия ключу
		массивКлючей = наборЗаписей.ВыгрузитьКолонку(значенияПараметровПоискаРазделителяУчёта.НаименованиеКолонкиНабора);
		
		запрос = Новый Запрос;
		
		#Область ТекстЗапроса
		
		запрос.Текст =
		"ВЫБРАТЬ
		|	&Ключ КАК Ключ,
		|	РазделителиУчёта.Ссылка КАК Значение
		|ИЗ
		|	&РазделителиУчёта КАК РазделителиУчёта
		|ГДЕ
		|	&Ключ В (&ЗначенияКлючей)";
		
		#КонецОбласти
		
		запрос.Текст = СтрЗаменить(запрос.Текст, "&Ключ", "РазделителиУчёта." + значенияПараметровПоискаРазделителяУчёта.РеквизитКлюча);
		запрос.Текст = СтрЗаменить(запрос.Текст, "&РазделителиУчёта", "Справочник.РазделителиУчёта." + значенияПараметровПоискаРазделителяУчёта.НаименованиеТаблицыКлюча);
		
		запрос.УстановитьПараметр("ЗначенияКлючей", наборЗаписей.ВыгрузитьКолонку(значенияПараметровПоискаРазделителяУчёта.НаименованиеКолонкиНабора));
		
		результатЗапроса = запрос.Выполнить();
		
		выборка = результатЗапроса.Выбрать();
		Пока выборка.Следующий() Цикл
			соответствияКлючей.Вставить(выборка.Ключ, выборка.Значение);	
		КонецЦикла;
		
	КонецЕсли;
	
	
	Для Каждого записьНабора Из наборЗаписей Цикл
		
		Если значенияПараметровПоискаРазделителяУчёта = Неопределено Тогда
			// заполнение по умолчанию
			значениеЗаполнения = разделительУчётаПоУмолчанию;
		Иначе
			// ищем соответствие ...
			значениеЗаполнения = соответствияКлючей.Получить(записьНабора[значенияПараметровПоискаРазделителяУчёта.НаименованиеКолонкиНабора]);
			
			Если значениеЗаполнения = Неопределено Тогда
				значениеЗаполнения = разделительУчётаПоУмолчанию;
			Иначе
				заполненПоУмолчанию = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		записьНабора.РазделительУчёта = значениеЗаполнения;
		
	КонецЦикла;
	
КонецПроцедуры