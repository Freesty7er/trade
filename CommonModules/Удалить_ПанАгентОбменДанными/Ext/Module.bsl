
//// <Описание процедуры>
////
//// Параметры:
////  <Параметр1>  - <Тип.Вид> - <описание параметра>
////                 <продолжение описания параметра>
////  <Параметр2>  - <Тип.Вид> - <описание параметра>
////                 <продолжение описания параметра>
////
//Процедура ВыполнитьОбмен() Экспорт
//	
//	папкаФайловВыгрузки = ПолучитьИмяВременногоФайла("");

//	//Адрес = ПоместитьВоВременноеХранилище(Неопределено);
//	фоновоеЗадание = ФоновыеЗадания.Выполнить();
//	
//	Попытка
//		УдалитьФайлы(папкаФайловВыгрузки);
//	Исключение
//	КонецПопытки;

//КонецПроцедуры // ВыполнитьОбмен()

#Область ОчередьОбмена

// Инициирует фоновое задание для выполнения обмена данными согласно очереди обмена данными.
//
Процедура ЗапуститьВыполнениеОчередиОбменаДанными()

	ключЗадания = "ПанАгентВыполнениеОчередиОбменаДанными";
	активныеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Ключ,Состояние", ключЗадания, СостояниеФоновогоЗадания.Активно));
	
	Если активныеФоновыеЗадания.Количество() = 0 Тогда
		ФоновыеЗадания.Выполнить("ПанАгентСервер.ВыполнитьОчередьОбменаДанными",, ключЗадания, НСтр("ru = 'Выполнение очереди обмена данными'"));
	КонецЕсли;	

КонецПроцедуры // ЗапуститьВыполнениеОчередиОбменаДанными()

// Обрабатывает очередь обмена данными и выполняет операции выгрузки и загрузки
// данных согласно параметрам очереди. Всегда выполняются только те задания, у
// которых реквизит ЗаданиеАктивно = Истина. Задания выполняются по убыванию даты
// добавления. Первыми выполняются задания с высоким приоритетом.
//
Процедура ВыполнитьОчередьОбменаДанными() Экспорт

	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПанАгентОчередьОбменаДанными.Агент,
	|	ПанАгентОчередьОбменаДанными.ПрофильОбменаДанными,
	|	ПанАгентОчередьОбменаДанными.НаправлениеОбмена
	|ИЗ
	|	РегистрСведений.ПанАгентОчередьОбменаДанными КАК ПанАгентОчередьОбменаДанными
	|ГДЕ
	|	ПанАгентОчередьОбменаДанными.ЗаданиеАктивно
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПанАгентОчередьОбменаДанными.ВысокийПриоритет УБЫВ,
	|	ПанАгентОчередьОбменаДанными.ДатаЗадания";
	#КонецОбласти
	
	//обработкаБПАГПанАгентЦентрУправленияТест = Обработки.БПАГПанАгентЦентрУправленияТест.Создать();
	//
	//таблицаАгенты = Новый ТаблицаЗначений;
	//таблицаАгенты.Колонки.Добавить("Агент");
	//таблицаАгенты.Колонки.Добавить("Код");
	
	очередьОбменаПустая = Ложь;
	Пока Не очередьОбменаПустая Цикл
	
		результат = запрос.Выполнить();
		Если результат.Пустой() Тогда
			очередьОбменаПустая = Истина;
		Иначе
		
			выборка = результат.Выбрать();
			выборка.Следующий();
			
			//Если выборка.НаправлениеОбмена = Перечисления.ПанАгентНаправленияОбменаДанными.Выгрузка Тогда
			//	таблицаОбъектов = выборка.ПрофильОбменаДанными.ОбъектыВыгрузки;
			//Иначе
			//	таблицаОбъектов = выборка.ПрофильОбменаДанными.ОбъектыЗагрузки;
			//КонецЕсли; 
			//списокОбъектовОбмена = СтрСоединить(таблицаОбъектов.ВыгрузитьКолонку(0), ",");
			//направлениеОбмена = Строка(выборка.НаправлениеОбмена);
			
			//таблицаАгенты.Очистить();
			//
			//новаяСтрока = таблицаАгенты.Добавить();
			//новаяСтрока.Агент = выборка.Агент;
			//новаяСтрока.Код = выборка.Агент.Код;
			
			//Попытка
			//	
			//	Если обработкаБПАГПанАгентЦентрУправленияТест.МодульОбъектаОбменДанными(направлениеОбмена, списокОбъектовОбмена, таблицаАгенты) Тогда
			//		РегистрыСведений.ПанАгентОчередьОбменаДанными.УдалитьЗаданиеИзОчереди(выборка.Агент, выборка.ПрофильОбменаДанными, выборка.НаправлениеОбмена);
			//	Иначе
			//		
			//		Если выборка.НаправлениеОбмена = Перечисления.ПанАгентНаправленияОбменаДанными.Выгрузка Тогда
			//			текстСообщения = НСтр("ru = 'Объекты не выгружены!'");
			//		Иначе
			//			текстСообщения = НСтр("ru = 'Объекты не загружены! /529'");
			//		КонецЕсли; 
			//		обработкаБПАГПанАгентЦентрУправленияТест.ОтладочноеСообщение(текстСообщения);
			//		
			//	КонецЕсли;
			//	
			//Исключение
			//		
			//	Если выборка.НаправлениеОбмена = Перечисления.ПанАгентНаправленияОбменаДанными.Выгрузка Тогда
			//		текстСообщения = НСтр("ru = 'Объекты не выгружены!'");
			//	Иначе
			//		текстСообщения = НСтр("ru = 'Объекты не загружены! /532'");
			//	КонецЕсли; 
			//	обработкаБПАГПанАгентЦентрУправленияТест.ОтладочноеСообщение(текстСообщения);
			//	
			//КонецПопытки;
			
			
			Если Не ВыполнитьОбменДанными(выборка.Агент, выборка.ПрофильОбменаДанными, выборка.НаправлениеОбмена) Тогда
				Прервать;
			КонецЕсли; 
			
			
			//ПрофильОбменаДанными = выборка.ПрофильОбменаДанными;
			//
			//Если выборка.НаправлениеОбмена = Перечисления.ПанАгентНаправленияОбменаДанными.Выгрузка Тогда
			//	
			//	папкаФайловВыгрузки = ПолучитьИмяВременногоФайла("");
			//	
			//	папкаТаблицВыгрузки = папкаФайловВыгрузки + "\plists";
			//	Попытка
			//		СоздатьКаталог(папкаТаблицВыгрузки);
			//	Исключение
			//	
			//		//ИнформацияОбОшибке = ИнформацияОбОшибке();
			//		//
			//		//Сообщение = Новый СообщениеПользователю;
			//		//Сообщение.Текст = НСтр("ru = 'Описание ошибки: '") + ?(ИнформацияОбОшибке.Причина = Неопределено, ИнформацияОбОшибке.Описание, ИнформацияОбОшибке.Причина.Описание);
			//		//Сообщение.Сообщить();
			//	
			//	КонецПопытки;
			//	
			//	заданияВыгрузкиДанных = Новый Массив;
			//	
			//	Если ПрофильОбменаДанными.ОбъектыВыгрузки.Найти("Цены", "Объект") <> Неопределено Тогда
			//	
			//		////Адрес = ПоместитьВоВременноеХранилище(Неопределено);
			//		//параметрыЗадания = Новый Массив;
			//		//параметрыЗадания.Добавить(выборка.Агент);
			//		//параметрыЗадания.Добавить(папкаТаблицВыгрузки);
			//		//
			//		//фоновоеЗадание = ФоновыеЗадания.Выполнить("ПанАгентОбменДанными.СформироватьТаблицуТипыЦенТоваров", параметрыЗадания);
			//		//заданияВыгрузкиДанных.Добавить(фоновоеЗадание);
			//		ДобавитьФоновоеЗаданиеОбмена("СформироватьТаблицуТипыЦенТоваров", заданияВыгрузкиДанных, выборка.Агент, папкаТаблицВыгрузки);
			//		//СформироватьТаблицуТипыЦенТоваров(выборка.Агент, папкаТаблицВыгрузки);
			//		
			//	КонецЕсли; 
			//	
			//	ФоновыеЗадания.ОжидатьЗавершения(заданияВыгрузкиДанных);
			//	
			//	Попытка
			//		УдалитьФайлы(папкаФайловВыгрузки);
			//	Исключение
			//	КонецПопытки;
			//	
			//Иначе
			//
			//КонецЕсли; 
			//
			//РегистрыСведений.ПанАгентОчередьОбменаДанными.УдалитьЗаданиеИзОчереди(выборка.Агент, ПрофильОбменаДанными, выборка.НаправлениеОбмена);
		
		КонецЕсли; 
	
	КонецЦикла;

КонецПроцедуры // ВыполнитьОчередьОбменаДанными()

#КонецОбласти

#Область ОбменДанными

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ВыполнитьОбменДанными(агент, профильОбменаДанными, направлениеОбмена)
	
	//ОбновитьКэшНастроекАгентов();
	//ВидАдресаДоставки = НастройкаИзКэша("1СВидАдресаДоставки");
	//Лог = Новый ТекстовыйДокумент;
	
	кодыНастроекОбмена = Новый Массив;
	кодыНастроекОбмена.Добавить("1СКаталогОбмена");
	кодыНастроекОбмена.Добавить("1СПарольАрхивов");
	
	кодыНастроекОбмена.Добавить("1СИспользоватьВнешнийFTP");
	кодыНастроекОбмена.Добавить("1САдресВнешнегоFTP");
	кодыНастроекОбмена.Добавить("1СЛогинВнешнегоFTP");
	кодыНастроекОбмена.Добавить("1СПарольВнешнегоFTP");
	кодыНастроекОбмена.Добавить("1СТаймаутFTP");
	
	кодыНастроекОбмена.Добавить("1СИспользоватьПрокси");
	кодыНастроекОбмена.Добавить("1САдресПрокси");
	кодыНастроекОбмена.Добавить("1СПортПрокси");
	кодыНастроекОбмена.Добавить("1СЛогинПрокси");
	кодыНастроекОбмена.Добавить("1СПарольПрокси");
	
	кодыНастроекОбмена.Добавить("1СБратьТипЦенИзДоговора");
	кодыНастроекОбмена.Добавить("1СВариантЗагрузкиЗаявок");
	кодыНастроекОбмена.Добавить("exchangePeriod");
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	// Назначение запросов:
	//	0 - Временная таблица "ПараметрыАгента". Значения реквизитов агента для использования самостоятельно и в других запросах пакета.
	//	1 - Параметры/реквизиты агента.
	//	2 - Настройки обмена и агентов.
	//	3 - Объекты выгрузки данных профиля обмена данными.
	//	4 - Объекты загрузки данных профиля обмена данными.
	//	5 - Настройки документов по каждому виду документа отдельно.
	запрос.Текст =
	"ВЫБРАТЬ
	|	БПАГАгенты.Ссылка КАК Агент,
	|	БПАГАгенты.Профиль,
	|	БПАГАгенты.Код,
	|	БПАГАгенты.Менеджер,
	|	БПАГАгенты.Менеджер.ЭтоГруппа,
	|	БПАГАгенты.Подразделение
	|ПОМЕСТИТЬ ПараметрыАгента
	|ИЗ
	|	Справочник.БПАГАгенты КАК БПАГАгенты
	|ГДЕ
	|	БПАГАгенты.Ссылка = &Агент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыАгента.Агент,
	|	ПараметрыАгента.Профиль,
	|	ПараметрыАгента.Код,
	|	ПараметрыАгента.Менеджер,
	|	ПараметрыАгента.МенеджерЭтоГруппа,
	|	ПараметрыАгента.Подразделение
	|ИЗ
	|	ПараметрыАгента КАК ПараметрыАгента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БПАГНастройкиАгентов.ВидНастройки.Код КАК КодНастройки,
	|	БПАГНастройкиАгентов.Значение
	|ИЗ
	|	РегистрСведений.БПАГНастройкиАгентов КАК БПАГНастройкиАгентов
	|ГДЕ
	|	БПАГНастройкиАгентов.ВидНастройки.Код В(&КодыНастроек)
	|	И БПАГНастройкиАгентов.Агент = ЗНАЧЕНИЕ(Справочник.БПАГАгенты.ПустаяСсылка)
	|	И БПАГНастройкиАгентов.Профиль = ЗНАЧЕНИЕ(Справочник.БПАГПрофилиАгентов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БПАГНастройкиАгентов.ВидНастройки.Код,
	|	БПАГНастройкиАгентов.Значение
	|ИЗ
	|	РегистрСведений.БПАГНастройкиАгентов КАК БПАГНастройкиАгентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыАгента КАК ПараметрыАгента
	|		ПО БПАГНастройкиАгентов.Профиль = ПараметрыАгента.Профиль
	|ГДЕ
	|	БПАГНастройкиАгентов.ВидНастройки.Код В(&КодыНастроек)
	|	И БПАГНастройкиАгентов.Агент = ЗНАЧЕНИЕ(Справочник.БПАГАгенты.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БПАГНастройкиАгентов.ВидНастройки.Код,
	|	БПАГНастройкиАгентов.Значение
	|ИЗ
	|	РегистрСведений.БПАГНастройкиАгентов КАК БПАГНастройкиАгентов
	|ГДЕ
	|	БПАГНастройкиАгентов.ВидНастройки.Код В(&КодыНастроек)
	|	И БПАГНастройкиАгентов.Агент = &Агент
	|	И БПАГНастройкиАгентов.Профиль = ЗНАЧЕНИЕ(Справочник.БПАГПрофилиАгентов.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПанАгентПрофилиОбменаДаннымиОбъектыВыгрузки.Объект
	|ИЗ
	|	Справочник.ПанАгентПрофилиОбменаДанными.ОбъектыВыгрузки КАК ПанАгентПрофилиОбменаДаннымиОбъектыВыгрузки
	|ГДЕ
	|	ПанАгентПрофилиОбменаДаннымиОбъектыВыгрузки.Ссылка = &ПрофильОбменаДанными
	|	И &НаправлениеОбмена = ЗНАЧЕНИЕ(Перечисление.ПанАгентНаправленияОбменаДанными.Выгрузка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПанАгентПрофилиОбменаДаннымиОбъектыЗагрузки.Объект
	|ИЗ
	|	Справочник.ПанАгентПрофилиОбменаДанными.ОбъектыЗагрузки КАК ПанАгентПрофилиОбменаДаннымиОбъектыЗагрузки
	|ГДЕ
	|	ПанАгентПрофилиОбменаДаннымиОбъектыЗагрузки.Ссылка = &ПрофильОбменаДанными
	|	И &НаправлениеОбмена = ЗНАЧЕНИЕ(Перечисление.ПанАгентНаправленияОбменаДанными.Загрузка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БПАГНастройкиДокументовСрезПоследних.ВидДокумента,
	|	БПАГНастройкиДокументовСрезПоследних.ОбратнаяВыгрузкаИз1С,
	|	БПАГНастройкиДокументовСрезПоследних.ПериодОбратнойВыгрузки
	|ИЗ
	|	РегистрСведений.БПАГНастройкиДокументов.СрезПоследних(, ) КАК БПАГНастройкиДокументовСрезПоследних
	|ГДЕ
	|	БПАГНастройкиДокументовСрезПоследних.Агент = ЗНАЧЕНИЕ(Справочник.БПАГАгенты.ПустаяСсылка)
	|	И БПАГНастройкиДокументовСрезПоследних.Профиль = ЗНАЧЕНИЕ(Справочник.БПАГПрофилиАгентов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БПАГНастройкиДокументовСрезПоследних.ВидДокумента,
	|	БПАГНастройкиДокументовСрезПоследних.ОбратнаяВыгрузкаИз1С,
	|	БПАГНастройкиДокументовСрезПоследних.ПериодОбратнойВыгрузки
	|ИЗ
	|	РегистрСведений.БПАГНастройкиДокументов.СрезПоследних(, ) КАК БПАГНастройкиДокументовСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыАгента КАК ПараметрыАгента
	|		ПО БПАГНастройкиДокументовСрезПоследних.Агент = ПараметрыАгента.Агент
	|			И БПАГНастройкиДокументовСрезПоследних.Профиль = ПараметрыАгента.Профиль
	|			И (БПАГНастройкиДокументовСрезПоследних.Профиль <> ЗНАЧЕНИЕ(Справочник.БПАГПрофилиАгентов.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БПАГНастройкиДокументовСрезПоследних.ВидДокумента,
	|	БПАГНастройкиДокументовСрезПоследних.ОбратнаяВыгрузкаИз1С,
	|	БПАГНастройкиДокументовСрезПоследних.ПериодОбратнойВыгрузки
	|ИЗ
	|	РегистрСведений.БПАГНастройкиДокументов.СрезПоследних(, ) КАК БПАГНастройкиДокументовСрезПоследних
	|ГДЕ
	|	БПАГНастройкиДокументовСрезПоследних.Агент = &Агент
	|	И БПАГНастройкиДокументовСрезПоследних.Агент <> ЗНАЧЕНИЕ(Справочник.БПАГАгенты.ПустаяСсылка)";
	#КонецОбласти
	
	запрос.УстановитьПараметр("Агент", агент);
	запрос.УстановитьПараметр("КодыНастроек", кодыНастроекОбмена);
	запрос.УстановитьПараметр("ПрофильОбменаДанными", профильОбменаДанными);
	запрос.УстановитьПараметр("НаправлениеОбмена", направлениеОбмена);
	
	результаты = запрос.ВыполнитьПакет();
	
	// Параметры агента.
	результатПараметровАгента = результаты[1];
	выборка = результатПараметровАгента.Выбрать();
	выборка.Следующий();
	
	параметрыАгента = Новый Структура;
	Для каждого колонка Из результатПараметровАгента.Колонки Цикл
		
		имяКолонки = колонка.Имя;
		параметрыАгента.Вставить(имяКолонки, выборка[имяКолонки]);
	
	КонецЦикла; 
	
	// Настройки обмена.
	настройкиОбмена = Новый Соответствие;
	выборка = результаты[2].Выбрать();
	Пока выборка.Следующий() Цикл
		настройкиОбмена.Вставить(выборка.КодНастройки, выборка.Значение);
	КонецЦикла;
	
	// Настройки документов.
	списокНастроекДокументов = Новый Массив;
	Для каждого колонка Из результаты[5].Колонки Цикл
		
		имяКолонки = колонка.Имя;
		Если имяКолонки <> "ВидДокумента" Тогда
			списокНастроекДокументов.Добавить(имяКолонки);
		КонецЕсли; 
	
	КонецЦикла; 
	именаНастроекДокументов = СтрСоединить(списокНастроекДокументов, ",");
	списокНастроекДокументов = Неопределено;
	
	настройкиДокументов = Новый Соответствие;
	выборка = результаты[5].Выбрать();
	Пока выборка.Следующий() Цикл
		
		настройкиДокумента = Новый Структура(именаНастроекДокументов);
		ЗаполнитьЗначенияСвойств(настройкиДокумента, выборка);
		настройкиДокументов.Вставить(выборка.ВидДокумента, настройкиДокумента);
		
	КонецЦикла;
	
	//Если настройкиОбмена["1СИспользоватьВнешнийFTP"] = Неопределено Тогда
	//	настройкиОбмена["1СИспользоватьВнешнийFTP"] = Ложь;
	//КонецЕсли; 
	//Если настройкиОбмена["1СИспользоватьПрокси"] = Неопределено Тогда
	//	настройкиОбмена["1СИспользоватьПрокси"] = Ложь;
	//КонецЕсли; 
	//Если настройкиОбмена["1СБратьТипЦенИзДоговора"] = Неопределено Тогда
	//	настройкиОбмена["1СБратьТипЦенИзДоговора"] = Ложь;
	//КонецЕсли; 
	
	//настройкиОбмена.Вставить("РазделительПути", ПолучитьРазделительПутиСервера());
	
	// Выполнение обмена.
	Если направлениеОбмена = Перечисления.ПанАгентНаправленияОбменаДанными.Выгрузка Тогда
	
		// Объекты выгрузки данных.
		объектыВыгрузки = результаты[3].Выгрузить();
		объектыВыгрузки.Индексы.Добавить("Объект");
		
		обменВыполнен = ВыполнитьВыгрузкуДанных(параметрыАгента, объектыВыгрузки, настройкиОбмена, настройкиДокументов);
	
	Иначе
	
		// Объекты загрузки данных.
		объектыЗагрузки = результаты[4].Выгрузить();
		объектыЗагрузки.Индексы.Добавить("Объект");
		
		обменВыполнен = ВыполнитьЗагрузкуДанных();
	
	КонецЕсли; 
	
	Если обменВыполнен Тогда
		
		РегистрыСведений.ПанАгентОчередьОбменаДанными.УдалитьЗаданиеИзОчереди(агент, профильОбменаДанными, направлениеОбмена);
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли; 

КонецФункции // ВыполнитьОбменДанными()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ВыполнитьВыгрузкуДанных(параметрыАгента, объектыОбмена, настройкиОбмена, настройкиДокументов)
	
	агент = параметрыАгента.Агент;

	имяСобытияЖурналаРегистрации = НСтр("ru = 'Обмен данными.Выгрузка данных ""Пан Агент""'");
	ЗафиксироватьСообщениеОбмена(имяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Информация, агент, НСтр("ru = 'Начало выгрузки данных.'"));
	
	разделительПути = ПолучитьРазделительПутиСервера();
	//разделительПути = настройкиОбмена.РазделительПути;
	
	использоватьВнешнийFTP = настройкиОбмена["1СИспользоватьВнешнийFTP"];
	Если использоватьВнешнийFTP = Неопределено Тогда
		использоватьВнешнийFTP = Ложь;
	КонецЕсли; 
	
	описаниеОшибки = "";
	
	параметрыФормированияФайла = Новый Структура;
	параметрыФормированияФайла.Вставить("ПараметрыАгента", параметрыАгента);
	параметрыФормированияФайла.Вставить("ОбъектыОбмена", объектыОбмена);
	параметрыФормированияФайла.Вставить("НастройкиОбмена", настройкиОбмена);
	параметрыФормированияФайла.Вставить("НастройкиДокументов", настройкиДокументов);
	параметрыФормированияФайла.Вставить("ИмяСобытияЖурналаРегистрации", имяСобытияЖурналаРегистрации);
	параметрыФормированияФайла.Вставить("ИспользоватьВнешнийFTP", использоватьВнешнийFTP);
	параметрыФормированияФайла.Вставить("РазделительПути", разделительПути);
	
	Если использоватьВнешнийFTP Тогда
	//Если настройкиОбмена["1СИспользоватьВнешнийFTP"] Тогда
		
		ftpСоединение = СоздатьFTPСоединение(настройкиОбмена, описаниеОшибки);
		Если ftpСоединение = Неопределено Тогда
		
			текстСообщения = НСтр("ru = 'Не удалось установить соединение с FTP-сервером по причине:'") + Символы.ПС + описаниеОшибки;
			ЗафиксироватьСообщениеОбмена(имяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,, текстСообщения);
			Возврат Ложь;
		
		КонецЕсли; 
	
	Иначе
	
		// Проверим наличие настройки с папкой обмена.
		корневаяПапкаОбмена = настройкиОбмена["1СКаталогОбмена"];
		Если корневаяПапкаОбмена = Неопределено Тогда
			
			ЗафиксироватьСообщениеОбмена(имяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,, НСтр("ru = 'В настройках агентов не указан каталог обмена.'"));
			Возврат Ложь;
			
		КонецЕсли; 
		
		// Проверим наличие корневой папки обмена для агента и попробуем создать её при необходимости.
		файл = Новый Файл(корневаяПапкаОбмена);
		корневаяПапкаОбменаАгента = файл.ПолноеИмя + разделительПути + параметрыАгента.Код + разделительПути;
		Если Не ПроверитьСуществованиеПапкиФайловОбмена(корневаяПапкаОбменаАгента) Тогда
			
			Если Не СоздатьПапкуФайловОбмена(корневаяПапкаОбменаАгента, описаниеОшибки) Тогда
				
				текстСообщения = НСтр("ru = 'Не удалось создать папку обмена по причине:'") + Символы.ПС + описаниеОшибки;
				ЗафиксироватьСообщениеОбмена(имяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,, текстСообщения);
				Возврат Ложь;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		параметрыФормированияФайла.Вставить("КорневаяПапкаОбменаАгента", корневаяПапкаОбменаАгента);
	
	КонецЕсли; 
	
	//вложенныеПапкиОбмена = Новый Массив;
	//вложенныеПапкиОбмена.Добавить("Images");
	//вложенныеПапкиОбмена.Добавить("Logs");
	//вложенныеПапкиОбмена.Добавить("tmpFromDeviceUnzipped");
	//вложенныеПапкиОбмена.Добавить("tmpFromDeviceUnzippedBackup");

	//кодАгента = агент.Код;
	//
	//Для каждого вложеннаяПапка Из вложенныеПапкиОбмена Цикл
	//	
	//	суфикс = кодАгента + "\" + вложеннаяПапка;
	//	полноеИмяПапки = ПолучитьПолныйПутьКПапкеФайловОбмена(корневаяПапкаОбмена, суфикс);
	//	
	//	//Если Не ПроверитьСуществованиеПапкиФайловОбмена(корневаяПапкаОбмена) Тогда
	//	//	
	//	//	описаниеОшибки = "";
	//	//	Если Не СоздатьПапкуФайловОбмена(корневаяПапкаОбмена, описаниеОшибки) Тогда
	//	//		
	//	//		текстСообщения = НСтр("ru = 'Не удалось создать папку обмена по причине:'") + Символы.ПС + описаниеОшибки;
	//	//		ЗафиксироватьСообщениеОбмена(имяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,, текстСообщения);
	//	//		Возврат;
	//	//		
	//	//	КонецЕсли; 
	//	//	
	//	//КонецЕсли; 
	//
	//КонецЦикла; 
	
	
	
	//ОтладочноеСообщение("Формирование произвольных отчетов началось " + ТекущаяДата());
	//БПАГ.СформироватьПроизвольныеОтчеты();
	//ОтладочноеСообщение("Формирование произвольных отчетов завершено " + ТекущаяДата());
	
	
	
	таблицыФайла = Новый ТаблицаЗначений;
	таблицыФайла.Колонки.Добавить("ВидОбъекта", Новый ОписаниеТипов("ПеречислениеСсылка.ПанАгентВидыОбъектовОбмена"));
	таблицыФайла.Колонки.Добавить("ИмяПроцедуры", Новый ОписаниеТипов("Строка"));
	
	// Файл "toDevice.zip".
	ДобавитьТаблицуФайла(таблицыФайла, "Цены", "ТипыЦенТоваров");
	ДобавитьТаблицуФайла(таблицыФайла, "Клиенты", "Клиенты");
	ДобавитьТаблицуФайла(таблицыФайла, "Клиенты", "ТорговыеТочки");
	ДобавитьТаблицуФайла(таблицыФайла, "Клиенты", "ДоговорыКлиентов");
	ДобавитьТаблицуФайла(таблицыФайла, "Долги", "Долги");
	
	СформироватьФайлОбмена(параметрыФормированияФайла, таблицыФайла, "toDevice", ftpСоединение);
	
	// Файл "status.zip".
	таблицыФайла.Очистить();
	ДобавитьТаблицуФайла(таблицыФайла, "СтатусыДокументов", "СтатусыДокументов");
	
	СформироватьФайлОбмена(параметрыФормированияФайла, таблицыФайла, "status", ftpСоединение);
	
	ЗафиксироватьСообщениеОбмена(имяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Информация, агент, НСтр("ru = 'Завершение выгрузки данных.'"));
	
	Возврат Истина;
	
КонецФункции // ВыполнитьВыгрузкуДанных()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ДобавитьТаблицуФайла(таблицыФайла, видОбъекта, имяПроцедуры)

	строкаТаблицыФайла = таблицыФайла.Добавить();
	строкаТаблицыФайла.ВидОбъекта = Перечисления.ПанАгентВидыОбъектовОбмена[видОбъекта];
	строкаТаблицыФайла.ИмяПроцедуры = "СформироватьТаблицу" + имяПроцедуры;

КонецПроцедуры // ДобавитьТаблицуФайла()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ВыполнитьЗагрузкуДанных()

	имяСобытияЖурналаРегистрации = НСтр("ru = 'Обмен данными.Загрузка данных ""Пан Агент""'");

КонецФункции // ВыполнитьЗагрузкуДанных()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ДобавитьФоновоеЗаданиеОбмена(имяПроцедуры, заданияВыгрузкиДанных, параметрыФормированияФайла, папкаТаблицВыгрузки)

	параметрыЗадания = Новый Массив;
	параметрыЗадания.Добавить(параметрыФормированияФайла);
	параметрыЗадания.Добавить(папкаТаблицВыгрузки);
	
	фоновоеЗадание = ФоновыеЗадания.Выполнить("ПанАгентОбменДанными." + имяПроцедуры, параметрыЗадания,, имяПроцедуры);
	заданияВыгрузкиДанных.Добавить(фоновоеЗадание);

КонецПроцедуры // ДобавитьФоновоеЗаданиеОбмена()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция СформироватьФайлОбмена(параметрыФормированияФайла, таблицыФайла, имяФайла, ftpСоединение)
	
	Если таблицыФайла.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли; 
	
	настройкиОбмена = параметрыФормированияФайла.НастройкиОбмена;
	разделительПути = параметрыФормированияФайла.РазделительПути;
	имяСобытияЖурналаРегистрации = параметрыФормированияФайла.ИмяСобытияЖурналаРегистрации;
	
	папкаФайловВыгрузки = ПолучитьИмяВременногоФайла("") + разделительПути;
	
	папкаТаблицВыгрузки = папкаФайловВыгрузки + "plists" + разделительПути;
	Попытка
		СоздатьКаталог(папкаТаблицВыгрузки);
	Исключение
		
		текстСообщения = НСтр("ru = 'Не удалось создать временную папку для выгрузки таблиц по причине:'") + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗафиксироватьСообщениеОбмена(имяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,, текстСообщения);
		Возврат Ложь;
		
	КонецПопытки;
	
	параметрыАгента = параметрыФормированияФайла.ПараметрыАгента;
	//объектыОбмена = параметрыФормированияФайла.ОбъектыОбмена;
	
	заданияВыгрузкиДанных = Новый Массив;
	
	Для каждого строкаТаблицыФайла Из таблицыФайла Цикл
	
		Если ВыполнятьОбменПоТипуДанных(параметрыФормированияФайла.ОбъектыОбмена, строкаТаблицыФайла.ВидОбъекта) Тогда
			ДобавитьФоновоеЗаданиеОбмена(строкаТаблицыФайла.ИмяПроцедуры, заданияВыгрузкиДанных, параметрыФормированияФайла, папкаТаблицВыгрузки);
		КонецЕсли; 
	
	КонецЦикла; 
	//Если ВыполнятьОбменПоТипуДанных(объектыОбмена, "Цены") Тогда
	//	ДобавитьФоновоеЗаданиеОбмена("СформироватьТаблицуТипыЦенТоваров", заданияВыгрузкиДанных, параметрыАгента, настройкиОбмена, папкаТаблицВыгрузки);
	//КонецЕсли; 
	//Если ВыполнятьОбменПоТипуДанных(объектыОбмена, "Клиенты") Тогда
	//	ДобавитьФоновоеЗаданиеОбмена("СформироватьТаблицуКлиенты", заданияВыгрузкиДанных, параметрыАгента, настройкиОбмена, папкаТаблицВыгрузки);
	//КонецЕсли; 
	//Если ВыполнятьОбменПоТипуДанных(объектыОбмена, "Долги") Тогда
	//	ДобавитьФоновоеЗаданиеОбмена("СформироватьТаблицуДолги", заданияВыгрузкиДанных, параметрыАгента, настройкиОбмена, папкаТаблицВыгрузки);
	//КонецЕсли; 
	
	всеЗаданияВыполненыУспешно = Истина;
	Попытка
		ФоновыеЗадания.ОжидатьЗавершения(заданияВыгрузкиДанных);
	Исключение
		всеЗаданияВыполненыУспешно = Ложь;
	КонецПопытки;
	
	Для каждого заданиеВыгрузки Из заданияВыгрузкиДанных Цикл
		
		задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(заданиеВыгрузки.УникальныйИдентификатор);
		Если задание <> Неопределено Тогда
		
			Если задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
				
				всеЗаданияВыполненыУспешно = Ложь;
				
				текстСообщения = СтрШаблон(НСтр("ru = 'Задание выгрузки данных ""%1"" завершилось с ошибкой:'"), задание.Наименование) + Символы.ПС + КраткоеПредставлениеОшибки(задание.ИнформацияОбОшибке);
				ЗафиксироватьСообщениеОбмена(имяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,, текстСообщения);
				
			ИначеЕсли задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
				
				всеЗаданияВыполненыУспешно = Ложь;
				
				текстСообщения = СтрШаблон(НСтр("ru = 'Задание выгрузки данных ""%1"" отменено пользователем.'"), задание.Наименование);
				ЗафиксироватьСообщениеОбмена(имяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,, текстСообщения);
				
			ИначеЕсли задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
				
				// На случай, когда ожидание завершения заданий выбросило исключение
				// отменим все выполняющиеся задания.
				Если Не всеЗаданияВыполненыУспешно Тогда
					задание.Отменить();
				КонецЕсли; 
				
			КонецЕсли; 
		
		КонецЕсли; 
	
	КонецЦикла; 
	Если Не всеЗаданияВыполненыУспешно Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	// Сформируем архив для устройства.
	имяАрхива = имяФайла + ".zip";
	полноеИмяАрхива = папкаФайловВыгрузки + имяАрхива;
	парольАрхива = настройкиОбмена["1СПарольАрхивов"];
	
	маскаВсеФайлыСервера = ПолучитьМаскуВсеФайлыСервера();
	Если НайтиФайлы(папкаТаблицВыгрузки, маскаВсеФайлыСервера).Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли; 
	
	записьZipФайла = Новый ЗаписьZipФайла(полноеИмяАрхива, парольАрхива);
	записьZipФайла.Добавить(папкаТаблицВыгрузки + маскаВсеФайлыСервера);
	Попытка
		записьZipФайла.Записать();
	Исключение
	
		текстСообщения = НСтр("ru = 'Не удалось создать архив данных для выгрузки на устройство по причине:'") + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗафиксироватьСообщениеОбмена(имяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,, текстСообщения);
		Возврат Ложь;
	
	КонецПопытки;
	
	описаниеОшибки = "";
	
	// Отправим файл в целевое расположение.
	файлОтправленУспешно = Ложь;
	Если параметрыФормированияФайла.ИспользоватьВнешнийFTP Тогда
	//Если настройкиОбмена["1СИспользоватьВнешнийFTP"] Тогда
		
		файлОтправленУспешно = ОтправитьФайлОбменаНаFTPСервер(ftpСоединение, полноеИмяАрхива, параметрыАгента.Код, описаниеОшибки);
		//Если Не ОтправитьФайлОбменаНаFTPСервер(ftpСоединение, полноеИмяАрхива, параметрыАгента.Код, описаниеОшибки) Тогда
		//
		//	ЗафиксироватьСообщениеОбмена(имяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,, описаниеОшибки);
		//	Возврат Ложь;
		//
		//КонецЕсли; 
	
	Иначе
		
		файлОтправленУспешно = ОтправитьФайлОбменаВЛокальнуюПапку(полноеИмяАрхива, параметрыФормированияФайла.КорневаяПапкаОбменаАгента, описаниеОшибки);
		//Если Не ОтправитьФайлОбменаВЛокальнуюПапку(полноеИмяАрхива, корневаяПапкаОбменаАгента, описаниеОшибки) Тогда
		//
		//	ЗафиксироватьСообщениеОбмена(имяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,, описаниеОшибки);
		//	Возврат Ложь;
		//
		//КонецЕсли; 
		
	КонецЕсли; 
	Если Не файлОтправленУспешно Тогда
	
		ЗафиксироватьСообщениеОбмена(имяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,, описаниеОшибки);
		Возврат Ложь;
	
	КонецЕсли; 
	
	Попытка
		УдалитьФайлы(папкаФайловВыгрузки);
	Исключение
	КонецПопытки;

КонецФункции // СформироватьФайлОбмена()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ОтправитьФайлОбменаВЛокальнуюПапку(исходноеИмяФайла, целеваяПапка, описаниеОшибки)
//Функция ОтправитьФайлОбменаВЛокальнуюПапку(исходноеИмяФайла, целеваяПапка, имяСобытияЖурналаРегистрации)

	файл = Новый Файл(исходноеИмяФайла);
	
	целевоеИмяФайла = целеваяПапка + файл.Имя;
	имяВременногоФайла = целевоеИмяФайла + ".write";
	
	Попытка
		
		ПереместитьФайл(исходноеИмяФайла, имяВременногоФайла);
		ПереместитьФайл(имяВременногоФайла, целевоеИмяФайла);
		
	Исключение
		
		//текстСообщения = НСтр("ru = 'Не удалось поместить файл архива данных в папку обмена по причине:'") + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		//ЗафиксироватьСообщениеОбмена(имяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,, текстСообщения);
		описаниеОшибки = НСтр("ru = 'Не удалось поместить файл архива данных в папку обмена по причине:'") + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;

КонецФункции // ОтправитьФайлОбменаВЛокальнуюПапку()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ОтправитьФайлОбменаНаFTPСервер(ftpСоединение, исходноеИмяФайла, целевойКаталог, описаниеОшибки)

	//ДобавитьИнформациюВПротоколОбмена("Отправка файла обмена на FTP-сервер.");
	
	//Попытка
	//	
	//	//ДобавитьИнформациюВПротоколОбмена("Установка соединения с FTP-сервером " + СерверFTP + ".");
	//	FTPСоединение = Новый FTPСоединение(СерверFTP, ПортFTP, ПользовательFTP, ПарольFTP,, ИспользоватьПассивныйРежимДляFTPСервера, ТаймаутFTP);
	//	
	//Исключение
	//	
	//	//ДобавитьИнформациюВПротоколОбмена("Ошибка при установке соединения с FTP-сервером " + СерверFTP + ".", ОписаниеОшибки());
	//	Возврат Ложь;
	//	
	//КонецПопытки;
	
	// Проверим наличие каталога обмена.
	//ДобавитьИнформациюВПротоколОбмена("Проверка наличия каталога обмена.");
	
	Попытка
		
		Если ftpСоединение.НайтиФайлы(целевойКаталог).Количество() = 0 Тогда
			
			ftpСоединение.СоздатьКаталог(целевойКаталог);
			//ДобавитьИнформациюВПротоколОбмена("Создан каталог обмена """ + КаталогFTP + """.");
			
		КонецЕсли; 
		
	Исключение
		
		//ДобавитьИнформациюВПротоколОбмена("Ошибка при создании каталога обмена.", ОписаниеОшибки());
		описаниеОшибки = НСтр("ru = 'Не удалось создать каталог агента на FTP-сервере по причине:'") + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
		
	КонецПопытки;
	
	// Для минимизации конфликтов одновременного чтения и записи файла обмена скопируем
	// файл обмена в целевой каталог под временным именем, а уже потом переименуем его.
	файл = Новый Файл(исходноеИмяФайла);
	
	целевоеИмяФайла = файл.Имя;
	имяВременногоФайла = целевоеИмяФайла + ".write";
	
	//ФайлСообщения = Новый Файл(ИмяФайлаСообщенияОбмена);
	//ИмяФайлаОбмена = ПолучитьЗаголовокИмениФайлаОбмена(ПланыОбмена.РаспределённаяБаза.ЭтотУзел(), Владелец) + ФайлСообщения.Расширение;
	
	//ДобавитьИнформациюВПротоколОбмена("Передача файла обмена в каталог """ + КаталогFTP + """.");
	
	Попытка
		
		ftpСоединение.УстановитьТекущийКаталог(целевойКаталог);
		
		Если ftpСоединение.НайтиФайлы(имяВременногоФайла).Количество() > 0 Тогда
			ftpСоединение.Удалить(имяВременногоФайла);
		КонецЕсли; 
		Если ftpСоединение.НайтиФайлы(целевоеИмяФайла).Количество() > 0 Тогда
			ftpСоединение.Удалить(целевоеИмяФайла);
		КонецЕсли; 
		
		ftpСоединение.Записать(исходноеИмяФайла, имяВременногоФайла);
		ftpСоединение.Переместить(имяВременногоФайла, целевоеИмяФайла);
	
	Исключение
		
		//ДобавитьИнформациюВПротоколОбмена("Ошибка при передаче файла обмена.", ОписаниеОшибки());
		описаниеОшибки = НСтр("ru = 'Не удалось передать файл архива данных обмена на FTP-сервер по причине:'") + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
		
	КонецПопытки;
	
	//ДобавитьИнформациюВПротоколОбмена("Файл обмена отправлен на FTP-сервер.");
	
	Возврат Истина;

КонецФункции // ОтправитьФайлОбменаНаFTPСервер()

#КонецОбласти

#Область ФормированиеФайловДанных

#Область Plist

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура СформироватьPlist(данные, папкаТаблицВыгрузки, имяФайла)
	
	Если данные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	uriПространстваИмен = "http://www.apple.com/DTDs/PropertyList-1.0.dtd";
	
	plistXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(uriПространстваИмен, "plist"));
	plistXDTO.version = "1.0";
	plistXDTO.array = СоздатьArray(данные, uriПространстваИмен);
	
	полноеИмяФайла = папкаТаблицВыгрузки + имяФайла + ".plist";
	
	записьXML = Новый ЗаписьXML;
	записьXML.ОткрытьФайл(полноеИмяФайла, "UTF-8");
	записьXML.ЗаписатьОбъявлениеXML();
	//записьXML.ЗаписатьБезОбработки("<!DOCTYPE plist PUBLIC ""-//Apple//DTD PLIST 1.0//EN"" ""http://www.apple.com/DTDs/PropertyList-1.0.dtd"">");
	записьXML.ЗаписатьТипДокумента("plist", "-//Apple//DTD PLIST 1.0//EN", "http://www.apple.com/DTDs/PropertyList-1.0.dtd", "");
	ФабрикаXDTO.ЗаписатьXML(записьXML, plistXDTO,, uriПространстваИмен);
	записьXML.Закрыть();

КонецПроцедуры // СформироватьPlist()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция СоздатьArray(данные, uriПространстваИмен)

	//dictТип = ФабрикаXDTO.Тип(uriПространстваИмен, "dict");
	
	arrayXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(uriПространстваИмен, "array"));
	
	Для каждого строкаДанные Из данные Цикл
	
		dictXDTO = СоздатьDict(строкаДанные, uriПространстваИмен);
		arrayXDTO.dict.Добавить(dictXDTO);
	
	КонецЦикла; 
	
	Возврат arrayXDTO;

КонецФункции // СоздатьArray()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция СоздатьDict(данные, uriПространстваИмен)

	dictXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(uriПространстваИмен, "dict"));
	
	Для каждого колонка Из данные.Владелец().Колонки Цикл
		
		имяКолонки = колонка.Имя;
		значениеКолонки = данные[имяКолонки];
		
		dictXDTO.key.Добавить(имяКолонки);
		Если ТипЗнч(значениеКолонки) = Тип("ТаблицаЗначений") Тогда
			dictXDTO.array = СоздатьArray(значениеКолонки, uriПространстваИмен);
		Иначе
			dictXDTO.string.Добавить(ФорматироватьЗначение(значениеКолонки));
		КонецЕсли; 
	
	КонецЦикла; 
	
	Возврат dictXDTO;

КонецФункции // СоздатьDict()

// Преобразовывает переданное значение в строковое представление подходящего формата.
// Для каждого типа будет вызвана соответствующая вспомогательная функция.
//
// Параметры:
//  Значение  - Строка, Дата, Число, Булево, Неопределено, Null - Форматируемое значение.
//
Функция ФорматироватьЗначение(Знач значение)

	Если ТипЗнч(значение) = Тип("Строка") Тогда
		
		НормализоватьТекст(значение);
		
	//ИначеЕсли ТипЗнч(значение) = Тип("Число") Тогда
	//	
	//	ФорматироватьЧисло(значение);
		
	ИначеЕсли ТипЗнч(значение) = Тип("Дата") Тогда
		
		ФорматироватьДату(значение);
		
	//ИначеЕсли ТипЗнч(значение) = Тип("Булево") Тогда
	//	
	//	ФорматироватьБулево(значение);
	//	
	ИначеЕсли Не ЗначениеЗаполнено(значение) Тогда
		
		значение = "";
		
	Иначе
		
		значение = Строка(значение);
		
	КонецЕсли; 
	//данные = Строка(данные);
	//данные = СтрЗаменить(данные, "&", "&amp;");
	//данные = СтрЗаменить(данные, "<", "&lt;");
	//данные = СтрЗаменить(данные, ">", "&gt;");
	
	Возврат значение;

КонецФункции // НормализоватьЗначениеДляPlist()

// Приводит текстовые данные к допустимому виду, заменяя недопустимые символы.
//
// Параметры:
//  Текст  - Строка - Обрабатываемый текст.
//
Процедура НормализоватьТекст(текст)

	текст = СтрЗаменить(текст, "&", "&amp;");
	текст = СтрЗаменить(текст, "<", "&lt;");
	текст = СтрЗаменить(текст, ">", "&gt;");

КонецПроцедуры // НормализоватьТекст()

// Преобразовывает переданную дату в строковое представление подходящего формата.
// Если значение не заполнено, будет возвращена пустая строка.
//
// Параметры:
//  Значение  - Дата, Неопределено, Null - Форматируемое значение.
//
Процедура ФорматироватьДату(Значение)

	Если ЗначениеЗаполнено(Значение) Тогда
		Значение = Формат(Значение, "ДФ=dd.MM.yyyy");
	Иначе
		Значение = "";
	КонецЕсли; 

КонецПроцедуры // ФорматироватьДату()

#КонецОбласти

#Область Таблицы

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура СформироватьТаблицуТипыЦенТоваров(параметрыФормированияФайла, папкаТаблицВыгрузки) Экспорт
	
	параметрыАгента = параметрыФормированияФайла.ПараметрыАгента;
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	запрос.Текст =
	"ВЫБРАТЬ
	|	БПАГПрайсы.Код КАК uniqueID,
	|	БПАГПрайсы.Наименование КАК name
	|ИЗ
	|	Справочник.БПАГПрайсы КАК БПАГПрайсы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БПАГПрайсы.ОграничениеДоступности КАК БПАГПрайсыОграничениеДоступности
	|		ПО БПАГПрайсы.Ссылка = БПАГПрайсыОграничениеДоступности.Ссылка
	|ГДЕ
	|	НЕ БПАГПрайсы.ПометкаУдаления
	|	И БПАГПрайсы.ТипЦен <> ЗНАЧЕНИЕ(Справочник.ТипыЦен.ПустаяСсылка)
	|	И (БПАГПрайсыОграничениеДоступности.Ссылка ЕСТЬ NULL 
	|			ИЛИ БПАГПрайсыОграничениеДоступности.АгентПрофиль = &Агент
	|			ИЛИ БПАГПрайсыОграничениеДоступности.АгентПрофиль = &Профиль)
	|
	|УПОРЯДОЧИТЬ ПО
	|	uniqueID";
	#КонецОбласти
	
	запрос.УстановитьПараметр("Агент", параметрыАгента.Агент);
	запрос.УстановитьПараметр("Профиль", параметрыАгента.Профиль);
	
	имяФайла = "priceTypes";
	СформироватьPlist(запрос.Выполнить().Выгрузить(), папкаТаблицВыгрузки, имяФайла);

КонецПроцедуры // СформироватьТаблицуТипыЦенТоваров()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура СформироватьТаблицуКлиенты(параметрыФормированияФайла, папкаТаблицВыгрузки) Экспорт
	
	параметрыАгента = параметрыФормированияФайла.ПараметрыАгента;
	
	братьТипЦенИзДоговора = параметрыФормированияФайла.НастройкиОбмена["1СБратьТипЦенИзДоговора"];
	Если братьТипЦенИзДоговора = Неопределено Тогда
		братьТипЦенИзДоговора = Ложь;
	КонецЕсли; 
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	запрос.Текст =
	"ВЫБРАТЬ
	|	КонтрагентыМенеджеры.Ссылка.Код КАК uniqueID,
	|	КонтрагентыМенеджеры.Ссылка.Наименование КАК name,
	|	ВЫБОР
	|		КОГДА &БратьТипЦенИзДоговора
	|			ТОГДА БПАГПрайсы.Код
	|		ИНАЧЕ КонтрагентыМенеджеры.ТипЦен.Код
	|	КОНЕЦ КАК defaultPriceTypeID
	|ИЗ
	|	Справочник.Контрагенты.Менеджеры КАК КонтрагентыМенеджеры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БПАГПрайсы КАК БПАГПрайсы
	|		ПО КонтрагентыМенеджеры.ТипЦен = БПАГПрайсы.ТипЦен
	|ГДЕ
	|	НЕ КонтрагентыМенеджеры.Ссылка.ПометкаУдаления
	|	И КонтрагентыМенеджеры.Ссылка.Родитель.Подразделение = &Подразделение
	|	И ВЫБОР
	|			КОГДА &ЭтоСупервайзер
	|				ТОГДА КонтрагентыМенеджеры.Менеджер В ИЕРАРХИИ (&Менеджер)
	|			ИНАЧЕ КонтрагентыМенеджеры.Менеджер = &Менеджер
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	uniqueID";
	#КонецОбласти
	
	запрос.УстановитьПараметр("Менеджер", параметрыАгента.Менеджер);
	запрос.УстановитьПараметр("Подразделение", параметрыАгента.Подразделение);
	запрос.УстановитьПараметр("ЭтоСупервайзер", параметрыАгента.МенеджерЭтоГруппа);
	запрос.УстановитьПараметр("БратьТипЦенИзДоговора", братьТипЦенИзДоговора);
	
	имяФайла = "clients";
	СформироватьPlist(запрос.Выполнить().Выгрузить(), папкаТаблицВыгрузки, имяФайла);

КонецПроцедуры // СформироватьТаблицуКлиенты()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура СформироватьТаблицуТорговыеТочки(параметрыФормированияФайла, папкаТаблицВыгрузки) Экспорт
	
	параметрыАгента = параметрыФормированияФайла.ПараметрыАгента;
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	запрос.Текст =
	"ВЫБРАТЬ
	|	КонтрагентыМенеджеры.Ссылка.Код КАК uniqueID,
	|	КонтрагентыМенеджеры.Ссылка.Код КАК clientID,
	|	""1"" + КонтрагентыМенеджеры.Ссылка.Код КАК defaultAnalyticsID,
	|	""*"" КАК name,
	|	КонтрагентыМенеджеры.Ссылка.АдресДоставки КАК fullAddress,
	|	КонтрагентыМенеджеры.Ссылка.АдресДоставки КАК address,
	|	КонтрагентыМенеджеры.Ссылка.КонтактноеЛицо.Наименование КАК contactPerson,
	|	КонтрагентыМенеджеры.Ссылка.Телефоны КАК phone,
	|	КонтрагентыМенеджеры.Ссылка.ГПСШирота КАК latitude,
	|	КонтрагентыМенеджеры.Ссылка.ГПСДолгота КАК longitude,
	|	-1 КАК maxDebtSum,
	|	ВЫБОР
	|		КОГДА КонтрагентыМенеджеры.Ссылка.СрокОплаты + 8 > 0
	|			ТОГДА КонтрагентыМенеджеры.Ссылка.СрокОплаты + 8
	|		ИНАЧЕ -1
	|	КОНЕЦ КАК maxDebtPeriod,
	|	КонтрагентыМенеджеры.Ссылка.ПолнНаим КАК fullName,
	|	КонтрагентыМенеджеры.Ссылка.ЮрАдрес КАК legalAddress,
	|	КонтрагентыМенеджеры.Ссылка.ИНН КАК INN,
	|	""2"" КАК debtControlModeOrder,
	|	""2"" КАК debtControlModeSale,
	|	""Огрузка запрещена"" КАК unconditionalProhibitionMessage,
	|	КонтрагентыМенеджеры.Ссылка.БПАГМаксимальныйПорогПоСумме КАК maxSaleSum,
	|	КонтрагентыМенеджеры.Ссылка.БПАГМинимальныйПорогПоСумме КАК minSaleSum,
	|	КонтрагентыМенеджеры.Ссылка.БПАГМаксимальныйПорогПоВесу КАК maxSaleWeight,
	|	КонтрагентыМенеджеры.Ссылка.БПАГМинимальныйПорогПоВесу КАК minSaleWeight
	|ИЗ
	|	Справочник.Контрагенты.Менеджеры КАК КонтрагентыМенеджеры
	|ГДЕ
	|	НЕ КонтрагентыМенеджеры.Ссылка.ПометкаУдаления
	|	И КонтрагентыМенеджеры.Ссылка.Родитель.Подразделение = &Подразделение
	|	И ВЫБОР
	|			КОГДА &ЭтоСупервайзер
	|				ТОГДА КонтрагентыМенеджеры.Менеджер В ИЕРАРХИИ (&Менеджер)
	|			ИНАЧЕ КонтрагентыМенеджеры.Менеджер = &Менеджер
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	uniqueID";
	#КонецОбласти
	
	запрос.УстановитьПараметр("Менеджер", параметрыАгента.Менеджер);
	запрос.УстановитьПараметр("Подразделение", параметрыАгента.Подразделение);
	запрос.УстановитьПараметр("ЭтоСупервайзер", параметрыАгента.МенеджерЭтоГруппа);
	
	имяФайла = "POS";
	СформироватьPlist(запрос.Выполнить().Выгрузить(), папкаТаблицВыгрузки, имяФайла);

КонецПроцедуры // СформироватьТаблицуТорговыеТочки()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура СформироватьТаблицуДоговорыКлиентов(параметрыФормированияФайла, папкаТаблицВыгрузки) Экспорт
	
	параметрыАгента = параметрыФормированияФайла.ПараметрыАгента;
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	запрос.Текст =
	"ВЫБРАТЬ
	|	КонтрагентыМенеджеры.Ссылка.Код КАК КонтрагентКод,
	|	КонтрагентыМенеджеры.ОсновнаяОрганизация.Код,
	|	КонтрагентыМенеджеры.Менеджер.Наименование,
	|	БПАГПрайсы.Код КАК ПрайсКод
	|ПОМЕСТИТЬ ДоговорыКлиентов
	|ИЗ
	|	Справочник.Контрагенты.Менеджеры КАК КонтрагентыМенеджеры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БПАГПрайсы КАК БПАГПрайсы
	|		ПО КонтрагентыМенеджеры.ТипЦен = БПАГПрайсы.ТипЦен
	|ГДЕ
	|	НЕ КонтрагентыМенеджеры.Ссылка.ПометкаУдаления
	|	И КонтрагентыМенеджеры.Ссылка.Родитель.Подразделение = &Подразделение
	|	И ВЫБОР
	|			КОГДА &ЭтоСупервайзер
	|				ТОГДА КонтрагентыМенеджеры.Менеджер В ИЕРАРХИИ (&Менеджер)
	|			ИНАЧЕ КонтрагентыМенеджеры.Менеджер = &Менеджер
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""1"" + ДоговорыКлиентов.КонтрагентКод КАК uniqueID,
	|	ДоговорыКлиентов.КонтрагентКод КАК clientID,
	|	ДоговорыКлиентов.ОсновнаяОрганизацияКод КАК companyID,
	|	""1_"" + ДоговорыКлиентов.МенеджерНаименование КАК name,
	|	0 КАК discountPercent,
	|	ДоговорыКлиентов.ПрайсКод КАК defaultPriceTypeID
	|ИЗ
	|	ДоговорыКлиентов КАК ДоговорыКлиентов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""2"" + ДоговорыКлиентов.КонтрагентКод,
	|	ДоговорыКлиентов.КонтрагентКод,
	|	ДоговорыКлиентов.ОсновнаяОрганизацияКод,
	|	""2_"" + ДоговорыКлиентов.МенеджерНаименование,
	|	0,
	|	ДоговорыКлиентов.ПрайсКод
	|ИЗ
	|	ДоговорыКлиентов КАК ДоговорыКлиентов
	|
	|УПОРЯДОЧИТЬ ПО
	|	uniqueID";
	#КонецОбласти
	
	запрос.УстановитьПараметр("Менеджер", параметрыАгента.Менеджер);
	запрос.УстановитьПараметр("Подразделение", параметрыАгента.Подразделение);
	запрос.УстановитьПараметр("ЭтоСупервайзер", параметрыАгента.МенеджерЭтоГруппа);
	
	имяФайла = "clientAnalytics";
	СформироватьPlist(запрос.Выполнить().Выгрузить(), папкаТаблицВыгрузки, имяФайла);

КонецПроцедуры // СформироватьТаблицуДоговорыКлиентов()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура СформироватьТаблицуДолги(параметрыФормированияФайла, папкаТаблицВыгрузки) Экспорт
	
	параметрыАгента = параметрыФормированияФайла.ПараметрыАгента;
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	запрос.Текст =
	"ВЫБРАТЬ
	|	КонтрагентыМенеджеры.Ссылка КАК Контрагент,
	|	КонтрагентыМенеджеры.ОсновнаяОрганизация КАК Организация
	|ПОМЕСТИТЬ Контрагенты
	|ИЗ
	|	Справочник.Контрагенты.Менеджеры КАК КонтрагентыМенеджеры
	|ГДЕ
	|	КонтрагентыМенеджеры.Менеджер = &Менеджер
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПоступлениеДенегВедомость.Дата, ДЕНЬ), ДЕНЬ, 1)) КАК Дата
	|ПОМЕСТИТЬ ДатаОтсчётаДолга
	|ИЗ
	|	Документ.ПоступлениеДенегВедомость КАК ПоступлениеДенегВедомость
	|ГДЕ
	|	ПоступлениеДенегВедомость.Маршрут = &Менеджер
	|	И ПоступлениеДенегВедомость.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Долги.Контрагент КАК Контрагент,
	|	Долги.КредитныйДокумент КАК КредитныйДокумент,
	|	СУММА(Долги.Долг) КАК Долг
	|ПОМЕСТИТЬ Долги
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВзаиморасчетыСПокупателямиОстатки.Контрагент КАК Контрагент,
	|		ВзаиморасчетыСПокупателямиОстатки.КредитныйДокумент КАК КредитныйДокумент,
	|		ВзаиморасчетыСПокупателямиОстатки.СуммаОстаток КАК Долг
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыСПокупателями.Остатки(
	|				,
	|				Менеджер = &Менеджер
	|					И Контрагент В
	|						(ВЫБРАТЬ
	|							Контрагенты.Контрагент
	|						ИЗ
	|							Контрагенты КАК Контрагенты)) КАК ВзаиморасчетыСПокупателямиОстатки
	|	ГДЕ
	|		ВзаиморасчетыСПокупателямиОстатки.СуммаОстаток >= 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КпкКассаСтрокиДокумента.Контрагент,
	|		КпкКассаСтрокиДокумента.КредДокумент,
	|		-КпкКассаСтрокиДокумента.Сумма
	|	ИЗ
	|		ДатаОтсчётаДолга КАК ДатаОтсчётаДолга
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КпкКасса.СтрокиДокумента КАК КпкКассаСтрокиДокумента
	|			ПО (КпкКассаСтрокиДокумента.Ссылка.Дата >= ДатаОтсчётаДолга.Дата)
	|				И (КпкКассаСтрокиДокумента.Ссылка.Менеджер = &Менеджер)
	|				И (КпкКассаСтрокиДокумента.Ссылка.Проведен)
	|	ГДЕ
	|		КпкКассаСтрокиДокумента.Контрагент В
	|				(ВЫБРАТЬ
	|					Контрагенты.Контрагент
	|				ИЗ
	|					Контрагенты КАК Контрагенты)) КАК Долги
	|
	|СГРУППИРОВАТЬ ПО
	|	Долги.Контрагент,
	|	Долги.КредитныйДокумент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДатаОтсчётаДолга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Контрагент.Код КАК clientID,
	|	Контрагенты.Организация.Код КАК companyID,
	|	ВЫБОР
	|		КОГДА Долги.КредитныйДокумент ЕСТЬ NULL 
	|			ТОГДА """"
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ТИПЗНАЧЕНИЯ(Долги.КредитныйДокумент))
	|	КОНЕЦ КАК document,
	|	Долги.КредитныйДокумент.СуммаДокумента КАК sum,
	|	Долги.Долг КАК debt,
	|	Долги.КредитныйДокумент.Дата КАК date,
	|	Долги.КредитныйДокумент.Номер КАК number
	|ИЗ
	|	Контрагенты КАК Контрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Долги КАК Долги
	|		ПО Контрагенты.Контрагент = Долги.Контрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	clientID";
	#КонецОбласти
	
	запрос.УстановитьПараметр("Менеджер", параметрыАгента.Менеджер);
	
	клиенты = Новый ТаблицаЗначений;
	клиенты.Колонки.Добавить("clientID", Новый ОписаниеТипов("Строка"));
	клиенты.Колонки.Добавить("data", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	выборка = запрос.Выполнить().Выбрать();
	Пока выборка.СледующийПоЗначениюПоля("clientID") Цикл
		
		документыСДолгами = Новый ТаблицаЗначений;
		документыСДолгами.Колонки.Добавить("companyID", Новый ОписаниеТипов("Строка"));
		документыСДолгами.Колонки.Добавить("document", Новый ОписаниеТипов("Строка"));
		документыСДолгами.Колонки.Добавить("sum", Новый ОписаниеТипов("Число"));
		документыСДолгами.Колонки.Добавить("debt", Новый ОписаниеТипов("Число"));
		документыСДолгами.Колонки.Добавить("date", Новый ОписаниеТипов("Дата"));
		документыСДолгами.Колонки.Добавить("number", Новый ОписаниеТипов("Строка"));
		
		Пока выборка.Следующий() Цикл
		
			строкаДокументыСДолгами = документыСДолгами.Добавить();
			ЗаполнитьЗначенияСвойств(строкаДокументыСДолгами, выборка);
		
		КонецЦикла; 
		
		строкаКлиенты = клиенты.Добавить();
		строкаКлиенты.clientID = выборка.clientID;
		строкаКлиенты.data = документыСДолгами;
	
	КонецЦикла; 
	
	имяФайла = "debts";
	СформироватьPlist(клиенты, папкаТаблицВыгрузки, имяФайла);

КонецПроцедуры // СформироватьТаблицуДолги()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура СформироватьТаблицуСтатусыДокументов(параметрыФормированияФайла, папкаТаблицВыгрузки) Экспорт
	
	параметрыАгента = параметрыФормированияФайла.ПараметрыАгента;
	настройкиОбмена = параметрыФормированияФайла.НастройкиОбмена;
	
	периодОбмена = настройкиОбмена["exchangePeriod"];
	Если периодОбмена = Неопределено Или периодОбмена = 0 Тогда
		периодОбмена = 30;
	КонецЕсли; 
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	запрос.Текст =
	"ВЫБРАТЬ
	|	БПАГДокументыАгентовСрезПоследних.ИД КАК documentID,
	|	ВЫБОР
	|		КОГДА БПАГДокументыАгентовСрезПоследних.Документ.Проведен
	|			ТОГДА ""12""
	|		КОГДА БПАГДокументыАгентовСрезПоследних.Документ.ПометкаУдаления
	|			ТОГДА ""14""
	|		ИНАЧЕ ""13""
	|	КОНЕЦ КАК status,
	|	БПАГДокументыАгентовСрезПоследних.Документ.Номер КАК number
	|ИЗ
	|	РегистрСведений.БПАГДокументыАгентов.СрезПоследних(
	|			,
	|			ДатаИзмененияНаУстройстве МЕЖДУ &НачалоПериода И &КонецПериода
	|				И Агент = &Агент) КАК БПАГДокументыАгентовСрезПоследних";
	#КонецОбласти
	
	секундВСутках = 86400;
	текущаяДата = ТекущаяДата();
	количествоДней = 30;
	
	запрос.УстановитьПараметр("Агент", параметрыАгента.Агент);
	запрос.УстановитьПараметр("НачалоПериода", текущаяДата - периодОбмена * секундВСутках);
	запрос.УстановитьПараметр("КонецПериода", текущаяДата + количествоДней * секундВСутках);
	
	статусыДокументов = запрос.Выполнить().Выгрузить();
	
	вариантЗагрузкиЗаявок = настройкиОбмена["1СВариантЗагрузкиЗаявок"];
	Если вариантЗагрузкиЗаявок = Перечисления.БПАГВариантыЗагрузкиЗаявок.Реализация Тогда
	
		добавляемыеСтроки = статусыДокументов.СкопироватьКолонки();
		
		настройкиДокумента = параметрыФормированияФайла.НастройкиДокументов[Перечисления.БПАГВидыДокументов.Реализация];
		выполнятьОбратнуюВыгрузкуРеализаций = настройкиДокумента.ОбратнаяВыгрузкаИз1С И настройкиДокумента.ПериодОбратнойВыгрузки > 0;
		
		Для каждого строкаСтатусыДокументов Из статусыДокументов Цикл
		
			Если Лев(строкаСтатусыДокументов.documentID, 3) = "SAL" Тогда
			
				Если выполнятьОбратнуюВыгрузкуРеализаций Тогда
				
					строкаДобавляемыеСтроки = добавляемыеСтроки.Добавить();
					ЗаполнитьЗначенияСвойств(строкаДобавляемыеСтроки, строкаСтатусыДокументов);
				
				КонецЕсли; 
				
				строкаСтатусыДокументов.documentID = Сред(строкаСтатусыДокументов.documentID, 4);
			
			КонецЕсли; 
		
		КонецЦикла; 
		
		Для каждого строкаДобавляемыеСтроки Из добавляемыеСтроки Цикл
		
			строкаСтатусыДокументов = статусыДокументов.Добавить();
			ЗаполнитьЗначенияСвойств(строкаСтатусыДокументов, строкаДобавляемыеСтроки);
		
		КонецЦикла; 
	
	КонецЕсли; 
	
	статусыДокументов.Сортировать("documentID");
	
	имяФайла = "status";
	СформироватьPlist(статусыДокументов, папкаТаблицВыгрузки, имяФайла);

КонецПроцедуры // СформироватьТаблицуСтатусыДокументов()

#КонецОбласти

#КонецОбласти

#Область ДополнительныеПроцедурыИФункции

// <Описание процедуры>
//
// Параметры
//  имяСобытияЖурналаРегистрации  - Строка - <описание параметра>
//                 <продолжение описания параметра>
//  уровень  - УровеньЖурналаРегистрации - <описание параметра>
//                 <продолжение описания параметра>
//  данные  - Произвольный - <описание параметра>
//                 <продолжение описания параметра>
//  текстСообщения  - Строка - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ЗафиксироватьСообщениеОбмена(имяСобытияЖурналаРегистрации, уровень, данные, Знач текстСообщения)
//Процедура ЗафиксироватьСообщениеОбмена(имяСобытияЖурналаРегистрации, уровень, данные, Знач текстСообщения, мПротоколОшибок = Неопределено, ДанныеXDTO = Неопределено) Экспорт
	
	//Если ДанныеXDTO <> Неопределено Тогда
	//	
	//	ЗаписьXML = Новый ЗаписьXML;
	//	ЗаписьXML.УстановитьСтроку();
	//	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ДанныеXDTO);
	//	СериализованныеДанныеXDTO = ЗаписьXML.Закрыть();
	//	
	//	текстСообщения = текстСообщения + "
	//	|
	//	|Данные сайта:
	//	|[СериализованныеДанныеXDTO]";
	//	текстСообщения = СтрЗаменить(текстСообщения, "[СериализованныеДанныеXDTO]", СериализованныеДанныеXDTO); 
	//
	//КонецЕсли; 

	ЗаписьЖурналаРегистрации(имяСобытияЖурналаРегистрации, уровень,, данные, текстСообщения);
	
	//Если мПротоколОшибок <> Неопределено Тогда
	//	мПротоколОшибок.Добавить(текстСообщения);
	//КонецЕсли; 

КонецПроцедуры // ЗафиксироватьСообщениеОбмена()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьПолныйПутьКПапкеФайловОбмена(путьКПапке, суфикс = "")

	Возврат путьКПапке + ?(Прав(путьКПапке, 1) = "\", "", "\") + суфикс;

КонецФункции // ПолучитьПолныйПутьКПапкеФайловОбмена()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПроверитьСуществованиеПапкиФайловОбмена(путьКПапке)

	файл = Новый Файл(путьКПапке);
	Возврат файл.Существует();

КонецФункции // ПроверитьСуществованиеПапкиФайловОбмена()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция СоздатьПапкуФайловОбмена(путьКПапке, описаниеОшибки)
//Функция ПолучитьПапкуФайловОбмена(путьКПапке, суфикс = "", описаниеОшибки)
	
	//полныйПутьКПапке = путьКПапке + ?(Прав(путьКПапке, 1) = "\", "", "\") + суфикс;
	описаниеОшибки = "";

	Если Не ПроверитьСуществованиеПапкиФайловОбмена(путьКПапке) Тогда
	
		Попытка
		
			//СоздатьКаталог(полныйПутьКПапке);
			СоздатьКаталог(путьКПапке);
		
		Исключение
		
			//ИнформацияОбОшибке = ИнформацияОбОшибке();
			//
			//Сообщение = Новый СообщениеПользователю;
			//Сообщение.Текст = НСтр("ru = 'Описание ошибки: '") + ?(ИнформацияОбОшибке.Причина = Неопределено, ИнформацияОбОшибке.Описание, ИнформацияОбОшибке.Причина.Описание);
			//Сообщение.Сообщить();
			
			описаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат Ложь;
		
		КонецПопытки;
	
	КонецЕсли; 
	
	Возврат Истина;

КонецФункции // СоздатьПапкуФайловОбмена()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ВыполнятьОбменПоТипуДанных(объектыОбмена, видОбъекта)

	Возврат объектыОбмена.Найти(видОбъекта, "Объект") <> Неопределено;

КонецФункции // ВыполнятьОбменПоТипуДанных()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция СоздатьFTPСоединение(настройкиОбмена, описаниеОшибки)
	
	использоватьПрокси = настройкиОбмена["1СИспользоватьПрокси"];
	Если использоватьПрокси = Неопределено Тогда
		использоватьПрокси = Ложь;
	КонецЕсли; 
	Если использоватьПрокси Тогда
		
		серверПрокси = настройкиОбмена["1САдресПрокси"];
		портПрокси = настройкиОбмена["1СПортПрокси"];
		пользовательПрокси = настройкиОбмена["1СЛогинПрокси"];
		парольПрокси = настройкиОбмена["1СПарольПрокси"];
		
		интернетПрокси = Новый ИнтернетПрокси;
		интернетПрокси.Установить("ftp", серверПрокси, портПрокси, пользовательПрокси, парольПрокси);
		
	Иначе
		интернетПрокси = Неопределено;
	КонецЕсли; 
	
	серверFTP = настройкиОбмена["1САдресВнешнегоFTP"];
	портFTP = 21;
	пользовательFTP = настройкиОбмена["1СЛогинВнешнегоFTP"];
	парольFTP = настройкиОбмена["1СПарольВнешнегоFTP"];
	таймаутFTP = настройкиОбмена["1СТаймаутFTP"];
	
	Попытка
		ftpСоединение = Новый FTPСоединение(серверFTP, портFTP, пользовательFTP, парольFTP, интернетПрокси,, таймаутFTP);
	Исключение
	
		описаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Неопределено;
	
	КонецПопытки;
	
	Возврат ftpСоединение;

КонецФункции // СоздатьFTPСоединение()

#КонецОбласти