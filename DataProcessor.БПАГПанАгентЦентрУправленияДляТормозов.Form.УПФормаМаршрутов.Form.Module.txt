Перем ПрогрессорПеретаскиванияВсего;
Перем СчетПрогрессораПеретаскивания;
Перем ДниНедели;
Перем ДниНеделиПолные;
Перем ТЗКлиентураТТ;//ПАКЛ

&НаСервере
Процедура ОбновитьНадписьВариантПланирования()
	Если (АгентПланирования.Пустая()) ИЛИ (ВариантПланирования.Пустая()) Тогда
		Элементы.ДекорацияИнформацияВариантаПланирования.Заголовок = "Для начала планирования маршрута выберите агента и вариант."
	Иначе
		Элементы.ДекорацияИнформацияВариантаПланирования.Заголовок = " Посещения с " + Формат(ВариантПланирования.ДатаНачала, "ДЛФ=DD") + " " + ?(ВариантПланирования.ИнтервалПланирования = 7, "понедельно", "по " + ВариантПланирования.ИнтервалПланирования + " дней") + ". Количество строк: " + СписокМаршрута.Количество();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолеАгентПланированияПриИзменении(Элемент)
	Если Элементы.ГруппаСтраниц.ТекущаяСтраница.Имя = "ГруппаПериодичностьПосещений" Тогда
		ПроверитьИзмененностьИЗаписатьПосещения("Без отмены");
	ИначеЕсли Элементы.ГруппаСтраниц.ТекущаяСтраница.Имя = "ГруппаПорядокПосещения" Тогда
		ПроверитьИзмененностьИЗаписатьПорядокПосещений("Без отмены");
	ИначеЕсли Элементы.ГруппаСтраниц.ТекущаяСтраница.Имя = "ГруппаЗоны" Тогда
		СформироватьHTMLКартуЗоны();
	КонецЕсли;
	ТаблицаКонтрагентовИзменениеФонаУбратьФон();//ПАКЛ
	ОбновитьТаблицуМаршрута(Истина);
	УстановитьОтборПоКлиентуре();//ПАКЛ
	ТаблицаКонтрагентовИзменениеФона();//ПАКЛ

КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуМаршрута(ОчиститьСписок = Ложь)
	Если ОчиститьСписок Тогда
		СписокМаршрута.Очистить();
	КонецЕсли;
	
	Если НЕ АгентПланирования.Пустая() И НЕ ВариантПланирования.Пустая() Тогда
		// Удаляем колонки
		МассивНаУдаление = Новый Массив;
		МассивЭлементовНаУдаление = Новый Массив;
		Для Каждого Элемент Из Элементы Цикл
			//Если Лев(Элемент.Имя,4) = "День" и СокрЛП(Элемент.Вид) = "Поле картинки" Тогда
			Если Лев(Элемент.Имя,4) = "День" и СокрЛП(Элемент.Вид) = "Поле надписи" Тогда
				МассивНаУдаление.Добавить(Элемент.Имя);
				МассивЭлементовНаУдаление.Добавить(Элемент);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекЭлемент Из МассивЭлементовНаУдаление Цикл
			Элементы.Удалить(ТекЭлемент);
		КонецЦикла;
		
		// **** NIY к реквизитам ТЗ нет ссылки
		Попытка
			ИзменитьРеквизиты(, МассивНаУдаление);
		Исключение
			
		КонецПопытки;
		
		// Дописываем колонки
		ДниНедели = Новый Массив();
		ДниНедели.Добавить("Пн");
		ДниНедели.Добавить("Вт");
		ДниНедели.Добавить("Ср");
		ДниНедели.Добавить("Чт");
		ДниНедели.Добавить("Пт");
		ДниНедели.Добавить("Сб");
		ДниНедели.Добавить("Вс");
		
		ДатаНачалаПланирования = ВариантПланирования.ДатаНачала - 24 * 60 * 60;
		Для Счет = 1 По ВариантПланирования.ИнтервалПланирования Цикл
			ДатаПланирования = ДатаНачалаПланирования + Счет * 24 * 60 * 60;
			НомерДняНедели = ДеньНедели(ДатаПланирования);
			НаименованиеНовойКолонки = "День" + Счет;
			
			ДобавляемыеРеквизиты = Новый Массив;
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(НаименованиеНовойКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)), "СписокМаршрута"));
			Попытка
				ИзменитьРеквизиты(ДобавляемыеРеквизиты);
			Исключение
				
			КонецПопытки;
			ТаблицаНоваяКолонка = Элементы.Добавить(НаименованиеНовойКолонки, Тип("ПолеФормы"), Элементы.ТаблицаМаршрута);
			//ТаблицаНоваяКолонка.Вид = ВидПоляФормы.ПолеКартинки;
			ТаблицаНоваяКолонка.Вид = ВидПоляФормы.ПолеНадписи;  //ПолеНадписи; //.ПолеВвода; // .ПолеКартинки;
			ТаблицаНоваяКолонка.Заголовок = СокрЛП(Формат(ДатаПланирования, "ДФ=dd.MM")) + Символы.ПС + ДниНедели[НомерДняНедели - 1];
			ТаблицаНоваяКолонка.ПутьКДанным = "СписокМаршрута." + НаименованиеНовойКолонки;
			ТаблицаНоваяКолонка.УстановитьДействие("ПриИзменении", "ТаблицаМаршрутаКолонкаПриИзменении");
			ТаблицаНоваяКолонка.Ширина = 3;
			ТаблицаНоваяКолонка.РастягиватьПоГоризонтали = Ложь;
			
			ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(НаименованиеНовойКолонки);
			ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокМаршрута." + НаименованиеНовойКолонки);
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = 1; 
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Зеленый); 
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Зеленый); 
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "визит"); 
		КонецЦикла;
		
		//Обновим содержимое
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БПАГМаршруты.ТорговаяТочка,
		|	БПАГМаршруты.Дата,
		|	БПАГМаршруты.НомерВСпискеПосещений,
		|	БПАГМаршруты.ТорговаяТочка.Владелец КАК Контрагент,
		|	БПАГМаршруты.ТорговаяТочка.Адрес КАК Адрес,
		|	БПАГМаршруты.ТорговаяТочка.Широта КАК Широта,
		|	БПАГМаршруты.ТорговаяТочка.Долгота КАК Долгота
		|ИЗ
		|	РегистрСведений.БПАГМаршруты КАК БПАГМаршруты
		|ГДЕ
		|	БПАГМаршруты.Вариант = &Вариант
		|	И БПАГМаршруты.Агент = &Агент
		|	И НЕ БПАГМаршруты.ТорговаяТочка.ПометкаУдаления
		|	И НЕ БПАГМаршруты.ТорговаяТочка.Владелец.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	БПАГМаршруты.НомерВСпискеПосещений";
		
		Запрос.УстановитьПараметр("Агент", АгентПланирования);
		Запрос.УстановитьПараметр("Вариант", ВариантПланирования);
		
		Результат = Запрос.Выполнить();
		
		ТекНомерВСпискеПосещений = -1;
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ТекНомерВСпискеПосещений < Выборка.НомерВСпискеПосещений Тогда
				ТекНомерВСпискеПосещений = Выборка.НомерВСпискеПосещений;
				НоваяСтрока = СписокМаршрута.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.ПолучитьИдентификатор()
			КонецЕсли;
			НомерДня = (НачалоДня(Выборка.Дата) - НачалоДня(ВариантПланирования.ДатаНачала)) / 60 / 60 / 24 + 1;
			НоваяСтрока["День" + СокрЛП(НомерДня)] = 1;	
		КонецЦикла;	
	КонецЕсли;	
	
	ОбновитьНадписьВариантПланирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМаршрутаКолонкаПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Сообщить("бе");	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМаршрутаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Лев(Поле.Имя,4) = "День" Тогда
		ТекСтрока = Элемент.ТекущиеДанные;
		Если ТекСтрока[Поле.Имя] = 1 Тогда
			ТекСтрока[Поле.Имя] = 0;
		Иначе
			ТекСтрока[Поле.Имя] = 1;
		КонецЕсли;
		ФлагИзмененностиПосещений = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура УбратьОтобразитьКаринку(ТекущаяCтрока, Колонка)
	ТекСтрока = ТекущаяCтрока;
	Если ТекСтрока[Колонка] = 1 Тогда
		ТекСтрока[Колонка] = 0;
	Иначе
		ТекСтрока[Колонка] = 1;
	КонецЕсли;	 
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СписокТорговыхТочек.Параметры.УстановитьЗначениеПараметра("ТекКонтрагент", Справочники.БПАГКонтрагенты.ПустаяСсылка());
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаБПАГКотрагентовПриАктивизацииСтроки(Элемент)
	// Вставить содержимое обработчика.
	СменаОтбораТорговыхТочек(Элемент.ТекущаяСтрока);
КонецПроцедуры

Процедура СменаОтбораТорговыхТочек(Элемент)
	СписокТорговыхТочек.Параметры.УстановитьЗначениеПараметра("ТекКонтрагент", Элемент);	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМаршрутаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	// Вставить содержимое обработчика.
	ПеретаскиваниеТорговыхТочек(ПараметрыПеретаскивания.Значение);
	ТаблицаКонтрагентовИзменениеФона();//ПАКЛ
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМаршрутаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура ПеретаскиваниеТорговыхТочек(ПараметрыПеретаскивания)
	НачатьТранзакцию();
	
	ПеретаскиваемыеЗначения = ПараметрыПеретаскивания;
	
	ЧтоПеретаскиваем = "";
	Если ТипЗнч(ПеретаскиваемыеЗначения) = Тип("СправочникСсылка.БПАГКонтрагенты") Тогда
		ЧтоПеретаскиваем = "БПАГКонтрагенты";
	ИначеЕсли ТипЗнч(ПеретаскиваемыеЗначения) = Тип("СправочникСсылка.БПАГТорговыеТочки") Тогда
		ЧтоПеретаскиваем = "БПАГТорговыеТочки";
		ПрогрессорПеретаскиванияВсего = 1;
	ИначеЕсли ТипЗнч(ПеретаскиваемыеЗначения) = Тип("Массив") Тогда
		Если ПеретаскиваемыеЗначения.Количество() > 0 Тогда
			Если ТипЗнч(ПеретаскиваемыеЗначения[0]) = Тип("СправочникСсылка.БПАГКонтрагенты") Тогда
				ЧтоПеретаскиваем = "БПАГКонтрагенты";
			ИначеЕсли ТипЗнч(ПеретаскиваемыеЗначения[0]) = Тип("СправочникСсылка.БПАГТорговыеТочки") Тогда
				ЧтоПеретаскиваем = "БПАГТорговыеТочки";
				ПрогрессорПеретаскиванияВсего = ПеретаскиваемыеЗначения.Количество();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Если ЧтоПеретаскиваем = "БПАГКонтрагенты" Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	1 КАК Счет
		|ИЗ
		|	Справочник.БПАГКонтрагенты КАК БПАГКонтрагенты
		|ГДЕ
		|	БПАГКонтрагенты.Ссылка В ИЕРАРХИИ(&Значения)
		|ИТОГИ
		|	СУММА(Счет)
		|ПО
		|	ОБЩИЕ";
		
		Запрос.УстановитьПараметр("Значения", ПеретаскиваемыеЗначения);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ПрогрессорПеретаскиванияВсего = 1;
		Если Выборка.Следующий() Тогда
			ПрогрессорПеретаскиванияВсего = Выборка.Счет;
		КонецЕсли;
		
		СчетПрогрессораПеретаскивания = 0;
		
		ЗапуститьРекурсиюПеретаскивания(ПараметрыПеретаскивания);
		
	ИначеЕсли ЧтоПеретаскиваем = "БПАГТорговыеТочки" Тогда
		СчетПрогрессораПеретаскивания = 0;
		
		ЗапуститьРекурсиюПеретаскивания(ПараметрыПеретаскивания);
	КонецЕсли;	
	ЗафиксироватьТранзакцию();
	
	ФлагИзмененностиПосещений = Истина;
КонецПроцедуры

Процедура ЗапуститьРекурсиюПеретаскивания(ПараметрыПеретаскивания)
	
	СчетПрогрессораПеретаскивания = СчетПрогрессораПеретаскивания + 1;
	БПАГ.глПрогрессор("Синхронизация: ", ПрогрессорПеретаскиванияВсего, СчетПрогрессораПеретаскивания);
	
	ПеретаскиваемыеЗначения = ПараметрыПеретаскивания;
	
	Если ТипЗнч(ПеретаскиваемыеЗначения) = Тип("СправочникСсылка.БПАГКонтрагенты") Тогда
		Перетаскиваемое = ПеретаскиваемыеЗначения;
		Если Перетаскиваемое.ПометкаУдаления Тогда
			Возврат;
		КонецЕсли;
		
		Если Перетаскиваемое.ЭтоГруппа Тогда
			//Создадим группу и отправим потомков по рекурсивной дорожке
			
			Запрос = Новый Запрос();
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	БПАГКонтрагенты.Ссылка
			|ИЗ
			|	Справочник.БПАГКонтрагенты КАК БПАГКонтрагенты
			|ГДЕ
			|	БПАГКонтрагенты.Родитель = &Родитель
			|	И (НЕ БПАГКонтрагенты.ПометкаУдаления)
			|
			|УПОРЯДОЧИТЬ ПО
			|	БПАГКонтрагенты.Наименование";
			
			Запрос.УстановитьПараметр("Родитель", Перетаскиваемое);
			ТЗ = Запрос.Выполнить().Выгрузить();
			
			Для Каждого Потомок Из ТЗ Цикл
				РекурсивныеПараметрыПеретаскивания = Потомок.Ссылка;
				ЗапуститьРекурсиюПеретаскивания(РекурсивныеПараметрыПеретаскивания);
			КонецЦикла;
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	БПАГТорговыеТочки.Ссылка,
			|	БПАГТорговыеТочки.Адрес,
			|	БПАГТорговыеТочки.Владелец
			|ИЗ
			|	Справочник.БПАГТорговыеТочки КАК БПАГТорговыеТочки
			|ГДЕ
			|	НЕ БПАГТорговыеТочки.ПометкаУдаления
			|	И БПАГТорговыеТочки.Владелец = &Владелец
			|	И НЕ БПАГТорговыеТочки.Владелец.ПометкаУдаления
			|	И НЕ БПАГТорговыеТочки.НеИспользовать";
			
			Запрос.УстановитьПараметр("Владелец", Перетаскиваемое);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				НоваяСтрока = СписокМаршрута.Добавить();
				НоваяСтрока.Контрагент = Выборка.Владелец;
				НоваяСтрока.ТорговаяТочка = Выборка.Ссылка;
				НоваяСтрока.Адрес = Выборка.Адрес;
			КонецЦикла;			
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ПеретаскиваемыеЗначения) = Тип("СправочникСсылка.БПАГТорговыеТочки") Тогда
		
		Перетаскиваемое = ПеретаскиваемыеЗначения;
		Если Перетаскиваемое.ПометкаУдаления Тогда
			Возврат;
		КонецЕсли;
		
		НоваяСтрока = СписокМаршрута.Добавить();
		НоваяСтрока.Контрагент = Перетаскиваемое.Владелец;
		НоваяСтрока.ТорговаяТочка = Перетаскиваемое.Ссылка;
		НоваяСтрока.Адрес = Перетаскиваемое.Адрес;
		
	ИначеЕсли ТипЗнч(ПеретаскиваемыеЗначения) = Тип("Массив") Тогда
		Для Каждого Перетаскиваемое Из ПеретаскиваемыеЗначения Цикл
			РекурсивныеПараметрыПеретаскивания = Перетаскиваемое;
			ЗапуститьРекурсиюПеретаскивания(РекурсивныеПараметрыПеретаскивания);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьПорядокПосещений()
		
	//Обновим содержимое
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БПАГМаршруты.ТорговаяТочка,
		|	БПАГМаршруты.Дата,
		|	БПАГМаршруты.НомерВСпискеПосещений,
		|	БПАГМаршруты.ТорговаяТочка.Владелец КАК Контрагент,
		|	БПАГМаршруты.ТорговаяТочка.Адрес КАК Адрес,
		|	БПАГМаршруты.ТорговаяТочка.Широта КАК Широта,
		|	БПАГМаршруты.ТорговаяТочка.Долгота КАК Долгота
		|ИЗ
		|	РегистрСведений.БПАГМаршруты КАК БПАГМаршруты
		|ГДЕ
		|	БПАГМаршруты.Вариант = &Вариант
		|	И БПАГМаршруты.Агент = &Агент
		|	И НЕ БПАГМаршруты.ТорговаяТочка.ПометкаУдаления
		|	И НЕ БПАГМаршруты.ТорговаяТочка.Владелец.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	БПАГМаршруты.Порядок,
		|	БПАГМаршруты.ТорговаяТочка.Владелец.Наименование,
		|	БПАГМаршруты.ТорговаяТочка.Наименование";

	Запрос.УстановитьПараметр("Агент", АгентПланирования);
	Запрос.УстановитьПараметр("Вариант", ВариантПланирования);

	Результат = Запрос.Выполнить();

	ПорядокПосещения.Очистить();
	
	ТекДата = ДатаПорядка;
	Периодичность = ВариантПланирования.ИнтервалПланирования;
	
	Ном = 0;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		РазницаДней = (НачалоДня(ТекДата) - НачалоДня(Выборка.Дата)) / 60 / 60 / 24;
		Если РазницаДней % Периодичность = 0 Тогда
			Ном = Ном + 1;
			НоваяСтрока = ПорядокПосещения.Добавить();
			НоваяСтрока.Номер = Ном;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ПроверитьИзмененностьИЗаписатьПосещения(Вариант = "")
	Если ФлагИзмененностиПосещений Тогда
		КодВозврата = Вопрос("Записать изменения в периодичности посещений?", ?(Вариант = "БезОтмены", РежимДиалогаВопрос.ДаНет, РежимДиалогаВопрос.ДаНетОтмена));
		Если КодВозврата = КодВозвратаДиалога.Да Тогда
			ЗаписатьПосещения();
			Возврат Истина;
		ИначеЕсли КодВозврата = КодВозвратаДиалога.Нет Тогда
			Возврат Истина;
		ИначеЕсли КодВозврата = КодВозвратаДиалога.Отмена Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ПроверитьИзмененностьИЗаписатьПорядокПосещений(Вариант = "")
	Если ФлагИзмененностиПорядкаПосещений Тогда
		КодВозврата = Вопрос("Записать изменения в порядке посещений?", ?(Вариант = "БезОтмены", РежимДиалогаВопрос.ДаНет, РежимДиалогаВопрос.ДаНетОтмена));
		Если КодВозврата = КодВозвратаДиалога.Да Тогда
			ЗаписатьПорядокПосещений();
			Возврат Истина;
		ИначеЕсли КодВозврата = КодВозвратаДиалога.Нет Тогда
			Возврат Истина;
		ИначеЕсли КодВозврата = КодВозвратаДиалога.Отмена Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ГруппаСтраницПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница.Имя = "ГруппаПериодичностьПосещений" Тогда
		Если НЕ ПроверитьИзмененностьИЗаписатьПорядокПосещений() Тогда
			Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.ГруппаПорядокПосещения;
		КонецЕсли;
	ИначеЕсли ТекущаяСтраница.Имя = "ГруппаПорядокПосещения" Тогда
		Если НЕ ПроверитьИзмененностьИЗаписатьПосещения() Тогда
			Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.ГруппаПериодичностьПосещений;
		Иначе	
			ОбновитьПорядокПосещений();
			Если Элементы.КнопкаПоказатьЗоныВсехАгентов.Пометка Тогда
				СформироватьHTMLКартуЗоны();
			Иначе 
				СформироватьHTMLКарту();
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	
	Если Вопрос("Очистить список маршрута?", РежимДиалогаВопрос.ОКОтмена) = КодВозвратаДиалога.ОК Тогда
		СписокМаршрута.Очистить();
		ОбновитьНадписьВариантПланирования();
	Иначе
		Возврат;
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если АгентПланирования.Пустая() ИЛИ ВариантПланирования.Пустая() Тогда
		Сообщить("Выберите агента и вариант планирования!");
		Возврат;
	КонецЕсли;
	
	Если (СписокМаршрута.Количество() = 0) ИЛИ (Вопрос("ВНИМАНИЕ! Будут обновлены все маршруты данного агента! Вы уверены?", РежимДиалогаВопрос.ОКОтмена) = КодВозвратаДиалога.ОК) Тогда
		ЗаполнитьМаршрутыПоПапкам();
		ФормаЗаполнения =  ПолучитьФорму("Обработка.БПАГПанАгентЦентрУправления.Форма.УПФормаЗаполненияМаршрутов");
		КопироватьДанныеФормы(Объект, ФормаЗаполнения.Объект);
		Результат = ФормаЗаполнения.ОткрытьМодально();
		Если Результат = "ОК" Тогда
			КопироватьДанныеФормы(ФормаЗаполнения.Объект, Объект);
			ЗаполнитьТаблицуМаршрута();
			ОбновитьНадписьВариантПланирования();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМаршрутыПоПапкам()
	
	ДниНеделиПолные = Новый Массив();
	ДниНеделиПолные.Добавить("Понедельник");
	ДниНеделиПолные.Добавить("Вторник");
	ДниНеделиПолные.Добавить("Среда");
	ДниНеделиПолные.Добавить("Четверг");
	ДниНеделиПолные.Добавить("Пятница");
	ДниНеделиПолные.Добавить("Суббота");
	ДниНеделиПолные.Добавить("Воскресенье");
	
	Объект.ЗаполнениеМаршрутов.Очистить();
	
	НаборЗаписей = РегистрыСведений.БПАГНастройкиЗаполненияМаршрутовПоПапкам.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Вариант.Установить(ВариантПланирования);
	НаборЗаписей.Отбор.Агент.Установить(АгентПланирования);
		
	НаборЗаписей.Прочитать();
	ТЗНастройки = НаборЗаписей.Выгрузить();

	Для i = 1 По ВариантПланирования.ИнтервалПланирования Цикл
		тмпДата = НачалоДня(ВариантПланирования.ДатаНачала + (i - 1) * 24 * 60 * 60);
		
		ЗаголовокШапки = Формат(День(тмпДата), "ЧЦ=2; ЧВН=") + "." + Формат(Месяц(тмпДата), "ЧЦ=2; ЧВН=") + " (" + ДниНеделиПолные[ДеньНедели(тмпДата) - 1]+ ")";
		НоваяСтрока = Объект.ЗаполнениеМаршрутов.Добавить();
		НоваяСтрока.Дата = тмпДата;
		НоваяСтрока.День = ЗаголовокШапки;
		НоваяСтрока.НомерДня = i;
		НайденнаяСтрокаНастроек = ТЗНастройки.Найти(тмпДата, "Дата");
		Если НайденнаяСтрокаНастроек <> Неопределено Тогда
			НоваяСтрока.ГруппаКонтрагентов = НайденнаяСтрокаНастроек.ГруппаКонтрагентов;
		КонецЕсли;
	КонецЦикла;		
КонецПроцедуры

Процедура ЗаполнитьТаблицуМаршрута()	
	ФлагИзмененностиПосещений = Истина;
	
	НаборЗаписей = РегистрыСведений.БПАГНастройкиЗаполненияМаршрутовПоПапкам.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Вариант.Установить(ВариантПланирования);
	НаборЗаписей.Отбор.Агент.Установить(АгентПланирования);
		
	НаборЗаписей.Прочитать();

	СписокМаршрута.Очистить();
	НаборЗаписей.Очистить();
	Для Каждого тмпСтрока Из Объект.ЗаполнениеМаршрутов Цикл
		Если НЕ тмпСтрока.ГруппаКонтрагентов.Пустая() Тогда	
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	БПАГТорговыеТочки.Ссылка КАК ТорговаяТочка,
			|	БПАГТорговыеТочки.Адрес,
			|	БПАГТорговыеТочки.Телефон,
			|	БПАГТорговыеТочки.Широта,
			|	БПАГТорговыеТочки.Долгота,
			|	БПАГТорговыеТочки.Владелец КАК Контрагент
			|ИЗ
			|	Справочник.БПАГТорговыеТочки КАК БПАГТорговыеТочки
			|ГДЕ
			|	НЕ БПАГТорговыеТочки.ПометкаУдаления
			|	И НЕ БПАГТорговыеТочки.Владелец.ПометкаУдаления
			|	И БПАГТорговыеТочки.Владелец В ИЕРАРХИИ(&ГруппаКонтрагентов)
			|	И НЕ БПАГТорговыеТочки.НеИспользовать
			|
			|УПОРЯДОЧИТЬ ПО
			|	БПАГТорговыеТочки.Владелец.Наименование,
			|	БПАГТорговыеТочки.Наименование";
			
			Запрос.УстановитьПараметр("ГруппаКонтрагентов", тмпСтрока.ГруппаКонтрагентов);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("ТорговаяТочка", Выборка.ТорговаяТочка);
				НайденныеСтроки = СписокМаршрута.НайтиСтроки(ПараметрыОтбора);
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					СтрокаДляИзменения = НайденныеСтроки[0];
				Иначе
					СтрокаДляИзменения = СписокМаршрута.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДляИзменения, Выборка);
				КонецЕсли;
				
				СтрокаДляИзменения["День" + СокрЛП(тмпСтрока.НомерДня)] = 1;
				ФлагИзмененностиПосещений = Истина;
			КонецЦикла;
		КонецЕсли;
		
		НоваяЗаписьНастроек = НаборЗаписей.Добавить();
		НоваяЗаписьНастроек.Вариант = ВариантПланирования;
		НоваяЗаписьНастроек.Агент = АгентПланирования;
		НоваяЗаписьНастроек.Дата = тмпСтрока.Дата;
		НоваяЗаписьНастроек.ГруппаКонтрагентов = тмпСтрока.ГруппаКонтрагентов;
		
	КонецЦикла;
	
	//Запишем настройки заполнения маршрутов
	НаборЗаписей.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКоординатыВсехТТ(Команда)
	ОбновитьКоординатыВсехТТ();
КонецПроцедуры

Процедура ОбновитьКоординатыВсехТТ()
	НашОбъект = РеквизитФормыВЗначение("Объект");
	
	ВремXML = ПолучитьИмяВременногоФайла("xml");
	
	Попытка
		Сервер = "maps.googleapis.com";
		ПроксиСервер = БПАГ.ПолучитьПрокси();
		Соединение = Новый HTTPСоединение(Сервер, , , , ПроксиСервер);
	Исключение	
		БПАГ.ИнформационноеСообщение(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	КэшКоординат = Новый ТаблицаЗначений;
	НоваяКолонка = КэшКоординат.Колонки.Добавить("Адрес");
	НоваяКолонка = КэшКоординат.Колонки.Добавить("Широта");
	НоваяКолонка = КэшКоординат.Колонки.Добавить("Долгота");
	
	Для Каждого тмпСтрока Из СписокМаршрута Цикл
		Если СтрДлина(тмпСтрока.Адрес) < 5 Тогда
			Продолжить;
		КонецЕсли;
		
		НайденнаяСтрокаКэша = КэшКоординат.Найти(тмпСтрока.Адрес, "Адрес");
		Если НайденнаяСтрокаКэша <> Неопределено Тогда
			Если (тмпСтрока.Широта <> НайденнаяСтрокаКэша.Широта) ИЛИ (тмпСтрока.Долгота <> НайденнаяСтрокаКэша.Долгота) Тогда
				тмпСтрока.Широта = НайденнаяСтрокаКэша.Широта;
				тмпСтрока.Долгота = НайденнаяСтрокаКэша.Долгота;
				ФлагИзмененностиПосещений = Истина;
			КонецЕсли;			
			Продолжить;
		КонецЕсли;
		
		Если (тмпСтрока.Широта <> 0) ИЛИ (тмпСтрока.Долгота <> 0) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			СтрокаЗапроса = "maps/api/geocode/xml?address=" + НашОбъект.ПодготовитьАдресДляПоиска(тмпСтрока.Адрес) + "&sensor=false";
			Соединение.Получить(СтрокаЗапроса, ВремXML);
			
			Текст = "";		
			Если НЕ НашОбъект.ПолучитьТекстИзФайла(ВремXML, Текст) Тогда
				Возврат;	
			КонецЕсли;
			
			АдресНайден = Ложь;
			ПозНачала = Найти(Текст, "<status>");
			Если ПозНачала > 0 Тогда
				ПозНачала = ПозНачала + 8;
				Если Сред(Текст, ПозНачала, 2) = "OK" Тогда
					ПозНачала = Найти(Текст, "<location>");
					Если ПозНачала > 0 Тогда
						ПозНачала = ПозНачала + 11;
						ПодстрокаКоординат = Сред(Текст, ПозНачала, 70);
						ПозНачала = Найти(ПодстрокаКоординат, "<lat>");
						Если ПозНачала > 0 Тогда
							ПозНачала = ПозНачала + 5;
							ПозКонца = Найти(ПодстрокаКоординат, "</lat>");
							Если ПозКонца > 0 Тогда
								Широта = Сред(ПодстрокаКоординат, ПозНачала, ПозКонца - ПозНачала);
								ПозНачала = Найти(ПодстрокаКоординат, "<lng>");
								Если ПозНачала > 0 Тогда
									ПозНачала = ПозНачала + 5;
									ПозКонца = Найти(ПодстрокаКоординат, "</lng>");
									Если ПозКонца > 0 Тогда
										Долгота = Сред(ПодстрокаКоординат, ПозНачала, ПозКонца - ПозНачала);
										АдресНайден = Истина;
										тмпСтрока.Широта = Число(Широта);
										тмпСтрока.Долгота = Число(Долгота);
										
										НоваяСтрокаКэша = КэшКоординат.Добавить();
										НоваяСтрокаКэша.Адрес = тмпСтрока.Адрес;
										НоваяСтрокаКэша.Широта = тмпСтрока.Широта;
										НоваяСтрокаКэша.Долгота = тмпСтрока.Долгота;
										
										ФлагИзмененностиПосещений = Истина;
										
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;				
			КонецЕсли;
			Если НЕ АдресНайден Тогда
				БПАГ.ИнформационноеСообщение("Адрес не найден: " + тмпСтрока.Адрес + "!");
			КонецЕсли;
			
		Исключение	
			БПАГ.ИнформационноеСообщение(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКоординатыТекущейТТ(Команда)
	Адрес = Элементы.ТаблицаМаршрута.ТекущиеДанные.Адрес;
	Если СтрДлина(Адрес) > 5 Тогда
		ОбновитьКоординатыТорговойТочки(Адрес);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьКоординатыТорговойТочки(Адрес)
	НашОбъект = РеквизитФормыВЗначение("Объект");
	
	ВремXML = ПолучитьИмяВременногоФайла("xml");
	
	Попытка
		Сервер = "maps.googleapis.com";
		
		ПроксиСервер = БПАГ.ПолучитьПрокси();
		Соединение = Новый HTTPСоединение(Сервер, , , , ПроксиСервер);
	Исключение	
		БПАГ.ИнформационноеСообщение(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Попытка
		СтрокаЗапроса = "maps/api/geocode/xml?address=" + НашОбъект.ПодготовитьАдресДляПоиска(Адрес) + "&sensor=false";
		Соединение.Получить(СтрокаЗапроса, ВремXML);
		
		Текст = "";		
		Если НЕ НашОбъект.ПолучитьТекстИзФайла(ВремXML, Текст) Тогда
			Возврат;	
		КонецЕсли;
		
		АдресНайден = Ложь;
		ПозНачала = Найти(Текст, "<status>");
		Если ПозНачала > 0 Тогда
			ПозНачала = ПозНачала + 8;
			Если Сред(Текст, ПозНачала, 2) = "OK" Тогда
				ПозНачала = Найти(Текст, "<location>");
				Если ПозНачала > 0 Тогда
					ПозНачала = ПозНачала + 11;
					ПодстрокаКоординат = Сред(Текст, ПозНачала, 70);
					ПозНачала = Найти(ПодстрокаКоординат, "<lat>");
					Если ПозНачала > 0 Тогда
						ПозНачала = ПозНачала + 5;
						ПозКонца = Найти(ПодстрокаКоординат, "</lat>");
						Если ПозКонца > 0 Тогда
							Широта = Сред(ПодстрокаКоординат, ПозНачала, ПозКонца - ПозНачала);
							ПозНачала = Найти(ПодстрокаКоординат, "<lng>");
							Если ПозНачала > 0 Тогда
								ПозНачала = ПозНачала + 5;
								ПозКонца = Найти(ПодстрокаКоординат, "</lng>");
								Если ПозКонца > 0 Тогда
									Долгота = Сред(ПодстрокаКоординат, ПозНачала, ПозКонца - ПозНачала);
									АдресНайден = Истина;
									
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;				
		КонецЕсли;
		Если АдресНайден Тогда
			Для Каждого тмпСтрока Из СписокМаршрута Цикл
				Если тмпСтрока.Адрес = Адрес Тогда
					Если (тмпСтрока.Широта <> Широта) ИЛИ (тмпСтрока.Долгота <> Долгота) Тогда
						тмпСтрока.Широта = Широта;
						тмпСтрока.Долгота = Долгота;
						ФлагИзмененностиПосещений = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
			БПАГ.ИнформационноеСообщение("Адрес не найден: " + Адрес + "!");
		КонецЕсли;
		
	Исключение	
		БПАГ.ИнформационноеСообщение(ОписаниеОшибки());
		Возврат;
	КонецПопытки;

	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНаКарте(Команда)
	Если Элементы.КнопкаПоказатьЗоныВсехАгентов.Пометка Тогда
		СформироватьHTMLКартуЗоны();
	Иначе 
		СформироватьHTMLКарту();
	КонецЕсли;	
КонецПроцедуры

Процедура СформироватьHTMLКарту()
	НашОбъект = РеквизитФормыВЗначение("Объект");
	
	СтрокаКоординат = "";
	тмпТТ = 0;
	Порядок = 0;
	
	Для Каждого тмпСтрока Из ПорядокПосещения Цикл
		Порядок = Порядок + 1;
		Если (тмпСтрока.Широта <> 0) И (тмпСтрока.Долгота <> 0) Тогда
			СтрокаМаркера = "Порядок: " + Порядок + "\n" + НашОбъект.НормализоватьСтрокуДляPHP(тмпСтрока.Контрагент) + "\n" + НашОбъект.НормализоватьСтрокуДляPHP(тмпСтрока.Адрес);
			СтрокаКоординат = СтрокаКоординат + "[""" + СтрокаМаркера + """, " + Формат(тмпСтрока.Широта, "ЧРД=.; ЧГ=0")+ ", " + Формат(тмпСтрока.Долгота, "ЧРД=.; ЧГ=0") + "],";
			
		КонецЕсли;
	КонецЦикла;
	
	СтрокаКоординат = Лев(СтрокаКоординат, СтрДлина(СтрокаКоординат) - 1);
	
	Текст = 
	"<HTML><HEAD><TITLE>Карты Google</TITLE>
	|<META name=viewport content=""initial-scale=1.0, user-scalable=yes""></META>
	|<META content=""text/html; charset=UTF-8"" http-equiv=content-type></META>
	|<SCRIPT type=text/javascript src=""http://maps.google.com/maps/api/js?sensor=false""></SCRIPT>
	|<SCRIPT type=text/javascript>
	|
	|var map;
    |
  	|function drawRoute() {
	| 	var agentRoute = [" + СтрокаКоординат + "
	|  	];
	|	
	|	var bounds = new google.maps.LatLngBounds();	 
    |	var coords = new Array(agentRoute.length);
    |	// Markers
    |	for (var i = 0; i < agentRoute.length; i++) {
	|		var place = agentRoute[i];
    |	    var myLatLng = new google.maps.LatLng(place[1], place[2]);
    |	    bounds.extend(myLatLng);
	|		coords[i] = myLatLng;
    |	    var marker = new google.maps.Marker({
    |	        position: myLatLng,
    |	        title: place[0]
    |	    });
	|		marker.setMap(map); 
    |	}
    |	// Polyline
    |	var polyline = new google.maps.Polyline({
	|       path: coords,
    |	    strokeColor: ""#0000AA"",
    |	    strokeOpacity: 1.0,
    |	    strokeWeight: 2
    |	});
    |	polyline.setMap(map);
	|
	|	// Center
	|	map.setCenter(bounds.getCenter(), map.fitBounds(bounds));
	|
  	|}
    |
	|function onLoad() {
    |	var myOptions = {
    |		mapTypeId: google.maps.MapTypeId.ROADMAP
    |	}
    |	map = new google.maps.Map(document.getElementById(""map_canvas""), myOptions);
    |	drawRoute();
	|}
    |
	|window.onload = onLoad;  
    |
	|</SCRIPT>
	|
	|</HEAD>
	|<body onload=""onLoad()"">
	|  <div id=""map_canvas"" style=""width:100%; height:100%""></div>
	|</body>
	|</html>";
	
	
	СтрокаКарты = Текст;
	
КонецПроцедуры

Функция СкалярноеПроизведение(р1, р2, р3)
	Возврат (р2.Долгота - р1.Долгота)*(р3.Широта - р1.Широта) - (р3.Долгота - р1.Долгота)*(р2.Широта - р1.Широта);	
КонецФункции	

Функция ПолучитьЗоныМаршрута(МаршрутАгента)
	//результирующая Таблица
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Контрагент");
	ТЗ.Колонки.Добавить("ТТ");
	ТЗ.Колонки.Добавить("Адрес");
	ТЗ.Колонки.Добавить("Широта");
	ТЗ.Колонки.Добавить("Долгота");
	
	//найдем самую нижнюю точку
	МинТочка = 0;
	Для Каждого тмпСтрока Из МаршрутАгента Цикл
		Если (тмпСтрока.Широта <> 0) И (тмпСтрока.Долгота <> 0) Тогда
			МинТочка = тмпСтрока.Широта;
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.Контрагент = тмпСтрока.Контрагент;
			НоваяСтрока.ТТ = тмпСтрока.ТорговаяТочка;
			НоваяСтрока.Адрес = тмпСтрока.Адрес;
			НоваяСтрока.Широта = тмпСтрока.Широта;
			НоваяСтрока.Долгота = тмпСтрока.Долгота;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	НачалоХ = 0;
	НачалоУ = 0;
	Если МинТочка > 0 Тогда
		Для Каждого тмпСтрока Из МаршрутАгента Цикл
			Если (тмпСтрока.Широта <> 0) И (тмпСтрока.Долгота <> 0) Тогда
				Если тмпСтрока.Широта < МинТочка Тогда
					ТЗ.Очистить();
					МинТочка = тмпСтрока.Широта;
					НоваяСтрока = ТЗ.Добавить();
					НоваяСтрока.Контрагент = тмпСтрока.Контрагент;
					НоваяСтрока.ТТ = тмпСтрока.ТорговаяТочка;
					НоваяСтрока.Адрес = тмпСтрока.Адрес;
					НоваяСтрока.Широта = тмпСтрока.Широта;
					НоваяСтрока.Долгота = тмпСтрока.Долгота;
					НачалоХ = тмпСтрока.Долгота;
					НачалоУ = тмпСтрока.Широта;
				КонецЕсли;			
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//Отсортируем по полярному углу и выберем вторую точку с наименьшим углом для обхода по часовой стрелке.
	ТЗПолярныеУглы = Новый ТаблицаЗначений;
	ТЗПолярныеУглы.Колонки.Добавить("Контрагент");
	ТЗПолярныеУглы.Колонки.Добавить("ТТ");
	ТЗПолярныеУглы.Колонки.Добавить("Адрес");
	ТЗПолярныеУглы.Колонки.Добавить("Широта");
	ТЗПолярныеУглы.Колонки.Добавить("Долгота");
	ТЗПолярныеУглы.Колонки.Добавить("ПолярныйУгол");
	ПИ = 3.1415926535897932;
	Для Каждого тмпСтрока Из МаршрутАгента Цикл
		Если (тмпСтрока.Широта <> 0) И (тмпСтрока.Долгота <> 0) Тогда
			Х = тмпСтрока.Долгота - НачалоХ;
			У = тмпСтрока.Широта-НачалоУ;
			угол = 0;
			Если Х > 0 Тогда
				угол = Atan(У/Х);
			ИначеЕсли Х < 0 Тогда
				угол = Atan(У/Х) + ПИ;
			КонецЕсли;
			Если угол <> 0 Тогда
			НоваяСтрока = ТЗПолярныеУглы.Добавить();
			НоваяСтрока.Контрагент = тмпСтрока.Контрагент;
			НоваяСтрока.ТТ = тмпСтрока.ТорговаяТочка;
			НоваяСтрока.Адрес = тмпСтрока.Адрес;
			НоваяСтрока.Широта = тмпСтрока.Широта;
			НоваяСтрока.Долгота = тмпСтрока.Долгота;
			НоваяСтрока.ПолярныйУгол = угол;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ТЗПолярныеУглы.Сортировать("ПолярныйУгол Возр");
	
	Сч = 0;
	Для Каждого тмпСтрока Из ТЗПолярныеУглы Цикл
		Сч = Сч + 1;
		Если Сч <=2 Тогда
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.Контрагент = тмпСтрока.Контрагент;
		НоваяСтрока.ТТ = тмпСтрока.ТТ;
		НоваяСтрока.Адрес = тмпСтрока.Адрес;
		НоваяСтрока.Широта = тмпСтрока.Широта;
		НоваяСтрока.Долгота = тмпСтрока.Долгота;
		Иначе
		Прервать;
		КонецЕсли;
	КонецЦикла;
	//Алгоритм Грэхема
	//Теперь остальные точки подбираем в цикле.
	//остальные точки
	ТЗостальные = Новый ТаблицаЗначений;
	ТЗостальные.Колонки.Добавить("Контрагент");
	ТЗостальные.Колонки.Добавить("ТТ");
	ТЗостальные.Колонки.Добавить("Адрес");
	ТЗостальные.Колонки.Добавить("Широта");
	ТЗостальные.Колонки.Добавить("Долгота");
	ТЗостальные.Колонки.Добавить("ПолярныйУгол");
	
	Для Каждого тмпСтрока Из ТЗПолярныеУглы Цикл
		Если (тмпСтрока.Широта <> 0) И (тмпСтрока.Долгота <> 0) Тогда
			Если (тмпСтрока.ТТ <> ТЗ[0].ТТ) и (тмпСтрока.ТТ <> ТЗ[1].ТТ) и (тмпСтрока.ТТ <> ТЗ[2].ТТ) Тогда
				НоваяСтрока = ТЗостальные.Добавить();
				НоваяСтрока.Контрагент = тмпСтрока.Контрагент;
				НоваяСтрока.ТТ = тмпСтрока.ТТ;
				НоваяСтрока.Адрес = тмпСтрока.Адрес;
				НоваяСтрока.Широта = тмпСтрока.Широта;
				НоваяСтрока.Долгота = тмпСтрока.Долгота;
				НоваяСтрока.ПолярныйУгол = тмпСтрока.ПолярныйУгол;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого тмпСтрока Из ТЗостальные Цикл
		ТЗКол = ТЗ.Количество();
		
		ПослТочка = ТЗ[ТЗКол-1];
		ПредПослТочка = ТЗ[ТЗКол-2];
		ТекущаяТочка = тмпСтрока;
		
		Поворот = СкалярноеПроизведение(ПредПослТочка ,ПослТочка , ТекущаяТочка);
		Если Поворот > 0 Тогда
			///Добавить в ТЗ текущую точку
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.Контрагент = тмпСтрока.Контрагент;
			НоваяСтрока.ТТ = тмпСтрока.ТТ;
			НоваяСтрока.Адрес = тмпСтрока.Адрес;
			НоваяСтрока.Широта = тмпСтрока.Широта;
			НоваяСтрока.Долгота = тмпСтрока.Долгота;
		Иначе	
			ТЗ.Удалить(ТЗКол-1);
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.Контрагент = тмпСтрока.Контрагент;
			НоваяСтрока.ТТ = тмпСтрока.ТТ;
			НоваяСтрока.Адрес = тмпСтрока.Адрес;
			НоваяСтрока.Широта = тмпСтрока.Широта;
			НоваяСтрока.Долгота = тмпСтрока.Долгота;
			//Перепроверим оставшиеся последние 3 точки после удаления предпоследней по всем очкам исключая первые 2
			Для тмп = 1 По ТЗКол Цикл 
			Поворот = СкалярноеПроизведение(ТЗ[ТЗ.Количество()-3] , ТЗ[ТЗ.Количество()-2], ТЗ[ТЗ.Количество()-1]);
			Если Поворот < 0 Тогда
				ТЗ.Удалить(ТЗ[ТЗ.Количество()-2]);
			Иначе	
				Прервать;
			КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
		
	КонецЦикла;
	
	
	Возврат ТЗ;
КонецФункции	

Функция ПолучитьСписокТТ(тмпАгент)
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БПАГМаршруты.ТорговаяТочка,
		|	БПАГМаршруты.Порядок,
		|	БПАГТорговыеТочки.Адрес,
		|	БПАГТорговыеТочки.Широта,
		|	БПАГТорговыеТочки.Долгота,
		|	БПАГМаршруты.ТорговаяТочка.Владелец КАК Контрагент,
		|	БПАГМаршруты.Дата
		|ИЗ
		|	РегистрСведений.БПАГМаршруты КАК БПАГМаршруты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БПАГТорговыеТочки КАК БПАГТорговыеТочки
		|		ПО БПАГМаршруты.ТорговаяТочка = БПАГТорговыеТочки.Ссылка
		|ГДЕ
		|	БПАГМаршруты.Агент = &Агент
		|	И БПАГМаршруты.Вариант = &Вариант
		|	И НЕ БПАГМаршруты.ТорговаяТочка.ПометкаУдаления
		|	И НЕ БПАГМаршруты.ТорговаяТочка.Владелец.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Агент", тмпАгент.Ссылка);
		Запрос.УстановитьПараметр("Вариант", ВариантПланирования);
		
		ТЗ = Запрос.Выполнить().Выгрузить();
		тмпТЗ = ТЗ.Скопировать();
		ТекДата = ДатаПорядка;
		Периодичность = ВариантПланирования.ИнтервалПланирования;
	    ТЗ.Очистить();
		Для Каждого Стр из тмпТЗ Цикл
			РазницаДней = (НачалоДня(ТекДата) - НачалоДня(Стр.Дата)) / 60 / 60 / 24;
			Если РазницаДней % Периодичность = 0 Тогда
				НоваяСтрока = ТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
			КонецЕсли;
		КонецЦикла;
		
		Возврат ТЗ;
КонецФункции	

Процедура СформироватьHTMLКартуЗоны()
	
	НашОбъект = РеквизитФормыВЗначение("Объект");
	
	СтрокаКоординат = "";
	тмпТТ = 0;
	Порядок = 0;
	ПутьККартинкам = БПАГ.БПАГПолучитьНастройку("1СКаталогОбмена") + "Images\";
	ПутьККартинкам =  СтрЗаменить(ПутьККартинкам, "\", "\\");
	СписокТТМаршрута = ПолучитьСписокТТ(АгентПланирования);
	ТЗ = ПолучитьЗоныМаршрута(СписокТТМаршрута);
	//30.07.15
	//Для Каждого тмпСтрока Из СписокТТМаршрута Цикл
	//	Порядок = Порядок + 1;
	//	Если (тмпСтрока.Широта <> 0) И (тмпСтрока.Долгота <> 0) Тогда
	//		СтрокаМаркера = "Порядок: " + Порядок + "\n" + НашОбъект.НормализоватьСтрокуДляPHP(тмпСтрока.Контрагент) + "\n" + НашОбъект.НормализоватьСтрокуДляPHP(тмпСтрока.Адрес);
	//		СтрокаКоординат = СтрокаКоординат + "[""" + СтрокаМаркера + """, " + Формат(тмпСтрока.Широта, "ЧРД=.; ЧГ=0")+ ", " + Формат(тмпСтрока.Долгота, "ЧРД=.; ЧГ=0") + "],";
	//		
	//	КонецЕсли;
	//КонецЦикла;
	//СтрокаКоординат = Лев(СтрокаКоординат, СтрДлина(СтрокаКоординат) - 1);
	Для Каждого тмпСтрока Из СписокТТМаршрута Цикл
		Порядок = Порядок + 1;
		Если (тмпСтрока.Широта <> 0) И (тмпСтрока.Долгота <> 0) Тогда
			НаименованиеКонтрагента = СтрЗаменить(тмпСтрока.Контрагент.Наименование, """", "");
			НаименованиеТорговойТочки = СтрЗаменить(тмпСтрока.ТорговаяТочка.Наименование, """", "");
			//Картинка ТТ
			Картинка = "";
			Для Каждого СтрКартинка из тмпСтрока.ТорговаяТочка.Картинки Цикл
				Картинка = ПутьККартинкам + СтрКартинка.Имя;
				Прервать;
			КонецЦикла;
			СтрокаМаркера = "{title: ""Порядок: " + Порядок + "\n" + НашОбъект.НормализоватьСтрокуДляPHP(НаименованиеКонтрагента) + "\n" + НашОбъект.НормализоватьСтрокуДляPHP(тмпСтрока.Адрес)+ """" +
			", name:""" + НашОбъект.НормализоватьСтрокуДляPHP(НаименованиеКонтрагента) + """" + ", numberpos:""" + НашОбъект.НормализоватьСтрокуДляPHP(Порядок) + """" + ", Adress:""" + НашОбъект.НормализоватьСтрокуДляPHP(тмпСтрока.Адрес) + """" + ", pos:""" + НашОбъект.НормализоватьСтрокуДляPHP(НаименованиеТорговойТочки) + """" + ", picture:" + """" + Картинка + """" + "}";
			СтрокаКоординат = СтрокаКоординат + "[" + СтрокаМаркера + ", " + Формат(тмпСтрока.Широта, "ЧРД=.; ЧГ=0")+ ", " + Формат(тмпСтрока.Долгота, "ЧРД=.; ЧГ=0") + "],";
			
			
			//СтрокаМаркера = "{title: ""Порядок: " + Порядок + "\n" + НашОбъект.НормализоватьСтрокуДляPHP(НаименованиеКонтрагента) + "\n" + НашОбъект.НормализоватьСтрокуДляPHP(тмпСтрока.Адрес)+ """" +
			//", name:""" + НашОбъект.НормализоватьСтрокуДляPHP(НаименованиеКонтрагента) + """" + ", picture:" + """" + Картинка + """" + "}";
			//СтрокаКоординат = СтрокаКоординат + "[" + СтрокаМаркера + ", " + Формат(тмпСтрока.Широта, "ЧРД=.; ЧГ=0")+ ", " + Формат(тмпСтрока.Долгота, "ЧРД=.; ЧГ=0") + "],";
			
		КонецЕсли;
	КонецЦикла;
	СтрокаКоординат = Лев(СтрокаКоординат, СтрДлина(СтрокаКоординат) - 1);
	
	//Текущий маршрут
	//Новое->
	ТЗРезультат = Новый ТаблицаЗначений;
	ТЗРезультат.Колонки.Добавить("Агент");
	ТЗРезультат.Колонки.Добавить("Маркеры");
	ТЗРезультат.Колонки.Добавить("Зоны");
	
	НоваяСтрока = ТЗРезультат.Добавить();
	НоваяСтрока.Агент = АгентПланирования;
	НоваяСтрока.Маркеры = СтрокаКоординат; 
	НоваяСтрока.Зоны = ТЗ;
	//остальные маршруты
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БПАГАгенты.Ссылка
		|ИЗ
		|	Справочник.БПАГАгенты КАК БПАГАгенты
		|ГДЕ
		|	НЕ БПАГАгенты.ЭтоГруппа
		|	И НЕ БПАГАгенты.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Агент", АгентПланирования);
		
		ТЗАгенты = Запрос.Выполнить().Выгрузить();
		
		СтрокаКоординатОстальные = ""; 
		Для Каждого тмпАгент из ТЗАгенты Цикл
			Если тмпАгент.Ссылка <> АгентПланирования Тогда
				СписокТТМаршрута = ПолучитьСписокТТ(тмпАгент);
				//Маркеры
				//тмпТТ = 0;
				//СтрокаМаркера = "";
				//СтрокаКоординат = "";
				Порядок = 0;
				Для Каждого тмпСтрока Из СписокТТМаршрута Цикл
					Порядок = Порядок + 1;
					Если (тмпСтрока.Широта <> 0) И (тмпСтрока.Долгота <> 0) Тогда
						НаименованиеКонтрагента = СтрЗаменить(тмпСтрока.Контрагент.Наименование, """", "");
						НаименованиеТорговойТочки = СтрЗаменить(тмпСтрока.ТорговаяТочка.Наименование, """", "");
						//Картинка ТТ
						Картинка = "";
						Для Каждого СтрКартинка из тмпСтрока.ТорговаяТочка.Картинки Цикл
							Картинка = ПутьККартинкам + СтрКартинка.Имя;
							Прервать;
						КонецЦикла;
						
						СтрокаМаркера = "{title: ""Порядок: " + Порядок + "\n" + НашОбъект.НормализоватьСтрокуДляPHP(НаименованиеКонтрагента) + "\n" + НашОбъект.НормализоватьСтрокуДляPHP(тмпСтрока.Адрес)+ """" +
						", name:""" + НашОбъект.НормализоватьСтрокуДляPHP(НаименованиеКонтрагента) + """" + ", numberpos:""" + НашОбъект.НормализоватьСтрокуДляPHP(Порядок) + """" + ", Adress:""" + НашОбъект.НормализоватьСтрокуДляPHP(тмпСтрока.Адрес) +
						"""" + ", pos:""" + НашОбъект.НормализоватьСтрокуДляPHP(НаименованиеТорговойТочки) + """" + ", picture:" + """" + Картинка + """" + "}";
						СтрокаКоординатОстальные = СтрокаКоординатОстальные + "[" + СтрокаМаркера + ", " + Формат(тмпСтрока.Широта, "ЧРД=.; ЧГ=0")+ ", " + Формат(тмпСтрока.Долгота, "ЧРД=.; ЧГ=0") + "],";
						
						
						//СтрокаМаркера = "{title: ""Порядок: " + Порядок + "\n" + НашОбъект.НормализоватьСтрокуДляPHP(НаименованиеКонтрагента) + "\n" + НашОбъект.НормализоватьСтрокуДляPHP(тмпСтрока.Адрес)+ """" +
						//", name:""" + НашОбъект.НормализоватьСтрокуДляPHP(НаименованиеКонтрагента) + """" + ", picture:" + """" + Картинка + """" + "}";
						//СтрокаКоординатОстальные = СтрокаКоординатОстальные + "[" + СтрокаМаркера + ", " + Формат(тмпСтрока.Широта, "ЧРД=.; ЧГ=0")+ ", " + Формат(тмпСтрока.Долгота, "ЧРД=.; ЧГ=0") + "],";
						
						
						//СтрокаМаркера = "{title: ""Порядок: " + Порядок + "\n" + НашОбъект.НормализоватьСтрокуДляPHP(тмпСтрока.Контрагент) + "\n" + НашОбъект.НормализоватьСтрокуДляPHP(тмпСтрока.Адрес)+ """" +
						//", name:""" + тмпСтрока.Контрагент + """" + ", picture:" + """" + "123.png" + """" + "}";
						//СтрокаКоординатОстальные = СтрокаКоординатОстальные + "[" + СтрокаМаркера + ", " + Формат(тмпСтрока.Широта, "ЧРД=.; ЧГ=0")+ ", " + Формат(тмпСтрока.Долгота, "ЧРД=.; ЧГ=0") + "],";
					КонецЕсли;
				КонецЦикла;
				//СтрокаКоординат = Лев(СтрокаКоординат, СтрДлина(СтрокаКоординат) - 1);
				//Зоны
				ЗонаАгента = ПолучитьЗоныМаршрута(СписокТТМаршрута);
				
				НоваяСтрока = ТЗРезультат.Добавить();
				НоваяСтрока.Агент = тмпАгент.Ссылка;
				//НоваяСтрока.Маркеры = СтрокаКоординат; 
				НоваяСтрока.Зоны = ЗонаАгента;
			КонецЕсли;
		КонецЦикла;
		//СтрокаКоординат = Лев(СтрокаКоординат, СтрДлина(СтрокаКоординат) - 1);//ПАКЛ ?
	СтрокаКоординатОстальные = Лев(СтрокаКоординатОстальные, СтрДлина(СтрокаКоординатОстальные) - 1);
		
		
		Зоны = "";
		Для Каждого тмпСтрока Из ТЗРезультат Цикл
			
			ГраницыЗоны = "";
			тмпТТ = 0;
			Порядок = 0;
			
			ТекущийАгент = тмпСтрока.Агент;
			ТекТЗ = тмпСтрока.Зоны;
			//Информация
			КоличествоТочекАгента = ТекТЗ.Количество();
			ПримернаяДлинаПути = 0;
			ПредыдущаяШ = 0;
			ПредыдущаяД = 0;
			K = 3.1415926535897932 / 180;
			Для Каждого Стр из ТекТЗ Цикл
				A1 = Стр.Широта;
				B1 = Стр.Долгота;
				//Расчет пути "по прямой"
				Если (A1 <> 0) И (ПредыдущаяШ <> 0) И (B1 <> 0) И (ПредыдущаяД <> 0) Тогда
					Расстояние = 2 * ASin(Sqrt(Sin((ПредыдущаяШ - A1) * K / 2) * Sin((ПредыдущаяШ - A1) * K / 2) + Cos(ПредыдущаяШ * K) * Cos(A1 * K) * Sin((ПредыдущаяД - B1) * K / 2) * Sin((ПредыдущаяД - B1) * K / 2)));
					Расстояние = Расстояние * 6367.4446571225;
					Расстояние = ?(Расстояние < 0, -Расстояние, Расстояние);
					ПримернаяДлинаПути = ПримернаяДлинаПути + Расстояние;
				КонецЕсли;
				
				ПредыдущаяШ = A1;
				ПредыдущаяД = B1;
			КонецЦикла;	
			//Границы зоны
			ГраницыЗоны = "{name:" +"""" + ТекущийАгент+ """," + " length:" + """" + СокрЛП(ПримернаяДлинаПути)+ """," + " num:" +СокрЛП(КоличествоТочекАгента) + "}, ";
			Для Каждого Стр из ТекТЗ Цикл
				Порядок = Порядок + 1;
				Если (Стр.Широта <> 0) И (Стр.Долгота <> 0) Тогда
					//ГраницыЗоны = ГраницыЗоны + "[" + Формат(тмпСтрока.Широта, "ЧРД=.; ЧГ=0")+ ", " + Формат(тмпСтрока.Долгота, "ЧРД=.; ЧГ=0") + "],";
					ГраницыЗоны = ГраницыЗоны + "[" + Формат(Стр.Широта, "ЧРД=.; ЧГ=0")+ ", " + Формат(Стр.Долгота, "ЧРД=.; ЧГ=0") + "],";
				КонецЕсли;
			КонецЦикла;
			//КонецЦикла;
			ГраницыЗоны = Лев(ГраницыЗоны, СтрДлина(ГраницыЗоны) - 1);
			
			Зоны = Зоны + "[" + ГраницыЗоны + "],";
		КонецЦикла;
	
		//Новое<-
	
	
	Зоны = Лев(Зоны, СтрДлина(Зоны) - 1);
	Если НЕ Элементы.КнопкаПоказатьЗоныВсехАгентов.Пометка Тогда
		Зоны = "";
	КонецЕСли;
//ПАКЛ<-
Текст = 
"<HTML><HEAD><TITLE>Карты Google</TITLE>
|<META name=viewport content=""initial-scale=1.0, user-scalable=yes""></META>
|<META content=""text/html; charset=windows-1251"" http-equiv=content-type></META>
|<SCRIPT type=text/javascript src=""http://maps.google.com/maps/api/js?libraries=geometry&sensor=false""></SCRIPT>
|<SCRIPT type=text/javascript>
|
|var map;
|var zones = [" + Зоны + "];
|var agentRoute = [" + СтрокаКоординат + "];
|var posArray = [" + СтрокаКоординатОстальные + "];
|
|function pinSymbol(color) {
|    return {
|        path: 'M 0,0 C -2,-20 -10,-22 -10,-30 A 10,10 0 1,1 10,-30 C 10,-22 2,-20 0,0 z M -2,-30 a 2,2 0 1,1 4,0 2,2 0 1,1 -4,0',
|        fillColor: color,
|        fillOpacity: 0.7,
|        strokeColor: '#777777',
|        strokeWeight: 1,
|        scale: 0.8
|    };
|}
|
|function drawRoute() {
|    var bounds = new google.maps.LatLngBounds();
|    var coords = new Array(agentRoute.length);
|    var infoWindow = new google.maps.InfoWindow({
|        maxWidth: 800
|    });
|    
|    // Markers
|    for (var i = 0; i < agentRoute.length; i++) {
|        var place = agentRoute[i];
|        var myLatLng = new google.maps.LatLng(place[1], place[2]);
|        bounds.extend(myLatLng);
|        coords[i] = myLatLng;
|        var marker = new google.maps.Marker({
|            position: myLatLng,
|            title: place[0].title,
|            type: 0,
|            index: i
|        });
|        
|        google.maps.event.addListener(marker, 'click', function() {
|            infoWindow.setContent(getMarkerContent(this));
|            infoWindow.open(map, this);
|        });
|        
|        marker.setMap(map); 
|    }
|    
|    for (var i = 0; i < posArray.length; i++) {
|        var place = posArray[i];
|        var myLatLng = new google.maps.LatLng(place[1], place[2]);
|        bounds.extend(myLatLng);
|        var marker = new google.maps.Marker({
|            position: myLatLng,
|            icon: pinSymbol(""#FFFFFF""),
|            zIndex: -99999999,
|            title: place[0].title,
|            type: 1,
|            index: i
|        });
|        
|        google.maps.event.addListener(marker, 'click', function() {
|            infoWindow.setContent(getMarkerContent(this));
|            infoWindow.open(map, this);
|        });
|        
|        marker.setMap(map); 
|    }
|    
|    // Polyline
|    var lineSymbol = {
|        path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW
|    };
|      
|    var polyline = new google.maps.Polyline({
|        path: coords,
|        strokeColor: ""#0000AA"",
|        strokeOpacity: 1.0,
|        strokeWeight: 2,
|        icons: [{
|            icon: lineSymbol,
|            repeat: '80px',
|            offset: '100%'
|        }]
|    });
|    polyline.setMap(map);";

Если Элементы.КнопкаПоказатьЗоныВсехАгентов.Пометка Тогда
Текст = Текст + " 
|
|    // Polygons
|    for (var i = 0; i < zones.length; i++) {
|        var zoneBorders = new Array(zones[i].length - 1);
|        for (var j = 1; j < zones[i].length; j++) {
|            var place = zones[i][j];
|            var myLatLng = new google.maps.LatLng(place[0], place[1]);
|            zoneBorders[j - 1] = myLatLng;
|        }
|        var tmpColor = (i == 0) ? ""#00CC00"" : ""#777777"";
|
|        var polygon = new google.maps.Polygon({
|            paths: zoneBorders,
|            strokeColor: tmpColor,
|            strokeOpacity: 1.0,
|            strokeWeight: 2,
|            fillColor: tmpColor,
|            fillOpacity: 0.2,
|            origColor: tmpColor,
|            index: i
|        });
|        
|        google.maps.event.addListener(polygon, 'click', function(event) {
|            infoWindow.setContent(getPolygonContent(this));
|            infoWindow.setPosition(event.latLng);
|            infoWindow.open(map, this);
|        });
|        
|        google.maps.event.addListener(polygon, 'mouseover', function() {
|            this.setOptions({
|                fillColor: ""#FF0000""
|            });
|        }); 
|
|        google.maps.event.addListener(polygon, 'mouseout', function(){
|            this.setOptions({
|                fillColor: this.origColor
|            });
|        });
|        
|        polygon.setMap(map);
|    }
|    
|    // Center
|    map.setCenter(bounds.getCenter(), map.fitBounds(bounds));
|}
|";
КонецЕсли;


Текст = Текст +  "
|
|function getMarkerContent(marker) {
|    var pos = (marker.type == 0 ? agentRoute[marker.index][0] : posArray[marker.index][0]);
|    
|    var contentString =
|    '<h2 class=""firstHeading"">Контрагент: ' + pos.name + '. </h2>' +
|    '<h2 class=""firstHeading"">Торговая точка: ' + pos.pos + '. </h2>' +
|    '<div class=""bodyContent"">' +
|    '<p><img src=""' + pos.picture + '"" width=""50px"" height=""50px"" style=""float:left; padding-right:15px"">' +
|    'Порядок: ' + pos.numberpos + //pos.title.replace(/\n/g, ""<br />"")
|    '<br />Адрес: ' + pos.Adress + '</p>' +
|    '</div>';
|    
|    return contentString;
|}
|
|function getPolygonContent(polygon) {
|    var area = Math.round(google.maps.geometry.spherical.computeArea(polygon.getPath()) / 1000000);
|    var agent = zones[polygon.index][0];
|    
|    var contentString =
|    '<h2 class=""firstHeading"">Зона агента ' + agent.name + '!</h2>' +
|    '<div class=""bodyContent"">' +
|    '<p><strong>Пан Агент:</strong> информация' +
|    '<br />Протяженность маршрута по прямым отрезкам: ' + agent.length + ' км' +
|    '<br />Количество торговых точек на маршруте: ' + agent.num +
|    '<br />Площадь зоны: ' + area + ' км<sup>2</sup>'
|    '<br /><br /><a href=""http://www.panagent.ru/manuals/tst.html"">http://www.panagent.ru/manuals/tst.html</a></p>' +
|    '</div>';
|    
|    return contentString;
|}
|
|function onLoad() {
|    var myOptions = {
|        mapTypeId: google.maps.MapTypeId.ROADMAP
|    }
|    map = new google.maps.Map(document.getElementById(""map_canvas""), myOptions);
|    drawRoute();
|}
|
|window.onload = onLoad;  
|
|</SCRIPT>
|</HEAD>
|<BODY onload=""onLoad()"">
|  <div id=""map_canvas"" style=""width:100%; height:100%""></div>
|</BODY>
|</HTML>";

//СтрокаКартыЗоны = Текст;
СтрокаКарты = Текст;

////******************


//Текст = 
//"<HTML><HEAD><TITLE>Карты Google</TITLE>
//|<META name=viewport content=""initial-scale=1.0, user-scalable=yes""></META>
//|<META content=""text/html; charset=windows-1251"" http-equiv=content-type></META>
//|<SCRIPT type=text/javascript src=""http://maps.google.com/maps/api/js?libraries=geometry&sensor=false""></SCRIPT>
//|<SCRIPT type=text/javascript>
//|
//|var map;
//|var zones = [" + Зоны + "];
//|var agentRoute = [" + СтрокаКоординат + "];
//|var posArray = [" + СтрокаКоординатОстальные + "];
//|
//|function pinSymbol(color) {
//|    return {
//|        path: 'M 0,0 C -2,-20 -10,-22 -10,-30 A 10,10 0 1,1 10,-30 C 10,-22 2,-20 0,0 z M -2,-30 a 2,2 0 1,1 4,0 2,2 0 1,1 -4,0',
//|        fillColor: color,
//|        fillOpacity: 0.7,
//|        strokeColor: '#777777',
//|        strokeWeight: 1,
//|        scale: 0.8
//|    };
//|}
//|
//|function drawRoute() {
//|    var bounds = new google.maps.LatLngBounds();
//|    var coords = new Array(agentRoute.length);
//|    var infoWindow = new google.maps.InfoWindow({
//|        maxWidth: 800
//|    });
//|    
//|    // Markers
//|    for (var i = 0; i < agentRoute.length; i++) {
//|        var place = agentRoute[i];
//|        var myLatLng = new google.maps.LatLng(place[1], place[2]);
//|        bounds.extend(myLatLng);
//|        coords[i] = myLatLng;
//|        var marker = new google.maps.Marker({
//|            position: myLatLng,
//|            title: place[0].title,
//|            type: 0,
//|            index: i
//|        });
//|        
//|        google.maps.event.addListener(marker, 'click', function() {
//|            infoWindow.setContent(getMarkerContent(this));
//|            infoWindow.open(map, this);
//|        });
//|        
//|        marker.setMap(map); 
//|    }
//|    
//|    for (var i = 0; i < posArray.length; i++) {
//|        var place = posArray[i];
//|        var myLatLng = new google.maps.LatLng(place[1], place[2]);
//|        bounds.extend(myLatLng);
//|        var marker = new google.maps.Marker({
//|            position: myLatLng,
//|            icon: pinSymbol(""#FFFFFF""),
//|            zIndex: -99999999,
//|            title: place[0].title,
//|            type: 1,
//|            index: i
//|        });
//|        
//|        google.maps.event.addListener(marker, 'click', function() {
//|            infoWindow.setContent(getMarkerContent(this));
//|            infoWindow.open(map, this);
//|        });
//|        
//|        marker.setMap(map); 
//|    }
//|    
//|    // Polyline
//|    var lineSymbol = {
//|        path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW
//|    };
//|      
//|    var polyline = new google.maps.Polyline({
//|        path: coords,
//|        strokeColor: ""#0000AA"",
//|        strokeOpacity: 1.0,
//|        strokeWeight: 2,
//|        icons: [{
//|            icon: lineSymbol,
//|            repeat: '80px',
//|            offset: '100%'
//|        }]
//|    });
//|    polyline.setMap(map);
//|    
//|    // Polygons
//|    for (var i = 0; i < zones.length; i++) {
//|        var zoneBorders = new Array(zones[i].length - 1);
//|        for (var j = 1; j < zones[i].length; j++) {
//|            var place = zones[i][j];
//|            var myLatLng = new google.maps.LatLng(place[0], place[1]);
//|            zoneBorders[j - 1] = myLatLng;
//|        }
//|        var tmpColor = (i == 0) ? ""#00CC00"" : ""#777777"";
//|
//|        var polygon = new google.maps.Polygon({
//|            paths: zoneBorders,
//|            strokeColor: tmpColor,
//|            strokeOpacity: 1.0,
//|            strokeWeight: 2,
//|            fillColor: tmpColor,
//|            fillOpacity: 0.2,
//|            origColor: tmpColor,
//|            index: i
//|        });
//|        
//|        google.maps.event.addListener(polygon, 'click', function(event) {
//|            infoWindow.setContent(getPolygonContent(this));
//|            infoWindow.setPosition(event.latLng);
//|            infoWindow.open(map, this);
//|        });
//|        
//|        google.maps.event.addListener(polygon, 'mouseover', function() {
//|            this.setOptions({
//|                fillColor: ""#FF0000""
//|            });
//|        }); 
//|
//|        google.maps.event.addListener(polygon, 'mouseout', function(){
//|            this.setOptions({
//|                fillColor: this.origColor
//|            });
//|        });
//|        
//|        polygon.setMap(map);
//|    }
//|    
//|    // Center
//|    map.setCenter(bounds.getCenter(), map.fitBounds(bounds));
//|}
//|
//|function getMarkerContent(marker) {
//|    var pos = (marker.type == 0 ? agentRoute[marker.index][0] : posArray[marker.index][0]);
//|    
//|    var contentString =
//|    '<h2 class=""firstHeading"">Контрагент: ' + pos.name + '. </h2>' +
//|    '<h2 class=""firstHeading"">Торговая точка: ' + pos.pos + '. </h2>' +
//|    '<div class=""bodyContent"">' +
//|    '<p><img src=""' + pos.picture + '"" width=""50px"" height=""50px"" style=""float:left; padding-right:15px"">' +
//|    'Порядок: ' + pos.numberpos + //pos.title.replace(/\n/g, ""<br />"")
//|    '<br />Адрес: ' + pos.Adress + '</p>' +
//|    '</div>';
//|    
//|    return contentString;
//|}
//|
//|function getPolygonContent(polygon) {
//|    var area = Math.round(google.maps.geometry.spherical.computeArea(polygon.getPath()) / 1000000);
//|    var agent = zones[polygon.index][0];
//|    
//|    var contentString =
//|    '<h2 class=""firstHeading"">Зона агента ' + agent.name + '!</h2>' +
//|    '<div class=""bodyContent"">' +
//|    '<p><strong>Пан Агент:</strong> информация' +
//|    '<br />Протяженность маршрута по прямым отрезкам: ' + agent.length + ' км' +
//|    '<br />Количество торговых точек на маршруте: ' + agent.num +
//|    '<br />Площадь зоны: ' + area + ' км<sup>2</sup>'
//|    '<br /><br /><a href=""http://www.panagent.ru/manuals/tst.html"">http://www.panagent.ru/manuals/tst.html</a></p>' +
//|    '</div>';
//|    
//|    return contentString;
//|}
//|
//|function onLoad() {
//|    var myOptions = {
//|        mapTypeId: google.maps.MapTypeId.ROADMAP
//|    }
//|    map = new google.maps.Map(document.getElementById(""map_canvas""), myOptions);
//|    drawRoute();
//|}
//|
//|window.onload = onLoad;  
//|
//|</SCRIPT>
//|</HEAD>
//|<BODY onload=""onLoad()"">
//|  <div id=""map_canvas"" style=""width:100%; height:100%""></div>
//|</BODY>
//|</HTML>";

////СтрокаКартыЗоны = Текст;
//СтрокаКарты = Текст;


КонецПроцедуры

&НаКлиенте
Процедура ПолеДатыПриИзменении(Элемент)
	ОбновитьПорядокПосещений();
	СформироватьHTMLКарту();
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда) 	
	Если Элементы.ГруппаСтраниц.ТекущаяСтраница.Имя = "ГруппаПериодичностьПосещений" Тогда
		ЗаписатьПосещения();
	ИначеЕсли Элементы.ГруппаСтраниц.ТекущаяСтраница.Имя = "ГруппаПорядокПосещения" Тогда
		ЗаписатьПорядокПосещений();
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПосещения()
	НаборЗаписей = РегистрыСведений.БПАГМаршруты.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Вариант.Установить(ВариантПланирования);
	НаборЗаписей.Отбор.Агент.Установить(АгентПланирования);
		
	НаборЗаписей.Прочитать();
	
	//Сохраним порядок посещений
	ТЗПорядок = НаборЗаписей.Выгрузить();
	ТЗПорядок.Колонки.Добавить("Хэш");
	Для Каждого тмпСтрока Из ТЗПорядок Цикл
		тмпСтрока.Хэш = СокрЛП(тмпСтрока.Агент.Код) + "=-=" + СокрЛП(тмпСтрока.ТорговаяТочка.Код) + "=-=" + СокрЛП(тмпСтрока.Дата);	
	КонецЦикла;
	
	НаборЗаписей.Очистить();
	ТекТаблицаМаршрута = ЭтаФорма.СписокМаршрута.Выгрузить();
	
	СписокИзмененныхТочек = Новый СписокЗначений();
	
	НомерВСпискеПосещений = 0;
	Для Каждого тмпСтрока Из ТекТаблицаМаршрута Цикл
		
		Если НЕ тмпСтрока.ТорговаяТочка.Пустая() Тогда
			Если (тмпСтрока.Адрес <> тмпСтрока.ТорговаяТочка.Адрес) ИЛИ (тмпСтрока.Широта <> тмпСтрока.ТорговаяТочка.Широта) ИЛИ (тмпСтрока.Долгота <> тмпСтрока.ТорговаяТочка.Долгота) Тогда
				//Второй раз не изменяем
				Если СписокИзмененныхТочек.НайтиПоЗначению(тмпСтрока.ТорговаяТочка) = Неопределено Тогда
					Объ = тмпСтрока.ТорговаяТочка.ПолучитьОбъект();
					Объ.Адрес = тмпСтрока.Адрес;
					Объ.Широта = тмпСтрока.Широта;
					Объ.Долгота = тмпСтрока.Долгота;
					Объ.Записать();
					СписокИзмененныхТочек.Добавить(тмпСтрока.ТорговаяТочка);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//Посещения
		ТекПорядокПосещения = ЭтаФорма.ПорядокПосещения.Выгрузить();
		
		НомерВСпискеПосещений = НомерВСпискеПосещений + 1;
		Для i = 1 По ТекТаблицаМаршрута.Колонки.Количество() Цикл
			тмпКолонка = ТекТаблицаМаршрута.Колонки[i - 1]; 
			Если Лев(тмпКолонка.Имя, 4) = "День" Тогда
				Если тмпСтрока[i - 1] = 1 Тогда
					  
					НомерДня = Число(Сред(тмпКолонка.Имя, 5));
					
					НоваяЗапись = НаборЗаписей.Добавить();
					НоваяЗапись.Вариант = ВариантПланирования;
					НоваяЗапись.Агент = АгентПланирования;
					НоваяЗапись.ТорговаяТочка = тмпСтрока.ТорговаяТочка;
					НоваяЗапись.Дата = ВариантПланирования.ДатаНачала + (НомерДня - 1) * 60 * 60 * 24;
					
					НоваяЗапись.НомерВСпискеПосещений = НомерВСпискеПосещений;
					
					//Восстановим (по возможности) порядок посещений
					Хэш = СокрЛП(НоваяЗапись.Агент.Код) + "=-=" + СокрЛП(НоваяЗапись.ТорговаяТочка.Код) + "=-=" + СокрЛП(НоваяЗапись.Дата);
					НайденнаяСтрокаПорядка = ТЗПорядок.Найти(Хэш, "Хэш");
					Если НайденнаяСтрокаПорядка <> Неопределено Тогда
						НоваяЗапись.Порядок = НайденнаяСтрокаПорядка.Порядок;
					Иначе
						НоваяЗапись.Порядок = 0;
					КонецЕсли;
					
				КонецЕсли;			
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	НаборЗаписей.Записать();	
	ФлагИзмененностиПосещений = Ложь;	
КонецПроцедуры

Процедура ЗаписатьПорядокПосещений()
	НаборЗаписей = РегистрыСведений.БПАГМаршруты.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Вариант.Установить(ВариантПланирования);
	НаборЗаписей.Отбор.Агент.Установить(АгентПланирования);
		
	НаборЗаписей.Прочитать();
	
	ТЗ = ПорядокПосещения.Выгрузить();
	ТЗ.Колонки.Добавить("Хэш");
	Ном = 0;
	Для Каждого тмпСтрока Из ТЗ Цикл
		Ном = Ном + 1;
		тмпСтрока.Номер = Ном;
		тмпСтрока.Хэш = СокрЛП(тмпСтрока.ТорговаяТочка.Код) + "=-=" + СокрЛП(тмпСтрока.НомерВСпискеПосещений);
	КонецЦикла;
	
	Периодичность = ВариантПланирования.ИнтервалПланирования;
	Для Каждого Запись Из НаборЗаписей Цикл
		РазницаДней = (НачалоДня(ДатаПорядка) - НачалоДня(Запись.Дата)) / 60 / 60 / 24;
		Если РазницаДней % Периодичность = 0 Тогда
			
			Хэш = СокрЛП(Запись.ТорговаяТочка.Код) + "=-=" + СокрЛП(Запись.НомерВСпискеПосещений);
			НайденнаяСтрокаПорядкаПосещений = ТЗ.Найти(Хэш, "Хэш");
			Если НайденнаяСтрокаПорядкаПосещений <> Неопределено Тогда
				Запись.Порядок = НайденнаяСтрокаПорядкаПосещений.Номер;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	ФлагИзмененностиПорядкаПосещений = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ДатаПорядка = ТекущаяДата();
	ОбновитьТаблицуМаршрута(Истина);
	УстановитьОтборПоКлиентуре();//ПАКЛ
	ТаблицаКонтрагентовИзменениеФона();//ПАКЛ
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМаршрутаПриИзменении(Элемент)
	ОбновитьНадписьВариантПланирования();
	ТаблицаКонтрагентовИзменениеФона();//ПАКЛ
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМаршрутаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаСервере
Процедура ПеренумероватьСтрокиПорядкаПосещений();
	Ном = 0;
	Для Каждого тмпСтрока Из ПорядокПосещения Цикл
		Ном = Ном + 1;	
		тмпСтрока.Номер = Ном;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПорядокПосещенияПриИзменении(Элемент)
	ФлагИзмененностиПорядкаПосещений = Истина;
	ПеренумероватьСтрокиПорядкаПосещений();
КонецПроцедуры

&НаКлиенте
Процедура ПорядокПосещенияПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

Процедура ТаблицаКонтрагентовИзменениеФона()
	
	Настройка1СРаскрашиватьВходящихВКлиентуру = БПАГ.БПАГПолучитьНастройку("1СРаскрашиватьВходящихВКлиентуру");
	Если НЕ Настройка1СРаскрашиватьВходящихВКлиентуру Тогда
		Возврат;
	КонецЕсли;

	ЦветЧастичноПрисутствующихВМаршруте = Новый Цвет(200, 200, 200);
	ЦветПрисутствующихВМаршруте = Новый Цвет(147, 220, 147);
	
	Для ОформлениеСтроки = 0 по (СписокМаршрута.Количество()-1) Цикл
		тмпКонтрагент = СписокМаршрута[ОформлениеСтроки].Контрагент;
		Если НЕ тмпКонтрагент.ЭтоГруппа Тогда
			//Контрагент присутствует в маршруте
			ТмпСписок = Новый СписокЗначений;
			ТмпСписок.Добавить(тмпКонтрагент);
			
			ЭлементОформления=СписокКонтрагентов.УсловноеОформление.Элементы.Добавить();
			
			ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ПравоеЗначение = ТмпСписок;
			
			
			//цвет текста строки  
			Элемент=ЭлементОформления.Оформление.Элементы[0];
			Элемент.Использование=Истина;
			Элемент.Значение= ЦветПрисутствующихВМаршруте;			
			
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры	

//ПАКЛ->
Процедура ТаблицаКонтрагентовИзменениеФонаУбратьФон()
	
	Настройка1СРаскрашиватьВходящихВКлиентуру = БПАГ.БПАГПолучитьНастройку("1СРаскрашиватьВходящихВКлиентуру");
	Если НЕ Настройка1СРаскрашиватьВходящихВКлиентуру Тогда
		Возврат;
	КонецЕсли;

	ЦветЧастичноПрисутствующихВМаршруте = Новый Цвет(200, 200, 200);
	ЦветПрисутствующихВМаршруте = Новый Цвет(255, 255, 255);
	
	Для ОформлениеСтроки = 0 по (СписокМаршрута.Количество() - 1) Цикл
		тмпКонтрагент = СписокМаршрута[ОформлениеСтроки].Контрагент;
		Если НЕ тмпКонтрагент.ЭтоГруппа Тогда
			//Контрагент присутствует в маршруте
						ТмпСписок = Новый СписокЗначений;
						ТмпСписок.Добавить(тмпКонтрагент);
						
						ЭлементОформления = СписокКонтрагентов.УсловноеОформление.Элементы.Добавить();
						
						ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
						ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
						ЭлементОтбора.Использование = Истина;
						ЭлементОтбора.ПравоеЗначение = ТмпСписок;
						
						//Цвет текста строки  
						Элемент = ЭлементОформления.Оформление.Элементы[0];
						Элемент.Использование = Истина;
						Элемент.Значение = ЦветПрисутствующихВМаршруте;			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры	
Процедура УстановитьОтборПоКлиентуре()
	
	Если АгентПланирования.Пустая() Тогда
		Возврат;
	КонецЕсли;	
	
	//Контрагенты
	СписокОтбора = Новый СписокЗначений();
	ОбъектОбработка = ЭтаФорма.РеквизитФормыВЗначение("Объект");	
	МассивКлиентуры = ОбъектОбработка.ПолучитьМассивКлиентурыКлиентов(АгентПланирования);
	Для Каждого тмпЭлемент Из МассивКлиентуры Цикл
		СписокОтбора.Добавить(тмпЭлемент);
	КонецЦикла;
	
	//КонтрагентыСписок.Отбор.Сбросить();
	//КонтрагентыСписок.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСпискеПоИерархии;
	//КонтрагентыСписок.Отбор.Ссылка.Значение = СписокОтбора;
	//КонтрагентыСписок.Отбор.Ссылка.Установить();

	//Сохраним кэш клиентуры для раскраски
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БПАГКлиентураСостав.Контрагент КАК Контрагент
	|ИЗ
	|	Справочник.БПАГАгенты КАК БПАГАгенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГКлиентура.Состав КАК БПАГКлиентураСостав
	|		ПО БПАГАгенты.Клиентура = БПАГКлиентураСостав.Ссылка
	|ГДЕ
	|	НЕ БПАГКлиентураСостав.Контрагент.ПометкаУдаления
	|	И БПАГАгенты.Ссылка В(&МассивАгентов)
	|	И БПАГКлиентураСостав.Контрагент <> &ПустойКонтрагент
	|	И БПАГКлиентураСостав.ТорговаяТочка = &ПустаяТТ";
	
	Запрос.УстановитьПараметр("МассивАгентов", АгентПланирования);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.БПАГКлиентура.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяТТ", Справочники.БПАГТорговыеТочки.ПустаяСсылка());
	
	МассивПолныхКонтрагентов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БПАГКлиентураСостав.ТорговаяТочка КАК ТорговаяТочка,
	|	БПАГКлиентураСостав.ТорговаяТочка.Владелец КАК Контрагент
	|ИЗ
	|	Справочник.БПАГАгенты КАК БПАГАгенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БПАГКлиентура.Состав КАК БПАГКлиентураСостав
	|		ПО БПАГАгенты.Клиентура = БПАГКлиентураСостав.Ссылка
	|ГДЕ
	|	НЕ БПАГКлиентураСостав.ТорговаяТочка.ПометкаУдаления
	|	И БПАГАгенты.Ссылка В(&МассивАгентов)
	|	И БПАГКлиентураСостав.ТорговаяТочка <> &ПустаяТТ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БПАГТорговыеТочки.Ссылка,
	|	БПАГТорговыеТочки.Владелец
	|ИЗ
	|	Справочник.БПАГТорговыеТочки КАК БПАГТорговыеТочки
	|ГДЕ
	|	БПАГТорговыеТочки.Владелец В ИЕРАРХИИ(&ПолныеКонтрагенты)
	|	И НЕ БПАГТорговыеТочки.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("МассивАгентов", АгентПланирования);
	Запрос.УстановитьПараметр("ПустаяТТ", Справочники.БПАГТорговыеТочки.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПолныеКонтрагенты", МассивПолныхКонтрагентов);
	
	ТЗКлиентураТТ = Запрос.Выполнить().Выгрузить();
	ТЗКлиентураТТ.Свернуть("ТорговаяТочка, Контрагент");
	
	////Отбор ТТ
	//СписокОтбора = Новый СписокЗначений();
	//Для Каждого тмпЭлемент Из ТЗКлиентураТТ Цикл
	//	СписокОтбора.Добавить(тмпЭлемент.ТорговаяТочка);
	//КонецЦикла;
	//
	//ТорговыеТочкиСписок.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСпискеПоИерархии;
	//ТорговыеТочкиСписок.Отбор.Ссылка.Значение = СписокОтбора;
	//ТорговыеТочкиСписок.Отбор.Ссылка.Установить();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМаршрутаПередУдалением(Элемент, Отказ)
	ТаблицаКонтрагентовИзменениеФонаУбратьФон();//ПАКЛ
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЗоныВсехАгентов(Команда)
	
	Элементы.КнопкаПоказатьЗоныВсехАгентов.Пометка = Не Элементы.КнопкаПоказатьЗоныВсехАгентов.Пометка;
	
	//ПоказатьНаКарте(Элементы.КнопкаПоказатьЗоныВсехАгентов.Пометка);
	Если Элементы.КнопкаПоказатьЗоныВсехАгентов.Пометка Тогда
		СформироватьHTMLКартуЗоны();
	Иначе 
		СформироватьHTMLКарту();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМаршрутаПриАктивизацииСтроки(Элемент)
	//Элементы.ТаблицаМаршрута.ВыделенныеСтроки.Очистить();
	
	//Элементы.ТаблицаМаршрута.ТекущиеДанные .ВыделенныеСтроки[0].
	
	//Элемент.
	
КонецПроцедуры

//ПАКЛ<-
