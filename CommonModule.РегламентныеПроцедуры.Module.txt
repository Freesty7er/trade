
#Область РассылкаSMS

Процедура РассылкаSMS() Экспорт
	
	НачатьТранзакцию();
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	запрос.Текст =
	"ВЫБРАТЬ
	|	СписокРассылкиSMS.Документ КАК Документ,
	|	СписокРассылкиSMS.ФизическоеЛицо,
	|	СписокРассылкиSMS.ФизическоеЛицо.Телефон КАК Телефон
	|ИЗ
	|	РегистрСведений.СписокРассылкиSMS КАК СписокРассылкиSMS
	|ГДЕ
	|	СписокРассылкиSMS.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРассылкиSMS.Новый)
	|	И СписокРассылкиSMS.ФизическоеЛицо.Телефон <> """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ
	|АВТОУПОРЯДОЧИВАНИЕ";
	#КонецОбласти
	
	результат = запрос.Выполнить();
	
	блокировкаДанных = Новый БлокировкаДанных;
	
	элементБлокировки = блокировкаДанных.Добавить("РегистрСведений.СписокРассылкиSMS");
	элементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	элементБлокировки.ИсточникДанных = результат;
	элементБлокировки.ИспользоватьИзИсточникаДанных("Документ", "Документ");
	элементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");
	
	блокировкаДанных.Заблокировать();
	
	SMSCUAОбъект = Обработки.SMSCUA.Создать();
	SMSCUAОбъект.SMSC_LOGIN 	= Константы.ИмяПользователяSMSCUA.Получить();
	SMSCUAОбъект.SMSC_PASSWORD 	= Константы.ПарольПользователяSMSCUA.Получить();
	SMSCUAОбъект.SMSC_HTTPS 	= 0;
	SMSCUAОбъект.SMSC_DEBUG 	= ?(Константы.РежимОтладкиSMSCUA.Получить(), 1, 0);
	
	имяСобытияЖурналаРегистрации = НСтр("ru = 'Рассылка SMS'");
	
	выборка = результат.Выбрать();
	Пока выборка.Следующий() Цикл
		
		физическоеЛицо = выборка.ФизическоеЛицо;
		
		менеджерЗаписи = РегистрыСведений.СписокРассылкиSMS.СоздатьМенеджерЗаписи();
		менеджерЗаписи.Документ = выборка.Документ;
		менеджерЗаписи.ФизическоеЛицо = физическоеЛицо;
		менеджерЗаписи.Прочитать();
		
		менеджерЗаписи.КоличествоПопыток = менеджерЗаписи.КоличествоПопыток + 1;
		
		телефон = выборка.Телефон;
		Если ПустаяСтрока(телефон) Тогда
			
			//менеджерЗаписи.Статус = Перечисления.СтатусыРассылкиSMS.Ошибка;
			текстСообщения = СтрШаблон(НСтр("ru = 'Для физического лица не указан номер телефона: %1'"), телефон);
			ЗаписьЖурналаРегистрации(имяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыСведений.СписокРассылкиSMS, физическоеЛицо, текстСообщения);
			
		Иначе
			
			ответ = SMSCUAОбъект.ПослатьSMS(телефон, менеджерЗаписи.ТекстСообщения,,, менеджерЗаписи.ИдентификаторСообщения,,"fajno.ua");
			
			Если ответ.Количество() = 2 Тогда
				
				// Это ошибка.
				текстСообщения = СтрШаблон(НСтр("ru = 'При отправке сообщения возникла ошибка с кодом %1.'"), ответ[1].Значение);
				ЗаписьЖурналаРегистрации(имяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыСведений.СписокРассылкиSMS, физическоеЛицо, текстСообщения);
				
			Иначе
				
				// Сообщение отправлено успешно.
				менеджерЗаписи.ИдентификаторСообщения = ответ[0].Значение;
				менеджерЗаписи.Статус = Перечисления.СтатусыРассылкиSMS.Отправлено;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		Если менеджерЗаписи.КоличествоПопыток = 5
			И менеджерЗаписи.Статус <> Перечисления.СтатусыРассылкиSMS.Отправлено Тогда
			
			менеджерЗаписи.Статус = Перечисления.СтатусыРассылкиSMS.Ошибка;
			ЗаписьЖурналаРегистрации(имяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыСведений.СписокРассылкиSMS, физическоеЛицо, НСтр("ru = 'Не удалось отправить сообщение.'"));
			
		КонецЕсли; 
		
		менеджерЗаписи.Записать();
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

#КонецОбласти 

#Область ОтложеннаяРегистрацияИзмененийДляПОС

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ОтложеннаяРегистрацияИзмененийПОС() Экспорт
	
	имяСобытияЖурналаРегистрации = НСтр("ru = 'Отложенная регистрация изменений'");
	
	запрос = Новый Запрос;
	запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	#Область ТекстЗапроса
	
	запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтложеннаяРегистрацияИзменений.Документ
	|ИЗ
	|	РегистрСведений.ОтложеннаяРегистрацияИзменений КАК ОтложеннаяРегистрацияИзменений
	|ГДЕ
	|	ОтложеннаяРегистрацияИзменений.Документ.Дата <= &РабочаяДата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтложеннаяРегистрацияИзменений.Подразделение КАК Подразделение,
	|	ОтложеннаяРегистрацияИзменений.Документ
	|ИЗ
	|	РегистрСведений.ОтложеннаяРегистрацияИзменений КАК ОтложеннаяРегистрацияИзменений
	|ГДЕ
	|	ОтложеннаяРегистрацияИзменений.Документ.Дата <= &РабочаяДата
	|ИТОГИ ПО
	|	Подразделение";
	
	
	#КонецОбласти 
	
	запрос.УстановитьПараметр("РабочаяДата", КонецДня(ТекущаяДатаСеанса()));
	результатЗапроса = запрос.ВыполнитьПакет();
	
	Если результатЗапроса[0].Пустой() Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	НачатьТранзакцию();
	
	блокировкаДанных = Новый БлокировкаДанных;
	
	элементБлокировки = блокировкаДанных.Добавить("РегистрСведений.ОтложеннаяРегистрацияИзменений");
	элементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	элементБлокировки.ИсточникДанных = результатЗапроса[0];
	элементБлокировки.ИспользоватьИзИсточникаДанных("Документ", "Документ");
	
	блокировкаДанных.Заблокировать();
	
	массивУзлов = Новый Массив;
	менеджерЗаписи = РегистрыСведений.ОтложеннаяРегистрацияИзменений.СоздатьМенеджерЗаписи();
	
	выборкаПодразделений = результатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Подразделение");
	Пока выборкаПодразделений.Следующий() Цикл
		
		массивУзлов = ПолучитьУзлыПоПодразделению(выборкаПодразделений.Подразделение);
		
		// получим список узлов для Подразделения
		выборка = выборкаПодразделений.Выбрать();
		Пока выборка.Следующий() Цикл
			
			ПланыОбмена.ЗарегистрироватьИзменения(массивУзлов, выборка.Документ);
			
			текстСообщения = НСтр(СтрШаблон("ru = 'Выполнена регистрация изменений: %1'", выборка.Документ));
			ЗаписьЖурналаРегистрации(имяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Предупреждение, Метаданные.РегистрыСведений.ОтложеннаяРегистрацияИзменений, выборкаПодразделений.Подразделение, текстСообщения);
			
			менеджерЗаписи.Подразделение = выборкаПодразделений.Подразделение; 
			менеджерЗаписи.Документ = выборка.Документ;
			менеджерЗаписи.Удалить();
			
		КонецЦикла; 
		
	КонецЦикла;  
	
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ОтложеннаяРегистрацияИзмененийПОС()

#КонецОбласти 

#Область ОбменДаннымиСМуравьинойЛогистикой

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьУзлыПоПодразделению(подразделение)
	
	массивУзлов = Новый Массив;
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	
	запрос.Текст =
	"ВЫБРАТЬ
	|	Р_POS.Ссылка
	|ИЗ
	|	ПланОбмена.Р_POS КАК Р_POS
	|ГДЕ
	|	Р_POS.ПОС.Подразделение = &Подразделение";
	
	#КонецОбласти
	
	запрос.УстановитьПараметр("Подразделение", подразделение);
	
	результатЗапроса = запрос.Выполнить();
	
	Если Не результатЗапроса.Пустой() Тогда
		
		выборка = результатЗапроса.Выбрать();
		Пока выборка.Следующий() Цикл
			
			массивУзлов.Добавить(выборка.Ссылка);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат массивУзлов;
	
КонецФункции // ПолучитьУзлыПоПодразделению(выборкаПодразделений.Подразделение)()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Процедура ОбменДаннымиСМуравьинойЛогистикой() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	имяСобытияЖурналаРегистрации = НСтр("ru = 'Обмен данными ANTLOGI (регламент)'");
	
	ANTLOGISTICSОбъект = Обработки.ANTLOGISTICS.Создать();
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбменСМуравьинойЛогистикой.Ссылка,
	|	ОбменСМуравьинойЛогистикой.Подразделение,
	|	ОбменСМуравьинойЛогистикой.РежимОтладки,
	|	ОбменСМуравьинойЛогистикой.ИмяПользователя,
	|	ОбменСМуравьинойЛогистикой.ПарольПользователя
	|ИЗ
	|	ПланОбмена.ОбменСМуравьинойЛогистикой КАК ОбменСМуравьинойЛогистикой
	|ГДЕ
	|	ОбменСМуравьинойЛогистикой.ИнтервалВыгрузки > 0
	|	И ОбменСМуравьинойЛогистикой.ПометкаУдаления = ЛОЖЬ";
	#КонецОбласти
	
	результатЗапроса = запрос.Выполнить();
	
	выборка = результатЗапроса.Выбрать();
	Пока выборка.Следующий() Цикл
		
		узелОбмена = выборка.Ссылка;
		
		ANTLOGISTICSОбъект.ANT_LOGIN 		= узелОбмена.ИмяПользователя;
		ANTLOGISTICSОбъект.ANT_PASSWORD 	= узелОбмена.ПарольПользователя;
		ANTLOGISTICSОбъект.ДатаМаршрутов 	= ТекущаяДатаСеанса();
		ANTLOGISTICSОбъект.ANT_DEBUG		= узелОбмена.РежимОтладки;
		
		
		ответ = ANTLOGISTICSОбъект.ВыгрузитьЗаявкиПоУзлуОбмена(узелОбмена);
		
		Если ответ.результат Тогда
			текстСообщения = СтрШаблон("Данные успешно выгружены: %1", выборка.Подразделение);
		Иначе
			текстСообщения = СтрШаблон("Ошибка выгрузки (%1): %2", выборка.Подразделение, ответ.Сообщение);
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(имяСобытияЖурналаРегистрации, 
		УровеньЖурналаРегистрации.Предупреждение, 
		Метаданные.ПланыОбмена.ОбменСМуравьинойЛогистикой, 
		узелОбмена, 
		текстСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВерсионированиеОбъектов

Процедура УдалениеСтарыхВерсийОбъектов() Экспорт
	
	имяСобытияЖурналаРегистрации = НСтр("ru = 'Версионирование объектов'");
	
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	
	запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 40000
	|	ВерсииОбъектов.Объект,
	|	ВерсииОбъектов.НомерВерсии,
	|	ВерсииОбъектов.ДатаВерсии КАК ДатаВерсии
	|ИЗ
	|	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
	|ГДЕ
	|	ВерсииОбъектов.ДатаВерсии < &ДатаВерсии
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаВерсии";
	
	#КонецОбласти
	
	запрос.УстановитьПараметр("ДатаВерсии", ДобавитьМесяц(ТекущаяДатаСеанса(), -12));
	
	результатЗапроса = запрос.Выполнить();
	
	наборЗаписей = РегистрыСведений.ВерсииОбъектов.СоздатьНаборЗаписей();
	датаВерсии = ДобавитьМесяц(ТекущаяДатаСеанса(), -12);
	
	НачатьТранзакцию();
	
	выборка = результатЗапроса.Выбрать();
	Пока выборка.Следующий() Цикл
		
		наборЗаписей.Отбор.Объект.Установить(выборка.Объект);
		наборЗаписей.Отбор.НомерВерсии.Установить(выборка.НомерВерсии);
		
		наборЗаписей.Записать();
		
		датаВерсии = выборка.ДатаВерсии;
		
	КонецЦикла;
	
	текстСообщения = СтрШаблон(НСтр("ru = 'Выполнено удаление старых версий объектов, по дату: %1'"), датаВерсии);
	ЗаписьЖурналаРегистрации(имяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Предупреждение, Метаданные.РегистрыСведений.ВерсииОбъектов, , текстСообщения);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

#КонецОбласти

#Область АктуализацияНоменклатуры

Процедура АктуализацияНоменклатуры() Экспорт
	
	имяСобытияЖурналаРегистрации = НСтр("ru = 'Регламентное задание'");
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	
	запрос.Текст = 
	"ВЫБРАТЬ
	|	СправочникНоменклатура.Родитель,
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	СправочникНоменклатура.ДатаРегистрации,
	|	ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0) КАК Продажи
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаОкончания, МЕСЯЦ), МЕСЯЦ, -2), &ДатаОкончания, , ) КАК ПродажиОбороты
	|		ПО (ПродажиОбороты.Номенклатура = СправочникНоменклатура.Ссылка)
	|ГДЕ
	|	СправочникНоменклатура.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Внутренний.Товары)
	|	И СправочникНоменклатура.КД_Активность = ИСТИНА
	|	И ПродажиОбороты.КоличествоОборот ЕСТЬ NULL 
	|	И СправочникНоменклатура.ДатаРегистрации < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаОкончания, МЕСЯЦ), МЕСЯЦ, -2)
	|	И СправочникНоменклатура.Родитель <> &КонкурентыРодитель
	|
	|СГРУППИРОВАТЬ ПО
	|	СправочникНоменклатура.Ссылка,
	|	ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0),
	|	СправочникНоменклатура.Родитель,
	|	СправочникНоменклатура.ДатаРегистрации
	|
	|УПОРЯДОЧИТЬ ПО
	|	СправочникНоменклатура.Родитель.Наименование,
	|	СправочникНоменклатура.Наименование";
	
	#КонецОбласти
	
	запрос.УстановитьПараметр("ДатаОкончания", НачалоМесяца(ТекущаяДатаСеанса())-1);
	запрос.УстановитьПараметр("КонкурентыРодитель", Справочники.Номенклатура.НайтиПоНаименованию("КОНКУРЕНТЫ"));
	
	результатЗапроса = запрос.Выполнить();
	
	НачатьТранзакцию();
	
	выборка = результатЗапроса.Выбрать();
	Пока выборка.Следующий() Цикл
		
		номенклатураОбъект = выборка.Номенклатура.ПолучитьОбъект();
		
		номенклатураОбъект.НеАктуально = Истина;
		номенклатураОбъект.КД_Активность = Ложь;
		
		номенклатураОбъект.ОбменДанными.Загрузка = Истина;
		
		номенклатураОбъект.Записать();
		
		текстСообщения = СтрШаблон(НСтр("ru = 'Номенклатура: %1, стала неактуальной'"), номенклатураОбъект.Наименование);
		
		ЗаписьЖурналаРегистрации(имяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, номенклатураОбъект, текстСообщения);
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

#КонецОбласти

#Область ИнструментыАвтоматизации

Процедура ФормированиеОчередиСлужб() Экспорт
	РегистрыСведений.ОчередьВыполненияСлужб.СформироватьОчередь();
КонецПроцедуры

Процедура ВыполнениеОчередиСлужб() Экспорт
	РегистрыСведений.ОчередьВыполненияСлужб.ВыполнитьОчередь();	
КонецПроцедуры

#КонецОбласти

#Область ОбменССайтом

Процедура ВыполнениеОбменаСсайтом() Экспорт
	
	имяСобытияЖурналаРегистрации = НСтр("ru = 'Обмен данными с fajno.ua (регламент)'");
	
	путьФайла=КаталогВременныхФайлов() + "unloading.xml";
	имяФайлаКуда = "unloading.xml";
	
	//сообщить(путьФайла);
	
	запрос = Новый Запрос;
	
	#Область ПакетЗапросов
	
	запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Р_ПродажиПоБонуснымКартамОбороты.ДисконтнаяКарта,
	|	СУММА(Р_ПродажиПоБонуснымКартамОбороты.СуммаБонусовЗачисленоОборот) КАК СуммаБонусовЗачисленоОборот,
	|	СУММА(Р_ПродажиПоБонуснымКартамОбороты.СуммаБонусовСписаноОборот) КАК СуммаБонусовСписаноОборот,
	|	СУММА(ВЫБОР
	|			КОГДА Р_ПродажиПоБонуснымКартамОбороты.ИсточникБонусов = &Продажа
	|				ТОГДА Р_ПродажиПоБонуснымКартамОбороты.СуммаБонусовЗачисленоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЗачисленоПродажа,
	|	СУММА(ВЫБОР
	|			КОГДА Р_ПродажиПоБонуснымКартамОбороты.ИсточникБонусов = &Продажа
	|				ТОГДА Р_ПродажиПоБонуснымКартамОбороты.СуммаБонусовСписаноОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СписаноПродажа,
	|	СУММА(ВЫБОР
	|			КОГДА Р_ПродажиПоБонуснымКартамОбороты.ИсточникБонусов = &Партнерка
	|				ТОГДА Р_ПродажиПоБонуснымКартамОбороты.СуммаБонусовЗачисленоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЗачисленоПартнерка,
	|	СУММА(ВЫБОР
	|			КОГДА Р_ПродажиПоБонуснымКартамОбороты.ИсточникБонусов = &Партнерка
	|				ТОГДА Р_ПродажиПоБонуснымКартамОбороты.СуммаБонусовСписаноОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СписаноПартнерка,
	|	СУММА(Р_ПродажиПоБонуснымКартамОбороты.СуммаПродажиОборот) КАК СуммаПродажиОборот
	|ИЗ
	|	РегистрНакопления.Р_ПродажиПоБонуснымКартам.Обороты(, , Авто, ) КАК Р_ПродажиПоБонуснымКартамОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	Р_ПродажиПоБонуснымКартамОбороты.ДисконтнаяКарта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Р_ПродажиПоБонуснымКартам.ДисконтнаяКарта,
	|	СУММА(Р_ПродажиПоБонуснымКартам.СуммаПродажи) КАК СуммаПродажи,
	|	СУММА(Р_ПродажиПоБонуснымКартам.СуммаБонусов) КАК СуммаБонусов,
	|	СУММА(Р_ПродажиПоБонуснымКартам.СуммаБонусовЗачислено) КАК СуммаБонусовЗачислено,
	|	СУММА(Р_ПродажиПоБонуснымКартам.СуммаБонусовСписано) КАК СуммаБонусовСписано,
	|	Р_ПродажиПоБонуснымКартам.ПроцентБонусов,
	|	Р_ПродажиПоБонуснымКартам.Регистратор.Дата КАК РегистраторДата
	|ИЗ
	|	РегистрНакопления.Р_ПродажиПоБонуснымКартам КАК Р_ПродажиПоБонуснымКартам
	|ГДЕ
	|	Р_ПродажиПоБонуснымКартам.Период МЕЖДУ НАЧАЛОПЕРИОДА(&ТекДата, ДЕНЬ) И КОНЕЦПЕРИОДА(&ТекДата, ДЕНЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	Р_ПродажиПоБонуснымКартам.ДисконтнаяКарта,
	|	Р_ПродажиПоБонуснымКартам.ПроцентБонусов,
	|	Р_ПродажиПоБонуснымКартам.Регистратор.Дата";
	#КонецОбласти
	
	запрос.УстановитьПараметр("ТекДата", ТекущаяДатаСеанса());
	запрос.УстановитьПараметр("Продажа",Перечисления.ИсточникиБонусов.Продажа);
	запрос.УстановитьПараметр("Партнерка",Перечисления.ИсточникиБонусов.ПартнёрскаяПрограмма);	
	
	массивРезультатов = запрос.ВыполнитьПакет();
	
	// запись XML
	
	XML = Новый ЗаписьXML;
	ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("UTF-8", "1.0", Ложь);
	
	XML.ОткрытьФайл(путьФайла,  ПараметрыЗаписиXML);
	//XML.УстановитьСтроку(ПараметрыЗаписиXML);
	максЧислоЗаписей = 1000000000;
	
	счетчик = 0;
	XML.ЗаписатьОбъявлениеXML();
	XML.ЗаписатьНачалоЭлемента("row"); // Начало элемента Организации
	XML.ЗаписатьНачалоЭлемента("users"); // Начало элемента Организация
	выборка1 = массивРезультатов[0].Выбрать();
	Пока выборка1.Следующий() Цикл
		XML.ЗаписатьНачалоЭлемента("user"); // Начало элемента Организация
		XML.ЗаписатьНачалоЭлемента("card"); // Начало элемента Организация
		XML.ЗаписатьТекст(Строка(выборка1.ДисконтнаяКарта));
		XML.ЗаписатьКонецЭлемента();
		XML.ЗаписатьНачалоЭлемента("user_bonuses"); // Начало элемента Организация
		//XML.ЗаписатьТекст(Строка(выборка1.ЗачисленоПродажа-выборка1.СписаноПродажа));
		XML.ЗаписатьТекст(Строка(выборка1.СуммаБонусовЗачисленоОборот-выборка1.СуммаБонусовСписаноОборот));
		XML.ЗаписатьКонецЭлемента();
		XML.ЗаписатьНачалоЭлемента("referral_bonuses"); // Начало элемента Организация
		//XML.ЗаписатьТекст(Строка(выборка1.ЗачисленоПартнерка-выборка1.СписаноПартнерка));
		XML.ЗаписатьТекст("0");
		XML.ЗаписатьКонецЭлемента();
		XML.ЗаписатьКонецЭлемента(); // Конец элемента Организация
		
		счетчик = счетчик + 1;
		Если счетчик >= максЧислоЗаписей Тогда
			Прервать;	
		КонецЕсли;
		
	КонецЦикла;
	//XML.ЗаписатьТекст("Сайт о программировании в 1С");
	XML.ЗаписатьКонецЭлемента(); //users
	XML.ЗаписатьНачалоЭлемента("bonuses");
	
	счетчик = 0;
	выборка2 = массивРезультатов[1].Выбрать();
	Пока выборка2.Следующий() Цикл
		XML.ЗаписатьНачалоЭлемента("bonus");
		XML.ЗаписатьНачалоЭлемента("date"); // 
		XML.ЗаписатьТекст(Строка(ФОРМАТ(выборка2.РегистраторДата,"ДФ=dd.MM.yyyy")));
		XML.ЗаписатьКонецЭлемента(); 		
		XML.ЗаписатьНачалоЭлемента("card"); // 
		XML.ЗаписатьТекст(Строка(выборка2.ДисконтнаяКарта));
		XML.ЗаписатьКонецЭлемента(); 		
		XML.ЗаписатьНачалоЭлемента("check_price"); // 
		XML.ЗаписатьТекст(Строка(выборка2.СуммаПродажи));
		XML.ЗаписатьКонецЭлемента(); 		
		XML.ЗаписатьНачалоЭлемента("bonus_check"); // 
		XML.ЗаписатьТекст(Строка(выборка2.СуммаБонусов));
		XML.ЗаписатьКонецЭлемента();
		XML.ЗаписатьНачалоЭлемента("bonus_withdrawn"); // 
		XML.ЗаписатьТекст(Строка(выборка2.СуммаБонусовСписано));
		XML.ЗаписатьКонецЭлемента();
		XML.ЗаписатьНачалоЭлемента("percent_bonuses"); // 
		XML.ЗаписатьТекст(Строка(выборка2.ПроцентБонусов));
		XML.ЗаписатьКонецЭлемента();
		XML.ЗаписатьКонецЭлемента();
		
		счетчик = счетчик + 1;
		Если счетчик >= максЧислоЗаписей Тогда
			Прервать;	
		КонецЕсли;
		
	КонецЦикла;
	
	XML.ЗаписатьКонецЭлемента();
	XML.ЗаписатьКонецЭлемента();
	строкаXML = XML.Закрыть();
	
	//создание фтп соединения
	АдресСайта = "fajno.ua";
	Порт = 21;
	Логин = "fajno1_stas";
	Пароль = "17095Dimm";
	//ИмяКаталога = "/assets/modules/user_bonus/unloading";
	ИмяКаталога = "/www.fajno.ua/assets/modules/user_bonus/uploading/";
	
	FTPСоединение = Новый FTPСоединение(АдресСайта,Порт,Логин,Пароль);
	FTPСоединение.УстановитьТекущийКаталог(ИмяКаталога);
	
	текстСообщения = "Данные успешно выгружены";
	
	Попытка
		FTPСоединение.Записать(путьФайла, имяФайлаКуда);
	Исключение
		текстСообщения = "Ошибка выгрузки";
	КонецПопытки;
	
		
	ЗаписьЖурналаРегистрации(имяСобытияЖурналаРегистрации, 
		УровеньЖурналаРегистрации.Предупреждение, 
		Метаданные.РегистрыНакопления.Р_ПродажиПоБонуснымКартам, 
		, 
		текстСообщения);

	
КонецПроцедуры


#КонецОбласти

#Область АвтоЗаказы

Процедура ФормированиеАвтоЗаказовПокупателей() Экспорт
	
КонецПроцедуры

#КонецОбласти
