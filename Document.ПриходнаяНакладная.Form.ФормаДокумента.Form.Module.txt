
#Область ОбработчикиСобытийФомры

&НаСервере
Процедура ПередЗаписьюНаСервере(отказ, текущийОбъект, параметрыЗаписи)
	текущийОбъект.ДополнительныеСвойства.Вставить("ИнтерактивнаяЗаписьДокумента", Истина);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(отказ, стандартнаяОбработка)
	
	ТолькоПросмотр = Объект.СозданАвтоматически;
	
	Если Не Объект.ОтметкаБухгалтераОПроверке Тогда
		
		СтандартныйЗаголовок = Заголовок;
		Заголовок = НСтр("ru = '(Не подписан)'") + Заголовок;
		
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьСвойстваЭлементовПоВключениюРасходовВСебестоимость(ЭтотОбъект);
	КонецЕсли; 
	
	Если Не ТолькоПросмотр Тогда
		Элементы.ЗапасыЦена.ТолькоПросмотр = Не (Пользователи.ЭтоБухгалтер() Или Пользователи.ЭтоПолноправныйПользовательИБ());
	КонецЕсли; 
	
	ОбновитьИтоговуюСумму(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(текущийОбъект)
	УстановитьСвойстваЭлементовПоВключениюРасходовВСебестоимость(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

&НаКлиенте
Процедура ДатаПриИзменении(элемент)
	
	Объект.Номер = "";
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(элемент)
	
	КонтрагентПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипЦенПриИзменении(элемент)
	
	ТипЦенПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриИзменении(элемент)
	
	ОбновитьИтоговуюСумму(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыОбработкаВыбора(элемент, выбранноеЗначение, стандартнаяОбработка)
	
	описаниеОповещенияНоменклатура = Новый ОписаниеОповещения("ОбработатьВыборНоменклатурыПриПодбореПеретаскиванииЗапасы", ЭтотОбъект);
	описаниеОповещенияКоличество = Новый ОписаниеОповещения("ОбработатьВыборКоличестваПриПодбореПеретаскивании", ЭтотОбъект);
	ПодборИПеретаскивание.ОбработатьПодборНоменклатура(выбранноеЗначение, Объект.Запасы, "Номенклатура", Элементы.ЗапасыНоменклатура, описаниеОповещенияНоменклатура,, описаниеОповещенияКоличество);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПроверкаПеретаскивания(элемент, параметрыПеретаскивания, стандартнаяОбработка, строка, поле)
	
	ПодборИПеретаскивание.ПроверкаПеретаскивания(параметрыПеретаскивания, стандартнаяОбработка, "СправочникСсылка.Номенклатура", Новый Структура("ЭтоГруппа", Ложь));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПеретаскивание(элемент, параметрыПеретаскивания, стандартнаяОбработка, строка, поле)
	
	описаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборНоменклатурыПриПодбореПеретаскиванииЗапасы", ЭтотОбъект);
	ПодборИПеретаскивание.Перетаскивание(параметрыПеретаскивания, Объект.Запасы, "Номенклатура", Элементы.ЗапасыНоменклатура, описаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(элемент)
	
	ОбработатьДанныеСтрокПриИзмененииНоменклатурыЗапасы(Элементы.Запасы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(элемент)
	
	ОбработатьДанныеСтрокПриИзмененииКоличества(Элементы.Запасы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЦенаПриИзменении(элемент)
	
	ДокументПриходнаяНакладнаяКлиентСервер.РассчитатьДанныеСтроки(Элементы.Запасы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмуществоКоличествоПриИзменении(элемент)
	
	ДокументПриходнаяНакладнаяКлиентСервер.РассчитатьДанныеСтроки(Элементы.Имущество.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмуществоЦенаПриИзменении(элемент)
	
	ДокументПриходнаяНакладнаяКлиентСервер.РассчитатьДанныеСтроки(Элементы.Имущество.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключатьРасходыВСебестоимостьПриИзменении(элемент)
	
	Если Не Объект.ВключатьРасходыВСебестоимость Тогда
		
		Для каждого строкаЗапасы Из Объект.Запасы Цикл
			строкаЗапасы.Маркетинг = 0;
		КонецЦикла;
		
	КонецЕсли;

	УстановитьСвойстваЭлементовПоВключениюРасходовВСебестоимость(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ДействияКоманд

&НаКлиенте
Процедура ЗапасыПодбор(команда)
	ОткрытьПодборНоменклатуры(Элементы.ЗапасыНоменклатура);
КонецПроцедуры

&НаКлиенте
Процедура Подписать(команда)
	
	Если Не Объект.ОтметкаБухгалтераОПроверке Тогда
		
		Объект.ОтметкаБухгалтераОПроверке = Истина;
		Записать();
		Заголовок = СтандартныйЗаголовок;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьРасходы(команда)
	
	РаспределитьРасходыНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеПроцедурыИФункции

#Область ОбработкаДанныхСтрок

// Обрабатывает данные указанных строк таблицы "Запасы" при изменении
// значения реквизита "Номенклатура".
//
// Параметры:
//  данные  - ДанныеФормыЭлементКоллекции, Массив - Одна строка или набор строк,
//                 для которых выполняется обработка данных.
//
&НаКлиенте
Процедура ОбработатьДанныеСтрокПриИзмененииНоменклатурыЗапасы(данные)
	
	ОбработатьДанныеСтрокПриИзмененииНоменклатурыЗапасыНаСервере(ОбработкаТабличныхЧастейКлиентСервер.ПолучитьИдентификаторыСтрок(данные));
	
КонецПроцедуры // ОбработатьДанныеСтрокПриИзмененииНоменклатурыЗапасы()

// Обрабатывает на сервере данные указанных строк таблицы "Запасы" при изменении
// значения реквизита "Номенклатура".
//
// Параметры:
//  идентификаторыСтрок  - Массив - Набор идентификаторов строк таблицы.
//
&НаСервере
Процедура ОбработатьДанныеСтрокПриИзмененииНоменклатурыЗапасыНаСервере(Знач идентификаторыСтрок)
	
	ДокументПриходнаяНакладнаяСервер.ОбработатьДанныеСтрокПриИзмененииНоменклатурыЗапасы(Объект, идентификаторыСтрок);

КонецПроцедуры // ОбработатьДанныеСтрокПриИзмененииНоменклатурыЗапасыНаСервере()

// Обрабатывает данные указанных строк таблицы при изменении значения реквизита
// "Количество".
//
// Параметры:
//  данные  - ДанныеФормыЭлементКоллекции, Массив - Одна строка или набор строк,
//                 для которых выполняется обработка данных.
//
&НаКлиенте
Процедура ОбработатьДанныеСтрокПриИзмененииКоличества(данные)
	
	ОбработатьДанныеСтрокПриИзмененииКоличестваНаСервере(ОбработкаТабличныхЧастейКлиентСервер.ПолучитьИдентификаторыСтрок(данные));

КонецПроцедуры // ОбработатьДанныеСтрокПриИзмененииКоличества()

// Обрабатывает на сервере данные указанных строк таблицы "Запасы" при изменении
// значения реквизита "Количество".
//
// Параметры:
//  идентификаторыСтрок  - Массив - Набор идентификаторов строк таблицы.
//
&НаСервере
Процедура ОбработатьДанныеСтрокПриИзмененииКоличестваНаСервере(Знач идентификаторыСтрок)

	ДокументПриходнаяНакладнаяСервер.ОбработатьДанныеСтрокПриИзмененииКоличества(Объект, идентификаторыСтрок);

КонецПроцедуры // ОбработатьДанныеСтрокПриИзмененииКоличестваНаСервере()

#КонецОбласти 

#Область ПодборИПеретаскивание

// Открывает подбор номенклатуры в табличную часть документа.
//
// Параметры
//  ПолеТаблицы  - ПолеФормы - Поле таблицы формы, содержащее данные, получаемые подбором.
//
&НаКлиенте
Процедура ОткрытьПодборНоменклатуры(полеТаблицы)

	параметрыПодбора = Новый Структура;
	параметрыПодбора.Вставить("ИмяФормы", "ОбщаяФорма.ФормаПодбораНоменклатурыУправляемая");
	параметрыПодбора.Вставить("ПолеТаблицы", полеТаблицы);
	
	дополнительныеПараметрыФормы = Новый Структура;
	дополнительныеПараметрыФормы.Вставить("Поставщик", Объект.Контрагент);
	дополнительныеПараметрыФормы.Вставить("ОтборПоПоставщику", Ложь);
	дополнительныеПараметрыФормы.Вставить("ДатаРасчетов", Объект.Дата);
	Если Не Объект.ТипЦен.Пустая() Тогда
		дополнительныеПараметрыФормы.Вставить("ТипЦен", Объект.ТипЦен);
	КонецЕсли; 
	Если Не Объект.Подразделение.Пустая() Тогда
		дополнительныеПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
	КонецЕсли; 
	параметрыПодбора.Вставить("ДополнительныеПараметрыФормы", дополнительныеПараметрыФормы);
	
	ПодборИПеретаскивание.ОткрытьПодбор(параметрыПодбора);

КонецПроцедуры // ОткрытьПодборНоменклатуры()

// Процедура обратного вызова для обработки выбора номенклатуры в табличной части
// "Запасы" при подборе или перетаскивании.
//
// Параметры:
//  данныеСтрок  - Массив - Набор элементов типа ДанныеФормыЭлементКоллекции, представляющих
//                 собой добавленные в табличную часть строки.
//  дополнительныеПараметры  - Неопределено - Не используется.
//
&НаКлиенте
Процедура ОбработатьВыборНоменклатурыПриПодбореПеретаскиванииЗапасы(данныеСтрок, дополнительныеПараметры) Экспорт

	ОбработатьДанныеСтрокПриИзмененииНоменклатурыЗапасы(данныеСтрок);

КонецПроцедуры // ОбработатьВыборНоменклатурыПриПодбореПеретаскиванииЗапасы()

// Процедура обратного вызова для обработки выбора количества в табличных частях
// при подборе или перетаскивании.
//
// Параметры:
//  данныеСтрок  - Массив - Набор элементов типа ДанныеФормыЭлементКоллекции, представляющих
//                 собой добавленные в табличную часть строки.
//  дополнительныеПараметры  - Неопределено - Не используется.
//
&НаКлиенте
Процедура ОбработатьВыборКоличестваПриПодбореПеретаскивании(данныеСтрок, дополнительныеПараметры) Экспорт

	ОбработатьДанныеСтрокПриИзмененииКоличества(данныеСтрок);

КонецПроцедуры // ОбработатьВыборКоличестваПриПодбореПеретаскивании()

#КонецОбласти 

// Пересчитывает отображаемую на форме фактическую итоговую сумму.
//
// Параметры:
//  форма  - УправляемаяФорма - Эта форма.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоговуюСумму(форма)

	объект = форма.Объект;
	
	итогЗапасыСумма = объект.Запасы.Итог("Сумма");
	форма.ИтогСуммаФакт = итогЗапасыСумма - итогЗапасыСумма * объект.Скидка / 100;

КонецПроцедуры // ОбновитьИтоговуюСумму()

// Устанавливает свойства элементов формы в зависимости от признака включения расходов в себестоимость.
//
// Параметры
//  форма  - УправляемаяФорма - Эта форма.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваЭлементовПоВключениюРасходовВСебестоимость(форма)

	форма.Элементы.ЗапасыМаркетинг.Видимость = форма.Объект.ВключатьРасходыВСебестоимость;

КонецПроцедуры // УстановитьСвойстваЭлементовПоВключениюРасходовВСебестоимость()

// Обрабатывает на сервере изменение значения реквизита "Контрагент".
//
&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()

	ДокументПриходнаяНакладнаяСервер.КонтрагентПриИзменении(Объект);

КонецПроцедуры // КонтрагентПриИзмененииНаСервере()

// Обрабатывает на сервере изменение значения реквизита "ТипЦен".
//
&НаСервере
Процедура ТипЦенПриИзмененииНаСервере()

	ДокументПриходнаяНакладнаяСервер.ТипЦенПриИзменении(Объект);

КонецПроцедуры // ТипЦенПриИзмененииНаСервере()

// Распределяет дополнительные расходы на запасы.
//
&НаСервере
Процедура РаспределитьРасходыНаСервере()

	ДокументПриходнаяНакладнаяСервер.РаспределитьРасходы(Объект);

КонецПроцедуры // РаспределитьРасходыНаСервере()

#КонецОбласти

