
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПередЗаписьюНаСервере(отказ, текущийОбъект, параметрыЗаписи)
	текущийОбъект.ДополнительныеСвойства.Вставить("ИнтерактивнаяЗаписьДокумента", Истина);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УправлениеНебольшойФирмойСервер.ЗаполнитьШапкуДокумента(
		Объект,
		,
		Параметры.ЗначениеКопирования,
		Параметры.Основание,
		СостояниеДокумента,
		КартинкаСостоянияДокумента,
		РазрешеноПроведение,
		Параметры.ЗначенияЗаполнения
	);
	
	//ЦенообразованиеСервер.УстановитьДоступныеТипыЦенВДокументе(Элементы.ТипЦен, Объект.Подразделение, Объект.Дата);	
	
	УстановитьВидимостьДокументаОснования();
	
	Элементы.ЗапасыЦена.ТолькоПросмотр = Не (РольДоступна("ИзменениеЦенВДокументах") Или РольДоступна("ИзменениеЦенВВозвратахПокупателей"));
	Элементы.ТипЦен.ТолькоПросмотр = Не РольДоступна("РазрешениеНаИзменениеТипаЦенВДокументахОтгрузки");

	
	ЭтаФорма.ТолькоПросмотр = Объект.СозданАвтоматически;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ Объект.ОтметкаБухгалтераОПроверке Тогда
		СтандартныйЗаголовок = ЭтаФорма.Заголовок;
		ЭтаФорма.Заголовок = "(Не подписан)" + ЭтаФорма.Заголовок;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(выбранноеЗначение, источникВыбора)
	
	типВыбранногоЗначения = ТипЗнч(выбранноеЗначение);
	
	Если типВыбранногоЗначения = Тип("Структура") Тогда
		
		обработкаВыбораДолгов = Неопределено;
		Если выбранноеЗначение.Свойство("ОбработкаВыбораДолгов", обработкаВыбораДолгов) И обработкаВыбораДолгов Тогда
			
			Объект.ДокОсн = выбранноеЗначение.КредДокумент;
			Объект.Менеджер = выбранноеЗначение.Менеджер;

		КонецЕсли;
		
	ИначеЕсли типВыбранногоЗначения = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
		Объект.ДокОсн = выбранноеЗначение;
	КонецЕсли;

	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

&НаКлиенте
Процедура ЗапасыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	описаниеОповещенияНоменклатура = Новый описаниеОповещения("ОбработатьВыборНоменклатурыПриПодбореПеретаскивании", ЭтотОбъект);
	описаниеОповещенияКоличество = Новый описаниеОповещения("ОбработатьВыборКоличестваПриПодбореПеретаскивании", ЭтотОбъект);
	ПодборИПеретаскивание.ОбработатьПодборНоменклатура(ВыбранноеЗначение, Объект.Запасы, "Номенклатура", Элементы.ЗапасыНоменклатура, описаниеОповещенияНоменклатура,, описаниеОповещенияКоличество);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	ПодборИПеретаскивание.ПроверкаПеретаскивания(ПараметрыПеретаскивания, СтандартнаяОбработка, "СправочникСсылка.Номенклатура", Новый Структура("ЭтоГруппа", Ложь));
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	описаниеОповещения = Новый описаниеОповещения("ОбработатьВыборНоменклатурыПриПодбореПеретаскивании", ЭтотОбъект);
	ПодборИПеретаскивание.Перетаскивание(ПараметрыПеретаскивания, Объект.Запасы, "Номенклатура", Элементы.ЗапасыНоменклатура, описаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	ОбработатьДанныеСтрокПриИзмененииНоменклатуры(Элементы.Запасы.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	ОбработатьДанныеСтрокПриИзмененииКоличества(Элементы.Запасы.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЦенаПриИзменении(Элемент)
	РассчитатьДанныеСтроки(Элементы.Запасы.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ДокОснНачалоВыбора(элемент, данныеВыбора, стандартнаяОбработка)
	
	стандартнаяОбработка = Ложь;
	
	параметрыОткрытияФормыВыбора = Новый Структура;
	
	стОтбор = Новый Структура;
	стОтбор.Вставить("Подразделение", Объект.Подразделение);
	стОтбор.Вставить("Контрагент", Объект.Контрагент);
	стОтбор.Вставить("Менеджер", Объект.Менеджер);
	
	параметрыОткрытияФормыВыбора.Вставить("Отбор", стОтбор);
	
	Форма = ПолучитьФорму("Документ.РасходнаяНакладная.Форма.ФормаВыбора", параметрыОткрытияФормыВыбора, ЭтаФорма);
	
	форма.Открыть();
	
КонецПроцедуры

#КонецОбласти

#Область ДействияКоманд

&НаКлиенте
Процедура Подбор(команда)

	параметрыПодбора = Новый Структура;
	параметрыПодбора.Вставить("ИмяФормы", "Справочник.Номенклатура.Форма.Подбор");
	параметрыПодбора.Вставить("ПолеТаблицы", Элементы.ЗапасыНоменклатура);
	
	дополнительныеПараметрыФормы = Новый Структура;
	дополнительныеПараметрыФормы.Вставить("Период", Объект.Дата);
	дополнительныеПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
	дополнительныеПараметрыФормы.Вставить("ТипЦен", Объект.ТипЦен);
	дополнительныеПараметрыФормы.Вставить("Менеджер", Объект.Менеджер);
	дополнительныеПараметрыФормы.Вставить("РазрешитьЗапрашиватьКоличество", Истина);
	параметрыПодбора.Вставить("ДополнительныеПараметрыФормы", дополнительныеПараметрыФормы);
	
	ПодборИПеретаскивание.ОткрытьПодбор(параметрыПодбора);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыборДокОсн(команда)
	
	структураПараметров = Новый Структура("Подразделение, ОкончаниеПериода, Контрагент", Объект.Подразделение, КонецДня(Объект.Дата), Объект.Контрагент);
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораДолгов", СтруктураПараметров, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеПроцедурыИФункции

#Область ОбработкаДанныхСтрок

// Рассчитывает данные строки табличной части.
//
// Параметры
//  данныеСтроки  - ДанныеФормыЭлементКоллекции - Строка табличной части, для которой рассчитываются
//                 данные.
//
&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьДанныеСтроки(данныеСтроки)

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДанныеСтроки(данныеСтроки);

КонецПроцедуры // РассчитатьДанныеСтроки()

// Обрабатывает данные указанных строк таблицы "Запасы" при изменении
// значения реквизита "Номенклатура".
//
// Параметры:
//  данныеСтрок  - ДанныеФормыЭлементКоллекции, Массив - Одна строка или набор строк,
//                 для которых выполняется обработка данных.
//
&НаКлиенте
Процедура ОбработатьДанныеСтрокПриИзмененииНоменклатуры(данныеСтрок)
	
	ОбработатьДанныеСтрокПриИзмененииНоменклатурыНаСервере(ОбработкаТабличныхЧастейКлиентСервер.ПолучитьИдентификаторыСтрок(данныеСтрок));
	
КонецПроцедуры // ОбработатьДанныеСтрокПриИзмененииНоменклатуры()

// Обрабатывает на сервере данные указанных строк таблицы "Запасы" при изменении
// значения реквизита "Номенклатура".
//
// Параметры:
//  идентификаторыСтрок  - Массив - Набор идентификаторов строк таблицы.
//
&НаСервере
Процедура ОбработатьДанныеСтрокПриИзмененииНоменклатурыНаСервере(Знач идентификаторыСтрок)
	
	наборДанныхСтрок = ОбработкаТабличныхЧастейКлиентСервер.ПолучитьСтрокиПоИдентификаторам(Объект.Запасы, идентификаторыСтрок);
	наборНоменклатуры = ОбработкаТабличныхЧастейКлиентСервер.ВыгрузитьКолонку(наборДанныхСтрок, "Номенклатура");

	характеристикиЦен = ЦенообразованиеСервер.ПолучитьЦеныНоменклатуры(Объект.Дата, Объект.Подразделение, наборНоменклатуры, Объект.ТипЦен, Константы.ВалютаУчета.Получить());
	
	характеристикиСкидок = ЦенообразованиеСервер.ПолучитьСкидкиНоменклатуры(Объект.Дата, Объект.Подразделение, Объект.Контрагент, наборНоменклатуры);
	
	// СДЕЛАТЬ: Скидки должны возвращаться с отбором по номенклатуре.
	//параметрыСкидок = Новый Структура("Контрагент,Подразделение, ДатаСреза", Объект.Контрагент, Объект.Подразделение, Объект.Дата);
	//соСкидкиКонтрагента = ЦенообразованиеСервер.ВернутьАвтоматическиеСкидки(параметрыСкидок);
	
	финУчет = Объект.Организация.ФинУчет;
	
	Для каждого данныеСтроки Из наборДанныхСтрок Цикл
		
		ЗаполнитьЗначенияСвойств(данныеСтроки, характеристикиЦен[данныеСтроки.Номенклатура]);
		ЗаполнитьЗначенияСвойств(данныеСтроки, характеристикиСкидок[данныеСтроки.Номенклатура]);
		
		данныеСтроки.ЕдиницаИзмерения = данныеСтроки.Номенклатура.ЕдиницаИзмерения;
		данныеСтроки.СтруктурнаяЕдиница = данныеСтроки.Номенклатура.Родитель.Склад;
		
		//Если ЦенообразованиеСервер.ИспользоватьЦеновыеГруппы(Объект.Подразделение) Тогда
		//	данныеСтроки.ПроцентСкидки = соСкидкиКонтрагента[СокрЛП(данныеСтроки.Номенклатура.Родитель.Код) + " / " + СокрЛП(данныеСтроки.Номенклатура.ЦеноваяГруппа.Код)];
		//Иначе
		//	данныеСтроки.ПроцентСкидки = соСкидкиКонтрагента[СокрЛП(данныеСтроки.Номенклатура.Родитель.Код) + " / " + СокрЛП(Справочники.ЦеновыеГруппы.ПустаяСсылка().Код)];
		//КонецЕсли;
		
		данныеСтроки.СтавкаНДС = ?(финУчет, "20", "");	// Костыль для имеющегося учёта НДС.
		
		РассчитатьДанныеСтроки(данныеСтроки);
		
	КонецЦикла; 

КонецПроцедуры // ОбработатьДанныеСтрокПриИзмененииНоменклатурыНаСервере()

// Обрабатывает данные указанных строк таблицы при изменении значения реквизита
// "Количество".
//
// Параметры:
//  данныеСтрок  - ДанныеФормыЭлементКоллекции, Массив - Одна строка или набор строк,
//                 для которых выполняется обработка данных.
//
&НаКлиенте
Процедура ОбработатьДанныеСтрокПриИзмененииКоличества(данныеСтрок)
	
	наборДанныхСтрок = ОбщегоНазначенияКлиентСервер.ПреобразоватьЗначениеВМассив(данныеСтрок);
	
	Для каждого данныеСтроки Из наборДанныхСтрок Цикл
		РассчитатьДанныеСтроки(данныеСтроки);
	КонецЦикла; 
	
КонецПроцедуры // ОбработатьДанныеСтрокПриИзмененииКоличества()

#КонецОбласти

#Область ПодборИПеретаскивание

// Процедура обратного вызова для обработки выбора номенклатуры в табличной части
// "Запасы" при подборе или перетаскивании.
//
// Параметры:
//  данныеСтрок  - Массив - Набор элементов типа ДанныеФормыЭлементКоллекции, представляющих
//                 собой добавленные в табличную часть строки.
//  дополнительныеПараметры  - Неопределено - Не используется.
//
&НаКлиенте
Процедура ОбработатьВыборНоменклатурыПриПодбореПеретаскивании(данныеСтрок, дополнительныеПараметры) Экспорт

	ОбработатьДанныеСтрокПриИзмененииНоменклатуры(данныеСтрок);

КонецПроцедуры // ОбработатьВыборНоменклатурыПриПодбореПеретаскивании()

// Процедура обратного вызова для обработки выбора количества в табличных частях
// при подборе или перетаскивании.
//
// Параметры:
//  данныеСтрок  - Массив - Набор элементов типа ДанныеФормыЭлементКоллекции, представляющих
//                 собой добавленные в табличную часть строки.
//  дополнительныеПараметры  - Неопределено - Не используется.
//
&НаКлиенте
Процедура ОбработатьВыборКоличестваПриПодбореПеретаскивании(данныеСтрок, дополнительныеПараметры) Экспорт

	ОбработатьДанныеСтрокПриИзмененииКоличества(данныеСтрок);

КонецПроцедуры // ОбработатьВыборКоличестваПриПодбореПеретаскивании()

#КонецОбласти 

// Заполняет цены табличной части по выбранному типу цен.
//
&НаСервере
Процедура ЗаполнитьЦеныПоТипуЦен()

	наборНоменклатуры = ОбработкаТабличныхЧастейКлиентСервер.ВыгрузитьКолонку(Объект.Запасы, "Номенклатура");
	характеристикиЦен = ЦенообразованиеСервер.ПолучитьЦеныНоменклатуры(Объект.Дата, Объект.Подразделение, наборНоменклатуры, Объект.ТипЦен, Константы.ВалютаУчета.Получить());
	характеристикиСкидок = ЦенообразованиеСервер.ПолучитьСкидкиНоменклатуры(Объект.Дата, Объект.Подразделение, Объект.Контрагент, наборНоменклатуры);
	
	Для каждого строкаЗапасы Из Объект.Запасы Цикл
		
		строкаЗапасы.Цена = характеристикиЦен[строкаЗапасы.Номенклатура].Цена;
		строкаЗапасы.ПроцентСкидки = характеристикиСкидок[строкаЗапасы.Номенклатура].ПроцентСкидки;
		
		РассчитатьДанныеСтроки(строкаЗапасы);
		
	КонецЦикла; 

КонецПроцедуры // ЗаполнитьЦеныПоТипуЦен()

#КонецОбласти

&НаСервере
Процедура УстановитьВидимостьДокументаОснования()
	
	Элементы.ДокОсн.Видимость = Не(Объект.Контрагент.ТипВеденияВзаиморасчетов = Перечисления.ТипыВеденияВзаиморасчетов.ПоДоговору);
	Элементы.КомандаВыборДокОсн.Видимость = Не(Объект.Контрагент.ТипВеденияВзаиморасчетов = Перечисления.ТипыВеденияВзаиморасчетов.ПоДоговору);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеКонтрагентприИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ТипЦен", Справочники.ТипыЦен.ПустаяСсылка());
	
	//Если СтруктураДанные.Менеджер.НомерКоманды = 2 Тогда
	//	СтруктураДанные.ТипЦен = СтруктураДанные.Контрагент.ТипЦен2;
	//Иначе
	//	СтруктураДанные.ТипЦен = СтруктураДанные.Контрагент.ТипЦен;
	//КонецЕсли;
	
	СтрокаУсловийПоставки = СтруктураДанные.Контрагент.Менеджеры.Найти(СтруктураДанные.Менеджер, "Менеджер");
	
	Если НЕ СтрокаУсловийПоставки = Неопределено Тогда
		
		СтруктураДанные.ТипЦен = СтрокаУсловийПоставки.ТипЦен;
		
	КонецЕсли;
	
	УстановитьВидимостьДокументаОснования();
	
	Возврат СтруктураДанные;
	
КонецФункции

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Контрагент", ЭтаФорма.Объект.Контрагент);
	СтруктураДанные.Вставить("Менеджер", ЭтаФорма.Объект.Менеджер);
	
	СтруктураДанные = ПолучитьДанныеКонтрагентприИзменении(СтруктураДанные);
	
	ЭтаФорма.Объект.ТипЦен = СтруктураДанные.ТипЦен;
	
	ЗаполнитьЦеныПоТипуЦен();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	//УстановитьДоступныеТипыЦен();
КонецПроцедуры




&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Контрагент", ЭтаФорма.Объект.Контрагент);
	СтруктураДанные.Вставить("Менеджер", ЭтаФорма.Объект.Менеджер);
	
	СтруктураДанные = ПолучитьДанныеКонтрагентприИзменении(СтруктураДанные);
	
	ЭтаФорма.Объект.ТипЦен = СтруктураДанные.ТипЦен;
	
	ЗаполнитьЦеныПоТипуЦен();
	
КонецПроцедуры



&НаКлиенте
Процедура ИмуществоПриИзменении(Элемент)
	
	Элемент.ТекущиеДанные.Сумма = Элемент.ТекущиеДанные.Количество * Элемент.ТекущиеДанные.Цена;
	
КонецПроцедуры




