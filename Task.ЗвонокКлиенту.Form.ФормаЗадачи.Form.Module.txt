
#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДокументыКлиента.Параметры.УстановитьЗначениеПараметра("Значение", Объект.Клиент);
	УстановитьЗначениеПериодаДокументовКлиента(ДокументыКлиента, НачалоДня(ДобавитьМесяц(ТекущаяДата(), -1)), КонецДня(ТекущаяДата())+24*60*60);
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	Долг 				= ПолучитьДолгКлиента(Объект.Клиент, Объект.Менеджер);
	СрокОплаты 			= ПолучитьСрокОплатыКлиента(Объект.Клиент, Объект.Менеджер);
	
	Если Не Параметры.Ключ.Пустая() Тогда
		
		Если Не Объект.Выполнена
			И Объект.Исполнитель.Пустая()
			И ПроверкаДанныхСервер.ПроверитьПравоДоступа("Редактирование", Объект.Ссылка)
			И ПользовательЯвляетсяИсполнителемЗадач(ТекущийПользователь) Тогда
			
			// Задачи по клиенту заблокируем от изменения другими сеансами. Если эта и
			// другие задачи по клиенту не имеют явно указанного исполнителя - текущий
			// пользователь будет назначен этим задачам в качестве исполнителя.
			ЗаблокироватьДанныеФормыДляРедактирования();
			Если ЗафиксироватьИсполнителяЗадачи(Объект.Ссылка, ТекущийПользователь) Тогда
				Прочитать();
			КонецЕсли; 
			
			запрос = Новый Запрос;
			
			#Область ТекстЗапроса
			запрос.Текст =
			"ВЫБРАТЬ
			|	ЗвонокКлиентуЗадачиПоИсполнителю.Ссылка
			|ИЗ
			|	Задача.ЗвонокКлиенту.ЗадачиПоИсполнителю(
			|			&Исполнитель,
			|			НЕ Выполнена
			|				И НЕ ПометкаУдаления
			|				И Клиент = &Клиент
			|				И Ссылка <> &ТекущаяЗадача) КАК ЗвонокКлиентуЗадачиПоИсполнителю";
			#КонецОбласти
			
			запрос.УстановитьПараметр("Исполнитель", ТекущийПользователь);
			запрос.УстановитьПараметр("Клиент", Объект.Клиент);
			запрос.УстановитьПараметр("ТекущаяЗадача", Объект.Ссылка);
			
			выборка = Запрос.Выполнить().Выбрать();
			Пока выборка.Следующий() Цикл
				
				ЗаблокироватьДанныеДляРедактирования(выборка.Ссылка,, УникальныйИдентификатор);
				ЗафиксироватьИсполнителяЗадачи(выборка.Ссылка, ТекущийПользователь);
				
			КонецЦикла;
		
		КонецЕсли; 
	
	КонецЕсли; 
	
	Элементы.Взаиморасчёты.Доступность = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ВзаиморасчетыСПокупателями);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередВыполнением(Отказ)
	
	// Так как на момент выполнения задачи у неё в любом случае должен быть указан исполнитель
	// в явном виде, то выполнить такую задачу может и должен только этот исполнитель.
	Если Объект.Исполнитель <> ТекущийПользователь Тогда
		
		текстСообщения = СтрШаблон(НСтр("ru = 'Только исполнитель задачи %1 может выполнить задачу. Текущий пользователь %2 не является этим исполнителем.'"), Строка(Объект.Исполнитель), Строка(ТекущийПользователь));
		ПроверкаДанныхКлиентСервер.СообщитьОбОшибке(Отказ, текстСообщения, Объект, "Объект.Исполнитель");
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ДействияКоманд

&НаКлиенте
Процедура УстановитьПериодДокументовКлиента(Команда)
	
	выборПериода = Новый ДиалогРедактированияСтандартногоПериода;
	
	началоПериода = ДокументыКлиента.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода")).Значение;
	Если началоПериода <> Неопределено Тогда
		выборПериода.Период.ДатаНачала = началоПериода;
	КонецЕсли; 
	
	конецПериода = ДокументыКлиента.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода")).Значение;
	Если конецПериода <> Неопределено Тогда
		выборПериода.Период.ДатаОкончания = конецПериода;
	КонецЕсли; 
	
	описаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборПериодаДокументовКлиента", ЭтотОбъект);
	выборПериода.Показать(описаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВозвратОтПокупателя(Команда)
	СоздатьНовыйДокументКлиента("ВозвратОтПокупателя");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКпкЗаявка(Команда)
	СоздатьНовыйДокументКлиента("КпкЗаявка");
КонецПроцедуры

&НаКлиенте
Процедура Взаиморасчёты(Команда)

	параметрыФормы = Новый Структура("СформироватьПриОткрытии,Отбор,КлючВарианта,КлючНазначенияИспользования");
	параметрыФормы.СформироватьПриОткрытии = Истина;
	
	параметрыФормы.Отбор = Новый Структура("Контрагент,Подразделение", Объект.Клиент, Объект.Подразделение);
	параметрыФормы.КлючВарианта = "ВедомостьПоМенеджерам";
	параметрыФормы.КлючНазначенияИспользования = "ЗвонокКлиенту";
	
	ОткрытьФорму("Отчет.ВзаиморасчетыСПокупателями.Форма", параметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеПроцедурыИФункции

// Для указанной задачи фиксирует исполнителя явным образом если он уже не указан
// в задаче.
//
// Параметры:
//  задача  - ЗадачаСсылка.ЗвонокКлиенту - Изменяемая задача.
//  исполнитель  - СправочникСсылка.Пользователи - Новый исполнитель задачи.
//
// Возвращаемое значение:
//   Булево   - Истина - новый исполнитель для задачи был успешно назначен; Ложь -
//                 исполнитель не был назначен по любой причине.
//
&НаСервереБезКонтекста
Функция ЗафиксироватьИсполнителяЗадачи(задача, исполнитель)

	Если задача.Исполнитель.Пустая() Тогда
	
		задачаОбъект = задача.ПолучитьОбъект();
		задачаОбъект.Исполнитель = исполнитель;
		задачаОбъект.Записать();
		
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли; 

КонецФункции // ЗафиксироватьИсполнителяЗадачи()

// Определяет, может ли указанный пользователь являться исполнителем задач. Для этого
// пользователь должен быть указан в регистре сведений "ИсполнителиЗадач".
//
// Параметры:
//  пользователь  - СправочникСсылка.Пользователи - Проверяемый пользователь.
//
// Возвращаемое значение:
//   Булево   - Истина - пользователь может выступать в роли исполнителя задач; Ложь -
//                 в противном случае.
//
&НаСервереБезКонтекста
Функция ПользовательЯвляетсяИсполнителемЗадач(пользователь)

	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИсполнителиЗадач.Исполнитель
	|ИЗ
	|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|ГДЕ
	|	ИсполнителиЗадач.Исполнитель = &Исполнитель";
	#КонецОбласти
	
	запрос.УстановитьПараметр("Исполнитель", пользователь);
	
	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции // ПользовательЯвляетсяИсполнителемЗадач()

// Создаёт новый документ с требуемым заполнением его реквизитов.
//
// Параметры:
//  имяДокумента  - Строка - Имя документа как оно задано в конфигурации.
//
&НаКлиенте
Процедура СоздатьНовыйДокументКлиента(имяДокумента)

	значенияЗаполнения = Новый Структура;
	значенияЗаполнения.Вставить("Контрагент", 		Объект.Клиент);
	значенияЗаполнения.Вставить("Менеджер", 		Объект.Менеджер);
	значенияЗаполнения.Вставить("Подразделение", 	Объект.Подразделение);
	значенияЗаполнения.Вставить("ТипЦен", 			ПолучитьТипЦенМенеджера(Объект.Клиент, Объект.Менеджер));
	значенияЗаполнения.Вставить("Организация", 		ПолучитьОрганизациюМенеджера(Объект.Клиент, Объект.Менеджер));
	
	дополнительныеПараметры = Новый Структура;
	дополнительныеПараметры.Вставить("ОткрытиеИзЗадачи", Истина);

	
	ОткрытьФорму("Документ." + имяДокумента + ".ФормаОбъекта", Новый Структура("ЗначенияЗаполнения, ДополнительныеПараметры", значенияЗаполнения, дополнительныеПараметры));

КонецПроцедуры // СоздатьНовыйДокументКлиента()

// Процедура обратного вызова для обработки результата выбора периода документов клиента.
//
// Параметры:
//  период  - СтандартныйПериод, Неопределено - Если пользователь выбрал период, будет возвращено
//                 значение типа СтандартныйПериод и Неопределено в противном случае.
//  дополнительныеПараметры  - Произвольный - Не используется.
//
&НаКлиенте
Процедура ОбработатьВыборПериодаДокументовКлиента(период, дополнительныеПараметры) Экспорт

	Если период <> Неопределено Тогда
		УстановитьЗначениеПериодаДокументовКлиента(ДокументыКлиента, период.ДатаНачала, период.ДатаОкончания);
	КонецЕсли; 

КонецПроцедуры // ОбработатьВыборПериодаДокументовКлиента()

// Устанавливает значение периода списка документов клиента.
//
// Параметры:
//  список  - ДинамическийСписок - Список документов клиента.
//  началоПериода  - Дата, Неопределено - Значение начала периода.
//  конецПериода  - Дата, Неопределено - Значение конца периода.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначениеПериодаДокументовКлиента(список, началоПериода, конецПериода)

	список.Параметры.УстановитьЗначениеПараметра("НачалоПериода", началоПериода);
	список.Параметры.УстановитьЗначениеПараметра("КонецПериода", конецПериода);

КонецПроцедуры // УстановитьЗначениеПериодаДокументовКлиента()

// Возвращает сумму текущего долга клиента.
//
// Параметры:
//  клиент  - СправочникСсылка.Контрагенты - Клиент, по которому определяется
//                 долг.
//  менеджер  - СправочникСсылка.Менеджеры - Менеджер, в разрезе которого
//                 определяется долг клиента.
//
// Возвращаемое значение:
//   Число   - Сумма долга клиента.
//
&НаСервереБезКонтекста
Функция ПолучитьДолгКлиента(клиент, менеджер)

	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетыСПокупателямиОстатки.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПокупателями.Остатки(
	|			,
	|			Контрагент = &Контрагент
	|				И Менеджер = &Менеджер) КАК ВзаиморасчетыСПокупателямиОстатки";
	#КонецОбласти
	
	запрос.УстановитьПараметр("Контрагент", клиент);
	запрос.УстановитьПараметр("Менеджер", менеджер);
	
	результат = запрос.Выполнить();
	Если результат.Пустой() Тогда
		Возврат 0;
	Иначе
	
		выборка = Результат.Выбрать();
		выборка.Следующий();
		Возврат выборка.Сумма;
	
	КонецЕсли; 

КонецФункции // ПолучитьДолгКлиента()

// Возвращает срок оплаты клиента.
//
// Параметры:
//  клиент  - СправочникСсылка.Контрагенты - Клиент, по которому определяется
//                 срок оплаты.
//  менеджер  - СправочникСсылка.Менеджеры - Менеджер, в разрезе которого
//                 определяется срок оплаты клиента.
//
// Возвращаемое значение:
//   Число   - Дней кредита клиента.
//
&НаСервереБезКонтекста
Функция ПолучитьСрокОплатыКлиента(клиент, менеджер)

	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВЫБОР
	|		КОГДА КонтрагентыМенеджеры.СрокОплаты = 0
	|			ТОГДА КонтрагентыМенеджеры.Ссылка.СрокОплаты
	|		ИНАЧЕ КонтрагентыМенеджеры.СрокОплаты
	|	КОНЕЦ КАК СрокОплаты
	|ИЗ
	|	Справочник.Контрагенты.Менеджеры КАК КонтрагентыМенеджеры
	|ГДЕ
	|	КонтрагентыМенеджеры.Ссылка = &Контрагент
	|	И КонтрагентыМенеджеры.Менеджер = &Менеджер";
	#КонецОбласти
	
	запрос.УстановитьПараметр("Контрагент", клиент);
	запрос.УстановитьПараметр("Менеджер", менеджер);
	
	результат = запрос.Выполнить();
	Если результат.Пустой() Тогда
		Возврат 0;
	Иначе
	
		выборка = Результат.Выбрать();
		выборка.Следующий();
		Возврат выборка.СрокОплаты;
	
	КонецЕсли; 

КонецФункции // ПолучитьСрокОплатыКлиента()

// Возвращает тип цен клиента в разрезе менеджера.
//
// Параметры:
//  клиент  - СправочникСсылка.Контрагенты - Клиент, по которому определяется
//                 тип цен.
//  менеджер  - СправочникСсылка.Менеджеры - Менеджер, в разрезе которого
//                 определяется тип цен клиента.
//
// Возвращаемое значение:
//   СправочникСсылка.ТипыЦен   - Тип цен клиента.
//
&НаСервереБезКонтекста
Функция ПолучитьТипЦенМенеджера(клиент, менеджер)

	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КонтрагентыМенеджеры.ТипЦен
	|ИЗ
	|	Справочник.Контрагенты.Менеджеры КАК КонтрагентыМенеджеры
	|ГДЕ
	|	КонтрагентыМенеджеры.Ссылка = &Контрагент
	|	И КонтрагентыМенеджеры.Менеджер = &Менеджер";
	#КонецОбласти
	
	запрос.УстановитьПараметр("Контрагент", клиент);
	запрос.УстановитьПараметр("Менеджер", менеджер);
	
	результат = запрос.Выполнить();
	Если результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
	
		выборка = Результат.Выбрать();
		выборка.Следующий();
		Возврат выборка.ТипЦен;
	
	КонецЕсли; 

КонецФункции // ПолучитьТипЦенМенеджера()

// Возвращает "Организацию" клиента в разрезе менеджера.
//
// Параметры:
//  клиент  - СправочникСсылка.Контрагенты - Клиент, по которому определяется
//                 тип цен.
//  менеджер  - СправочникСсылка.Менеджеры - Менеджер, в разрезе которого
//                 определяется тип цен клиента.
//
// Возвращаемое значение:
//   СправочникСсылка.ТипыЦен   - Тип цен клиента.
//
&НаСервереБезКонтекста
Функция ПолучитьОрганизациюМенеджера(клиент, менеджер)

	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КонтрагентыМенеджеры.ОсновнаяОрганизация КАК Организация
	|ИЗ
	|	Справочник.Контрагенты.Менеджеры КАК КонтрагентыМенеджеры
	|ГДЕ
	|	КонтрагентыМенеджеры.Ссылка = &Контрагент
	|	И КонтрагентыМенеджеры.Менеджер = &Менеджер";
	#КонецОбласти
	
	запрос.УстановитьПараметр("Контрагент", клиент);
	запрос.УстановитьПараметр("Менеджер", менеджер);
	
	результат = запрос.Выполнить();
	Если результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
	
		выборка = результат.Выбрать();
		выборка.Следующий();
		Возврат выборка.Организация;
	
	КонецЕсли; 

КонецФункции // ПолучитьОрганизациюМенеджера()

#КонецОбласти