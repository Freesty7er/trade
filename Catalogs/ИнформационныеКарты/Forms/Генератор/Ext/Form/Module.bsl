
#Область ОбработчикиСобытий

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(отказ, проверяемыеРеквизиты)
	
	максКоличествоКартРегиона = 999999;
	Если НачальныйНомер + КоличествоКарт > максКоличествоКартРегиона Тогда
	
		//отказ = Истина;
		
		текстСообщения = НСтр("ru = 'Конечное количество информационных карт для региона не может превышать значение [МаксКоличествоКартРегиона]. Измените значение начального номера и/или количества карт.'");
		текстСообщения = СтрЗаменить(текстСообщения, "[МаксКоличествоКартРегиона]", максКоличествоКартРегиона);
		
		ПроверкаДанныхКлиентСервер.СообщитьОбОшибке(отказ, текстСообщения, ЭтотОбъект, "НачальныйНомер",,УникальныйИдентификатор);
		
		//сообщение = Новый СообщениеПользователю;
		//сообщение.Текст = ТекстСообщения;
		//сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
		//сообщение.Сообщить();
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДействияКоманд

&НаКлиенте
Процедура Создать(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли; 
	
	Состояние(НСтр("ru = 'Выполняется создание информационных карт...'"));
	Если СоздатьНаСервере() Тогда
		
		ОповеститьОбИзменении(Тип("СправочникСсылка.ИнформационныеКарты"));
		ПоказатьПредупреждение(, НСтр("ru = 'Создание информационных карт завершено.'"));		
		
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'В процессе создания информационных карт возникли ошибки. Информационные карты не созданы.'"));
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеПроцедурыИФункции

// Выполняет непосредственное создание информационных карт.
//
// Возвращаемое значение:
//   Булево   - Истина - информационные карты созданы успешно; Ложь - в противном случае.
//
&НаСервере
Функция СоздатьНаСервере()

	НачатьТранзакцию();
	
	блокировкаДанных = Новый БлокировкаДанных;
	элементБлокировки = БлокировкаДанных.Добавить("Справочник.ИнформационныеКарты");
	элементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	блокировкаДанных.Заблокировать();
	
	отказ = Ложь;
	
	Для к = НачальныйНомер По НачальныйНомер + КоличествоКарт - 1 Цикл
		
		кодКарты = "[КодРегиона]000[ПорядковыйНомер]";
		кодКарты = СтрЗаменить(КодКарты, "[КодРегиона]", Формат(КодРегиона, "ЧЦ=3; ЧВН="));
		кодКарты = СтрЗаменить(КодКарты, "[ПорядковыйНомер]", Формат(к, "ЧЦ=6; ЧВН=; ЧГ="));
		кодКарты = КодКарты + ПодключаемоеОборудованиеКлиентСервер.КонтрольныйСимволEAN13(КодКарты);
		
		информационнаяКарта = СоздатьИнформационнуюКарту(кодКарты);
		Если информационнаяКарта = Неопределено Тогда
			
			отказ = Истина;
			Прервать;
			
		КонецЕсли; 
	
	КонецЦикла; 
	
	Если отказ Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли; 
	
	Возврат Не отказ;

КонецФункции // СформироватьНаСервере()

// Создаёт владельца информационной карты.
//
// Параметры:
//  КодКарты  - Строка - Код создаваемой информационной карты. Будет использовать
//                 как часть наименования физического лица.
//
// Возвращаемое значение:
//   СправочникСсылка.ФизическиеЛица, Неопределено   - Ссылка на созданного владельца
//                 карты. Если владелец не был создан, будет возвращено значение
//                 Неопределено.
//
&НаСервере
Функция СоздатьВладельцаКарты(КодКарты)

	Наименование = НСтр("ru = '<Укажите ФИО> - [КодКарты]'");
	Наименование = СтрЗаменить(Наименование, "[КодКарты]", КодКарты);
	
	физическиеЛицаОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
	
	физическиеЛицаОбъект.ОбменДанными.Загрузка = Истина;
	ФизическиеЛицаОбъект.Заполнить(Неопределено);
	ФизическиеЛицаОбъект.Наименование = Наименование;
	
	Если Не ФизическиеЛицаОбъект.ПроверитьЗаполнение() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщегоНазначенияСервер.ПолучитьТекстСообщенийПользователю();
		Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
		Сообщение.Сообщить();
	
		Возврат Неопределено;
	
	КонецЕсли; 
	
	Попытка
		ФизическиеЛицаОбъект.Записать();
	Исключение
	
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Описание ошибки: '") + КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		Сообщение.Сообщить();
		
		Возврат Неопределено;
	
	КонецПопытки;
	
	Возврат ФизическиеЛицаОбъект.Ссылка;

КонецФункции // СоздатьВладельцаКарты()

// Создаёт информационную карту.
//
// Параметры:
//  КодКарты  - Строка - Код создаваемой информационной карты. Будет использовать
//                 как часть наименования физического лица.
//
// Возвращаемое значение:
//   СправочникСсылка.ИнформационныеКарты, Неопределено   - Ссылка на созданную
//                 карту. Если карта не была создана, будет возвращено значение
//                 Неопределено.
//
&НаСервере
Функция СоздатьИнформационнуюКарту(кодКарты)

	владелецКарты = СоздатьВладельцаКарты(кодКарты);
	Если владелецКарты = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	информационныеКартыОбъект = Справочники.ИнформационныеКарты.СоздатьЭлемент();

	информационныеКартыОбъект.Заполнить(Неопределено);
	
	информационныеКартыОбъект.Наименование 		= КодКарты;
	информационныеКартыОбъект.КодКарты 			= КодКарты;
	информационныеКартыОбъект.ВидКарты 			= Перечисления.ВидыИнформационныхКарт.Штриховая;
	информационныеКартыОбъект.ТипШтрихКода 		= ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
	информационныеКартыОбъект.ТипКарты 			= Перечисления.ТипыИнформационныхКарт.Р_Бонусная;
	информационныеКартыОбъект.Р_ВыгружатьНаПОС 	= Истина;
	информационныеКартыОбъект.ВладелецКарты 	= ВладелецКарты;
	информационныеКартыОбъект.СМС_Информирование = Истина;
	
	Если Р_РучнойПроцентБонуса <> 0 Тогда
		информационныеКартыОбъект.Р_РучнойПроцентБонуса = Р_РучнойПроцентБонуса;
		информационныеКартыОбъект.ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная;
	КонецЕсли;
	
	информационныеКартыОбъект.УстановитьНовыйКод();
	
	информационныеКартыОбъект.ОбменДанными.Загрузка = Истина;
	
	ПодключаемоеОборудованиеКлиентСервер.ЗарегистрироватьИнформационнуюКартуВручную(информационныеКартыОбъект);
	
	Если Не информационныеКартыОбъект.ПроверитьЗаполнение() Тогда
		
		сообщение = Новый СообщениеПользователю;
		сообщение.Текст = ОбщегоНазначенияСервер.ПолучитьТекстСообщенийПользователю();
		сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
		сообщение.Сообщить();
	
		Возврат Неопределено;
	
	КонецЕсли; 
	
	Попытка
		информационныеКартыОбъект.Записать();
	Исключение
	
		информацияОбОшибке = ИнформацияОбОшибке();
		
		сообщение = Новый СообщениеПользователю;
		сообщение.Текст = НСтр("ru = 'Описание ошибки: '") + КраткоеПредставлениеОшибки(информацияОбОшибке);
		сообщение.Сообщить();
		
		Возврат Неопределено;
	
	КонецПопытки;
	
	Возврат информационныеКартыОбъект.Ссылка;

КонецФункции // СоздатьИнформационнуюКарту()

#КонецОбласти