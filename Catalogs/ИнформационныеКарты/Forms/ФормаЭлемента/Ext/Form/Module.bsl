
&НаКлиенте
Процедура ВидКартыПриИзменении(Элемент)
	
	ПриИзмененииВидаКарты();
	УстановитьВидимость();

КонецПроцедуры

Процедура УстановитьВидимость()

	
	ЭтоШтриховаяКарта = ШтриховаяКарта();
	Элементы.ВладелецКарты.АвтоОтметкаНезаполненного = Истина;
	ЭтоДисконтнаяКарта = ПолучитьТипКарты();
	
	Если ШтриховаяКарта() Тогда
		Элементы.Р_ДатаНачалаДействия.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Р_НомерЧекаРегистрации);
		Элементы.Р_НомерЧекаРегистрации.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Р_НомерЧекаРегистрации);
	КонецЕсли;

	Элементы.ТипШтрихкода.Видимость = ЭтоШтриховаяКарта;
	
	Элементы.ВидДисконтнойКарты.Видимость = ЭтоДисконтнаяКарта;

	Если ЭтоДисконтнаяКарта Тогда
		Элементы.ВладелецКарты.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ВладелецКарты.ОтметкаНезаполненного = Ложь;
	Иначе
		Элементы.ВладелецКарты.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;

КонецПроцедуры // УстановитьВидимость()

Процедура ПриИзмененииВидаКарты()

	//Если ПолучитьВидКарты() Тогда
	//	//Элементы.КодКарты.Данные = "ШтрихКодКарты";
	//	Элементы.КодКарты.ОграничениеТипа = Новый ОписаниеТипов("Строка",,,,Объект.ТипШтрихкода.ТипЗначения.КвалификаторыСтроки);
	//Иначе
	//	//Элементы.КодКарты.Данные = "КодКарты";
	//	Элементы.КодКарты.ОграничениеТипа = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100));
	//КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ШтриховаяКарта()
	
	Возврат Объект.ВидКарты = Перечисления.ВидыИнформационныхКарт.Штриховая;
	
КонецФункции

Функция РегистрационнаяКарта()
	
	Возврат Объект.ТипКарты = Перечисления.ТипыИнформационныхКарт.Регистрационная;
	
КонецФункции


Функция ПолучитьТипКарты()
	
	Возврат (Объект.ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная);
	
КонецФункции

&НаКлиенте
Процедура ТипШтрихКодаПриИзменении(Элемент)
	
	ПриИзмененииВидаКарты();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимость();

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ВидКарты) Тогда
			Объект.ВидКарты = Перечисления.ВидыИнформационныхКарт.Магнитная;
			ПриИзмененииВидаКарты();
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Объект.ТипКарты) Тогда
			Объект.ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная;
			//ПриИзмененииТипаКарты();
		КонецЕсли;
		
		Объект.ТипШтрихКода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КодКартыПриИзменении(Элемент)
	
	Если ШтриховаяКарта() Тогда
		ПроверитьВерностьШтрихКода();
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьВерностьШтрихКода()
	
	Если НЕ (ЗначениеЗаполнено(Объект.ТипШтрихкода)
		 И ЗначениеЗаполнено(Объект.КодКарты) 
		 И ПроверитьШтрихКод(Объект.КодКарты, Объект.ТипШтрихкода)) Тогда
			Сообщить("Не верный штрихкод!", СтатусСообщения.Важное);
			//Объект.КодКарты = "";
		КонецЕсли;
		
КонецПроцедуры	

&НаСервере
// Проверка штрихкода на корректность
//
// Параметры:
//  ШтрихКод     - проверяемый штрихкод;
//  ТипШтрихкода - элемент плана видов характеристик "ТипыШтрихкодов", содержит тип
//                 проверяемого штрихкода.
//
// Возвращаемое значение:
//  Истина если штрих код корректен, иначе Ложь
//
Функция ПроверитьШтрихКод(ШтрихКод, ТипШтрихкода) Экспорт

	ДлинаКода = СтрДлина(Штрихкод);

	Если ДлинаКода = 0 Тогда
		Возврат Ложь;
	Иначе
		Если ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13 Тогда
			Если (ДлинаКода <> 13)
			 Или НЕ(ТолькоЦифры(Штрихкод)) // штрихкод должен состоять из цифр
			 Или КонтрольныйСимволEAN(Лев(Штрихкод,12), 13) <> Прав(Штрихкод, 1) Тогда
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN8 Тогда
			Если (ДлинаКода <> 8)
			 Или НЕ(ТолькоЦифры(Штрихкод)) // штрихкод должен состоять из цифр
			 Или КонтрольныйСимволEAN(Лев(Штрихкод, 7), 8 ) <> Прав(Штрихкод, 1) Тогда
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли ТипШтрихКода = ПланыВидовХарактеристик.ТипыШтрихкодов.Code39 Тогда
			Условие = СтрДлина(ШтрихКод) - 1;
			Для Индекс = 0 По Условие Цикл
				Символ = Лев(Прав(Штрихкод, Условие - Индекс + 1), 1);
				Если НЕ (((Символ >= "0") И (Символ <= "9"))
					ИЛИ	((Символ >= "A") И (Символ <= "Z"))
					ИЛИ (Символ = "-")
					ИЛИ (Символ = ".")
					ИЛИ (Символ = " ")
					ИЛИ (Символ = "$")
					ИЛИ (Символ = "/")
					ИЛИ (Символ = "+")
					ИЛИ (Символ = "%")
					ИЛИ (Символ = "*")) Тогда
					Возврат Ложь;
				КонецЕсли
			КонецЦикла;
		ИначеЕсли ТипШтрихКода = ПланыВидовХарактеристик.ТипыШтрихкодов.Code128 
				ИЛИ ТипШтрихКода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN128 Тогда
			Условие = СтрДлина(ШтрихКод) - 1;
			Для Индекс = 0 По Условие Цикл
				Если КодСимвола(ШтрихКод, Индекс) > 127 Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции // ПроверитьШтрихКод()

Функция КонтрольныйСимволEAN(ШтрихКод, Тип) Экспорт

	Четн   = 0;
	Нечетн = 0;

	КоличествоИтераций = ?(Тип = 13, 6, 4);

	Для Индекс = 1 По КоличествоИтераций Цикл
		Если (Тип = 8) и (Индекс = КоличествоИтераций) Тогда
		Иначе
			Четн   = Четн   + Сред(ШтрихКод, 2 * Индекс, 1);
		КонецЕсли;
		Нечетн = Нечетн + Сред(ШтрихКод, 2 * Индекс - 1, 1);
	КонецЦикла;

	Если Тип = 13 Тогда
		Четн = Четн * 3;
	Иначе
		Нечетн = Нечетн * 3;
	КонецЕсли;

	КонтЦифра = 10 - (Четн + Нечетн) % 10;

	Возврат ?(КонтЦифра = 10, "0", Строка(КонтЦифра));

КонецФункции // КонтрольныйСимволEAN()

Функция ТолькоЦифры(Штрихкод)

	Для Сч = 1 По СтрДлина(Штрихкод) Цикл
		Символ = Сред(Штрихкод, Сч, 1);
		Если НЕ(Найти("0123456789", Символ)) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;

КонецФункции // ТолькоЦифры()

&НаКлиенте
Процедура Регистрация(Команда)
		
	Если Параметры.Ключ.Пустая() ИЛИ Модифицированность Тогда
		Предупреждение("Карточка должна быть записана до регистрации", 5);
		Возврат;
	ИначеЕсли НЕ Объект.Р_ВыгружатьНаПОС Тогда
		Предупреждение("Карточка должна иметь признак выгрузки на POS (активирована)", 5);
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Р_НомерЧекаРегистрации) Тогда
		Предупреждение("Карточка уже зарегистрирована", 5);
		Возврат;
	ИначеЕсли Вопрос("Регистрация карточки необратимый процесс: Вы хотите выполнить ручную регистрацию ?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		ПодключаемоеОборудованиеКлиентСервер.ЗарегистрироватьИнформационнуюКартуВручную(Объект);
		УстановитьВидимость();
		
		Модифицированность = Истина;

	КонецЕсли
КонецПроцедуры


&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ШтриховаяКарта() Тогда

		Если Объект.КодКарты = "" Тогда
			Предупреждение("Перед записью необходимо заполнить код карты!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если Объект.ТипШтрихКода = "" Тогда
			Предупреждение("Перед записью необходимо заполнить тип штрихкода!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		ПроверитьВерностьШтрихКода();
 	Иначе
		Если Объект.КодКарты = "" Тогда
			Предупреждение("Перед записью необходимо заполнить код карты!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если РегистрационнаяКарта() Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ВладелецКарты) Тогда
			Предупреждение("Перед записью необходимо заполнить поле Владелец карты!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПриЗаписи()

&НаКлиенте
Процедура ТипКартыПриИзменении(Элемент)
	Объект.ВидДисконтнойКарты = Неопределено;
	УстановитьВидимость();
КонецПроцедуры

	


//&НаСервере
//Процедура ЗаписатьШтрихКодВБазу(КодКарты, ТипШтрихкода, Ссылка)
//	
//	ЗаписьШтрихкода              = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
//	ЗаписьШтрихкода.Владелец     = Ссылка;
//	ЗаписьШтрихкода.ТипШтрихкода = ТипШтрихкода;
//	ЗаписьШтрихкода.Штрихкод     = КодКарты;
//	
//	Попытка
//		ЗаписьШтрихкода.Удалить();
//	Исключение
//		Отказ = Истина;
//		Сообщить(ОписаниеОшибки());
//	КонецПопытки;
//	
//КонецПроцедуры

	
	


