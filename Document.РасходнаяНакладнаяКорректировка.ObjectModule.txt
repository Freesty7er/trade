Перем мВалютаРегламентированногоУчета Экспорт;

Процедура ЗаполнениеНаОснованииЗаявки()
	
ТекстЗапроса = "ВЫБРАТЬ
               |	ВложенныйЗапрос.Номенклатура,
               |	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
               |	ВложенныйЗапрос.НоменклатураРодитель
               |ИЗ
               |	(ВЫБРАТЬ
               |		КпкЗаявкаЗапасы.Номенклатура КАК Номенклатура,
               |		КпкЗаявкаЗапасы.Количество КАК Количество,
               |		КпкЗаявкаЗапасы.Номенклатура.Родитель КАК НоменклатураРодитель
               |	ИЗ
               |		Документ.КпкЗаявка.Запасы КАК КпкЗаявкаЗапасы
               |	ГДЕ
               |		КпкЗаявкаЗапасы.Ссылка = &Ссылка
               |	
               |	ОБЪЕДИНИТЬ ВСЕ
               |	
               |	ВЫБРАТЬ
               |		ЗаказПокупателяЗапасы.Номенклатура,
               |		ЗаказПокупателяЗапасы.Количество,
               |		ЗаказПокупателяЗапасы.Номенклатура.Родитель
               |	ИЗ
               |		Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
               |	ГДЕ
               |		ЗаказПокупателяЗапасы.Ссылка = &Ссылка) КАК ВложенныйЗапрос
               |
               |СГРУППИРОВАТЬ ПО
               |	ВложенныйЗапрос.Номенклатура,
               |	ВложенныйЗапрос.НоменклатураРодитель
               |
               |УПОРЯДОЧИТЬ ПО
               |	ВложенныйЗапрос.НоменклатураРодитель.Наименование,
               |	ВложенныйЗапрос.Номенклатура.Наименование";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.ДокОсн);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СоответствиеСкидок = ЦенообразованиеСервер.ВернутьАвтоматическиеСкидки(Новый Структура("Контрагент", ЭтотОбъект.Контрагент));
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаСостава = Выборка;
		
		Если СтрокаСостава.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Запасы.Добавить();
		//ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСостава);
		НоваяСтрока.Номенклатура 		=  СтрокаСостава.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения 	= НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
		НоваяСтрока.СтруктурнаяЕдиница 	= НоваяСтрока.Номенклатура.Родитель.Склад;
		
		НоваяСтрока.КоличествоЗаказано 	= СтрокаСостава.Количество;
		
		
		
		СтруктураПараметров = Новый Структура("Номенклатура, ТипЦен, Подразделение, ДатаСреза", НоваяСтрока.Номенклатура, ЭтотОбъект.ТипЦен, ЭтотОбъект.Подразделение, ЭтотОбъект.Дата);
		
		НоваяСтрока.ПроцентСкидкиНаВес 	= ЦенообразованиеСервер.ВернутьСкидкуНаВес(СтруктураПараметров);
		НоваяСтрока.Цена 				= ЦенообразованиеСервер.ВернутьЦенуНоменклатуры(СтруктураПараметров);
		//НоваяСтрока.ПроцентСкидки 		= СоответствиеСкидок.Получить(СокрЛП(СтрокаСостава.Номенклатура.Родитель.Код) +" / "+СокрЛП(СтрокаСостава.Номенклатура.ЦеноваяГруппа.Код));
		НоваяСтрока.ПроцентСкидки 		= СоответствиеСкидок.Получить(СокрЛП(СтрокаСостава.Номенклатура.Родитель.Код) +" / "+СокрЛП(Справочники.ЦеновыеГруппы.ПустаяСсылка().Код));
		
	КонецЦикла;	
	
КонецПроцедуры

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтарыйНомер = ЭтотОбъект.Номер;
	
	ДокументОснование 	= Неопределено;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
			ЭтотОбъект.Контрагент 	= ДанныеЗаполнения.Контрагент;
			ЭтотОбъект.ТипЦен 	= ДанныеЗаполнения.Контрагент.ТипЦен;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Подразделение") Тогда
			ЭтотОбъект.Подразделение = ДанныеЗаполнения.Подразделение;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Кладовщик") Тогда
			ЭтотОбъект.Кладовщик = ДанныеЗаполнения.Кладовщик;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Наборщик") Тогда
			ЭтотОбъект.Наборщик = ДанныеЗаполнения.Наборщик;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
			ДокументОснование 	= ДанныеЗаполнения.ДокументОснование;
		КонецЕсли;
		
	ИначеЕсли ДанныеЗаполнения = Неопределено Тогда
		// Это новый документ
		ЭтотОбъект.Организация 	= Константы.ОсновнаяОрганизация.Получить();
		
	Иначе
	 	ДокументОснование 	= ДанныеЗаполнения;
	КонецЕсли;
	
	Если ДокументОснование = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокОсн	= ДокументОснование;
	
	//ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДокументОснование.ПолучитьОбъект());
	
	ЭтотОбъект.Номер = СтарыйНомер;

	СоответствиеСкидок = Новый Соответствие;	
	
	Если ( ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриходнаяНакладная") ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратОтПокупателя")) Тогда
		
	Иначе
		
		
		ЭтотОбъект.Организация 	= ДокументОснование.Организация;
		ЭтотОбъект.Контрагент 	= ДокументОснование.Контрагент;

	
		ЭтотОбъект.Подразделение	= ДокументОснование.Подразделение;
		ЭтотОбъект.Менеджер 	= ДокументОснование.Менеджер;
		//ЭтотОбъект.ТипЦен 		= ДокументОснование.ТипЦен; //
		//ЭтотОбъект.ТипЦен 		= ДокументОснование.Контрагент.ТипЦен;
		
		//ТипЦенСтр = "ТипЦен"+?(ЭтотОбъект.Менеджер.НомерКоманды>1,СокрЛП(ЭтотОбъект.Менеджер.НомерКоманды),"");
		//ЭтотОбъект.ТипЦен 		= ДокументОснование.Контрагент[ТипЦенСтр];
		
		СтрокаУсловийПоставки = ДокументОснование.Контрагент.Менеджеры.Найти(ЭтотОбъект.Менеджер, "Менеджер");
		
		Если НЕ СтрокаУсловийПоставки = Неопределено Тогда
			
			ЭтотОбъект.ТипЦен = СтрокаУсловийПоставки.ТипЦен;
			
		КонецЕсли;

		
		//ЭтотОбъект.Наборщик 	= ПараметрыСеанса.Наборщик;
		//ЭтотОбъект.Кладовщик 	= ПараметрыСеанса.Кладовщик;
		
		
		СоответствиеСкидок = ЦенообразованиеСервер.ВернутьАвтоматическиеСкидки(Новый Структура("Контрагент", ДокументОснование.Контрагент));
		
		ЭтотОбъект.Дата = ДокументОснование.ДатаДоставки;
		
	КонецЕсли;
	
	ЭтотОбъект.ДатаОтгрузки = ЭтотОбъект.Дата;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КпкЗаявка") ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ЗаполнениеНаОснованииЗаявки();
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаСостава Из ДокументОснование.Запасы Цикл
		
		Если СтрокаСостава.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Запасы.Добавить();
		//ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСостава);
		НоваяСтрока.Номенклатура 		=  СтрокаСостава.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения 	= НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
		НоваяСтрока.СтруктурнаяЕдиница 	= НоваяСтрока.Номенклатура.Родитель.Склад;
		
		НоваяСтрока.КоличествоЗаказано 	= СтрокаСостава.Количество;
		
		Если ( ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриходнаяНакладная") ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратОтПокупателя")) Тогда
			НоваяСтрока.Количество 			= СтрокаСостава.Количество;
			НоваяСтрока.КоличествоОтгружено	= СтрокаСостава.Количество;
		КонецЕсли;
		
		
		СтруктураПараметров = Новый Структура("Номенклатура, ТипЦен, Подразделение, ДатаСреза", НоваяСтрока.Номенклатура, ЭтотОбъект.ТипЦен, ЭтотОбъект.Подразделение, ЭтотОбъект.Дата);
		
		НоваяСтрока.ПроцентСкидкиНаВес 	= ЦенообразованиеСервер.ВернутьСкидкуНаВес(СтруктураПараметров);
		НоваяСтрока.Цена 				= ЦенообразованиеСервер.ВернутьЦенуНоменклатуры(СтруктураПараметров);
		//НоваяСтрока.ПроцентСкидки 		= СоответствиеСкидок.Получить(СокрЛП(СтрокаСостава.Номенклатура.Родитель.Код) +" / "+СокрЛП(СтрокаСостава.Номенклатура.ЦеноваяГруппа.Код));
		НоваяСтрока.ПроцентСкидки 		= СоответствиеСкидок.Получить(СокрЛП(СтрокаСостава.Номенклатура.Родитель.Код) +" / "+СокрЛП(Справочники.ЦеновыеГруппы.ПустаяСсылка().Код));
		
	КонецЦикла;
	
	// ПриИзмененииКонтрагента
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	// Обновление статуса заявки
	Если ЗначениеЗаполнено(ЭтотОбъект.ДокОсн) Тогда
		
		ДокОсн = ЭтотОбъект.ДокОсн;
		
		Если НЕ ДокОсн.Статус Тогда
			ДокОснОбъект = ДокОсн.ПолучитьОбъект();
			ДокОснОбъект.Статус = Истина;
			ДокОснОбъект.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	
	// Инициализация дополнительных свойств для проведения документа.
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.РасходнаяНакладная.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета
	УправлениеНебольшойФирмойСервер.ОтразитьВзаиморасчетыСПокупателями(ДополнительныеСвойства, Движения, Отказ);
	
	// ТОВАРЫ
	#Область ТекстЗапроса
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РасходнаяНакладнаяЗапасы.НомерСтроки,
	|	РасходнаяНакладнаяЗапасы.Номенклатура,
	|	РасходнаяНакладнаяЗапасы.Количество,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * РасходнаяНакладнаяЗапасы.Количество КАК Стоимость,
	|	РасходнаяНакладнаяЗапасы.Сумма КАК ПродСтоимость,
	|	РасходнаяНакладнаяЗапасы.Номенклатура.Родитель.Склад КАК СтруктурнаяЕдиница,
	|	РасходнаяНакладнаяЗапасы.ПроцентСкидки,
	|	РасходнаяНакладнаяЗапасы.Скидка КАК СуммаСкидки,
	|	РасходнаяНакладнаяЗапасы.Ссылка.Менеджер,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяЗапасы.КоличествоОтгружено = 0
	|			ТОГДА 0
	|		ИНАЧЕ РасходнаяНакладнаяЗапасы.КоличествоОтгружено - РасходнаяНакладнаяЗапасы.Количество
	|	КОНЕЦ КАК СкидкаНаВесКоличество,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяЗапасы.КоличествоОтгружено = 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * (РасходнаяНакладнаяЗапасы.КоличествоОтгружено - РасходнаяНакладнаяЗапасы.Количество)
	|	КОНЕЦ КАК СкидкаНаВес
	|ИЗ
	|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаСреза, ) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО РасходнаяНакладнаяЗапасы.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И (ЦеныНоменклатурыСрезПоследних.ТипЦен = &ЦенаСклада)
	|			И (ЦеныНоменклатурыСрезПоследних.Подразделение = &Подразделение)
	|ГДЕ
	|	РасходнаяНакладнаяЗапасы.Ссылка = &Ссылка";
	#КонецОбласти			   
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ДатаСреза", Ссылка.Дата);
	
	СтурктураПараметровПоПодразделению = Новый Структура("Подразделение, ДатаСреза", Подразделение, Дата);
	СтурктураПараметровПоПодразделению = ЦенообразованиеСервер.ПолучитьПараметрыУчетаПоПодразделению(СтурктураПараметровПоПодразделению);
	
	Запрос.УстановитьПараметр("ЦенаСклада", СтурктураПараметровПоПодразделению.ЦенаСклада);
	
	ПартииТоваров 				= Движения.ПартииТоваровНаСкладах;
	Продажи 					= Движения.Продажи;
	ФинансовыйРезультат 		= Движения.ФинансовыйРезультат;
	ЗаказыПокупателей 			= Движения.ЗаказыПокупателей;
	ВзаиморасчетыСПоставщиками 	= Движения.ВзаиморасчетыСПоставщиками;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// Запасы
		Движение = ПартииТоваров.Добавить();
		
		Движение.Период 		= ЭтотОбъект.Дата;
		Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
		Движение.Номенклатура 	= Выборка.Номенклатура;
		Движение.Склад 			= ?(ЭтотОбъект.СписатьСоСкладаВозвратов, Константы.СкладВозвратов.Получить(), Выборка.СтруктурнаяЕдиница);
		Движение.Подразделение	= Подразделение;
		Движение.Количество 	= Выборка.Количество;
		Движение.Стоимость 		= Выборка.Стоимость;
		//Движение.Категория 		= ЭтотОбъект.Контрагент.КатегоияКонтрагента;
		
		// Заказы покупателей, только если на основании заявок.
		//Если НЕ Организация.ЕстьНДС И ЗначениеЗаполнено(ДокОсн) Тогда
		Если ЗначениеЗаполнено(ДокОсн) Тогда
			
			// выполнение заказа отражается датой заявки.
			Если ТипЗнч(ДокОсн) = Тип("ДокументСсылка.КпкЗаявка") Тогда
				Движение = ЗаказыПокупателей.Добавить();
				Движение.Период 		= ДокОсн.Дата;
				Движение.Подразделение 	= Подразделение;
				Движение.Склад 			= Выборка.Номенклатура.Родитель.Склад;
				Движение.Менеджер 		= Менеджер;
				Движение.Контрагент 	= Контрагент;
				Движение.Номенклатура 	= Выборка.Номенклатура;
				Движение.ЗаказПокупателя = ЭтотОбъект.ДокОсн;
				Движение.Отгружено 		= Выборка.Количество;
			КонецЕсли;
			
		КонецЕсли;
		
		
		// Доход от реализации
		Движение = Продажи.Добавить();
		Движение.Период 		= ЭтотОбъект.Дата;
		Движение.Подразделение 	= ЭтотОбъект.Подразделение;
		Движение.Номенклатура 	= Выборка.Номенклатура;
		Движение.Менеджер		= ЭтотОбъект.Менеджер;
		Движение.Контрагент		= ЭтотОбъект.Контрагент;
		Движение.МаршрутРазвоза	= ?(ЭтотОбъект.ДокОсн = Неопределено,Справочники.МаршрутыРазвоза.ПустойМаршрут, ЭтотОбъект.ДокОсн.МаршрутРазвоза);
		Движение.Количество 	= Выборка.Количество;
		Движение.ПродСтоимость	= Выборка.ПродСтоимость;
		Движение.Доход	 		= Выборка.ПродСтоимость - Выборка.Стоимость;
		Движение.ТипЦены		= ЭтотОбъект.ТипЦен;
		Движение.ПроцентСкидки	= Выборка.ПроцентСкидки;
		Движение.КредитныйДокумент	= ЭтотОбъект.Ссылка;
		Движение.СуммаСкидки	= Выборка.СуммаСкидки;
		
		// Результат от реализации товаров
		Движение = ФинансовыйРезультат.Добавить();
		Движение.Период 		= ЭтотОбъект.Дата;
		Движение.Подразделение	= ЭтотОбъект.Подразделение;
		Движение.СтатьяДоходов 	= Справочники.СтатьиДоходов.МаржинальныйДоход;
		Движение.СуммаДоходов	= Выборка.ПродСтоимость - Выборка.Стоимость;
		
		// спишем на расходы - Скидку на вес.
		Если НЕ(Выборка.СкидкаНаВесКоличество = 0) Тогда
			
			// Запасы
			Движение = ПартииТоваров.Добавить();
			
			Движение.Период 		= ЭтотОбъект.Дата;
			Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
			Движение.Номенклатура 	= Выборка.Номенклатура;
			Движение.Склад 			= ?(ЭтотОбъект.СписатьСоСкладаВозвратов, Константы.СкладВозвратов.Получить(), Выборка.СтруктурнаяЕдиница);
			Движение.Подразделение	= Подразделение;
			Движение.Количество 	= Выборка.СкидкаНаВесКоличество;
			Движение.Стоимость 		= Выборка.СкидкаНаВес;
			//Движение.Категория 		= ЭтотОбъект.Контрагент.КатегоияКонтрагента;
			
			// Расходы
			Движение = ФинансовыйРезультат.Добавить();
			Движение.Период 		= ЭтотОбъект.Дата;
			Движение.Подразделение	= ЭтотОбъект.Подразделение;
			Движение.СтатьяЗатрат 	= Справочники.СтатьиЗатрат.СкидкаНаВес;
			Движение.СуммаРасходов	= Выборка.СкидкаНаВес;


		КонецЕсли;
		
	КонецЦикла;
	
	// ИМУЩЕСТВО
	Если Имущество.Количество() > 0 Тогда
		
		ИмуществоВЭксплуатации = Движения.Имущество;
		
		Для Каждого СтрокаСостава Из Имущество Цикл
			
			Движение = ИмуществоВЭксплуатации.Добавить();
			
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.Период 		= Дата;
			Движение.Подразделение	= Подразделение;
			Движение.Номенклатура 	= СтрокаСостава.Номенклатура;
			Движение.МОЛ			= СтрокаСостава.МОЛ;
			Движение.Количество 	= СтрокаСостава.Количество;
			Движение.Стоимость 		= СтрокаСостава.Сумма;
			Движение.СчетУчета		= СтрокаСостава.Номенклатура.СчетУчета;
			
		КонецЦикла;
		
		ИмуществоВЭксплуатации.Записать();
		
		ВзаиморасчетыСПокупателями = Движения.ВзаиморасчетыСПокупателями;
		
		Движение = ВзаиморасчетыСПокупателями.Добавить();
		Движение.ВидДвижения 	= ВидДвиженияНакопления.Приход;
		Движение.Период 		= Дата;
		Движение.Подразделение 	= Подразделение;
		Движение.Контрагент 	= Контрагент;
		Движение.Сумма 			= Имущество.Итог("Сумма");
		
		ВзаиморасчетыСПокупателями.Записать();
		
	КонецЕсли;
	
	ПартииТоваров.Записывать 				= Истина;
	Продажи.Записывать 						= Истина;
	ФинансовыйРезультат.Записывать 			= Истина;
	ЗаказыПокупателей.Записывать 			= Истина;
	ВзаиморасчетыСПоставщиками.Записывать 	= Истина;
	Движения.ТоварыВРознице.Записывать		= Истина;
	
	// допроведем розницу .... ОБЯЗАТЕЛЬНО !!! после выполнения проверки документа
	Если ДополнительныеСвойства.УчетнаяПолитика.АвтоУчетРозницы Тогда
		
		СтруктураПараметровОтдела = Новый Структура("Организация, Контрагент", Организация, Контрагент);
		РозницаСервер.ПолучитьПараметрыОтдела(СтруктураПараметровОтдела);
		
		Если НЕ СтруктураПараметровОтдела.Подразделение = Неопределено Тогда
			
			// Партии товаров в рознице
			Движение = ПартииТоваров.Добавить();
			
			Движение.ВидДвижения 	= ВидДвиженияНакопления.Приход;
			Движение.Период 		= Дата;
			Движение.Подразделение 	= СтруктураПараметровОтдела.Подразделение;
			Движение.Склад 			= СтруктураПараметровОтдела.Склад;
			Движение.ЦФО 			= СтруктураПараметровОтдела.ОтделМагазина;
			Движение.Стоимость 		= Запасы.Итог("Сумма");
			Движение.ПродСтоимость 	= Запасы.Итог("СуммаБезСкидки");
			
			// Взаиморасчеты с "Поставщиками"
			Движение = ВзаиморасчетыСПоставщиками.Добавить();
			
			Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
			Движение.Период 		= Дата;
			Движение.Подразделение	= СтруктураПараметровОтдела.Подразделение;
			Движение.Контрагент 	= ДополнительныеСвойства.УчетнаяПолитика.Контрагент;
			Движение.ЦФО 			= СтруктураПараметровОтдела.ОтделМагазина;
			Движение.Сумма 			= Запасы.Итог("Сумма");
			
			Если ЗначениеЗаполнено(Ссылка.ДокОсн) Тогда
				датаОтгрузки = 	КонецДня(Ссылка.ДокОсн.Дата) + 1;
			Иначе
				датаОтгрузки = 	КонецДня(Ссылка.Дата) + 1;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			#Область ТекстЗапроса
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
			|	&датаОтгрузки КАК Период,
			|	ОтделыВМагазинах.Подразделение,
			|	ОтделыВМагазинах.Ссылка КАК ОтделМагазина,
			|	РасходнаяНакладнаяЗапасы.Номенклатура,
			|	РасходнаяНакладнаяЗапасы.Количество,
			|	РасходнаяНакладнаяЗапасы.СуммаБезСкидки КАК Сумма,
			|	РасходнаяНакладнаяЗапасы.Скидка КАК Наценка
			|ИЗ
			|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОтделыВМагазинах КАК ОтделыВМагазинах
			|		ПО РасходнаяНакладнаяЗапасы.Ссылка.Контрагент = ОтделыВМагазинах.Магазин
			|			И (ОтделыВМагазинах.Организация = РасходнаяНакладнаяЗапасы.Ссылка.Организация
			|				ИЛИ ОтделыВМагазинах.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
			|ГДЕ
			|	РасходнаяНакладнаяЗапасы.Ссылка = &Документ
			|	И РасходнаяНакладнаяЗапасы.Количество > 0";
			#КонецОбласти
			
			Запрос.УстановитьПараметр("Документ", Ссылка);
			Запрос.УстановитьПараметр("ДатаОтгрузки", ДатаОтгрузки);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Движения.ТоварыВРознице.Загрузить(РезультатЗапроса.Выгрузить());
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Запись наборов записей.
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.РасходнаяНакладная.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СуммаСкидки =    Запасы.Итог("Скидка");

	СуммаДокумента = Имущество.Итог("Сумма") + Запасы.Итог("Сумма");
	
	ОбщегоНазначенияСервер.УстановитьНомерДокумента(ЭтотОбъект);
	
	Если (Организация.ФинУчет) Тогда
		
		ПогрешностиОкругления = Новый Соответствие();
		
		ОбработкаТабличныхЧастейСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Запасы, ЭтотОбъект, ПогрешностиОкругления, "Запасы");
		
		//Для Каждого СтрокаЗапасы Из Запасы Цикл
		//	
		//	СтрокаЗапасы.Сумма = Окр(СтрокаЗапасы.Сумма, 2, РежимОкругления.Окр15как20);
		//	
		//	СтрокаЗапасы.СуммаНДС = РассчитатьСуммуНДСсУчетомПогрешности(СтрокаЗапасы.Сумма,
		//	1,
		//	1,
		//	"НДС20",
		//	ПогрешностиОкругления);
		//КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	

	
	Если ЗначениеЗаполнено(Контрагент) И (Организация.ЕстьНДС) Тогда
		
		ШаблонСообщения = НСтр("ru = 'Контрагент: %Контрагент%,
			|отгрузка по  %Организация% - не разрешена !'");
		
		Если НЕ Контрагент.ОсновнаяОрганизация = Организация Тогда
			
			ТекстЗаголовкаСообщения = СтрЗаменить(ШаблонСообщения, "%Контрагент%", СокрЛП(Контрагент));
			ТекстЗаголовкаСообщения = СтрЗаменить(ТекстЗаголовкаСообщения, "%Организация%", СокрЛП(Организация));
			
			СообщитьОбОшибке(ЭтотОбъект, ТекстЗаголовкаСообщения, , , , Отказ);	
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(объектКопирования)
	
	ЗаполнениеОбъектовСервер.ЗаполнитьДанныеСкопированногоДокумента(ЭтотОбъект, объектКопирования);
	
КонецПроцедуры

#КонецОбласти

// Выводит сообщение об ошибке заполнения поля.
//
Процедура СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения, ИмяТабличнойЧасти = Неопределено, НомерСтроки = Неопределено, Поле = Неопределено, Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = ТекстСообщения;
	
	Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		
		// Платформа 8.2.15
		
	Иначе
		
		Если ИмяТабличнойЧасти <> Неопределено Тогда
			Сообщение.Поле = ИмяТабличнойЧасти + "[" + (НомерСтроки - 1) + "]." + Поле;
		ИначеЕсли ЗначениеЗаполнено(Поле) Тогда
			Сообщение.Поле = Поле;
		КонецЕсли;
		
		Сообщение.УстановитьДанные(ЭтотОбъект);
		
	КонецЕсли;
	
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры // СообщитьОбОшибке()

//мВалютаРегламентированногоУчета   = Константы.ВалютаРегламентированногоУчета.Получить();
мВалютаРегламентированногоУчета   = Справочники.Валюты.НациональнаяВалюта;