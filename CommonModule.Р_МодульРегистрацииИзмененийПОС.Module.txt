//////////////////////////////////////////////////////////////////////////////
//	Получение списка узлов для регистрации изменений в плане обмена Р_POS	//

Функция ПолучитьУзлыОбменаАктивногоПОС(ПОС) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Р_POS.Ссылка КАК Узел
	|ИЗ
	|	ПланОбмена.Р_POS КАК Р_POS
	|ГДЕ
	|	Р_POS.ПОС = &ПОС
	|	И Р_POS.ПОС.Активен
	|	И (НЕ Р_POS.ПОС.ПометкаУдаления)";
	Запрос.УстановитьПараметр("ПОС", ПОС);
	РезЗапроса = Запрос.Выполнить();
	Если РезЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат РезЗапроса.Выгрузить();
	КонецЕсли
КонецФункции

Функция ПолучитьУзелОбменаПОПОС(ПОС, ТипПО) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Р_POS.Ссылка КАК Узел
	|ИЗ
	|	ПланОбмена.Р_POS КАК Р_POS
	|ГДЕ
	|	(Р_POS.ПОС = &ПОС)
	|	И (Р_POS.ТипПО = &ТипПО)
	|	И Р_POS.ПОС.Активен
	|	И (НЕ Р_POS.ПОС.ПометкаУдаления)";
	Запрос.УстановитьПараметр("ПОС", ПОС);
	Запрос.УстановитьПараметр("ТипПО", ТипПО);
	ТабУзлы = Запрос.Выполнить().Выгрузить();
	Если ТабУзлы.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат ТабУзлы[0].Узел;
	КонецЕсли
КонецФункции

Функция ПолучитьУзлыОбменаОбщепит() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Р_POS.Ссылка КАК Узел
	|ИЗ
	|	ПланОбмена.Р_POS КАК Р_POS
	|ГДЕ
	|	((Р_POS.ТипПО = ЗНАЧЕНИЕ(Перечисление.Р_ТипыПОПОС.ResPOS_Bistro)) ИЛИ (Р_POS.ТипПО = ЗНАЧЕНИЕ(Перечисление.Р_ТипыПОПОС.ResPOS_Restaurant)))
	|	И Р_POS.ПОС.Активен
	|	И (НЕ Р_POS.ПОС.ПометкаУдаления)";
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ПолучитьУзлыОбменаАктивныхПОСТорговойТочки(ТоргТочка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Р_POS.Ссылка КАК Узел
	|ИЗ
	|	ПланОбмена.Р_POS КАК Р_POS
	|ГДЕ
	|	Р_POS.ПОС.ТорговаяТочка = &ТоргТочка
	|	И Р_POS.ПОС.Активен
	|	И (НЕ Р_POS.ПОС.ПометкаУдаления)";
	Запрос.УстановитьПараметр("ТоргТочка", ТоргТочка);
	РезЗапроса = Запрос.Выполнить();
	Если РезЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат РезЗапроса.Выгрузить();
	КонецЕсли
КонецФункции

//////////////////////////////////////////////////////////
//	Регистрация изменений для залов, столов	ресторана	//

Процедура ЗарегистрироватьИзмененияЗалыСтолыРесторана(Отказ, ОбменДанными, ТорговаяТочка) Экспорт
	Если (НЕ Отказ) И ОбменДанными.Получатели.АвтоЗаполнение Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Р_POS.Ссылка КАК Узел
		|ИЗ
		|	ПланОбмена.Р_POS КАК Р_POS
		|ГДЕ
		|	Р_POS.ПОС.Активен
		|	И НЕ Р_POS.ПОС.ПометкаУдаления
		|	И Р_POS.ПОС.ТорговаяТочка = &ТорговаяТочка
		|	И Р_POS.ТипПО = ЗНАЧЕНИЕ(Перечисление.Р_ТипыПОПОС.ResPOS_Restaurant)";
		Запрос.УстановитьПараметр("ТорговаяТочка", ТорговаяТочка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбменДанными.Получатели.Добавить(Выборка.Узел);
		КонецЦикла
	КонецЕсли
КонецПроцедуры

//////////////////////////////////////////////////////////
//	Регистрация изменений для мест печати общепита		//

Процедура ЗарегистрироватьИзмененияМестаПечатиОбщепита(Отказ, ОбменДанными, ТорговаяТочка) Экспорт
	Если (НЕ Отказ) И ОбменДанными.Получатели.АвтоЗаполнение Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Р_POS.Ссылка КАК Узел
		|ИЗ
		|	ПланОбмена.Р_POS КАК Р_POS
		|ГДЕ
		|	Р_POS.ПОС.Активен
		|	И (НЕ Р_POS.ПОС.ПометкаУдаления)
		|	И (Р_POS.ПОС.ТорговаяТочка = &ТорговаяТочка)
		|	И ((Р_POS.ТипПО = ЗНАЧЕНИЕ(Перечисление.Р_ТипыПОПОС.ResPOS_Restaurant)) ИЛИ (Р_POS.ТипПО = ЗНАЧЕНИЕ(Перечисление.Р_ТипыПОПОС.ResPOS_Bistro)))";
		Запрос.УстановитьПараметр("ТорговаяТочка", ТорговаяТочка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбменДанными.Получатели.Добавить(Выборка.Узел);
		КонецЦикла
	КонецЕсли
КонецПроцедуры

//////////////////////////////////////////////////////////
//	Регистрация изменений видов меню, меню для общепита	//

Процедура ЗарегистрироватьИзмененияВидМеню(Отказ, ОбменДанными, ВидМеню) Экспорт
	Если (НЕ Отказ) И ОбменДанными.Получатели.АвтоЗаполнение Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Р_POS.Ссылка КАК Узел
		|ИЗ
		|	ПланОбмена.Р_POS КАК Р_POS
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Р_ВидыМенюДляПОС КАК Р_ВидыМенюДляПОС
		|		ПО Р_ВидыМенюДляПОС.ПОС = Р_POS.ПОС
		|		 И Р_ВидыМенюДляПОС.ТипПО = Р_POS.ТипПО
		|		 И Р_ВидыМенюДляПОС.ВидМеню = &ВидМеню
		|ГДЕ
		|	Р_POS.ПОС.Активен
		|	И НЕ Р_POS.ПОС.ПометкаУдаления
		|	И Р_POS.ТипПО В (&СписокТипПО)";
		Запрос.УстановитьПараметр("ВидМеню", ВидМеню);
		СписокТипПО = Новый СписокЗначений;
		СписокТипПО.Добавить(Перечисления.Р_ТипыПОПОС.ResPOS_Bistro);
		СписокТипПО.Добавить(Перечисления.Р_ТипыПОПОС.ResPOS_Restaurant);
		Запрос.УстановитьПараметр("СписокТипПО", СписокТипПО);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Узел) Тогда
				ОбменДанными.Получатели.Добавить(Выборка.Узел);
			КонецЕсли
		КонецЦикла
	КонецЕсли
КонецПроцедуры

//////////////////////////////////////////////////////////
//		Регистрация изменений структуры талонов			//

Процедура ЗарегистрироватьИзмененияСтруктурыТалонов(Отказ, ОбменДанными) Экспорт
	Если (НЕ Отказ) И ОбменДанными.Получатели.АвтоЗаполнение Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Р_POS.Ссылка КАК Узел
		|ИЗ
		|	ПланОбмена.Р_POS КАК Р_POS
		|ГДЕ
		|	Р_POS.ПОС.Активен
		|	И НЕ Р_POS.ПОС.ПометкаУдаления
		|	И Р_POS.ТипПО = ЗНАЧЕНИЕ(Перечисление.Р_ТипыПОПОС.ResPOS_Талоны)";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбменДанными.Получатели.Добавить(Выборка.Узел);
		КонецЦикла
	КонецЕсли
КонецПроцедуры

//////////////////////////////////////////////////
//	ОБРАБОТЧИКИ СОБЫТИЙ ОБЪЕКТОВ ТИПОВОЙ УТП	//

//	Регистрация изменений в плане обмена Р_POS	//

Процедура Р_РегистрацияИзмененийРегистровСведенийПОСПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	МассивУзлов = Новый Массив;
	
	ТаблицаДанных = Источник.Выгрузить();
	Если ТаблицаДанных.Количество() = 0 Тогда
		Если ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.Штрихкоды") Тогда
			ТекВладелец = Источник.Отбор.Владелец.Значение;
			Если ЗначениеЗаполнено(ТекВладелец) И (ТипЗнч(ТекВладелец) = Тип("СправочникСсылка.Номенклатура")) Тогда
				СтрТаб = ТаблицаДанных.Добавить();
				СтрТаб.Владелец = ТекВладелец;
			Иначе
				Возврат;
			КонецЕсли
		ИначеЕсли ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.Р_ТоварыНаПОС") Тогда
			ТекПОС = Источник.Отбор.ПОС.Значение;
			ТекТипПО = Источник.Отбор.ТипПО.Значение;
			ТекНоменклатура = Источник.Отбор.Номенклатура.Значение;
			Если ЗначениеЗаполнено(ТекПОС) И ЗначениеЗаполнено(ТекТипПО) И ЗначениеЗаполнено(ТекНоменклатура) Тогда
				СтрТаб = ТаблицаДанных.Добавить();
				СтрТаб.ПОС = ТекПОС;
				СтрТаб.ТипПО = ТекТипПО;
				СтрТаб.Номенклатура = ТекНоменклатура;
			Иначе
				Возврат;
			КонецЕсли
		ИначеЕсли ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ЦеныАТТ") Тогда
			ТекРегистратор = Источник.Отбор.Регистратор.Значение;
			Если ЗначениеЗаполнено(ТекРегистратор) И (ТипЗнч(ТекРегистратор) = Тип("ДокументСсылка.ПереоценкаТоваровВРознице")) Тогда
				Для Каждого СтрДок Из ТекРегистратор.Товары Цикл
					СтрТаб = ТаблицаДанных.Добавить();
					СтрТаб.Склад = ТекРегистратор.Склад;
					СтрТаб.Номенклатура = СтрДок.Номенклатура;
				КонецЦикла
			КонецЕсли
		ИначеЕсли ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатуры") Тогда
			ТекРегистратор = Источник.Отбор.Регистратор.Значение;
			Если ЗначениеЗаполнено(ТекРегистратор) И (ТипЗнч(ТекРегистратор) = Тип("ДокументСсылка.УстановкаЦенНоменклатуры")) Тогда
				Для Каждого СтрДок Из ТекРегистратор.Товары Цикл
					СтрТаб = ТаблицаДанных.Добавить();
					СтрТаб.Номенклатура = СтрДок.Номенклатура;
				КонецЦикла
			КонецЕсли
		Иначе
			Возврат;	
		КонецЕсли
	КонецЕсли;
	 	
	Если ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатуры") Тогда
		
		Если НЕ ЕстьВИсточникеНоменклатураДляПОС(ТаблицаДанных) Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаДанных.Колонки.Добавить("Р_ВыгружатьНаПОС", Новый ОписаниеТипов("Булево"));
		ТаблицаДанных.Колонки.Добавить("ТипНоменклатуры", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));
		Для Каждого СтрТ Из ТаблицаДанных Цикл
			СтрТ.Р_ВыгружатьНаПОС = СтрТ.Номенклатура.Р_ВыгружатьНаПОС;
			СтрТ.ТипНоменклатуры = СтрТ.Номенклатура.ВидНоменклатуры.ТипНоменклатуры;
		КонецЦикла;
		
		Запрос = Новый Запрос;
	  	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Цены.Номенклатура,
		|	Цены.Р_ВыгружатьНаПОС,
		|	Цены.ТипНоменклатуры,
		|	Цены.ТипЦен
		|ПОМЕСТИТЬ ВТЦены
		|ИЗ
		|	&ТаблицаДанных КАК Цены
		|ГДЕ
		|	Цены.Р_ВыгружатьНаПОС
		|	И (Цены.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ГСМ))
		|;
		|ВЫБРАТЬ
		|	УстановкаПроектовДляНоменклатуры.Проект,
		|	УстановкаПроектовДляНоменклатуры.НоменклатураПроекта,
		|	Цены.ТипЦен
		|ПОМЕСТИТЬ ВТПроекты
		|ИЗ ВТЦены КАК Цены
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УстановкаПроектовДляНоменклатуры КАК УстановкаПроектовДляНоменклатуры
		|	ПО УстановкаПроектовДляНоменклатуры.НоменклатураПроекта = Цены.Номенклатура
		|;
		|///////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Р_POS.Ссылка
		|ИЗ
		|	ПланОбмена.Р_POS КАК Р_POS
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Р_ПОС.Кассы КАК Р_ПОСКассы
		|		ПО Р_ПОСКассы.Ссылка = Р_POS.ПОС
		|		 И Р_ПОСКассы.ТипПО = Р_POS.ТипПО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Р_ПОС.УстПО КАК Р_УстПО
		|		ПО Р_УстПО.Ссылка = Р_POS.ПОС
		|		 И Р_УстПО.ТипПО = Р_POS.ТипПО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПроекты
		|		ПО Р_ПОСКассы.Проект = ВТПроекты.Проект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Р_ТоварыНаПОС КАК Р_ТоварыНаПОС
		|		ПО Р_ТоварыНаПОС.ПОС = Р_POS.ПОС
		|		 И Р_ТоварыНаПОС.ТипПО = Р_POS.ТипПО
		|		 И Р_ТоварыНаПОС.Номенклатура = ВТПроекты.НоменклатураПроекта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Р_ВидыМенюДляПОС КАК Р_ВидыМенюДляПОС
		|		ПО (Р_ВидыМенюДляПОС.ПОС = Р_POS.ПОС)
		|		 И (Р_ВидыМенюДляПОС.ТипПО = Р_POS.ТипПО)
		|ГДЕ
		|	Р_POS.ПОС.Активен
		|	И НЕ Р_POS.ПОС.ПометкаУдаления
		|	И ((Р_POS.ПОС.ТорговаяТочка.ВидСкладовПродажи = ЗНАЧЕНИЕ(Перечисление.ВидыСкладов.Оптовый)) ИЛИ
		|	   (НЕ (Р_ВидыМенюДляПОС.ВидМеню ЕСТЬ NULL) И Р_ВидыМенюДляПОС.ВидМеню.ИспользоватьДляРозницы И (Р_ВидыМенюДляПОС.ВидМеню.ТипЦен = ВТПроекты.ТипЦен)))
		|	И (Р_УстПО.ОбщиеОфисКодыНаТовар ИЛИ НЕ (Р_ТоварыНаПОС.Номенклатура ЕСТЬ NULL))";
		Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
		  
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивУзлов.Добавить(Выборка.Ссылка);
	 	КонецЦикла;
		  
	ИначеЕсли ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ЦеныАТТ") Тогда
		
		Если НЕ ЕстьВИсточникеНоменклатураДляПОС(ТаблицаДанных) Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаСклады = ТаблицаДанных.Скопировать( , "Склад");
		ТаблицаСклады.Свернуть("Склад");
		мСклады = ТаблицаСклады.ВыгрузитьКолонку("Склад");
		
		ТаблицаДанных.Колонки.Добавить("Р_ВыгружатьНаПОС", Новый ОписаниеТипов("Булево"));
		ТаблицаДанных.Колонки.Добавить("ТипНоменклатуры", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));
		Для Каждого СтрТ Из ТаблицаДанных Цикл
			СтрТ.Р_ВыгружатьНаПОС = СтрТ.Номенклатура.Р_ВыгружатьНаПОС;
			СтрТ.ТипНоменклатуры = СтрТ.Номенклатура.ВидНоменклатуры.ТипНоменклатуры;
		КонецЦикла;
		
		Запрос = Новый Запрос;
	  	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Цены.Номенклатура,
		|	Цены.Р_ВыгружатьНаПОС,
		|	Цены.ТипНоменклатуры
		|ПОМЕСТИТЬ ВТЦены
		|ИЗ
		|	&ТаблицаДанных КАК Цены
		|ГДЕ
		|	Цены.Р_ВыгружатьНаПОС
		|	И (Цены.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ГСМ))
		|;
		|ВЫБРАТЬ
		|	УстановкаПроектовДляНоменклатуры.Проект,
		|	УстановкаПроектовДляНоменклатуры.НоменклатураПроекта
		|ПОМЕСТИТЬ ВТПроекты
		|ИЗ ВТЦены КАК Цены
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УстановкаПроектовДляНоменклатуры КАК УстановкаПроектовДляНоменклатуры
		|	ПО УстановкаПроектовДляНоменклатуры.НоменклатураПроекта = Цены.Номенклатура
		|;
		|///////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Р_POS.Ссылка
		|ИЗ
		|	ПланОбмена.Р_POS КАК Р_POS
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Р_ПОС.Кассы КАК Р_ПОСКассы
		|		ПО Р_ПОСКассы.Ссылка = Р_POS.ПОС
		|		 И Р_ПОСКассы.ТипПО = Р_POS.ТипПО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Р_ПОС.УстПО КАК Р_УстПО
		|		ПО Р_УстПО.Ссылка = Р_POS.ПОС
		|		 И Р_УстПО.ТипПО = Р_POS.ТипПО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПроекты
		|		ПО Р_ПОСКассы.Проект = ВТПроекты.Проект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Р_ТоварыНаПОС КАК Р_ТоварыНаПОС
		|		ПО Р_ТоварыНаПОС.ПОС = Р_POS.ПОС
		|		 И Р_ТоварыНаПОС.ТипПО = Р_POS.ТипПО
		|		 И Р_ТоварыНаПОС.Номенклатура = ВТПроекты.НоменклатураПроекта
		|ГДЕ
		|	Р_POS.ПОС.Активен
		|	И НЕ Р_POS.ПОС.ПометкаУдаления
		|	И Р_ПОСКассы.Склад В (&мСклады)
		|	И Р_ПОСКассы.Ссылка.ТорговаяТочка.ВидСкладовПродажи = ЗНАЧЕНИЕ(Перечисление.ВидыСкладов.Розничный)
		|	И (Р_УстПО.ОбщиеОфисКодыНаТовар ИЛИ НЕ (Р_ТоварыНаПОС.Номенклатура ЕСТЬ NULL))";
		Запрос.УстановитьПараметр("мСклады", мСклады);
		Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
		  
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивУзлов.Добавить(Выборка.Ссылка);
	 	КонецЦикла;
			
	ИначеЕсли ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.Штрихкоды") Тогда
		
		ТаблицаДанных.Свернуть("Владелец");
		
		ТаблицаДанных.Колонки.Добавить("Р_ВыгружатьНаПОС", Новый ОписаниеТипов("Булево"));
		ОбходТабШК = Истина;
		Пока ОбходТабШК Цикл
			ОбходТабШК = Ложь;
			Для Каждого СтрТ Из ТаблицаДанных Цикл
				Если ТипЗнч(СтрТ.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
					Если СтрТ.Владелец.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ГСМ Тогда
						ТаблицаДанных.Удалить(СтрТ);
						ОбходТабШК = Истина;
						Прервать;
					КонецЕсли;
					СтрТ.Р_ВыгружатьНаПОС = СтрТ.Владелец.Р_ВыгружатьНаПОС;
				Иначе
					ТаблицаДанных.Удалить(СтрТ);
					ОбходТабШК = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Если ТаблицаДанных.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
	  	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШК.Владелец,
		|	ШК.Р_ВыгружатьНаПОС
		|ПОМЕСТИТЬ ВТШК
		|ИЗ
		|	&ТаблицаДанных КАК ШК
		|ГДЕ
		|	ШК.Р_ВыгружатьНаПОС
		|;
		|ВЫБРАТЬ
		|	УстановкаПроектовДляНоменклатуры.Проект,
		|	УстановкаПроектовДляНоменклатуры.НоменклатураПроекта
		|ПОМЕСТИТЬ ВТПроекты
		|ИЗ ВТШК КАК ШК
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УстановкаПроектовДляНоменклатуры КАК УстановкаПроектовДляНоменклатуры
		|		ПО УстановкаПроектовДляНоменклатуры.НоменклатураПроекта = ШК.Владелец
		|;
		|///////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Р_POS.Ссылка
		|ИЗ
		|	ПланОбмена.Р_POS КАК Р_POS
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Р_ПОС.Кассы КАК Р_ПОСКассы
		|		ПО Р_ПОСКассы.Ссылка = Р_POS.ПОС
		|		 И Р_ПОСКассы.ТипПО = Р_POS.ТипПО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Р_ПОС.УстПО КАК Р_УстПО
		|		ПО Р_УстПО.Ссылка = Р_POS.ПОС
		|		 И Р_УстПО.ТипПО = Р_POS.ТипПО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПроекты
		|		ПО Р_ПОСКассы.Проект = ВТПроекты.Проект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Р_ТоварыНаПОС КАК Р_ТоварыНаПОС
		|		ПО Р_ТоварыНаПОС.ПОС = Р_POS.ПОС
		|		 И Р_ТоварыНаПОС.ТипПО = Р_POS.ТипПО
		|		 И Р_ТоварыНаПОС.Номенклатура = ВТПроекты.НоменклатураПроекта
		|ГДЕ
		|	Р_POS.ПОС.Активен
		|	И НЕ Р_POS.ПОС.ПометкаУдаления
		|	И (Р_УстПО.ОбщиеОфисКодыНаТовар ИЛИ НЕ (Р_ТоварыНаПОС.Номенклатура ЕСТЬ NULL))";
		Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
		  
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивУзлов.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.Р_ТоварыНаПОС") Тогда
		
		ТаблицаДанных.Свернуть("ПОС, ТипПО, Номенклатура");
		
		Запрос = Новый Запрос;
	  	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПОПОС.ПОС,
		|	ПОПОС.ТипПО
		|ПОМЕСТИТЬ ВТПОПОС
		|ИЗ
		|	&ТаблицаДанных КАК ПОПОС
		|;
		|///////////////////
		|ВЫБРАТЬ
		|	Р_POS.Ссылка
		|ИЗ
		|	ПланОбмена.Р_POS КАК Р_POS
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПОПОС
		|		ПО ВТПОПОС.ПОС = Р_POS.ПОС
		|		 И ВТПОПОС.ТипПО = Р_POS.ТипПО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Р_ПОС.УстПО КАК УстПО
		|		ПО УстПО.Ссылка = Р_POS.ПОС
		|		 И УстПО.ТипПО = Р_POS.ТипПО
		|ГДЕ
		|	НЕ Р_POS.ПОС.ПометкаУдаления
		|	И НЕ УстПО.ОбщиеОфисКодыНаТовар";
		Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
		  
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивУзлов.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивУзлов.Количество() > 0 Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Источник);
	КонецЕсли;
	
КонецПроцедуры

Процедура Р_ПередУдалениемСправочниковПОСПередУдалением(Источник, Отказ) Экспорт
	
	МассивУзлов = Новый Массив;
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ИнформационныеКарты") Тогда
		
		Если Источник.ЭтоГруппа
		 ИЛИ ((Источник.ТипКарты <> Перечисления.ТипыИнформационныхКарт.Дисконтная) И
		 	  (Источник.ТипКарты <> Перечисления.ТипыИнформационныхКарт.Р_Бонусная)) Тогда
			Возврат
		КонецЕсли;
		
		Если НЕ Источник.Р_ВыгружатьНаПОС Тогда
			Возврат
		КонецЕсли;
		
		ПолучитьВсеУзлыАктивныхПОС_АЗС(МассивУзлов, Ложь);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.Контрагенты") Тогда
		
		Если Источник.ЭтоГруппа
		 ИЛИ (НЕ Источник.Р_ВыгружатьНаПОС) Тогда
			Возврат
		КонецЕсли;
		
		Если Источник.Поставщик Тогда
			ПолучитьВсеУзлыАктивныхПОС(МассивУзлов);
		Иначе
			ПолучитьВсеУзлыАктивныхПОС_АЗС(МассивУзлов, Ложь, (Источник.ОсновнойДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.Р_ПоТалонамГСМ));
		КонецЕсли
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.ВидыОплатЧекаККМ") Тогда
		
		Если Источник.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.Наличные Тогда
			Возврат
		КонецЕсли;
		
		Если Источник.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.Р_БезналичнаяОплатаНаАЗС Тогда
			ПолучитьВсеУзлыАктивныхПОС_АЗС(МассивУзлов, Истина);
		Иначе
			ПолучитьВсеУзлыАктивныхПОС_АЗС(МассивУзлов, Ложь);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.Номенклатура") Тогда
		
		Если Источник.ЭтоГруппа
		 ИЛИ (НЕ Источник.Р_ВыгружатьНаПОС) Тогда
			Возврат
		КонецЕсли;
		
		Если Источник.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ГСМ Тогда
			Возврат;
		КонецЕсли;
		
		ПолучитьВсеДляНоменклатуры(Источник.Ссылка, МассивУзлов);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.ХарактеристикиНоменклатуры") Тогда
		
		Если (НЕ Источник.Владелец.Р_ВыгружатьНаПОС)
		 ИЛИ (Источник.Владелец.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ГСМ)Тогда
			Возврат
		КонецЕсли;
		
		ПолучитьВсеДляНоменклатуры(Источник.Владелец.Ссылка, МассивУзлов, Истина);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.ЗначенияСвойствОбъектов") Тогда
		
		Если Источник.Владелец.НазначениеСвойства <> ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры Тогда
			Возврат;
		КонецЕсли;
		
		ПолучитьВсеУзлыАктивныхПОСМаркет(МассивУзлов);
		
		//Источник = Источник.Владелец.ПолучитьОбъект();
		
	КонецЕсли;	
	
	Если МассивУзлов.Количество() > 0 Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Источник);
	КонецЕсли;
	
КонецПроцедуры

Процедура Р_ПриЗаписиСправочниковПОСПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МассивУзлов = Новый Массив;
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ИнформационныеКарты") Тогда
		
		Если Источник.ЭтоГруппа
		 ИЛИ ((Источник.ТипКарты <> Перечисления.ТипыИнформационныхКарт.Дисконтная) И
		 	  (Источник.ТипКарты <> Перечисления.ТипыИнформационныхКарт.Р_Бонусная)) Тогда
			Возврат
		КонецЕсли;
		
		Если Источник.ДополнительныеСвойства.Свойство("ВыгружатьНаПОС") Тогда
			ОбрабатыватьПризнакНаПОС = (Источник.Р_ВыгружатьНаПОС <> Источник.ДополнительныеСвойства.ВыгружатьНаПОС);
		Иначе
			ОбрабатыватьПризнакНаПОС = Ложь;
		КонецЕсли;
		
		Если (НЕ Источник.Р_ВыгружатьНаПОС) И (НЕ ОбрабатыватьПризнакНаПОС) Тогда
			Возврат
		КонецЕсли;
		
		ПолучитьВсеУзлыАктивныхПОС_АЗС(МассивУзлов, Ложь);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.Контрагенты") Тогда
		
		Если Источник.ЭтоГруппа
		 ИЛИ (НЕ Источник.Р_ВыгружатьНаПОС) Тогда
			Возврат
		КонецЕсли;
		
		Если Источник.Поставщик Тогда
			ПолучитьВсеУзлыАктивныхПОС(МассивУзлов);
		Иначе
			ПолучитьВсеУзлыАктивныхПОС_АЗС(МассивУзлов, Ложь, (Источник.ОсновнойДоговорКонтрагента.ВидВзаиморасчетов = Справочники.ВидыВзаиморасчетов.Р_ПоТалонамГСМ));
		КонецЕсли
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.ВидыОплатЧекаККМ") Тогда
		
		Если Источник.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.Наличные Тогда
			Возврат
		КонецЕсли;
		
		Если (Источник.Р_ОфисКод > 0)
		   И ((Источник.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.Р_БезналичнаяОплатаНаАЗС)
		  ИЛИ (Источник.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта)) Тогда
			ПолучитьВсеУзлыАктивныхПОС_АЗС(МассивУзлов, Истина);
			Если Источник.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта Тогда
				ПолучитьВсеУзлыАктивныхПОС_АЗС(МассивУзлов, Ложь);
			КонецЕсли;
		Иначе
			ПолучитьВсеУзлыАктивныхПОС_АЗС(МассивУзлов, Ложь);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.Номенклатура") Тогда
		
		Если Источник.ЭтоГруппа Тогда
			Возврат
		КонецЕсли;

		Если Источник.ДополнительныеСвойства.Свойство("ВыгружатьНаПОС") Тогда
			ОбрабатыватьПризнакНаПОС = (Источник.Р_ВыгружатьНаПОС <> Источник.ДополнительныеСвойства.ВыгружатьНаПОС);
		Иначе
			ОбрабатыватьПризнакНаПОС = Ложь;
		КонецЕсли;
		
		Если (НЕ Источник.Р_ВыгружатьНаПОС) И (НЕ ОбрабатыватьПризнакНаПОС) Тогда
			Возврат
		КонецЕсли;
		
		Если Источник.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ГСМ Тогда
			ПолучитьУзлыДляТалоновГСМ(МассивУзлов);
		Иначе
		
			ПолучитьВсеДляНоменклатуры(Источник.Ссылка, МассивУзлов);
			
			Если Источник.Р_ВыгружатьНаПОС И ОбрабатыватьПризнакНаПОС Тогда
				//обработать данные, при измененении признака выгрузки на ПОС
				Если (МассивУзлов.Количество() > 0) Тогда
					//ШтрихКоды
					ШКНоменклатуры = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
					ШКВыборка = РегистрыСведений.Штрихкоды.Выбрать(новый Структура("Владелец",Источник.Ссылка));
					Пока ШКВыборка.Следующий() Цикл
						ШКНоменклатуры.Отбор.Штрихкод.Установить(ШКВыборка.Штрихкод);
						ШКНоменклатуры.Отбор.Владелец.Установить(ШКВыборка.Владелец); 
						ШКНоменклатуры.Отбор.ТипШтрихкода.Установить(ШКВыборка.ТипШтрихкода);
						ШКНоменклатуры.Отбор.ЕдиницаИзмерения.Установить(ШКВыборка.ЕдиницаИзмерения);
						ШКНоменклатуры.Отбор.ХарактеристикаНоменклатуры.Установить(ШКВыборка.ХарактеристикаНоменклатуры);
						ШКНоменклатуры.Прочитать();
						ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, ШКНоменклатуры);
					КонецЦикла;
					//Характеристики номенклатуры
					ВыборкаСправочников = Справочники.ХарактеристикиНоменклатуры.Выбрать(,Источник.Ссылка);
					Пока ВыборкаСправочников.Следующий() Цикл
						ОбъектХарактеристика = ВыборкаСправочников.ПолучитьОбъект();
						ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, ОбъектХарактеристика);
					КонецЦикла
				КонецЕсли
			КонецЕсли
		
		КонецЕсли
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.ХарактеристикиНоменклатуры") Тогда
		
		Если (НЕ Источник.Владелец.Р_ВыгружатьНаПОС)
		 ИЛИ (Источник.Владелец.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ГСМ)Тогда
			Возврат
		КонецЕсли;
		
		ПолучитьВсеДляНоменклатуры(Источник.Владелец.Ссылка, МассивУзлов, Истина);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.ЗначенияСвойствОбъектов") Тогда
		
		Если Источник.Владелец.НазначениеСвойства <> ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры Тогда
			Возврат;
		КонецЕсли;
		
		ПолучитьВсеУзлыАктивныхПОСМаркет(МассивУзлов);
		
		//Источник = Источник.Владелец.ПолучитьОбъект();

	КонецЕсли;	
	
	Если МассивУзлов.Количество() > 0 Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Источник);
	КонецЕсли;
	
КонецПроцедуры

Процедура Р_ПриЗаписиПланаВидовХарактеристикПОСПриЗаписи(Источник, Отказ) Экспорт

	МассивУзлов = Новый Массив;
	
	Если ТипЗнч(Источник) = Тип("ПланВидовХарактеристикОбъект.СвойстваОбъектов") Тогда
	
		Если Источник.НазначениеСвойства <> ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры Тогда
			Возврат;
		КонецЕсли;
		
		ПолучитьВсеУзлыАктивныхПОС_АЗС(МассивУзлов, Ложь);
		
	КонецЕсли;	
	
	Если МассивУзлов.Количество() > 0 Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Источник);
	КонецЕсли;

КонецПроцедуры

Процедура Р_ПередУдалениемПланаВидовХарактеристикПОСПередУдалением(Источник, Отказ) Экспорт
	
	МассивУзлов = Новый Массив;
	
	Если ТипЗнч(Источник) = Тип("ПланВидовХарактеристикОбъект.СвойстваОбъектов") Тогда
	
		Если Источник.НазначениеСвойства <> ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры Тогда
			Возврат;
		КонецЕсли;
		
		ПолучитьВсеУзлыАктивныхПОС_АЗС(МассивУзлов, ЛОжь);
		
	КонецЕсли;	
	
	Если МассивУзлов.Количество() > 0 Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Источник);
	КонецЕсли;

КонецПроцедуры

//	Контроль запрета изменения, удаления спр. "Склады", прописанных в торговых точках	//

Процедура Р_ПередЗаписьюСправочниковПОСПередЗаписью(Источник, Отказ) Экспорт

	Если ТипЗнч(Источник) = Тип("СправочникОбъект.Склады") Тогда
		
		Если Источник.ОбменДанными.Загрузка Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ Источник.ЭтоНовый() Тогда
			
			ОписаниеТТ = ""; ОписаниеДляУдаления = "";
			ТорговаяТочка = Р_ОбщегоНазначения_ПОС.ТорговаяТочкаСкладаПродажиИлиРезервуара(Источник.Ссылка, ОписаниеТТ, ОписаниеДляУдаления);
			Если ЗначениеЗаполнено(ТорговаяТочка) Тогда
				Если ТорговаяТочка.ВидСкладовПродажи <> Источник.ВидСклада Тогда
					ОбщегоНазначения.СообщитьОбОшибке(ОписаниеТТ + ", вид склада НЕ СОВПАДАЕТ с видом складов продажи торговой точки", Отказ, , СтатусСообщения.Внимание);
				ИначеЕсли (Источник.ВидСклада = Перечисления.ВидыСкладов.Розничный) И (Источник.ТипЦенРозничнойТорговли <> ТорговаяТочка.ТипЦеныПродажи) Тогда
					ОбщегоНазначения.СообщитьОбОшибке(ОписаниеТТ + ", вид склада ""Розничный"", тип цен розн. продажи склада НЕ СОВПАДАЕТ с типом цен продажи торговой точки", Отказ, , СтатусСообщения.Внимание);
				ИначеЕсли Источник.ПометкаУдаления Тогда
					ОбщегоНазначения.СообщитьОбОшибке(ОписаниеДляУдаления + ". Склад ЗАПРЕЩЕНО помечать на удаление", Отказ, , СтатусСообщения.Внимание);
				КонецЕсли
			КонецЕсли
			
		КонецЕсли
	КонецЕсли
	
КонецПроцедуры

//					РАБОТА С БОНУСАМИ В ДОК. Р_ПродажиПоБонуснымКартам							//
//	Усттановка, отмена скидок в док. УстановкаСкидокНоменклатуры и ОтменаСкидокНоменклатуры		//
//	Уст. периода проводок в док. ПереоценкаТоваровВРознице с заполненым Р_ДатаНачалаДействияЦен	//

Процедура Р_ОбработкаПроведенияОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.Р_ПродажиПоБонуснымКартам") Тогда
		
		МассивУзлов = Новый Массив;
		ПолучитьВсеУзлыАктивныхПОС(МассивУзлов);
		Если МассивУзлов.Количество() > 0 Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Источник);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.УстановкаСкидокНоменклатуры") Тогда
		
		Если Источник.ВидСкидки <> Перечисления.ВидыСкидок.Розничная Тогда
			Возврат;
		КонецЕсли;
		
		МассивУзлов = Новый Массив;
		МассивСкладов = Новый Массив;
		Если НЕ Источник.ДляВсехПолучателей Тогда
			Для Каждого СтрПолучатель Из Источник.ПолучателиСкидки Цикл
				МассивСкладов.Добавить(СтрПолучатель.Получатель);
			КонецЦикла
		КонецЕсли;
		ПолучитьВсеУзлыДляСкладовПродажиАктивныхПОС(МассивУзлов, МассивСкладов);
		Если МассивУзлов.Количество() > 0 Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Источник);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ОтменаСкидокНоменклатуры") Тогда
		
		МассивУзлов = Новый Массив;
		МассивСкладов = Новый Массив;
		
		Если Источник.Документы.Количество() <> 0 Тогда 
			Для Каждого ЭлементДокумент из Источник.Документы Цикл 
				Если НЕ ЭлементДокумент.УстановкаСкидокНоменклатуры.ДляВсехПолучателей Тогда
					
					Для Каждого СтрПолучатель Из ЭлементДокумент.УстановкаСкидокНоменклатуры.ПолучателиСкидки Цикл
						Если МассивСкладов.Найти(СтрПолучатель.Получатель) = Неопределено Тогда 
							МассивСкладов.Добавить(СтрПолучатель.Получатель);
						КонецЕсли;
					КонецЦикла
				КонецЕсли;
			КонецЦикла;
			
			ПолучитьВсеУзлыДляСкладовПродажиАктивныхПОС(МассивУзлов, МассивСкладов);
			Если МассивУзлов.Количество() > 0 Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Источник);
			КонецЕсли;
		КонецЕсли
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПереоценкаТоваровВРознице") Тогда
		
		Если Источник.ВидОперации = Перечисления.ВидыОперацийПереоценкаТоваровВРознице.ПереоценкаВРознице Тогда
			Если ЗначениеЗаполнено(Источник.Р_ДатаНачалаДействияЦен) И (Источник.Р_ДатаНачалаДействияЦен > Источник.Дата) Тогда
				Проводки = Источник.Движения.Хозрасчетный;
				Для Каждого СтрПроводка Из Проводки Цикл
					СтрПроводка.Период = Источник.Р_ДатаНачалаДействияЦен;
				КонецЦикла
			КонецЕсли
		КонецЕсли
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ОтчетПроизводстваЗаСмену") Тогда
		//Отказаться от проведения по причине предварительного отказа
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
//		//Выполним процедуру списания 

		Если Не Источник.Р_ВыпускСоСписанием Тогда
			Возврат;			
		КонецЕсли;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ОтчетПроизводстваЗаСменуПродукция.Номенклатура,
		               |	СУММА(ОтчетПроизводстваЗаСменуПродукция.Количество) КАК Количество,
		               |	ОтчетПроизводстваЗаСменуПродукция.Счет
		               |ПОМЕСТИТЬ ВТ_НоменклатураДокумента
		               |ИЗ
		               |	Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ОтчетПроизводстваЗаСменуПродукция
		               |ГДЕ
		               |	ОтчетПроизводстваЗаСменуПродукция.Ссылка = &Ссылка
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ОтчетПроизводстваЗаСменуПродукция.Номенклатура,
		               |	ОтчетПроизводстваЗаСменуПродукция.Счет
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВыпускПродукцииУслугБухгалтерскийУчет.Продукция,
		               |	СУММА(ВыпускПродукцииУслугБухгалтерскийУчет.ПлановаяСтоимость) КАК ПлановаяСтоимость
		               |ПОМЕСТИТЬ ВТ_ВыпускЦены
		               |ИЗ
		               |	РегистрНакопления.ВыпускПродукцииУслугБухгалтерскийУчет КАК ВыпускПродукцииУслугБухгалтерскийУчет
		               |ГДЕ
		               |	ВыпускПродукцииУслугБухгалтерскийУчет.Регистратор = &Ссылка
		               |	И ВыпускПродукцииУслугБухгалтерскийУчет.Продукция В
		               |			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |				ВТ_НоменклатураДокумента.Номенклатура
		               |			ИЗ
		               |				ВТ_НоменклатураДокумента КАК ВТ_НоменклатураДокумента)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВыпускПродукцииУслугБухгалтерскийУчет.Продукция
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ПартииТоваровНаСкладах.Период,
		               |	ПартииТоваровНаСкладах.Активность,
		               |	ПартииТоваровНаСкладах.Номенклатура,
		               |	ПартииТоваровНаСкладах.Склад,
		               |	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
		               |	ПартииТоваровНаСкладах.СерияНоменклатуры,
		               |	ПартииТоваровНаСкладах.ДокументОприходования,
		               |	ПартииТоваровНаСкладах.СтатусПартии,
		               |	ПартииТоваровНаСкладах.Заказ,
		               |	ПартииТоваровНаСкладах.Качество,
		               |	ПартииТоваровНаСкладах.Количество,
		               |	ПартииТоваровНаСкладах.Стоимость,
		               |	ПартииТоваровНаСкладах.НДС,
		               |	ПартииТоваровНаСкладах.КодОперации,
		               |	ПартииТоваровНаСкладах.СписаниеПартий,
		               |	ПартииТоваровНаСкладах.НомерКорСтроки,
		               |	ПартииТоваровНаСкладах.ДокументДвижения,
		               |	ПартииТоваровНаСкладах.ДокументДвиженияПериод,
		               |	ПартииТоваровНаСкладах.НомерСтрокиСписанныхТоваров
		               |ПОМЕСТИТЬ ВТ_ПартииТоваров
		               |ИЗ
		               |	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
		               |ГДЕ
		               |	ПартииТоваровНаСкладах.Номенклатура В
		               |			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |				ВТ_НоменклатураДокумента.Номенклатура
		               |			ИЗ
		               |				ВТ_НоменклатураДокумента КАК ВТ_НоменклатураДокумента)
		               |	И ПартииТоваровНаСкладах.Регистратор = &Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ПартииТоваров.Номенклатура,
		               |	ВТ_ПартииТоваров.Склад,
		               |	ВТ_ПартииТоваров.ХарактеристикаНоменклатуры,
		               |	ВТ_ПартииТоваров.СерияНоменклатуры,
		               |	ВТ_ПартииТоваров.ДокументОприходования,
		               |	ВТ_ПартииТоваров.СтатусПартии,
		               |	ВТ_ПартииТоваров.Заказ,
		               |	ВТ_ПартииТоваров.Качество,
		               |	ВТ_ПартииТоваров.Количество,
		               |	ВТ_ПартииТоваров.Стоимость,
		               |	ВТ_ПартииТоваров.НДС,
		               |	ВТ_ПартииТоваров.КодОперации,
		               |	ВТ_ПартииТоваров.СписаниеПартий,
		               |	ВТ_ПартииТоваров.НомерКорСтроки,
		               |	ВТ_ПартииТоваров.ДокументДвижения,
		               |	ВТ_ПартииТоваров.ДокументДвиженияПериод,
		               |	ВТ_ПартииТоваров.НомерСтрокиСписанныхТоваров,
		               |	ЕСТЬNULL(ВТ_НоменклатураДокумента.Счет, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладе)) КАК СчетУчета
		               |ИЗ
		               |	ВТ_ПартииТоваров КАК ВТ_ПартииТоваров
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НоменклатураДокумента КАК ВТ_НоменклатураДокумента
		               |		ПО ВТ_ПартииТоваров.Номенклатура = ВТ_НоменклатураДокумента.Номенклатура
		               |ГДЕ
		               |	ВТ_ПартииТоваров.Номенклатура В
		               |			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |				ВТ_НоменклатураДокумента.Номенклатура
		               |			ИЗ
		               |				ВТ_НоменклатураДокумента КАК ВТ_НоменклатураДокумента)";
	   Запрос.УстановитьПараметр("Ссылка",Источник.Ссылка);
	   Результат = Запрос.Выполнить();
	   ВыборкаПартииТоваровНаСкладах = Результат.Выбрать();
	   //Партии товаров на складах
	   ПартииТоваровНаСкладах = Источник.Движения.ПартииТоваровНаСкладах;
	   ТоварыНаСкладах = Источник.Движения.ТоварыНаСкладах;
	   Пока ВыборкаПартииТоваровНаСкладах.Следующий() Цикл
		   Движение = ПартииТоваровНаСкладах.Добавить();
		   ЗаполнитьЗначенияСвойств(Движение,ВыборкаПартииТоваровНаСкладах);
		   Движение.Период = Источник.Дата;
		   Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
	   КонецЦикла;
	   //Выгрузим в таблицу
	   ТЗ_ДвиженийПартийТоваров = Результат.Выгрузить();
	   ТЗ_ДвиженийПартийТоваров.Свернуть("Номенклатура,Склад,ХарактеристикаНоменклатуры,СерияНоменклатуры,Качество,СчетУчета","Количество,Стоимость");
	   //Товары Организации
	   ТоварыОрганизаций = Источник.Движения.ТоварыОрганизаций;
	   Для каждого СтрокаПартийТоваров Из ТЗ_ДвиженийПартийТоваров Цикл
		   //Товары на складах
		   Если Источник.ОтражатьВУправленческомУчете Тогда
			   Движение = Источник.Движения.ТоварыНаСкладах.Добавить();
			   ЗаполнитьЗначенияСвойств(Движение,СтрокаПартийТоваров);
			   Движение.Период = Источник.Дата;
			   Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		   КонецЕсли;
		   //Товары организаций
		   Если Источник.ОтражатьВБухгалтерскомУчете Тогда
			   Движение = Источник.Движения.ТоварыОрганизаций.Добавить();
			   ЗаполнитьЗначенияСвойств(Движение,СтрокаПартийТоваров);
			   Движение.Период = Источник.Дата;
			   Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			   //Движения по БУ
			   Проводка = Источник.Движения.Хозрасчетный.Добавить();
			   Проводка.Период      = Источник.Дата;
			   Проводка.Организация = Источник.Организация;
			   Проводка.Содержание  = "Списание выпущенной продукции";
			   Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.ДругиеЗатратыОбычнойДеятельности;
			   Проводка.СчетКт      = СтрокаПартийТоваров.СчетУчета;
			   ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  СтрокаПартийТоваров.Номенклатура);
			   ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтрокаПартийТоваров.Склад);
			   //ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеПозиции",  Партия.НоменклатурнаяПозиция);
			   //ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  Партия.Партия);
			   Проводка.Сумма         = СтрокаПартийТоваров.Стоимость;                                                        
			   Проводка.КоличествоДт  = СтрокаПартийТоваров.Количество;

			   //Налоговый учет //Оставить на доработку
			   //Если   СтруктураШапкиДокумента.ЕстьНалогНаПрибыль
			   //	И Строка.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
			   //	Проводка.СуммаНУДт				= -(ПокупнаяЦенаНУ - Сумма);
			   //	Проводка.СуммаНУКт				= Проводка.СуммаНУДт;
			   //КонецЕсли;
			   
		   КонецЕсли;
	   КонецЦикла;
	   
   КонецЕсли;
	
КонецПроцедуры

Процедура Р_ОтменаПроведенияОбработкаУдаленияПроведения(Источник, Отказ) Экспорт
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УстановкаСкидокНоменклатуры") Тогда
		
		Если Источник.ВидСкидки <> Перечисления.ВидыСкидок.Розничная Тогда
			Возврат;
		КонецЕсли;
		
		МассивУзлов = Новый Массив;
		МассивСкладов = Новый Массив;
		Если НЕ Источник.ДляВсехПолучателей Тогда
			Для Каждого СтрПолучатель Из Источник.ПолучателиСкидки Цикл
				МассивСкладов.Добавить(СтрПолучатель.Получатель);
			КонецЦикла
		КонецЕсли;
		ПолучитьВсеУзлыДляСкладовПродажиАктивныхПОС(МассивУзлов, МассивСкладов);
		Если МассивУзлов.Количество() > 0 Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Источник);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ОтменаСкидокНоменклатуры") Тогда
		
		МассивУзлов = Новый Массив;
		МассивСкладов = Новый Массив;
		
		Если Источник.Документы.Количество() <> 0 Тогда 
			Для Каждого ЭлементДокумент из Источник.Документы Цикл 
				Если НЕ ЭлементДокумент.УстановкаСкидокНоменклатуры.ДляВсехПолучателей Тогда
					
					Для Каждого СтрПолучатель Из ЭлементДокумент.УстановкаСкидокНоменклатуры.ПолучателиСкидки Цикл
						Если МассивСкладов.Найти(СтрПолучатель.Получатель) = Неопределено Тогда 
							МассивСкладов.Добавить(СтрПолучатель.Получатель);
						КонецЕсли;
					КонецЦикла
				КонецЕсли;
			КонецЦикла;
			
			ПолучитьВсеУзлыДляСкладовПродажиАктивныхПОС(МассивУзлов, МассивСкладов);
			Если МассивУзлов.Количество() > 0 Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Источник);
			КонецЕсли;
		КонецЕсли;//Если Источник.Документы.Количество() <> 0 
		
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////
//				ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ			//

Функция ЕстьВИсточникеНоменклатураДляПОС(ТаблицаДанных)
	ЕстьТоварДляПОС = Ложь;
	мТовары = ТаблицаДанных.ВыгрузитьКолонку("Номенклатура");
	Для Каждого СтрТовар Из мТовары Цикл
		Если НЕ СтрТовар.ПометкаУдаления
		   И СтрТовар.Р_ВыгружатьНаПОС
		   И (СтрТовар.ВидНоменклатуры.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.ГСМ) Тогда
			ЕстьТоварДляПОС = Истина;
			Прервать;
		КонецЕсли
	КонецЦикла;
	Возврат ЕстьТоварДляПОС;
КонецФункции

Процедура ПолучитьУзлыДляТалоновГСМ(МассивУзлов) Экспорт
	Запрос = Новый Запрос;
  	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Р_POS.Ссылка
	|ИЗ
	|	ПланОбмена.Р_POS КАК Р_POS
	|ГДЕ
	|	Р_POS.ПОС.Активен
	|	И НЕ Р_POS.ПОС.ПометкаУдаления
	|	И (Р_POS.ТипПО = ЗНАЧЕНИЕ(Перечисление.Р_ТипыПОПОС.ResPOS_Талоны))";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивУзлов.Добавить(Выборка.Ссылка);
 	КонецЦикла;
КонецПроцедуры

Процедура ПолучитьВсеДляНоменклатуры(Товар, МассивУзлов, БезАЗС=Ложь)
	Запрос = Новый Запрос;
  	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Р_POS.Ссылка,
	|	Р_POS.ПОС,
	|	Р_POS.ТипПО
	|ИЗ
	|	ПланОбмена.Р_POS КАК Р_POS
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Р_ПОС.Кассы КАК Р_ПОСКассы
	|		ПО Р_ПОСКассы.Ссылка = Р_POS.ПОС
	|		 И Р_ПОСКассы.ТипПО = Р_POS.ТипПО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Р_ПОС.УстПО КАК Р_УстПО
	|		ПО Р_УстПО.Ссылка = Р_POS.ПОС
	|		 И Р_УстПО.ТипПО = Р_POS.ТипПО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УстановкаПроектовДляНоменклатуры КАК УстановкаПроектовДляНоменклатуры
	|		ПО УстановкаПроектовДляНоменклатуры.НоменклатураПроекта = &Товар
	|		 И УстановкаПроектовДляНоменклатуры.Проект = Р_ПОСКассы.Проект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Р_ТоварыНаПОС КАК Р_ТоварыНаПОС
	|		ПО Р_ТоварыНаПОС.ПОС = Р_POS.ПОС
	|		 И Р_ТоварыНаПОС.ТипПО = Р_POS.ТипПО
	|		 И Р_ТоварыНаПОС.Номенклатура = &Товар
	|ГДЕ
	|	Р_POS.ПОС.Активен
	|	И НЕ Р_POS.ПОС.ПометкаУдаления
	|	И (Р_POS.ТипПО <> ЗНАЧЕНИЕ(Перечисление.Р_ТипыПОПОС.ResPOS_Petrol))
	|	И (Р_УстПО.ОбщиеОфисКодыНаТовар ИЛИ НЕ (Р_ТоварыНаПОС.Номенклатура ЕСТЬ NULL))";
	Запрос.УстановитьПараметр("Товар", Товар);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если БезАЗС И Р_ОбщегоНазначения_ПОС.ТипПОДляАЗС(Выборка.ТипПО) Тогда
			Продолжить;
		КонецЕсли;
		Если Р_ОбщегоНазначения_ПОС.ТипПОДляОбщепита(Выборка.ТипПО)
		   И НЕ Р_ОбщегоНазначения_ПОС.ТоварДляПОПОСОбщепита(Выборка.ПОС, Выборка.ТипПО, Товар) Тогда
			Продолжить;
		КонецЕсли;
		МассивУзлов.Добавить(Выборка.Ссылка);
 	КонецЦикла;
КонецПроцедуры

Процедура ПолучитьВсеУзлыАктивныхПОС(МассивУзлов)
	Запрос = Новый Запрос;
  	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Р_POS.Ссылка
	|ИЗ
	|	ПланОбмена.Р_POS КАК Р_POS
	|ГДЕ
	|	Р_POS.ПОС.Активен
	|	И НЕ Р_POS.ПОС.ПометкаУдаления
	|	И (Р_POS.ТипПО <> ЗНАЧЕНИЕ(Перечисление.Р_ТипыПОПОС.ResPOS_Талоны))";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивУзлов.Добавить(Выборка.Ссылка);
 	КонецЦикла;
КонецПроцедуры

Процедура ПолучитьВсеУзлыАктивныхПОСМаркет(МассивУзлов)
	Запрос = Новый Запрос;
  	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Р_POS.Ссылка
	|ИЗ
	|	ПланОбмена.Р_POS КАК Р_POS
	|ГДЕ
	|	Р_POS.ПОС.Активен
	|	И НЕ Р_POS.ПОС.ПометкаУдаления
	|	И (Р_POS.ТипПО = ЗНАЧЕНИЕ(Перечисление.Р_ТипыПОПОС.ResPOS_Market))";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивУзлов.Добавить(Выборка.Ссылка);
 	КонецЦикла;
КонецПроцедуры

Процедура ПолучитьВсеУзлыДляСкладовПродажиАктивныхПОС(МассивУзлов, МассивСкладов)
	Запрос = Новый Запрос;
  	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Р_POS.Ссылка
	|ИЗ
	|	ПланОбмена.Р_POS КАК Р_POS
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Р_ПОС.Кассы КАК Р_ПОС_Кассы
	|	ПО Р_POS.ПОС = Р_ПОС_Кассы.Ссылка
	|	 И Р_POS.ТипПО = Р_ПОС_Кассы.ТипПО
	|	 " + ?(МассивСкладов.Количество()>0, "И Р_ПОС_Кассы.Склад В (&МассивСкладов)", "") + "
	|ГДЕ
	|	Р_POS.ПОС.Активен
	|	И НЕ Р_POS.ПОС.ПометкаУдаления
	|	И (Р_POS.ТипПО <> ЗНАЧЕНИЕ(Перечисление.Р_ТипыПОПОС.ResPOS_Petrol))
	|	И (Р_POS.ТипПО <> ЗНАЧЕНИЕ(Перечисление.Р_ТипыПОПОС.ТерминалАЗС_01М))
	|	И (Р_POS.ТипПО <> ЗНАЧЕНИЕ(Перечисление.Р_ТипыПОПОС.БлокАРМ2))";
	Запрос.УстановитьПараметр("МассивСкладов", МассивСкладов);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивУзлов.Добавить(Выборка.Ссылка);
 	КонецЦикла;
КонецПроцедуры

Процедура ПолучитьВсеУзлыАктивныхПОС_АЗС(МассивУзлов, ЭтоАЗС=Истина, ЭтоТалоны=Ложь)
	Запрос = Новый Запрос;
  	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Р_POS.Ссылка
	|ИЗ
	|	ПланОбмена.Р_POS КАК Р_POS
	|ГДЕ
	|	Р_POS.ПОС.Активен
	|	И (НЕ Р_POS.ПОС.ПометкаУдаления)
	|	И (Р_POS.ТипПО В (&ТипПО_АЗС))";
	мТипыПОАЗС = Новый Массив;
	мТипыПОАЗС.Добавить(Перечисления.Р_ТипыПОПОС.ResPOS_Petrol);
	мТипыПОАЗС.Добавить(Перечисления.Р_ТипыПОПОС.ТерминалАЗС_01М);
	мТипыПОАЗС.Добавить(Перечисления.Р_ТипыПОПОС.БлокАРМ2);
	Запрос.УстановитьПараметр("ТипПО_АЗС", мТипыПОАЗС);
	Если НЕ ЭтоАЗС Тогда
		Если ЭтоТалоны Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И (Р_POS.ТипПО В (&ТипПО_АЗС))", "И (НЕ (Р_POS.ТипПО В (&ТипПО_АЗС)))");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И (Р_POS.ТипПО В (&ТипПО_АЗС))", "И (НЕ (Р_POS.ТипПО В (&ТипПО_АЗС))) И (Р_POS.ТипПО <> ЗНАЧЕНИЕ(Перечисление.Р_ТипыПОПОС.ResPOS_Талоны))");
		КонецЕсли
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивУзлов.Добавить(Выборка.Ссылка);
 	КонецЦикла;
КонецПроцедуры

Процедура Р_ПередЗаписьюДокументов(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ОтчетПроизводстваЗаСмену") Тогда
		//Отказаться от проведения по причине предварительного отказа
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		//Необходимо поставить условие если это документ работает в режиме общепита
		//Возможно данная проверка избыточна
		Если НЕ Источник.Р_РучноеЗаполнениеМатериалов Тогда
			
			Если Источник.Материалы.Количество() > 0 Тогда
				Источник.Материалы.Очистить();
			КонецЕсли;
			
			//Зполнение материалов 
			Источник.Р_ЗаполнитьМатериалы();
			
		КонецЕсли
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказПокупателя") Тогда
		//Создание № заказа талонов POS, для документа созданного в 1С
		Если ЗначениеЗаполнено(Источник.Р_НомерЗаказаПОС) ИЛИ Отказ Тогда
			Возврат;
		КонецЕсли;
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТабТовары.Номенклатура
		|ПОМЕСТИТЬ ВТТовары
		|ИЗ
		|	&ТабТовары КАК ТабТовары
		|;
		|////////////////////////////
		|
		|ВЫБРАТЬ
		|	Заказ.Номенклатура
		|ИЗ
		|	ВТТовары КАК Заказ
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Р_ТалоныТоварСтруктура КАК Р_ТалоныТоварСтруктура
		|	ПО Р_ТалоныТоварСтруктура.Номенклатура = Заказ.Номенклатура";
		Запрос.УстановитьПараметр("ТабТовары", Источник.Товары);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтрУИ = ВРег(СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", ""));
			НомерЗаказаПОС = 0;
			Сч = 1;
			Пока Сч <= 32 Цикл
				Стр = Сред(СтрУИ, Сч, 2);
				Байт = Найти("123456789ABCDEF", Сред(Стр,2,1)) * 16 + Найти("123456789ABCDEF", Сред(Стр,1,1));
				НомерЗаказаПОС = НомерЗаказаПОС + Pow(Байт, (Сч+1)/2);
				Сч = Сч + 2;
			КонецЦикла;
			СтрНомерЗаказаПОС = СтрЗаменить(Строка(НомерЗаказаПОС), Символы.НПП, "");
			Источник.Р_НомерЗаказаПОС = СтрНомерЗаказаПОС;
		КонецЕсли
		
	КонецЕсли
	
КонецПроцедуры
