
#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(отказ, режимПроведения)
	
	Движения.ДенежныеСредства.Записывать 			= Истина;
	Движения.ФинансовыйРезультат.Записывать 		= Истина;
	Движения.ВзаиморасчетыССотрудниками.Записывать 	= Истина;
	Движения.ВзаиморасчетыСПоставщиками.Записывать 	= Истина;
	Движения.ВзаиморасчетыСПокупателями.Записывать 	= Истина;
	Движения.ДенежныеДокументыВыданные.Записывать 	= Истина;
	Движения.ПоказанияСпидометра.Записывать			= Истина;
	Движения.РасчетыПоОплатеТруда.Записывать		= Истина;
	Движения.ПартииТоваровНаСкладах.Записывать		= Истина;

	
	
	результатЗапроса = Документы.ПутевойЛист.СформироватьТаблицыДляПроведения(Ссылка);
	
	Движения.ДенежныеДокументыВыданные.Загрузить(результатЗапроса[2].Выгрузить());
	Движения.ПартииТоваровНаСкладах.Загрузить(результатЗапроса[3].Выгрузить());
	Движения.ФинансовыйРезультат.Загрузить(результатЗапроса[4].Выгрузить());
	Движения.ВзаиморасчетыССотрудниками.Загрузить(результатЗапроса[5].Выгрузить());
	Движения.РасчетыПоОплатеТруда.Загрузить(результатЗапроса[6].Выгрузить());
	Движения.ПоказанияСпидометра.Загрузить(результатЗапроса[7].Выгрузить());
	Движения.ВзаиморасчетыСПокупателями.Загрузить(результатЗапроса[8].Выгрузить());
	
	
	
	//// Взаиморасчеты
	//Если ЗначениеЗаполнено(Плательщик) Тогда
	//	
	//	движение = Движения.ВзаиморасчетыСПокупателями.ДобавитьПриход();
	//	
	//	движение.Период = Дата;
	//	движение.Подразделение 	= Подразделение;
	//	движение.Контрагент 	= Плательщик;
	//	движение.Сумма			= СуммаДокумента;
	//	
	//	
	//	движение = Движения.ФинансовыйРезультат.Добавить();
	//	
	//	движение.Период 		= Дата;
	//	движение.Подразделение	= Подразделение;
	//	движение.Объект			= Автомобиль;
	//	движение.СтатьяДоходов 	= Справочники.СтатьиДоходов.ТранспортныеУслуги;
	//	движение.СуммаДоходов	= СуммаДокумента;
	//	
	//КонецЕсли;
		
	// Определимся с заправкой
	Для Каждого строкаЗаправки Из ЗаправочнаяВедомость Цикл
		
		Если строкаЗаправки.ВидОплаты = Справочники.ВидыОплатыЗаГСМ.Наличные Тогда
			// если нал ... снимаем с подотчета
			движение = Движения.ВзаиморасчетыССотрудниками.ДобавитьРасход();
			
			движение.Период 		= Дата;
			движение.Подразделение	= Подразделение;
			движение.Сотрудник		= Водитель;
			движение.Сумма 			= строкаЗаправки.Стоимость; // заправка отдельно
			движение.СчетУчета		= ПланыСчетов.Внутренний.Подотчет;
			
		Иначе
			
			Если строкаЗаправки.ВидОплаты = Справочники.ВидыОплатыЗаГСМ.ПоКарточке Тогда
				// списываем со счета СКС
				движение = Движения.ДенежныеСредства.ДобавитьРасход();
				
				движение.Период 		= Дата;
				движение.Подразделение 	= Подразделение;
				движение.ДенежныйСчет 	= строкаЗаправки.Счет_СКС;
				движение.Сумма 			= строкаЗаправки.Стоимость;
				
			Иначе
				// чё длать с безналом ???
				Движение = Движения.ВзаиморасчетыСПоставщиками.ДобавитьРасход();
				
				движение.Период 		= Дата;
				движение.Подразделение	= Подразделение;
				движение.Контрагент		= строкаЗаправки.ВидОплаты.Контрагент;
				движение.Сумма 			= строкаЗаправки.Стоимость;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не строкаЗаправки.Стоимость = 0 Тогда
			движение = Движения.ФинансовыйРезультат.Добавить();
			
			движение.Период 		= Дата;
			движение.Подразделение 	= Подразделение;
			движение.Объект		 	= Автомобиль;
			движение.СтатьяЗатрат 	= Справочники.СтатьиЗатрат.РасходыНаГСМ;
			движение.СуммаРасходов 	= строкаЗаправки.Стоимость;
		КонецЕсли;
		
		Если Не строкаЗаправки.ЗаправкаСтоимостьСмартКарта = 0 Тогда
			движение = Движения.ФинансовыйРезультат.Добавить();
			
			движение.Период 		= Дата;
			движение.Подразделение 	= Подразделение;
			движение.Объект		 	= Автомобиль;
			движение.СтатьяЗатрат 	= Справочники.СтатьиЗатрат.РасходыНаГСМ;
			движение.СуммаРасходов 	= строкаЗаправки.ЗаправкаСтоимостьСмартКарта;
			
			движение = Движения.ВзаиморасчетыСПоставщиками.ДобавитьРасход();
			движение.Период			= Дата;
			движение.Подразделение 	= Подразделение;
			движение.Контрагент		= Справочники.Контрагенты.НайтиПоКоду("F00023431");
			движение.Сумма			= строкаЗаправки.ЗаправкаСтоимостьСмартКарта;
			
		КонецЕсли;
		
	КонецЦикла;
		
	#Область ПоследовательностьЗапасы
	
	Если Не отказ Тогда
		
		запрос = Новый Запрос;
		
		#Область ТекстЗапроса
		
		запрос.Текст =
		"ВЫБРАТЬ
		|	СоставДокумента.Ссылка.Подразделение,
		|	СоставДокумента.ЗаправкаНоменклатура.Родитель.Склад КАК МестоХранения,
		|	СоставДокумента.ЗаправкаНоменклатура.Родитель.СчетУчета КАК СчетУчета
		|ИЗ
		|	Документ.ПутевойЛист.ЗаправочнаяВедомость КАК СоставДокумента
		|ГДЕ
		|	СоставДокумента.Ссылка = &Ссылка
		|	И СоставДокумента.ЗаправкаНоменклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	СоставДокумента.ЗаправкаНоменклатура.Родитель.СчетУчета,
		|	СоставДокумента.Ссылка.Подразделение,
		|	СоставДокумента.ЗаправкаНоменклатура.Родитель.Склад";
			
		#КонецОбласти 
		
		запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		результатЗапроса = запрос.Выполнить();
		
		ПринадлежностьПоследовательностям.Запасы.Загрузить(результатЗапроса.Выгрузить());
		
		отбор = Новый Структура ("Подразделение, МестоХранения, СчетУчета");
		
		выборка = результатЗапроса.Выбрать();
		Пока выборка.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(отбор, выборка);
			
			Последовательности.Запасы.УстановитьГраницу(МоментВремени(), отбор);
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти 
	
КонецПроцедуры

Процедура ПередЗаписью(отказ, режимЗаписи, режимПроведения)
	
	ПринадлежностьПоследовательностям.Запасы.Очистить();
	
	Если ОбменДанными.Загрузка Тогда
		// Обмен данными. Проверки не выполняем.
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПриКопировании(объектКопирования)
	
	ЗаполнениеОбъектовСервер.ЗаполнитьДанныеСкопированногоДокумента(ЭтотОбъект, объектКопирования);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(отказ, проверяемыеРеквизиты)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Пробег < 0 Тогда
		
		текстСообщения = НСтр("ru = 'Проведение документа невозможно с отрицательным пробегом.'");
		ПроверкаДанныхКлиентСервер.СообщитьОбОшибке(отказ, текстСообщения, ЭтотОбъект, "Пробег");
		
	КонецЕсли;
	
	Если Не ЗарплатаЭкспедитора = 0 И Экспедитор.Пустая() Тогда
		
		текстСообщения = НСтр("ru = 'Проведение документа невозможно без указания экспедитора.'");
		ПроверкаДанныхКлиентСервер.СообщитьОбОшибке(отказ, текстСообщения, ЭтотОбъект, "Экспедитор");
		
	КонецЕсли;
	
	Если Не Зарплата.Итог("Результат") = 0 Тогда
		проверяемыеРеквизиты.Добавить("Зарплата.Сотрудник");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 