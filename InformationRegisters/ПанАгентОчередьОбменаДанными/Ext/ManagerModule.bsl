
// Добавляет новое задание обмена в очередь. Задания с высоким приоритетом становятся
// активными сразу, а задания с обычным приоритетом будут активизированы согласно
// расписания регламентного задания "ПанАгентОбменДаннымиНормальныйПриоритет".
//
// Параметры:
//  агент  - СправочникСсылка.БПАГАгенты - Агент, по которому добавляется задание обмена.
//  профильОбменаДанными  - СправочникСсылка.ПанАгентПрофилиОбменаДанными - Профиль обмена,
//                 согласно которому должен быть выполнен обмен.
//  направлениеОбмена  - ПеречислениеСсылка.ПанАгентНаправленияОбменаДанными - Направление
//                 обмена: выгрузка или загрузка данных.
//  высокийПриоритет  - Булево - Истина: задание будет добавлено с высоким приоритетом;
//                 Ложь - с обычным приоритетом.
//
Процедура ДобавитьЗаданиеВОчередь(агент, профильОбменаДанными, направлениеОбмена, высокийПриоритет) Экспорт
	
	НачатьТранзакцию();
	
	менеджерЗаписи = ПрочитатьМенеджерЗаписиЗаданияОбмена(агент, профильОбменаДанными, направлениеОбмена);
	Если менеджерЗаписи.Выбран() Тогда
	
		Если Не менеджерЗаписи.ВысокийПриоритет
			И высокийПриоритет Тогда
			
			// Если задание уже есть в очереди, но у него обычный приоритет - установим
			// высокий приоритет.
			//// высокий приоритет и сразу активируем его.
			менеджерЗаписи.ВысокийПриоритет = Истина;
			//менеджерЗаписи.ЗаданиеАктивно = Истина;
			
			менеджерЗаписи.Записать();
			ЗафиксироватьТранзакцию();
			
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли; 
	
	Иначе
		
		// Добавляем новое задание в очередь.
		менеджерЗаписи.Агент = агент;
		менеджерЗаписи.ПрофильОбменаДанными = профильОбменаДанными;
		менеджерЗаписи.НаправлениеОбмена = направлениеОбмена;
		менеджерЗаписи.ДатаЗадания = ТекущаяДата();
		менеджерЗаписи.ВысокийПриоритет = высокийПриоритет;
		//менеджерЗаписи.ЗаданиеАктивно = высокийПриоритет;
	
		менеджерЗаписи.Записать();
		ЗафиксироватьТранзакцию();
		
	КонецЕсли; 

КонецПроцедуры // ДобавитьЗаданиеВОчередь()

// Удаляет задание обмена из очереди.
//
// Параметры:
//  агент  - СправочникСсылка.БПАГАгенты - Агент, по которому удаляется задание обмена.
//  профильОбменаДанными  - СправочникСсылка.ПанАгентПрофилиОбменаДанными - Профиль обмена,
//                 по которому удаляется задание обмена.
//  направлениеОбмена  - ПеречислениеСсылка.ПанАгентНаправленияОбменаДанными - Направление
//                 обмена, по которому удаляется задание обмена.
//
Процедура УдалитьЗаданиеИзОчереди(агент, профильОбменаДанными, направлениеОбмена) Экспорт

	НачатьТранзакцию();
	
	менеджерЗаписи = ПрочитатьМенеджерЗаписиЗаданияОбмена(агент, профильОбменаДанными, направлениеОбмена);
	
	Если менеджерЗаписи.Выбран() Тогда
		
		менеджерЗаписи.Удалить();
		ЗафиксироватьТранзакцию();
		
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли; 

КонецПроцедуры // УдалитьЗаданиеИзОчереди()

//// Активизирует все неактивные задания в очереди. Очередь обмена данными обрабатывает
//// только активные задания.
////
//Процедура АктивизироватьЗаданияОчереди() Экспорт
//	
//	НачатьТранзакцию();

//	выборка = РегистрыСведений.ПанАгентОчередьОбменаДанными.Выбрать(Новый Структура("ЗаданиеАктивно", Ложь));
//	Пока выборка.Следующий() Цикл
//	
//		менеджерЗаписи = выборка.ПолучитьМенеджерЗаписи();
//		менеджерЗаписи.ЗаданиеАктивно = Истина;
//		менеджерЗаписи.Записать();
//	
//	КонецЦикла; 
//	
//	ЗафиксироватьТранзакцию();

//КонецПроцедуры // АктивизироватьЗаданияОчереди()

// Считывает и возвращает задание обмена согласно параметрам отбора.
//
// Параметры:
//  агент  - СправочникСсылка.БПАГАгенты - Агент для отбора задания обмена.
//  профильОбменаДанными  - СправочникСсылка.ПанАгентПрофилиОбменаДанными - Профиль обмена
//                  для отбора задания обмена.
//  направлениеОбмена  - ПеречислениеСсылка.ПанАгентНаправленияОбменаДанными - Направление
//                 обмена для отбора задания обмена.
//
// Возвращаемое значение:
//   РегистрСведенийМенеджерЗаписи.ПанАгентОчередьОбменаДанными   - Считанный согласно
//                 параметрам отбора менеджер записи задания обмена.
//
Функция ПрочитатьМенеджерЗаписиЗаданияОбмена(агент, профильОбменаДанными, направлениеОбмена)

	блокировкаДанных = Новый БлокировкаДанных;
	
	элементБлокировки = блокировкаДанных.Добавить("РегистрСведений.ПанАгентОчередьОбменаДанными");
	элементБлокировки.УстановитьЗначение("Агент", агент);
	элементБлокировки.УстановитьЗначение("ПрофильОбменаДанными", профильОбменаДанными);
	элементБлокировки.УстановитьЗначение("НаправлениеОбмена", направлениеОбмена);
	элементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	
	блокировкаДанных.Заблокировать();

	менеджерЗаписи = РегистрыСведений.ПанАгентОчередьОбменаДанными.СоздатьМенеджерЗаписи();
	менеджерЗаписи.Агент = агент;
	менеджерЗаписи.ПрофильОбменаДанными = профильОбменаДанными;
	менеджерЗаписи.НаправлениеОбмена = направлениеОбмена;
	менеджерЗаписи.Прочитать();
	
	Возврат менеджерЗаписи;

КонецФункции // ПрочитатьМенеджерЗаписиЗаданияОбмена()

Процедура СформироватьОчередьОбменаДанными() Экспорт
	
	//РегистрыСведений.ПанАгентОчередьОбменаДанными.АктивизироватьЗаданияОчереди();
	//ЗапуститьВыполнениеОчередиОбменаДанными();
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПанАгентПравилаОбменаДаннымиАгенты.Агент,
	|	ПанАгентПравилаОбменаДаннымиАгенты.Ссылка.ПрофильОбменаДанными,
	|	ПанАгентПравилаОбменаДаннымиАгенты.Ссылка.НаправлениеОбмена
	|ИЗ
	|	Справочник.ПанАгентПравилаОбменаДанными.Агенты КАК ПанАгентПравилаОбменаДаннымиАгенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПанАгентОчередьОбменаДанными КАК ПанАгентОчередьОбменаДанными
	|		ПО ПанАгентПравилаОбменаДаннымиАгенты.Агент = ПанАгентОчередьОбменаДанными.Агент
	|			И ПанАгентПравилаОбменаДаннымиАгенты.Ссылка.ПрофильОбменаДанными = ПанАгентОчередьОбменаДанными.ПрофильОбменаДанными
	|			И ПанАгентПравилаОбменаДаннымиАгенты.Ссылка.НаправлениеОбмена = ПанАгентОчередьОбменаДанными.НаправлениеОбмена
	|ГДЕ
	|	НЕ ПанАгентПравилаОбменаДаннымиАгенты.Ссылка.ПометкаУдаления
	|	И ПанАгентПравилаОбменаДаннымиАгенты.Ссылка.Включено
	|	И ПанАгентОчередьОбменаДанными.Агент ЕСТЬ NULL ";
	#КонецОбласти
	
	результат = запрос.Выполнить();
	
	//блокировкаДанных = Новый БлокировкаДанных;
	//
	//элементБлокировки = блокировкаДанных.Добавить("РегистрСведений.ПанАгентОчередьОбменаДанными");
	//элементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	//элементБлокировки.ИсточникДанных = результат;
	//элементБлокировки.ИспользоватьИзИсточникаДанных("Агент", "Агент");
	//элементБлокировки.ИспользоватьИзИсточникаДанных("ПрофильОбменаДанными", "ПрофильОбменаДанными");
	//элементБлокировки.ИспользоватьИзИсточникаДанных("НаправлениеОбмена", "НаправлениеОбмена");
	//
	//блокировкаДанных.Заблокировать();
	
	выборка = результат.Выбрать();
	Пока выборка.Следующий() Цикл
	
		//менеджерЗаписи = РегистрыСведений.ПанАгентОчередьОбменаДанными.СоздатьМенеджерЗаписи();
		//ЗаполнитьЗначенияСвойств(менеджерЗаписи, выборка);
		//менеджерЗаписи.ДатаЗадания = ТекущаяДата();
		//менеджерЗаписи.Записать();
		
		РегистрыСведений.ПанАгентОчередьОбменаДанными.ДобавитьЗаданиеВОчередь(выборка.Агент, выборка.ПрофильОбменаДанными, выборка.НаправлениеОбмена, Ложь);
	
	КонецЦикла;
	
КонецПроцедуры