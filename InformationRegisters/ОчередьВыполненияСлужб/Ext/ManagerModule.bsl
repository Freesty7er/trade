
Процедура СформироватьОчередь() Экспорт
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	
	запрос.Текст =
	"ВЫБРАТЬ
	|	Служба.Ссылка КАК Документ,
	|	Служба.Расписание
	|ИЗ
	|	Документ.Служба КАК Служба
	|ГДЕ
	|	Служба.Проведен";
	
	#КонецОбласти
	
	результатЗапроса = запрос.Выполнить();
	
	выборка = результатЗапроса.Выбрать();
	Пока выборка.Следующий() Цикл
		
		датаНачалаПоследнегоЗапуска = Неопределено;
		датаЗавершенияПоследнегоЗапуска = Неопределено;
		
		// проверяем очередь
		// ПЕРЕДЕЛАТЬ: под общий запрос и блокировку, пока разбираемся записи очереди должны быть заблокированы
		
		НачатьТранзакцию();
		
		менеджерЗаписи = ПрочитатьМенеджерЗаписи(выборка.Документ);
		
		Если менеджерЗаписи.Выбран() Тогда
			
			Если менеджерЗаписи.Статус = Перечисления.СтатусыВыполненияСлужб.Выполняется Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			датаНачалаПоследнегоЗапуска = менеджерЗаписи.ДатаНачалаПоследнегоЗапуска;
			датаЗавершенияПоследнегоЗапуска = менеджерЗаписи.ДатаЗавершенияПоследнегоЗапуска;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		Если Справочники.Расписания.ТребуетсяВыполнение(выборка.Расписание, ТекущаяДатаСеанса(), датаНачалаПоследнегоЗапуска, датаЗавершенияПоследнегоЗапуска) Тогда
			ОбновитьЗаданиеВОчереди(выборка.Документ, Перечисления.СтатусыВыполненияСлужб.Ожидание);
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОчиститьОчередь() Экспорт
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	
	запрос.Текст =
	"ВЫБРАТЬ
	|	ОчередьВыполненияСлужб.Документ
	|ИЗ
	|	РегистрСведений.ОчередьВыполненияСлужб КАК ОчередьВыполненияСлужб
	|ГДЕ
	|	(ОчередьВыполненияСлужб.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияСлужб.ЗавершеноСОшибкой)
	|			ИЛИ ОчередьВыполненияСлужб.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияСлужб.Выполнено))";
	
	#КонецОбласти
	
	результатЗапроса = запрос.Выполнить();
	
	выборка = результатЗапроса.Выбрать();
	Пока выборка.Следующий() Цикл
		УдалитьЗаданиеИзОчереди(выборка.Документ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьОчередь() Экспорт
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	
	запрос.Текст =
	"ВЫБРАТЬ
	|	ОчередьВыполненияСлужб.Документ
	|ИЗ
	|	РегистрСведений.ОчередьВыполненияСлужб КАК ОчередьВыполненияСлужб
	|ГДЕ
	|	ОчередьВыполненияСлужб.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияСлужб.Ожидание)";
	
	#КонецОбласти
	
	результатЗапроса = запрос.Выполнить();
	
	выборка = результатЗапроса.Выбрать();
	Пока выборка.Следующий() Цикл
		ВыполнитьЗаданиеВОчереди(выборка.Документ);
	КонецЦикла;	
	
КонецПроцедуры

#Область ДополнительныеПроцедурыИФункции

// Функция - Прочитать менеджер записи
//
// Параметры:
//  документ - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПрочитатьМенеджерЗаписи(документ)
	
	блокировкаДанных = Новый БлокировкаДанных;
	
	элементБлокировки = блокировкаДанных.Добавить("РегистрСведений.ОчередьВыполненияСлужб");
	элементБлокировки.УстановитьЗначение("Документ", документ);
	элементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	
	блокировкаДанных.Заблокировать();
	
	менеджерЗаписи = РегистрыСведений.ОчередьВыполненияСлужб.СоздатьМенеджерЗаписи();
	менеджерЗаписи.Документ = документ;
	менеджерЗаписи.Прочитать();
	
	Возврат менеджерЗаписи;
	
КонецФункции // ПрочитатьМенеджерЗаписиЗаданияОбмена()

Процедура ОбновитьЗаданиеВОчереди(документ, статус) Экспорт
	
	НачатьТранзакцию();
	
	менеджерЗаписи = ПрочитатьМенеджерЗаписи(документ);
	
	Если менеджерЗаписи.Выбран() Тогда
		
		Если менеджерЗаписи.Статус = Перечисления.СтатусыВыполненияСлужб.Выполняется И
			// 2018.02.12 Карпачев А.Ю.
			//(статус <> Перечисления.СтатусыВыполненияСлужб.Выполнено Или статус <> Перечисления.СтатусыВыполненияСлужб.ЗавершеноСОшибкой) Тогда
			(статус <> Перечисления.СтатусыВыполненияСлужб.Выполнено И статус <> Перечисления.СтатусыВыполненияСлужб.ЗавершеноСОшибкой) Тогда
			// /2018.02.12 Карпачев А.Ю.
			// с "выполняется" можно менять только на "завершено"
			
			ОтменитьТранзакцию();
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		менеджерЗаписи.Документ = документ;
		менеджерЗаписи.ИдентификаторСлужбы = документ.УникальныйИдентификатор();
	КонецЕсли;
	
	менеджерЗаписи.Статус 	= статус;
	
	Если (статус = Перечисления.СтатусыВыполненияСлужб.Выполнено) Или (статус = Перечисления.СтатусыВыполненияСлужб.ЗавершеноСОшибкой) Тогда
		
		менеджерЗаписи.ДатаЗавершенияПоследнегоЗапуска = ТекущаяДатаСеанса();
		
	ИначеЕсли статус = Перечисления.СтатусыВыполненияСлужб.Ожидание Тогда
		
		менеджерЗаписи.ДатаНачалаПоследнегоЗапуска = ТекущаяДатаСеанса();
		
	КонецЕсли;
	
	менеджерЗаписи.Записать();
		
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ВыполнитьЗаданиеВОчереди(документ)
	
	НачатьТранзакцию();
	
	менеджерЗаписи = ПрочитатьМенеджерЗаписи(документ);
	
	Если менеджерЗаписи.Выбран() Тогда
		
		Если Не менеджерЗаписи.Статус = Перечисления.СтатусыВыполненияСлужб.Ожидание Тогда
			ОтменитьТранзакцию();
		Иначе
			менеджерЗаписи.Статус 	= Перечисления.СтатусыВыполненияСлужб.Выполняется;
			
			менеджерЗаписи.Записать();
			
			ЗафиксироватьТранзакцию();
			
			ключЗадания = менеджерЗаписи.Документ.УникальныйИдентификатор();
			активныеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Ключ,Состояние", ключЗадания, СостояниеФоновогоЗадания.Активно));
			
			параметрыЗадания = Новый Массив;
			параметрыЗадания.Добавить(менеджерЗаписи.Документ);
			
			Если активныеФоновыеЗадания.Количество() = 0 Тогда
				ФоновыеЗадания.Выполнить("ВыполнениеФоновыхЗаданийСервер.ВыполнитьСлужбу", параметрыЗадания, ключЗадания, НСтр("ru = 'Выполнение службы'"));
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Удалить задание из очереди
//
// Параметры:
//  документ - 	 - 
//
Процедура УдалитьЗаданиеИзОчереди(документ)
	
	НачатьТранзакцию();
	
	менеджерЗаписи = ПрочитатьМенеджерЗаписи(документ);
	
	Если менеджерЗаписи.Выбран() Тогда
		
		менеджерЗаписи.Удалить();
		ЗафиксироватьТранзакцию();
		
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти
