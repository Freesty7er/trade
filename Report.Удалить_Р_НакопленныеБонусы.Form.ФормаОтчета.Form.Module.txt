// Процедура - обработчик нажатия на кнопку "Сформировать".

&НаКлиенте
Процедура Сформировать(Команда)
	
	Если НЕ ЗначениеЗаполнено(Отчет.КонПериода) Тогда
		Предупреждение("Не задан конец периода", 5);
		Возврат;
	ИначеЕсли Отчет.НачПериода > Отчет.КонПериода Тогда
		Предупреждение("Начало периода больше конеца периода", 5);
		Возврат;
	КонецЕсли;
	
	СформироватьОтчет();
	
КонецПроцедуры


&НаСервере                                              
// Процедура формирует отчет на сервере.
//
Процедура СформироватьОтчет()

	УстановитьПривилегированныйРежим(Истина);
	ПолеТабличногоДокумента.Очистить();	
	Макет = Отчеты.Р_НакопленныеБонусы.ПолучитьМакет("Макет");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	Если ЗначениеЗаполнено(Отчет.НачПериода) Тогда
		ОбластьШапка.Параметры.ПериодОтчета = "Период с: " + Формат(Отчет.НачПериода, "ДФ=""дд.ММ.гггг ЧЧ:мм:сс""") + " по: " + Формат(Отчет.КонПериода, "ДФ=""дд.ММ.гггг ЧЧ:мм:сс""");
	Иначе
		ОбластьШапка.Параметры.ПериодОтчета = "Период по: " + Формат(Отчет.КонПериода, "ДФ=""дд.ММ.гггг ЧЧ:мм:сс""");
	КонецЕсли;
	ОбластьШапка.Параметры.ОтчетНапечатан = Формат(ТекущаяДата(), "ДФ=""дд.ММ.гггг ЧЧ:мм:сс");
	ПолеТабличногоДокумента.Вывести(ОбластьШапка);

	ТаблицаПорогов = Р_ОбщегоНазначения_ПОС.ПолучитьТаблицуПороговДляБонусов(Отчет.КонПериода);
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ИнформационныеКарты.Ссылка КАК ИнфоКарта,
	|	ИнформационныеКарты.Ссылка.КодКарты КАК Карта,
	|	ИнформационныеКарты.Ссылка.Р_ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	ИнформационныеКарты.Ссылка.Р_НомерЧекаРегистрации КАК НомерЧекаРегистрации,
	|	ИнформационныеКарты.ВладелецКарты,
	|	ПродажиПоБонуснымКартамОбороты.Регистратор КАК ПродажаБК,
	|	ПродажиПоБонуснымКартамОбороты.Регистратор.ККР КАК ККР,
	|	ПродажиПоБонуснымКартамОбороты.Регистратор.НомерЧека КАК НомерЧека,
	|	ПродажиПоБонуснымКартамОбороты.Регистратор.Дата КАК ДатаЧека,
	|	ПродажиПоБонуснымКартамОбороты.Регистратор.ПроцентБонусаПоЧеку КАК Процент,
	|	СУММА(ЕСТЬNULL(ПродажиПоБонуснымКартамОбороты.СуммаПродажиОборот, 0)) КАК СуммаПродаж,
	|	СУММА(ЕСТЬNULL(ПродажиПоБонуснымКартамОбороты.СуммаБонусовОборот, 0)) КАК СуммаБонусов,
	|	СУММА(ЕСТЬNULL(ПродажиПоБонуснымКартамОбороты.СуммаБонусовЗачисленоОборот, 0)) КАК БонусовЗачислено,
	|	СУММА(ЕСТЬNULL(ПродажиПоБонуснымКартамОбороты.СуммаБонусовСписаноОборот, 0)) КАК БонусовСписано,
	|	СУММА(ЕСТЬNULL(ПродажиПоБонуснымКартамОстаток.СуммаПродажиОборот, 0)) КАК ОстатокПродаж,
	|	СУММА(ЕСТЬNULL(ПродажиПоБонуснымКартамОстаток.СуммаБонусовОборот, 0)) КАК ОстатокБонусов,
	|	СУММА(ЕСТЬNULL(ПродажиПоБонуснымКартамОстатокНач.СуммаПродажиОборот, 0)) КАК ОстатокПродажиНач,
	|	СУММА(ЕСТЬNULL(ПродажиПоБонуснымКартамОстатокНач.СуммаБонусовОборот, 0)) КАК ОстатокБонусовНач
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Р_ПродажиПоБонуснымКартам.Обороты(&НачПериода, &КонПериода, Регистратор, ) КАК ПродажиПоБонуснымКартамОбороты
	|		ПО ИнформационныеКарты.Ссылка = ПродажиПоБонуснымКартамОбороты.ДисконтнаяКарта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Р_ПродажиПоБонуснымКартам.Обороты(, &КонПериода, Период, ) КАК ПродажиПоБонуснымКартамОстаток
	|		ПО ИнформационныеКарты.Ссылка = ПродажиПоБонуснымКартамОстаток.ДисконтнаяКарта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Р_ПродажиПоБонуснымКартам.Обороты(, &НачПериодаОст, Период, ) КАК ПродажиПоБонуснымКартамОстатокНач
	|		ПО ИнформационныеКарты.Ссылка = ПродажиПоБонуснымКартамОстатокНач.ДисконтнаяКарта
	|ГДЕ
	|	ИнформационныеКарты.Р_ВыгружатьНаПОС
	|	И ИнформационныеКарты.ТипКарты = ЗНАЧЕНИЕ(Перечисление.ТипыИнформационныхКарт.Р_Бонусная)
	|	//ЗначениеУсловия
	|	И ((ЕСТЬNULL(ПродажиПоБонуснымКартамОбороты.СуммаПродажиОборот, 0) <> 0) ИЛИ
	|	   (ЕСТЬNULL(ПродажиПоБонуснымКартамОстатокНач.СуммаПродажиОборот, 0) <> 0) ИЛИ
	|	   (ЕСТЬNULL(ПродажиПоБонуснымКартамОстатокНач.СуммаБонусовОборот, 0) <> 0))
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнформационныеКарты.Ссылка,
	|	ПродажиПоБонуснымКартамОбороты.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИнформационныеКарты.КодКарты,
	|	ПродажиПоБонуснымКартамОбороты.Регистратор.Дата
	|
	|ИТОГИ
	|	СУММА(СуммаПродаж),
	|	СУММА(СуммаБонусов),
	|	СУММА(БонусовЗачислено),
	|	СУММА(БонусовСписано),
	|	СРЕДНЕЕ(ОстатокПродаж),
	|	СРЕДНЕЕ(ОстатокБонусов),
	|	СРЕДНЕЕ(ОстатокПродажиНач),
	|	СРЕДНЕЕ(ОстатокБонусовНач)
	|ПО
	|	ИнформационныеКарты.Ссылка";
	
	Запрос.УстановитьПараметр("НачПериода", Отчет.НачПериода);
	Запрос.УстановитьПараметр("КонПериода", Отчет.КонПериода);
	Если ЗначениеЗаполнено(Отчет.НачПериода) Тогда
		Запрос.УстановитьПараметр("НачПериодаОст", Отчет.НачПериода);
	Иначе
		Запрос.УстановитьПараметр("НачПериодаОст", Дата(1, 1, 1, 0, 0, 1));
	КонецЕсли;
	
	тОтборКарта = ЗначениеЗаполнено(Отчет.ИнформационнаяКарта);
	Если тОтборКарта Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ЗначениеУсловия", "И ИнформационныеКарты.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Отчет.ИнформационнаяКарта);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	НПП = 0;
	НППЧек = 0;
	
	СуммаПродаж = 0;
	СуммаБонусов = 0;
	БонусовЗачислено = 0;
	БонусовСписано = 0;
	ОстатокПродаж = 0;
	ОстатокБонусов = 0;
	
	ОбластьКарта = Макет.ПолучитьОбласть("Строка");
	ОбластьЧек = Макет.ПолучитьОбласть("СтрокаЧек");
		
	ПолеТабличногоДокумента.НачатьАвтогруппировкуСтрок();
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		
		НПП = НПП + 1;
		
		ОбластьКарта.Параметры.НПП = НПП;
		
		ОстатокПродажКарта = Выборка.ОстатокПродажиНач;
		ОстатокБонусовКарта = Выборка.ОстатокБонусовНач;
		
		ЗаполнитьЗначенияСвойств(ОбластьКарта.Параметры, Выборка);
		
		СтрКарта = СокрЛП(Выборка.Карта);
		Если ЗначениеЗаполнено(Выборка.НомерЧекаРегистрации) Тогда
			СтрКарта = СтрКарта + ". (Рег. " + Формат(Выборка.ДатаНачалаДействия, "ДФ=""дд.ММ.гг""") + ", " + Выборка.НомерЧекаРегистрации + ")";
		ИначеЕсли ЗначениеЗаполнено(Выборка.ДатаНачалаДействия) Тогда
			СтрКарта = СтрКарта + ". (Нач. действ. " + Формат(Выборка.ДатаНачалаДействия, "ДФ=""дд.ММ.гг""") + ")";
		КонецЕсли;
		ОбластьКарта.Параметры.Карта = СтрКарта;
		
		СуммаПродаж = СуммаПродаж + Выборка.СуммаПродаж;
		СуммаБонусов = СуммаБонусов + Выборка.СуммаБонусов;
		БонусовЗачислено = БонусовЗачислено + Выборка.БонусовЗачислено;
		БонусовСписано = БонусовСписано + Выборка.БонусовСписано;
		ОстатокБонусов = ОстатокБонусов + Выборка.ОстатокБонусов;
		ОстатокПродаж = ОстатокПродаж + Выборка.ОстатокПродаж;
		
		ОбластьКарта.Параметры.Процент = Р_ОбщегоНазначения_ПОС.ПолучитьПроцентНачисленияБонусов(Выборка.ИнфоКарта, Отчет.КонПериода);
		
		ПолеТабличногоДокумента.Вывести(ОбластьКарта, 1, , Ложь);
		
		НППЧек = 0;
		
		ВыборкаЧек = Выборка.Выбрать();
		
		Пока ВыборкаЧек.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(ВыборкаЧек.ККР) Тогда
				Продолжить;
			КонецЕсли;
			
			НППЧек = НППЧек + 1;
			
			ОбластьЧек.Параметры.НППЧек = Строка(НПП) + "." + НППЧек;
			
			ЗаполнитьЗначенияСвойств(ОбластьЧек.Параметры, ВыборкаЧек);
			
			ОбластьЧек.Параметры.Чек = Строка(ВыборкаЧек.ККР) + ", чек № " + ВыборкаЧек.НомерЧека + " (" + Формат(ВыборкаЧек.ДатаЧека, "ДФ=""дд.ММ.гг ЧЧ:мм:сс""") + ")";
			
			ОстатокБонусовКарта = ОстатокБонусовКарта + ВыборкаЧек.СуммаБонусов;
			
			ОбластьЧек.Параметры.ОстатокБонусов = ОстатокБонусовКарта;
			
			ОстатокПродажКарта = ОстатокПродажКарта + ВыборкаЧек.СуммаПродаж;
			
			ОбластьЧек.Параметры.ОстатокПродаж = ОстатокПродажКарта;
			
			ПолеТабличногоДокумента.Вывести(ОбластьЧек, 2, , тОтборКарта);
			
		КонецЦикла
		
	КонецЦикла;
	
	ПолеТабличногоДокумента.ЗакончитьАвтогруппировкуСтрок();
	
	ОбластьИтого = Макет.ПолучитьОбласть("СтрокаИтого");
	ОбластьИтого.Параметры.СуммаПродаж = СуммаПродаж;
	ОбластьИтого.Параметры.СуммаБонусов = СуммаБонусов;
	ОбластьИтого.Параметры.БонусовЗачислено = БонусовЗачислено;
	ОбластьИтого.Параметры.БонусовСписано = БонусовСписано;
	ОбластьИтого.Параметры.ОстатокБонусов = ОстатокБонусов;
	ПолеТабличногоДокумента.Вывести(ОбластьИтого);
	
	ПолеТабличногоДокумента.Защита = Истина;
	
	ПолеТабличногоДокумента.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ПолеТабличногоДокумента.ПолеСлева = 5;
	ПолеТабличногоДокумента.ПолеСправа = 5;
	
	ПолеТабличногоДокумента.АвтоМасштаб = Истина;
	
	ПолеТабличногоДокумента.ОтображатьЗаголовки = Ложь;
	ПолеТабличногоДокумента.ОтображатьСетку = Ложь;

	
КонецПроцедуры


//Процедура КнопкаВыполнитьНажатие(Кнопка)
//	
//	ПолеТабличногоДокумента.Очистить();
//	
//	Макет = ПолучитьМакет("Макет");
//	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
//	Если ЗначениеЗаполнено(НачПериода) Тогда
//		ОбластьШапка.Параметры.ПериодОтчета = "Период с: " + Формат(НачПериода, "ДФ=""дд.ММ.гггг ЧЧ:мм:сс""") + " по: " + Формат(КонПериода, "ДФ=""дд.ММ.гггг ЧЧ:мм:сс""");
//	Иначе
//		ОбластьШапка.Параметры.ПериодОтчета = "Период по: " + Формат(КонПериода, "ДФ=""дд.ММ.гггг ЧЧ:мм:сс""");
//	КонецЕсли;
//	ОбластьШапка.Параметры.ОтчетНапечатан = Формат(ТекущаяДата(), "ДФ=""дд.ММ.гггг ЧЧ:мм:сс");
//	ПолеТабличногоДокумента.Вывести(ОбластьШапка);

//	ТаблицаПорогов = Р_ОбщегоНазначения_ПОС.ПолучитьТаблицуПороговДляБонусов(КонПериода);
//	
//	Запрос = Новый Запрос;
//	ТекстЗапроса = 
//	"ВЫБРАТЬ
//	|	ИнформационныеКарты.Ссылка КАК ИнфоКарта,
//	|	ИнформационныеКарты.Ссылка.КодКарты КАК Карта,
//	|	ИнформационныеКарты.Ссылка.Р_ДатаНачалаДействия КАК ДатаНачалаДействия,
//	|	ИнформационныеКарты.Ссылка.Р_НомерЧекаРегистрации КАК НомерЧекаРегистрации,
//	|	ИнформационныеКарты.ВладелецКарты,
//	|	ПродажиПоБонуснымКартамОбороты.Регистратор КАК ПродажаБК,
//	|	ПродажиПоБонуснымКартамОбороты.Регистратор.ККР КАК ККР,
//	|	ПродажиПоБонуснымКартамОбороты.Регистратор.НомерЧека КАК НомерЧека,
//	|	ПродажиПоБонуснымКартамОбороты.Регистратор.Дата КАК ДатаЧека,
//	|	ПродажиПоБонуснымКартамОбороты.Регистратор.ПроцентБонусаПоЧеку КАК Процент,
//	|	СУММА(ЕСТЬNULL(ПродажиПоБонуснымКартамОбороты.СуммаПродажиОборот, 0)) КАК СуммаПродаж,
//	|	СУММА(ЕСТЬNULL(ПродажиПоБонуснымКартамОбороты.СуммаБонусовОборот, 0)) КАК СуммаБонусов,
//	|	СУММА(ЕСТЬNULL(ПродажиПоБонуснымКартамОбороты.СуммаБонусовЗачисленоОборот, 0)) КАК БонусовЗачислено,
//	|	СУММА(ЕСТЬNULL(ПродажиПоБонуснымКартамОбороты.СуммаБонусовСписаноОборот, 0)) КАК БонусовСписано,
//	|	СУММА(ЕСТЬNULL(ПродажиПоБонуснымКартамОстаток.СуммаПродажиОборот, 0)) КАК ОстатокПродаж,
//	|	СУММА(ЕСТЬNULL(ПродажиПоБонуснымКартамОстаток.СуммаБонусовОборот, 0)) КАК ОстатокБонусов,
//	|	СУММА(ЕСТЬNULL(ПродажиПоБонуснымКартамОстатокНач.СуммаПродажиОборот, 0)) КАК ОстатокПродажиНач,
//	|	СУММА(ЕСТЬNULL(ПродажиПоБонуснымКартамОстатокНач.СуммаБонусовОборот, 0)) КАК ОстатокБонусовНач
//	|ИЗ
//	|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Р_ПродажиПоБонуснымКартам.Обороты(&НачПериода, &КонПериода, Регистратор, ) КАК ПродажиПоБонуснымКартамОбороты
//	|		ПО ИнформационныеКарты.Ссылка = ПродажиПоБонуснымКартамОбороты.ДисконтнаяКарта
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Р_ПродажиПоБонуснымКартам.Обороты(, &КонПериода, Период, ) КАК ПродажиПоБонуснымКартамОстаток
//	|		ПО ИнформационныеКарты.Ссылка = ПродажиПоБонуснымКартамОстаток.ДисконтнаяКарта
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Р_ПродажиПоБонуснымКартам.Обороты(, &НачПериодаОст, Период, ) КАК ПродажиПоБонуснымКартамОстатокНач
//	|		ПО ИнформационныеКарты.Ссылка = ПродажиПоБонуснымКартамОстатокНач.ДисконтнаяКарта
//	|ГДЕ
//	|	ИнформационныеКарты.Р_ВыгружатьНаПОС
//	|	И ИнформационныеКарты.ТипКарты = ЗНАЧЕНИЕ(Перечисление.ТипыИнформационныхКарт.Р_Бонусная)
//	|	//ЗначениеУсловия
//	|	И ((ЕСТЬNULL(ПродажиПоБонуснымКартамОбороты.СуммаПродажиОборот, 0) <> 0) ИЛИ
//	|	   (ЕСТЬNULL(ПродажиПоБонуснымКартамОстатокНач.СуммаПродажиОборот, 0) <> 0) ИЛИ
//	|	   (ЕСТЬNULL(ПродажиПоБонуснымКартамОстатокНач.СуммаБонусовОборот, 0) <> 0))
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ИнформационныеКарты.Ссылка,
//	|	ПродажиПоБонуснымКартамОбороты.Регистратор
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	ИнформационныеКарты.КодКарты,
//	|	ПродажиПоБонуснымКартамОбороты.Регистратор.Дата
//	|
//	|ИТОГИ
//	|	СУММА(СуммаПродаж),
//	|	СУММА(СуммаБонусов),
//	|	СУММА(БонусовЗачислено),
//	|	СУММА(БонусовСписано),
//	|	СРЕДНЕЕ(ОстатокПродаж),
//	|	СРЕДНЕЕ(ОстатокБонусов),
//	|	СРЕДНЕЕ(ОстатокПродажиНач),
//	|	СРЕДНЕЕ(ОстатокБонусовНач)
//	|ПО
//	|	ИнформационныеКарты.Ссылка";
//	
//	Запрос.УстановитьПараметр("НачПериода", НачПериода);
//	Запрос.УстановитьПараметр("КонПериода", КонПериода);
//	Если ЗначениеЗаполнено(НачПериода) Тогда
//		Запрос.УстановитьПараметр("НачПериодаОст", НачПериода);
//	Иначе
//		Запрос.УстановитьПараметр("НачПериодаОст", Дата(1, 1, 1, 0, 0, 1));
//	КонецЕсли;
//	
//	тОтборКарта = ЗначениеЗаполнено(ИнформационнаяКарта);
//	Если тОтборКарта Тогда
//		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ЗначениеУсловия", "И ИнформационныеКарты.Ссылка = &Ссылка");
//		Запрос.УстановитьПараметр("Ссылка", ИнформационнаяКарта);
//	КонецЕсли;
//	
//	Запрос.Текст = ТекстЗапроса;
//	
//	НПП = 0;
//	НППЧек = 0;
//	
//	СуммаПродаж = 0;
//	СуммаБонусов = 0;
//	БонусовЗачислено = 0;
//	БонусовСписано = 0;
//	ОстатокПродаж = 0;
//	ОстатокБонусов = 0;
//	
//	ОбластьКарта = Макет.ПолучитьОбласть("Строка");
//	ОбластьЧек = Макет.ПолучитьОбласть("СтрокаЧек");
//		
//	ПолеТабличногоДокумента.НачатьАвтогруппировкуСтрок();
//	
//	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//	Пока Выборка.Следующий() Цикл
//		
//		НПП = НПП + 1;
//		
//		ОбластьКарта.Параметры.НПП = НПП;
//		
//		ОстатокПродажКарта = Выборка.ОстатокПродажиНач;
//		ОстатокБонусовКарта = Выборка.ОстатокБонусовНач;
//		
//		ЗаполнитьЗначенияСвойств(ОбластьКарта.Параметры, Выборка);
//		
//		СтрКарта = СокрЛП(Выборка.Карта);
//		Если ЗначениеЗаполнено(Выборка.НомерЧекаРегистрации) Тогда
//			СтрКарта = СтрКарта + ". (Рег. " + Формат(Выборка.ДатаНачалаДействия, "ДФ=""дд.ММ.гг""") + ", " + Выборка.НомерЧекаРегистрации + ")";
//		ИначеЕсли ЗначениеЗаполнено(Выборка.ДатаНачалаДействия) Тогда
//			СтрКарта = СтрКарта + ". (Нач. действ. " + Формат(Выборка.ДатаНачалаДействия, "ДФ=""дд.ММ.гг""") + ")";
//		КонецЕсли;
//		ОбластьКарта.Параметры.Карта = СтрКарта;
//		
//		СуммаПродаж = СуммаПродаж + Выборка.СуммаПродаж;
//		СуммаБонусов = СуммаБонусов + Выборка.СуммаБонусов;
//		БонусовЗачислено = БонусовЗачислено + Выборка.БонусовЗачислено;
//		БонусовСписано = БонусовСписано + Выборка.БонусовСписано;
//		ОстатокБонусов = ОстатокБонусов + Выборка.ОстатокБонусов;
//		ОстатокПродаж = ОстатокПродаж + Выборка.ОстатокПродаж;
//		
//		ОбластьКарта.Параметры.Процент = Р_ОбщегоНазначения_ПОС.ПолучитьПроцентНачисленияБонусов(Выборка.ИнфоКарта, КонПериода);
//		
//		ПолеТабличногоДокумента.Вывести(ОбластьКарта, 1, , Ложь);
//		
//		НППЧек = 0;
//		
//		ВыборкаЧек = Выборка.Выбрать();
//		
//		Пока ВыборкаЧек.Следующий() Цикл
//			
//			Если НЕ ЗначениеЗаполнено(ВыборкаЧек.ККР) Тогда
//				Продолжить;
//			КонецЕсли;
//			
//			НППЧек = НППЧек + 1;
//			
//			ОбластьЧек.Параметры.НППЧек = Строка(НПП) + "." + НППЧек;
//			
//			ЗаполнитьЗначенияСвойств(ОбластьЧек.Параметры, ВыборкаЧек);
//			
//			ОбластьЧек.Параметры.Чек = Строка(ВыборкаЧек.ККР) + ", чек № " + ВыборкаЧек.НомерЧека + " (" + Формат(ВыборкаЧек.ДатаЧека, "ДФ=""дд.ММ.гг ЧЧ:мм:сс""") + ")";
//			
//			ОстатокБонусовКарта = ОстатокБонусовКарта + ВыборкаЧек.СуммаБонусов;
//			
//			ОбластьЧек.Параметры.ОстатокБонусов = ОстатокБонусовКарта;
//			
//			ОстатокПродажКарта = ОстатокПродажКарта + ВыборкаЧек.СуммаПродаж;
//			
//			ОбластьЧек.Параметры.ОстатокПродаж = ОстатокПродажКарта;
//			
//			ПолеТабличногоДокумента.Вывести(ОбластьЧек, 2, , тОтборКарта);
//			
//		КонецЦикла
//		
//	КонецЦикла;
//	
//	ПолеТабличногоДокумента.ЗакончитьАвтогруппировкуСтрок();
//	
//	ОбластьИтого = Макет.ПолучитьОбласть("СтрокаИтого");
//	ОбластьИтого.Параметры.СуммаПродаж = СуммаПродаж;
//	ОбластьИтого.Параметры.СуммаБонусов = СуммаБонусов;
//	ОбластьИтого.Параметры.БонусовЗачислено = БонусовЗачислено;
//	ОбластьИтого.Параметры.БонусовСписано = БонусовСписано;
//	ОбластьИтого.Параметры.ОстатокБонусов = ОстатокБонусов;
//	ПолеТабличногоДокумента.Вывести(ОбластьИтого);
//	
//	ПолеТабличногоДокумента.Защита = Истина;
//	
//	ПолеТабличногоДокумента.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
//	
//	ПолеТабличногоДокумента.ПолеСлева = 5;
//	ПолеТабличногоДокумента.ПолеСправа = 5;
//	
//	ПолеТабличногоДокумента.АвтоМасштаб = Истина;
//	
//	ПолеТабличногоДокумента.ОтображатьЗаголовки = Ложь;
//	ПолеТабличногоДокумента.ОтображатьСетку = Ложь;
//	
//КонецПроцедуры


Процедура КнопкаПериодНажатие(Элемент)
	//НастройкаПериода = Новый НастройкаПериода;
	//НастройкаПериода.УстановитьПериод(НачПериода, ?(КонПериода='0001-01-01', КонПериода, КонецДня(КонПериода)));
	//НастройкаПериода.РедактироватьКакИнтервал = Истина;
	//НастройкаПериода.РедактироватьКакПериод = Истина;
	//НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	//Если НастройкаПериода.Редактировать() Тогда
	//	НачПериода = НастройкаПериода.ПолучитьДатуНачала();
	//	КонПериода = НастройкаПериода.ПолучитьДатуОкончания();
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Отчет.НачПериода = НачалоДня(ТекущаяДата());
	Отчет.КонПериода = ТекущаяДата();
	
КонецПроцедуры
