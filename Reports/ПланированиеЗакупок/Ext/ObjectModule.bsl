
#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Расчёт данных.
	НастройкиОсновные = КомпоновщикНастроек.ПолучитьНастройки();
	
	ЗначениеПараметраПериодАнализаПродаж = НастройкиОсновные.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодАнализаПродаж"));
	ЗначениеПараметраПериодЗакупок = НастройкиОсновные.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодЗакупок"));
	ЗначениеПараметраПериодДатаНачалаЗакупок = НастройкиОсновные.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаНачалаЗакупок"));
	
	
	// Продажи.
	СхемаПродажи = ПолучитьМакет("Продажи");
	НастройкиПродажи = СхемаПродажи.НастройкиПоУмолчанию;
	
	ДобавитьПараметрыПериодаКомпоновкиДанных(НастройкиПродажи, ЗначениеПараметраПериодАнализаПродаж);
	ДобавитьОтборКомпоновкиДанных(НастройкиПродажи, НастройкиОсновные);
	
	тзПродажи = Новый ТаблицаЗначений;
	СкомпоноватьНаборДанных(СхемаПродажи, НастройкиПродажи, тзПродажи);
	
	// Дни продажи.
	СхемаДниПродажи = ПолучитьМакет("ДниПродажи");
	НастройкиДниПродажи = СхемаДниПродажи.НастройкиПоУмолчанию;
	
	ДобавитьПараметрыПериодаКомпоновкиДанных(НастройкиДниПродажи, ЗначениеПараметраПериодАнализаПродаж);
	ДобавитьОтборКомпоновкиДанных(НастройкиДниПродажи, НастройкиОсновные);
	
	дзДниПродажи = Новый ДеревоЗначений;
	СкомпоноватьНаборДанных(СхемаДниПродажи, НастройкиДниПродажи, дзДниПродажи);
	
	// Остатки на начало закупок.
	СхемаОстаткиНаНачалоЗакупок = ПолучитьМакет("ОстаткиНаНачалоЗакупок");
	НастройкиОстаткиНаНачалоЗакупок = СхемаОстаткиНаНачалоЗакупок.НастройкиПоУмолчанию;
	
	ЗначениеПараметраПериод = НастройкиОстаткиНаНачалоЗакупок.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	ЗначениеПараметраПериод.Значение = ЗначениеПараметраПериодДатаНачалаЗакупок.Значение;
	
	ДобавитьОтборКомпоновкиДанных(НастройкиОстаткиНаНачалоЗакупок, НастройкиОсновные);
	
	тзОстаткиНаНачалоЗакупок = Новый ТаблицаЗначений;
	СкомпоноватьНаборДанных(СхемаОстаткиНаНачалоЗакупок, НастройкиОстаткиНаНачалоЗакупок, тзОстаткиНаНачалоЗакупок);
	
	// Совокупные данные.
	КвалификаторКоличества = Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный);
	
	тзДанные = тзПродажи.Скопировать();
	тзДанные.Колонки.Добавить("ДнейПродажи", Новый ОписаниеТипов("Число"));
	тзДанные.Колонки.Добавить("ОстатокНаДатуНачалаЗакупок", Новый ОписаниеТипов("Число"));
	тзДанные.Колонки.Добавить("СредняяПродажаЗаДень", Новый ОписаниеТипов("Число", КвалификаторКоличества));
	тзДанные.Колонки.Добавить("ПланируемыйОбъёмПродаж", Новый ОписаниеТипов("Число", КвалификаторКоличества));
	тзДанные.Колонки.Добавить("НеобходимыйОбъёмЗакупки", Новый ОписаниеТипов("Число", КвалификаторКоличества));
	
	тзДанные.Индексы.Добавить("Номенклатура");
	тзДанные.Индексы.Добавить("Подразделение");
	тзДанные.Индексы.Добавить("Склад");
	
	#Область ДнейПродажи
	
	Для каждого СтрокаНоменклатура Из дзДниПродажи.Строки Цикл
		
		Для каждого СтрокаПодразделение Из СтрокаНоменклатура.Строки Цикл
			
			Для каждого СтрокаСклад Из СтрокаПодразделение.Строки Цикл
				
				ДнейПродажи = 0;
				
				Для каждого СтрокаПериод Из СтрокаСклад.Строки Цикл
					
					МинОстаток = ?(СтрокаПериод.Номенклатура.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.Шт, 2, 1);
					
					Если СтрокаПериод.КоличествоНачальныйОстаток > МинОстаток
						Или СтрокаПериод.КоличествоКонечныйОстаток > МинОстаток
						Или СтрокаПериод.КоличествоПриход <> 0
						Или СтрокаПериод.КоличествоРасход <> 0 Тогда
					
						ДнейПродажи = ДнейПродажи + 1;
					
					КонецЕсли;
					
				КонецЦикла; 
				
				Если ДнейПродажи > 0 Тогда
					
					СтрокаДанные = ПолучитьСтрокуДанныхПоОтбору(тзДанные, СтрокаСклад);
					СтрокаДанные.ДнейПродажи = ДнейПродажи;
				
				КонецЕсли; 
				
			КонецЦикла; 
			
		КонецЦикла; 
		
	КонецЦикла; 
	
	#КонецОбласти
	
	#Область ОстатокНаДатуНачалаЗакупок
	
	Для каждого СтрокаОстаткиНаНачалоЗакупок Из тзОстаткиНаНачалоЗакупок Цикл
	
		СтрокаДанные = ПолучитьСтрокуДанныхПоОтбору(тзДанные, СтрокаОстаткиНаНачалоЗакупок);
		СтрокаДанные.ОстатокНаДатуНачалаЗакупок = СтрокаОстаткиНаНачалоЗакупок.ОстатокНаДатуНачалаЗакупок;
	
	КонецЦикла; 
	
	#КонецОбласти
	
	КоличествоСекундВСутках = 86400;
	НачалоПериода = ЗначениеПараметраПериодЗакупок.Значение.ДатаНачала;
	КонецПериода = НачалоДня(ЗначениеПараметраПериодЗакупок.Значение.ДатаОкончания);
	КоличествоДнейПериода = (КонецПериода - НачалоПериода) / КоличествоСекундВСутках + 1;
	
	РабочаяНеделя = НастройкиОсновные.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("РабочаяНеделя")).Значение;
	Если РабочаяНеделя = 7 Тогда
		КоличествоРабочихДнейПериода = КоличествоДнейПериода;
	Иначе
	
		КоличествоРабочихДнейПериода = 0;
		ДеньПериода = НачалоПериода;
		Пока ДеньПериода <= КонецПериода Цикл
			
			Если ДеньНедели(ДеньПериода) <= РабочаяНеделя Тогда
				КоличествоРабочихДнейПериода = КоличествоРабочихДнейПериода + 1;
			КонецЕсли; 
			ДеньПериода = ДеньПериода + КоличествоСекундВСутках;
			
		КонецЦикла; 
	
	КонецЕсли; 
	
	Для каждого СтрокаДанные Из тзДанные Цикл
		
		Если СтрокаДанные.Продано = Неопределено Тогда
			СтрокаДанные.Продано = 0;
		КонецЕсли; 
		
		СтрокаДанные.СредняяПродажаЗаДень = ?(СтрокаДанные.ДнейПродажи = 0, 0, СтрокаДанные.Продано / СтрокаДанные.ДнейПродажи);
		СтрокаДанные.ПланируемыйОбъёмПродаж = СтрокаДанные.СредняяПродажаЗаДень * КоличествоРабочихДнейПериода;
		СтрокаДанные.НеобходимыйОбъёмЗакупки = СтрокаДанные.ПланируемыйОбъёмПродаж - СтрокаДанные.ОстатокНаДатуНачалаЗакупок;
	
	КонецЦикла; 
	
	// Компонуем отчёт.
	
	// Сначала выведем настройки отчёта.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОсновные);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	// Потом непосредственно данные отчёта.
	СхемаКомпоновкиДанныхВыводРезультата = ПолучитьМакет("ВыводРезультата");
	
	// Установим макет оформления.
	ПараметрМакетОформления = Новый ПараметрКомпоновкиДанных("МакетОформления");
	ПараметрВыводаМакетОформления = НастройкиОсновные.ПараметрыВывода.НайтиЗначениеПараметра(ПараметрМакетОформления);
	
	НастройкиВыводРезультата = СхемаКомпоновкиДанныхВыводРезультата.НастройкиПоУмолчанию;
	ПараметрВыводаМакетОформленияВыводРезультата = НастройкиВыводРезультата.ПараметрыВывода.НайтиЗначениеПараметра(ПараметрМакетОформления);
	ПараметрВыводаМакетОформленияВыводРезультата.Значение = ПараметрВыводаМакетОформления.Значение;
	ПараметрВыводаМакетОформленияВыводРезультата.Использование = ПараметрВыводаМакетОформления.Использование;
	
	стВнешниеНаборыДанных = Новый Структура;
	стВнешниеНаборыДанных.Вставить("Данные", тзДанные);
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанныхВыводРезультата, НастройкиВыводРезультата, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, стВнешниеНаборыДанных, ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеПроцедурыИФункции

// Добавляет в настройки исполняемой схемы компоновки данных значения параметров начала и
// конца периода формирования данных.
//
// Параметры:
//  ЦелевыеНастройки  - НастройкиКомпоновкиДанных - Настройки компоновки данных, в которых
//                 будут установлены значения параметров периода формирования данных.
//  ЗначениеПараметраПериод  - ЗначениеПараметраНастроекКомпоновкиДанных - Исходное значение
//                 параметра периода.
//
Процедура ДобавитьПараметрыПериодаКомпоновкиДанных(ЦелевыеНастройки, ЗначениеПараметраПериод)

	ЗначениеПараметраНачалоПериода = ЦелевыеНастройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	ЗначениеПараметраНачалоПериода.Значение = ЗначениеПараметраПериод.Значение.ДатаНачала;
	
	ЗначениеПараметраКонецПериода = ЦелевыеНастройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	ЗначениеПараметраКонецПериода.Значение = ЗначениеПараметраПериод.Значение.ДатаОкончания;

КонецПроцедуры // ДобавитьПараметрыПериодаКомпоновкиДанных()

// В настройки исполняемой схемы компоновки данных добавляет отборы из исходных настроек.
//
// Параметры:
//  ЦелевыеНастройки  - НастройкиКомпоновкиДанных - Настройки компоновки данных, в которые
//                 будут добавлены отборы.
//  ИсходныеНастройки  - НастройкиКомпоновкиДанных - Настройки компоновки данных, из которых
//                 будут скопированы отборы.
//
Процедура ДобавитьОтборКомпоновкиДанных(ЦелевыеНастройки, ИсходныеНастройки)

	Для каждого ЭлементОтбора Из ИсходныеНастройки.Отбор.Элементы Цикл
	
		НовыйЭлементОтбора = ЦелевыеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора,, "ИдентификаторПользовательскойНастройки");
	
	КонецЦикла; 

КонецПроцедуры // ДобавитьОтборКомпоновкиДанных()

// Выполняет непосредственную компоновку данных для получения результата по указанной
// схеме компоновки.
//
// Параметры:
//  Схема  - СхемаКомпоновкиДанных - На основании указанной схемы будут сформированы данные.
//  Настройки  - НастройкиКомпоновкиДанных - Настройки для применения со схемой компоновки.
//  КоллекцияДанных  - ТаблицаЗначений, ДеревоЗначений - Коллекция данных, в которую будут выгружены
//                 скомпонованные данные.
//
Процедура СкомпоноватьНаборДанных(Схема, Настройки, КоллекцияДанных)

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(КоллекцияДанных);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);

КонецПроцедуры // СкомпоноватьНаборДанных()

// Возвращает строку таблицы тзДанные согласно отбору по данным строки для отбора. Строка
// для отбора и сама таблица должны содержать следующие поля: Номенклатура, Подразделение,
// Склад. Если строка не будет найдена, будет создана новая строка и заполнена по данным отбора.
//
// Параметры:
//  тзДанные  - ТаблицаЗначений - Таблица значений, строка которой должна быть возвращена.
//  СтрокаДляОтбора  - СтрокаДереваЗначений, СтрокаТаблицыЗначений - Строка коллекции значений,
//                 служащая источником данных для отбора.
//
// Возвращаемое значение:
//   СтрокаТаблицыЗначений   - Строка таблицы значений по указанному отбору.
//
Функция ПолучитьСтрокуДанныхПоОтбору(тзДанные, СтрокаДляОтбора)

	стОтбор = Новый Структура("Номенклатура,Подразделение,Склад");
	ЗаполнитьЗначенияСвойств(стОтбор, СтрокаДляОтбора);
	
	мСтроки = тзДанные.НайтиСтроки(стОтбор);
	Если мСтроки.Количество() = 0 Тогда
		
		СтрокаДанные = тзДанные.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанные, стОтбор);
		
	Иначе
		СтрокаДанные = мСтроки[0];
	КонецЕсли; 
	
	Возврат СтрокаДанные;

КонецФункции // ПолучитьСтрокуДанныхПоОтбору()

#КонецОбласти