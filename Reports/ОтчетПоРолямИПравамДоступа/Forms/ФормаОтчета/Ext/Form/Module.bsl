
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДеревоОбъектовМетаданныхЭлементы = ДеревоОбъектовМетаданных.ПолучитьЭлементы();
	ДеревоОбъектовМетаданныхКонфигурацияГруппа = ДеревоОбъектовМетаданныхЭлементы.Добавить();
	ДеревоОбъектовМетаданныхКонфигурацияГруппаЭлементы = ДеревоОбъектовМетаданныхКонфигурацияГруппа.ПолучитьЭлементы();
	
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа = ДеревоОбъектовМетаданныхКонфигурацияГруппаЭлементы.Добавить();
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа.Картинка = БиблиотекаКартинок.Справочник;
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа.Представление = "Справочники";
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа.ОбъектМетаданныхГруппа = "Справочники";
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппаЭлементы = ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа.ПолучитьЭлементы();
	Для Каждого справочник Из Метаданные.Справочники Цикл
		ОбъектМетеданныхСписокВыбора.Добавить("Справочники." + справочник.Имя,справочник.Синоним,,БиблиотекаКартинок.Справочник);
		ДеревоОбъектовМетаданныхОбъектМетаданных = ДеревоОбъектовМетаданныхОбъектМетаданныхГруппаЭлементы.Добавить();
		ДеревоОбъектовМетаданныхОбъектМетаданных.Картинка = БиблиотекаКартинок.СправочникОбъект;
		ДеревоОбъектовМетаданныхОбъектМетаданных.Представление = справочник.Синоним;
		ДеревоОбъектовМетаданныхОбъектМетаданных.ОбъектМетаданныхГруппа = "Справочники";
		ДеревоОбъектовМетаданныхОбъектМетаданных.ОбъектМетаданных = справочник.Имя;
		ДеревоОбъектовМетаданныхОбъектМетаданных.ОбъектМетаданныхСиноним = справочник.Синоним;
	КонецЦикла;
	
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа = ДеревоОбъектовМетаданныхКонфигурацияГруппаЭлементы.Добавить();
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа.Картинка = БиблиотекаКартинок.Документ;
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа.Представление = "Документы";
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа.ОбъектМетаданныхГруппа = "Документы";
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппаЭлементы = ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа.ПолучитьЭлементы();
	Для Каждого документ Из Метаданные.Документы Цикл
		ОбъектМетеданныхСписокВыбора.Добавить("Документы." + документ.Имя,документ.Синоним,,БиблиотекаКартинок.Документ);
		ДеревоОбъектовМетаданныхОбъектМетаданных = ДеревоОбъектовМетаданныхОбъектМетаданныхГруппаЭлементы.Добавить();
		ДеревоОбъектовМетаданныхОбъектМетаданных.Картинка = БиблиотекаКартинок.ДокументОбъект;
		ДеревоОбъектовМетаданныхОбъектМетаданных.Представление = документ.Синоним;
		ДеревоОбъектовМетаданныхОбъектМетаданных.ОбъектМетаданныхГруппа = "Документы";
		ДеревоОбъектовМетаданныхОбъектМетаданных.ОбъектМетаданных = документ.Имя;
		ДеревоОбъектовМетаданныхОбъектМетаданных.ОбъектМетаданныхСиноним = документ.Синоним;
	КонецЦикла;
	
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа = ДеревоОбъектовМетаданныхКонфигурацияГруппаЭлементы.Добавить();
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа.Картинка = БиблиотекаКартинок.Отчет;
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа.Представление = "Отчеты";
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа.ОбъектМетаданныхГруппа = "Отчеты";
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппаЭлементы = ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа.ПолучитьЭлементы();
	Для Каждого отчет_ Из Метаданные.Отчеты Цикл
		ОбъектМетеданныхСписокВыбора.Добавить("Отчеты." + отчет_.Имя,отчет_.Синоним,,БиблиотекаКартинок.Отчет);
		ДеревоОбъектовМетаданныхОбъектМетаданных = ДеревоОбъектовМетаданныхОбъектМетаданныхГруппаЭлементы.Добавить();
		ДеревоОбъектовМетаданныхОбъектМетаданных.Картинка = БиблиотекаКартинок.Отчет;
		ДеревоОбъектовМетаданныхОбъектМетаданных.Представление = отчет_.Синоним;
		ДеревоОбъектовМетаданныхОбъектМетаданных.ОбъектМетаданныхГруппа = "Отчеты";
		ДеревоОбъектовМетаданныхОбъектМетаданных.ОбъектМетаданных = отчет_.Имя;
		ДеревоОбъектовМетаданныхОбъектМетаданных.ОбъектМетаданныхСиноним = отчет_.Синоним;
	КонецЦикла;
	
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа = ДеревоОбъектовМетаданныхКонфигурацияГруппаЭлементы.Добавить();
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа.Картинка = БиблиотекаКартинок.Обработка;
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа.Представление = "Обработки";
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа.ОбъектМетаданныхГруппа = "Обработки";
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппаЭлементы = ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа.ПолучитьЭлементы();
	Для Каждого обработка Из Метаданные.Обработки Цикл
		ОбъектМетеданныхСписокВыбора.Добавить("Обработки." + обработка.Имя,обработка.Синоним,,БиблиотекаКартинок.Обработка);
		ДеревоОбъектовМетаданныхОбъектМетаданных = ДеревоОбъектовМетаданныхОбъектМетаданныхГруппаЭлементы.Добавить();
		ДеревоОбъектовМетаданныхОбъектМетаданных.Картинка = БиблиотекаКартинок.Обработка;
		ДеревоОбъектовМетаданныхОбъектМетаданных.Представление = обработка.Синоним;
		ДеревоОбъектовМетаданныхОбъектМетаданных.ОбъектМетаданныхГруппа = "Обработки";
		ДеревоОбъектовМетаданныхОбъектМетаданных.ОбъектМетаданных = обработка.Имя;
		ДеревоОбъектовМетаданныхОбъектМетаданных.ОбъектМетаданныхСиноним = обработка.Синоним;
	КонецЦикла;
	
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа = ДеревоОбъектовМетаданныхКонфигурацияГруппаЭлементы.Добавить();
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа.Картинка = БиблиотекаКартинок.РегистрСведений;
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа.Представление = "Регистры сведений";
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа.ОбъектМетаданныхГруппа = "РегистрыСведений";
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппаЭлементы = ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа.ПолучитьЭлементы();
	Для Каждого регистрСведений Из Метаданные.РегистрыСведений Цикл
		ОбъектМетеданныхСписокВыбора.Добавить("РегистрыСведений." + регистрСведений.Имя,регистрСведений.Синоним,,БиблиотекаКартинок.РегистрСведений);
		ДеревоОбъектовМетаданныхОбъектМетаданных = ДеревоОбъектовМетаданныхОбъектМетаданныхГруппаЭлементы.Добавить();
		ДеревоОбъектовМетаданныхОбъектМетаданных.Картинка = БиблиотекаКартинок.РегистрСведений;
		ДеревоОбъектовМетаданныхОбъектМетаданных.Представление = регистрСведений.Синоним;
		ДеревоОбъектовМетаданныхОбъектМетаданных.ОбъектМетаданныхГруппа = "РегистрыСведений";
		ДеревоОбъектовМетаданныхОбъектМетаданных.ОбъектМетаданных = регистрСведений.Имя;
		ДеревоОбъектовМетаданныхОбъектМетаданных.ОбъектМетаданныхСиноним = регистрСведений.Синоним;
	КонецЦикла;
	
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа = ДеревоОбъектовМетаданныхКонфигурацияГруппаЭлементы.Добавить();
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа.Картинка = БиблиотекаКартинок.РегистрНакопления;
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа.Представление = "Регистры накопления";
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа.ОбъектМетаданныхГруппа = "РегистрыНакопления";
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппаЭлементы = ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа.ПолучитьЭлементы();
	Для Каждого регистрНакопления Из Метаданные.РегистрыНакопления Цикл
		ОбъектМетеданныхСписокВыбора.Добавить("РегистрыНакопления." + регистрНакопления.Имя,регистрНакопления.Синоним,,БиблиотекаКартинок.РегистрНакопления);
		ДеревоОбъектовМетаданныхОбъектМетаданных = ДеревоОбъектовМетаданныхОбъектМетаданныхГруппаЭлементы.Добавить();
		ДеревоОбъектовМетаданныхОбъектМетаданных.Картинка = БиблиотекаКартинок.РегистрНакопления;
		ДеревоОбъектовМетаданныхОбъектМетаданных.Представление = регистрНакопления.Синоним;
		ДеревоОбъектовМетаданныхОбъектМетаданных.ОбъектМетаданныхГруппа = "РегистрыНакопления";
		ДеревоОбъектовМетаданныхОбъектМетаданных.ОбъектМетаданных = регистрНакопления.Имя;
		ДеревоОбъектовМетаданныхОбъектМетаданных.ОбъектМетаданныхСиноним = регистрНакопления.Синоним;
	КонецЦикла;
	
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа = ДеревоОбъектовМетаданныхКонфигурацияГруппаЭлементы.Добавить();
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа.Картинка = БиблиотекаКартинок.БизнесПроцесс;
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа.Представление = "Бизнес процессы";
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа.ОбъектМетаданныхГруппа = "БизнесПроцессы";
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппаЭлементы = ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа.ПолучитьЭлементы();
	Для Каждого бизнесПроцесс Из Метаданные.БизнесПроцессы Цикл
		ОбъектМетеданныхСписокВыбора.Добавить("БизнесПроцессы." + бизнесПроцесс.Имя,бизнесПроцесс.Синоним,,БиблиотекаКартинок.БизнесПроцесс);
		ДеревоОбъектовМетаданныхОбъектМетаданных = ДеревоОбъектовМетаданныхОбъектМетаданныхГруппаЭлементы.Добавить();
		ДеревоОбъектовМетаданныхОбъектМетаданных.Картинка = БиблиотекаКартинок.БизнесПроцессОбъект;
		ДеревоОбъектовМетаданныхОбъектМетаданных.Представление = бизнесПроцесс.Синоним;
		ДеревоОбъектовМетаданныхОбъектМетаданных.ОбъектМетаданныхГруппа = "БизнесПроцессы";
		ДеревоОбъектовМетаданныхОбъектМетаданных.ОбъектМетаданных = бизнесПроцесс.Имя;
		ДеревоОбъектовМетаданныхОбъектМетаданных.ОбъектМетаданныхСиноним = бизнесПроцесс.Синоним;
	КонецЦикла;
	
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа = ДеревоОбъектовМетаданныхКонфигурацияГруппаЭлементы.Добавить();
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа.Картинка = БиблиотекаКартинок.Задача;
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа.Представление = "Задачи";
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа.ОбъектМетаданныхГруппа = "Задачи";
	ДеревоОбъектовМетаданныхОбъектМетаданныхГруппаЭлементы = ДеревоОбъектовМетаданныхОбъектМетаданныхГруппа.ПолучитьЭлементы();
	Для Каждого задача Из Метаданные.Задачи Цикл
		ОбъектМетеданныхСписокВыбора.Добавить("Задачи." + задача.Имя,задача.Синоним,,БиблиотекаКартинок.Задача);
		ДеревоОбъектовМетаданныхОбъектМетаданных = ДеревоОбъектовМетаданныхОбъектМетаданныхГруппаЭлементы.Добавить();
		ДеревоОбъектовМетаданныхОбъектМетаданных.Картинка = БиблиотекаКартинок.ЗадачаОбъект;
		ДеревоОбъектовМетаданныхОбъектМетаданных.Представление = задача.Синоним;
		ДеревоОбъектовМетаданныхОбъектМетаданных.ОбъектМетаданныхГруппа = "Задачи";
		ДеревоОбъектовМетаданныхОбъектМетаданных.ОбъектМетаданных = задача.Имя;
		ДеревоОбъектовМетаданныхОбъектМетаданных.ОбъектМетаданныхСиноним = задача.Синоним;
	КонецЦикла;
	
	списокВыбора = Новый Массив;
	Для Каждого элемент Из ОбъектМетеданныхСписокВыбора Цикл
		списокВыбора.Добавить(элемент.Значение);
	КонецЦикла;
	
	Элементы.ОбъектМетаданных.СписокВыбора.ЗагрузитьЗначения(списокВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Элементы.ДеревоОбъектовМетаданных.Развернуть(0,Ложь);
КонецПроцедуры

&НаСервере
Процедура КомандаПоказатьНаСервере(табДок)
	
	объектМетаданныхСтроки = СтрЗаменить(ОбъектМетаданных,".",Символы.ПС);
	
	праваДоступа = ПолучитьПраваДоступаПоОбъектМетаданныхГруппа(СтрПолучитьСтроку(объектМетаданныхСтроки,1));
	
	Для Каждого роль Из Метаданные.Роли Цикл
		Для Каждого правоДоступа Из праваДоступа Цикл
			новыйСтрокаСлужебнаяВыборка = СлужебнаяВыборка.Добавить();
			новыйСтрокаСлужебнаяВыборка.Роль = роль.Имя;
			новыйСтрокаСлужебнаяВыборка.РольСиноним = Роль.Синоним;
			новыйСтрокаСлужебнаяВыборка.КонфигурацияГруппа = "";
			новыйСтрокаСлужебнаяВыборка.ОбъектМетаданныхГруппа = СтрПолучитьСтроку(объектМетаданныхСтроки,1);
			новыйСтрокаСлужебнаяВыборка.ОбъектМетаданных = СтрПолучитьСтроку(объектМетаданныхСтроки,2);
			новыйСтрокаСлужебнаяВыборка.ПравоДоступа = правоДоступа.Значение;
			новыйСтрокаСлужебнаяВыборка.Право = правоДоступа(правоДоступа.Значение,Метаданные[СтрПолучитьСтроку(объектМетаданныхСтроки,1)][СтрПолучитьСтроку(объектМетаданныхСтроки,2)],Роль);
		КонецЦикла;
	КонецЦикла;
	
	запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	запрос.Текст = 
	"ВЫБРАТЬ
	|	Выборка.Роль,
	|	Выборка.РольСиноним,
	|	Выборка.КонфигурацияГруппа,
	|	Выборка.ОбъектМетаданныхГруппа,
	|	Выборка.ОбъектМетаданных,
	|	Выборка.ПравоДоступа,
	|	ВЫРАЗИТЬ(Выборка.Право КАК БУЛЕВО) КАК Право
	|ПОМЕСТИТЬ вт_Выборка
	|ИЗ
	|	&Выборка КАК Выборка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Выборка.Роль,
	|	вт_Выборка.РольСиноним,
	|	вт_Выборка.КонфигурацияГруппа,
	|	вт_Выборка.ОбъектМетаданныхГруппа,
	|	вт_Выборка.ОбъектМетаданных,
	|	вт_Выборка.ПравоДоступа,
	|	вт_Выборка.Право
	|ИЗ
	|	вт_Выборка КАК вт_Выборка
	|ГДЕ
	|	Право";
	#КонецОбласти
	
	запрос.УстановитьПараметр("Выборка",СлужебнаяВыборка.Выгрузить());
	
	результатЗапроса = запрос.Выполнить().Выгрузить();
	
	отчетОбъект = РеквизитФормыВЗначение("Отчет");
	макет = отчетОбъект.ПолучитьМакет("Макет");
	
	роли = результатЗапроса.Скопировать();
	роли.Свернуть("Роль,РольСиноним","");
	
	табДок.Очистить();
	
	табДок.НачатьАвтогруппировкуСтрок();
	
	уровень = 1;
	
	#Область шапкаРолиПраваДоступа
	
	областьШапка = макет.ПолучитьОбласть("шапка|роль");
	областьШапка.Параметры.ОбъектМетаданных = ОбъектМетаданных;
	
	табДок.Вывести(областьШапка,уровень);
	
	Для Каждого правоДоступа Из праваДоступа Цикл
		
		областьШапкаПравоДоступа = макет.ПолучитьОбласть("шапка|правоДоступа");
		областьШапкаПравоДоступа.Параметры.правоДоступа = правоДоступа.Представление;
		
		табДок.Присоединить(областьШапкаПравоДоступа);
		
	КонецЦикла;
	
	#КонецОбласти
	
	#Область отчетРолиПраваДоступа
	
	Для Каждого роль Из роли Цикл
		
		областьСтрока = макет.ПолучитьОбласть("Строка|роль");
		областьСтрока.Параметры.роль = роль.РольСиноним;
		
		табДок.Вывести(областьСтрока,уровень);
		
		Для Каждого правоДоступа Из праваДоступа Цикл
			
			областьСтрокаПравоДоступа = макет.ПолучитьОбласть("строка|правоДоступа");
			
			ВыборкаСтроки = результатЗапроса.НайтиСтроки(Новый Структура("КонфигурацияГруппа,ОбъектМетаданныхГруппа,ОбъектМетаданных,Роль,ПравоДоступа","",СтрПолучитьСтроку(объектМетаданныхСтроки,1),СтрПолучитьСтроку(объектМетаданныхСтроки,2),роль.Роль,правоДоступа.Значение));
			Если ВыборкаСтроки.Количество() > 0 Тогда
				областьСтрокаПравоДоступа.Параметры.право = "Х";
			КонецЕсли;
			
			табДок.Присоединить(областьСтрокаПравоДоступа);
			
		КонецЦикла;
		
	КонецЦикла;
	
	#КонецОбласти
	
	пользователиРоли = Новый ТаблицаЗначений;
	пользователиРоли.Колонки.Добавить("Пользователь",Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	пользователиРоли.Колонки.Добавить("ПрофильПользователя",Новый ОписаниеТипов("СправочникСсылка.ПрофилиПользователей"));
	пользователиРоли.Колонки.Добавить("Роль");
	
	пользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Для Каждого роль Из роли Цикл
		Для Каждого пользовательИБ Из пользователиИБ Цикл
			Если пользовательИБ.Роли.Содержит(Метаданные.Роли[роль.роль]) Тогда
				пользовательСсылка = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ",пользовательИБ.УникальныйИдентификатор);
				НовыйСтрокаПользователиРоли = пользователиРоли.Добавить();
				НовыйСтрокаПользователиРоли.Пользователь = пользовательСсылка;
				НовыйСтрокаПользователиРоли.ПрофильПользователя = пользовательСсылка.ПрофильПользователя;
				НовыйСтрокаПользователиРоли.Роль = роль.РольСиноним
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	пользователиСписок = пользователиРоли.Скопировать();
	пользователиСписок.Свернуть("Пользователь,ПрофильПользователя","");
	
	#Область шапкаРолиПользователи
	
	областьШапка = макет.ПолучитьОбласть("шапкаРолиПользователи|роль");
	табДок.Вывести(областьШапка,уровень);
	
	Для Каждого роль Из роли Цикл
		
		областьШапкаРоль = макет.ПолучитьОбласть("шапкаРолиПользователи|правоДоступа");
		областьШапкаРоль.Параметры.роль = роль.РольСиноним;
		
		табДок.Присоединить(областьШапкаРоль);
		
	КонецЦикла;
	
	#КонецОбласти
	
	запрос = Новый запрос;
	
	#Область ТекстЗапроса
	запрос.Текст = 
	"ВЫБРАТЬ
	|	пользователиСписок.Пользователь,
	|	пользователиСписок.ПрофильПользователя
	|ПОМЕСТИТЬ вт_пользователиСписок
	|ИЗ
	|	&пользователиСписок КАК пользователиСписок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_пользователиСписок.Пользователь,
	|	вт_пользователиСписок.ПрофильПользователя КАК ПрофильПользователя
	|ИЗ
	|	вт_пользователиСписок КАК вт_пользователиСписок
	|ИТОГИ ПО
	|	ПрофильПользователя";
	#КонецОбласти
	
	запрос.УстановитьПараметр("пользователиСписок",пользователиСписок);
	
	запросРезультат = запрос.Выполнить();
	
	#Область отчетРолиПользователи
	
	выборкаПрофильПользователя = запросРезультат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока выборкаПрофильПользователя.Следующий() Цикл
		
		уровень = 1;
		
		Если ЗначениеЗаполнено(выборкаПрофильПользователя.ПрофильПользователя) Тогда
			
			областьСтрока = макет.ПолучитьОбласть("строкаГруппа|роль");
			областьСтрока.Параметры.группа = выборкаПрофильПользователя.ПрофильПользователя;
			
			табДок.Вывести(областьСтрока,уровень);
			
			уровень = уровень + 1;
			
		КонецЕсли;
		
		выборкаПользователь = выборкаПрофильПользователя.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока выборкаПользователь.Следующий() Цикл
			
			областьСтрока = макет.ПолучитьОбласть("строкаРолиПользователи|роль");
			областьСтрока.Параметры.пользователь = выборкаПользователь.Пользователь;
			
			табДок.Вывести(областьСтрока,уровень);
			
			Для Каждого роль Из роли Цикл
				
				областьСтрокаРоль = макет.ПолучитьОбласть("строкаРолиПользователи|правоДоступа");
				пользовательРоль = пользователиРоли.НайтиСтроки(Новый Структура("Пользователь,Роль",выборкаПользователь.Пользователь,роль.РольСиноним));
				Если пользовательРоль.Количество() > 0 Тогда
					областьСтрокаРоль.Параметры.рольДоступна = "Х";
				КонецЕсли;
				
				табДок.Присоединить(областьСтрокаРоль);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	табДок.ЗакончитьАвтогруппировкуСтрок();
	
	#КонецОбласти
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоказать(Команда)
	
	СлужебнаяВыборка.Очистить();
	
	КомандаПоказатьНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПраваДоступаПоОбъектМетаданныхГруппа(ОбъектМетаданныхГруппа)
	
	#Область ВсеВозможныеПраваДоступа
	//Чтение (Read) - чтение; 
	//Добавление (Insert) - добавление; 
	//Изменение (Update) - изменение; 
	//Удаление (Delete) - удаление; 
	//Проведение (Posting) - проведение документов; 
	//ОтменаПроведения (UndoPosting) - отмена проведения документов; 
	//Просмотр (View) - просмотр; 
	//ИнтерактивноеДобавление (InteractiveInsert) - интерактивное добавление; 
	//Редактирование (Edit) - редактирование; 
	//ИнтерактивнаяПометкаУдаления (InteractiveSetDeletionMark) - интерактивная пометка на удаление; 
	//ИнтерактивноеСнятиеПометкиУдаления (InteractiveClearDeletionMark) - интерактивное снятие пометки на удаление; 
	//ИнтерактивноеУдалениеПомеченных (InteractiveDeleteMarked) - интерактивное удаление помеченных объектов; 
	//ИнтерактивноеПроведение (InteractivePosting) - интерактивное проведение; 
	//ИнтерактивноеПроведениеНеОперативное (InteractivePostingRegular) - интерактивное проведение (стандартными командами форм) документа в неоперативном режиме; 
	//ИнтерактивнаяОтменаПроведения (InteractiveUndoPosting) - интерактивная отмена проведения; 
	//ИнтерактивноеИзменениеПроведенных (InteractiveChangeOfPosted) - интерактивное редактирование проведенного документа. Если право не установлено, то пользователь не может проведенный документ удалить, установить пометку удаления, перепровести или сделать непроведенным. Форма такого документа открывается в режиме просмотра; 
	//ВводПоСтроке (InputByString) - использование режима ввода по строке; 
	//УправлениеИтогами (TotalsControl) - управление итогами регистра бухгалтерии и регистра накопления (установка периода, по который рассчитаны итоги, и пересчет итогов); 
	//Использование (Use) - использование; 
	//ИнтерактивноеУдаление (InteractiveDelete) - интерактивное непосредственное удаление; 
	//Администрирование (Administration) - администрирование информационной базы; требуется наличия права "Администрирование данных"; 
	//АдминистрированиеДанных (DataAdministration) - право на административные действия над данными; 
	//МонопольныйРежим (ExclusiveMode) - использование монопольного режима; 
	//АктивныеПользователи (ActiveUsers) - просмотр списка активных пользователей; 
	//ЖурналРегистрации (EventLog) - журнал регистрации; 
	//ВнешнееСоединение (ExternalConnection) - внешнее соединение; 
	//Automation (Automation) - использование automation; 
	//ИнтерактивноеОткрытиеВнешнихОбработок (InteractiveOpenExtDataProcessors) - интерактивное открытие внешних обработок; 
	//ИнтерактивноеОткрытиеВнешнихОтчетов (InteractiveOpenExtReports) - интерактивное открытие внешних отчетов; 
	//Получение (Get) - получение значения, не хранящегося в базе данных; 
	//Установка (Set) - установка значения, не сохраняемого в базе данных; 
	//ИнтерактивнаяАктивация (InteractiveActivate) - интерактивная активация; 
	//Старт (Start) - старт бизнес-процесса; 
	//ИнтерактивныйСтарт (InteractiveStart) - интерактивный старт бизнес-процесса; 
	//Выполнение (Execute) - выполнение задачи; 
	//ИнтерактивноеВыполнение (InteractiveExecute) - интерактивное выполнение задачи; 
	//Вывод (Output) - вывод на печать, запись и копирование в буфер обмена; 
	//ОбновлениеКонфигурацииБазыДанных (UpdateDataBaseConfiguration) - обновление конфигурации базы данных; 
	//ТонкийКлиент (ThinClient) - право запуска тонкого клиента; 
	//ВебКлиент (WebClient) - право запуска веб-клиента; 
	//ТолстыйКлиент (ThickClient) - право запуска толстого клиента; 
	//РежимВсеФункции (AllFunctionsMode) - право на использования режима "Все функции"; 
	//СохранениеДанныхПользователя (SaveUserData) - право на сохранение данных пользователя (настроек, избранного, истории); 
	//ИзменениеСтандартнойАутентификации (StandardAuthenticationChange) - пользователь имеет право изменять свои сохраненные параметры стандартной аутентификации внешнего источника данных;
	//ИзменениеСтандартнойАутентификацииСеанса (SessionStandardAuthenticationChange) - пользователь имеет право изменять параметры стандартной аутентификации внешнего источника данных для текущего сеанса;
	//ИзменениеАутентификацииОССеанса (SessionOSAuthenticationChange) - пользователь имеет право изменять параметры стандартной аутентификации внешнего источника данных для текущего сеанса и текущего пользователя;
	//ИнтерактивноеУдалениеПредопределенныхДанных (InteractiveDeletePredefinedData) - интерактивное удаление предопределенных данных;
	//ИнтерактивнаяПометкаУдаленияПредопределенныхДанных (InteractiveSetDeletionMarkPredefinedData) - интерактивная пометка предопределенных данных;
	//ИнтерактивноеСнятиеПометкиУдаленияПредопределенных (InteractiveClearDeletionMarkPredefinedData) - интерактивное снятие пометки предопределенных данных;
	//ИнтерактивноеУдалениеПомеченныхПредопределенныхДан (InteractiveDeleteMarkedPredefinedData) - интерактивное удаление помеченных предопределенных данных;
	//АдминистрированиеРасширенийКонфигурации (ConfigExtensionsAdministration) - право на администрирование расширений конфигурации.
	#КонецОбласти
	
	ПраваДоступа = Новый СписокЗначений;
	
	Если ОбъектМетаданныхГруппа = "Справочники" Или ОбъектМетаданныхГруппа = "Документы" Или ОбъектМетаданныхГруппа = "БизнесПроцессы" Или ОбъектМетаданныхГруппа = "Задачи" Тогда
		ПраваДоступа.Добавить("Insert","Добавление");
		ПраваДоступа.Добавить("Update","Изменение");
		ПраваДоступа.Добавить("Read","Чтение");
		ПраваДоступа.Добавить("View","Просмотр");
	ИначеЕсли ОбъектМетаданныхГруппа = "Отчеты" Или ОбъектМетаданныхГруппа = "Обработки" Тогда
		ПраваДоступа.Добавить("Use","Использование");
		ПраваДоступа.Добавить("View","Просмотр");
	ИначеЕсли ОбъектМетаданныхГруппа = "РегистрыСведений" Или ОбъектМетаданныхГруппа = "РегистрыНакопления" Тогда
		ПраваДоступа.Добавить("Update","Изменение");
		ПраваДоступа.Добавить("Read","Чтение");
		ПраваДоступа.Добавить("View","Просмотр");
	КонецЕсли;
	
	Возврат ПраваДоступа;
		
КонецФункции

#Область ДействияДереваМетаданных

&НаКлиенте
Процедура ДеревоОбъектовМетаданныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ОбъектМетаданных) Тогда
		ОбъектМетаданных = Элемент.ТекущиеДанные.ОбъектМетаданныхГруппа + "." + Элемент.ТекущиеДанные.ОбъектМетаданных;
		КомандаПоказать(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвернуть(Команда)
	ДеревоОбъектовМетаданныхСтроки = ДеревоОбъектовМетаданных.ПолучитьЭлементы();
	Для Каждого ДеревоОбъектовМетаданныхСтрока Из ДеревоОбъектовМетаданныхСтроки Цикл
		ДеревоОбъектовМетаданныхСтроки_ = ДеревоОбъектовМетаданныхСтрока.ПолучитьЭлементы();
		Для Каждого ДеревоОбъектовМетаданныхСтрока_ Из ДеревоОбъектовМетаданныхСтроки_ Цикл
			Элементы.ДеревоОбъектовМетаданных.Свернуть(ДеревоОбъектовМетаданныхСтрока_.ПолучитьИдентификатор());
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРазвернуть(Команда)
	Элементы.ДеревоОбъектовМетаданных.Развернуть(0,Истина);
КонецПроцедуры

#КонецОбласти